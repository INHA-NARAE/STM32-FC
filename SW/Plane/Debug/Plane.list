
Plane.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d740  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800d8d0  0800d8d0  0000e8d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd34  0800dd34  0000f2c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dd34  0800dd34  0000ed34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd3c  0800dd3c  0000f2c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd3c  0800dd3c  0000ed3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dd40  0800dd40  0000ed40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  0800dd44  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f2c8  2**0
                  CONTENTS
 10 .bss          00001f74  200002c8  200002c8  0000f2c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000223c  2000223c  0000f2c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f2c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015ea6  00000000  00000000  0000f2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047cf  00000000  00000000  0002519e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  00029970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ef6  00000000  00000000  0002ada8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a51c  00000000  00000000  0002bc9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a3ac  00000000  00000000  000561ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e363d  00000000  00000000  00070566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00153ba3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006134  00000000  00000000  00153be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00159d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c8 	.word	0x200002c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d8b8 	.word	0x0800d8b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	0800d8b8 	.word	0x0800d8b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a1a      	ldr	r2, [r3, #32]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	431a      	orrs	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	621a      	str	r2, [r3, #32]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a1a      	ldr	r2, [r3, #32]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	401a      	ands	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	621a      	str	r2, [r3, #32]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <BuzzerPlayNote>:

#include <FC_Basic/Buzzer.h>
#include "main.h"


void BuzzerPlayNote(Note note){
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	TIM4->ARR = APB1_CLOCKS/TIM4->PSC/tones[note];
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <BuzzerPlayNote+0x50>)
 8000f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f6a:	4a11      	ldr	r2, [pc, #68]	@ (8000fb0 <BuzzerPlayNote+0x54>)
 8000f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fac7 	bl	8000504 <__aeabi_ui2d>
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb4 <BuzzerPlayNote+0x58>)
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f82:	f7ff fc63 	bl	800084c <__aeabi_ddiv>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4c08      	ldr	r4, [pc, #32]	@ (8000fac <BuzzerPlayNote+0x50>)
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f7ff fe0a 	bl	8000ba8 <__aeabi_d2uiz>
 8000f94:	4603      	mov	r3, r0
 8000f96:	62e3      	str	r3, [r4, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 8000f98:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <BuzzerPlayNote+0x50>)
 8000f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f9c:	4a03      	ldr	r2, [pc, #12]	@ (8000fac <BuzzerPlayNote+0x50>)
 8000f9e:	085b      	lsrs	r3, r3, #1
 8000fa0:	63d3      	str	r3, [r2, #60]	@ 0x3c
	return;
 8000fa2:	bf00      	nop
}
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40000800 	.word	0x40000800
 8000fb0:	0501bd00 	.word	0x0501bd00
 8000fb4:	0800d950 	.word	0x0800d950

08000fb8 <BuzzerPlayInit>:

void BuzzerPlayInit(void){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8000fbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fc0:	4813      	ldr	r0, [pc, #76]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fc2:	f7ff ffa7 	bl	8000f14 <LL_TIM_CC_EnableChannel>
	TIM4->ARR = 21;
 8000fc6:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fc8:	2215      	movs	r2, #21
 8000fca:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 8000fcc:	4b10      	ldr	r3, [pc, #64]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd0:	4a0f      	ldr	r2, [pc, #60]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fd2:	085b      	lsrs	r3, r3, #1
 8000fd4:	63d3      	str	r3, [r2, #60]	@ 0x3c

	TIM4->PSC = 2000;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fd8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000fdc:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8000fde:	2064      	movs	r0, #100	@ 0x64
 8000fe0:	f002 fbf6 	bl	80037d0 <HAL_Delay>
	TIM4->PSC = 1500;
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fe6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000fea:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8000fec:	2064      	movs	r0, #100	@ 0x64
 8000fee:	f002 fbef 	bl	80037d0 <HAL_Delay>
	TIM4->PSC = 1000;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000ff4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ff8:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8000ffa:	2064      	movs	r0, #100	@ 0x64
 8000ffc:	f002 fbe8 	bl	80037d0 <HAL_Delay>

	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8001000:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001004:	4802      	ldr	r0, [pc, #8]	@ (8001010 <BuzzerPlayInit+0x58>)
 8001006:	f7ff ff96 	bl	8000f36 <LL_TIM_CC_DisableChannel>
	return;
 800100a:	bf00      	nop
}
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40000800 	.word	0x40000800

08001014 <BuzzerPlayOneCycle>:

void BuzzerPlayOneCycle(void){
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 800101a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800101e:	4810      	ldr	r0, [pc, #64]	@ (8001060 <BuzzerPlayOneCycle+0x4c>)
 8001020:	f7ff ff78 	bl	8000f14 <LL_TIM_CC_EnableChannel>
	TIM4->PSC = 4;
 8001024:	4b0e      	ldr	r3, [pc, #56]	@ (8001060 <BuzzerPlayOneCycle+0x4c>)
 8001026:	2204      	movs	r2, #4
 8001028:	629a      	str	r2, [r3, #40]	@ 0x28

	for (int i=0; i<8; i++){
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	e00a      	b.n	8001046 <BuzzerPlayOneCycle+0x32>
		BuzzerPlayNote(i);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff91 	bl	8000f5c <BuzzerPlayNote>
		HAL_Delay(150);
 800103a:	2096      	movs	r0, #150	@ 0x96
 800103c:	f002 fbc8 	bl	80037d0 <HAL_Delay>
	for (int i=0; i<8; i++){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3301      	adds	r3, #1
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b07      	cmp	r3, #7
 800104a:	ddf1      	ble.n	8001030 <BuzzerPlayOneCycle+0x1c>
	}
	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 800104c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001050:	4803      	ldr	r0, [pc, #12]	@ (8001060 <BuzzerPlayOneCycle+0x4c>)
 8001052:	f7ff ff70 	bl	8000f36 <LL_TIM_CC_DisableChannel>
	return;
 8001056:	bf00      	nop
}
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40000800 	.word	0x40000800

08001064 <RB_init>:
  * @param  ptRB		
  					size 		
  * @retval unsigned int 0 성공
  */
unsigned char RB_init(RingFifo_t * ptRB, unsigned short size)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]

	if(size & (size-1))
 8001070:	887a      	ldrh	r2, [r7, #2]
 8001072:	887b      	ldrh	r3, [r7, #2]
 8001074:	3b01      	subs	r3, #1
 8001076:	4013      	ands	r3, r2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <RB_init+0x24>
	{
		assert(0);
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <RB_init+0x64>)
 800107e:	4a13      	ldr	r2, [pc, #76]	@ (80010cc <RB_init+0x68>)
 8001080:	2119      	movs	r1, #25
 8001082:	4813      	ldr	r0, [pc, #76]	@ (80010d0 <RB_init+0x6c>)
 8001084:	f009 ff98 	bl	800afb8 <__assert_func>
		return 1;
	}

	ptRB->size = size;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	801a      	strh	r2, [r3, #0]
	ptRB->wrIdx= 0;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	805a      	strh	r2, [r3, #2]
	ptRB->rdIdx= 0;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	809a      	strh	r2, [r3, #4]
	ptRB->data = malloc(size);
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	4618      	mov	r0, r3
 800109e:	f009 ffa9 	bl	800aff4 <malloc>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	609a      	str	r2, [r3, #8]

	assert(ptRB->data);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d105      	bne.n	80010be <RB_init+0x5a>
 80010b2:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <RB_init+0x70>)
 80010b4:	4a05      	ldr	r2, [pc, #20]	@ (80010cc <RB_init+0x68>)
 80010b6:	2122      	movs	r1, #34	@ 0x22
 80010b8:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <RB_init+0x6c>)
 80010ba:	f009 ff7d 	bl	800afb8 <__assert_func>

	return 0;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	0800d8d0 	.word	0x0800d8d0
 80010cc:	0800d990 	.word	0x0800d990
 80010d0:	0800d8d4 	.word	0x0800d8d4
 80010d4:	0800d8f8 	.word	0x0800d8f8

080010d8 <RB_write>:
		ptRB->rdIdx= 0;
		memset(ptRB->data, 0, ptRB->size);
}

void RB_write(RingFifo_t * ptRB, unsigned char data)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	70fb      	strb	r3, [r7, #3]
  if(RB_isfull(ptRB))
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f852 	bl	800118e <RB_isfull>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d116      	bne.n	800111e <RB_write+0x46>
    return;
    
	ptRB->data[ptRB->wrIdx] = data;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	8852      	ldrh	r2, [r2, #2]
 80010f8:	4413      	add	r3, r2
 80010fa:	78fa      	ldrb	r2, [r7, #3]
 80010fc:	701a      	strb	r2, [r3, #0]
	ptRB->wrIdx = (ptRB->size-1) & (ptRB->wrIdx+1);	
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	3b01      	subs	r3, #1
 8001104:	b29b      	uxth	r3, r3
 8001106:	b21a      	sxth	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	885b      	ldrh	r3, [r3, #2]
 800110c:	3301      	adds	r3, #1
 800110e:	b29b      	uxth	r3, r3
 8001110:	b21b      	sxth	r3, r3
 8001112:	4013      	ands	r3, r2
 8001114:	b21b      	sxth	r3, r3
 8001116:	b29a      	uxth	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	805a      	strh	r2, [r3, #2]
 800111c:	e000      	b.n	8001120 <RB_write+0x48>
    return;
 800111e:	bf00      	nop
}
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <RB_read>:

unsigned char RB_read(RingFifo_t * ptRB)
{
 8001126:	b480      	push	{r7}
 8001128:	b085      	sub	sp, #20
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]

	unsigned char val = ptRB->data[ptRB->rdIdx];
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	8892      	ldrh	r2, [r2, #4]
 8001136:	4413      	add	r3, r2
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	73fb      	strb	r3, [r7, #15]
	ptRB->rdIdx = (ptRB->size-1) & (ptRB->rdIdx+1);	
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	3b01      	subs	r3, #1
 8001142:	b29b      	uxth	r3, r3
 8001144:	b21a      	sxth	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	889b      	ldrh	r3, [r3, #4]
 800114a:	3301      	adds	r3, #1
 800114c:	b29b      	uxth	r3, r3
 800114e:	b21b      	sxth	r3, r3
 8001150:	4013      	ands	r3, r2
 8001152:	b21b      	sxth	r3, r3
 8001154:	b29a      	uxth	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	809a      	strh	r2, [r3, #4]

	return val;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <RB_isempty>:

unsigned char RB_isempty(RingFifo_t * ptRB)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	return (ptRB->rdIdx == ptRB->wrIdx);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	889a      	ldrh	r2, [r3, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	885b      	ldrh	r3, [r3, #2]
 8001178:	429a      	cmp	r2, r3
 800117a:	bf0c      	ite	eq
 800117c:	2301      	moveq	r3, #1
 800117e:	2300      	movne	r3, #0
 8001180:	b2db      	uxtb	r3, r3
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <RB_isfull>:

unsigned char RB_isfull(RingFifo_t * ptRB)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
	return ((ptRB->size-1) & ptRB->rdIdx) == ((ptRB->size-1) & (ptRB->wrIdx+1));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	889b      	ldrh	r3, [r3, #4]
 800119a:	461a      	mov	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	885b      	ldrh	r3, [r3, #2]
 80011a0:	3301      	adds	r3, #1
 80011a2:	405a      	eors	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	bf0c      	ite	eq
 80011b0:	2301      	moveq	r3, #1
 80011b2:	2300      	movne	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	601a      	str	r2, [r3, #0]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f023 0210 	bic.w	r2, r3, #16
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	431a      	orrs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	605a      	str	r2, [r3, #4]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b01      	cmp	r3, #1
 800121a:	d101      	bne.n	8001220 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b02      	cmp	r3, #2
 8001240:	d101      	bne.n	8001246 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	330c      	adds	r3, #12
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b2db      	uxtb	r3, r3
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	330c      	adds	r3, #12
 8001280:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	78fa      	ldrb	r2, [r7, #3]
 8001286:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	619a      	str	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	041a      	lsls	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	619a      	str	r2, [r3, #24]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012d8:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012dc:	4907      	ldr	r1, [pc, #28]	@ (80012fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4013      	ands	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012ee:	68fb      	ldr	r3, [r7, #12]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	40023800 	.word	0x40023800

08001300 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001308:	4b08      	ldr	r3, [pc, #32]	@ (800132c <LL_APB2_GRP1_EnableClock+0x2c>)
 800130a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800130c:	4907      	ldr	r1, [pc, #28]	@ (800132c <LL_APB2_GRP1_EnableClock+0x2c>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4313      	orrs	r3, r2
 8001312:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001316:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4013      	ands	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	40023800 	.word	0x40023800

08001330 <ICM42688_GPIO_SPI_Initialization>:
GYRO_ICM42688 ICM42688;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM42688_GPIO_SPI_Initialization(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b090      	sub	sp, #64	@ 0x40
 8001334:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001336:	f107 0318 	add.w	r3, r7, #24
 800133a:	2228      	movs	r2, #40	@ 0x28
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f00a fc7b 	bl	800bc3a <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	463b      	mov	r3, r7
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001354:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001358:	f7ff ffd2 	bl	8001300 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800135c:	2001      	movs	r0, #1
 800135e:	f7ff ffb7 	bl	80012d0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8001362:	2010      	movs	r0, #16
 8001364:	f7ff ffb4 	bl	80012d0 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001368:	23e0      	movs	r3, #224	@ 0xe0
 800136a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800136c:	2302      	movs	r3, #2
 800136e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800137c:	2305      	movs	r3, #5
 800137e:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	4820      	ldr	r0, [pc, #128]	@ (8001408 <ICM42688_GPIO_SPI_Initialization+0xd8>)
 8001386:	f004 fddc 	bl	8005f42 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800138a:	2300      	movs	r3, #0
 800138c:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800138e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001392:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001398:	2302      	movs	r3, #2
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800139c:	2301      	movs	r3, #1
 800139e:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80013a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-42688 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 80013a6:	2310      	movs	r3, #16
 80013a8:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80013aa:	2300      	movs	r3, #0
 80013ac:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 80013b2:	230a      	movs	r3, #10
 80013b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM42688_SPI_CHANNEL, &SPI_InitStruct);
 80013b6:	f107 0318 	add.w	r3, r7, #24
 80013ba:	4619      	mov	r1, r3
 80013bc:	4813      	ldr	r0, [pc, #76]	@ (800140c <ICM42688_GPIO_SPI_Initialization+0xdc>)
 80013be:	f004 ff9a 	bl	80062f6 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM42688_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80013c2:	2100      	movs	r1, #0
 80013c4:	4811      	ldr	r0, [pc, #68]	@ (800140c <ICM42688_GPIO_SPI_Initialization+0xdc>)
 80013c6:	f7ff ff0c 	bl	80011e2 <LL_SPI_SetStandard>
	/**ICM42688 GPIO Control Configuration
	 * PC4  ------> ICM42688_SPI_CS_PIN (output)
	 * PC5  ------> ICM42688_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM42688_SPI_CS_PORT, ICM42688_SPI_CS_PIN);
 80013ca:	2120      	movs	r1, #32
 80013cc:	4810      	ldr	r0, [pc, #64]	@ (8001410 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 80013ce:	f7ff ff6f 	bl	80012b0 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM42688_SPI_CS_PIN;
 80013d2:	2320      	movs	r3, #32
 80013d4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013d6:	2301      	movs	r3, #1
 80013d8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM42688_SPI_CS_PORT, &GPIO_InitStruct);
 80013e6:	463b      	mov	r3, r7
 80013e8:	4619      	mov	r1, r3
 80013ea:	4809      	ldr	r0, [pc, #36]	@ (8001410 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 80013ec:	f004 fda9 	bl	8005f42 <LL_GPIO_Init>
//	GPIO_InitStruct.Pin = ICM42688_INT_PIN;
//	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	LL_GPIO_Init(ICM42688_INT_PORT, &GPIO_InitStruct);

	LL_SPI_Enable(ICM42688_SPI_CHANNEL);
 80013f0:	4806      	ldr	r0, [pc, #24]	@ (800140c <ICM42688_GPIO_SPI_Initialization+0xdc>)
 80013f2:	f7ff fee6 	bl	80011c2 <LL_SPI_Enable>

	CHIP_DESELECT(ICM42688);
 80013f6:	2120      	movs	r1, #32
 80013f8:	4805      	ldr	r0, [pc, #20]	@ (8001410 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 80013fa:	f7ff ff4b 	bl	8001294 <LL_GPIO_SetOutputPin>
}
 80013fe:	bf00      	nop
 8001400:	3740      	adds	r7, #64	@ 0x40
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40020000 	.word	0x40020000
 800140c:	40013000 	.word	0x40013000
 8001410:	40021000 	.word	0x40021000

08001414 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM42688_SPI_CHANNEL)==RESET);
 800141e:	bf00      	nop
 8001420:	480c      	ldr	r0, [pc, #48]	@ (8001454 <SPI1_SendByte+0x40>)
 8001422:	f7ff ff04 	bl	800122e <LL_SPI_IsActiveFlag_TXE>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f9      	beq.n	8001420 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM42688_SPI_CHANNEL, data);
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	4619      	mov	r1, r3
 8001430:	4808      	ldr	r0, [pc, #32]	@ (8001454 <SPI1_SendByte+0x40>)
 8001432:	f7ff ff1d 	bl	8001270 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM42688_SPI_CHANNEL)==RESET);
 8001436:	bf00      	nop
 8001438:	4806      	ldr	r0, [pc, #24]	@ (8001454 <SPI1_SendByte+0x40>)
 800143a:	f7ff fee5 	bl	8001208 <LL_SPI_IsActiveFlag_RXNE>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f9      	beq.n	8001438 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM42688_SPI_CHANNEL);
 8001444:	4803      	ldr	r0, [pc, #12]	@ (8001454 <SPI1_SendByte+0x40>)
 8001446:	f7ff ff05 	bl	8001254 <LL_SPI_ReceiveData8>
 800144a:	4603      	mov	r3, r0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40013000 	.word	0x40013000

08001458 <ICM42688_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM42688_Readbyte(uint8_t reg_addr)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM42688);
 8001462:	2120      	movs	r1, #32
 8001464:	480b      	ldr	r0, [pc, #44]	@ (8001494 <ICM42688_Readbyte+0x3c>)
 8001466:	f7ff ff23 	bl	80012b0 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001470:	b2db      	uxtb	r3, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ffce 	bl	8001414 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001478:	2000      	movs	r0, #0
 800147a:	f7ff ffcb 	bl	8001414 <SPI1_SendByte>
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM42688);
 8001482:	2120      	movs	r1, #32
 8001484:	4803      	ldr	r0, [pc, #12]	@ (8001494 <ICM42688_Readbyte+0x3c>)
 8001486:	f7ff ff05 	bl	8001294 <LL_GPIO_SetOutputPin>
	
	return val;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40021000 	.word	0x40021000

08001498 <ICM42688_Readbytes>:

void ICM42688_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	603a      	str	r2, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
 80014a4:	460b      	mov	r3, r1
 80014a6:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM42688);
 80014ac:	2120      	movs	r1, #32
 80014ae:	4810      	ldr	r0, [pc, #64]	@ (80014f0 <ICM42688_Readbytes+0x58>)
 80014b0:	f7ff fefe 	bl	80012b0 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ffa9 	bl	8001414 <SPI1_SendByte>
	while(i < len)
 80014c2:	e009      	b.n	80014d8 <ICM42688_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	60fa      	str	r2, [r7, #12]
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	18d4      	adds	r4, r2, r3
 80014ce:	2000      	movs	r0, #0
 80014d0:	f7ff ffa0 	bl	8001414 <SPI1_SendByte>
 80014d4:	4603      	mov	r3, r0
 80014d6:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80014d8:	79bb      	ldrb	r3, [r7, #6]
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d3f1      	bcc.n	80014c4 <ICM42688_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM42688);
 80014e0:	2120      	movs	r1, #32
 80014e2:	4803      	ldr	r0, [pc, #12]	@ (80014f0 <ICM42688_Readbytes+0x58>)
 80014e4:	f7ff fed6 	bl	8001294 <LL_GPIO_SetOutputPin>
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd90      	pop	{r4, r7, pc}
 80014f0:	40021000 	.word	0x40021000

080014f4 <ICM42688_Writebyte>:

void ICM42688_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	460a      	mov	r2, r1
 80014fe:	71fb      	strb	r3, [r7, #7]
 8001500:	4613      	mov	r3, r2
 8001502:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM42688);
 8001504:	2120      	movs	r1, #32
 8001506:	480b      	ldr	r0, [pc, #44]	@ (8001534 <ICM42688_Writebyte+0x40>)
 8001508:	f7ff fed2 	bl	80012b0 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff7d 	bl	8001414 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 800151a:	79bb      	ldrb	r3, [r7, #6]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff79 	bl	8001414 <SPI1_SendByte>
	CHIP_DESELECT(ICM42688);
 8001522:	2120      	movs	r1, #32
 8001524:	4803      	ldr	r0, [pc, #12]	@ (8001534 <ICM42688_Writebyte+0x40>)
 8001526:	f7ff feb5 	bl	8001294 <LL_GPIO_SetOutputPin>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000

08001538 <ICM42688_Initialization>:
	CHIP_DESELECT(ICM42688);
}


int ICM42688_Initialization(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001542:	f107 0308 	add.w	r3, r7, #8
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 800154c:	463b      	mov	r3, r7
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	809a      	strh	r2, [r3, #4]
	
	ICM42688_GPIO_SPI_Initialization();
 8001554:	f7ff feec 	bl	8001330 <ICM42688_GPIO_SPI_Initialization>
	
	// printf("Checking ICM42688...\n\r");
	
	who_am_i = ICM42688_Readbyte(WHO_AM_I); 
 8001558:	2075      	movs	r0, #117	@ 0x75
 800155a:	f7ff ff7d 	bl	8001458 <ICM42688_Readbyte>
 800155e:	4603      	mov	r3, r0
 8001560:	73fb      	strb	r3, [r7, #15]

	if(who_am_i == 0x47)
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	2b47      	cmp	r3, #71	@ 0x47
 8001566:	d00c      	beq.n	8001582 <ICM42688_Initialization+0x4a>
	{
		// printf("ICM42688 who_am_i = 0x%02x...OK\n\r", who_am_i);
	}
	// recheck
	else if(who_am_i != 0x47)
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	2b47      	cmp	r3, #71	@ 0x47
 800156c:	d009      	beq.n	8001582 <ICM42688_Initialization+0x4a>
	{
		who_am_i = ICM42688_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 800156e:	2075      	movs	r0, #117	@ 0x75
 8001570:	f7ff ff72 	bl	8001458 <ICM42688_Readbyte>
 8001574:	4603      	mov	r3, r0
 8001576:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	2b12      	cmp	r3, #18
 800157c:	d001      	beq.n	8001582 <ICM42688_Initialization+0x4a>
			// printf( "ICM42688 Not OK: 0x%02x Should be 0x%02x\n\r", who_am_i, 0x12);
			return 1; //ERROR
 800157e:	2301      	movs	r3, #1
 8001580:	e02a      	b.n	80015d8 <ICM42688_Initialization+0xa0>
		}
	}
	
	// PWR_MGMT0
	ICM42688_Writebyte(PWR_MGMT0, 0x0F); // Temp on, ACC, GYRO LPF Mode
 8001582:	210f      	movs	r1, #15
 8001584:	204e      	movs	r0, #78	@ 0x4e
 8001586:	f7ff ffb5 	bl	80014f4 <ICM42688_Writebyte>
	HAL_Delay(50);
 800158a:	2032      	movs	r0, #50	@ 0x32
 800158c:	f002 f920 	bl	80037d0 <HAL_Delay>

	
	// GYRO_CONFIG0
	ICM42688_Writebyte(GYRO_CONFIG0, 0x06); // Gyro sensitivity 2000 dps, 1kHz
 8001590:	2106      	movs	r1, #6
 8001592:	204f      	movs	r0, #79	@ 0x4f
 8001594:	f7ff ffae 	bl	80014f4 <ICM42688_Writebyte>
	HAL_Delay(50);
 8001598:	2032      	movs	r0, #50	@ 0x32
 800159a:	f002 f919 	bl	80037d0 <HAL_Delay>
	ICM42688_Writebyte(GYRO_CONFIG1, 0x00); // Gyro temp DLPF 4kHz, UI Filter 1st, 	DEC2_M2 reserved
 800159e:	2100      	movs	r1, #0
 80015a0:	2051      	movs	r0, #81	@ 0x51
 80015a2:	f7ff ffa7 	bl	80014f4 <ICM42688_Writebyte>
	HAL_Delay(50);
 80015a6:	2032      	movs	r0, #50	@ 0x32
 80015a8:	f002 f912 	bl	80037d0 <HAL_Delay>

	ICM42688_Writebyte(ACCEL_CONFIG0, 0x06); // Acc sensitivity 16g, 1kHz
 80015ac:	2106      	movs	r1, #6
 80015ae:	2050      	movs	r0, #80	@ 0x50
 80015b0:	f7ff ffa0 	bl	80014f4 <ICM42688_Writebyte>
	HAL_Delay(50);
 80015b4:	2032      	movs	r0, #50	@ 0x32
 80015b6:	f002 f90b 	bl	80037d0 <HAL_Delay>
	ICM42688_Writebyte(ACCEL_CONFIG1, 0x00); // Acc UI Filter 1st, 	DEC2_M2 reserved
 80015ba:	2100      	movs	r1, #0
 80015bc:	2053      	movs	r0, #83	@ 0x53
 80015be:	f7ff ff99 	bl	80014f4 <ICM42688_Writebyte>
	HAL_Delay(50);
 80015c2:	2032      	movs	r0, #50	@ 0x32
 80015c4:	f002 f904 	bl	80037d0 <HAL_Delay>

	ICM42688_Writebyte(GYRO_ACCEL_CONFIG0, 0x11); // LPF default max(400Hz,ODR)/4
 80015c8:	2111      	movs	r1, #17
 80015ca:	2052      	movs	r0, #82	@ 0x52
 80015cc:	f7ff ff92 	bl	80014f4 <ICM42688_Writebyte>
	HAL_Delay(50);
 80015d0:	2032      	movs	r0, #50	@ 0x32
 80015d2:	f002 f8fd 	bl	80037d0 <HAL_Delay>
//	HAL_Delay(50);
	
	// printf("gyro bias: %d %d %d\n", gyro_x_offset, gyro_y_offset, gyro_z_offset);
	
	// Remove Gyro X offset
	return 0; //OK
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <ICM42688_Get6AxisRawData>:

void ICM42688_Get6AxisRawData()
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
	unsigned char data[14];

	ICM42688_Readbytes(ACCEL_DATA_X1, 14, data);
 80015e6:	463b      	mov	r3, r7
 80015e8:	461a      	mov	r2, r3
 80015ea:	210e      	movs	r1, #14
 80015ec:	201f      	movs	r0, #31
 80015ee:	f7ff ff53 	bl	8001498 <ICM42688_Readbytes>
	
	ICM42688.temperature_raw = (data[0] << 8) | data[1];
 80015f2:	783b      	ldrb	r3, [r7, #0]
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	b21a      	sxth	r2, r3
 80015fa:	787b      	ldrb	r3, [r7, #1]
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	4313      	orrs	r3, r2
 8001600:	b21a      	sxth	r2, r3
 8001602:	4b21      	ldr	r3, [pc, #132]	@ (8001688 <ICM42688_Get6AxisRawData+0xa8>)
 8001604:	801a      	strh	r2, [r3, #0]
	ICM42688.acc_x_raw = (data[2] << 8) | data[3];
 8001606:	78bb      	ldrb	r3, [r7, #2]
 8001608:	b21b      	sxth	r3, r3
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	b21a      	sxth	r2, r3
 800160e:	78fb      	ldrb	r3, [r7, #3]
 8001610:	b21b      	sxth	r3, r3
 8001612:	4313      	orrs	r3, r2
 8001614:	b21a      	sxth	r2, r3
 8001616:	4b1c      	ldr	r3, [pc, #112]	@ (8001688 <ICM42688_Get6AxisRawData+0xa8>)
 8001618:	805a      	strh	r2, [r3, #2]
	ICM42688.acc_y_raw = (data[4] << 8) | data[5];
 800161a:	793b      	ldrb	r3, [r7, #4]
 800161c:	b21b      	sxth	r3, r3
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	b21a      	sxth	r2, r3
 8001622:	797b      	ldrb	r3, [r7, #5]
 8001624:	b21b      	sxth	r3, r3
 8001626:	4313      	orrs	r3, r2
 8001628:	b21a      	sxth	r2, r3
 800162a:	4b17      	ldr	r3, [pc, #92]	@ (8001688 <ICM42688_Get6AxisRawData+0xa8>)
 800162c:	809a      	strh	r2, [r3, #4]
	ICM42688.acc_z_raw = ((data[6] << 8) | data[7]);
 800162e:	79bb      	ldrb	r3, [r7, #6]
 8001630:	b21b      	sxth	r3, r3
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21a      	sxth	r2, r3
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	b21b      	sxth	r3, r3
 800163a:	4313      	orrs	r3, r2
 800163c:	b21a      	sxth	r2, r3
 800163e:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <ICM42688_Get6AxisRawData+0xa8>)
 8001640:	80da      	strh	r2, [r3, #6]
	ICM42688.gyro_x_raw = ((data[8] << 8) | data[9]);
 8001642:	7a3b      	ldrb	r3, [r7, #8]
 8001644:	b21b      	sxth	r3, r3
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	b21a      	sxth	r2, r3
 800164a:	7a7b      	ldrb	r3, [r7, #9]
 800164c:	b21b      	sxth	r3, r3
 800164e:	4313      	orrs	r3, r2
 8001650:	b21a      	sxth	r2, r3
 8001652:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <ICM42688_Get6AxisRawData+0xa8>)
 8001654:	811a      	strh	r2, [r3, #8]
	ICM42688.gyro_y_raw = ((data[10] << 8) | data[11]);
 8001656:	7abb      	ldrb	r3, [r7, #10]
 8001658:	b21b      	sxth	r3, r3
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	b21a      	sxth	r2, r3
 800165e:	7afb      	ldrb	r3, [r7, #11]
 8001660:	b21b      	sxth	r3, r3
 8001662:	4313      	orrs	r3, r2
 8001664:	b21a      	sxth	r2, r3
 8001666:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <ICM42688_Get6AxisRawData+0xa8>)
 8001668:	815a      	strh	r2, [r3, #10]
	ICM42688.gyro_z_raw = ((data[12] << 8) | data[13]);
 800166a:	7b3b      	ldrb	r3, [r7, #12]
 800166c:	b21b      	sxth	r3, r3
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	b21a      	sxth	r2, r3
 8001672:	7b7b      	ldrb	r3, [r7, #13]
 8001674:	b21b      	sxth	r3, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	b21a      	sxth	r2, r3
 800167a:	4b03      	ldr	r3, [pc, #12]	@ (8001688 <ICM42688_Get6AxisRawData+0xa8>)
 800167c:	819a      	strh	r2, [r3, #12]
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200002e4 	.word	0x200002e4

0800168c <Log_Send>:

SYSTEM_TIME system_time;

/* Functions -----------------------------------------------------------------*/
int Log_Send()
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
	const uint8_t code = 0xFD;
 8001692:	23fd      	movs	r3, #253	@ 0xfd
 8001694:	71fb      	strb	r3, [r7, #7]
	static uint32_t previous_time = 0;

	if(!(system_time.time_boot_ms - previous_time > 500)) return -1;
 8001696:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <Log_Send+0x54>)
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	4b12      	ldr	r3, [pc, #72]	@ (80016e4 <Log_Send+0x58>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016a4:	d802      	bhi.n	80016ac <Log_Send+0x20>
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	e015      	b.n	80016d8 <Log_Send+0x4c>
	previous_time = system_time.time_boot_ms;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <Log_Send+0x54>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4a0c      	ldr	r2, [pc, #48]	@ (80016e4 <Log_Send+0x58>)
 80016b2:	6013      	str	r3, [r2, #0]

	while(1 == CDC_Transmit_FS(&code, sizeof(code))) {}
 80016b4:	bf00      	nop
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	2101      	movs	r1, #1
 80016ba:	4618      	mov	r0, r3
 80016bc:	f009 f820 	bl	800a700 <CDC_Transmit_FS>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d0f7      	beq.n	80016b6 <Log_Send+0x2a>
	while(1 == CDC_Transmit_FS(&RC_channels, sizeof(RC_CHANNELS))) {}
 80016c6:	bf00      	nop
 80016c8:	212a      	movs	r1, #42	@ 0x2a
 80016ca:	4807      	ldr	r0, [pc, #28]	@ (80016e8 <Log_Send+0x5c>)
 80016cc:	f009 f818 	bl	800a700 <CDC_Transmit_FS>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d0f8      	beq.n	80016c8 <Log_Send+0x3c>
	// while(1 == CDC_Transmit_FS(&RC_channels, sizeof(RC_CHANNELS))) {}
	return 0;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	2000030c 	.word	0x2000030c
 80016e4:	20000318 	.word	0x20000318
 80016e8:	2000032c 	.word	0x2000032c

080016ec <PARM_load>:
	DroneCAN = 14,
	Ghost	 = 15,
	MAVRadio = 16,
};

int PARM_load(void){
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
	PARM_rc.PROTOCOLS = (0x1<<SRXL2);
 80016f2:	4b39      	ldr	r3, [pc, #228]	@ (80017d8 <PARM_load+0xec>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f042 0201 	orr.w	r2, r2, #1
 80016fe:	705a      	strb	r2, [r3, #1]
	PARM_rc.FS_TIMEOUT = 1.0;
 8001700:	4b35      	ldr	r3, [pc, #212]	@ (80017d8 <PARM_load+0xec>)
 8001702:	3302      	adds	r3, #2
 8001704:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001708:	601a      	str	r2, [r3, #0]
	PARM_rc.reversedMask = 0x00;
 800170a:	4b33      	ldr	r3, [pc, #204]	@ (80017d8 <PARM_load+0xec>)
 800170c:	2200      	movs	r2, #0
 800170e:	719a      	strb	r2, [r3, #6]
 8001710:	2200      	movs	r2, #0
 8001712:	71da      	strb	r2, [r3, #7]
 8001714:	2200      	movs	r2, #0
 8001716:	721a      	strb	r2, [r3, #8]
 8001718:	2200      	movs	r2, #0
 800171a:	725a      	strb	r2, [r3, #9]

	for(int i=0; i<RC_CHANNEL_MAX; i++)
 800171c:	2300      	movs	r3, #0
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	e03f      	b.n	80017a2 <PARM_load+0xb6>
	{
		PARM_rc.CHANNEL[i].MIN = 1000;
 8001722:	492d      	ldr	r1, [pc, #180]	@ (80017d8 <PARM_load+0xec>)
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	4413      	add	r3, r2
 800172c:	440b      	add	r3, r1
 800172e:	3308      	adds	r3, #8
 8001730:	2200      	movs	r2, #0
 8001732:	f062 0217 	orn	r2, r2, #23
 8001736:	709a      	strb	r2, [r3, #2]
 8001738:	2200      	movs	r2, #0
 800173a:	f042 0203 	orr.w	r2, r2, #3
 800173e:	70da      	strb	r2, [r3, #3]
		PARM_rc.CHANNEL[i].MAX = 2000;
 8001740:	4925      	ldr	r1, [pc, #148]	@ (80017d8 <PARM_load+0xec>)
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	4613      	mov	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	4413      	add	r3, r2
 800174a:	440b      	add	r3, r1
 800174c:	3308      	adds	r3, #8
 800174e:	2200      	movs	r2, #0
 8001750:	f062 022f 	orn	r2, r2, #47	@ 0x2f
 8001754:	711a      	strb	r2, [r3, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f042 0207 	orr.w	r2, r2, #7
 800175c:	715a      	strb	r2, [r3, #5]
		PARM_rc.CHANNEL[i].TRIM = 0;
 800175e:	491e      	ldr	r1, [pc, #120]	@ (80017d8 <PARM_load+0xec>)
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4413      	add	r3, r2
 8001768:	440b      	add	r3, r1
 800176a:	3308      	adds	r3, #8
 800176c:	2200      	movs	r2, #0
 800176e:	719a      	strb	r2, [r3, #6]
 8001770:	2200      	movs	r2, #0
 8001772:	71da      	strb	r2, [r3, #7]
		PARM_rc.CHANNEL[i].DZ = 0;
 8001774:	4918      	ldr	r1, [pc, #96]	@ (80017d8 <PARM_load+0xec>)
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	4413      	add	r3, r2
 800177e:	440b      	add	r3, r1
 8001780:	3310      	adds	r3, #16
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
		PARM_rc.CHANNEL[i].OPTION = 0;
 8001786:	4914      	ldr	r1, [pc, #80]	@ (80017d8 <PARM_load+0xec>)
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4413      	add	r3, r2
 8001790:	440b      	add	r3, r1
 8001792:	3308      	adds	r3, #8
 8001794:	2200      	movs	r2, #0
 8001796:	725a      	strb	r2, [r3, #9]
 8001798:	2200      	movs	r2, #0
 800179a:	729a      	strb	r2, [r3, #10]
	for(int i=0; i<RC_CHANNEL_MAX; i++)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3301      	adds	r3, #1
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b1f      	cmp	r3, #31
 80017a6:	ddbc      	ble.n	8001722 <PARM_load+0x36>
	}
	PARM_rc.MAP.THR = 0;
 80017a8:	4b0b      	ldr	r3, [pc, #44]	@ (80017d8 <PARM_load+0xec>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
	PARM_rc.MAP.ROL = 1;
 80017b0:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <PARM_load+0xec>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
	PARM_rc.MAP.PIT = 2;
 80017b8:	4b07      	ldr	r3, [pc, #28]	@ (80017d8 <PARM_load+0xec>)
 80017ba:	2202      	movs	r2, #2
 80017bc:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
	PARM_rc.MAP.YAW = 3;
 80017c0:	4b05      	ldr	r3, [pc, #20]	@ (80017d8 <PARM_load+0xec>)
 80017c2:	2203      	movs	r2, #3
 80017c4:	f883 212d 	strb.w	r2, [r3, #301]	@ 0x12d
}
 80017c8:	bf00      	nop
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	200003d4 	.word	0x200003d4

080017dc <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ec:	2b80      	cmp	r3, #128	@ 0x80
 80017ee:	bf0c      	ite	eq
 80017f0:	2301      	moveq	r3, #1
 80017f2:	2300      	movne	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	460b      	mov	r3, r1
 800180c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800180e:	78fa      	ldrb	r2, [r7, #3]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	605a      	str	r2, [r3, #4]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <RC_halfDuplex_Transmit>:
 * @retval -1 : 송신 실패.
 *
 * +디버깅을 위해 PC1 (RSSI)에 GPIO 연결함
 */
int RC_halfDuplex_Transmit(uint8_t *data, uint8_t len)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	70fb      	strb	r3, [r7, #3]
	if(RC_rxFlag.half_using == 1) return -1;
 800182c:	4b18      	ldr	r3, [pc, #96]	@ (8001890 <RC_halfDuplex_Transmit+0x70>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <RC_halfDuplex_Transmit+0x20>
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
 800183e:	e023      	b.n	8001888 <RC_halfDuplex_Transmit+0x68>

	RC_rxFlag.half_using = 1;
 8001840:	4a13      	ldr	r2, [pc, #76]	@ (8001890 <RC_halfDuplex_Transmit+0x70>)
 8001842:	7813      	ldrb	r3, [r2, #0]
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	7013      	strb	r3, [r2, #0]
	RC_rxFlag.half_tx = 1;
 800184a:	4a11      	ldr	r2, [pc, #68]	@ (8001890 <RC_halfDuplex_Transmit+0x70>)
 800184c:	7813      	ldrb	r3, [r2, #0]
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	7013      	strb	r3, [r2, #0]

	for(int i=0; i<len; i++){
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	e011      	b.n	800187e <RC_halfDuplex_Transmit+0x5e>
		while(!LL_USART_IsActiveFlag_TXE(USART1));
 800185a:	bf00      	nop
 800185c:	480d      	ldr	r0, [pc, #52]	@ (8001894 <RC_halfDuplex_Transmit+0x74>)
 800185e:	f7ff ffbd 	bl	80017dc <LL_USART_IsActiveFlag_TXE>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f9      	beq.n	800185c <RC_halfDuplex_Transmit+0x3c>
		LL_USART_TransmitData8(USART1, data[i]);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	4808      	ldr	r0, [pc, #32]	@ (8001894 <RC_halfDuplex_Transmit+0x74>)
 8001874:	f7ff ffc5 	bl	8001802 <LL_USART_TransmitData8>
	for(int i=0; i<len; i++){
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3301      	adds	r3, #1
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	78fb      	ldrb	r3, [r7, #3]
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	429a      	cmp	r2, r3
 8001884:	dbe9      	blt.n	800185a <RC_halfDuplex_Transmit+0x3a>

		// while(!LL_USART_IsActiveFlag_TC(USART1));
	}
	return 0;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000328 	.word	0x20000328
 8001894:	40011000 	.word	0x40011000

08001898 <map>:
 * @parm uint16_t in_max : x의 최댓값
 * @parm uint16_t out_min : x의 최솟값
 * @parm uint16_t out_max : x의 최댓값
 * @retVal uint16_t : 변환 값
 */
uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 8001898:	b490      	push	{r4, r7}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	4604      	mov	r4, r0
 80018a0:	4608      	mov	r0, r1
 80018a2:	4611      	mov	r1, r2
 80018a4:	461a      	mov	r2, r3
 80018a6:	4623      	mov	r3, r4
 80018a8:	80fb      	strh	r3, [r7, #6]
 80018aa:	4603      	mov	r3, r0
 80018ac:	80bb      	strh	r3, [r7, #4]
 80018ae:	460b      	mov	r3, r1
 80018b0:	807b      	strh	r3, [r7, #2]
 80018b2:	4613      	mov	r3, r2
 80018b4:	803b      	strh	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80018b6:	88fa      	ldrh	r2, [r7, #6]
 80018b8:	88bb      	ldrh	r3, [r7, #4]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	8a39      	ldrh	r1, [r7, #16]
 80018be:	883a      	ldrh	r2, [r7, #0]
 80018c0:	1a8a      	subs	r2, r1, r2
 80018c2:	fb03 f202 	mul.w	r2, r3, r2
 80018c6:	8879      	ldrh	r1, [r7, #2]
 80018c8:	88bb      	ldrh	r3, [r7, #4]
 80018ca:	1acb      	subs	r3, r1, r3
 80018cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	883b      	ldrh	r3, [r7, #0]
 80018d4:	4413      	add	r3, r2
 80018d6:	b29b      	uxth	r3, r3
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc90      	pop	{r4, r7}
 80018e0:	4770      	bx	lr
	...

080018e4 <SRXL2_Initialization>:

/* driver_SRXL2.h ------------------------------------------------------------*/
/*
 * @brief 수신 데이터를 받기 위한 링버퍼 설정
 */
int SRXL2_Initialization(void){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	while(RB_init(&RC_rxRingFifo, SRXL2_RING_BUFFER_SIZE));
 80018e8:	bf00      	nop
 80018ea:	2180      	movs	r1, #128	@ 0x80
 80018ec:	4804      	ldr	r0, [pc, #16]	@ (8001900 <SRXL2_Initialization+0x1c>)
 80018ee:	f7ff fbb9 	bl	8001064 <RB_init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f8      	bne.n	80018ea <SRXL2_Initialization+0x6>

	return 0;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	2000031c 	.word	0x2000031c

08001904 <SRXL2_Connect>:

/*
 * @brief 수신기와 연결
 * @detail 수신기와 연결하기 위한 Handshake 절차 수행
 */
int SRXL2_Connect(void){
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
	SRXL2_Header *header = &packet.header;
 800190a:	4b2f      	ldr	r3, [pc, #188]	@ (80019c8 <SRXL2_Connect+0xc4>)
 800190c:	617b      	str	r3, [r7, #20]
	SRXL2_Handshake_Data* rx;
	SRXL2_Handshake_Packet tx_packet;

	while(1)
	{
		if(SRXL2_readByte() != 0) continue;
 800190e:	f000 f893 	bl	8001a38 <SRXL2_readByte>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d145      	bne.n	80019a4 <SRXL2_Connect+0xa0>
		if(calculate_crc(SRXL2_data, header->len) != packet.crc) continue;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	789b      	ldrb	r3, [r3, #2]
 800191c:	4619      	mov	r1, r3
 800191e:	482b      	ldr	r0, [pc, #172]	@ (80019cc <SRXL2_Connect+0xc8>)
 8001920:	f000 fa74 	bl	8001e0c <calculate_crc>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	4b27      	ldr	r3, [pc, #156]	@ (80019c8 <SRXL2_Connect+0xc4>)
 800192a:	f8b3 3013 	ldrh.w	r3, [r3, #19]
 800192e:	b29b      	uxth	r3, r3
 8001930:	429a      	cmp	r2, r3
 8001932:	d139      	bne.n	80019a8 <SRXL2_Connect+0xa4>

		switch(header->pType)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	785b      	ldrb	r3, [r3, #1]
 8001938:	2b21      	cmp	r3, #33	@ 0x21
 800193a:	d003      	beq.n	8001944 <SRXL2_Connect+0x40>
 800193c:	2bcd      	cmp	r3, #205	@ 0xcd
 800193e:	d135      	bne.n	80019ac <SRXL2_Connect+0xa8>
		{
		case SRXL_CTRL_ID:
			return 2;
 8001940:	2302      	movs	r3, #2
 8001942:	e03d      	b.n	80019c0 <SRXL2_Connect+0xbc>
		case SRXL_HANDSHAKE_ID:
			rx = &(((SRXL2_Handshake_Packet *) SRXL2_data)->data);
 8001944:	4b22      	ldr	r3, [pc, #136]	@ (80019d0 <SRXL2_Connect+0xcc>)
 8001946:	613b      	str	r3, [r7, #16]

			// 수신기의 ID를 가져옴
			if((rx->SrcID)>>4 == 0x1)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b01      	cmp	r3, #1
 8001952:	d10e      	bne.n	8001972 <SRXL2_Connect+0x6e>
			{
				receiver_info.SrcID = rx->SrcID;
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	781a      	ldrb	r2, [r3, #0]
 8001958:	4b1e      	ldr	r3, [pc, #120]	@ (80019d4 <SRXL2_Connect+0xd0>)
 800195a:	701a      	strb	r2, [r3, #0]
				receiver_info.Info = rx->Info;
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	791a      	ldrb	r2, [r3, #4]
 8001960:	4b1c      	ldr	r3, [pc, #112]	@ (80019d4 <SRXL2_Connect+0xd0>)
 8001962:	711a      	strb	r2, [r3, #4]
				receiver_info.UID = rx->UID;
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800196a:	4a1a      	ldr	r2, [pc, #104]	@ (80019d4 <SRXL2_Connect+0xd0>)
 800196c:	f8c2 3005 	str.w	r3, [r2, #5]
				break;
 8001970:	e000      	b.n	8001974 <SRXL2_Connect+0x70>
			}
			break;
 8001972:	bf00      	nop
		default:
			continue;
		}

		break;
 8001974:	bf00      	nop
	}

	tx_packet.header.speckrum_id = SPEKTRUM_SRXL_ID;
 8001976:	23a6      	movs	r3, #166	@ 0xa6
 8001978:	703b      	strb	r3, [r7, #0]
	tx_packet.header.pType = SRXL_HANDSHAKE_ID;
 800197a:	2321      	movs	r3, #33	@ 0x21
 800197c:	707b      	strb	r3, [r7, #1]
	tx_packet.header.len = sizeof(SRXL2_Handshake_Packet);
 800197e:	230e      	movs	r3, #14
 8001980:	70bb      	strb	r3, [r7, #2]

	tx_packet.data.SrcID = SRXL_FC_DEVICE_ID;
 8001982:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <SRXL2_Connect+0xd4>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	70fb      	strb	r3, [r7, #3]
	tx_packet.data.DestID = receiver_info.SrcID;
 8001988:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <SRXL2_Connect+0xd0>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	713b      	strb	r3, [r7, #4]
	tx_packet.data.Priority = 0x60;
 800198e:	2360      	movs	r3, #96	@ 0x60
 8001990:	717b      	strb	r3, [r7, #5]
	tx_packet.data.BaudRate = SRXL_BAUD_115200;
 8001992:	2300      	movs	r3, #0
 8001994:	71bb      	strb	r3, [r7, #6]
	tx_packet.data.Info = 0x01;
 8001996:	2301      	movs	r3, #1
 8001998:	71fb      	strb	r3, [r7, #7]
	tx_packet.data.UID = 0x12345678;
 800199a:	4b10      	ldr	r3, [pc, #64]	@ (80019dc <SRXL2_Connect+0xd8>)
 800199c:	60bb      	str	r3, [r7, #8]

	tx_packet.crc = 0x0000;
 800199e:	2300      	movs	r3, #0
 80019a0:	81bb      	strh	r3, [r7, #12]

	while(SRXL2_doHandshake(&tx_packet));
 80019a2:	e005      	b.n	80019b0 <SRXL2_Connect+0xac>
		if(SRXL2_readByte() != 0) continue;
 80019a4:	bf00      	nop
 80019a6:	e7b2      	b.n	800190e <SRXL2_Connect+0xa>
		if(calculate_crc(SRXL2_data, header->len) != packet.crc) continue;
 80019a8:	bf00      	nop
 80019aa:	e7b0      	b.n	800190e <SRXL2_Connect+0xa>
			continue;
 80019ac:	bf00      	nop
		if(SRXL2_readByte() != 0) continue;
 80019ae:	e7ae      	b.n	800190e <SRXL2_Connect+0xa>
	while(SRXL2_doHandshake(&tx_packet));
 80019b0:	463b      	mov	r3, r7
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f9f0 	bl	8001d98 <SRXL2_doHandshake>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f8      	bne.n	80019b0 <SRXL2_Connect+0xac>

	return 0;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200003a8 	.word	0x200003a8
 80019cc:	20000358 	.word	0x20000358
 80019d0:	2000035b 	.word	0x2000035b
 80019d4:	200003c0 	.word	0x200003c0
 80019d8:	20000000 	.word	0x20000000
 80019dc:	12345678 	.word	0x12345678

080019e0 <SRXL2_GetData>:


/*
 * 수신 데이터 로딩
 */
int SRXL2_GetData(){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
	SRXL2_Header *header = &packet.header;
 80019e6:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <SRXL2_GetData+0x50>)
 80019e8:	607b      	str	r3, [r7, #4]
	do{
		if(SRXL2_readByte() !=0) continue;
 80019ea:	f000 f825 	bl	8001a38 <SRXL2_readByte>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
	}
	while(calculate_crc(SRXL2_data, header->len) != packet.crc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	789b      	ldrb	r3, [r3, #2]
 80019f6:	4619      	mov	r1, r3
 80019f8:	480e      	ldr	r0, [pc, #56]	@ (8001a34 <SRXL2_GetData+0x54>)
 80019fa:	f000 fa07 	bl	8001e0c <calculate_crc>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b0b      	ldr	r3, [pc, #44]	@ (8001a30 <SRXL2_GetData+0x50>)
 8001a04:	f8b3 3013 	ldrh.w	r3, [r3, #19]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d1ed      	bne.n	80019ea <SRXL2_GetData+0xa>

//	while(SRXL2_readByte()){}

	switch(header->pType){
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	785b      	ldrb	r3, [r3, #1]
 8001a12:	2b21      	cmp	r3, #33	@ 0x21
 8001a14:	d005      	beq.n	8001a22 <SRXL2_GetData+0x42>
 8001a16:	2bcd      	cmp	r3, #205	@ 0xcd
 8001a18:	d104      	bne.n	8001a24 <SRXL2_GetData+0x44>
	case SRXL_HANDSHAKE_ID :
		break;
	case SRXL_CTRL_ID :
		SRXL2_parseControlData((SRXL2_Control_Packet*)SRXL2_data);
 8001a1a:	4806      	ldr	r0, [pc, #24]	@ (8001a34 <SRXL2_GetData+0x54>)
 8001a1c:	f000 f88e 	bl	8001b3c <SRXL2_parseControlData>
		// SRXL2_SendTelemetryData();
		break;
 8001a20:	e000      	b.n	8001a24 <SRXL2_GetData+0x44>
		break;
 8001a22:	bf00      	nop
	}
	return 0;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200003a8 	.word	0x200003a8
 8001a34:	20000358 	.word	0x20000358

08001a38 <SRXL2_readByte>:
 * @retval 0 : 수신 완료
 * @retval -1 : 수신 인터럽트 없음
 * @retval -2 : 링버퍼 오류
 * @retval -3 : CRC 불일치
 */
int SRXL2_readByte(void){
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
	SRXL2_Packet *rx = &packet;
 8001a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b2c <SRXL2_readByte+0xf4>)
 8001a40:	60bb      	str	r3, [r7, #8]
	SRXL2_Header *header = &rx->header;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	607b      	str	r3, [r7, #4]
	enum INDEX_PACKET {
			pType = 1,
			len = 2
	};

	if(RC_rxFlag.uart == 0)
 8001a46:	4b3a      	ldr	r3, [pc, #232]	@ (8001b30 <SRXL2_readByte+0xf8>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <SRXL2_readByte+0x22>
	{
		return -1;
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295
 8001a58:	e064      	b.n	8001b24 <SRXL2_readByte+0xec>
	}
	if(RB_isempty(&RC_rxRingFifo))
 8001a5a:	4836      	ldr	r0, [pc, #216]	@ (8001b34 <SRXL2_readByte+0xfc>)
 8001a5c:	f7ff fb84 	bl	8001168 <RB_isempty>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <SRXL2_readByte+0x34>
	{
		return -2;
 8001a66:	f06f 0301 	mvn.w	r3, #1
 8001a6a:	e05b      	b.n	8001b24 <SRXL2_readByte+0xec>
	}

	// flag clear
	RC_rxFlag.uart = 0;
 8001a6c:	4a30      	ldr	r2, [pc, #192]	@ (8001b30 <SRXL2_readByte+0xf8>)
 8001a6e:	7813      	ldrb	r3, [r2, #0]
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	7013      	strb	r3, [r2, #0]

	/*
	 * SRXL2_data의 인덱스를 초과하는 문제가 발생하지 않도록 유의
	 */
	for(uint8_t cnt = 0; cnt < SRXL2_RING_BUFFER_SIZE; cnt++){
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
 8001a7a:	e00e      	b.n	8001a9a <SRXL2_readByte+0x62>
		uint8_t value = RB_read(&RC_rxRingFifo);
 8001a7c:	482d      	ldr	r0, [pc, #180]	@ (8001b34 <SRXL2_readByte+0xfc>)
 8001a7e:	f7ff fb52 	bl	8001126 <RB_read>
 8001a82:	4603      	mov	r3, r0
 8001a84:	70fb      	strb	r3, [r7, #3]

		if(value == SPEKTRUM_SRXL_ID){
 8001a86:	78fb      	ldrb	r3, [r7, #3]
 8001a88:	2ba6      	cmp	r3, #166	@ 0xa6
 8001a8a:	d103      	bne.n	8001a94 <SRXL2_readByte+0x5c>
			SRXL2_data[0] = SPEKTRUM_SRXL_ID;
 8001a8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001b38 <SRXL2_readByte+0x100>)
 8001a8e:	22a6      	movs	r2, #166	@ 0xa6
 8001a90:	701a      	strb	r2, [r3, #0]
			break;
 8001a92:	e006      	b.n	8001aa2 <SRXL2_readByte+0x6a>
	for(uint8_t cnt = 0; cnt < SRXL2_RING_BUFFER_SIZE; cnt++){
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
 8001a96:	3301      	adds	r3, #1
 8001a98:	73fb      	strb	r3, [r7, #15]
 8001a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	daec      	bge.n	8001a7c <SRXL2_readByte+0x44>
		}
	}

	for(uint8_t cnt = 1; cnt < SRXL_MAX_BUFFER_SIZE; cnt++){
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	73bb      	strb	r3, [r7, #14]
 8001aa6:	e014      	b.n	8001ad2 <SRXL2_readByte+0x9a>
		SRXL2_data[cnt] = RB_read(&RC_rxRingFifo);
 8001aa8:	7bbc      	ldrb	r4, [r7, #14]
 8001aaa:	4822      	ldr	r0, [pc, #136]	@ (8001b34 <SRXL2_readByte+0xfc>)
 8001aac:	f7ff fb3b 	bl	8001126 <RB_read>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4b20      	ldr	r3, [pc, #128]	@ (8001b38 <SRXL2_readByte+0x100>)
 8001ab6:	551a      	strb	r2, [r3, r4]

		if(cnt>len && SRXL2_data[len] == cnt+1){
 8001ab8:	7bbb      	ldrb	r3, [r7, #14]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d906      	bls.n	8001acc <SRXL2_readByte+0x94>
 8001abe:	4b1e      	ldr	r3, [pc, #120]	@ (8001b38 <SRXL2_readByte+0x100>)
 8001ac0:	789b      	ldrb	r3, [r3, #2]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	7bbb      	ldrb	r3, [r7, #14]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d006      	beq.n	8001ada <SRXL2_readByte+0xa2>
	for(uint8_t cnt = 1; cnt < SRXL_MAX_BUFFER_SIZE; cnt++){
 8001acc:	7bbb      	ldrb	r3, [r7, #14]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	73bb      	strb	r3, [r7, #14]
 8001ad2:	7bbb      	ldrb	r3, [r7, #14]
 8001ad4:	2b4f      	cmp	r3, #79	@ 0x4f
 8001ad6:	d9e7      	bls.n	8001aa8 <SRXL2_readByte+0x70>
 8001ad8:	e000      	b.n	8001adc <SRXL2_readByte+0xa4>
//		if(cnt>len && SRXL2_data[len] == cnt){
			break;
 8001ada:	bf00      	nop
		}
	}

	header->speckrum_id = SPEKTRUM_SRXL_ID;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	22a6      	movs	r2, #166	@ 0xa6
 8001ae0:	701a      	strb	r2, [r3, #0]
	header->pType = SRXL2_data[pType];
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <SRXL2_readByte+0x100>)
 8001ae4:	785a      	ldrb	r2, [r3, #1]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	705a      	strb	r2, [r3, #1]
	header->len = SRXL2_data[len];
 8001aea:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <SRXL2_readByte+0x100>)
 8001aec:	789a      	ldrb	r2, [r3, #2]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	709a      	strb	r2, [r3, #2]

	rx->Data = SRXL2_data;
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	4a10      	ldr	r2, [pc, #64]	@ (8001b38 <SRXL2_readByte+0x100>)
 8001af6:	f8c3 2003 	str.w	r2, [r3, #3]
	rx->crc = ((uint16_t)SRXL2_data[header->len -2] << 8 | SRXL2_data[header->len -1]);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	789b      	ldrb	r3, [r3, #2]
 8001afe:	3b02      	subs	r3, #2
 8001b00:	4a0d      	ldr	r2, [pc, #52]	@ (8001b38 <SRXL2_readByte+0x100>)
 8001b02:	5cd3      	ldrb	r3, [r2, r3]
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	b21a      	sxth	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	789b      	ldrb	r3, [r3, #2]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	4909      	ldr	r1, [pc, #36]	@ (8001b38 <SRXL2_readByte+0x100>)
 8001b12:	5ccb      	ldrb	r3, [r1, r3]
 8001b14:	b21b      	sxth	r3, r3
 8001b16:	4313      	orrs	r3, r2
 8001b18:	b21b      	sxth	r3, r3
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	f8a3 2013 	strh.w	r2, [r3, #19]

//	if(calculate_crc(SRXL2_data, header->len) != rx->crc){
//		return -3;
//	}

	return 0;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd90      	pop	{r4, r7, pc}
 8001b2c:	200003a8 	.word	0x200003a8
 8001b30:	20000328 	.word	0x20000328
 8001b34:	2000031c 	.word	0x2000031c
 8001b38:	20000358 	.word	0x20000358

08001b3c <SRXL2_parseControlData>:
 *		   data 범위 조정(1000us~2000us), 반전, 트림, Dead-zone 적용.
 * 		   RC_Channel[]에 저장
 * @parm SRXL_Control_Pack *rx : (SRXL2_Control_Packet*)packet
 */
int SRXL2_parseControlData(SRXL2_Control_Packet *rx)
{
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b08b      	sub	sp, #44	@ 0x2c
 8001b40:	af02      	add	r7, sp, #8
 8001b42:	6078      	str	r0, [r7, #4]
	PARM_RC *parm = &PARM_rc;
 8001b44:	4b8f      	ldr	r3, [pc, #572]	@ (8001d84 <SRXL2_parseControlData+0x248>)
 8001b46:	617b      	str	r3, [r7, #20]
	RC_CHANNELS *rc = &RC_channels;
 8001b48:	4b8f      	ldr	r3, [pc, #572]	@ (8001d88 <SRXL2_parseControlData+0x24c>)
 8001b4a:	613b      	str	r3, [r7, #16]


	// if(rx->Command == SRXL_CTRL_CMD_VTX)
	// if(rx->Command == SRXL_CTRL_CMD_FWDPGM)

	uint8_t channelCnt = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	77fb      	strb	r3, [r7, #31]
	static uint32_t channelMask = 0;

	static uint32_t previousTime = 0;

	for(int i=0; i<SRXL_MAX_CHANNEL; i++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	61bb      	str	r3, [r7, #24]
 8001b54:	e0cb      	b.n	8001cee <SRXL2_parseControlData+0x1b2>
	{
		if(!((rx->data.mask>>i)&0x01)) continue;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 80be 	beq.w	8001ce6 <SRXL2_parseControlData+0x1aa>
		if(i>=18) break;
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	2b11      	cmp	r3, #17
 8001b6e:	f300 80c3 	bgt.w	8001cf8 <SRXL2_parseControlData+0x1bc>

		uint16_t value = rx->data.values[channelCnt];
 8001b72:	7ff9      	ldrb	r1, [r7, #31]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	004b      	lsls	r3, r1, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	7b18      	ldrb	r0, [r3, #12]
 8001b7c:	004b      	lsls	r3, r1, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	7b5b      	ldrb	r3, [r3, #13]
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	4303      	orrs	r3, r0
 8001b86:	81fb      	strh	r3, [r7, #14]
		channelCnt++;
 8001b88:	7ffb      	ldrb	r3, [r7, #31]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	77fb      	strb	r3, [r7, #31]

		// RC 값 필터링 코드 작성
		value = value<SRXL_CTRL_VALUE_MIN?SRXL_CTRL_VALUE_MIN:value;
 8001b8e:	89fb      	ldrh	r3, [r7, #14]
 8001b90:	f642 22a0 	movw	r2, #10912	@ 0x2aa0
 8001b94:	4293      	cmp	r3, r2
 8001b96:	bf38      	it	cc
 8001b98:	4613      	movcc	r3, r2
 8001b9a:	81fb      	strh	r3, [r7, #14]
		value = value>SRXL_CTRL_VALUE_MAX?SRXL_CTRL_VALUE_MAX:value;
 8001b9c:	89fb      	ldrh	r3, [r7, #14]
 8001b9e:	f24d 5254 	movw	r2, #54612	@ 0xd554
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	bf28      	it	cs
 8001ba6:	4613      	movcs	r3, r2
 8001ba8:	81fb      	strh	r3, [r7, #14]

		// Reverse 처리
		if((parm->reversedMask>>i)&0x01)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d02f      	beq.n	8001c1e <SRXL2_parseControlData+0xe2>
		{
			rc->value[i] = map(value,
 8001bbe:	6979      	ldr	r1, [r7, #20]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	440b      	add	r3, r1
 8001bca:	3308      	adds	r3, #8
 8001bcc:	889b      	ldrh	r3, [r3, #4]
 8001bce:	b29c      	uxth	r4, r3
 8001bd0:	6979      	ldr	r1, [r7, #20]
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4413      	add	r3, r2
 8001bda:	440b      	add	r3, r1
 8001bdc:	3308      	adds	r3, #8
 8001bde:	885b      	ldrh	r3, [r3, #2]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	89f8      	ldrh	r0, [r7, #14]
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	4623      	mov	r3, r4
 8001be8:	f24d 5254 	movw	r2, #54612	@ 0xd554
 8001bec:	f642 21a0 	movw	r1, #10912	@ 0x2aa0
 8001bf0:	f7ff fe52 	bl	8001898 <map>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	4618      	mov	r0, r3
					SRXL_CTRL_VALUE_MIN, SRXL_CTRL_VALUE_MAX,
					parm->CHANNEL[i].MAX, parm->CHANNEL[i].MIN) + parm->CHANNEL[i].TRIM;
 8001bf8:	6979      	ldr	r1, [r7, #20]
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4413      	add	r3, r2
 8001c02:	440b      	add	r3, r1
 8001c04:	3308      	adds	r3, #8
 8001c06:	88db      	ldrh	r3, [r3, #6]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	4403      	add	r3, r0
 8001c0c:	b299      	uxth	r1, r3
			rc->value[i] = map(value,
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	4413      	add	r3, r2
 8001c16:	460a      	mov	r2, r1
 8001c18:	f8a3 2005 	strh.w	r2, [r3, #5]
 8001c1c:	e02e      	b.n	8001c7c <SRXL2_parseControlData+0x140>
		}
		else{
			rc->value[i] = map(value,
 8001c1e:	6979      	ldr	r1, [r7, #20]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4613      	mov	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4413      	add	r3, r2
 8001c28:	440b      	add	r3, r1
 8001c2a:	3308      	adds	r3, #8
 8001c2c:	885b      	ldrh	r3, [r3, #2]
 8001c2e:	b29c      	uxth	r4, r3
 8001c30:	6979      	ldr	r1, [r7, #20]
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4613      	mov	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4413      	add	r3, r2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	3308      	adds	r3, #8
 8001c3e:	889b      	ldrh	r3, [r3, #4]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	89f8      	ldrh	r0, [r7, #14]
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	4623      	mov	r3, r4
 8001c48:	f24d 5254 	movw	r2, #54612	@ 0xd554
 8001c4c:	f642 21a0 	movw	r1, #10912	@ 0x2aa0
 8001c50:	f7ff fe22 	bl	8001898 <map>
 8001c54:	4603      	mov	r3, r0
 8001c56:	4618      	mov	r0, r3
					SRXL_CTRL_VALUE_MIN, SRXL_CTRL_VALUE_MAX,
					parm->CHANNEL[i].MIN, parm->CHANNEL[i].MAX) + parm->CHANNEL[i].TRIM;
 8001c58:	6979      	ldr	r1, [r7, #20]
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4413      	add	r3, r2
 8001c62:	440b      	add	r3, r1
 8001c64:	3308      	adds	r3, #8
 8001c66:	88db      	ldrh	r3, [r3, #6]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	4403      	add	r3, r0
 8001c6c:	b299      	uxth	r1, r3
			rc->value[i] = map(value,
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	4413      	add	r3, r2
 8001c76:	460a      	mov	r2, r1
 8001c78:	f8a3 2005 	strh.w	r2, [r3, #5]
		}

		// Dead-zone 처리
		if(rc->value[i]>(1500-parm->CHANNEL[i].DZ) && rc->value[i]<(1500+parm->CHANNEL[i].DZ)){
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	6979      	ldr	r1, [r7, #20]
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4613      	mov	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	440b      	add	r3, r1
 8001c98:	3310      	adds	r3, #16
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	4298      	cmp	r0, r3
 8001ca4:	dd20      	ble.n	8001ce8 <SRXL2_parseControlData+0x1ac>
 8001ca6:	6979      	ldr	r1, [r7, #20]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4613      	mov	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4413      	add	r3, r2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3310      	adds	r3, #16
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	f203 52db 	addw	r2, r3, #1499	@ 0x5db
 8001cba:	6939      	ldr	r1, [r7, #16]
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	440b      	add	r3, r1
 8001cc2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	db0d      	blt.n	8001ce8 <SRXL2_parseControlData+0x1ac>
			rc->value[i] = 1500;
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4413      	add	r3, r2
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f062 0223 	orn	r2, r2, #35	@ 0x23
 8001cda:	715a      	strb	r2, [r3, #5]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f042 0205 	orr.w	r2, r2, #5
 8001ce2:	719a      	strb	r2, [r3, #6]
 8001ce4:	e000      	b.n	8001ce8 <SRXL2_parseControlData+0x1ac>
		if(!((rx->data.mask>>i)&0x01)) continue;
 8001ce6:	bf00      	nop
	for(int i=0; i<SRXL_MAX_CHANNEL; i++)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	3301      	adds	r3, #1
 8001cec:	61bb      	str	r3, [r7, #24]
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	2b1f      	cmp	r3, #31
 8001cf2:	f77f af30 	ble.w	8001b56 <SRXL2_parseControlData+0x1a>
 8001cf6:	e000      	b.n	8001cfa <SRXL2_parseControlData+0x1be>
		if(i>=18) break;
 8001cf8:	bf00      	nop
		}
	}

	channelMask |= rx->data.mask;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	4b23      	ldr	r3, [pc, #140]	@ (8001d8c <SRXL2_parseControlData+0x250>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	4a21      	ldr	r2, [pc, #132]	@ (8001d8c <SRXL2_parseControlData+0x250>)
 8001d06:	6013      	str	r3, [r2, #0]
	rc->chancount = countSetBits(channelMask);
 8001d08:	4b20      	ldr	r3, [pc, #128]	@ (8001d8c <SRXL2_parseControlData+0x250>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f000 f8e0 	bl	8001ed2 <countSetBits>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	711a      	strb	r2, [r3, #4]
	rc->time_boot_ms = system_time.time_boot_ms;
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d90 <SRXL2_parseControlData+0x254>)
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	601a      	str	r2, [r3, #0]

	if(system_time.time_boot_ms - previousTime > 2000){
 8001d22:	4b1b      	ldr	r3, [pc, #108]	@ (8001d90 <SRXL2_parseControlData+0x254>)
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <SRXL2_parseControlData+0x258>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d30:	d906      	bls.n	8001d40 <SRXL2_parseControlData+0x204>
		previousTime = system_time.time_boot_ms;
 8001d32:	4b17      	ldr	r3, [pc, #92]	@ (8001d90 <SRXL2_parseControlData+0x254>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	4a17      	ldr	r2, [pc, #92]	@ (8001d94 <SRXL2_parseControlData+0x258>)
 8001d38:	6013      	str	r3, [r2, #0]
		channelMask = 0;
 8001d3a:	4b14      	ldr	r3, [pc, #80]	@ (8001d8c <SRXL2_parseControlData+0x250>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
	}

	// rssi, frameLoss, Fail-safe 기능 등 구현
	switch(rx->Command){
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	78db      	ldrb	r3, [r3, #3]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <SRXL2_parseControlData+0x210>
 8001d48:	2b01      	cmp	r3, #1
	case SRXL_CTRL_CMD_CHANNEL:
		if((rx->data.rssi&0x80)) break;
		rc->rssi = map(rx->data.rssi, 0, 100, 0, 254);
		break;
	case SRXL_CTRL_CMD_CHANNEL_FS:
		break;
 8001d4a:	e016      	b.n	8001d7a <SRXL2_parseControlData+0x23e>
		if((rx->data.rssi&0x80)) break;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	db10      	blt.n	8001d78 <SRXL2_parseControlData+0x23c>
		rc->rssi = map(rx->data.rssi, 0, 100, 0, 254);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001d5c:	b298      	uxth	r0, r3
 8001d5e:	23fe      	movs	r3, #254	@ 0xfe
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	2300      	movs	r3, #0
 8001d64:	2264      	movs	r2, #100	@ 0x64
 8001d66:	2100      	movs	r1, #0
 8001d68:	f7ff fd96 	bl	8001898 <map>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		break;
 8001d76:	e000      	b.n	8001d7a <SRXL2_parseControlData+0x23e>
		if((rx->data.rssi&0x80)) break;
 8001d78:	bf00      	nop
	}

	return 0;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3724      	adds	r7, #36	@ 0x24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd90      	pop	{r4, r7, pc}
 8001d84:	200003d4 	.word	0x200003d4
 8001d88:	2000032c 	.word	0x2000032c
 8001d8c:	200003cc 	.word	0x200003cc
 8001d90:	2000030c 	.word	0x2000030c
 8001d94:	200003d0 	.word	0x200003d0

08001d98 <SRXL2_doHandshake>:
 * @retval 0 : 송신 완료
 * @retval -1 : 송신 실패
 * @retval -2 : 패킷 크기와 정보가 불일치
 */
int SRXL2_doHandshake(SRXL2_Handshake_Packet *tx_packet)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	SRXL2_Handshake_Data* rx;
	SRXL2_Handshake_Data* data = &tx_packet->data;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3303      	adds	r3, #3
 8001da4:	617b      	str	r3, [r7, #20]

	uint8_t len = tx_packet->header.len;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	789b      	ldrb	r3, [r3, #2]
 8001daa:	74fb      	strb	r3, [r7, #19]
	if(sizeof(*tx_packet) != len) return -2;
 8001dac:	7cfb      	ldrb	r3, [r7, #19]
 8001dae:	2b0e      	cmp	r3, #14
 8001db0:	d002      	beq.n	8001db8 <SRXL2_doHandshake+0x20>
 8001db2:	f06f 0301 	mvn.w	r3, #1
 8001db6:	e020      	b.n	8001dfa <SRXL2_doHandshake+0x62>

	while(1)
	{
//		if(SRXL2_readByte()) continue;

		SRXL2_GetData();
 8001db8:	f7ff fe12 	bl	80019e0 <SRXL2_GetData>
		if(packet.header.pType == SRXL_HANDSHAKE_ID)
 8001dbc:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <SRXL2_doHandshake+0x6c>)
 8001dbe:	785b      	ldrb	r3, [r3, #1]
 8001dc0:	2b21      	cmp	r3, #33	@ 0x21
 8001dc2:	d1f9      	bne.n	8001db8 <SRXL2_doHandshake+0x20>
		{
			rx = &(((SRXL2_Handshake_Packet *) SRXL2_data)->data);
 8001dc4:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <SRXL2_doHandshake+0x70>)
 8001dc6:	60fb      	str	r3, [r7, #12]

			if(rx->SrcID == data->DestID && rx->DestID == data->SrcID)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	781a      	ldrb	r2, [r3, #0]
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	785b      	ldrb	r3, [r3, #1]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d1f1      	bne.n	8001db8 <SRXL2_doHandshake+0x20>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	785a      	ldrb	r2, [r3, #1]
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d000      	beq.n	8001de2 <SRXL2_doHandshake+0x4a>
		SRXL2_GetData();
 8001de0:	e7ea      	b.n	8001db8 <SRXL2_doHandshake+0x20>
			{
				break;
 8001de2:	bf00      	nop
			}
		}
	}

	insert_crc((uint8_t*)tx_packet, len);
 8001de4:	7cfb      	ldrb	r3, [r7, #19]
 8001de6:	4619      	mov	r1, r3
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f850 	bl	8001e8e <insert_crc>
	return RC_halfDuplex_Transmit((uint8_t*)tx_packet, len);
 8001dee:	7cfb      	ldrb	r3, [r7, #19]
 8001df0:	4619      	mov	r1, r3
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff fd14 	bl	8001820 <RC_halfDuplex_Transmit>
 8001df8:	4603      	mov	r3, r0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200003a8 	.word	0x200003a8
 8001e08:	2000035b 	.word	0x2000035b

08001e0c <calculate_crc>:
 * @parm const uint8_t* data : data address
 * @parm uint8_t len : sizeof(data)
 * @retval uint16_t crc
 */
uint16_t calculate_crc(const uint8_t *data, uint8_t len)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0x0000;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len-2; i++) {
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	737b      	strb	r3, [r7, #13]
 8001e20:	e029      	b.n	8001e76 <calculate_crc+0x6a>
		crc ^= ((uint16_t)data[i] << 8);
 8001e22:	7b7b      	ldrb	r3, [r7, #13]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	4413      	add	r3, r2
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	b21b      	sxth	r3, r3
 8001e2c:	021b      	lsls	r3, r3, #8
 8001e2e:	b21a      	sxth	r2, r3
 8001e30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e34:	4053      	eors	r3, r2
 8001e36:	b21b      	sxth	r3, r3
 8001e38:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	733b      	strb	r3, [r7, #12]
 8001e3e:	e014      	b.n	8001e6a <calculate_crc+0x5e>
			if (crc & 0x8000)
 8001e40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	da0a      	bge.n	8001e5e <calculate_crc+0x52>
				crc = (crc << 1) ^ 0x1021;
 8001e48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	b21b      	sxth	r3, r3
 8001e50:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8001e54:	f083 0301 	eor.w	r3, r3, #1
 8001e58:	b21b      	sxth	r3, r3
 8001e5a:	81fb      	strh	r3, [r7, #14]
 8001e5c:	e002      	b.n	8001e64 <calculate_crc+0x58>
			else
				crc = (crc << 1);
 8001e5e:	89fb      	ldrh	r3, [r7, #14]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 8001e64:	7b3b      	ldrb	r3, [r7, #12]
 8001e66:	3301      	adds	r3, #1
 8001e68:	733b      	strb	r3, [r7, #12]
 8001e6a:	7b3b      	ldrb	r3, [r7, #12]
 8001e6c:	2b07      	cmp	r3, #7
 8001e6e:	d9e7      	bls.n	8001e40 <calculate_crc+0x34>
	for (uint8_t i = 0; i < len-2; i++) {
 8001e70:	7b7b      	ldrb	r3, [r7, #13]
 8001e72:	3301      	adds	r3, #1
 8001e74:	737b      	strb	r3, [r7, #13]
 8001e76:	7b7a      	ldrb	r2, [r7, #13]
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	3b02      	subs	r3, #2
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	dbd0      	blt.n	8001e22 <calculate_crc+0x16>
		}
	}

	return crc;
 8001e80:	89fb      	ldrh	r3, [r7, #14]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <insert_crc>:
 * @parm uint8_t* data : data address
 * @parm uint8_t len : sizeof(data)
 * @retval uint16_t crc
 */
uint16_t insert_crc(uint8_t *data, uint8_t len)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b084      	sub	sp, #16
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = calculate_crc(data, len);
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff ffb4 	bl	8001e0c <calculate_crc>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	81fb      	strh	r3, [r7, #14]

	data[len -2] = (uint8_t)(crc >> 8);
 8001ea8:	89fb      	ldrh	r3, [r7, #14]
 8001eaa:	0a1b      	lsrs	r3, r3, #8
 8001eac:	b299      	uxth	r1, r3
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	3b02      	subs	r3, #2
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	b2ca      	uxtb	r2, r1
 8001eb8:	701a      	strb	r2, [r3, #0]
	data[len -1] = (uint8_t)(crc & 0xFF);
 8001eba:	78fb      	ldrb	r3, [r7, #3]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	89fa      	ldrh	r2, [r7, #14]
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	701a      	strb	r2, [r3, #0]

	return crc;
 8001ec8:	89fb      	ldrh	r3, [r7, #14]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <countSetBits>:
 *	Set bit(1)의 갯수를 세는 함수
 *	@parm uint32_t i : bits
 *	@retval uint8_t num of set bits
 */
uint8_t countSetBits(uint32_t i)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
     // C or C++: use uint32_t
     i = i - ((i >> 1) & 0x55555555);        // add pairs of bits
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	085b      	lsrs	r3, r3, #1
 8001ede:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	607b      	str	r3, [r7, #4]
     i = (i & 0x33333333) + ((i >> 2) & 0x33333333);  // quads
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f003 3233 	and.w	r2, r3, #858993459	@ 0x33333333
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	089b      	lsrs	r3, r3, #2
 8001ef2:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8001ef6:	4413      	add	r3, r2
 8001ef8:	607b      	str	r3, [r7, #4]
     i = (i + (i >> 4)) & 0x0F0F0F0F;        // groups of 8
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	091a      	lsrs	r2, r3, #4
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8001f06:	607b      	str	r3, [r7, #4]
     return (uint8_t)((i * 0x01010101) >> 24);          // horizontal sum of bytes
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	4413      	add	r3, r2
 8001f10:	041a      	lsls	r2, r3, #16
 8001f12:	4413      	add	r3, r2
 8001f14:	0e1b      	lsrs	r3, r3, #24
 8001f16:	b2db      	uxtb	r3, r3
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f28:	4b04      	ldr	r3, [pc, #16]	@ (8001f3c <__NVIC_GetPriorityGrouping+0x18>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	f003 0307 	and.w	r3, r3, #7
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	db0b      	blt.n	8001f6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	f003 021f 	and.w	r2, r3, #31
 8001f58:	4907      	ldr	r1, [pc, #28]	@ (8001f78 <__NVIC_EnableIRQ+0x38>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	2001      	movs	r0, #1
 8001f62:	fa00 f202 	lsl.w	r2, r0, r2
 8001f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	e000e100 	.word	0xe000e100

08001f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	db0a      	blt.n	8001fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	490c      	ldr	r1, [pc, #48]	@ (8001fc8 <__NVIC_SetPriority+0x4c>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	0112      	lsls	r2, r2, #4
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa4:	e00a      	b.n	8001fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4908      	ldr	r1, [pc, #32]	@ (8001fcc <__NVIC_SetPriority+0x50>)
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	3b04      	subs	r3, #4
 8001fb4:	0112      	lsls	r2, r2, #4
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	440b      	add	r3, r1
 8001fba:	761a      	strb	r2, [r3, #24]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000e100 	.word	0xe000e100
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	@ 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f1c3 0307 	rsb	r3, r3, #7
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	bf28      	it	cs
 8001fee:	2304      	movcs	r3, #4
 8001ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	2b06      	cmp	r3, #6
 8001ff8:	d902      	bls.n	8002000 <NVIC_EncodePriority+0x30>
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3b03      	subs	r3, #3
 8001ffe:	e000      	b.n	8002002 <NVIC_EncodePriority+0x32>
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	f04f 32ff 	mov.w	r2, #4294967295
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	401a      	ands	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002018:	f04f 31ff 	mov.w	r1, #4294967295
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	43d9      	mvns	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	4313      	orrs	r3, r2
         );
}
 800202a:	4618      	mov	r0, r3
 800202c:	3724      	adds	r7, #36	@ 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002036:	b480      	push	{r7}
 8002038:	b089      	sub	sp, #36	@ 0x24
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	332c      	adds	r3, #44	@ 0x2c
 8002046:	4619      	mov	r1, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800204e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002052:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	fa92 f2a2 	rbit	r2, r2
 800205a:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	61ba      	str	r2, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	2a00      	cmp	r2, #0
 8002064:	d101      	bne.n	800206a <LL_ADC_REG_SetSequencerRanks+0x34>
  {
    return 32U;
 8002066:	2220      	movs	r2, #32
 8002068:	e003      	b.n	8002072 <LL_ADC_REG_SetSequencerRanks+0x3c>
  }
  return __builtin_clz(value);
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	fab2 f282 	clz	r2, r2
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	40d3      	lsrs	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	61fb      	str	r3, [r7, #28]

  MODIFY_REG(*preg,
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	211f      	movs	r1, #31
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	401a      	ands	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f003 011f 	and.w	r1, r3, #31
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f003 031f 	and.w	r3, r3, #31
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	431a      	orrs	r2, r3
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020a4:	bf00      	nop
 80020a6:	3724      	adds	r7, #36	@ 0x24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	609a      	str	r2, [r3, #8]
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b08f      	sub	sp, #60	@ 0x3c
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	330c      	adds	r3, #12
 80020e6:	4619      	mov	r1, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020f2:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	fa92 f2a2 	rbit	r2, r2
 80020fa:	613a      	str	r2, [r7, #16]
  return result;
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	2a00      	cmp	r2, #0
 8002104:	d101      	bne.n	800210a <LL_ADC_SetChannelSamplingTime+0x34>
    return 32U;
 8002106:	2220      	movs	r2, #32
 8002108:	e003      	b.n	8002112 <LL_ADC_SetChannelSamplingTime+0x3c>
  return __builtin_clz(value);
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	fab2 f282 	clz	r2, r2
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	40d3      	lsrs	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	440b      	add	r3, r1
 8002118:	637b      	str	r3, [r7, #52]	@ 0x34

  MODIFY_REG(*preg,
 800211a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8002124:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8002128:	6239      	str	r1, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	6a39      	ldr	r1, [r7, #32]
 800212c:	fa91 f1a1 	rbit	r1, r1
 8002130:	61f9      	str	r1, [r7, #28]
  return result;
 8002132:	69f9      	ldr	r1, [r7, #28]
 8002134:	6279      	str	r1, [r7, #36]	@ 0x24
  if (value == 0U)
 8002136:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002138:	2900      	cmp	r1, #0
 800213a:	d101      	bne.n	8002140 <LL_ADC_SetChannelSamplingTime+0x6a>
    return 32U;
 800213c:	2120      	movs	r1, #32
 800213e:	e003      	b.n	8002148 <LL_ADC_SetChannelSamplingTime+0x72>
  return __builtin_clz(value);
 8002140:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002142:	fab1 f181 	clz	r1, r1
 8002146:	b2c9      	uxtb	r1, r1
 8002148:	40cb      	lsrs	r3, r1
 800214a:	2107      	movs	r1, #7
 800214c:	fa01 f303 	lsl.w	r3, r1, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	401a      	ands	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 800215a:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 800215e:	62f9      	str	r1, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002162:	fa91 f1a1 	rbit	r1, r1
 8002166:	62b9      	str	r1, [r7, #40]	@ 0x28
  return result;
 8002168:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800216a:	6339      	str	r1, [r7, #48]	@ 0x30
  if (value == 0U)
 800216c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800216e:	2900      	cmp	r1, #0
 8002170:	d101      	bne.n	8002176 <LL_ADC_SetChannelSamplingTime+0xa0>
    return 32U;
 8002172:	2120      	movs	r1, #32
 8002174:	e003      	b.n	800217e <LL_ADC_SetChannelSamplingTime+0xa8>
  return __builtin_clz(value);
 8002176:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002178:	fab1 f181 	clz	r1, r1
 800217c:	b2c9      	uxtb	r1, r1
 800217e:	40cb      	lsrs	r3, r1
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	431a      	orrs	r2, r3
 8002188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800218a:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 800218c:	bf00      	nop
 800218e:	373c      	adds	r7, #60	@ 0x3c
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <LL_SPI_SetStandard>:
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f023 0210 	bic.w	r2, r3, #16
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	431a      	orrs	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	605a      	str	r2, [r3, #4]
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <LL_TIM_EnableCounter>:
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f043 0201 	orr.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	601a      	str	r2, [r3, #0]
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <LL_TIM_DisableARRPreload>:
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	601a      	str	r2, [r3, #0]
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d01c      	beq.n	800224a <LL_TIM_OC_DisableFast+0x4a>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	2b04      	cmp	r3, #4
 8002214:	d017      	beq.n	8002246 <LL_TIM_OC_DisableFast+0x46>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b10      	cmp	r3, #16
 800221a:	d012      	beq.n	8002242 <LL_TIM_OC_DisableFast+0x42>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	2b40      	cmp	r3, #64	@ 0x40
 8002220:	d00d      	beq.n	800223e <LL_TIM_OC_DisableFast+0x3e>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002228:	d007      	beq.n	800223a <LL_TIM_OC_DisableFast+0x3a>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002230:	d101      	bne.n	8002236 <LL_TIM_OC_DisableFast+0x36>
 8002232:	2305      	movs	r3, #5
 8002234:	e00a      	b.n	800224c <LL_TIM_OC_DisableFast+0x4c>
 8002236:	2306      	movs	r3, #6
 8002238:	e008      	b.n	800224c <LL_TIM_OC_DisableFast+0x4c>
 800223a:	2304      	movs	r3, #4
 800223c:	e006      	b.n	800224c <LL_TIM_OC_DisableFast+0x4c>
 800223e:	2303      	movs	r3, #3
 8002240:	e004      	b.n	800224c <LL_TIM_OC_DisableFast+0x4c>
 8002242:	2302      	movs	r3, #2
 8002244:	e002      	b.n	800224c <LL_TIM_OC_DisableFast+0x4c>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <LL_TIM_OC_DisableFast+0x4c>
 800224a:	2300      	movs	r3, #0
 800224c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3318      	adds	r3, #24
 8002252:	4619      	mov	r1, r3
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	4a0b      	ldr	r2, [pc, #44]	@ (8002284 <LL_TIM_OC_DisableFast+0x84>)
 8002258:	5cd3      	ldrb	r3, [r2, r3]
 800225a:	440b      	add	r3, r1
 800225c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	4908      	ldr	r1, [pc, #32]	@ (8002288 <LL_TIM_OC_DisableFast+0x88>)
 8002266:	5ccb      	ldrb	r3, [r1, r3]
 8002268:	4619      	mov	r1, r3
 800226a:	2304      	movs	r3, #4
 800226c:	408b      	lsls	r3, r1
 800226e:	43db      	mvns	r3, r3
 8002270:	401a      	ands	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	601a      	str	r2, [r3, #0]

}
 8002276:	bf00      	nop
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	0800d998 	.word	0x0800d998
 8002288:	0800d9a0 	.word	0x0800d9a0

0800228c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d01c      	beq.n	80022d6 <LL_TIM_OC_EnablePreload+0x4a>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d017      	beq.n	80022d2 <LL_TIM_OC_EnablePreload+0x46>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b10      	cmp	r3, #16
 80022a6:	d012      	beq.n	80022ce <LL_TIM_OC_EnablePreload+0x42>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	2b40      	cmp	r3, #64	@ 0x40
 80022ac:	d00d      	beq.n	80022ca <LL_TIM_OC_EnablePreload+0x3e>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022b4:	d007      	beq.n	80022c6 <LL_TIM_OC_EnablePreload+0x3a>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022bc:	d101      	bne.n	80022c2 <LL_TIM_OC_EnablePreload+0x36>
 80022be:	2305      	movs	r3, #5
 80022c0:	e00a      	b.n	80022d8 <LL_TIM_OC_EnablePreload+0x4c>
 80022c2:	2306      	movs	r3, #6
 80022c4:	e008      	b.n	80022d8 <LL_TIM_OC_EnablePreload+0x4c>
 80022c6:	2304      	movs	r3, #4
 80022c8:	e006      	b.n	80022d8 <LL_TIM_OC_EnablePreload+0x4c>
 80022ca:	2303      	movs	r3, #3
 80022cc:	e004      	b.n	80022d8 <LL_TIM_OC_EnablePreload+0x4c>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e002      	b.n	80022d8 <LL_TIM_OC_EnablePreload+0x4c>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <LL_TIM_OC_EnablePreload+0x4c>
 80022d6:	2300      	movs	r3, #0
 80022d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3318      	adds	r3, #24
 80022de:	4619      	mov	r1, r3
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	4a0a      	ldr	r2, [pc, #40]	@ (800230c <LL_TIM_OC_EnablePreload+0x80>)
 80022e4:	5cd3      	ldrb	r3, [r2, r3]
 80022e6:	440b      	add	r3, r1
 80022e8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	4907      	ldr	r1, [pc, #28]	@ (8002310 <LL_TIM_OC_EnablePreload+0x84>)
 80022f2:	5ccb      	ldrb	r3, [r1, r3]
 80022f4:	4619      	mov	r1, r3
 80022f6:	2308      	movs	r3, #8
 80022f8:	408b      	lsls	r3, r1
 80022fa:	431a      	orrs	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	601a      	str	r2, [r3, #0]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	0800d998 	.word	0x0800d998
 8002310:	0800d9a0 	.word	0x0800d9a0

08002314 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002326:	f023 0307 	bic.w	r3, r3, #7
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	609a      	str	r2, [r3, #8]
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	605a      	str	r2, [r3, #4]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	609a      	str	r2, [r3, #8]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f043 0201 	orr.w	r2, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	60da      	str	r2, [r3, #12]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <LL_USART_Enable>:
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	60da      	str	r2, [r3, #12]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <LL_USART_ConfigAsyncMode>:
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	615a      	str	r2, [r3, #20]
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_USART_ConfigHalfDuplexMode>:
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f023 0222 	bic.w	r2, r3, #34	@ 0x22
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	615a      	str	r2, [r3, #20]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	f043 0208 	orr.w	r2, r3, #8
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	615a      	str	r2, [r3, #20]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_USART_EnableIT_RXNE>:
{
 8002428:	b480      	push	{r7}
 800242a:	b089      	sub	sp, #36	@ 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	330c      	adds	r3, #12
 8002434:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	e853 3f00 	ldrex	r3, [r3]
 800243c:	60bb      	str	r3, [r7, #8]
   return(result);
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f043 0320 	orr.w	r3, r3, #32
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	330c      	adds	r3, #12
 800244a:	69fa      	ldr	r2, [r7, #28]
 800244c:	61ba      	str	r2, [r7, #24]
 800244e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002450:	6979      	ldr	r1, [r7, #20]
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	e841 2300 	strex	r3, r2, [r1]
 8002458:	613b      	str	r3, [r7, #16]
   return(result);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1e7      	bne.n	8002430 <LL_USART_EnableIT_RXNE+0x8>
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	3724      	adds	r7, #36	@ 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <LL_GPIO_ResetOutputPin>:
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	041a      	lsls	r2, r3, #16
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	619a      	str	r2, [r3, #24]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_AHB1_GRP1_EnableClock>:
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002494:	4b08      	ldr	r3, [pc, #32]	@ (80024b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002496:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002498:	4907      	ldr	r1, [pc, #28]	@ (80024b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4313      	orrs	r3, r2
 800249e:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80024a0:	4b05      	ldr	r3, [pc, #20]	@ (80024b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80024a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4013      	ands	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024aa:	68fb      	ldr	r3, [r7, #12]
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	40023800 	.word	0x40023800

080024bc <LL_APB1_GRP1_EnableClock>:
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80024c4:	4b08      	ldr	r3, [pc, #32]	@ (80024e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80024c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024c8:	4907      	ldr	r1, [pc, #28]	@ (80024e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80024d0:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80024d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4013      	ands	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024da:	68fb      	ldr	r3, [r7, #12]
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	40023800 	.word	0x40023800

080024ec <LL_APB2_GRP1_EnableClock>:
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80024f4:	4b08      	ldr	r3, [pc, #32]	@ (8002518 <LL_APB2_GRP1_EnableClock+0x2c>)
 80024f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024f8:	4907      	ldr	r1, [pc, #28]	@ (8002518 <LL_APB2_GRP1_EnableClock+0x2c>)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002500:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002502:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4013      	ands	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800250a:	68fb      	ldr	r3, [r7, #12]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	40023800 	.word	0x40023800

0800251c <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
	{
		while(!LL_USART_IsActiveFlag_TXE(USART2));
		LL_USART_TransmitData8(USART2, *(p+i));
	}
#else
	while(USBD_BUSY == CDC_Transmit_FS((uint8_t*)p, len)) {}
 8002528:	bf00      	nop
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	b29b      	uxth	r3, r3
 800252e:	4619      	mov	r1, r3
 8002530:	68b8      	ldr	r0, [r7, #8]
 8002532:	f008 f8e5 	bl	800a700 <CDC_Transmit_FS>
 8002536:	4603      	mov	r3, r0
 8002538:	2b01      	cmp	r3, #1
 800253a:	d0f6      	beq.n	800252a <_write+0xe>
	return len;
 800253c:	687b      	ldr	r3, [r7, #4]
#endif
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800254c:	f001 f8ce 	bl	80036ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002550:	f000 f84e 	bl	80025f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002554:	f000 fe0c 	bl	8003170 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002558:	f000 fcfa 	bl	8002f50 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800255c:	f000 f97a 	bl	8002854 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002560:	f000 fa32 	bl	80029c8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002564:	f000 fadc 	bl	8002b20 <MX_TIM5_Init>
  MX_TIM13_Init();
 8002568:	f000 fb7e 	bl	8002c68 <MX_TIM13_Init>
  MX_TIM14_Init();
 800256c:	f000 fbd0 	bl	8002d10 <MX_TIM14_Init>
  MX_SPI1_Init();
 8002570:	f000 f91e 	bl	80027b0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002574:	f000 fd4a 	bl	800300c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002578:	f000 fda8 	bl	80030cc <MX_USART3_UART_Init>
  MX_UART4_Init();
 800257c:	f000 fc1e 	bl	8002dbc <MX_UART4_Init>
  MX_UART5_Init();
 8002580:	f000 fc6e 	bl	8002e60 <MX_UART5_Init>
  MX_USB_DEVICE_Init();
 8002584:	f007 fffe 	bl	800a584 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8002588:	f000 f89c 	bl	80026c4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_EnableCounter(TIM4);
 800258c:	4812      	ldr	r0, [pc, #72]	@ (80025d8 <main+0x90>)
 800258e:	f7ff fe16 	bl	80021be <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM13);
 8002592:	4812      	ldr	r0, [pc, #72]	@ (80025dc <main+0x94>)
 8002594:	f7ff fe13 	bl	80021be <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM14);
 8002598:	4811      	ldr	r0, [pc, #68]	@ (80025e0 <main+0x98>)
 800259a:	f7ff fe10 	bl	80021be <LL_TIM_EnableCounter>

  PARM_load();
 800259e:	f7ff f8a5 	bl	80016ec <PARM_load>

  SRXL2_Initialization();
 80025a2:	f7ff f99f 	bl	80018e4 <SRXL2_Initialization>
  // Servo OUT 초기화
  BuzzerPlayInit();
 80025a6:	f7fe fd07 	bl	8000fb8 <BuzzerPlayInit>

  // interrupt when finished receiving
  LL_USART_EnableIT_RXNE(USART1);
 80025aa:	480e      	ldr	r0, [pc, #56]	@ (80025e4 <main+0x9c>)
 80025ac:	f7ff ff3c 	bl	8002428 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART2);
 80025b0:	480d      	ldr	r0, [pc, #52]	@ (80025e8 <main+0xa0>)
 80025b2:	f7ff ff39 	bl	8002428 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART3);
 80025b6:	480d      	ldr	r0, [pc, #52]	@ (80025ec <main+0xa4>)
 80025b8:	f7ff ff36 	bl	8002428 <LL_USART_EnableIT_RXNE>

  // 필수 기기 점검
  SRXL2_Connect();
 80025bc:	f7ff f9a2 	bl	8001904 <SRXL2_Connect>
  ICM42688_Initialization();
 80025c0:	f7fe ffba 	bl	8001538 <ICM42688_Initialization>
  BuzzerPlayOneCycle();
 80025c4:	f7fe fd26 	bl	8001014 <BuzzerPlayOneCycle>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(SRXL2_GetData() != 0)
 80025c8:	f7ff fa0a 	bl	80019e0 <SRXL2_GetData>
//			  RC_channel.value[PARM_rc.MAP.PIT],
//			  RC_channel.value[PARM_rc.MAP.ROL],
//			  RC_channel.value[PARM_rc.MAP.YAW]
//						 );

	  ICM42688_Get6AxisRawData();
 80025cc:	f7ff f808 	bl	80015e0 <ICM42688_Get6AxisRawData>

	  // SRXL2_reqSignalQuality();

	  Log_Send();
 80025d0:	f7ff f85c 	bl	800168c <Log_Send>
	  if(SRXL2_GetData() != 0)
 80025d4:	e7f8      	b.n	80025c8 <main+0x80>
 80025d6:	bf00      	nop
 80025d8:	40000800 	.word	0x40000800
 80025dc:	40001c00 	.word	0x40001c00
 80025e0:	40002000 	.word	0x40002000
 80025e4:	40011000 	.word	0x40011000
 80025e8:	40004400 	.word	0x40004400
 80025ec:	40004800 	.word	0x40004800

080025f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b094      	sub	sp, #80	@ 0x50
 80025f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025f6:	f107 0320 	add.w	r3, r7, #32
 80025fa:	2230      	movs	r2, #48	@ 0x30
 80025fc:	2100      	movs	r1, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	f009 fb1b 	bl	800bc3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002604:	f107 030c 	add.w	r3, r7, #12
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	4b28      	ldr	r3, [pc, #160]	@ (80026bc <SystemClock_Config+0xcc>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261c:	4a27      	ldr	r2, [pc, #156]	@ (80026bc <SystemClock_Config+0xcc>)
 800261e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002622:	6413      	str	r3, [r2, #64]	@ 0x40
 8002624:	4b25      	ldr	r3, [pc, #148]	@ (80026bc <SystemClock_Config+0xcc>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002630:	2300      	movs	r3, #0
 8002632:	607b      	str	r3, [r7, #4]
 8002634:	4b22      	ldr	r3, [pc, #136]	@ (80026c0 <SystemClock_Config+0xd0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a21      	ldr	r2, [pc, #132]	@ (80026c0 <SystemClock_Config+0xd0>)
 800263a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b1f      	ldr	r3, [pc, #124]	@ (80026c0 <SystemClock_Config+0xd0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800264c:	2301      	movs	r3, #1
 800264e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002650:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002654:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002656:	2302      	movs	r3, #2
 8002658:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800265a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800265e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002660:	2308      	movs	r3, #8
 8002662:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002664:	23a8      	movs	r3, #168	@ 0xa8
 8002666:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002668:	2302      	movs	r3, #2
 800266a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800266c:	2307      	movs	r3, #7
 800266e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002670:	f107 0320 	add.w	r3, r7, #32
 8002674:	4618      	mov	r0, r3
 8002676:	f002 fdcf 	bl	8005218 <HAL_RCC_OscConfig>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002680:	f000 fdc4 	bl	800320c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002684:	230f      	movs	r3, #15
 8002686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002688:	2302      	movs	r3, #2
 800268a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002690:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002694:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002696:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800269a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800269c:	f107 030c 	add.w	r3, r7, #12
 80026a0:	2105      	movs	r1, #5
 80026a2:	4618      	mov	r0, r3
 80026a4:	f003 f830 	bl	8005708 <HAL_RCC_ClockConfig>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80026ae:	f000 fdad 	bl	800320c <Error_Handler>
  }
}
 80026b2:	bf00      	nop
 80026b4:	3750      	adds	r7, #80	@ 0x50
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40007000 	.word	0x40007000

080026c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b092      	sub	sp, #72	@ 0x48
 80026c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80026ca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80026d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	605a      	str	r2, [r3, #4]
 80026e0:	609a      	str	r2, [r3, #8]
 80026e2:	60da      	str	r2, [r3, #12]
 80026e4:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80026e6:	f107 0318 	add.w	r3, r7, #24
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f4:	463b      	mov	r3, r7
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	60da      	str	r2, [r3, #12]
 8002700:	611a      	str	r2, [r3, #16]
 8002702:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8002704:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002708:	f7ff fef0 	bl	80024ec <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800270c:	2004      	movs	r0, #4
 800270e:	f7ff febd 	bl	800248c <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC1   ------> ADC1_IN11
  */
  GPIO_InitStruct.Pin = RSSI_Pin;
 8002712:	2302      	movs	r3, #2
 8002714:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002716:	2303      	movs	r3, #3
 8002718:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(RSSI_GPIO_Port, &GPIO_InitStruct);
 800271e:	463b      	mov	r3, r7
 8002720:	4619      	mov	r1, r3
 8002722:	481f      	ldr	r0, [pc, #124]	@ (80027a0 <MX_ADC1_Init+0xdc>)
 8002724:	f003 fc0d 	bl	8005f42 <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8002728:	2300      	movs	r3, #0
 800272a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800272c:	2300      	movs	r3, #0
 800272e:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8002730:	2300      	movs	r3, #0
 8002732:	647b      	str	r3, [r7, #68]	@ 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8002734:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002738:	4619      	mov	r1, r3
 800273a:	481a      	ldr	r0, [pc, #104]	@ (80027a4 <MX_ADC1_Init+0xe0>)
 800273c:	f003 fa48 	bl	8005bd0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8002740:	2300      	movs	r3, #0
 8002742:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8002744:	2300      	movs	r3, #0
 8002746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002748:	2300      	movs	r3, #0
 800274a:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800274c:	2300      	movs	r3, #0
 800274e:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8002750:	2300      	movs	r3, #0
 8002752:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8002754:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002758:	4619      	mov	r1, r3
 800275a:	4812      	ldr	r0, [pc, #72]	@ (80027a4 <MX_ADC1_Init+0xe0>)
 800275c:	f003 fa64 	bl	8005c28 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8002760:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002764:	480f      	ldr	r0, [pc, #60]	@ (80027a4 <MX_ADC1_Init+0xe0>)
 8002766:	f7ff fca3 	bl	80020b0 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 800276a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800276e:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8002770:	2300      	movs	r3, #0
 8002772:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8002774:	f107 0318 	add.w	r3, r7, #24
 8002778:	4619      	mov	r1, r3
 800277a:	480b      	ldr	r0, [pc, #44]	@ (80027a8 <MX_ADC1_Init+0xe4>)
 800277c:	f003 f9e0 	bl	8005b40 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_11);
 8002780:	4a0a      	ldr	r2, [pc, #40]	@ (80027ac <MX_ADC1_Init+0xe8>)
 8002782:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002786:	4807      	ldr	r0, [pc, #28]	@ (80027a4 <MX_ADC1_Init+0xe0>)
 8002788:	f7ff fc55 	bl	8002036 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 800278c:	2200      	movs	r2, #0
 800278e:	4907      	ldr	r1, [pc, #28]	@ (80027ac <MX_ADC1_Init+0xe8>)
 8002790:	4804      	ldr	r0, [pc, #16]	@ (80027a4 <MX_ADC1_Init+0xe0>)
 8002792:	f7ff fca0 	bl	80020d6 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002796:	bf00      	nop
 8002798:	3748      	adds	r7, #72	@ 0x48
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40020800 	.word	0x40020800
 80027a4:	40012000 	.word	0x40012000
 80027a8:	40012300 	.word	0x40012300
 80027ac:	0030000b 	.word	0x0030000b

080027b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b090      	sub	sp, #64	@ 0x40
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80027b6:	f107 0318 	add.w	r3, r7, #24
 80027ba:	2228      	movs	r2, #40	@ 0x28
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f009 fa3b 	bl	800bc3a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c4:	463b      	mov	r3, r7
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	609a      	str	r2, [r3, #8]
 80027ce:	60da      	str	r2, [r3, #12]
 80027d0:	611a      	str	r2, [r3, #16]
 80027d2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80027d4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80027d8:	f7ff fe88 	bl	80024ec <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80027dc:	2001      	movs	r0, #1
 80027de:	f7ff fe55 	bl	800248c <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80027e2:	23e0      	movs	r3, #224	@ 0xe0
 80027e4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027e6:	2302      	movs	r3, #2
 80027e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80027ea:	2303      	movs	r3, #3
 80027ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80027f6:	2305      	movs	r3, #5
 80027f8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fa:	463b      	mov	r3, r7
 80027fc:	4619      	mov	r1, r3
 80027fe:	4813      	ldr	r0, [pc, #76]	@ (800284c <MX_SPI1_Init+0x9c>)
 8002800:	f003 fb9f 	bl	8005f42 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002804:	2300      	movs	r3, #0
 8002806:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002808:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800280c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800280e:	2300      	movs	r3, #0
 8002810:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002812:	2302      	movs	r3, #2
 8002814:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002816:	2301      	movs	r3, #1
 8002818:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800281a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800281e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8002820:	2318      	movs	r3, #24
 8002822:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002824:	2300      	movs	r3, #0
 8002826:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002828:	2300      	movs	r3, #0
 800282a:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 800282c:	230a      	movs	r3, #10
 800282e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002830:	f107 0318 	add.w	r3, r7, #24
 8002834:	4619      	mov	r1, r3
 8002836:	4806      	ldr	r0, [pc, #24]	@ (8002850 <MX_SPI1_Init+0xa0>)
 8002838:	f003 fd5d 	bl	80062f6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800283c:	2100      	movs	r1, #0
 800283e:	4804      	ldr	r0, [pc, #16]	@ (8002850 <MX_SPI1_Init+0xa0>)
 8002840:	f7ff fcaa 	bl	8002198 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002844:	bf00      	nop
 8002846:	3740      	adds	r7, #64	@ 0x40
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40020000 	.word	0x40020000
 8002850:	40013000 	.word	0x40013000

08002854 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b094      	sub	sp, #80	@ 0x50
 8002858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800285a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	605a      	str	r2, [r3, #4]
 8002864:	609a      	str	r2, [r3, #8]
 8002866:	60da      	str	r2, [r3, #12]
 8002868:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800286a:	f107 031c 	add.w	r3, r7, #28
 800286e:	2220      	movs	r2, #32
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f009 f9e1 	bl	800bc3a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002878:	1d3b      	adds	r3, r7, #4
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	609a      	str	r2, [r3, #8]
 8002882:	60da      	str	r2, [r3, #12]
 8002884:	611a      	str	r2, [r3, #16]
 8002886:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002888:	2002      	movs	r0, #2
 800288a:	f7ff fe17 	bl	80024bc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 800288e:	2353      	movs	r3, #83	@ 0x53
 8002890:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002892:	2300      	movs	r3, #0
 8002894:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 20000-LL_TIM_IC_FILTER_FDIV1_N2;
 8002896:	4b48      	ldr	r3, [pc, #288]	@ (80029b8 <MX_TIM3_Init+0x164>)
 8002898:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800289a:	2300      	movs	r3, #0
 800289c:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800289e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80028a2:	4619      	mov	r1, r3
 80028a4:	4845      	ldr	r0, [pc, #276]	@ (80029bc <MX_TIM3_Init+0x168>)
 80028a6:	f003 fdeb 	bl	8006480 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80028aa:	4844      	ldr	r0, [pc, #272]	@ (80029bc <MX_TIM3_Init+0x168>)
 80028ac:	f7ff fc97 	bl	80021de <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80028b0:	2100      	movs	r1, #0
 80028b2:	4842      	ldr	r0, [pc, #264]	@ (80029bc <MX_TIM3_Init+0x168>)
 80028b4:	f7ff fd2e 	bl	8002314 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 80028b8:	2101      	movs	r1, #1
 80028ba:	4840      	ldr	r0, [pc, #256]	@ (80029bc <MX_TIM3_Init+0x168>)
 80028bc:	f7ff fce6 	bl	800228c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80028c0:	2360      	movs	r3, #96	@ 0x60
 80028c2:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80028d0:	2300      	movs	r3, #0
 80028d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80028d4:	f107 031c 	add.w	r3, r7, #28
 80028d8:	461a      	mov	r2, r3
 80028da:	2101      	movs	r1, #1
 80028dc:	4837      	ldr	r0, [pc, #220]	@ (80029bc <MX_TIM3_Init+0x168>)
 80028de:	f003 fe69 	bl	80065b4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 80028e2:	2101      	movs	r1, #1
 80028e4:	4835      	ldr	r0, [pc, #212]	@ (80029bc <MX_TIM3_Init+0x168>)
 80028e6:	f7ff fc8b 	bl	8002200 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 80028ea:	2110      	movs	r1, #16
 80028ec:	4833      	ldr	r0, [pc, #204]	@ (80029bc <MX_TIM3_Init+0x168>)
 80028ee:	f7ff fccd 	bl	800228c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80028f2:	f107 031c 	add.w	r3, r7, #28
 80028f6:	461a      	mov	r2, r3
 80028f8:	2110      	movs	r1, #16
 80028fa:	4830      	ldr	r0, [pc, #192]	@ (80029bc <MX_TIM3_Init+0x168>)
 80028fc:	f003 fe5a 	bl	80065b4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8002900:	2110      	movs	r1, #16
 8002902:	482e      	ldr	r0, [pc, #184]	@ (80029bc <MX_TIM3_Init+0x168>)
 8002904:	f7ff fc7c 	bl	8002200 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
 8002908:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800290c:	482b      	ldr	r0, [pc, #172]	@ (80029bc <MX_TIM3_Init+0x168>)
 800290e:	f7ff fcbd 	bl	800228c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002912:	f107 031c 	add.w	r3, r7, #28
 8002916:	461a      	mov	r2, r3
 8002918:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800291c:	4827      	ldr	r0, [pc, #156]	@ (80029bc <MX_TIM3_Init+0x168>)
 800291e:	f003 fe49 	bl	80065b4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
 8002922:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002926:	4825      	ldr	r0, [pc, #148]	@ (80029bc <MX_TIM3_Init+0x168>)
 8002928:	f7ff fc6a 	bl	8002200 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 800292c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002930:	4822      	ldr	r0, [pc, #136]	@ (80029bc <MX_TIM3_Init+0x168>)
 8002932:	f7ff fcab 	bl	800228c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8002936:	f107 031c 	add.w	r3, r7, #28
 800293a:	461a      	mov	r2, r3
 800293c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002940:	481e      	ldr	r0, [pc, #120]	@ (80029bc <MX_TIM3_Init+0x168>)
 8002942:	f003 fe37 	bl	80065b4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8002946:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800294a:	481c      	ldr	r0, [pc, #112]	@ (80029bc <MX_TIM3_Init+0x168>)
 800294c:	f7ff fc58 	bl	8002200 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002950:	2100      	movs	r1, #0
 8002952:	481a      	ldr	r0, [pc, #104]	@ (80029bc <MX_TIM3_Init+0x168>)
 8002954:	f7ff fcf3 	bl	800233e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002958:	4818      	ldr	r0, [pc, #96]	@ (80029bc <MX_TIM3_Init+0x168>)
 800295a:	f7ff fd03 	bl	8002364 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800295e:	2002      	movs	r0, #2
 8002960:	f7ff fd94 	bl	800248c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002964:	2004      	movs	r0, #4
 8002966:	f7ff fd91 	bl	800248c <LL_AHB1_GRP1_EnableClock>
  PB0   ------> TIM3_CH3
  PB1   ------> TIM3_CH4
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = AUX_CH1_Pin|AUX_CH2_Pin;
 800296a:	2303      	movs	r3, #3
 800296c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800296e:	2302      	movs	r3, #2
 8002970:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800297e:	2302      	movs	r3, #2
 8002980:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002982:	1d3b      	adds	r3, r7, #4
 8002984:	4619      	mov	r1, r3
 8002986:	480e      	ldr	r0, [pc, #56]	@ (80029c0 <MX_TIM3_Init+0x16c>)
 8002988:	f003 fadb 	bl	8005f42 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = MAIN_CH2_Pin|MAIN_CH3_Pin;
 800298c:	23c0      	movs	r3, #192	@ 0xc0
 800298e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002990:	2302      	movs	r3, #2
 8002992:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80029a0:	2302      	movs	r3, #2
 80029a2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	4619      	mov	r1, r3
 80029a8:	4806      	ldr	r0, [pc, #24]	@ (80029c4 <MX_TIM3_Init+0x170>)
 80029aa:	f003 faca 	bl	8005f42 <LL_GPIO_Init>

}
 80029ae:	bf00      	nop
 80029b0:	3750      	adds	r7, #80	@ 0x50
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	fff04e20 	.word	0xfff04e20
 80029bc:	40000400 	.word	0x40000400
 80029c0:	40020400 	.word	0x40020400
 80029c4:	40020800 	.word	0x40020800

080029c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b094      	sub	sp, #80	@ 0x50
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80029ce:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	605a      	str	r2, [r3, #4]
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	60da      	str	r2, [r3, #12]
 80029dc:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80029de:	f107 031c 	add.w	r3, r7, #28
 80029e2:	2220      	movs	r2, #32
 80029e4:	2100      	movs	r1, #0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f009 f927 	bl	800bc3a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	605a      	str	r2, [r3, #4]
 80029f4:	609a      	str	r2, [r3, #8]
 80029f6:	60da      	str	r2, [r3, #12]
 80029f8:	611a      	str	r2, [r3, #16]
 80029fa:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80029fc:	2004      	movs	r0, #4
 80029fe:	f7ff fd5d 	bl	80024bc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 4;
 8002a02:	2304      	movs	r3, #4
 8002a04:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002a06:	2300      	movs	r3, #0
 8002a08:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 64220-LL_TIM_IC_FILTER_FDIV1_N2;
 8002a0a:	4b41      	ldr	r3, [pc, #260]	@ (8002b10 <MX_TIM4_Init+0x148>)
 8002a0c:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8002a12:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002a16:	4619      	mov	r1, r3
 8002a18:	483e      	ldr	r0, [pc, #248]	@ (8002b14 <MX_TIM4_Init+0x14c>)
 8002a1a:	f003 fd31 	bl	8006480 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8002a1e:	483d      	ldr	r0, [pc, #244]	@ (8002b14 <MX_TIM4_Init+0x14c>)
 8002a20:	f7ff fbdd 	bl	80021de <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002a24:	2100      	movs	r1, #0
 8002a26:	483b      	ldr	r0, [pc, #236]	@ (8002b14 <MX_TIM4_Init+0x14c>)
 8002a28:	f7ff fc74 	bl	8002314 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH2);
 8002a2c:	2110      	movs	r1, #16
 8002a2e:	4839      	ldr	r0, [pc, #228]	@ (8002b14 <MX_TIM4_Init+0x14c>)
 8002a30:	f7ff fc2c 	bl	800228c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002a34:	2360      	movs	r3, #96	@ 0x60
 8002a36:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002a44:	2300      	movs	r3, #0
 8002a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002a48:	f107 031c 	add.w	r3, r7, #28
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	2110      	movs	r1, #16
 8002a50:	4830      	ldr	r0, [pc, #192]	@ (8002b14 <MX_TIM4_Init+0x14c>)
 8002a52:	f003 fdaf 	bl	80065b4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 8002a56:	2110      	movs	r1, #16
 8002a58:	482e      	ldr	r0, [pc, #184]	@ (8002b14 <MX_TIM4_Init+0x14c>)
 8002a5a:	f7ff fbd1 	bl	8002200 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH3);
 8002a5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a62:	482c      	ldr	r0, [pc, #176]	@ (8002b14 <MX_TIM4_Init+0x14c>)
 8002a64:	f7ff fc12 	bl	800228c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002a68:	f107 031c 	add.w	r3, r7, #28
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a72:	4828      	ldr	r0, [pc, #160]	@ (8002b14 <MX_TIM4_Init+0x14c>)
 8002a74:	f003 fd9e 	bl	80065b4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 8002a78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a7c:	4825      	ldr	r0, [pc, #148]	@ (8002b14 <MX_TIM4_Init+0x14c>)
 8002a7e:	f7ff fbbf 	bl	8002200 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH4);
 8002a82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a86:	4823      	ldr	r0, [pc, #140]	@ (8002b14 <MX_TIM4_Init+0x14c>)
 8002a88:	f7ff fc00 	bl	800228c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8002a8c:	f107 031c 	add.w	r3, r7, #28
 8002a90:	461a      	mov	r2, r3
 8002a92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a96:	481f      	ldr	r0, [pc, #124]	@ (8002b14 <MX_TIM4_Init+0x14c>)
 8002a98:	f003 fd8c 	bl	80065b4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH4);
 8002a9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002aa0:	481c      	ldr	r0, [pc, #112]	@ (8002b14 <MX_TIM4_Init+0x14c>)
 8002aa2:	f7ff fbad 	bl	8002200 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	481a      	ldr	r0, [pc, #104]	@ (8002b14 <MX_TIM4_Init+0x14c>)
 8002aaa:	f7ff fc48 	bl	800233e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8002aae:	4819      	ldr	r0, [pc, #100]	@ (8002b14 <MX_TIM4_Init+0x14c>)
 8002ab0:	f7ff fc58 	bl	8002364 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002ab4:	2008      	movs	r0, #8
 8002ab6:	f7ff fce9 	bl	800248c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002aba:	2002      	movs	r0, #2
 8002abc:	f7ff fce6 	bl	800248c <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PD14   ------> TIM4_CH3
  PD15   ------> TIM4_CH4
  PB7   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = Buzzer_Pin|MAIN_CH4_Pin;
 8002ac0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002ac4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ada:	1d3b      	adds	r3, r7, #4
 8002adc:	4619      	mov	r1, r3
 8002ade:	480e      	ldr	r0, [pc, #56]	@ (8002b18 <MX_TIM4_Init+0x150>)
 8002ae0:	f003 fa2f 	bl	8005f42 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = MAIN_CH1_Pin;
 8002ae4:	2380      	movs	r3, #128	@ 0x80
 8002ae6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002af8:	2302      	movs	r3, #2
 8002afa:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(MAIN_CH1_GPIO_Port, &GPIO_InitStruct);
 8002afc:	1d3b      	adds	r3, r7, #4
 8002afe:	4619      	mov	r1, r3
 8002b00:	4806      	ldr	r0, [pc, #24]	@ (8002b1c <MX_TIM4_Init+0x154>)
 8002b02:	f003 fa1e 	bl	8005f42 <LL_GPIO_Init>

}
 8002b06:	bf00      	nop
 8002b08:	3750      	adds	r7, #80	@ 0x50
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	fff0fadc 	.word	0xfff0fadc
 8002b14:	40000800 	.word	0x40000800
 8002b18:	40020c00 	.word	0x40020c00
 8002b1c:	40020400 	.word	0x40020400

08002b20 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b094      	sub	sp, #80	@ 0x50
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002b26:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	605a      	str	r2, [r3, #4]
 8002b30:	609a      	str	r2, [r3, #8]
 8002b32:	60da      	str	r2, [r3, #12]
 8002b34:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002b36:	f107 031c 	add.w	r3, r7, #28
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f009 f87b 	bl	800bc3a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	1d3b      	adds	r3, r7, #4
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
 8002b4c:	609a      	str	r2, [r3, #8]
 8002b4e:	60da      	str	r2, [r3, #12]
 8002b50:	611a      	str	r2, [r3, #16]
 8002b52:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8002b54:	2008      	movs	r0, #8
 8002b56:	f7ff fcb1 	bl	80024bc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 8002b5a:	2353      	movs	r3, #83	@ 0x53
 8002b5c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 20000-LL_TIM_IC_FILTER_FDIV1_N2;
 8002b62:	4b3e      	ldr	r3, [pc, #248]	@ (8002c5c <MX_TIM5_Init+0x13c>)
 8002b64:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002b66:	2300      	movs	r3, #0
 8002b68:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8002b6a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b6e:	4619      	mov	r1, r3
 8002b70:	483b      	ldr	r0, [pc, #236]	@ (8002c60 <MX_TIM5_Init+0x140>)
 8002b72:	f003 fc85 	bl	8006480 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8002b76:	483a      	ldr	r0, [pc, #232]	@ (8002c60 <MX_TIM5_Init+0x140>)
 8002b78:	f7ff fb31 	bl	80021de <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4838      	ldr	r0, [pc, #224]	@ (8002c60 <MX_TIM5_Init+0x140>)
 8002b80:	f7ff fbc8 	bl	8002314 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 8002b84:	2101      	movs	r1, #1
 8002b86:	4836      	ldr	r0, [pc, #216]	@ (8002c60 <MX_TIM5_Init+0x140>)
 8002b88:	f7ff fb80 	bl	800228c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002b8c:	2360      	movs	r3, #96	@ 0x60
 8002b8e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002b90:	2300      	movs	r3, #0
 8002b92:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002b94:	2300      	movs	r3, #0
 8002b96:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002ba0:	f107 031c 	add.w	r3, r7, #28
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	482d      	ldr	r0, [pc, #180]	@ (8002c60 <MX_TIM5_Init+0x140>)
 8002baa:	f003 fd03 	bl	80065b4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH1);
 8002bae:	2101      	movs	r1, #1
 8002bb0:	482b      	ldr	r0, [pc, #172]	@ (8002c60 <MX_TIM5_Init+0x140>)
 8002bb2:	f7ff fb25 	bl	8002200 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 8002bb6:	2110      	movs	r1, #16
 8002bb8:	4829      	ldr	r0, [pc, #164]	@ (8002c60 <MX_TIM5_Init+0x140>)
 8002bba:	f7ff fb67 	bl	800228c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002bbe:	f107 031c 	add.w	r3, r7, #28
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	2110      	movs	r1, #16
 8002bc6:	4826      	ldr	r0, [pc, #152]	@ (8002c60 <MX_TIM5_Init+0x140>)
 8002bc8:	f003 fcf4 	bl	80065b4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH2);
 8002bcc:	2110      	movs	r1, #16
 8002bce:	4824      	ldr	r0, [pc, #144]	@ (8002c60 <MX_TIM5_Init+0x140>)
 8002bd0:	f7ff fb16 	bl	8002200 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 8002bd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002bd8:	4821      	ldr	r0, [pc, #132]	@ (8002c60 <MX_TIM5_Init+0x140>)
 8002bda:	f7ff fb57 	bl	800228c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002bde:	f107 031c 	add.w	r3, r7, #28
 8002be2:	461a      	mov	r2, r3
 8002be4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002be8:	481d      	ldr	r0, [pc, #116]	@ (8002c60 <MX_TIM5_Init+0x140>)
 8002bea:	f003 fce3 	bl	80065b4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH3);
 8002bee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002bf2:	481b      	ldr	r0, [pc, #108]	@ (8002c60 <MX_TIM5_Init+0x140>)
 8002bf4:	f7ff fb04 	bl	8002200 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 8002bf8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002bfc:	4818      	ldr	r0, [pc, #96]	@ (8002c60 <MX_TIM5_Init+0x140>)
 8002bfe:	f7ff fb45 	bl	800228c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8002c02:	f107 031c 	add.w	r3, r7, #28
 8002c06:	461a      	mov	r2, r3
 8002c08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c0c:	4814      	ldr	r0, [pc, #80]	@ (8002c60 <MX_TIM5_Init+0x140>)
 8002c0e:	f003 fcd1 	bl	80065b4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH4);
 8002c12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c16:	4812      	ldr	r0, [pc, #72]	@ (8002c60 <MX_TIM5_Init+0x140>)
 8002c18:	f7ff faf2 	bl	8002200 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	4810      	ldr	r0, [pc, #64]	@ (8002c60 <MX_TIM5_Init+0x140>)
 8002c20:	f7ff fb8d 	bl	800233e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8002c24:	480e      	ldr	r0, [pc, #56]	@ (8002c60 <MX_TIM5_Init+0x140>)
 8002c26:	f7ff fb9d 	bl	8002364 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002c2a:	2001      	movs	r0, #1
 8002c2c:	f7ff fc2e 	bl	800248c <LL_AHB1_GRP1_EnableClock>
  PA0-WKUP   ------> TIM5_CH1
  PA1   ------> TIM5_CH2
  PA2   ------> TIM5_CH3
  PA3   ------> TIM5_CH4
  */
  GPIO_InitStruct.Pin = MAIN_CH5_Pin|MAIN_CH6_Pin|MAIN_CH7_Pin|MAIN_CH8_Pin;
 8002c30:	230f      	movs	r3, #15
 8002c32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002c34:	2302      	movs	r3, #2
 8002c36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002c44:	2302      	movs	r3, #2
 8002c46:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c48:	1d3b      	adds	r3, r7, #4
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4805      	ldr	r0, [pc, #20]	@ (8002c64 <MX_TIM5_Init+0x144>)
 8002c4e:	f003 f978 	bl	8005f42 <LL_GPIO_Init>

}
 8002c52:	bf00      	nop
 8002c54:	3750      	adds	r7, #80	@ 0x50
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	fff04e20 	.word	0xfff04e20
 8002c60:	40000c00 	.word	0x40000c00
 8002c64:	40020000 	.word	0x40020000

08002c68 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08e      	sub	sp, #56	@ 0x38
 8002c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002c6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	605a      	str	r2, [r3, #4]
 8002c78:	609a      	str	r2, [r3, #8]
 8002c7a:	60da      	str	r2, [r3, #12]
 8002c7c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002c7e:	1d3b      	adds	r3, r7, #4
 8002c80:	2220      	movs	r2, #32
 8002c82:	2100      	movs	r1, #0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f008 ffd8 	bl	800bc3a <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM13);
 8002c8a:	2080      	movs	r0, #128	@ 0x80
 8002c8c:	f7ff fc16 	bl	80024bc <LL_APB1_GRP1_EnableClock>

  /* TIM13 interrupt Init */
  NVIC_SetPriority(TIM8_UP_TIM13_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002c90:	f7ff f948 	bl	8001f24 <__NVIC_GetPriorityGrouping>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2200      	movs	r2, #0
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff f998 	bl	8001fd0 <NVIC_EncodePriority>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	202c      	movs	r0, #44	@ 0x2c
 8002ca6:	f7ff f969 	bl	8001f7c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002caa:	202c      	movs	r0, #44	@ 0x2c
 8002cac:	f7ff f948 	bl	8001f40 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  TIM_InitStruct.Prescaler = 1;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	84bb      	strh	r3, [r7, #36]	@ 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_InitStruct.Autoreload = 42000-LL_TIM_IC_FILTER_FDIV1_N2;
 8002cb8:	4b13      	ldr	r3, [pc, #76]	@ (8002d08 <MX_TIM13_Init+0xa0>)
 8002cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_Init(TIM13, &TIM_InitStruct);
 8002cc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4811      	ldr	r0, [pc, #68]	@ (8002d0c <MX_TIM13_Init+0xa4>)
 8002cc8:	f003 fbda 	bl	8006480 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM13);
 8002ccc:	480f      	ldr	r0, [pc, #60]	@ (8002d0c <MX_TIM13_Init+0xa4>)
 8002cce:	f7ff fa86 	bl	80021de <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM13, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002ce6:	1d3b      	adds	r3, r7, #4
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2101      	movs	r1, #1
 8002cec:	4807      	ldr	r0, [pc, #28]	@ (8002d0c <MX_TIM13_Init+0xa4>)
 8002cee:	f003 fc61 	bl	80065b4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM13, LL_TIM_CHANNEL_CH1);
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	4805      	ldr	r0, [pc, #20]	@ (8002d0c <MX_TIM13_Init+0xa4>)
 8002cf6:	f7ff fa83 	bl	8002200 <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM13_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM13);
 8002cfa:	4804      	ldr	r0, [pc, #16]	@ (8002d0c <MX_TIM13_Init+0xa4>)
 8002cfc:	f7ff fb42 	bl	8002384 <LL_TIM_EnableIT_UPDATE>
//  TIM13->ARR = 42000;
//  TIM13->PSC = 2;

  /* USER CODE END TIM13_Init 2 */

}
 8002d00:	bf00      	nop
 8002d02:	3738      	adds	r7, #56	@ 0x38
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	fff0a410 	.word	0xfff0a410
 8002d0c:	40001c00 	.word	0x40001c00

08002d10 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08e      	sub	sp, #56	@ 0x38
 8002d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002d16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	60da      	str	r2, [r3, #12]
 8002d24:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002d26:	1d3b      	adds	r3, r7, #4
 8002d28:	2220      	movs	r2, #32
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f008 ff84 	bl	800bc3a <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM14);
 8002d32:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002d36:	f7ff fbc1 	bl	80024bc <LL_APB1_GRP1_EnableClock>

  /* TIM14 interrupt Init */
  NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002d3a:	f7ff f8f3 	bl	8001f24 <__NVIC_GetPriorityGrouping>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2200      	movs	r2, #0
 8002d42:	2100      	movs	r1, #0
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff f943 	bl	8001fd0 <NVIC_EncodePriority>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	202d      	movs	r0, #45	@ 0x2d
 8002d50:	f7ff f914 	bl	8001f7c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002d54:	202d      	movs	r0, #45	@ 0x2d
 8002d56:	f7ff f8f3 	bl	8001f40 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 8002d5a:	2353      	movs	r3, #83	@ 0x53
 8002d5c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 8002d62:	4b14      	ldr	r3, [pc, #80]	@ (8002db4 <MX_TIM14_Init+0xa4>)
 8002d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002d66:	2300      	movs	r3, #0
 8002d68:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_Init(TIM14, &TIM_InitStruct);
 8002d6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4811      	ldr	r0, [pc, #68]	@ (8002db8 <MX_TIM14_Init+0xa8>)
 8002d72:	f003 fb85 	bl	8006480 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM14);
 8002d76:	4810      	ldr	r0, [pc, #64]	@ (8002db8 <MX_TIM14_Init+0xa8>)
 8002d78:	f7ff fa31 	bl	80021de <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM14, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	461a      	mov	r2, r3
 8002d94:	2101      	movs	r1, #1
 8002d96:	4808      	ldr	r0, [pc, #32]	@ (8002db8 <MX_TIM14_Init+0xa8>)
 8002d98:	f003 fc0c 	bl	80065b4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM14, LL_TIM_CHANNEL_CH1);
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	4806      	ldr	r0, [pc, #24]	@ (8002db8 <MX_TIM14_Init+0xa8>)
 8002da0:	f7ff fa2e 	bl	8002200 <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM14_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM14);
 8002da4:	4804      	ldr	r0, [pc, #16]	@ (8002db8 <MX_TIM14_Init+0xa8>)
 8002da6:	f7ff faed 	bl	8002384 <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM14_Init 2 */

}
 8002daa:	bf00      	nop
 8002dac:	3738      	adds	r7, #56	@ 0x38
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	fff003e8 	.word	0xfff003e8
 8002db8:	40002000 	.word	0x40002000

08002dbc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08e      	sub	sp, #56	@ 0x38
 8002dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002dc2:	f107 031c 	add.w	r3, r7, #28
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	605a      	str	r2, [r3, #4]
 8002dcc:	609a      	str	r2, [r3, #8]
 8002dce:	60da      	str	r2, [r3, #12]
 8002dd0:	611a      	str	r2, [r3, #16]
 8002dd2:	615a      	str	r2, [r3, #20]
 8002dd4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	611a      	str	r2, [r3, #16]
 8002de4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8002de6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002dea:	f7ff fb67 	bl	80024bc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002dee:	2004      	movs	r0, #4
 8002df0:	f7ff fb4c 	bl	800248c <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = GPS1_TX_Pin|GPS2_RX_Pin;
 8002df4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002df8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002e0a:	2308      	movs	r3, #8
 8002e0c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e0e:	1d3b      	adds	r3, r7, #4
 8002e10:	4619      	mov	r1, r3
 8002e12:	4811      	ldr	r0, [pc, #68]	@ (8002e58 <MX_UART4_Init+0x9c>)
 8002e14:	f003 f895 	bl	8005f42 <LL_GPIO_Init>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002e18:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002e1c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002e22:	2300      	movs	r3, #0
 8002e24:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002e26:	2300      	movs	r3, #0
 8002e28:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002e2a:	230c      	movs	r3, #12
 8002e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002e32:	2300      	movs	r3, #0
 8002e34:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8002e36:	f107 031c 	add.w	r3, r7, #28
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4807      	ldr	r0, [pc, #28]	@ (8002e5c <MX_UART4_Init+0xa0>)
 8002e3e:	f004 f807 	bl	8006e50 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8002e42:	4806      	ldr	r0, [pc, #24]	@ (8002e5c <MX_UART4_Init+0xa0>)
 8002e44:	f7ff fabe 	bl	80023c4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8002e48:	4804      	ldr	r0, [pc, #16]	@ (8002e5c <MX_UART4_Init+0xa0>)
 8002e4a:	f7ff faab 	bl	80023a4 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002e4e:	bf00      	nop
 8002e50:	3738      	adds	r7, #56	@ 0x38
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40020800 	.word	0x40020800
 8002e5c:	40004c00 	.word	0x40004c00

08002e60 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08e      	sub	sp, #56	@ 0x38
 8002e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002e66:	f107 031c 	add.w	r3, r7, #28
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	605a      	str	r2, [r3, #4]
 8002e70:	609a      	str	r2, [r3, #8]
 8002e72:	60da      	str	r2, [r3, #12]
 8002e74:	611a      	str	r2, [r3, #16]
 8002e76:	615a      	str	r2, [r3, #20]
 8002e78:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e7a:	1d3b      	adds	r3, r7, #4
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	611a      	str	r2, [r3, #16]
 8002e88:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8002e8a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002e8e:	f7ff fb15 	bl	80024bc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002e92:	2004      	movs	r0, #4
 8002e94:	f7ff fafa 	bl	800248c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002e98:	2008      	movs	r0, #8
 8002e9a:	f7ff faf7 	bl	800248c <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = GPS2_TX_Pin;
 8002e9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ea2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002eb4:	2308      	movs	r3, #8
 8002eb6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPS2_TX_GPIO_Port, &GPIO_InitStruct);
 8002eb8:	1d3b      	adds	r3, r7, #4
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4821      	ldr	r0, [pc, #132]	@ (8002f44 <MX_UART5_Init+0xe4>)
 8002ebe:	f003 f840 	bl	8005f42 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = GPS2_RXD2_Pin;
 8002ec2:	2304      	movs	r3, #4
 8002ec4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002ed6:	2308      	movs	r3, #8
 8002ed8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPS2_RXD2_GPIO_Port, &GPIO_InitStruct);
 8002eda:	1d3b      	adds	r3, r7, #4
 8002edc:	4619      	mov	r1, r3
 8002ede:	481a      	ldr	r0, [pc, #104]	@ (8002f48 <MX_UART5_Init+0xe8>)
 8002ee0:	f003 f82f 	bl	8005f42 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002ee4:	f7ff f81e 	bl	8001f24 <__NVIC_GetPriorityGrouping>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2200      	movs	r2, #0
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff f86e 	bl	8001fd0 <NVIC_EncodePriority>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	2035      	movs	r0, #53	@ 0x35
 8002efa:	f7ff f83f 	bl	8001f7c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8002efe:	2035      	movs	r0, #53	@ 0x35
 8002f00:	f7ff f81e 	bl	8001f40 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002f04:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002f08:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002f12:	2300      	movs	r3, #0
 8002f14:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002f16:	230c      	movs	r3, #12
 8002f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8002f22:	f107 031c 	add.w	r3, r7, #28
 8002f26:	4619      	mov	r1, r3
 8002f28:	4808      	ldr	r0, [pc, #32]	@ (8002f4c <MX_UART5_Init+0xec>)
 8002f2a:	f003 ff91 	bl	8006e50 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8002f2e:	4807      	ldr	r0, [pc, #28]	@ (8002f4c <MX_UART5_Init+0xec>)
 8002f30:	f7ff fa48 	bl	80023c4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8002f34:	4805      	ldr	r0, [pc, #20]	@ (8002f4c <MX_UART5_Init+0xec>)
 8002f36:	f7ff fa35 	bl	80023a4 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002f3a:	bf00      	nop
 8002f3c:	3738      	adds	r7, #56	@ 0x38
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40020800 	.word	0x40020800
 8002f48:	40020c00 	.word	0x40020c00
 8002f4c:	40005000 	.word	0x40005000

08002f50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08e      	sub	sp, #56	@ 0x38
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002f56:	f107 031c 	add.w	r3, r7, #28
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	60da      	str	r2, [r3, #12]
 8002f64:	611a      	str	r2, [r3, #16]
 8002f66:	615a      	str	r2, [r3, #20]
 8002f68:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6a:	1d3b      	adds	r3, r7, #4
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	60da      	str	r2, [r3, #12]
 8002f76:	611a      	str	r2, [r3, #16]
 8002f78:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002f7a:	2010      	movs	r0, #16
 8002f7c:	f7ff fab6 	bl	80024ec <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002f80:	2001      	movs	r0, #1
 8002f82:	f7ff fa83 	bl	800248c <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = RC_SRXL2_Pin;
 8002f86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002f90:	2303      	movs	r3, #3
 8002f92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002f9c:	2307      	movs	r3, #7
 8002f9e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(RC_SRXL2_GPIO_Port, &GPIO_InitStruct);
 8002fa0:	1d3b      	adds	r3, r7, #4
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4817      	ldr	r0, [pc, #92]	@ (8003004 <MX_USART1_UART_Init+0xb4>)
 8002fa6:	f002 ffcc 	bl	8005f42 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002faa:	f7fe ffbb 	bl	8001f24 <__NVIC_GetPriorityGrouping>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff f80b 	bl	8001fd0 <NVIC_EncodePriority>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	2025      	movs	r0, #37	@ 0x25
 8002fc0:	f7fe ffdc 	bl	8001f7c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8002fc4:	2025      	movs	r0, #37	@ 0x25
 8002fc6:	f7fe ffbb 	bl	8001f40 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002fca:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002fce:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002fdc:	230c      	movs	r3, #12
 8002fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8002fe4:	f107 031c 	add.w	r3, r7, #28
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4807      	ldr	r0, [pc, #28]	@ (8003008 <MX_USART1_UART_Init+0xb8>)
 8002fec:	f003 ff30 	bl	8006e50 <LL_USART_Init>
  LL_USART_Enable(USART1);
 8002ff0:	4805      	ldr	r0, [pc, #20]	@ (8003008 <MX_USART1_UART_Init+0xb8>)
 8002ff2:	f7ff f9d7 	bl	80023a4 <LL_USART_Enable>
  LL_USART_ConfigHalfDuplexMode(USART1);
 8002ff6:	4804      	ldr	r0, [pc, #16]	@ (8003008 <MX_USART1_UART_Init+0xb8>)
 8002ff8:	f7ff f9fa 	bl	80023f0 <LL_USART_ConfigHalfDuplexMode>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ffc:	bf00      	nop
 8002ffe:	3738      	adds	r7, #56	@ 0x38
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40020000 	.word	0x40020000
 8003008:	40011000 	.word	0x40011000

0800300c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08e      	sub	sp, #56	@ 0x38
 8003010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003012:	f107 031c 	add.w	r3, r7, #28
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	609a      	str	r2, [r3, #8]
 800301e:	60da      	str	r2, [r3, #12]
 8003020:	611a      	str	r2, [r3, #16]
 8003022:	615a      	str	r2, [r3, #20]
 8003024:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003026:	1d3b      	adds	r3, r7, #4
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	611a      	str	r2, [r3, #16]
 8003034:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8003036:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800303a:	f7ff fa3f 	bl	80024bc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800303e:	2008      	movs	r0, #8
 8003040:	f7ff fa24 	bl	800248c <LL_AHB1_GRP1_EnableClock>
  PD3   ------> USART2_CTS
  PD4   ------> USART2_RTS
  PD5   ------> USART2_TX
  PD6   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|Telm1_TX_Pin|Telm1_RX_Pin;
 8003044:	2378      	movs	r3, #120	@ 0x78
 8003046:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003048:	2302      	movs	r3, #2
 800304a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800304c:	2303      	movs	r3, #3
 800304e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003058:	2307      	movs	r3, #7
 800305a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800305c:	1d3b      	adds	r3, r7, #4
 800305e:	4619      	mov	r1, r3
 8003060:	4818      	ldr	r0, [pc, #96]	@ (80030c4 <MX_USART2_UART_Init+0xb8>)
 8003062:	f002 ff6e 	bl	8005f42 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003066:	f7fe ff5d 	bl	8001f24 <__NVIC_GetPriorityGrouping>
 800306a:	4603      	mov	r3, r0
 800306c:	2200      	movs	r2, #0
 800306e:	2100      	movs	r1, #0
 8003070:	4618      	mov	r0, r3
 8003072:	f7fe ffad 	bl	8001fd0 <NVIC_EncodePriority>
 8003076:	4603      	mov	r3, r0
 8003078:	4619      	mov	r1, r3
 800307a:	2026      	movs	r0, #38	@ 0x26
 800307c:	f7fe ff7e 	bl	8001f7c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8003080:	2026      	movs	r0, #38	@ 0x26
 8003082:	f7fe ff5d 	bl	8001f40 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 57600;
 8003086:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 800308a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800308c:	2300      	movs	r3, #0
 800308e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003090:	2300      	movs	r3, #0
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003094:	2300      	movs	r3, #0
 8003096:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003098:	230c      	movs	r3, #12
 800309a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800309c:	2300      	movs	r3, #0
 800309e:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80030a0:	2300      	movs	r3, #0
 80030a2:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80030a4:	f107 031c 	add.w	r3, r7, #28
 80030a8:	4619      	mov	r1, r3
 80030aa:	4807      	ldr	r0, [pc, #28]	@ (80030c8 <MX_USART2_UART_Init+0xbc>)
 80030ac:	f003 fed0 	bl	8006e50 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80030b0:	4805      	ldr	r0, [pc, #20]	@ (80030c8 <MX_USART2_UART_Init+0xbc>)
 80030b2:	f7ff f987 	bl	80023c4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80030b6:	4804      	ldr	r0, [pc, #16]	@ (80030c8 <MX_USART2_UART_Init+0xbc>)
 80030b8:	f7ff f974 	bl	80023a4 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030bc:	bf00      	nop
 80030be:	3738      	adds	r7, #56	@ 0x38
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40020c00 	.word	0x40020c00
 80030c8:	40004400 	.word	0x40004400

080030cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08e      	sub	sp, #56	@ 0x38
 80030d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80030d2:	f107 031c 	add.w	r3, r7, #28
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	605a      	str	r2, [r3, #4]
 80030dc:	609a      	str	r2, [r3, #8]
 80030de:	60da      	str	r2, [r3, #12]
 80030e0:	611a      	str	r2, [r3, #16]
 80030e2:	615a      	str	r2, [r3, #20]
 80030e4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e6:	1d3b      	adds	r3, r7, #4
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	60da      	str	r2, [r3, #12]
 80030f2:	611a      	str	r2, [r3, #16]
 80030f4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80030f6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80030fa:	f7ff f9df 	bl	80024bc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80030fe:	2008      	movs	r0, #8
 8003100:	f7ff f9c4 	bl	800248c <LL_AHB1_GRP1_EnableClock>
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  PD11   ------> USART3_CTS
  PD12   ------> USART3_RTS
  */
  GPIO_InitStruct.Pin = Telm2_TX_Pin|Telm2_RX_Pin|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8003104:	f44f 53d8 	mov.w	r3, #6912	@ 0x1b00
 8003108:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800310a:	2302      	movs	r3, #2
 800310c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800310e:	2303      	movs	r3, #3
 8003110:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800311a:	2307      	movs	r3, #7
 800311c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800311e:	1d3b      	adds	r3, r7, #4
 8003120:	4619      	mov	r1, r3
 8003122:	4811      	ldr	r0, [pc, #68]	@ (8003168 <MX_USART3_UART_Init+0x9c>)
 8003124:	f002 ff0d 	bl	8005f42 <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003128:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800312c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800312e:	2300      	movs	r3, #0
 8003130:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003132:	2300      	movs	r3, #0
 8003134:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003136:	2300      	movs	r3, #0
 8003138:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800313a:	230c      	movs	r3, #12
 800313c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800313e:	2300      	movs	r3, #0
 8003140:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003142:	2300      	movs	r3, #0
 8003144:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8003146:	f107 031c 	add.w	r3, r7, #28
 800314a:	4619      	mov	r1, r3
 800314c:	4807      	ldr	r0, [pc, #28]	@ (800316c <MX_USART3_UART_Init+0xa0>)
 800314e:	f003 fe7f 	bl	8006e50 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8003152:	4806      	ldr	r0, [pc, #24]	@ (800316c <MX_USART3_UART_Init+0xa0>)
 8003154:	f7ff f936 	bl	80023c4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8003158:	4804      	ldr	r0, [pc, #16]	@ (800316c <MX_USART3_UART_Init+0xa0>)
 800315a:	f7ff f923 	bl	80023a4 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800315e:	bf00      	nop
 8003160:	3738      	adds	r7, #56	@ 0x38
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40020c00 	.word	0x40020c00
 800316c:	40004800 	.word	0x40004800

08003170 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003176:	463b      	mov	r3, r7
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	611a      	str	r2, [r3, #16]
 8003184:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8003186:	2010      	movs	r0, #16
 8003188:	f7ff f980 	bl	800248c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800318c:	2080      	movs	r0, #128	@ 0x80
 800318e:	f7ff f97d 	bl	800248c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003192:	2004      	movs	r0, #4
 8003194:	f7ff f97a 	bl	800248c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003198:	2001      	movs	r0, #1
 800319a:	f7ff f977 	bl	800248c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800319e:	2002      	movs	r0, #2
 80031a0:	f7ff f974 	bl	800248c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80031a4:	2008      	movs	r0, #8
 80031a6:	f7ff f971 	bl	800248c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LED_BLUE_Pin|GYRO1_NSS_Pin|LED_RED_Pin|LED_YELLOW_Pin);
 80031aa:	2127      	movs	r1, #39	@ 0x27
 80031ac:	4815      	ldr	r0, [pc, #84]	@ (8003204 <MX_GPIO_Init+0x94>)
 80031ae:	f7ff f95e 	bl	800246e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPS1_SW_LED_GPIO_Port, GPS1_SW_LED_Pin);
 80031b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80031b6:	4814      	ldr	r0, [pc, #80]	@ (8003208 <MX_GPIO_Init+0x98>)
 80031b8:	f7ff f959 	bl	800246e <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_BLUE_Pin|GYRO1_NSS_Pin|LED_RED_Pin|LED_YELLOW_Pin;
 80031bc:	2327      	movs	r3, #39	@ 0x27
 80031be:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80031c0:	2301      	movs	r3, #1
 80031c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80031cc:	2300      	movs	r3, #0
 80031ce:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031d0:	463b      	mov	r3, r7
 80031d2:	4619      	mov	r1, r3
 80031d4:	480b      	ldr	r0, [pc, #44]	@ (8003204 <MX_GPIO_Init+0x94>)
 80031d6:	f002 feb4 	bl	8005f42 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GPS1_SW_LED_Pin;
 80031da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031de:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80031e0:	2301      	movs	r3, #1
 80031e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80031ec:	2300      	movs	r3, #0
 80031ee:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPS1_SW_LED_GPIO_Port, &GPIO_InitStruct);
 80031f0:	463b      	mov	r3, r7
 80031f2:	4619      	mov	r1, r3
 80031f4:	4804      	ldr	r0, [pc, #16]	@ (8003208 <MX_GPIO_Init+0x98>)
 80031f6:	f002 fea4 	bl	8005f42 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80031fa:	bf00      	nop
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40021000 	.word	0x40021000
 8003208:	40020c00 	.word	0x40020c00

0800320c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003210:	b672      	cpsid	i
}
 8003212:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003214:	bf00      	nop
 8003216:	e7fd      	b.n	8003214 <Error_Handler+0x8>

08003218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	607b      	str	r3, [r7, #4]
 8003222:	4b10      	ldr	r3, [pc, #64]	@ (8003264 <HAL_MspInit+0x4c>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003226:	4a0f      	ldr	r2, [pc, #60]	@ (8003264 <HAL_MspInit+0x4c>)
 8003228:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800322c:	6453      	str	r3, [r2, #68]	@ 0x44
 800322e:	4b0d      	ldr	r3, [pc, #52]	@ (8003264 <HAL_MspInit+0x4c>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003232:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	603b      	str	r3, [r7, #0]
 800323e:	4b09      	ldr	r3, [pc, #36]	@ (8003264 <HAL_MspInit+0x4c>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003242:	4a08      	ldr	r2, [pc, #32]	@ (8003264 <HAL_MspInit+0x4c>)
 8003244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003248:	6413      	str	r3, [r2, #64]	@ 0x40
 800324a:	4b06      	ldr	r3, [pc, #24]	@ (8003264 <HAL_MspInit+0x4c>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800

08003268 <LL_TIM_EnableCounter>:
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f043 0201 	orr.w	r2, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	601a      	str	r2, [r3, #0]
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <LL_TIM_DisableCounter>:
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f023 0201 	bic.w	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	601a      	str	r2, [r3, #0]
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <LL_TIM_SetCounter>:
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <LL_TIM_ClearFlag_UPDATE>:
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f06f 0201 	mvn.w	r2, #1
 80032d2:	611a      	str	r2, [r3, #16]
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <LL_TIM_IsActiveFlag_UPDATE>:
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <LL_USART_IsActiveFlag_RXNE>:
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b20      	cmp	r3, #32
 8003318:	bf0c      	ite	eq
 800331a:	2301      	moveq	r3, #1
 800331c:	2300      	movne	r3, #0
 800331e:	b2db      	uxtb	r3, r3
}
 8003320:	4618      	mov	r0, r3
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <LL_USART_ClearFlag_RXNE>:
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f06f 0220 	mvn.w	r2, #32
 800333a:	601a      	str	r2, [r3, #0]
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <LL_USART_ReceiveData8>:
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	b2db      	uxtb	r3, r3
}
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003362:	b480      	push	{r7}
 8003364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003366:	bf00      	nop
 8003368:	e7fd      	b.n	8003366 <NMI_Handler+0x4>

0800336a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800336a:	b480      	push	{r7}
 800336c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800336e:	bf00      	nop
 8003370:	e7fd      	b.n	800336e <HardFault_Handler+0x4>

08003372 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003372:	b480      	push	{r7}
 8003374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003376:	bf00      	nop
 8003378:	e7fd      	b.n	8003376 <MemManage_Handler+0x4>

0800337a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800337a:	b480      	push	{r7}
 800337c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800337e:	bf00      	nop
 8003380:	e7fd      	b.n	800337e <BusFault_Handler+0x4>

08003382 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003382:	b480      	push	{r7}
 8003384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003386:	bf00      	nop
 8003388:	e7fd      	b.n	8003386 <UsageFault_Handler+0x4>

0800338a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800338a:	b480      	push	{r7}
 800338c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800339c:	bf00      	nop
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033a6:	b480      	push	{r7}
 80033a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033aa:	bf00      	nop
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033b8:	f000 f9ea 	bl	8003790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033bc:	bf00      	nop
 80033be:	bd80      	pop	{r7, pc}

080033c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART1))
 80033c6:	4814      	ldr	r0, [pc, #80]	@ (8003418 <USART1_IRQHandler+0x58>)
 80033c8:	f7ff ff9d 	bl	8003306 <LL_USART_IsActiveFlag_RXNE>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d01d      	beq.n	800340e <USART1_IRQHandler+0x4e>
	{
		LL_USART_ClearFlag_RXNE(USART1);
 80033d2:	4811      	ldr	r0, [pc, #68]	@ (8003418 <USART1_IRQHandler+0x58>)
 80033d4:	f7ff ffaa 	bl	800332c <LL_USART_ClearFlag_RXNE>
		uint8_t uart1_rx_data = LL_USART_ReceiveData8(USART1);
 80033d8:	480f      	ldr	r0, [pc, #60]	@ (8003418 <USART1_IRQHandler+0x58>)
 80033da:	f7ff ffb5 	bl	8003348 <LL_USART_ReceiveData8>
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]

		RC_rxFlag.half_using = 1;
 80033e2:	4a0e      	ldr	r2, [pc, #56]	@ (800341c <USART1_IRQHandler+0x5c>)
 80033e4:	7813      	ldrb	r3, [r2, #0]
 80033e6:	f043 0302 	orr.w	r3, r3, #2
 80033ea:	7013      	strb	r3, [r2, #0]
		RC_rxFlag.uart = 1;
 80033ec:	4a0b      	ldr	r2, [pc, #44]	@ (800341c <USART1_IRQHandler+0x5c>)
 80033ee:	7813      	ldrb	r3, [r2, #0]
 80033f0:	f043 0304 	orr.w	r3, r3, #4
 80033f4:	7013      	strb	r3, [r2, #0]

		LL_TIM_EnableCounter(TIM14);
 80033f6:	480a      	ldr	r0, [pc, #40]	@ (8003420 <USART1_IRQHandler+0x60>)
 80033f8:	f7ff ff36 	bl	8003268 <LL_TIM_EnableCounter>
		LL_TIM_SetCounter(TIM14, 0);
 80033fc:	2100      	movs	r1, #0
 80033fe:	4808      	ldr	r0, [pc, #32]	@ (8003420 <USART1_IRQHandler+0x60>)
 8003400:	f7ff ff52 	bl	80032a8 <LL_TIM_SetCounter>

		RB_write(&RC_rxRingFifo, uart1_rx_data);
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	4619      	mov	r1, r3
 8003408:	4806      	ldr	r0, [pc, #24]	@ (8003424 <USART1_IRQHandler+0x64>)
 800340a:	f7fd fe65 	bl	80010d8 <RB_write>

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40011000 	.word	0x40011000
 800341c:	20000328 	.word	0x20000328
 8003420:	40002000 	.word	0x40002000
 8003424:	2000031c 	.word	0x2000031c

08003428 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART2))
 800342c:	480a      	ldr	r0, [pc, #40]	@ (8003458 <USART2_IRQHandler+0x30>)
 800342e:	f7ff ff6a 	bl	8003306 <LL_USART_IsActiveFlag_RXNE>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00c      	beq.n	8003452 <USART2_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART2);
 8003438:	4807      	ldr	r0, [pc, #28]	@ (8003458 <USART2_IRQHandler+0x30>)
 800343a:	f7ff ff77 	bl	800332c <LL_USART_ClearFlag_RXNE>

		uart2_rx_data = LL_USART_ReceiveData8(USART2);
 800343e:	4806      	ldr	r0, [pc, #24]	@ (8003458 <USART2_IRQHandler+0x30>)
 8003440:	f7ff ff82 	bl	8003348 <LL_USART_ReceiveData8>
 8003444:	4603      	mov	r3, r0
 8003446:	461a      	mov	r2, r3
 8003448:	4b04      	ldr	r3, [pc, #16]	@ (800345c <USART2_IRQHandler+0x34>)
 800344a:	701a      	strb	r2, [r3, #0]
		uart2_rx_flag = 1;
 800344c:	4b04      	ldr	r3, [pc, #16]	@ (8003460 <USART2_IRQHandler+0x38>)
 800344e:	2201      	movs	r2, #1
 8003450:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40004400 	.word	0x40004400
 800345c:	20000503 	.word	0x20000503
 8003460:	20000502 	.word	0x20000502

08003464 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM13))
 8003468:	4807      	ldr	r0, [pc, #28]	@ (8003488 <TIM8_UP_TIM13_IRQHandler+0x24>)
 800346a:	f7ff ff39 	bl	80032e0 <LL_TIM_IsActiveFlag_UPDATE>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d007      	beq.n	8003484 <TIM8_UP_TIM13_IRQHandler+0x20>
	{
		LL_TIM_ClearFlag_UPDATE(TIM13);
 8003474:	4804      	ldr	r0, [pc, #16]	@ (8003488 <TIM8_UP_TIM13_IRQHandler+0x24>)
 8003476:	f7ff ff25 	bl	80032c4 <LL_TIM_ClearFlag_UPDATE>
		system_time.time_boot_ms++;
 800347a:	4b04      	ldr	r3, [pc, #16]	@ (800348c <TIM8_UP_TIM13_IRQHandler+0x28>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	3301      	adds	r3, #1
 8003480:	4a02      	ldr	r2, [pc, #8]	@ (800348c <TIM8_UP_TIM13_IRQHandler+0x28>)
 8003482:	6093      	str	r3, [r2, #8]

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003484:	bf00      	nop
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40001c00 	.word	0x40001c00
 800348c:	2000030c 	.word	0x2000030c

08003490 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM14))
 8003494:	4817      	ldr	r0, [pc, #92]	@ (80034f4 <TIM8_TRG_COM_TIM14_IRQHandler+0x64>)
 8003496:	f7ff ff23 	bl	80032e0 <LL_TIM_IsActiveFlag_UPDATE>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d027      	beq.n	80034f0 <TIM8_TRG_COM_TIM14_IRQHandler+0x60>
	{

		LL_TIM_ClearFlag_UPDATE(TIM14);
 80034a0:	4814      	ldr	r0, [pc, #80]	@ (80034f4 <TIM8_TRG_COM_TIM14_IRQHandler+0x64>)
 80034a2:	f7ff ff0f 	bl	80032c4 <LL_TIM_ClearFlag_UPDATE>

		if(RC_rxFlag.half_using == 1 && RC_rxFlag.half_tx == 0){
 80034a6:	4b14      	ldr	r3, [pc, #80]	@ (80034f8 <TIM8_TRG_COM_TIM14_IRQHandler+0x68>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d010      	beq.n	80034d6 <TIM8_TRG_COM_TIM14_IRQHandler+0x46>
 80034b4:	4b10      	ldr	r3, [pc, #64]	@ (80034f8 <TIM8_TRG_COM_TIM14_IRQHandler+0x68>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <TIM8_TRG_COM_TIM14_IRQHandler+0x46>
			RC_rxFlag.half_using = 0;
 80034c2:	4a0d      	ldr	r2, [pc, #52]	@ (80034f8 <TIM8_TRG_COM_TIM14_IRQHandler+0x68>)
 80034c4:	7813      	ldrb	r3, [r2, #0]
 80034c6:	f023 0302 	bic.w	r3, r3, #2
 80034ca:	7013      	strb	r3, [r2, #0]
			LL_TIM_SetCounter(TIM14, 0);
 80034cc:	2100      	movs	r1, #0
 80034ce:	4809      	ldr	r0, [pc, #36]	@ (80034f4 <TIM8_TRG_COM_TIM14_IRQHandler+0x64>)
 80034d0:	f7ff feea 	bl	80032a8 <LL_TIM_SetCounter>
	}
  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80034d4:	e00c      	b.n	80034f0 <TIM8_TRG_COM_TIM14_IRQHandler+0x60>
			RC_rxFlag.half_using = 1;
 80034d6:	4a08      	ldr	r2, [pc, #32]	@ (80034f8 <TIM8_TRG_COM_TIM14_IRQHandler+0x68>)
 80034d8:	7813      	ldrb	r3, [r2, #0]
 80034da:	f043 0302 	orr.w	r3, r3, #2
 80034de:	7013      	strb	r3, [r2, #0]
			RC_rxFlag.half_tx = 0;
 80034e0:	4a05      	ldr	r2, [pc, #20]	@ (80034f8 <TIM8_TRG_COM_TIM14_IRQHandler+0x68>)
 80034e2:	7813      	ldrb	r3, [r2, #0]
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	7013      	strb	r3, [r2, #0]
			LL_TIM_DisableCounter(TIM14);
 80034ea:	4802      	ldr	r0, [pc, #8]	@ (80034f4 <TIM8_TRG_COM_TIM14_IRQHandler+0x64>)
 80034ec:	f7ff fecc 	bl	8003288 <LL_TIM_DisableCounter>
}
 80034f0:	bf00      	nop
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40002000 	.word	0x40002000
 80034f8:	20000328 	.word	0x20000328

080034fc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
	...

0800350c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003510:	4802      	ldr	r0, [pc, #8]	@ (800351c <OTG_FS_IRQHandler+0x10>)
 8003512:	f000 fd73 	bl	8003ffc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	200019ec 	.word	0x200019ec

08003520 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  return 1;
 8003524:	2301      	movs	r3, #1
}
 8003526:	4618      	mov	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <_kill>:

int _kill(int pid, int sig)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800353a:	f008 fbe1 	bl	800bd00 <__errno>
 800353e:	4603      	mov	r3, r0
 8003540:	2216      	movs	r2, #22
 8003542:	601a      	str	r2, [r3, #0]
  return -1;
 8003544:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <_exit>:

void _exit (int status)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003558:	f04f 31ff 	mov.w	r1, #4294967295
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff ffe7 	bl	8003530 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003562:	bf00      	nop
 8003564:	e7fd      	b.n	8003562 <_exit+0x12>

08003566 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b086      	sub	sp, #24
 800356a:	af00      	add	r7, sp, #0
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	e00a      	b.n	800358e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003578:	f3af 8000 	nop.w
 800357c:	4601      	mov	r1, r0
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	60ba      	str	r2, [r7, #8]
 8003584:	b2ca      	uxtb	r2, r1
 8003586:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	3301      	adds	r3, #1
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	429a      	cmp	r2, r3
 8003594:	dbf0      	blt.n	8003578 <_read+0x12>
  }

  return len;
 8003596:	687b      	ldr	r3, [r7, #4]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035c8:	605a      	str	r2, [r3, #4]
  return 0;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <_isatty>:

int _isatty(int file)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035e0:	2301      	movs	r3, #1
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b085      	sub	sp, #20
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003610:	4a14      	ldr	r2, [pc, #80]	@ (8003664 <_sbrk+0x5c>)
 8003612:	4b15      	ldr	r3, [pc, #84]	@ (8003668 <_sbrk+0x60>)
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800361c:	4b13      	ldr	r3, [pc, #76]	@ (800366c <_sbrk+0x64>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d102      	bne.n	800362a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003624:	4b11      	ldr	r3, [pc, #68]	@ (800366c <_sbrk+0x64>)
 8003626:	4a12      	ldr	r2, [pc, #72]	@ (8003670 <_sbrk+0x68>)
 8003628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800362a:	4b10      	ldr	r3, [pc, #64]	@ (800366c <_sbrk+0x64>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4413      	add	r3, r2
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	429a      	cmp	r2, r3
 8003636:	d207      	bcs.n	8003648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003638:	f008 fb62 	bl	800bd00 <__errno>
 800363c:	4603      	mov	r3, r0
 800363e:	220c      	movs	r2, #12
 8003640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003642:	f04f 33ff 	mov.w	r3, #4294967295
 8003646:	e009      	b.n	800365c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003648:	4b08      	ldr	r3, [pc, #32]	@ (800366c <_sbrk+0x64>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800364e:	4b07      	ldr	r3, [pc, #28]	@ (800366c <_sbrk+0x64>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4413      	add	r3, r2
 8003656:	4a05      	ldr	r2, [pc, #20]	@ (800366c <_sbrk+0x64>)
 8003658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800365a:	68fb      	ldr	r3, [r7, #12]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	20020000 	.word	0x20020000
 8003668:	00000400 	.word	0x00000400
 800366c:	20000504 	.word	0x20000504
 8003670:	20002240 	.word	0x20002240

08003674 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003678:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <SystemInit+0x20>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367e:	4a05      	ldr	r2, [pc, #20]	@ (8003694 <SystemInit+0x20>)
 8003680:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003684:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003688:	bf00      	nop
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	e000ed00 	.word	0xe000ed00

08003698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003698:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800369c:	f7ff ffea 	bl	8003674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036a0:	480c      	ldr	r0, [pc, #48]	@ (80036d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036a2:	490d      	ldr	r1, [pc, #52]	@ (80036d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036a4:	4a0d      	ldr	r2, [pc, #52]	@ (80036dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036a8:	e002      	b.n	80036b0 <LoopCopyDataInit>

080036aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036ae:	3304      	adds	r3, #4

080036b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036b4:	d3f9      	bcc.n	80036aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036b6:	4a0a      	ldr	r2, [pc, #40]	@ (80036e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036b8:	4c0a      	ldr	r4, [pc, #40]	@ (80036e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80036ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036bc:	e001      	b.n	80036c2 <LoopFillZerobss>

080036be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036c0:	3204      	adds	r2, #4

080036c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036c4:	d3fb      	bcc.n	80036be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036c6:	f008 fb21 	bl	800bd0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036ca:	f7fe ff3d 	bl	8002548 <main>
  bx  lr    
 80036ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80036d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036d8:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 80036dc:	0800dd44 	.word	0x0800dd44
  ldr r2, =_sbss
 80036e0:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 80036e4:	2000223c 	.word	0x2000223c

080036e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036e8:	e7fe      	b.n	80036e8 <ADC_IRQHandler>
	...

080036ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036f0:	4b0e      	ldr	r3, [pc, #56]	@ (800372c <HAL_Init+0x40>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a0d      	ldr	r2, [pc, #52]	@ (800372c <HAL_Init+0x40>)
 80036f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036fc:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <HAL_Init+0x40>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a0a      	ldr	r2, [pc, #40]	@ (800372c <HAL_Init+0x40>)
 8003702:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003706:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003708:	4b08      	ldr	r3, [pc, #32]	@ (800372c <HAL_Init+0x40>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a07      	ldr	r2, [pc, #28]	@ (800372c <HAL_Init+0x40>)
 800370e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003712:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003714:	2003      	movs	r0, #3
 8003716:	f000 f94f 	bl	80039b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800371a:	200f      	movs	r0, #15
 800371c:	f000 f808 	bl	8003730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003720:	f7ff fd7a 	bl	8003218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40023c00 	.word	0x40023c00

08003730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003738:	4b12      	ldr	r3, [pc, #72]	@ (8003784 <HAL_InitTick+0x54>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	4b12      	ldr	r3, [pc, #72]	@ (8003788 <HAL_InitTick+0x58>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	4619      	mov	r1, r3
 8003742:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003746:	fbb3 f3f1 	udiv	r3, r3, r1
 800374a:	fbb2 f3f3 	udiv	r3, r2, r3
 800374e:	4618      	mov	r0, r3
 8003750:	f000 f967 	bl	8003a22 <HAL_SYSTICK_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e00e      	b.n	800377c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b0f      	cmp	r3, #15
 8003762:	d80a      	bhi.n	800377a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003764:	2200      	movs	r2, #0
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	f04f 30ff 	mov.w	r0, #4294967295
 800376c:	f000 f92f 	bl	80039ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003770:	4a06      	ldr	r2, [pc, #24]	@ (800378c <HAL_InitTick+0x5c>)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	e000      	b.n	800377c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20000004 	.word	0x20000004
 8003788:	2000000c 	.word	0x2000000c
 800378c:	20000008 	.word	0x20000008

08003790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003794:	4b06      	ldr	r3, [pc, #24]	@ (80037b0 <HAL_IncTick+0x20>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	461a      	mov	r2, r3
 800379a:	4b06      	ldr	r3, [pc, #24]	@ (80037b4 <HAL_IncTick+0x24>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4413      	add	r3, r2
 80037a0:	4a04      	ldr	r2, [pc, #16]	@ (80037b4 <HAL_IncTick+0x24>)
 80037a2:	6013      	str	r3, [r2, #0]
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	2000000c 	.word	0x2000000c
 80037b4:	20000508 	.word	0x20000508

080037b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  return uwTick;
 80037bc:	4b03      	ldr	r3, [pc, #12]	@ (80037cc <HAL_GetTick+0x14>)
 80037be:	681b      	ldr	r3, [r3, #0]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	20000508 	.word	0x20000508

080037d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037d8:	f7ff ffee 	bl	80037b8 <HAL_GetTick>
 80037dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e8:	d005      	beq.n	80037f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003814 <HAL_Delay+0x44>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037f6:	bf00      	nop
 80037f8:	f7ff ffde 	bl	80037b8 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	429a      	cmp	r2, r3
 8003806:	d8f7      	bhi.n	80037f8 <HAL_Delay+0x28>
  {
  }
}
 8003808:	bf00      	nop
 800380a:	bf00      	nop
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	2000000c 	.word	0x2000000c

08003818 <__NVIC_SetPriorityGrouping>:
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003828:	4b0c      	ldr	r3, [pc, #48]	@ (800385c <__NVIC_SetPriorityGrouping+0x44>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003834:	4013      	ands	r3, r2
 8003836:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003840:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003844:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800384a:	4a04      	ldr	r2, [pc, #16]	@ (800385c <__NVIC_SetPriorityGrouping+0x44>)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	60d3      	str	r3, [r2, #12]
}
 8003850:	bf00      	nop
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	e000ed00 	.word	0xe000ed00

08003860 <__NVIC_GetPriorityGrouping>:
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003864:	4b04      	ldr	r3, [pc, #16]	@ (8003878 <__NVIC_GetPriorityGrouping+0x18>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	0a1b      	lsrs	r3, r3, #8
 800386a:	f003 0307 	and.w	r3, r3, #7
}
 800386e:	4618      	mov	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	e000ed00 	.word	0xe000ed00

0800387c <__NVIC_EnableIRQ>:
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	2b00      	cmp	r3, #0
 800388c:	db0b      	blt.n	80038a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	f003 021f 	and.w	r2, r3, #31
 8003894:	4907      	ldr	r1, [pc, #28]	@ (80038b4 <__NVIC_EnableIRQ+0x38>)
 8003896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	2001      	movs	r0, #1
 800389e:	fa00 f202 	lsl.w	r2, r0, r2
 80038a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	e000e100 	.word	0xe000e100

080038b8 <__NVIC_SetPriority>:
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	6039      	str	r1, [r7, #0]
 80038c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	db0a      	blt.n	80038e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	490c      	ldr	r1, [pc, #48]	@ (8003904 <__NVIC_SetPriority+0x4c>)
 80038d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d6:	0112      	lsls	r2, r2, #4
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	440b      	add	r3, r1
 80038dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80038e0:	e00a      	b.n	80038f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	4908      	ldr	r1, [pc, #32]	@ (8003908 <__NVIC_SetPriority+0x50>)
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	3b04      	subs	r3, #4
 80038f0:	0112      	lsls	r2, r2, #4
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	440b      	add	r3, r1
 80038f6:	761a      	strb	r2, [r3, #24]
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	e000e100 	.word	0xe000e100
 8003908:	e000ed00 	.word	0xe000ed00

0800390c <NVIC_EncodePriority>:
{
 800390c:	b480      	push	{r7}
 800390e:	b089      	sub	sp, #36	@ 0x24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f1c3 0307 	rsb	r3, r3, #7
 8003926:	2b04      	cmp	r3, #4
 8003928:	bf28      	it	cs
 800392a:	2304      	movcs	r3, #4
 800392c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	3304      	adds	r3, #4
 8003932:	2b06      	cmp	r3, #6
 8003934:	d902      	bls.n	800393c <NVIC_EncodePriority+0x30>
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	3b03      	subs	r3, #3
 800393a:	e000      	b.n	800393e <NVIC_EncodePriority+0x32>
 800393c:	2300      	movs	r3, #0
 800393e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003940:	f04f 32ff 	mov.w	r2, #4294967295
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43da      	mvns	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	401a      	ands	r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003954:	f04f 31ff 	mov.w	r1, #4294967295
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	fa01 f303 	lsl.w	r3, r1, r3
 800395e:	43d9      	mvns	r1, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003964:	4313      	orrs	r3, r2
}
 8003966:	4618      	mov	r0, r3
 8003968:	3724      	adds	r7, #36	@ 0x24
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3b01      	subs	r3, #1
 8003980:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003984:	d301      	bcc.n	800398a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003986:	2301      	movs	r3, #1
 8003988:	e00f      	b.n	80039aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800398a:	4a0a      	ldr	r2, [pc, #40]	@ (80039b4 <SysTick_Config+0x40>)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3b01      	subs	r3, #1
 8003990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003992:	210f      	movs	r1, #15
 8003994:	f04f 30ff 	mov.w	r0, #4294967295
 8003998:	f7ff ff8e 	bl	80038b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800399c:	4b05      	ldr	r3, [pc, #20]	@ (80039b4 <SysTick_Config+0x40>)
 800399e:	2200      	movs	r2, #0
 80039a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039a2:	4b04      	ldr	r3, [pc, #16]	@ (80039b4 <SysTick_Config+0x40>)
 80039a4:	2207      	movs	r2, #7
 80039a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	e000e010 	.word	0xe000e010

080039b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff ff29 	bl	8003818 <__NVIC_SetPriorityGrouping>
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b086      	sub	sp, #24
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	4603      	mov	r3, r0
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	607a      	str	r2, [r7, #4]
 80039da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039e0:	f7ff ff3e 	bl	8003860 <__NVIC_GetPriorityGrouping>
 80039e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	68b9      	ldr	r1, [r7, #8]
 80039ea:	6978      	ldr	r0, [r7, #20]
 80039ec:	f7ff ff8e 	bl	800390c <NVIC_EncodePriority>
 80039f0:	4602      	mov	r2, r0
 80039f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039f6:	4611      	mov	r1, r2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff ff5d 	bl	80038b8 <__NVIC_SetPriority>
}
 80039fe:	bf00      	nop
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff31 	bl	800387c <__NVIC_EnableIRQ>
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff ffa2 	bl	8003974 <SysTick_Config>
 8003a30:	4603      	mov	r3, r0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b089      	sub	sp, #36	@ 0x24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	e16b      	b.n	8003d30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a58:	2201      	movs	r2, #1
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	f040 815a 	bne.w	8003d2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d005      	beq.n	8003a8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d130      	bne.n	8003af0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	2203      	movs	r2, #3
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	43db      	mvns	r3, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	f003 0201 	and.w	r2, r3, #1
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d017      	beq.n	8003b2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	2203      	movs	r2, #3
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4013      	ands	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d123      	bne.n	8003b80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	08da      	lsrs	r2, r3, #3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3208      	adds	r2, #8
 8003b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	220f      	movs	r2, #15
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	08da      	lsrs	r2, r3, #3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3208      	adds	r2, #8
 8003b7a:	69b9      	ldr	r1, [r7, #24]
 8003b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 0203 	and.w	r2, r3, #3
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80b4 	beq.w	8003d2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	4b60      	ldr	r3, [pc, #384]	@ (8003d48 <HAL_GPIO_Init+0x30c>)
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bca:	4a5f      	ldr	r2, [pc, #380]	@ (8003d48 <HAL_GPIO_Init+0x30c>)
 8003bcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bd2:	4b5d      	ldr	r3, [pc, #372]	@ (8003d48 <HAL_GPIO_Init+0x30c>)
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bde:	4a5b      	ldr	r2, [pc, #364]	@ (8003d4c <HAL_GPIO_Init+0x310>)
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	089b      	lsrs	r3, r3, #2
 8003be4:	3302      	adds	r3, #2
 8003be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	220f      	movs	r2, #15
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a52      	ldr	r2, [pc, #328]	@ (8003d50 <HAL_GPIO_Init+0x314>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d02b      	beq.n	8003c62 <HAL_GPIO_Init+0x226>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a51      	ldr	r2, [pc, #324]	@ (8003d54 <HAL_GPIO_Init+0x318>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d025      	beq.n	8003c5e <HAL_GPIO_Init+0x222>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a50      	ldr	r2, [pc, #320]	@ (8003d58 <HAL_GPIO_Init+0x31c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01f      	beq.n	8003c5a <HAL_GPIO_Init+0x21e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a4f      	ldr	r2, [pc, #316]	@ (8003d5c <HAL_GPIO_Init+0x320>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d019      	beq.n	8003c56 <HAL_GPIO_Init+0x21a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a4e      	ldr	r2, [pc, #312]	@ (8003d60 <HAL_GPIO_Init+0x324>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_GPIO_Init+0x216>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a4d      	ldr	r2, [pc, #308]	@ (8003d64 <HAL_GPIO_Init+0x328>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00d      	beq.n	8003c4e <HAL_GPIO_Init+0x212>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a4c      	ldr	r2, [pc, #304]	@ (8003d68 <HAL_GPIO_Init+0x32c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <HAL_GPIO_Init+0x20e>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a4b      	ldr	r2, [pc, #300]	@ (8003d6c <HAL_GPIO_Init+0x330>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d101      	bne.n	8003c46 <HAL_GPIO_Init+0x20a>
 8003c42:	2307      	movs	r3, #7
 8003c44:	e00e      	b.n	8003c64 <HAL_GPIO_Init+0x228>
 8003c46:	2308      	movs	r3, #8
 8003c48:	e00c      	b.n	8003c64 <HAL_GPIO_Init+0x228>
 8003c4a:	2306      	movs	r3, #6
 8003c4c:	e00a      	b.n	8003c64 <HAL_GPIO_Init+0x228>
 8003c4e:	2305      	movs	r3, #5
 8003c50:	e008      	b.n	8003c64 <HAL_GPIO_Init+0x228>
 8003c52:	2304      	movs	r3, #4
 8003c54:	e006      	b.n	8003c64 <HAL_GPIO_Init+0x228>
 8003c56:	2303      	movs	r3, #3
 8003c58:	e004      	b.n	8003c64 <HAL_GPIO_Init+0x228>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e002      	b.n	8003c64 <HAL_GPIO_Init+0x228>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <HAL_GPIO_Init+0x228>
 8003c62:	2300      	movs	r3, #0
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	f002 0203 	and.w	r2, r2, #3
 8003c6a:	0092      	lsls	r2, r2, #2
 8003c6c:	4093      	lsls	r3, r2
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c74:	4935      	ldr	r1, [pc, #212]	@ (8003d4c <HAL_GPIO_Init+0x310>)
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	089b      	lsrs	r3, r3, #2
 8003c7a:	3302      	adds	r3, #2
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c82:	4b3b      	ldr	r3, [pc, #236]	@ (8003d70 <HAL_GPIO_Init+0x334>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ca6:	4a32      	ldr	r2, [pc, #200]	@ (8003d70 <HAL_GPIO_Init+0x334>)
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cac:	4b30      	ldr	r3, [pc, #192]	@ (8003d70 <HAL_GPIO_Init+0x334>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cd0:	4a27      	ldr	r2, [pc, #156]	@ (8003d70 <HAL_GPIO_Init+0x334>)
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cd6:	4b26      	ldr	r3, [pc, #152]	@ (8003d70 <HAL_GPIO_Init+0x334>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cfa:	4a1d      	ldr	r2, [pc, #116]	@ (8003d70 <HAL_GPIO_Init+0x334>)
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d00:	4b1b      	ldr	r3, [pc, #108]	@ (8003d70 <HAL_GPIO_Init+0x334>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d24:	4a12      	ldr	r2, [pc, #72]	@ (8003d70 <HAL_GPIO_Init+0x334>)
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	61fb      	str	r3, [r7, #28]
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	2b0f      	cmp	r3, #15
 8003d34:	f67f ae90 	bls.w	8003a58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d38:	bf00      	nop
 8003d3a:	bf00      	nop
 8003d3c:	3724      	adds	r7, #36	@ 0x24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	40013800 	.word	0x40013800
 8003d50:	40020000 	.word	0x40020000
 8003d54:	40020400 	.word	0x40020400
 8003d58:	40020800 	.word	0x40020800
 8003d5c:	40020c00 	.word	0x40020c00
 8003d60:	40021000 	.word	0x40021000
 8003d64:	40021400 	.word	0x40021400
 8003d68:	40021800 	.word	0x40021800
 8003d6c:	40021c00 	.word	0x40021c00
 8003d70:	40013c00 	.word	0x40013c00

08003d74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e101      	b.n	8003f8a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d106      	bne.n	8003da6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f006 fdf5 	bl	800a990 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2203      	movs	r2, #3
 8003daa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003db4:	d102      	bne.n	8003dbc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f003 f9dc 	bl	800717e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	7c1a      	ldrb	r2, [r3, #16]
 8003dce:	f88d 2000 	strb.w	r2, [sp]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dd6:	f003 f8bb 	bl	8006f50 <USB_CoreInit>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0ce      	b.n	8003f8a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2100      	movs	r1, #0
 8003df2:	4618      	mov	r0, r3
 8003df4:	f003 f9d4 	bl	80071a0 <USB_SetCurrentMode>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d005      	beq.n	8003e0a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2202      	movs	r2, #2
 8003e02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e0bf      	b.n	8003f8a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	73fb      	strb	r3, [r7, #15]
 8003e0e:	e04a      	b.n	8003ea6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e10:	7bfa      	ldrb	r2, [r7, #15]
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	4613      	mov	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	3315      	adds	r3, #21
 8003e20:	2201      	movs	r2, #1
 8003e22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e24:	7bfa      	ldrb	r2, [r7, #15]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	3314      	adds	r3, #20
 8003e34:	7bfa      	ldrb	r2, [r7, #15]
 8003e36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e38:	7bfa      	ldrb	r2, [r7, #15]
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	b298      	uxth	r0, r3
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	332e      	adds	r3, #46	@ 0x2e
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e50:	7bfa      	ldrb	r2, [r7, #15]
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	3318      	adds	r3, #24
 8003e60:	2200      	movs	r2, #0
 8003e62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e64:	7bfa      	ldrb	r2, [r7, #15]
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	331c      	adds	r3, #28
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e78:	7bfa      	ldrb	r2, [r7, #15]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	3320      	adds	r3, #32
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e8c:	7bfa      	ldrb	r2, [r7, #15]
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	3324      	adds	r3, #36	@ 0x24
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	73fb      	strb	r3, [r7, #15]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	791b      	ldrb	r3, [r3, #4]
 8003eaa:	7bfa      	ldrb	r2, [r7, #15]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d3af      	bcc.n	8003e10 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	73fb      	strb	r3, [r7, #15]
 8003eb4:	e044      	b.n	8003f40 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003eb6:	7bfa      	ldrb	r2, [r7, #15]
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003ec8:	2200      	movs	r2, #0
 8003eca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ecc:	7bfa      	ldrb	r2, [r7, #15]
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003ede:	7bfa      	ldrb	r2, [r7, #15]
 8003ee0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ee2:	7bfa      	ldrb	r2, [r7, #15]
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ef8:	7bfa      	ldrb	r2, [r7, #15]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f0e:	7bfa      	ldrb	r2, [r7, #15]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f24:	7bfa      	ldrb	r2, [r7, #15]
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	73fb      	strb	r3, [r7, #15]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	791b      	ldrb	r3, [r3, #4]
 8003f44:	7bfa      	ldrb	r2, [r7, #15]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d3b5      	bcc.n	8003eb6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	7c1a      	ldrb	r2, [r3, #16]
 8003f52:	f88d 2000 	strb.w	r2, [sp]
 8003f56:	3304      	adds	r3, #4
 8003f58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f5a:	f003 f96d 	bl	8007238 <USB_DevInit>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e00c      	b.n	8003f8a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f004 f9b7 	bl	80082f6 <USB_DevDisconnect>

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <HAL_PCD_Start+0x1c>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e022      	b.n	8003ff4 <HAL_PCD_Start+0x62>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d105      	bne.n	8003fd6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f003 f8be 	bl	800715c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f004 f965 	bl	80082b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ffc:	b590      	push	{r4, r7, lr}
 8003ffe:	b08d      	sub	sp, #52	@ 0x34
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f004 fa23 	bl	800845e <USB_GetMode>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	f040 848c 	bne.w	8004938 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f004 f987 	bl	8008338 <USB_ReadInterrupts>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 8482 	beq.w	8004936 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	0a1b      	lsrs	r3, r3, #8
 800403c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f004 f974 	bl	8008338 <USB_ReadInterrupts>
 8004050:	4603      	mov	r3, r0
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b02      	cmp	r3, #2
 8004058:	d107      	bne.n	800406a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695a      	ldr	r2, [r3, #20]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f002 0202 	and.w	r2, r2, #2
 8004068:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f004 f962 	bl	8008338 <USB_ReadInterrupts>
 8004074:	4603      	mov	r3, r0
 8004076:	f003 0310 	and.w	r3, r3, #16
 800407a:	2b10      	cmp	r3, #16
 800407c:	d161      	bne.n	8004142 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	699a      	ldr	r2, [r3, #24]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0210 	bic.w	r2, r2, #16
 800408c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	f003 020f 	and.w	r2, r3, #15
 800409a:	4613      	mov	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	4413      	add	r3, r2
 80040aa:	3304      	adds	r3, #4
 80040ac:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80040b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040b8:	d124      	bne.n	8004104 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80040c0:	4013      	ands	r3, r2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d035      	beq.n	8004132 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	091b      	lsrs	r3, r3, #4
 80040ce:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	461a      	mov	r2, r3
 80040d8:	6a38      	ldr	r0, [r7, #32]
 80040da:	f003 ff99 	bl	8008010 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040ea:	441a      	add	r2, r3
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	695a      	ldr	r2, [r3, #20]
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	091b      	lsrs	r3, r3, #4
 80040f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040fc:	441a      	add	r2, r3
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	615a      	str	r2, [r3, #20]
 8004102:	e016      	b.n	8004132 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800410a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800410e:	d110      	bne.n	8004132 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004116:	2208      	movs	r2, #8
 8004118:	4619      	mov	r1, r3
 800411a:	6a38      	ldr	r0, [r7, #32]
 800411c:	f003 ff78 	bl	8008010 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	695a      	ldr	r2, [r3, #20]
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	091b      	lsrs	r3, r3, #4
 8004128:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800412c:	441a      	add	r2, r3
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699a      	ldr	r2, [r3, #24]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f042 0210 	orr.w	r2, r2, #16
 8004140:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f004 f8f6 	bl	8008338 <USB_ReadInterrupts>
 800414c:	4603      	mov	r3, r0
 800414e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004152:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004156:	f040 80a7 	bne.w	80042a8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f004 f8fb 	bl	800835e <USB_ReadDevAllOutEpInterrupt>
 8004168:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800416a:	e099      	b.n	80042a0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800416c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 808e 	beq.w	8004294 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	4611      	mov	r1, r2
 8004182:	4618      	mov	r0, r3
 8004184:	f004 f91f 	bl	80083c6 <USB_ReadDevOutEPInterrupt>
 8004188:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00c      	beq.n	80041ae <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041a0:	461a      	mov	r2, r3
 80041a2:	2301      	movs	r3, #1
 80041a4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80041a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 fea3 	bl	8004ef4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00c      	beq.n	80041d2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80041b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041c4:	461a      	mov	r2, r3
 80041c6:	2308      	movs	r3, #8
 80041c8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80041ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 ff79 	bl	80050c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d008      	beq.n	80041ee <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80041dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041e8:	461a      	mov	r2, r3
 80041ea:	2310      	movs	r3, #16
 80041ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d030      	beq.n	800425a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004200:	2b80      	cmp	r3, #128	@ 0x80
 8004202:	d109      	bne.n	8004218 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004212:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004216:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421a:	4613      	mov	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	4413      	add	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	4413      	add	r3, r2
 800422a:	3304      	adds	r3, #4
 800422c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	78db      	ldrb	r3, [r3, #3]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d108      	bne.n	8004248 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2200      	movs	r2, #0
 800423a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423e:	b2db      	uxtb	r3, r3
 8004240:	4619      	mov	r1, r3
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f006 fcaa 	bl	800ab9c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004254:	461a      	mov	r2, r3
 8004256:	2302      	movs	r3, #2
 8004258:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f003 0320 	and.w	r3, r3, #32
 8004260:	2b00      	cmp	r3, #0
 8004262:	d008      	beq.n	8004276 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004270:	461a      	mov	r2, r3
 8004272:	2320      	movs	r3, #32
 8004274:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d009      	beq.n	8004294 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800428c:	461a      	mov	r2, r3
 800428e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004292:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004296:	3301      	adds	r3, #1
 8004298:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800429a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429c:	085b      	lsrs	r3, r3, #1
 800429e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80042a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f47f af62 	bne.w	800416c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f004 f843 	bl	8008338 <USB_ReadInterrupts>
 80042b2:	4603      	mov	r3, r0
 80042b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042bc:	f040 80db 	bne.w	8004476 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f004 f864 	bl	8008392 <USB_ReadDevAllInEpInterrupt>
 80042ca:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80042d0:	e0cd      	b.n	800446e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80042d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80c2 	beq.w	8004462 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	4611      	mov	r1, r2
 80042e8:	4618      	mov	r0, r3
 80042ea:	f004 f88a 	bl	8008402 <USB_ReadDevInEPInterrupt>
 80042ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d057      	beq.n	80043aa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fc:	f003 030f 	and.w	r3, r3, #15
 8004300:	2201      	movs	r2, #1
 8004302:	fa02 f303 	lsl.w	r3, r2, r3
 8004306:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800430e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	43db      	mvns	r3, r3
 8004314:	69f9      	ldr	r1, [r7, #28]
 8004316:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800431a:	4013      	ands	r3, r2
 800431c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800431e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800432a:	461a      	mov	r2, r3
 800432c:	2301      	movs	r3, #1
 800432e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	799b      	ldrb	r3, [r3, #6]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d132      	bne.n	800439e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800433c:	4613      	mov	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	3320      	adds	r3, #32
 8004348:	6819      	ldr	r1, [r3, #0]
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800434e:	4613      	mov	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4403      	add	r3, r0
 8004358:	331c      	adds	r3, #28
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4419      	add	r1, r3
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004362:	4613      	mov	r3, r2
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4403      	add	r3, r0
 800436c:	3320      	adds	r3, #32
 800436e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004372:	2b00      	cmp	r3, #0
 8004374:	d113      	bne.n	800439e <HAL_PCD_IRQHandler+0x3a2>
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800437a:	4613      	mov	r3, r2
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	4413      	add	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	440b      	add	r3, r1
 8004384:	3324      	adds	r3, #36	@ 0x24
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d108      	bne.n	800439e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6818      	ldr	r0, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004396:	461a      	mov	r2, r3
 8004398:	2101      	movs	r1, #1
 800439a:	f004 f891 	bl	80084c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	4619      	mov	r1, r3
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f006 fb74 	bl	800aa92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80043b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043c0:	461a      	mov	r2, r3
 80043c2:	2308      	movs	r3, #8
 80043c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d008      	beq.n	80043e2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80043d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043dc:	461a      	mov	r2, r3
 80043de:	2310      	movs	r3, #16
 80043e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d008      	beq.n	80043fe <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80043ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043f8:	461a      	mov	r2, r3
 80043fa:	2340      	movs	r3, #64	@ 0x40
 80043fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d023      	beq.n	8004450 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004408:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800440a:	6a38      	ldr	r0, [r7, #32]
 800440c:	f003 f878 	bl	8007500 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004412:	4613      	mov	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	4413      	add	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	3310      	adds	r3, #16
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	4413      	add	r3, r2
 8004420:	3304      	adds	r3, #4
 8004422:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	78db      	ldrb	r3, [r3, #3]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d108      	bne.n	800443e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	2200      	movs	r2, #0
 8004430:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004434:	b2db      	uxtb	r3, r3
 8004436:	4619      	mov	r1, r3
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f006 fbc1 	bl	800abc0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800444a:	461a      	mov	r2, r3
 800444c:	2302      	movs	r3, #2
 800444e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800445a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 fcbd 	bl	8004ddc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004464:	3301      	adds	r3, #1
 8004466:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446a:	085b      	lsrs	r3, r3, #1
 800446c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800446e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004470:	2b00      	cmp	r3, #0
 8004472:	f47f af2e 	bne.w	80042d2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f003 ff5c 	bl	8008338 <USB_ReadInterrupts>
 8004480:	4603      	mov	r3, r0
 8004482:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004486:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800448a:	d122      	bne.n	80044d2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	69fa      	ldr	r2, [r7, #28]
 8004496:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800449a:	f023 0301 	bic.w	r3, r3, #1
 800449e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d108      	bne.n	80044bc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80044b2:	2100      	movs	r1, #0
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 fea3 	bl	8005200 <HAL_PCDEx_LPM_Callback>
 80044ba:	e002      	b.n	80044c2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f006 fb5f 	bl	800ab80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695a      	ldr	r2, [r3, #20]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80044d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f003 ff2e 	bl	8008338 <USB_ReadInterrupts>
 80044dc:	4603      	mov	r3, r0
 80044de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044e6:	d112      	bne.n	800450e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d102      	bne.n	80044fe <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f006 fb1b 	bl	800ab34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695a      	ldr	r2, [r3, #20]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800450c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f003 ff10 	bl	8008338 <USB_ReadInterrupts>
 8004518:	4603      	mov	r3, r0
 800451a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800451e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004522:	f040 80b7 	bne.w	8004694 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	69fa      	ldr	r2, [r7, #28]
 8004530:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004534:	f023 0301 	bic.w	r3, r3, #1
 8004538:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2110      	movs	r1, #16
 8004540:	4618      	mov	r0, r3
 8004542:	f002 ffdd 	bl	8007500 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004546:	2300      	movs	r3, #0
 8004548:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800454a:	e046      	b.n	80045da <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800454c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004558:	461a      	mov	r2, r3
 800455a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800455e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	4413      	add	r3, r2
 8004568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004570:	0151      	lsls	r1, r2, #5
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	440a      	add	r2, r1
 8004576:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800457a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800457e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	4413      	add	r3, r2
 8004588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800458c:	461a      	mov	r2, r3
 800458e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004592:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	4413      	add	r3, r2
 800459c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045a4:	0151      	lsls	r1, r2, #5
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	440a      	add	r2, r1
 80045aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80045b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80045b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045c4:	0151      	lsls	r1, r2, #5
 80045c6:	69fa      	ldr	r2, [r7, #28]
 80045c8:	440a      	add	r2, r1
 80045ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80045d2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d6:	3301      	adds	r3, #1
 80045d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	791b      	ldrb	r3, [r3, #4]
 80045de:	461a      	mov	r2, r3
 80045e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d3b2      	bcc.n	800454c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	69fa      	ldr	r2, [r7, #28]
 80045f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045f4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80045f8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	7bdb      	ldrb	r3, [r3, #15]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d016      	beq.n	8004630 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004608:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004612:	f043 030b 	orr.w	r3, r3, #11
 8004616:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004622:	69fa      	ldr	r2, [r7, #28]
 8004624:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004628:	f043 030b 	orr.w	r3, r3, #11
 800462c:	6453      	str	r3, [r2, #68]	@ 0x44
 800462e:	e015      	b.n	800465c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800463e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004642:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004646:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	69fa      	ldr	r2, [r7, #28]
 8004652:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004656:	f043 030b 	orr.w	r3, r3, #11
 800465a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	69fa      	ldr	r2, [r7, #28]
 8004666:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800466a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800466e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6818      	ldr	r0, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800467e:	461a      	mov	r2, r3
 8004680:	f003 ff1e 	bl	80084c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695a      	ldr	r2, [r3, #20]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004692:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f003 fe4d 	bl	8008338 <USB_ReadInterrupts>
 800469e:	4603      	mov	r3, r0
 80046a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046a8:	d123      	bne.n	80046f2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f003 fee3 	bl	800847a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f002 ff9a 	bl	80075f2 <USB_GetDevSpeed>
 80046be:	4603      	mov	r3, r0
 80046c0:	461a      	mov	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681c      	ldr	r4, [r3, #0]
 80046ca:	f001 fa07 	bl	8005adc <HAL_RCC_GetHCLKFreq>
 80046ce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046d4:	461a      	mov	r2, r3
 80046d6:	4620      	mov	r0, r4
 80046d8:	f002 fc9e 	bl	8007018 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f006 fa00 	bl	800aae2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695a      	ldr	r2, [r3, #20]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80046f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f003 fe1e 	bl	8008338 <USB_ReadInterrupts>
 80046fc:	4603      	mov	r3, r0
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b08      	cmp	r3, #8
 8004704:	d10a      	bne.n	800471c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f006 f9dd 	bl	800aac6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695a      	ldr	r2, [r3, #20]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f002 0208 	and.w	r2, r2, #8
 800471a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f003 fe09 	bl	8008338 <USB_ReadInterrupts>
 8004726:	4603      	mov	r3, r0
 8004728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800472c:	2b80      	cmp	r3, #128	@ 0x80
 800472e:	d123      	bne.n	8004778 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800473c:	2301      	movs	r3, #1
 800473e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004740:	e014      	b.n	800476c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004746:	4613      	mov	r3, r2
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	4413      	add	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	440b      	add	r3, r1
 8004750:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d105      	bne.n	8004766 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	b2db      	uxtb	r3, r3
 800475e:	4619      	mov	r1, r3
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 fb0a 	bl	8004d7a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004768:	3301      	adds	r3, #1
 800476a:	627b      	str	r3, [r7, #36]	@ 0x24
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	791b      	ldrb	r3, [r3, #4]
 8004770:	461a      	mov	r2, r3
 8004772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004774:	4293      	cmp	r3, r2
 8004776:	d3e4      	bcc.n	8004742 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f003 fddb 	bl	8008338 <USB_ReadInterrupts>
 8004782:	4603      	mov	r3, r0
 8004784:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004788:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800478c:	d13c      	bne.n	8004808 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800478e:	2301      	movs	r3, #1
 8004790:	627b      	str	r3, [r7, #36]	@ 0x24
 8004792:	e02b      	b.n	80047ec <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047a8:	4613      	mov	r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	3318      	adds	r3, #24
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d115      	bne.n	80047e6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80047ba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80047bc:	2b00      	cmp	r3, #0
 80047be:	da12      	bge.n	80047e6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047c4:	4613      	mov	r3, r2
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	4413      	add	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	3317      	adds	r3, #23
 80047d0:	2201      	movs	r2, #1
 80047d2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80047d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	4619      	mov	r1, r3
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 faca 	bl	8004d7a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	3301      	adds	r3, #1
 80047ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	791b      	ldrb	r3, [r3, #4]
 80047f0:	461a      	mov	r2, r3
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d3cd      	bcc.n	8004794 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695a      	ldr	r2, [r3, #20]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004806:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f003 fd93 	bl	8008338 <USB_ReadInterrupts>
 8004812:	4603      	mov	r3, r0
 8004814:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004818:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800481c:	d156      	bne.n	80048cc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800481e:	2301      	movs	r3, #1
 8004820:	627b      	str	r3, [r7, #36]	@ 0x24
 8004822:	e045      	b.n	80048b0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004838:	4613      	mov	r3, r2
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d12e      	bne.n	80048aa <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800484c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800484e:	2b00      	cmp	r3, #0
 8004850:	da2b      	bge.n	80048aa <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800485e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004862:	429a      	cmp	r2, r3
 8004864:	d121      	bne.n	80048aa <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800486a:	4613      	mov	r3, r2
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	440b      	add	r3, r1
 8004874:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004878:	2201      	movs	r2, #1
 800487a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10a      	bne.n	80048aa <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	69fa      	ldr	r2, [r7, #28]
 800489e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048a6:	6053      	str	r3, [r2, #4]
            break;
 80048a8:	e008      	b.n	80048bc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ac:	3301      	adds	r3, #1
 80048ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	791b      	ldrb	r3, [r3, #4]
 80048b4:	461a      	mov	r2, r3
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d3b3      	bcc.n	8004824 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695a      	ldr	r2, [r3, #20]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80048ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f003 fd31 	bl	8008338 <USB_ReadInterrupts>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80048dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e0:	d10a      	bne.n	80048f8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f006 f97e 	bl	800abe4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695a      	ldr	r2, [r3, #20]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80048f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f003 fd1b 	bl	8008338 <USB_ReadInterrupts>
 8004902:	4603      	mov	r3, r0
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b04      	cmp	r3, #4
 800490a:	d115      	bne.n	8004938 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f006 f96e 	bl	800ac00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6859      	ldr	r1, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	430a      	orrs	r2, r1
 8004932:	605a      	str	r2, [r3, #4]
 8004934:	e000      	b.n	8004938 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004936:	bf00      	nop
    }
  }
}
 8004938:	3734      	adds	r7, #52	@ 0x34
 800493a:	46bd      	mov	sp, r7
 800493c:	bd90      	pop	{r4, r7, pc}

0800493e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b082      	sub	sp, #8
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	460b      	mov	r3, r1
 8004948:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_PCD_SetAddress+0x1a>
 8004954:	2302      	movs	r3, #2
 8004956:	e012      	b.n	800497e <HAL_PCD_SetAddress+0x40>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	78fa      	ldrb	r2, [r7, #3]
 8004964:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	78fa      	ldrb	r2, [r7, #3]
 800496c:	4611      	mov	r1, r2
 800496e:	4618      	mov	r0, r3
 8004970:	f003 fc7a 	bl	8008268 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	4608      	mov	r0, r1
 8004990:	4611      	mov	r1, r2
 8004992:	461a      	mov	r2, r3
 8004994:	4603      	mov	r3, r0
 8004996:	70fb      	strb	r3, [r7, #3]
 8004998:	460b      	mov	r3, r1
 800499a:	803b      	strh	r3, [r7, #0]
 800499c:	4613      	mov	r3, r2
 800499e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	da0f      	bge.n	80049cc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	f003 020f 	and.w	r2, r3, #15
 80049b2:	4613      	mov	r3, r2
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	4413      	add	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	3310      	adds	r3, #16
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	4413      	add	r3, r2
 80049c0:	3304      	adds	r3, #4
 80049c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2201      	movs	r2, #1
 80049c8:	705a      	strb	r2, [r3, #1]
 80049ca:	e00f      	b.n	80049ec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049cc:	78fb      	ldrb	r3, [r7, #3]
 80049ce:	f003 020f 	and.w	r2, r3, #15
 80049d2:	4613      	mov	r3, r2
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	4413      	add	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	4413      	add	r3, r2
 80049e2:	3304      	adds	r3, #4
 80049e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80049f8:	883b      	ldrh	r3, [r7, #0]
 80049fa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	78ba      	ldrb	r2, [r7, #2]
 8004a06:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	785b      	ldrb	r3, [r3, #1]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d004      	beq.n	8004a1a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	461a      	mov	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a1a:	78bb      	ldrb	r3, [r7, #2]
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d102      	bne.n	8004a26 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_PCD_EP_Open+0xae>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e00e      	b.n	8004a52 <HAL_PCD_EP_Open+0xcc>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68f9      	ldr	r1, [r7, #12]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f002 fdfa 	bl	800763c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004a50:	7afb      	ldrb	r3, [r7, #11]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
 8004a62:	460b      	mov	r3, r1
 8004a64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	da0f      	bge.n	8004a8e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a6e:	78fb      	ldrb	r3, [r7, #3]
 8004a70:	f003 020f 	and.w	r2, r3, #15
 8004a74:	4613      	mov	r3, r2
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	4413      	add	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	3310      	adds	r3, #16
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	4413      	add	r3, r2
 8004a82:	3304      	adds	r3, #4
 8004a84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	705a      	strb	r2, [r3, #1]
 8004a8c:	e00f      	b.n	8004aae <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a8e:	78fb      	ldrb	r3, [r7, #3]
 8004a90:	f003 020f 	and.w	r2, r3, #15
 8004a94:	4613      	mov	r3, r2
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	4413      	add	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004aae:	78fb      	ldrb	r3, [r7, #3]
 8004ab0:	f003 030f 	and.w	r3, r3, #15
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_PCD_EP_Close+0x6e>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e00e      	b.n	8004ae6 <HAL_PCD_EP_Close+0x8c>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68f9      	ldr	r1, [r7, #12]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f002 fe38 	bl	800774c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b086      	sub	sp, #24
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	603b      	str	r3, [r7, #0]
 8004afa:	460b      	mov	r3, r1
 8004afc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004afe:	7afb      	ldrb	r3, [r7, #11]
 8004b00:	f003 020f 	and.w	r2, r3, #15
 8004b04:	4613      	mov	r3, r2
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	4413      	add	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	3304      	adds	r3, #4
 8004b16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	2200      	movs	r2, #0
 8004b28:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b30:	7afb      	ldrb	r3, [r7, #11]
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	799b      	ldrb	r3, [r3, #6]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d102      	bne.n	8004b4a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6818      	ldr	r0, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	799b      	ldrb	r3, [r3, #6]
 8004b52:	461a      	mov	r2, r3
 8004b54:	6979      	ldr	r1, [r7, #20]
 8004b56:	f002 fed5 	bl	8007904 <USB_EPStartXfer>

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	f003 020f 	and.w	r2, r3, #15
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004b86:	681b      	ldr	r3, [r3, #0]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	607a      	str	r2, [r7, #4]
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ba4:	7afb      	ldrb	r3, [r7, #11]
 8004ba6:	f003 020f 	and.w	r2, r3, #15
 8004baa:	4613      	mov	r3, r2
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	4413      	add	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	3310      	adds	r3, #16
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	3304      	adds	r3, #4
 8004bba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bd4:	7afb      	ldrb	r3, [r7, #11]
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	799b      	ldrb	r3, [r3, #6]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d102      	bne.n	8004bee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6818      	ldr	r0, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	799b      	ldrb	r3, [r3, #6]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	6979      	ldr	r1, [r7, #20]
 8004bfa:	f002 fe83 	bl	8007904 <USB_EPStartXfer>

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	f003 030f 	and.w	r3, r3, #15
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	7912      	ldrb	r2, [r2, #4]
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d901      	bls.n	8004c26 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e04f      	b.n	8004cc6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	da0f      	bge.n	8004c4e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c2e:	78fb      	ldrb	r3, [r7, #3]
 8004c30:	f003 020f 	and.w	r2, r3, #15
 8004c34:	4613      	mov	r3, r2
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	3310      	adds	r3, #16
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	4413      	add	r3, r2
 8004c42:	3304      	adds	r3, #4
 8004c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	705a      	strb	r2, [r3, #1]
 8004c4c:	e00d      	b.n	8004c6a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	4613      	mov	r3, r2
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	4413      	add	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	4413      	add	r3, r2
 8004c60:	3304      	adds	r3, #4
 8004c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d101      	bne.n	8004c8a <HAL_PCD_EP_SetStall+0x82>
 8004c86:	2302      	movs	r3, #2
 8004c88:	e01d      	b.n	8004cc6 <HAL_PCD_EP_SetStall+0xbe>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68f9      	ldr	r1, [r7, #12]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f003 fa11 	bl	80080c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c9e:	78fb      	ldrb	r3, [r7, #3]
 8004ca0:	f003 030f 	and.w	r3, r3, #15
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d109      	bne.n	8004cbc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6818      	ldr	r0, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	7999      	ldrb	r1, [r3, #6]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f003 fc02 	bl	80084c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004cda:	78fb      	ldrb	r3, [r7, #3]
 8004cdc:	f003 030f 	and.w	r3, r3, #15
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	7912      	ldrb	r2, [r2, #4]
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d901      	bls.n	8004cec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e042      	b.n	8004d72 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	da0f      	bge.n	8004d14 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	f003 020f 	and.w	r2, r3, #15
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	4413      	add	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	3310      	adds	r3, #16
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	4413      	add	r3, r2
 8004d08:	3304      	adds	r3, #4
 8004d0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	705a      	strb	r2, [r3, #1]
 8004d12:	e00f      	b.n	8004d34 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	f003 020f 	and.w	r2, r3, #15
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	4413      	add	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	4413      	add	r3, r2
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d3a:	78fb      	ldrb	r3, [r7, #3]
 8004d3c:	f003 030f 	and.w	r3, r3, #15
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_PCD_EP_ClrStall+0x86>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e00e      	b.n	8004d72 <HAL_PCD_EP_ClrStall+0xa4>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68f9      	ldr	r1, [r7, #12]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f003 fa1a 	bl	800819c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	460b      	mov	r3, r1
 8004d84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004d86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	da0c      	bge.n	8004da8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	f003 020f 	and.w	r2, r3, #15
 8004d94:	4613      	mov	r3, r2
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	3310      	adds	r3, #16
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	4413      	add	r3, r2
 8004da2:	3304      	adds	r3, #4
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	e00c      	b.n	8004dc2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004da8:	78fb      	ldrb	r3, [r7, #3]
 8004daa:	f003 020f 	and.w	r2, r3, #15
 8004dae:	4613      	mov	r3, r2
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68f9      	ldr	r1, [r7, #12]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f003 f839 	bl	8007e40 <USB_EPStopXfer>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004dd2:	7afb      	ldrb	r3, [r7, #11]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08a      	sub	sp, #40	@ 0x28
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	4613      	mov	r3, r2
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	4413      	add	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	3310      	adds	r3, #16
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	4413      	add	r3, r2
 8004e00:	3304      	adds	r3, #4
 8004e02:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	695a      	ldr	r2, [r3, #20]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d901      	bls.n	8004e14 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e06b      	b.n	8004eec <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d902      	bls.n	8004e30 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	3303      	adds	r3, #3
 8004e34:	089b      	lsrs	r3, r3, #2
 8004e36:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e38:	e02a      	b.n	8004e90 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	691a      	ldr	r2, [r3, #16]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	69fa      	ldr	r2, [r7, #28]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d902      	bls.n	8004e56 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	3303      	adds	r3, #3
 8004e5a:	089b      	lsrs	r3, r3, #2
 8004e5c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	68d9      	ldr	r1, [r3, #12]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	4603      	mov	r3, r0
 8004e72:	6978      	ldr	r0, [r7, #20]
 8004e74:	f003 f88e 	bl	8007f94 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	441a      	add	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	695a      	ldr	r2, [r3, #20]
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	441a      	add	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d809      	bhi.n	8004eba <PCD_WriteEmptyTxFifo+0xde>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	695a      	ldr	r2, [r3, #20]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d203      	bcs.n	8004eba <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1bf      	bne.n	8004e3a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d811      	bhi.n	8004eea <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	2201      	movs	r2, #1
 8004ece:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	6939      	ldr	r1, [r7, #16]
 8004ee2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3720      	adds	r7, #32
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	333c      	adds	r3, #60	@ 0x3c
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	799b      	ldrb	r3, [r3, #6]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d17b      	bne.n	8005022 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f003 0308 	and.w	r3, r3, #8
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d015      	beq.n	8004f60 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	4a61      	ldr	r2, [pc, #388]	@ (80050bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	f240 80b9 	bls.w	80050b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 80b3 	beq.w	80050b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f56:	461a      	mov	r2, r3
 8004f58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f5c:	6093      	str	r3, [r2, #8]
 8004f5e:	e0a7      	b.n	80050b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f003 0320 	and.w	r3, r3, #32
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d009      	beq.n	8004f7e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f76:	461a      	mov	r2, r3
 8004f78:	2320      	movs	r3, #32
 8004f7a:	6093      	str	r3, [r2, #8]
 8004f7c:	e098      	b.n	80050b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f040 8093 	bne.w	80050b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	4a4b      	ldr	r2, [pc, #300]	@ (80050bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d90f      	bls.n	8004fb2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fa8:	461a      	mov	r2, r3
 8004faa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fae:	6093      	str	r3, [r2, #8]
 8004fb0:	e07e      	b.n	80050b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	4413      	add	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a1a      	ldr	r2, [r3, #32]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	0159      	lsls	r1, r3, #5
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	440b      	add	r3, r1
 8004fd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fde:	1ad2      	subs	r2, r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d114      	bne.n	8005014 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d109      	bne.n	8005006 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	2101      	movs	r1, #1
 8005000:	f003 fa5e 	bl	80084c0 <USB_EP0_OutStart>
 8005004:	e006      	b.n	8005014 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	441a      	add	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	b2db      	uxtb	r3, r3
 8005018:	4619      	mov	r1, r3
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f005 fd1e 	bl	800aa5c <HAL_PCD_DataOutStageCallback>
 8005020:	e046      	b.n	80050b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	4a26      	ldr	r2, [pc, #152]	@ (80050c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d124      	bne.n	8005074 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005040:	461a      	mov	r2, r3
 8005042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005046:	6093      	str	r3, [r2, #8]
 8005048:	e032      	b.n	80050b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f003 0320 	and.w	r3, r3, #32
 8005050:	2b00      	cmp	r3, #0
 8005052:	d008      	beq.n	8005066 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005060:	461a      	mov	r2, r3
 8005062:	2320      	movs	r3, #32
 8005064:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	b2db      	uxtb	r3, r3
 800506a:	4619      	mov	r1, r3
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f005 fcf5 	bl	800aa5c <HAL_PCD_DataOutStageCallback>
 8005072:	e01d      	b.n	80050b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d114      	bne.n	80050a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	4613      	mov	r3, r2
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	4413      	add	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	440b      	add	r3, r1
 8005088:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d108      	bne.n	80050a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800509c:	461a      	mov	r2, r3
 800509e:	2100      	movs	r1, #0
 80050a0:	f003 fa0e 	bl	80084c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	4619      	mov	r1, r3
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f005 fcd6 	bl	800aa5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3720      	adds	r7, #32
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	4f54300a 	.word	0x4f54300a
 80050c0:	4f54310a 	.word	0x4f54310a

080050c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	333c      	adds	r3, #60	@ 0x3c
 80050dc:	3304      	adds	r3, #4
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4a15      	ldr	r2, [pc, #84]	@ (800514c <PCD_EP_OutSetupPacket_int+0x88>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d90e      	bls.n	8005118 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005100:	2b00      	cmp	r3, #0
 8005102:	d009      	beq.n	8005118 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005110:	461a      	mov	r2, r3
 8005112:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005116:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f005 fc8d 	bl	800aa38 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4a0a      	ldr	r2, [pc, #40]	@ (800514c <PCD_EP_OutSetupPacket_int+0x88>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d90c      	bls.n	8005140 <PCD_EP_OutSetupPacket_int+0x7c>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	799b      	ldrb	r3, [r3, #6]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d108      	bne.n	8005140 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6818      	ldr	r0, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005138:	461a      	mov	r2, r3
 800513a:	2101      	movs	r1, #1
 800513c:	f003 f9c0 	bl	80084c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	4f54300a 	.word	0x4f54300a

08005150 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	70fb      	strb	r3, [r7, #3]
 800515c:	4613      	mov	r3, r2
 800515e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005166:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005168:	78fb      	ldrb	r3, [r7, #3]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d107      	bne.n	800517e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800516e:	883b      	ldrh	r3, [r7, #0]
 8005170:	0419      	lsls	r1, r3, #16
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	430a      	orrs	r2, r1
 800517a:	629a      	str	r2, [r3, #40]	@ 0x28
 800517c:	e028      	b.n	80051d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005184:	0c1b      	lsrs	r3, r3, #16
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	4413      	add	r3, r2
 800518a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800518c:	2300      	movs	r3, #0
 800518e:	73fb      	strb	r3, [r7, #15]
 8005190:	e00d      	b.n	80051ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	7bfb      	ldrb	r3, [r7, #15]
 8005198:	3340      	adds	r3, #64	@ 0x40
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	0c1b      	lsrs	r3, r3, #16
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	4413      	add	r3, r2
 80051a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	3301      	adds	r3, #1
 80051ac:	73fb      	strb	r3, [r7, #15]
 80051ae:	7bfa      	ldrb	r2, [r7, #15]
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d3ec      	bcc.n	8005192 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80051b8:	883b      	ldrh	r3, [r7, #0]
 80051ba:	0418      	lsls	r0, r3, #16
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6819      	ldr	r1, [r3, #0]
 80051c0:	78fb      	ldrb	r3, [r7, #3]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	4302      	orrs	r2, r0
 80051c8:	3340      	adds	r3, #64	@ 0x40
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	440b      	add	r3, r1
 80051ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	460b      	mov	r3, r1
 80051e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	887a      	ldrh	r2, [r7, #2]
 80051f0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e267      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d075      	beq.n	8005322 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005236:	4b88      	ldr	r3, [pc, #544]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 030c 	and.w	r3, r3, #12
 800523e:	2b04      	cmp	r3, #4
 8005240:	d00c      	beq.n	800525c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005242:	4b85      	ldr	r3, [pc, #532]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800524a:	2b08      	cmp	r3, #8
 800524c:	d112      	bne.n	8005274 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800524e:	4b82      	ldr	r3, [pc, #520]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005256:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800525a:	d10b      	bne.n	8005274 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800525c:	4b7e      	ldr	r3, [pc, #504]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d05b      	beq.n	8005320 <HAL_RCC_OscConfig+0x108>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d157      	bne.n	8005320 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e242      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800527c:	d106      	bne.n	800528c <HAL_RCC_OscConfig+0x74>
 800527e:	4b76      	ldr	r3, [pc, #472]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a75      	ldr	r2, [pc, #468]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	e01d      	b.n	80052c8 <HAL_RCC_OscConfig+0xb0>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005294:	d10c      	bne.n	80052b0 <HAL_RCC_OscConfig+0x98>
 8005296:	4b70      	ldr	r3, [pc, #448]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a6f      	ldr	r2, [pc, #444]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800529c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	4b6d      	ldr	r3, [pc, #436]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a6c      	ldr	r2, [pc, #432]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	e00b      	b.n	80052c8 <HAL_RCC_OscConfig+0xb0>
 80052b0:	4b69      	ldr	r3, [pc, #420]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a68      	ldr	r2, [pc, #416]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	4b66      	ldr	r3, [pc, #408]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a65      	ldr	r2, [pc, #404]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d013      	beq.n	80052f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d0:	f7fe fa72 	bl	80037b8 <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052d8:	f7fe fa6e 	bl	80037b8 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b64      	cmp	r3, #100	@ 0x64
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e207      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ea:	4b5b      	ldr	r3, [pc, #364]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0f0      	beq.n	80052d8 <HAL_RCC_OscConfig+0xc0>
 80052f6:	e014      	b.n	8005322 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f8:	f7fe fa5e 	bl	80037b8 <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005300:	f7fe fa5a 	bl	80037b8 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b64      	cmp	r3, #100	@ 0x64
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e1f3      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005312:	4b51      	ldr	r3, [pc, #324]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f0      	bne.n	8005300 <HAL_RCC_OscConfig+0xe8>
 800531e:	e000      	b.n	8005322 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d063      	beq.n	80053f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800532e:	4b4a      	ldr	r3, [pc, #296]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 030c 	and.w	r3, r3, #12
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00b      	beq.n	8005352 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800533a:	4b47      	ldr	r3, [pc, #284]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005342:	2b08      	cmp	r3, #8
 8005344:	d11c      	bne.n	8005380 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005346:	4b44      	ldr	r3, [pc, #272]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d116      	bne.n	8005380 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005352:	4b41      	ldr	r3, [pc, #260]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <HAL_RCC_OscConfig+0x152>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d001      	beq.n	800536a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e1c7      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800536a:	4b3b      	ldr	r3, [pc, #236]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	4937      	ldr	r1, [pc, #220]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800537a:	4313      	orrs	r3, r2
 800537c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800537e:	e03a      	b.n	80053f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d020      	beq.n	80053ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005388:	4b34      	ldr	r3, [pc, #208]	@ (800545c <HAL_RCC_OscConfig+0x244>)
 800538a:	2201      	movs	r2, #1
 800538c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538e:	f7fe fa13 	bl	80037b8 <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005394:	e008      	b.n	80053a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005396:	f7fe fa0f 	bl	80037b8 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e1a8      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0f0      	beq.n	8005396 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b4:	4b28      	ldr	r3, [pc, #160]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	4925      	ldr	r1, [pc, #148]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	600b      	str	r3, [r1, #0]
 80053c8:	e015      	b.n	80053f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ca:	4b24      	ldr	r3, [pc, #144]	@ (800545c <HAL_RCC_OscConfig+0x244>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d0:	f7fe f9f2 	bl	80037b8 <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053d8:	f7fe f9ee 	bl	80037b8 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e187      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d036      	beq.n	8005470 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d016      	beq.n	8005438 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800540a:	4b15      	ldr	r3, [pc, #84]	@ (8005460 <HAL_RCC_OscConfig+0x248>)
 800540c:	2201      	movs	r2, #1
 800540e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005410:	f7fe f9d2 	bl	80037b8 <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005418:	f7fe f9ce 	bl	80037b8 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e167      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800542a:	4b0b      	ldr	r3, [pc, #44]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800542c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f0      	beq.n	8005418 <HAL_RCC_OscConfig+0x200>
 8005436:	e01b      	b.n	8005470 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005438:	4b09      	ldr	r3, [pc, #36]	@ (8005460 <HAL_RCC_OscConfig+0x248>)
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800543e:	f7fe f9bb 	bl	80037b8 <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005444:	e00e      	b.n	8005464 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005446:	f7fe f9b7 	bl	80037b8 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d907      	bls.n	8005464 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e150      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
 8005458:	40023800 	.word	0x40023800
 800545c:	42470000 	.word	0x42470000
 8005460:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005464:	4b88      	ldr	r3, [pc, #544]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005466:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1ea      	bne.n	8005446 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 8097 	beq.w	80055ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800547e:	2300      	movs	r3, #0
 8005480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005482:	4b81      	ldr	r3, [pc, #516]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10f      	bne.n	80054ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800548e:	2300      	movs	r3, #0
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	4b7d      	ldr	r3, [pc, #500]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005496:	4a7c      	ldr	r2, [pc, #496]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800549c:	6413      	str	r3, [r2, #64]	@ 0x40
 800549e:	4b7a      	ldr	r3, [pc, #488]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80054a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a6:	60bb      	str	r3, [r7, #8]
 80054a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054aa:	2301      	movs	r3, #1
 80054ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ae:	4b77      	ldr	r3, [pc, #476]	@ (800568c <HAL_RCC_OscConfig+0x474>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d118      	bne.n	80054ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054ba:	4b74      	ldr	r3, [pc, #464]	@ (800568c <HAL_RCC_OscConfig+0x474>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a73      	ldr	r2, [pc, #460]	@ (800568c <HAL_RCC_OscConfig+0x474>)
 80054c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054c6:	f7fe f977 	bl	80037b8 <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ce:	f7fe f973 	bl	80037b8 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e10c      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e0:	4b6a      	ldr	r3, [pc, #424]	@ (800568c <HAL_RCC_OscConfig+0x474>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0f0      	beq.n	80054ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d106      	bne.n	8005502 <HAL_RCC_OscConfig+0x2ea>
 80054f4:	4b64      	ldr	r3, [pc, #400]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80054f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f8:	4a63      	ldr	r2, [pc, #396]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80054fa:	f043 0301 	orr.w	r3, r3, #1
 80054fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005500:	e01c      	b.n	800553c <HAL_RCC_OscConfig+0x324>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	2b05      	cmp	r3, #5
 8005508:	d10c      	bne.n	8005524 <HAL_RCC_OscConfig+0x30c>
 800550a:	4b5f      	ldr	r3, [pc, #380]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 800550c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800550e:	4a5e      	ldr	r2, [pc, #376]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005510:	f043 0304 	orr.w	r3, r3, #4
 8005514:	6713      	str	r3, [r2, #112]	@ 0x70
 8005516:	4b5c      	ldr	r3, [pc, #368]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800551a:	4a5b      	ldr	r2, [pc, #364]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 800551c:	f043 0301 	orr.w	r3, r3, #1
 8005520:	6713      	str	r3, [r2, #112]	@ 0x70
 8005522:	e00b      	b.n	800553c <HAL_RCC_OscConfig+0x324>
 8005524:	4b58      	ldr	r3, [pc, #352]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005528:	4a57      	ldr	r2, [pc, #348]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 800552a:	f023 0301 	bic.w	r3, r3, #1
 800552e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005530:	4b55      	ldr	r3, [pc, #340]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005534:	4a54      	ldr	r2, [pc, #336]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005536:	f023 0304 	bic.w	r3, r3, #4
 800553a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d015      	beq.n	8005570 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005544:	f7fe f938 	bl	80037b8 <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800554a:	e00a      	b.n	8005562 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800554c:	f7fe f934 	bl	80037b8 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800555a:	4293      	cmp	r3, r2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e0cb      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005562:	4b49      	ldr	r3, [pc, #292]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0ee      	beq.n	800554c <HAL_RCC_OscConfig+0x334>
 800556e:	e014      	b.n	800559a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005570:	f7fe f922 	bl	80037b8 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005576:	e00a      	b.n	800558e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005578:	f7fe f91e 	bl	80037b8 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005586:	4293      	cmp	r3, r2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e0b5      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800558e:	4b3e      	ldr	r3, [pc, #248]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1ee      	bne.n	8005578 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800559a:	7dfb      	ldrb	r3, [r7, #23]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d105      	bne.n	80055ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055a0:	4b39      	ldr	r3, [pc, #228]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80055a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a4:	4a38      	ldr	r2, [pc, #224]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80055a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 80a1 	beq.w	80056f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055b6:	4b34      	ldr	r3, [pc, #208]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f003 030c 	and.w	r3, r3, #12
 80055be:	2b08      	cmp	r3, #8
 80055c0:	d05c      	beq.n	800567c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d141      	bne.n	800564e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ca:	4b31      	ldr	r3, [pc, #196]	@ (8005690 <HAL_RCC_OscConfig+0x478>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d0:	f7fe f8f2 	bl	80037b8 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d8:	f7fe f8ee 	bl	80037b8 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e087      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ea:	4b27      	ldr	r3, [pc, #156]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f0      	bne.n	80055d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69da      	ldr	r2, [r3, #28]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005604:	019b      	lsls	r3, r3, #6
 8005606:	431a      	orrs	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560c:	085b      	lsrs	r3, r3, #1
 800560e:	3b01      	subs	r3, #1
 8005610:	041b      	lsls	r3, r3, #16
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005618:	061b      	lsls	r3, r3, #24
 800561a:	491b      	ldr	r1, [pc, #108]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 800561c:	4313      	orrs	r3, r2
 800561e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005620:	4b1b      	ldr	r3, [pc, #108]	@ (8005690 <HAL_RCC_OscConfig+0x478>)
 8005622:	2201      	movs	r2, #1
 8005624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005626:	f7fe f8c7 	bl	80037b8 <HAL_GetTick>
 800562a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800562c:	e008      	b.n	8005640 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800562e:	f7fe f8c3 	bl	80037b8 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e05c      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005640:	4b11      	ldr	r3, [pc, #68]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0f0      	beq.n	800562e <HAL_RCC_OscConfig+0x416>
 800564c:	e054      	b.n	80056f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800564e:	4b10      	ldr	r3, [pc, #64]	@ (8005690 <HAL_RCC_OscConfig+0x478>)
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005654:	f7fe f8b0 	bl	80037b8 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800565c:	f7fe f8ac 	bl	80037b8 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e045      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800566e:	4b06      	ldr	r3, [pc, #24]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1f0      	bne.n	800565c <HAL_RCC_OscConfig+0x444>
 800567a:	e03d      	b.n	80056f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d107      	bne.n	8005694 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e038      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
 8005688:	40023800 	.word	0x40023800
 800568c:	40007000 	.word	0x40007000
 8005690:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005694:	4b1b      	ldr	r3, [pc, #108]	@ (8005704 <HAL_RCC_OscConfig+0x4ec>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d028      	beq.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d121      	bne.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d11a      	bne.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80056c4:	4013      	ands	r3, r2
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80056ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d111      	bne.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056da:	085b      	lsrs	r3, r3, #1
 80056dc:	3b01      	subs	r3, #1
 80056de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d107      	bne.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d001      	beq.n	80056f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e000      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3718      	adds	r7, #24
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	40023800 	.word	0x40023800

08005708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0cc      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800571c:	4b68      	ldr	r3, [pc, #416]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d90c      	bls.n	8005744 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800572a:	4b65      	ldr	r3, [pc, #404]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005732:	4b63      	ldr	r3, [pc, #396]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0307 	and.w	r3, r3, #7
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	429a      	cmp	r2, r3
 800573e:	d001      	beq.n	8005744 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e0b8      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d020      	beq.n	8005792 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b00      	cmp	r3, #0
 800575a:	d005      	beq.n	8005768 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800575c:	4b59      	ldr	r3, [pc, #356]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	4a58      	ldr	r2, [pc, #352]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005766:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005774:	4b53      	ldr	r3, [pc, #332]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	4a52      	ldr	r2, [pc, #328]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800577a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800577e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005780:	4b50      	ldr	r3, [pc, #320]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	494d      	ldr	r1, [pc, #308]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800578e:	4313      	orrs	r3, r2
 8005790:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d044      	beq.n	8005828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d107      	bne.n	80057b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057a6:	4b47      	ldr	r3, [pc, #284]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d119      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e07f      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d003      	beq.n	80057c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d107      	bne.n	80057d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c6:	4b3f      	ldr	r3, [pc, #252]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d109      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e06f      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d6:	4b3b      	ldr	r3, [pc, #236]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e067      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057e6:	4b37      	ldr	r3, [pc, #220]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f023 0203 	bic.w	r2, r3, #3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	4934      	ldr	r1, [pc, #208]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057f8:	f7fd ffde 	bl	80037b8 <HAL_GetTick>
 80057fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fe:	e00a      	b.n	8005816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005800:	f7fd ffda 	bl	80037b8 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800580e:	4293      	cmp	r3, r2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e04f      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005816:	4b2b      	ldr	r3, [pc, #172]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 020c 	and.w	r2, r3, #12
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	429a      	cmp	r2, r3
 8005826:	d1eb      	bne.n	8005800 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005828:	4b25      	ldr	r3, [pc, #148]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0307 	and.w	r3, r3, #7
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	429a      	cmp	r2, r3
 8005834:	d20c      	bcs.n	8005850 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005836:	4b22      	ldr	r3, [pc, #136]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800583e:	4b20      	ldr	r3, [pc, #128]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d001      	beq.n	8005850 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e032      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b00      	cmp	r3, #0
 800585a:	d008      	beq.n	800586e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800585c:	4b19      	ldr	r3, [pc, #100]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	4916      	ldr	r1, [pc, #88]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800586a:	4313      	orrs	r3, r2
 800586c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	2b00      	cmp	r3, #0
 8005878:	d009      	beq.n	800588e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800587a:	4b12      	ldr	r3, [pc, #72]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	490e      	ldr	r1, [pc, #56]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	4313      	orrs	r3, r2
 800588c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800588e:	f000 f821 	bl	80058d4 <HAL_RCC_GetSysClockFreq>
 8005892:	4602      	mov	r2, r0
 8005894:	4b0b      	ldr	r3, [pc, #44]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	091b      	lsrs	r3, r3, #4
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	490a      	ldr	r1, [pc, #40]	@ (80058c8 <HAL_RCC_ClockConfig+0x1c0>)
 80058a0:	5ccb      	ldrb	r3, [r1, r3]
 80058a2:	fa22 f303 	lsr.w	r3, r2, r3
 80058a6:	4a09      	ldr	r2, [pc, #36]	@ (80058cc <HAL_RCC_ClockConfig+0x1c4>)
 80058a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80058aa:	4b09      	ldr	r3, [pc, #36]	@ (80058d0 <HAL_RCC_ClockConfig+0x1c8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fd ff3e 	bl	8003730 <HAL_InitTick>

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40023c00 	.word	0x40023c00
 80058c4:	40023800 	.word	0x40023800
 80058c8:	0800d9a8 	.word	0x0800d9a8
 80058cc:	20000004 	.word	0x20000004
 80058d0:	20000008 	.word	0x20000008

080058d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058d8:	b094      	sub	sp, #80	@ 0x50
 80058da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058ec:	4b79      	ldr	r3, [pc, #484]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 030c 	and.w	r3, r3, #12
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d00d      	beq.n	8005914 <HAL_RCC_GetSysClockFreq+0x40>
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	f200 80e1 	bhi.w	8005ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <HAL_RCC_GetSysClockFreq+0x34>
 8005902:	2b04      	cmp	r3, #4
 8005904:	d003      	beq.n	800590e <HAL_RCC_GetSysClockFreq+0x3a>
 8005906:	e0db      	b.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005908:	4b73      	ldr	r3, [pc, #460]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 800590a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800590c:	e0db      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800590e:	4b72      	ldr	r3, [pc, #456]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005910:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005912:	e0d8      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005914:	4b6f      	ldr	r3, [pc, #444]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800591c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800591e:	4b6d      	ldr	r3, [pc, #436]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d063      	beq.n	80059f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800592a:	4b6a      	ldr	r3, [pc, #424]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	099b      	lsrs	r3, r3, #6
 8005930:	2200      	movs	r2, #0
 8005932:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005934:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800593c:	633b      	str	r3, [r7, #48]	@ 0x30
 800593e:	2300      	movs	r3, #0
 8005940:	637b      	str	r3, [r7, #52]	@ 0x34
 8005942:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005946:	4622      	mov	r2, r4
 8005948:	462b      	mov	r3, r5
 800594a:	f04f 0000 	mov.w	r0, #0
 800594e:	f04f 0100 	mov.w	r1, #0
 8005952:	0159      	lsls	r1, r3, #5
 8005954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005958:	0150      	lsls	r0, r2, #5
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	4621      	mov	r1, r4
 8005960:	1a51      	subs	r1, r2, r1
 8005962:	6139      	str	r1, [r7, #16]
 8005964:	4629      	mov	r1, r5
 8005966:	eb63 0301 	sbc.w	r3, r3, r1
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005978:	4659      	mov	r1, fp
 800597a:	018b      	lsls	r3, r1, #6
 800597c:	4651      	mov	r1, sl
 800597e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005982:	4651      	mov	r1, sl
 8005984:	018a      	lsls	r2, r1, #6
 8005986:	4651      	mov	r1, sl
 8005988:	ebb2 0801 	subs.w	r8, r2, r1
 800598c:	4659      	mov	r1, fp
 800598e:	eb63 0901 	sbc.w	r9, r3, r1
 8005992:	f04f 0200 	mov.w	r2, #0
 8005996:	f04f 0300 	mov.w	r3, #0
 800599a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800599e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059a6:	4690      	mov	r8, r2
 80059a8:	4699      	mov	r9, r3
 80059aa:	4623      	mov	r3, r4
 80059ac:	eb18 0303 	adds.w	r3, r8, r3
 80059b0:	60bb      	str	r3, [r7, #8]
 80059b2:	462b      	mov	r3, r5
 80059b4:	eb49 0303 	adc.w	r3, r9, r3
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059c6:	4629      	mov	r1, r5
 80059c8:	028b      	lsls	r3, r1, #10
 80059ca:	4621      	mov	r1, r4
 80059cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059d0:	4621      	mov	r1, r4
 80059d2:	028a      	lsls	r2, r1, #10
 80059d4:	4610      	mov	r0, r2
 80059d6:	4619      	mov	r1, r3
 80059d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059da:	2200      	movs	r2, #0
 80059dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059e4:	f7fb f900 	bl	8000be8 <__aeabi_uldivmod>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4613      	mov	r3, r2
 80059ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059f0:	e058      	b.n	8005aa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059f2:	4b38      	ldr	r3, [pc, #224]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	099b      	lsrs	r3, r3, #6
 80059f8:	2200      	movs	r2, #0
 80059fa:	4618      	mov	r0, r3
 80059fc:	4611      	mov	r1, r2
 80059fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a02:	623b      	str	r3, [r7, #32]
 8005a04:	2300      	movs	r3, #0
 8005a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a0c:	4642      	mov	r2, r8
 8005a0e:	464b      	mov	r3, r9
 8005a10:	f04f 0000 	mov.w	r0, #0
 8005a14:	f04f 0100 	mov.w	r1, #0
 8005a18:	0159      	lsls	r1, r3, #5
 8005a1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a1e:	0150      	lsls	r0, r2, #5
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4641      	mov	r1, r8
 8005a26:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	f04f 0300 	mov.w	r3, #0
 8005a38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a44:	ebb2 040a 	subs.w	r4, r2, sl
 8005a48:	eb63 050b 	sbc.w	r5, r3, fp
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	00eb      	lsls	r3, r5, #3
 8005a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a5a:	00e2      	lsls	r2, r4, #3
 8005a5c:	4614      	mov	r4, r2
 8005a5e:	461d      	mov	r5, r3
 8005a60:	4643      	mov	r3, r8
 8005a62:	18e3      	adds	r3, r4, r3
 8005a64:	603b      	str	r3, [r7, #0]
 8005a66:	464b      	mov	r3, r9
 8005a68:	eb45 0303 	adc.w	r3, r5, r3
 8005a6c:	607b      	str	r3, [r7, #4]
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a7a:	4629      	mov	r1, r5
 8005a7c:	028b      	lsls	r3, r1, #10
 8005a7e:	4621      	mov	r1, r4
 8005a80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a84:	4621      	mov	r1, r4
 8005a86:	028a      	lsls	r2, r1, #10
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a8e:	2200      	movs	r2, #0
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	61fa      	str	r2, [r7, #28]
 8005a94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a98:	f7fb f8a6 	bl	8000be8 <__aeabi_uldivmod>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	0c1b      	lsrs	r3, r3, #16
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	3301      	adds	r3, #1
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005ab4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005abe:	e002      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ac0:	4b05      	ldr	r3, [pc, #20]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3750      	adds	r7, #80	@ 0x50
 8005acc:	46bd      	mov	sp, r7
 8005ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	00f42400 	.word	0x00f42400

08005adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ae0:	4b03      	ldr	r3, [pc, #12]	@ (8005af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	20000004 	.word	0x20000004

08005af4 <LL_ADC_REG_SetSequencerLength>:
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b02:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005b0e:	bf00      	nop
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	bf0c      	ite	eq
 8005b2e:	2301      	moveq	r3, #1
 8005b30:	2300      	movne	r3, #0
 8005b32:	b2db      	uxtb	r3, r3
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8005b40:	b590      	push	{r4, r7, lr}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8005b4e:	481c      	ldr	r0, [pc, #112]	@ (8005bc0 <LL_ADC_CommonInit+0x80>)
 8005b50:	f7ff ffe3 	bl	8005b1a <LL_ADC_IsEnabled>
 8005b54:	4604      	mov	r4, r0
 8005b56:	481b      	ldr	r0, [pc, #108]	@ (8005bc4 <LL_ADC_CommonInit+0x84>)
 8005b58:	f7ff ffdf 	bl	8005b1a <LL_ADC_IsEnabled>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	431c      	orrs	r4, r3
 8005b60:	4819      	ldr	r0, [pc, #100]	@ (8005bc8 <LL_ADC_CommonInit+0x88>)
 8005b62:	f7ff ffda 	bl	8005b1a <LL_ADC_IsEnabled>
 8005b66:	4603      	mov	r3, r0
 8005b68:	4323      	orrs	r3, r4
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d120      	bne.n	8005bb0 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d012      	beq.n	8005b9c <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	4b14      	ldr	r3, [pc, #80]	@ (8005bcc <LL_ADC_CommonInit+0x8c>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	6811      	ldr	r1, [r2, #0]
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	6852      	ldr	r2, [r2, #4]
 8005b86:	4311      	orrs	r1, r2
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	6892      	ldr	r2, [r2, #8]
 8005b8c:	4311      	orrs	r1, r2
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	68d2      	ldr	r2, [r2, #12]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	431a      	orrs	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	605a      	str	r2, [r3, #4]
 8005b9a:	e00b      	b.n	8005bb4 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8005bcc <LL_ADC_CommonInit+0x8c>)
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	6812      	ldr	r2, [r2, #0]
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	605a      	str	r2, [r3, #4]
 8005bae:	e001      	b.n	8005bb4 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd90      	pop	{r4, r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	40012000 	.word	0x40012000
 8005bc4:	40012100 	.word	0x40012100
 8005bc8:	40012200 	.word	0x40012200
 8005bcc:	fffc10e0 	.word	0xfffc10e0

08005bd0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff ff9b 	bl	8005b1a <LL_ADC_IsEnabled>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d117      	bne.n	8005c1a <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8005bf2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	6811      	ldr	r1, [r2, #0]
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	6892      	ldr	r2, [r2, #8]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	605a      	str	r2, [r3, #4]
               ,
               ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );

    MODIFY_REG(ADCx->CR2,
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	431a      	orrs	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	609a      	str	r2, [r3, #8]
 8005c18:	e001      	b.n	8005c1e <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8005c32:	2300      	movs	r3, #0
 8005c34:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7ff ff6f 	bl	8005b1a <LL_ADC_IsEnabled>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d12b      	bne.n	8005c9a <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d009      	beq.n	8005c5e <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	431a      	orrs	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	605a      	str	r2, [r3, #4]
 8005c5c:	e005      	b.n	8005c6a <LL_ADC_REG_Init+0x42>
                 ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	605a      	str	r2, [r3, #4]
                 ,
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	689a      	ldr	r2, [r3, #8]
 8005c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ca8 <LL_ADC_REG_Init+0x80>)
 8005c70:	4013      	ands	r3, r2
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	6812      	ldr	r2, [r2, #0]
 8005c76:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	68d2      	ldr	r2, [r2, #12]
 8005c7e:	4311      	orrs	r1, r2
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	6912      	ldr	r2, [r2, #16]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	431a      	orrs	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	4619      	mov	r1, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff ff2e 	bl	8005af4 <LL_ADC_REG_SetSequencerLength>
 8005c98:	e001      	b.n	8005c9e <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	c0fffcfd 	.word	0xc0fffcfd

08005cac <LL_GPIO_SetPinMode>:
{
 8005cac:	b480      	push	{r7}
 8005cae:	b08b      	sub	sp, #44	@ 0x2c
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	fa93 f3a3 	rbit	r3, r3
 8005cc6:	613b      	str	r3, [r7, #16]
  return result;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8005cd2:	2320      	movs	r3, #32
 8005cd4:	e003      	b.n	8005cde <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	fab3 f383 	clz	r3, r3
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	2103      	movs	r1, #3
 8005ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce6:	43db      	mvns	r3, r3
 8005ce8:	401a      	ands	r2, r3
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	fa93 f3a3 	rbit	r3, r3
 8005cf4:	61fb      	str	r3, [r7, #28]
  return result;
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005d00:	2320      	movs	r3, #32
 8005d02:	e003      	b.n	8005d0c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d06:	fab3 f383 	clz	r3, r3
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	fa01 f303 	lsl.w	r3, r1, r3
 8005d14:	431a      	orrs	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	601a      	str	r2, [r3, #0]
}
 8005d1a:	bf00      	nop
 8005d1c:	372c      	adds	r7, #44	@ 0x2c
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <LL_GPIO_SetPinOutputType>:
{
 8005d26:	b480      	push	{r7}
 8005d28:	b085      	sub	sp, #20
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	60f8      	str	r0, [r7, #12]
 8005d2e:	60b9      	str	r1, [r7, #8]
 8005d30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	43db      	mvns	r3, r3
 8005d3a:	401a      	ands	r2, r3
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	6879      	ldr	r1, [r7, #4]
 8005d40:	fb01 f303 	mul.w	r3, r1, r3
 8005d44:	431a      	orrs	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	605a      	str	r2, [r3, #4]
}
 8005d4a:	bf00      	nop
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <LL_GPIO_SetPinSpeed>:
{
 8005d56:	b480      	push	{r7}
 8005d58:	b08b      	sub	sp, #44	@ 0x2c
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	60f8      	str	r0, [r7, #12]
 8005d5e:	60b9      	str	r1, [r7, #8]
 8005d60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	fa93 f3a3 	rbit	r3, r3
 8005d70:	613b      	str	r3, [r7, #16]
  return result;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005d7c:	2320      	movs	r3, #32
 8005d7e:	e003      	b.n	8005d88 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	fab3 f383 	clz	r3, r3
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	2103      	movs	r1, #3
 8005d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d90:	43db      	mvns	r3, r3
 8005d92:	401a      	ands	r2, r3
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	fa93 f3a3 	rbit	r3, r3
 8005d9e:	61fb      	str	r3, [r7, #28]
  return result;
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005daa:	2320      	movs	r3, #32
 8005dac:	e003      	b.n	8005db6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db0:	fab3 f383 	clz	r3, r3
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	6879      	ldr	r1, [r7, #4]
 8005dba:	fa01 f303 	lsl.w	r3, r1, r3
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	609a      	str	r2, [r3, #8]
}
 8005dc4:	bf00      	nop
 8005dc6:	372c      	adds	r7, #44	@ 0x2c
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <LL_GPIO_SetPinPull>:
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b08b      	sub	sp, #44	@ 0x2c
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	fa93 f3a3 	rbit	r3, r3
 8005dea:	613b      	str	r3, [r7, #16]
  return result;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005df6:	2320      	movs	r3, #32
 8005df8:	e003      	b.n	8005e02 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	fab3 f383 	clz	r3, r3
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	2103      	movs	r1, #3
 8005e06:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0a:	43db      	mvns	r3, r3
 8005e0c:	401a      	ands	r2, r3
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	fa93 f3a3 	rbit	r3, r3
 8005e18:	61fb      	str	r3, [r7, #28]
  return result;
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005e24:	2320      	movs	r3, #32
 8005e26:	e003      	b.n	8005e30 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2a:	fab3 f383 	clz	r3, r3
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	6879      	ldr	r1, [r7, #4]
 8005e34:	fa01 f303 	lsl.w	r3, r1, r3
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	60da      	str	r2, [r3, #12]
}
 8005e3e:	bf00      	nop
 8005e40:	372c      	adds	r7, #44	@ 0x2c
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <LL_GPIO_SetAFPin_0_7>:
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b08b      	sub	sp, #44	@ 0x2c
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	60f8      	str	r0, [r7, #12]
 8005e52:	60b9      	str	r1, [r7, #8]
 8005e54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a1a      	ldr	r2, [r3, #32]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	fa93 f3a3 	rbit	r3, r3
 8005e64:	613b      	str	r3, [r7, #16]
  return result;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005e70:	2320      	movs	r3, #32
 8005e72:	e003      	b.n	8005e7c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	fab3 f383 	clz	r3, r3
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	210f      	movs	r1, #15
 8005e80:	fa01 f303 	lsl.w	r3, r1, r3
 8005e84:	43db      	mvns	r3, r3
 8005e86:	401a      	ands	r2, r3
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	fa93 f3a3 	rbit	r3, r3
 8005e92:	61fb      	str	r3, [r7, #28]
  return result;
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005e9e:	2320      	movs	r3, #32
 8005ea0:	e003      	b.n	8005eaa <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea4:	fab3 f383 	clz	r3, r3
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	6879      	ldr	r1, [r7, #4]
 8005eae:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	621a      	str	r2, [r3, #32]
}
 8005eb8:	bf00      	nop
 8005eba:	372c      	adds	r7, #44	@ 0x2c
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <LL_GPIO_SetAFPin_8_15>:
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b08b      	sub	sp, #44	@ 0x2c
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	0a1b      	lsrs	r3, r3, #8
 8005ed8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	fa93 f3a3 	rbit	r3, r3
 8005ee0:	613b      	str	r3, [r7, #16]
  return result;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005eec:	2320      	movs	r3, #32
 8005eee:	e003      	b.n	8005ef8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	fab3 f383 	clz	r3, r3
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	210f      	movs	r1, #15
 8005efc:	fa01 f303 	lsl.w	r3, r1, r3
 8005f00:	43db      	mvns	r3, r3
 8005f02:	401a      	ands	r2, r3
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	0a1b      	lsrs	r3, r3, #8
 8005f08:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	fa93 f3a3 	rbit	r3, r3
 8005f10:	61fb      	str	r3, [r7, #28]
  return result;
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005f1c:	2320      	movs	r3, #32
 8005f1e:	e003      	b.n	8005f28 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f22:	fab3 f383 	clz	r3, r3
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f30:	431a      	orrs	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8005f36:	bf00      	nop
 8005f38:	372c      	adds	r7, #44	@ 0x2c
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b08a      	sub	sp, #40	@ 0x28
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	fa93 f3a3 	rbit	r3, r3
 8005f60:	617b      	str	r3, [r7, #20]
  return result;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <LL_GPIO_Init+0x2e>
    return 32U;
 8005f6c:	2320      	movs	r3, #32
 8005f6e:	e003      	b.n	8005f78 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	fab3 f383 	clz	r3, r3
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005f7a:	e057      	b.n	800602c <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	2101      	movs	r1, #1
 8005f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f84:	fa01 f303 	lsl.w	r3, r1, r3
 8005f88:	4013      	ands	r3, r2
 8005f8a:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d049      	beq.n	8006026 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d003      	beq.n	8005fa2 <LL_GPIO_Init+0x60>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d10d      	bne.n	8005fbe <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	6a39      	ldr	r1, [r7, #32]
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7ff fed3 	bl	8005d56 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	6a39      	ldr	r1, [r7, #32]
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7ff feb4 	bl	8005d26 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	6a39      	ldr	r1, [r7, #32]
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff ff02 	bl	8005dd0 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d121      	bne.n	8006018 <LL_GPIO_Init+0xd6>
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	fa93 f3a3 	rbit	r3, r3
 8005fde:	60bb      	str	r3, [r7, #8]
  return result;
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <LL_GPIO_Init+0xac>
    return 32U;
 8005fea:	2320      	movs	r3, #32
 8005fec:	e003      	b.n	8005ff6 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	fab3 f383 	clz	r3, r3
 8005ff4:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005ff6:	2b07      	cmp	r3, #7
 8005ff8:	d807      	bhi.n	800600a <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	461a      	mov	r2, r3
 8006000:	6a39      	ldr	r1, [r7, #32]
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7ff ff21 	bl	8005e4a <LL_GPIO_SetAFPin_0_7>
 8006008:	e006      	b.n	8006018 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	461a      	mov	r2, r3
 8006010:	6a39      	ldr	r1, [r7, #32]
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff ff56 	bl	8005ec4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	461a      	mov	r2, r3
 800601e:	6a39      	ldr	r1, [r7, #32]
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7ff fe43 	bl	8005cac <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006028:	3301      	adds	r3, #1
 800602a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006032:	fa22 f303 	lsr.w	r3, r2, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1a0      	bne.n	8005f7c <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3728      	adds	r7, #40	@ 0x28
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006048:	4b04      	ldr	r3, [pc, #16]	@ (800605c <LL_RCC_GetSysClkSource+0x18>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f003 030c 	and.w	r3, r3, #12
}
 8006050:	4618      	mov	r0, r3
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	40023800 	.word	0x40023800

08006060 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006060:	b480      	push	{r7}
 8006062:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006064:	4b04      	ldr	r3, [pc, #16]	@ (8006078 <LL_RCC_GetAHBPrescaler+0x18>)
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800606c:	4618      	mov	r0, r3
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	40023800 	.word	0x40023800

0800607c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800607c:	b480      	push	{r7}
 800607e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006080:	4b04      	ldr	r3, [pc, #16]	@ (8006094 <LL_RCC_GetAPB1Prescaler+0x18>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8006088:	4618      	mov	r0, r3
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	40023800 	.word	0x40023800

08006098 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800609c:	4b04      	ldr	r3, [pc, #16]	@ (80060b0 <LL_RCC_GetAPB2Prescaler+0x18>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40023800 	.word	0x40023800

080060b4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80060b4:	b480      	push	{r7}
 80060b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80060b8:	4b04      	ldr	r3, [pc, #16]	@ (80060cc <LL_RCC_PLL_GetMainSource+0x18>)
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40023800 	.word	0x40023800

080060d0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80060d4:	4b04      	ldr	r3, [pc, #16]	@ (80060e8 <LL_RCC_PLL_GetN+0x18>)
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	099b      	lsrs	r3, r3, #6
 80060da:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80060de:	4618      	mov	r0, r3
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	40023800 	.word	0x40023800

080060ec <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80060f0:	4b04      	ldr	r3, [pc, #16]	@ (8006104 <LL_RCC_PLL_GetP+0x18>)
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	40023800 	.word	0x40023800

08006108 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800610c:	4b04      	ldr	r3, [pc, #16]	@ (8006120 <LL_RCC_PLL_GetDivider+0x18>)
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8006114:	4618      	mov	r0, r3
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	40023800 	.word	0x40023800

08006124 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800612c:	f000 f820 	bl	8006170 <RCC_GetSystemClockFreq>
 8006130:	4602      	mov	r2, r0
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4618      	mov	r0, r3
 800613c:	f000 f83e 	bl	80061bc <RCC_GetHCLKClockFreq>
 8006140:	4602      	mov	r2, r0
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	4618      	mov	r0, r3
 800614c:	f000 f84c 	bl	80061e8 <RCC_GetPCLK1ClockFreq>
 8006150:	4602      	mov	r2, r0
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	4618      	mov	r0, r3
 800615c:	f000 f858 	bl	8006210 <RCC_GetPCLK2ClockFreq>
 8006160:	4602      	mov	r2, r0
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	60da      	str	r2, [r3, #12]
}
 8006166:	bf00      	nop
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
	...

08006170 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800617a:	f7ff ff63 	bl	8006044 <LL_RCC_GetSysClkSource>
 800617e:	4603      	mov	r3, r0
 8006180:	2b08      	cmp	r3, #8
 8006182:	d00c      	beq.n	800619e <RCC_GetSystemClockFreq+0x2e>
 8006184:	2b08      	cmp	r3, #8
 8006186:	d80f      	bhi.n	80061a8 <RCC_GetSystemClockFreq+0x38>
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <RCC_GetSystemClockFreq+0x22>
 800618c:	2b04      	cmp	r3, #4
 800618e:	d003      	beq.n	8006198 <RCC_GetSystemClockFreq+0x28>
 8006190:	e00a      	b.n	80061a8 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8006192:	4b09      	ldr	r3, [pc, #36]	@ (80061b8 <RCC_GetSystemClockFreq+0x48>)
 8006194:	607b      	str	r3, [r7, #4]
      break;
 8006196:	e00a      	b.n	80061ae <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006198:	4b07      	ldr	r3, [pc, #28]	@ (80061b8 <RCC_GetSystemClockFreq+0x48>)
 800619a:	607b      	str	r3, [r7, #4]
      break;
 800619c:	e007      	b.n	80061ae <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800619e:	2008      	movs	r0, #8
 80061a0:	f000 f84a 	bl	8006238 <RCC_PLL_GetFreqDomain_SYS>
 80061a4:	6078      	str	r0, [r7, #4]
      break;
 80061a6:	e002      	b.n	80061ae <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80061a8:	4b03      	ldr	r3, [pc, #12]	@ (80061b8 <RCC_GetSystemClockFreq+0x48>)
 80061aa:	607b      	str	r3, [r7, #4]
      break;
 80061ac:	bf00      	nop
  }

  return frequency;
 80061ae:	687b      	ldr	r3, [r7, #4]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	00f42400 	.word	0x00f42400

080061bc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80061c4:	f7ff ff4c 	bl	8006060 <LL_RCC_GetAHBPrescaler>
 80061c8:	4603      	mov	r3, r0
 80061ca:	091b      	lsrs	r3, r3, #4
 80061cc:	f003 030f 	and.w	r3, r3, #15
 80061d0:	4a04      	ldr	r2, [pc, #16]	@ (80061e4 <RCC_GetHCLKClockFreq+0x28>)
 80061d2:	5cd3      	ldrb	r3, [r2, r3]
 80061d4:	461a      	mov	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	40d3      	lsrs	r3, r2
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	0800d9a8 	.word	0x0800d9a8

080061e8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80061f0:	f7ff ff44 	bl	800607c <LL_RCC_GetAPB1Prescaler>
 80061f4:	4603      	mov	r3, r0
 80061f6:	0a9b      	lsrs	r3, r3, #10
 80061f8:	4a04      	ldr	r2, [pc, #16]	@ (800620c <RCC_GetPCLK1ClockFreq+0x24>)
 80061fa:	5cd3      	ldrb	r3, [r2, r3]
 80061fc:	461a      	mov	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	40d3      	lsrs	r3, r2
}
 8006202:	4618      	mov	r0, r3
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	0800d9b8 	.word	0x0800d9b8

08006210 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006218:	f7ff ff3e 	bl	8006098 <LL_RCC_GetAPB2Prescaler>
 800621c:	4603      	mov	r3, r0
 800621e:	0b5b      	lsrs	r3, r3, #13
 8006220:	4a04      	ldr	r2, [pc, #16]	@ (8006234 <RCC_GetPCLK2ClockFreq+0x24>)
 8006222:	5cd3      	ldrb	r3, [r2, r3]
 8006224:	461a      	mov	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	40d3      	lsrs	r3, r2
}
 800622a:	4618      	mov	r0, r3
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	0800d9b8 	.word	0x0800d9b8

08006238 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8006238:	b590      	push	{r4, r7, lr}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8006240:	2300      	movs	r3, #0
 8006242:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800624c:	f7ff ff32 	bl	80060b4 <LL_RCC_PLL_GetMainSource>
 8006250:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d004      	beq.n	8006262 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800625e:	d003      	beq.n	8006268 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8006260:	e005      	b.n	800626e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006262:	4b12      	ldr	r3, [pc, #72]	@ (80062ac <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006264:	617b      	str	r3, [r7, #20]
      break;
 8006266:	e005      	b.n	8006274 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8006268:	4b10      	ldr	r3, [pc, #64]	@ (80062ac <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800626a:	617b      	str	r3, [r7, #20]
      break;
 800626c:	e002      	b.n	8006274 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800626e:	4b0f      	ldr	r3, [pc, #60]	@ (80062ac <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006270:	617b      	str	r3, [r7, #20]
      break;
 8006272:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b08      	cmp	r3, #8
 8006278:	d113      	bne.n	80062a2 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800627a:	f7ff ff45 	bl	8006108 <LL_RCC_PLL_GetDivider>
 800627e:	4602      	mov	r2, r0
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	fbb3 f4f2 	udiv	r4, r3, r2
 8006286:	f7ff ff23 	bl	80060d0 <LL_RCC_PLL_GetN>
 800628a:	4603      	mov	r3, r0
 800628c:	fb03 f404 	mul.w	r4, r3, r4
 8006290:	f7ff ff2c 	bl	80060ec <LL_RCC_PLL_GetP>
 8006294:	4603      	mov	r3, r0
 8006296:	0c1b      	lsrs	r3, r3, #16
 8006298:	3301      	adds	r3, #1
 800629a:	005b      	lsls	r3, r3, #1
 800629c:	fbb4 f3f3 	udiv	r3, r4, r3
 80062a0:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80062a2:	693b      	ldr	r3, [r7, #16]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	371c      	adds	r7, #28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd90      	pop	{r4, r7, pc}
 80062ac:	00f42400 	.word	0x00f42400

080062b0 <LL_SPI_IsEnabled>:
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c0:	2b40      	cmp	r3, #64	@ 0x40
 80062c2:	d101      	bne.n	80062c8 <LL_SPI_IsEnabled+0x18>
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <LL_SPI_IsEnabled+0x1a>
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <LL_SPI_SetCRCPolynomial>:
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	461a      	mov	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	611a      	str	r2, [r3, #16]
}
 80062ea:	bf00      	nop
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7ff ffd3 	bl	80062b0 <LL_SPI_IsEnabled>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d139      	bne.n	8006384 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006318:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	6811      	ldr	r1, [r2, #0]
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	6852      	ldr	r2, [r2, #4]
 8006324:	4311      	orrs	r1, r2
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	6892      	ldr	r2, [r2, #8]
 800632a:	4311      	orrs	r1, r2
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	68d2      	ldr	r2, [r2, #12]
 8006330:	4311      	orrs	r1, r2
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	6912      	ldr	r2, [r2, #16]
 8006336:	4311      	orrs	r1, r2
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	6952      	ldr	r2, [r2, #20]
 800633c:	4311      	orrs	r1, r2
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	6992      	ldr	r2, [r2, #24]
 8006342:	4311      	orrs	r1, r2
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	69d2      	ldr	r2, [r2, #28]
 8006348:	4311      	orrs	r1, r2
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	6a12      	ldr	r2, [r2, #32]
 800634e:	430a      	orrs	r2, r1
 8006350:	431a      	orrs	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f023 0204 	bic.w	r2, r3, #4
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	0c1b      	lsrs	r3, r3, #16
 8006364:	431a      	orrs	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006372:	d105      	bne.n	8006380 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006378:	4619      	mov	r1, r3
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7ff ffab 	bl	80062d6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8006380:	2300      	movs	r3, #0
 8006382:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	61da      	str	r2, [r3, #28]
  return status;
 8006390:	7bfb      	ldrb	r3, [r7, #15]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <LL_TIM_SetPrescaler>:
{
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80063aa:	bf00      	nop
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <LL_TIM_SetAutoReload>:
{
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <LL_TIM_SetRepetitionCounter>:
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80063e2:	bf00      	nop
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <LL_TIM_OC_SetCompareCH1>:
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80063fe:	bf00      	nop
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <LL_TIM_OC_SetCompareCH2>:
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <LL_TIM_OC_SetCompareCH3>:
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
 800642e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <LL_TIM_OC_SetCompareCH4>:
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006452:	bf00      	nop
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	f043 0201 	orr.w	r2, r3, #1
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	615a      	str	r2, [r3, #20]
}
 8006472:	bf00      	nop
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
	...

08006480 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a3d      	ldr	r2, [pc, #244]	@ (8006588 <LL_TIM_Init+0x108>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d013      	beq.n	80064c0 <LL_TIM_Init+0x40>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800649e:	d00f      	beq.n	80064c0 <LL_TIM_Init+0x40>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a3a      	ldr	r2, [pc, #232]	@ (800658c <LL_TIM_Init+0x10c>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00b      	beq.n	80064c0 <LL_TIM_Init+0x40>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a39      	ldr	r2, [pc, #228]	@ (8006590 <LL_TIM_Init+0x110>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d007      	beq.n	80064c0 <LL_TIM_Init+0x40>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a38      	ldr	r2, [pc, #224]	@ (8006594 <LL_TIM_Init+0x114>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d003      	beq.n	80064c0 <LL_TIM_Init+0x40>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a37      	ldr	r2, [pc, #220]	@ (8006598 <LL_TIM_Init+0x118>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d106      	bne.n	80064ce <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006588 <LL_TIM_Init+0x108>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d02b      	beq.n	800652e <LL_TIM_Init+0xae>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064dc:	d027      	beq.n	800652e <LL_TIM_Init+0xae>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a2a      	ldr	r2, [pc, #168]	@ (800658c <LL_TIM_Init+0x10c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d023      	beq.n	800652e <LL_TIM_Init+0xae>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a29      	ldr	r2, [pc, #164]	@ (8006590 <LL_TIM_Init+0x110>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d01f      	beq.n	800652e <LL_TIM_Init+0xae>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a28      	ldr	r2, [pc, #160]	@ (8006594 <LL_TIM_Init+0x114>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d01b      	beq.n	800652e <LL_TIM_Init+0xae>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a27      	ldr	r2, [pc, #156]	@ (8006598 <LL_TIM_Init+0x118>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d017      	beq.n	800652e <LL_TIM_Init+0xae>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a26      	ldr	r2, [pc, #152]	@ (800659c <LL_TIM_Init+0x11c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d013      	beq.n	800652e <LL_TIM_Init+0xae>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a25      	ldr	r2, [pc, #148]	@ (80065a0 <LL_TIM_Init+0x120>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d00f      	beq.n	800652e <LL_TIM_Init+0xae>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a24      	ldr	r2, [pc, #144]	@ (80065a4 <LL_TIM_Init+0x124>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00b      	beq.n	800652e <LL_TIM_Init+0xae>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a23      	ldr	r2, [pc, #140]	@ (80065a8 <LL_TIM_Init+0x128>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d007      	beq.n	800652e <LL_TIM_Init+0xae>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a22      	ldr	r2, [pc, #136]	@ (80065ac <LL_TIM_Init+0x12c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d003      	beq.n	800652e <LL_TIM_Init+0xae>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a21      	ldr	r2, [pc, #132]	@ (80065b0 <LL_TIM_Init+0x130>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d106      	bne.n	800653c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	4313      	orrs	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff ff34 	bl	80063b6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	881b      	ldrh	r3, [r3, #0]
 8006552:	4619      	mov	r1, r3
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7ff ff20 	bl	800639a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a0a      	ldr	r2, [pc, #40]	@ (8006588 <LL_TIM_Init+0x108>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d003      	beq.n	800656a <LL_TIM_Init+0xea>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a0c      	ldr	r2, [pc, #48]	@ (8006598 <LL_TIM_Init+0x118>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d105      	bne.n	8006576 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff ff2e 	bl	80063d2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7ff ff71 	bl	800645e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	40010000 	.word	0x40010000
 800658c:	40000400 	.word	0x40000400
 8006590:	40000800 	.word	0x40000800
 8006594:	40000c00 	.word	0x40000c00
 8006598:	40010400 	.word	0x40010400
 800659c:	40014000 	.word	0x40014000
 80065a0:	40014400 	.word	0x40014400
 80065a4:	40014800 	.word	0x40014800
 80065a8:	40001800 	.word	0x40001800
 80065ac:	40001c00 	.word	0x40001c00
 80065b0:	40002000 	.word	0x40002000

080065b4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ca:	d027      	beq.n	800661c <LL_TIM_OC_Init+0x68>
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065d2:	d82a      	bhi.n	800662a <LL_TIM_OC_Init+0x76>
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065da:	d018      	beq.n	800660e <LL_TIM_OC_Init+0x5a>
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065e2:	d822      	bhi.n	800662a <LL_TIM_OC_Init+0x76>
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d003      	beq.n	80065f2 <LL_TIM_OC_Init+0x3e>
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	2b10      	cmp	r3, #16
 80065ee:	d007      	beq.n	8006600 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80065f0:	e01b      	b.n	800662a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 f81f 	bl	8006638 <OC1Config>
 80065fa:	4603      	mov	r3, r0
 80065fc:	75fb      	strb	r3, [r7, #23]
      break;
 80065fe:	e015      	b.n	800662c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 f884 	bl	8006710 <OC2Config>
 8006608:	4603      	mov	r3, r0
 800660a:	75fb      	strb	r3, [r7, #23]
      break;
 800660c:	e00e      	b.n	800662c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800660e:	6879      	ldr	r1, [r7, #4]
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 f8ed 	bl	80067f0 <OC3Config>
 8006616:	4603      	mov	r3, r0
 8006618:	75fb      	strb	r3, [r7, #23]
      break;
 800661a:	e007      	b.n	800662c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800661c:	6879      	ldr	r1, [r7, #4]
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 f956 	bl	80068d0 <OC4Config>
 8006624:	4603      	mov	r3, r0
 8006626:	75fb      	strb	r3, [r7, #23]
      break;
 8006628:	e000      	b.n	800662c <LL_TIM_OC_Init+0x78>
      break;
 800662a:	bf00      	nop
  }

  return result;
 800662c:	7dfb      	ldrb	r3, [r7, #23]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	f023 0201 	bic.w	r2, r3, #1
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0303 	bic.w	r3, r3, #3
 8006666:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4313      	orrs	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f023 0202 	bic.w	r2, r3, #2
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	4313      	orrs	r3, r2
 8006682:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f023 0201 	bic.w	r2, r3, #1
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a1c      	ldr	r2, [pc, #112]	@ (8006708 <OC1Config+0xd0>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d003      	beq.n	80066a2 <OC1Config+0x6a>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a1b      	ldr	r2, [pc, #108]	@ (800670c <OC1Config+0xd4>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d11e      	bne.n	80066e0 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f023 0208 	bic.w	r2, r3, #8
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4313      	orrs	r3, r2
 80066b0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f023 0204 	bic.w	r2, r3, #4
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4313      	orrs	r3, r2
 80066c0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	4313      	orrs	r3, r2
 80066de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	4619      	mov	r1, r3
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7ff fe7b 	bl	80063ee <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3718      	adds	r7, #24
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	40010000 	.word	0x40010000
 800670c:	40010400 	.word	0x40010400

08006710 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	f023 0210 	bic.w	r2, r3, #16
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800673e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	021b      	lsls	r3, r3, #8
 800674c:	4313      	orrs	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f023 0220 	bic.w	r2, r3, #32
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	011b      	lsls	r3, r3, #4
 800675c:	4313      	orrs	r3, r2
 800675e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f023 0210 	bic.w	r2, r3, #16
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a1d      	ldr	r2, [pc, #116]	@ (80067e8 <OC2Config+0xd8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d003      	beq.n	8006780 <OC2Config+0x70>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a1c      	ldr	r2, [pc, #112]	@ (80067ec <OC2Config+0xdc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d11f      	bne.n	80067c0 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	019b      	lsls	r3, r3, #6
 800678c:	4313      	orrs	r3, r2
 800678e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	019b      	lsls	r3, r3, #6
 800679c:	4313      	orrs	r3, r2
 800679e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4313      	orrs	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	00db      	lsls	r3, r3, #3
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	4619      	mov	r1, r3
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff fe19 	bl	800640a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3718      	adds	r7, #24
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	40010000 	.word	0x40010000
 80067ec:	40010400 	.word	0x40010400

080067f0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 0303 	bic.w	r3, r3, #3
 800681e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4313      	orrs	r3, r2
 800682c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	021b      	lsls	r3, r3, #8
 800683a:	4313      	orrs	r3, r2
 800683c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	021b      	lsls	r3, r3, #8
 800684a:	4313      	orrs	r3, r2
 800684c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a1d      	ldr	r2, [pc, #116]	@ (80068c8 <OC3Config+0xd8>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d003      	beq.n	800685e <OC3Config+0x6e>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a1c      	ldr	r2, [pc, #112]	@ (80068cc <OC3Config+0xdc>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d11f      	bne.n	800689e <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	029b      	lsls	r3, r3, #10
 800686a:	4313      	orrs	r3, r2
 800686c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	029b      	lsls	r3, r3, #10
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	011b      	lsls	r3, r3, #4
 800688a:	4313      	orrs	r3, r2
 800688c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	015b      	lsls	r3, r3, #5
 800689a:	4313      	orrs	r3, r2
 800689c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff fdb8 	bl	8006426 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	40010000 	.word	0x40010000
 80068cc:	40010400 	.word	0x40010400

080068d0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	021b      	lsls	r3, r3, #8
 800690c:	4313      	orrs	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	031b      	lsls	r3, r3, #12
 800691c:	4313      	orrs	r3, r2
 800691e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	031b      	lsls	r3, r3, #12
 800692c:	4313      	orrs	r3, r2
 800692e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a11      	ldr	r2, [pc, #68]	@ (8006978 <OC4Config+0xa8>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d003      	beq.n	8006940 <OC4Config+0x70>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a10      	ldr	r2, [pc, #64]	@ (800697c <OC4Config+0xac>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d107      	bne.n	8006950 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	019b      	lsls	r3, r3, #6
 800694c:	4313      	orrs	r3, r2
 800694e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	4619      	mov	r1, r3
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7ff fd6d 	bl	8006442 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3718      	adds	r7, #24
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	40010000 	.word	0x40010000
 800697c:	40010400 	.word	0x40010400

08006980 <LL_USART_IsEnabled>:
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006990:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006994:	bf0c      	ite	eq
 8006996:	2301      	moveq	r3, #1
 8006998:	2300      	movne	r3, #0
 800699a:	b2db      	uxtb	r3, r3
}
 800699c:	4618      	mov	r0, r3
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <LL_USART_SetStopBitsLength>:
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	431a      	orrs	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	611a      	str	r2, [r3, #16]
}
 80069c2:	bf00      	nop
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <LL_USART_SetHWFlowCtrl>:
{
 80069ce:	b480      	push	{r7}
 80069d0:	b083      	sub	sp, #12
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	615a      	str	r2, [r3, #20]
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <LL_USART_SetBaudRate>:
{
 80069f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069f8:	b0c0      	sub	sp, #256	@ 0x100
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006a00:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8006a04:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8006a08:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a14:	f040 810c 	bne.w	8006c30 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8006a18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a22:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006a26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006a2a:	4622      	mov	r2, r4
 8006a2c:	462b      	mov	r3, r5
 8006a2e:	1891      	adds	r1, r2, r2
 8006a30:	6639      	str	r1, [r7, #96]	@ 0x60
 8006a32:	415b      	adcs	r3, r3
 8006a34:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a36:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	eb12 0801 	adds.w	r8, r2, r1
 8006a40:	4629      	mov	r1, r5
 8006a42:	eb43 0901 	adc.w	r9, r3, r1
 8006a46:	f04f 0200 	mov.w	r2, #0
 8006a4a:	f04f 0300 	mov.w	r3, #0
 8006a4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a5a:	4690      	mov	r8, r2
 8006a5c:	4699      	mov	r9, r3
 8006a5e:	4623      	mov	r3, r4
 8006a60:	eb18 0303 	adds.w	r3, r8, r3
 8006a64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a68:	462b      	mov	r3, r5
 8006a6a:	eb49 0303 	adc.w	r3, r9, r3
 8006a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006a76:	2200      	movs	r2, #0
 8006a78:	469a      	mov	sl, r3
 8006a7a:	4693      	mov	fp, r2
 8006a7c:	eb1a 030a 	adds.w	r3, sl, sl
 8006a80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a82:	eb4b 030b 	adc.w	r3, fp, fp
 8006a86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006a90:	f7fa f8aa 	bl	8000be8 <__aeabi_uldivmod>
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	4b64      	ldr	r3, [pc, #400]	@ (8006c2c <LL_USART_SetBaudRate+0x238>)
 8006a9a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a9e:	095b      	lsrs	r3, r3, #5
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	011b      	lsls	r3, r3, #4
 8006aa4:	b29c      	uxth	r4, r3
 8006aa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ab0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006ab4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8006ab8:	4642      	mov	r2, r8
 8006aba:	464b      	mov	r3, r9
 8006abc:	1891      	adds	r1, r2, r2
 8006abe:	6539      	str	r1, [r7, #80]	@ 0x50
 8006ac0:	415b      	adcs	r3, r3
 8006ac2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ac4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006ac8:	4641      	mov	r1, r8
 8006aca:	1851      	adds	r1, r2, r1
 8006acc:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ace:	4649      	mov	r1, r9
 8006ad0:	414b      	adcs	r3, r1
 8006ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ad4:	f04f 0200 	mov.w	r2, #0
 8006ad8:	f04f 0300 	mov.w	r3, #0
 8006adc:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8006ae0:	4659      	mov	r1, fp
 8006ae2:	00cb      	lsls	r3, r1, #3
 8006ae4:	4651      	mov	r1, sl
 8006ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006aea:	4651      	mov	r1, sl
 8006aec:	00ca      	lsls	r2, r1, #3
 8006aee:	4610      	mov	r0, r2
 8006af0:	4619      	mov	r1, r3
 8006af2:	4603      	mov	r3, r0
 8006af4:	4642      	mov	r2, r8
 8006af6:	189b      	adds	r3, r3, r2
 8006af8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006afc:	464b      	mov	r3, r9
 8006afe:	460a      	mov	r2, r1
 8006b00:	eb42 0303 	adc.w	r3, r2, r3
 8006b04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006b08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b12:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8006b16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	18db      	adds	r3, r3, r3
 8006b1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b20:	4613      	mov	r3, r2
 8006b22:	eb42 0303 	adc.w	r3, r2, r3
 8006b26:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b2c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8006b30:	f7fa f85a 	bl	8000be8 <__aeabi_uldivmod>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	4611      	mov	r1, r2
 8006b3a:	4b3c      	ldr	r3, [pc, #240]	@ (8006c2c <LL_USART_SetBaudRate+0x238>)
 8006b3c:	fba3 2301 	umull	r2, r3, r3, r1
 8006b40:	095b      	lsrs	r3, r3, #5
 8006b42:	2264      	movs	r2, #100	@ 0x64
 8006b44:	fb02 f303 	mul.w	r3, r2, r3
 8006b48:	1acb      	subs	r3, r1, r3
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006b50:	4b36      	ldr	r3, [pc, #216]	@ (8006c2c <LL_USART_SetBaudRate+0x238>)
 8006b52:	fba3 2302 	umull	r2, r3, r3, r2
 8006b56:	095b      	lsrs	r3, r3, #5
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	4423      	add	r3, r4
 8006b66:	b29c      	uxth	r4, r3
 8006b68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b72:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006b76:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8006b7a:	4642      	mov	r2, r8
 8006b7c:	464b      	mov	r3, r9
 8006b7e:	1891      	adds	r1, r2, r2
 8006b80:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006b82:	415b      	adcs	r3, r3
 8006b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b86:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006b8a:	4641      	mov	r1, r8
 8006b8c:	1851      	adds	r1, r2, r1
 8006b8e:	6339      	str	r1, [r7, #48]	@ 0x30
 8006b90:	4649      	mov	r1, r9
 8006b92:	414b      	adcs	r3, r1
 8006b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b96:	f04f 0200 	mov.w	r2, #0
 8006b9a:	f04f 0300 	mov.w	r3, #0
 8006b9e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006ba2:	4659      	mov	r1, fp
 8006ba4:	00cb      	lsls	r3, r1, #3
 8006ba6:	4651      	mov	r1, sl
 8006ba8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bac:	4651      	mov	r1, sl
 8006bae:	00ca      	lsls	r2, r1, #3
 8006bb0:	4610      	mov	r0, r2
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	4642      	mov	r2, r8
 8006bb8:	189b      	adds	r3, r3, r2
 8006bba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bbe:	464b      	mov	r3, r9
 8006bc0:	460a      	mov	r2, r1
 8006bc2:	eb42 0303 	adc.w	r3, r2, r3
 8006bc6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006bca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006bd4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8006bd8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	18db      	adds	r3, r3, r3
 8006be0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006be2:	4613      	mov	r3, r2
 8006be4:	eb42 0303 	adc.w	r3, r2, r3
 8006be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006bee:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8006bf2:	f7f9 fff9 	bl	8000be8 <__aeabi_uldivmod>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8006c2c <LL_USART_SetBaudRate+0x238>)
 8006bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8006c00:	095b      	lsrs	r3, r3, #5
 8006c02:	2164      	movs	r1, #100	@ 0x64
 8006c04:	fb01 f303 	mul.w	r3, r1, r3
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	00db      	lsls	r3, r3, #3
 8006c0c:	3332      	adds	r3, #50	@ 0x32
 8006c0e:	4a07      	ldr	r2, [pc, #28]	@ (8006c2c <LL_USART_SetBaudRate+0x238>)
 8006c10:	fba2 2303 	umull	r2, r3, r2, r3
 8006c14:	095b      	lsrs	r3, r3, #5
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	f003 0307 	and.w	r3, r3, #7
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	4423      	add	r3, r4
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	461a      	mov	r2, r3
 8006c24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c28:	609a      	str	r2, [r3, #8]
}
 8006c2a:	e108      	b.n	8006e3e <LL_USART_SetBaudRate+0x44a>
 8006c2c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006c30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c34:	2200      	movs	r2, #0
 8006c36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c3a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006c3e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8006c42:	4642      	mov	r2, r8
 8006c44:	464b      	mov	r3, r9
 8006c46:	1891      	adds	r1, r2, r2
 8006c48:	6239      	str	r1, [r7, #32]
 8006c4a:	415b      	adcs	r3, r3
 8006c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c52:	4641      	mov	r1, r8
 8006c54:	1854      	adds	r4, r2, r1
 8006c56:	4649      	mov	r1, r9
 8006c58:	eb43 0501 	adc.w	r5, r3, r1
 8006c5c:	f04f 0200 	mov.w	r2, #0
 8006c60:	f04f 0300 	mov.w	r3, #0
 8006c64:	00eb      	lsls	r3, r5, #3
 8006c66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c6a:	00e2      	lsls	r2, r4, #3
 8006c6c:	4614      	mov	r4, r2
 8006c6e:	461d      	mov	r5, r3
 8006c70:	4643      	mov	r3, r8
 8006c72:	18e3      	adds	r3, r4, r3
 8006c74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c78:	464b      	mov	r3, r9
 8006c7a:	eb45 0303 	adc.w	r3, r5, r3
 8006c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006c86:	2200      	movs	r2, #0
 8006c88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c8c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006c90:	f04f 0200 	mov.w	r2, #0
 8006c94:	f04f 0300 	mov.w	r3, #0
 8006c98:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	008b      	lsls	r3, r1, #2
 8006ca0:	4621      	mov	r1, r4
 8006ca2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	008a      	lsls	r2, r1, #2
 8006caa:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8006cae:	f7f9 ff9b 	bl	8000be8 <__aeabi_uldivmod>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4b65      	ldr	r3, [pc, #404]	@ (8006e4c <LL_USART_SetBaudRate+0x458>)
 8006cb8:	fba3 2302 	umull	r2, r3, r3, r2
 8006cbc:	095b      	lsrs	r3, r3, #5
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	011b      	lsls	r3, r3, #4
 8006cc2:	b29c      	uxth	r4, r3
 8006cc4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006cce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006cd2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8006cd6:	4642      	mov	r2, r8
 8006cd8:	464b      	mov	r3, r9
 8006cda:	1891      	adds	r1, r2, r2
 8006cdc:	61b9      	str	r1, [r7, #24]
 8006cde:	415b      	adcs	r3, r3
 8006ce0:	61fb      	str	r3, [r7, #28]
 8006ce2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ce6:	4641      	mov	r1, r8
 8006ce8:	1851      	adds	r1, r2, r1
 8006cea:	6139      	str	r1, [r7, #16]
 8006cec:	4649      	mov	r1, r9
 8006cee:	414b      	adcs	r3, r1
 8006cf0:	617b      	str	r3, [r7, #20]
 8006cf2:	f04f 0200 	mov.w	r2, #0
 8006cf6:	f04f 0300 	mov.w	r3, #0
 8006cfa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cfe:	4659      	mov	r1, fp
 8006d00:	00cb      	lsls	r3, r1, #3
 8006d02:	4651      	mov	r1, sl
 8006d04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d08:	4651      	mov	r1, sl
 8006d0a:	00ca      	lsls	r2, r1, #3
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	4619      	mov	r1, r3
 8006d10:	4603      	mov	r3, r0
 8006d12:	4642      	mov	r2, r8
 8006d14:	189b      	adds	r3, r3, r2
 8006d16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d1a:	464b      	mov	r3, r9
 8006d1c:	460a      	mov	r2, r1
 8006d1e:	eb42 0303 	adc.w	r3, r2, r3
 8006d22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006d26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d30:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006d34:	f04f 0200 	mov.w	r2, #0
 8006d38:	f04f 0300 	mov.w	r3, #0
 8006d3c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8006d40:	4649      	mov	r1, r9
 8006d42:	008b      	lsls	r3, r1, #2
 8006d44:	4641      	mov	r1, r8
 8006d46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d4a:	4641      	mov	r1, r8
 8006d4c:	008a      	lsls	r2, r1, #2
 8006d4e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8006d52:	f7f9 ff49 	bl	8000be8 <__aeabi_uldivmod>
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	4611      	mov	r1, r2
 8006d5c:	4b3b      	ldr	r3, [pc, #236]	@ (8006e4c <LL_USART_SetBaudRate+0x458>)
 8006d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8006d62:	095b      	lsrs	r3, r3, #5
 8006d64:	2264      	movs	r2, #100	@ 0x64
 8006d66:	fb02 f303 	mul.w	r3, r2, r3
 8006d6a:	1acb      	subs	r3, r1, r3
 8006d6c:	011b      	lsls	r3, r3, #4
 8006d6e:	3332      	adds	r3, #50	@ 0x32
 8006d70:	4a36      	ldr	r2, [pc, #216]	@ (8006e4c <LL_USART_SetBaudRate+0x458>)
 8006d72:	fba2 2303 	umull	r2, r3, r2, r3
 8006d76:	095b      	lsrs	r3, r3, #5
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	4423      	add	r3, r4
 8006d82:	b29c      	uxth	r4, r3
 8006d84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d88:	2200      	movs	r2, #0
 8006d8a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d8c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006d8e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006d92:	4642      	mov	r2, r8
 8006d94:	464b      	mov	r3, r9
 8006d96:	1891      	adds	r1, r2, r2
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	415b      	adcs	r3, r3
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006da2:	4641      	mov	r1, r8
 8006da4:	1851      	adds	r1, r2, r1
 8006da6:	6039      	str	r1, [r7, #0]
 8006da8:	4649      	mov	r1, r9
 8006daa:	414b      	adcs	r3, r1
 8006dac:	607b      	str	r3, [r7, #4]
 8006dae:	f04f 0200 	mov.w	r2, #0
 8006db2:	f04f 0300 	mov.w	r3, #0
 8006db6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006dba:	4659      	mov	r1, fp
 8006dbc:	00cb      	lsls	r3, r1, #3
 8006dbe:	4651      	mov	r1, sl
 8006dc0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dc4:	4651      	mov	r1, sl
 8006dc6:	00ca      	lsls	r2, r1, #3
 8006dc8:	4610      	mov	r0, r2
 8006dca:	4619      	mov	r1, r3
 8006dcc:	4603      	mov	r3, r0
 8006dce:	4642      	mov	r2, r8
 8006dd0:	189b      	adds	r3, r3, r2
 8006dd2:	673b      	str	r3, [r7, #112]	@ 0x70
 8006dd4:	464b      	mov	r3, r9
 8006dd6:	460a      	mov	r2, r1
 8006dd8:	eb42 0303 	adc.w	r3, r2, r3
 8006ddc:	677b      	str	r3, [r7, #116]	@ 0x74
 8006dde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006de2:	2200      	movs	r2, #0
 8006de4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006de6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006de8:	f04f 0200 	mov.w	r2, #0
 8006dec:	f04f 0300 	mov.w	r3, #0
 8006df0:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8006df4:	4649      	mov	r1, r9
 8006df6:	008b      	lsls	r3, r1, #2
 8006df8:	4641      	mov	r1, r8
 8006dfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dfe:	4641      	mov	r1, r8
 8006e00:	008a      	lsls	r2, r1, #2
 8006e02:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8006e06:	f7f9 feef 	bl	8000be8 <__aeabi_uldivmod>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8006e4c <LL_USART_SetBaudRate+0x458>)
 8006e10:	fba3 1302 	umull	r1, r3, r3, r2
 8006e14:	095b      	lsrs	r3, r3, #5
 8006e16:	2164      	movs	r1, #100	@ 0x64
 8006e18:	fb01 f303 	mul.w	r3, r1, r3
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	011b      	lsls	r3, r3, #4
 8006e20:	3332      	adds	r3, #50	@ 0x32
 8006e22:	4a0a      	ldr	r2, [pc, #40]	@ (8006e4c <LL_USART_SetBaudRate+0x458>)
 8006e24:	fba2 2303 	umull	r2, r3, r2, r3
 8006e28:	095b      	lsrs	r3, r3, #5
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	f003 030f 	and.w	r3, r3, #15
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	4423      	add	r3, r4
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	461a      	mov	r2, r3
 8006e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e3c:	609a      	str	r2, [r3, #8]
}
 8006e3e:	bf00      	nop
 8006e40:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006e44:	46bd      	mov	sp, r7
 8006e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e4a:	bf00      	nop
 8006e4c:	51eb851f 	.word	0x51eb851f

08006e50 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7ff fd8c 	bl	8006980 <LL_USART_IsEnabled>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d15e      	bne.n	8006f2c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8006e76:	f023 030c 	bic.w	r3, r3, #12
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	6851      	ldr	r1, [r2, #4]
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	68d2      	ldr	r2, [r2, #12]
 8006e82:	4311      	orrs	r1, r2
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	6912      	ldr	r2, [r2, #16]
 8006e88:	4311      	orrs	r1, r2
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	6992      	ldr	r2, [r2, #24]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	431a      	orrs	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7ff fd83 	bl	80069a8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff fd90 	bl	80069ce <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8006eae:	f107 0308 	add.w	r3, r7, #8
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7ff f936 	bl	8006124 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a1f      	ldr	r2, [pc, #124]	@ (8006f38 <LL_USART_Init+0xe8>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d102      	bne.n	8006ec6 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	61bb      	str	r3, [r7, #24]
 8006ec4:	e021      	b.n	8006f0a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a1c      	ldr	r2, [pc, #112]	@ (8006f3c <LL_USART_Init+0xec>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d102      	bne.n	8006ed4 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	61bb      	str	r3, [r7, #24]
 8006ed2:	e01a      	b.n	8006f0a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a1a      	ldr	r2, [pc, #104]	@ (8006f40 <LL_USART_Init+0xf0>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d102      	bne.n	8006ee2 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	61bb      	str	r3, [r7, #24]
 8006ee0:	e013      	b.n	8006f0a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a17      	ldr	r2, [pc, #92]	@ (8006f44 <LL_USART_Init+0xf4>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d102      	bne.n	8006ef0 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	61bb      	str	r3, [r7, #24]
 8006eee:	e00c      	b.n	8006f0a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a15      	ldr	r2, [pc, #84]	@ (8006f48 <LL_USART_Init+0xf8>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d102      	bne.n	8006efe <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	61bb      	str	r3, [r7, #24]
 8006efc:	e005      	b.n	8006f0a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a12      	ldr	r2, [pc, #72]	@ (8006f4c <LL_USART_Init+0xfc>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d101      	bne.n	8006f0a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00d      	beq.n	8006f2c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d009      	beq.n	8006f2c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8006f24:	69b9      	ldr	r1, [r7, #24]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7ff fd64 	bl	80069f4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8006f2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3720      	adds	r7, #32
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	40011000 	.word	0x40011000
 8006f3c:	40004400 	.word	0x40004400
 8006f40:	40004800 	.word	0x40004800
 8006f44:	40011400 	.word	0x40011400
 8006f48:	40004c00 	.word	0x40004c00
 8006f4c:	40005000 	.word	0x40005000

08006f50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f50:	b084      	sub	sp, #16
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b084      	sub	sp, #16
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	f107 001c 	add.w	r0, r7, #28
 8006f5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f62:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d123      	bne.n	8006fb2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006f7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f92:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d105      	bne.n	8006fa6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f001 fae8 	bl	800857c <USB_CoreReset>
 8006fac:	4603      	mov	r3, r0
 8006fae:	73fb      	strb	r3, [r7, #15]
 8006fb0:	e01b      	b.n	8006fea <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f001 fadc 	bl	800857c <USB_CoreReset>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006fc8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d106      	bne.n	8006fde <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	639a      	str	r2, [r3, #56]	@ 0x38
 8006fdc:	e005      	b.n	8006fea <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006fea:	7fbb      	ldrb	r3, [r7, #30]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d10b      	bne.n	8007008 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f043 0206 	orr.w	r2, r3, #6
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f043 0220 	orr.w	r2, r3, #32
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007008:	7bfb      	ldrb	r3, [r7, #15]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007014:	b004      	add	sp, #16
 8007016:	4770      	bx	lr

08007018 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	4613      	mov	r3, r2
 8007024:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007026:	79fb      	ldrb	r3, [r7, #7]
 8007028:	2b02      	cmp	r3, #2
 800702a:	d165      	bne.n	80070f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	4a41      	ldr	r2, [pc, #260]	@ (8007134 <USB_SetTurnaroundTime+0x11c>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d906      	bls.n	8007042 <USB_SetTurnaroundTime+0x2a>
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	4a40      	ldr	r2, [pc, #256]	@ (8007138 <USB_SetTurnaroundTime+0x120>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d202      	bcs.n	8007042 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800703c:	230f      	movs	r3, #15
 800703e:	617b      	str	r3, [r7, #20]
 8007040:	e062      	b.n	8007108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	4a3c      	ldr	r2, [pc, #240]	@ (8007138 <USB_SetTurnaroundTime+0x120>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d306      	bcc.n	8007058 <USB_SetTurnaroundTime+0x40>
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	4a3b      	ldr	r2, [pc, #236]	@ (800713c <USB_SetTurnaroundTime+0x124>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d202      	bcs.n	8007058 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007052:	230e      	movs	r3, #14
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	e057      	b.n	8007108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	4a38      	ldr	r2, [pc, #224]	@ (800713c <USB_SetTurnaroundTime+0x124>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d306      	bcc.n	800706e <USB_SetTurnaroundTime+0x56>
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	4a37      	ldr	r2, [pc, #220]	@ (8007140 <USB_SetTurnaroundTime+0x128>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d202      	bcs.n	800706e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007068:	230d      	movs	r3, #13
 800706a:	617b      	str	r3, [r7, #20]
 800706c:	e04c      	b.n	8007108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	4a33      	ldr	r2, [pc, #204]	@ (8007140 <USB_SetTurnaroundTime+0x128>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d306      	bcc.n	8007084 <USB_SetTurnaroundTime+0x6c>
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	4a32      	ldr	r2, [pc, #200]	@ (8007144 <USB_SetTurnaroundTime+0x12c>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d802      	bhi.n	8007084 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800707e:	230c      	movs	r3, #12
 8007080:	617b      	str	r3, [r7, #20]
 8007082:	e041      	b.n	8007108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	4a2f      	ldr	r2, [pc, #188]	@ (8007144 <USB_SetTurnaroundTime+0x12c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d906      	bls.n	800709a <USB_SetTurnaroundTime+0x82>
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	4a2e      	ldr	r2, [pc, #184]	@ (8007148 <USB_SetTurnaroundTime+0x130>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d802      	bhi.n	800709a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007094:	230b      	movs	r3, #11
 8007096:	617b      	str	r3, [r7, #20]
 8007098:	e036      	b.n	8007108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	4a2a      	ldr	r2, [pc, #168]	@ (8007148 <USB_SetTurnaroundTime+0x130>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d906      	bls.n	80070b0 <USB_SetTurnaroundTime+0x98>
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	4a29      	ldr	r2, [pc, #164]	@ (800714c <USB_SetTurnaroundTime+0x134>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d802      	bhi.n	80070b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80070aa:	230a      	movs	r3, #10
 80070ac:	617b      	str	r3, [r7, #20]
 80070ae:	e02b      	b.n	8007108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	4a26      	ldr	r2, [pc, #152]	@ (800714c <USB_SetTurnaroundTime+0x134>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d906      	bls.n	80070c6 <USB_SetTurnaroundTime+0xae>
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	4a25      	ldr	r2, [pc, #148]	@ (8007150 <USB_SetTurnaroundTime+0x138>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d202      	bcs.n	80070c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80070c0:	2309      	movs	r3, #9
 80070c2:	617b      	str	r3, [r7, #20]
 80070c4:	e020      	b.n	8007108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	4a21      	ldr	r2, [pc, #132]	@ (8007150 <USB_SetTurnaroundTime+0x138>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d306      	bcc.n	80070dc <USB_SetTurnaroundTime+0xc4>
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	4a20      	ldr	r2, [pc, #128]	@ (8007154 <USB_SetTurnaroundTime+0x13c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d802      	bhi.n	80070dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80070d6:	2308      	movs	r3, #8
 80070d8:	617b      	str	r3, [r7, #20]
 80070da:	e015      	b.n	8007108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	4a1d      	ldr	r2, [pc, #116]	@ (8007154 <USB_SetTurnaroundTime+0x13c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d906      	bls.n	80070f2 <USB_SetTurnaroundTime+0xda>
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	4a1c      	ldr	r2, [pc, #112]	@ (8007158 <USB_SetTurnaroundTime+0x140>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d202      	bcs.n	80070f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80070ec:	2307      	movs	r3, #7
 80070ee:	617b      	str	r3, [r7, #20]
 80070f0:	e00a      	b.n	8007108 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80070f2:	2306      	movs	r3, #6
 80070f4:	617b      	str	r3, [r7, #20]
 80070f6:	e007      	b.n	8007108 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80070f8:	79fb      	ldrb	r3, [r7, #7]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d102      	bne.n	8007104 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80070fe:	2309      	movs	r3, #9
 8007100:	617b      	str	r3, [r7, #20]
 8007102:	e001      	b.n	8007108 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007104:	2309      	movs	r3, #9
 8007106:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	68da      	ldr	r2, [r3, #12]
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	029b      	lsls	r3, r3, #10
 800711c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007120:	431a      	orrs	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	371c      	adds	r7, #28
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	00d8acbf 	.word	0x00d8acbf
 8007138:	00e4e1c0 	.word	0x00e4e1c0
 800713c:	00f42400 	.word	0x00f42400
 8007140:	01067380 	.word	0x01067380
 8007144:	011a499f 	.word	0x011a499f
 8007148:	01312cff 	.word	0x01312cff
 800714c:	014ca43f 	.word	0x014ca43f
 8007150:	016e3600 	.word	0x016e3600
 8007154:	01a6ab1f 	.word	0x01a6ab1f
 8007158:	01e84800 	.word	0x01e84800

0800715c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f043 0201 	orr.w	r2, r3, #1
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f023 0201 	bic.w	r2, r3, #1
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80071bc:	78fb      	ldrb	r3, [r7, #3]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d115      	bne.n	80071ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80071ce:	200a      	movs	r0, #10
 80071d0:	f7fc fafe 	bl	80037d0 <HAL_Delay>
      ms += 10U;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	330a      	adds	r3, #10
 80071d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f001 f93f 	bl	800845e <USB_GetMode>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d01e      	beq.n	8007224 <USB_SetCurrentMode+0x84>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2bc7      	cmp	r3, #199	@ 0xc7
 80071ea:	d9f0      	bls.n	80071ce <USB_SetCurrentMode+0x2e>
 80071ec:	e01a      	b.n	8007224 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80071ee:	78fb      	ldrb	r3, [r7, #3]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d115      	bne.n	8007220 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007200:	200a      	movs	r0, #10
 8007202:	f7fc fae5 	bl	80037d0 <HAL_Delay>
      ms += 10U;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	330a      	adds	r3, #10
 800720a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f001 f926 	bl	800845e <USB_GetMode>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d005      	beq.n	8007224 <USB_SetCurrentMode+0x84>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2bc7      	cmp	r3, #199	@ 0xc7
 800721c:	d9f0      	bls.n	8007200 <USB_SetCurrentMode+0x60>
 800721e:	e001      	b.n	8007224 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e005      	b.n	8007230 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2bc8      	cmp	r3, #200	@ 0xc8
 8007228:	d101      	bne.n	800722e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e000      	b.n	8007230 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007238:	b084      	sub	sp, #16
 800723a:	b580      	push	{r7, lr}
 800723c:	b086      	sub	sp, #24
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007246:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007252:	2300      	movs	r3, #0
 8007254:	613b      	str	r3, [r7, #16]
 8007256:	e009      	b.n	800726c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	3340      	adds	r3, #64	@ 0x40
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	2200      	movs	r2, #0
 8007264:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	3301      	adds	r3, #1
 800726a:	613b      	str	r3, [r7, #16]
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	2b0e      	cmp	r3, #14
 8007270:	d9f2      	bls.n	8007258 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007272:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007276:	2b00      	cmp	r3, #0
 8007278:	d11c      	bne.n	80072b4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007288:	f043 0302 	orr.w	r3, r3, #2
 800728c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007292:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800729e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072aa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80072b2:	e00b      	b.n	80072cc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80072d2:	461a      	mov	r2, r3
 80072d4:	2300      	movs	r3, #0
 80072d6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072d8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d10d      	bne.n	80072fc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80072e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d104      	bne.n	80072f2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80072e8:	2100      	movs	r1, #0
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f968 	bl	80075c0 <USB_SetDevSpeed>
 80072f0:	e008      	b.n	8007304 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80072f2:	2101      	movs	r1, #1
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f963 	bl	80075c0 <USB_SetDevSpeed>
 80072fa:	e003      	b.n	8007304 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80072fc:	2103      	movs	r1, #3
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f95e 	bl	80075c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007304:	2110      	movs	r1, #16
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f8fa 	bl	8007500 <USB_FlushTxFifo>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f924 	bl	8007564 <USB_FlushRxFifo>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800732c:	461a      	mov	r2, r3
 800732e:	2300      	movs	r3, #0
 8007330:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007338:	461a      	mov	r2, r3
 800733a:	2300      	movs	r3, #0
 800733c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007344:	461a      	mov	r2, r3
 8007346:	2300      	movs	r3, #0
 8007348:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800734a:	2300      	movs	r3, #0
 800734c:	613b      	str	r3, [r7, #16]
 800734e:	e043      	b.n	80073d8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007362:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007366:	d118      	bne.n	800739a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10a      	bne.n	8007384 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	4413      	add	r3, r2
 8007376:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800737a:	461a      	mov	r2, r3
 800737c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007380:	6013      	str	r3, [r2, #0]
 8007382:	e013      	b.n	80073ac <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	015a      	lsls	r2, r3, #5
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4413      	add	r3, r2
 800738c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007390:	461a      	mov	r2, r3
 8007392:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007396:	6013      	str	r3, [r2, #0]
 8007398:	e008      	b.n	80073ac <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073a6:	461a      	mov	r2, r3
 80073a8:	2300      	movs	r3, #0
 80073aa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	015a      	lsls	r2, r3, #5
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073b8:	461a      	mov	r2, r3
 80073ba:	2300      	movs	r3, #0
 80073bc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073ca:	461a      	mov	r2, r3
 80073cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80073d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	3301      	adds	r3, #1
 80073d6:	613b      	str	r3, [r7, #16]
 80073d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80073dc:	461a      	mov	r2, r3
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d3b5      	bcc.n	8007350 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073e4:	2300      	movs	r3, #0
 80073e6:	613b      	str	r3, [r7, #16]
 80073e8:	e043      	b.n	8007472 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007400:	d118      	bne.n	8007434 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10a      	bne.n	800741e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007414:	461a      	mov	r2, r3
 8007416:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	e013      	b.n	8007446 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	015a      	lsls	r2, r3, #5
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	4413      	add	r3, r2
 8007426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800742a:	461a      	mov	r2, r3
 800742c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007430:	6013      	str	r3, [r2, #0]
 8007432:	e008      	b.n	8007446 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	015a      	lsls	r2, r3, #5
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4413      	add	r3, r2
 800743c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007440:	461a      	mov	r2, r3
 8007442:	2300      	movs	r3, #0
 8007444:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	4413      	add	r3, r2
 800744e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007452:	461a      	mov	r2, r3
 8007454:	2300      	movs	r3, #0
 8007456:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4413      	add	r3, r2
 8007460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007464:	461a      	mov	r2, r3
 8007466:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800746a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	3301      	adds	r3, #1
 8007470:	613b      	str	r3, [r7, #16]
 8007472:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007476:	461a      	mov	r2, r3
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	4293      	cmp	r3, r2
 800747c:	d3b5      	bcc.n	80073ea <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800748c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007490:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800749e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80074a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d105      	bne.n	80074b4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	f043 0210 	orr.w	r2, r3, #16
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	699a      	ldr	r2, [r3, #24]
 80074b8:	4b10      	ldr	r3, [pc, #64]	@ (80074fc <USB_DevInit+0x2c4>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80074c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d005      	beq.n	80074d4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	f043 0208 	orr.w	r2, r3, #8
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80074d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d107      	bne.n	80074ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074e4:	f043 0304 	orr.w	r3, r3, #4
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3718      	adds	r7, #24
 80074f2:	46bd      	mov	sp, r7
 80074f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074f8:	b004      	add	sp, #16
 80074fa:	4770      	bx	lr
 80074fc:	803c3800 	.word	0x803c3800

08007500 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800750a:	2300      	movs	r3, #0
 800750c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	3301      	adds	r3, #1
 8007512:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800751a:	d901      	bls.n	8007520 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e01b      	b.n	8007558 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	2b00      	cmp	r3, #0
 8007526:	daf2      	bge.n	800750e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007528:	2300      	movs	r3, #0
 800752a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	019b      	lsls	r3, r3, #6
 8007530:	f043 0220 	orr.w	r2, r3, #32
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3301      	adds	r3, #1
 800753c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007544:	d901      	bls.n	800754a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e006      	b.n	8007558 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	f003 0320 	and.w	r3, r3, #32
 8007552:	2b20      	cmp	r3, #32
 8007554:	d0f0      	beq.n	8007538 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	3301      	adds	r3, #1
 8007574:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800757c:	d901      	bls.n	8007582 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e018      	b.n	80075b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	2b00      	cmp	r3, #0
 8007588:	daf2      	bge.n	8007570 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2210      	movs	r2, #16
 8007592:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	3301      	adds	r3, #1
 8007598:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075a0:	d901      	bls.n	80075a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e006      	b.n	80075b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	f003 0310 	and.w	r3, r3, #16
 80075ae:	2b10      	cmp	r3, #16
 80075b0:	d0f0      	beq.n	8007594 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3714      	adds	r7, #20
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	460b      	mov	r3, r1
 80075ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	78fb      	ldrb	r3, [r7, #3]
 80075da:	68f9      	ldr	r1, [r7, #12]
 80075dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075e0:	4313      	orrs	r3, r2
 80075e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b087      	sub	sp, #28
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f003 0306 	and.w	r3, r3, #6
 800760a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d102      	bne.n	8007618 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007612:	2300      	movs	r3, #0
 8007614:	75fb      	strb	r3, [r7, #23]
 8007616:	e00a      	b.n	800762e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2b02      	cmp	r3, #2
 800761c:	d002      	beq.n	8007624 <USB_GetDevSpeed+0x32>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2b06      	cmp	r3, #6
 8007622:	d102      	bne.n	800762a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007624:	2302      	movs	r3, #2
 8007626:	75fb      	strb	r3, [r7, #23]
 8007628:	e001      	b.n	800762e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800762a:	230f      	movs	r3, #15
 800762c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800762e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007630:	4618      	mov	r0, r3
 8007632:	371c      	adds	r7, #28
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	785b      	ldrb	r3, [r3, #1]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d13a      	bne.n	80076ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800765e:	69da      	ldr	r2, [r3, #28]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	f003 030f 	and.w	r3, r3, #15
 8007668:	2101      	movs	r1, #1
 800766a:	fa01 f303 	lsl.w	r3, r1, r3
 800766e:	b29b      	uxth	r3, r3
 8007670:	68f9      	ldr	r1, [r7, #12]
 8007672:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007676:	4313      	orrs	r3, r2
 8007678:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d155      	bne.n	800773c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	791b      	ldrb	r3, [r3, #4]
 80076aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	059b      	lsls	r3, r3, #22
 80076b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076b4:	4313      	orrs	r3, r2
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	0151      	lsls	r1, r2, #5
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	440a      	add	r2, r1
 80076be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076ca:	6013      	str	r3, [r2, #0]
 80076cc:	e036      	b.n	800773c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076d4:	69da      	ldr	r2, [r3, #28]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	f003 030f 	and.w	r3, r3, #15
 80076de:	2101      	movs	r1, #1
 80076e0:	fa01 f303 	lsl.w	r3, r1, r3
 80076e4:	041b      	lsls	r3, r3, #16
 80076e6:	68f9      	ldr	r1, [r7, #12]
 80076e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076ec:	4313      	orrs	r3, r2
 80076ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d11a      	bne.n	800773c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	015a      	lsls	r2, r3, #5
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	4413      	add	r3, r2
 800770e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	791b      	ldrb	r3, [r3, #4]
 8007720:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007722:	430b      	orrs	r3, r1
 8007724:	4313      	orrs	r3, r2
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	0151      	lsls	r1, r2, #5
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	440a      	add	r2, r1
 800772e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800773a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
	...

0800774c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	785b      	ldrb	r3, [r3, #1]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d161      	bne.n	800782c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4413      	add	r3, r2
 8007770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800777a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800777e:	d11f      	bne.n	80077c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	015a      	lsls	r2, r3, #5
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4413      	add	r3, r2
 8007788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	0151      	lsls	r1, r2, #5
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	440a      	add	r2, r1
 8007796:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800779a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800779e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	0151      	lsls	r1, r2, #5
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	440a      	add	r2, r1
 80077b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	f003 030f 	and.w	r3, r3, #15
 80077d0:	2101      	movs	r1, #1
 80077d2:	fa01 f303 	lsl.w	r3, r1, r3
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	43db      	mvns	r3, r3
 80077da:	68f9      	ldr	r1, [r7, #12]
 80077dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077e0:	4013      	ands	r3, r2
 80077e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ea:	69da      	ldr	r2, [r3, #28]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	f003 030f 	and.w	r3, r3, #15
 80077f4:	2101      	movs	r1, #1
 80077f6:	fa01 f303 	lsl.w	r3, r1, r3
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	43db      	mvns	r3, r3
 80077fe:	68f9      	ldr	r1, [r7, #12]
 8007800:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007804:	4013      	ands	r3, r2
 8007806:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4413      	add	r3, r2
 8007810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	0159      	lsls	r1, r3, #5
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	440b      	add	r3, r1
 800781e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007822:	4619      	mov	r1, r3
 8007824:	4b35      	ldr	r3, [pc, #212]	@ (80078fc <USB_DeactivateEndpoint+0x1b0>)
 8007826:	4013      	ands	r3, r2
 8007828:	600b      	str	r3, [r1, #0]
 800782a:	e060      	b.n	80078ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4413      	add	r3, r2
 8007834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800783e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007842:	d11f      	bne.n	8007884 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	015a      	lsls	r2, r3, #5
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	4413      	add	r3, r2
 800784c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	0151      	lsls	r1, r2, #5
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	440a      	add	r2, r1
 800785a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800785e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007862:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	015a      	lsls	r2, r3, #5
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	4413      	add	r3, r2
 800786c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	0151      	lsls	r1, r2, #5
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	440a      	add	r2, r1
 800787a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800787e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007882:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800788a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	f003 030f 	and.w	r3, r3, #15
 8007894:	2101      	movs	r1, #1
 8007896:	fa01 f303 	lsl.w	r3, r1, r3
 800789a:	041b      	lsls	r3, r3, #16
 800789c:	43db      	mvns	r3, r3
 800789e:	68f9      	ldr	r1, [r7, #12]
 80078a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078a4:	4013      	ands	r3, r2
 80078a6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078ae:	69da      	ldr	r2, [r3, #28]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	f003 030f 	and.w	r3, r3, #15
 80078b8:	2101      	movs	r1, #1
 80078ba:	fa01 f303 	lsl.w	r3, r1, r3
 80078be:	041b      	lsls	r3, r3, #16
 80078c0:	43db      	mvns	r3, r3
 80078c2:	68f9      	ldr	r1, [r7, #12]
 80078c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078c8:	4013      	ands	r3, r2
 80078ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	0159      	lsls	r1, r3, #5
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	440b      	add	r3, r1
 80078e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e6:	4619      	mov	r1, r3
 80078e8:	4b05      	ldr	r3, [pc, #20]	@ (8007900 <USB_DeactivateEndpoint+0x1b4>)
 80078ea:	4013      	ands	r3, r2
 80078ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	ec337800 	.word	0xec337800
 8007900:	eff37800 	.word	0xeff37800

08007904 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b08a      	sub	sp, #40	@ 0x28
 8007908:	af02      	add	r7, sp, #8
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	4613      	mov	r3, r2
 8007910:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	785b      	ldrb	r3, [r3, #1]
 8007920:	2b01      	cmp	r3, #1
 8007922:	f040 817f 	bne.w	8007c24 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d132      	bne.n	8007994 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	015a      	lsls	r2, r3, #5
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	4413      	add	r3, r2
 8007936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	69ba      	ldr	r2, [r7, #24]
 800793e:	0151      	lsls	r1, r2, #5
 8007940:	69fa      	ldr	r2, [r7, #28]
 8007942:	440a      	add	r2, r1
 8007944:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007948:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800794c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007950:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	0151      	lsls	r1, r2, #5
 8007964:	69fa      	ldr	r2, [r7, #28]
 8007966:	440a      	add	r2, r1
 8007968:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800796c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007970:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	4413      	add	r3, r2
 800797a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	69ba      	ldr	r2, [r7, #24]
 8007982:	0151      	lsls	r1, r2, #5
 8007984:	69fa      	ldr	r2, [r7, #28]
 8007986:	440a      	add	r2, r1
 8007988:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800798c:	0cdb      	lsrs	r3, r3, #19
 800798e:	04db      	lsls	r3, r3, #19
 8007990:	6113      	str	r3, [r2, #16]
 8007992:	e097      	b.n	8007ac4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	015a      	lsls	r2, r3, #5
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	4413      	add	r3, r2
 800799c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	0151      	lsls	r1, r2, #5
 80079a6:	69fa      	ldr	r2, [r7, #28]
 80079a8:	440a      	add	r2, r1
 80079aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079ae:	0cdb      	lsrs	r3, r3, #19
 80079b0:	04db      	lsls	r3, r3, #19
 80079b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	69ba      	ldr	r2, [r7, #24]
 80079c4:	0151      	lsls	r1, r2, #5
 80079c6:	69fa      	ldr	r2, [r7, #28]
 80079c8:	440a      	add	r2, r1
 80079ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079ce:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80079d2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80079d6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d11a      	bne.n	8007a14 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	691a      	ldr	r2, [r3, #16]
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d903      	bls.n	80079f2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	689a      	ldr	r2, [r3, #8]
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	015a      	lsls	r2, r3, #5
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	4413      	add	r3, r2
 80079fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	69ba      	ldr	r2, [r7, #24]
 8007a02:	0151      	lsls	r1, r2, #5
 8007a04:	69fa      	ldr	r2, [r7, #28]
 8007a06:	440a      	add	r2, r1
 8007a08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a10:	6113      	str	r3, [r2, #16]
 8007a12:	e044      	b.n	8007a9e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	691a      	ldr	r2, [r3, #16]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	1e5a      	subs	r2, r3, #1
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a28:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	015a      	lsls	r2, r3, #5
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	4413      	add	r3, r2
 8007a32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a36:	691a      	ldr	r2, [r3, #16]
 8007a38:	8afb      	ldrh	r3, [r7, #22]
 8007a3a:	04d9      	lsls	r1, r3, #19
 8007a3c:	4ba4      	ldr	r3, [pc, #656]	@ (8007cd0 <USB_EPStartXfer+0x3cc>)
 8007a3e:	400b      	ands	r3, r1
 8007a40:	69b9      	ldr	r1, [r7, #24]
 8007a42:	0148      	lsls	r0, r1, #5
 8007a44:	69f9      	ldr	r1, [r7, #28]
 8007a46:	4401      	add	r1, r0
 8007a48:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	791b      	ldrb	r3, [r3, #4]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d122      	bne.n	8007a9e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	015a      	lsls	r2, r3, #5
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	4413      	add	r3, r2
 8007a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	69ba      	ldr	r2, [r7, #24]
 8007a68:	0151      	lsls	r1, r2, #5
 8007a6a:	69fa      	ldr	r2, [r7, #28]
 8007a6c:	440a      	add	r2, r1
 8007a6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a72:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007a76:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a84:	691a      	ldr	r2, [r3, #16]
 8007a86:	8afb      	ldrh	r3, [r7, #22]
 8007a88:	075b      	lsls	r3, r3, #29
 8007a8a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007a8e:	69b9      	ldr	r1, [r7, #24]
 8007a90:	0148      	lsls	r0, r1, #5
 8007a92:	69f9      	ldr	r1, [r7, #28]
 8007a94:	4401      	add	r1, r0
 8007a96:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aaa:	691a      	ldr	r2, [r3, #16]
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ab4:	69b9      	ldr	r1, [r7, #24]
 8007ab6:	0148      	lsls	r0, r1, #5
 8007ab8:	69f9      	ldr	r1, [r7, #28]
 8007aba:	4401      	add	r1, r0
 8007abc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007ac4:	79fb      	ldrb	r3, [r7, #7]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d14b      	bne.n	8007b62 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d009      	beq.n	8007ae6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	015a      	lsls	r2, r3, #5
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	4413      	add	r3, r2
 8007ada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ade:	461a      	mov	r2, r3
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	791b      	ldrb	r3, [r3, #4]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d128      	bne.n	8007b40 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d110      	bne.n	8007b20 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	015a      	lsls	r2, r3, #5
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	4413      	add	r3, r2
 8007b06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	0151      	lsls	r1, r2, #5
 8007b10:	69fa      	ldr	r2, [r7, #28]
 8007b12:	440a      	add	r2, r1
 8007b14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007b1c:	6013      	str	r3, [r2, #0]
 8007b1e:	e00f      	b.n	8007b40 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	69ba      	ldr	r2, [r7, #24]
 8007b30:	0151      	lsls	r1, r2, #5
 8007b32:	69fa      	ldr	r2, [r7, #28]
 8007b34:	440a      	add	r2, r1
 8007b36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b3e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	69ba      	ldr	r2, [r7, #24]
 8007b50:	0151      	lsls	r1, r2, #5
 8007b52:	69fa      	ldr	r2, [r7, #28]
 8007b54:	440a      	add	r2, r1
 8007b56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b5a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	e166      	b.n	8007e30 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	0151      	lsls	r1, r2, #5
 8007b74:	69fa      	ldr	r2, [r7, #28]
 8007b76:	440a      	add	r2, r1
 8007b78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b7c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007b80:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	791b      	ldrb	r3, [r3, #4]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d015      	beq.n	8007bb6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 814e 	beq.w	8007e30 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	f003 030f 	and.w	r3, r3, #15
 8007ba4:	2101      	movs	r1, #1
 8007ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8007baa:	69f9      	ldr	r1, [r7, #28]
 8007bac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	634b      	str	r3, [r1, #52]	@ 0x34
 8007bb4:	e13c      	b.n	8007e30 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d110      	bne.n	8007be8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	015a      	lsls	r2, r3, #5
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	4413      	add	r3, r2
 8007bce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	0151      	lsls	r1, r2, #5
 8007bd8:	69fa      	ldr	r2, [r7, #28]
 8007bda:	440a      	add	r2, r1
 8007bdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007be0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007be4:	6013      	str	r3, [r2, #0]
 8007be6:	e00f      	b.n	8007c08 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	0151      	lsls	r1, r2, #5
 8007bfa:	69fa      	ldr	r2, [r7, #28]
 8007bfc:	440a      	add	r2, r1
 8007bfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c06:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	68d9      	ldr	r1, [r3, #12]
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	781a      	ldrb	r2, [r3, #0]
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	b298      	uxth	r0, r3
 8007c16:	79fb      	ldrb	r3, [r7, #7]
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f000 f9b9 	bl	8007f94 <USB_WritePacket>
 8007c22:	e105      	b.n	8007e30 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	015a      	lsls	r2, r3, #5
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	69ba      	ldr	r2, [r7, #24]
 8007c34:	0151      	lsls	r1, r2, #5
 8007c36:	69fa      	ldr	r2, [r7, #28]
 8007c38:	440a      	add	r2, r1
 8007c3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c3e:	0cdb      	lsrs	r3, r3, #19
 8007c40:	04db      	lsls	r3, r3, #19
 8007c42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	0151      	lsls	r1, r2, #5
 8007c56:	69fa      	ldr	r2, [r7, #28]
 8007c58:	440a      	add	r2, r1
 8007c5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c5e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007c62:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007c66:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d132      	bne.n	8007cd4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	689a      	ldr	r2, [r3, #8]
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	689a      	ldr	r2, [r3, #8]
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	015a      	lsls	r2, r3, #5
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c92:	691a      	ldr	r2, [r3, #16]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	6a1b      	ldr	r3, [r3, #32]
 8007c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c9c:	69b9      	ldr	r1, [r7, #24]
 8007c9e:	0148      	lsls	r0, r1, #5
 8007ca0:	69f9      	ldr	r1, [r7, #28]
 8007ca2:	4401      	add	r1, r0
 8007ca4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	0151      	lsls	r1, r2, #5
 8007cbe:	69fa      	ldr	r2, [r7, #28]
 8007cc0:	440a      	add	r2, r1
 8007cc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cc6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007cca:	6113      	str	r3, [r2, #16]
 8007ccc:	e062      	b.n	8007d94 <USB_EPStartXfer+0x490>
 8007cce:	bf00      	nop
 8007cd0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d123      	bne.n	8007d24 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	015a      	lsls	r2, r3, #5
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ce8:	691a      	ldr	r2, [r3, #16]
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cf2:	69b9      	ldr	r1, [r7, #24]
 8007cf4:	0148      	lsls	r0, r1, #5
 8007cf6:	69f9      	ldr	r1, [r7, #28]
 8007cf8:	4401      	add	r1, r0
 8007cfa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	015a      	lsls	r2, r3, #5
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	69ba      	ldr	r2, [r7, #24]
 8007d12:	0151      	lsls	r1, r2, #5
 8007d14:	69fa      	ldr	r2, [r7, #28]
 8007d16:	440a      	add	r2, r1
 8007d18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d20:	6113      	str	r3, [r2, #16]
 8007d22:	e037      	b.n	8007d94 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	691a      	ldr	r2, [r3, #16]
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	1e5a      	subs	r2, r3, #1
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d38:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	8afa      	ldrh	r2, [r7, #22]
 8007d40:	fb03 f202 	mul.w	r2, r3, r2
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d54:	691a      	ldr	r2, [r3, #16]
 8007d56:	8afb      	ldrh	r3, [r7, #22]
 8007d58:	04d9      	lsls	r1, r3, #19
 8007d5a:	4b38      	ldr	r3, [pc, #224]	@ (8007e3c <USB_EPStartXfer+0x538>)
 8007d5c:	400b      	ands	r3, r1
 8007d5e:	69b9      	ldr	r1, [r7, #24]
 8007d60:	0148      	lsls	r0, r1, #5
 8007d62:	69f9      	ldr	r1, [r7, #28]
 8007d64:	4401      	add	r1, r0
 8007d66:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	015a      	lsls	r2, r3, #5
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d7a:	691a      	ldr	r2, [r3, #16]
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	6a1b      	ldr	r3, [r3, #32]
 8007d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d84:	69b9      	ldr	r1, [r7, #24]
 8007d86:	0148      	lsls	r0, r1, #5
 8007d88:	69f9      	ldr	r1, [r7, #28]
 8007d8a:	4401      	add	r1, r0
 8007d8c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d90:	4313      	orrs	r3, r2
 8007d92:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007d94:	79fb      	ldrb	r3, [r7, #7]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d10d      	bne.n	8007db6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d009      	beq.n	8007db6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	68d9      	ldr	r1, [r3, #12]
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	015a      	lsls	r2, r3, #5
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	4413      	add	r3, r2
 8007dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007db2:	460a      	mov	r2, r1
 8007db4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	791b      	ldrb	r3, [r3, #4]
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d128      	bne.n	8007e10 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d110      	bne.n	8007df0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	015a      	lsls	r2, r3, #5
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	69ba      	ldr	r2, [r7, #24]
 8007dde:	0151      	lsls	r1, r2, #5
 8007de0:	69fa      	ldr	r2, [r7, #28]
 8007de2:	440a      	add	r2, r1
 8007de4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007de8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007dec:	6013      	str	r3, [r2, #0]
 8007dee:	e00f      	b.n	8007e10 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	015a      	lsls	r2, r3, #5
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	4413      	add	r3, r2
 8007df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	69ba      	ldr	r2, [r7, #24]
 8007e00:	0151      	lsls	r1, r2, #5
 8007e02:	69fa      	ldr	r2, [r7, #28]
 8007e04:	440a      	add	r2, r1
 8007e06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	015a      	lsls	r2, r3, #5
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	0151      	lsls	r1, r2, #5
 8007e22:	69fa      	ldr	r2, [r7, #28]
 8007e24:	440a      	add	r2, r1
 8007e26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e2a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007e2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3720      	adds	r7, #32
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	1ff80000 	.word	0x1ff80000

08007e40 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b087      	sub	sp, #28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	785b      	ldrb	r3, [r3, #1]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d14a      	bne.n	8007ef4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	015a      	lsls	r2, r3, #5
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	4413      	add	r3, r2
 8007e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e76:	f040 8086 	bne.w	8007f86 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	015a      	lsls	r2, r3, #5
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	4413      	add	r3, r2
 8007e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	683a      	ldr	r2, [r7, #0]
 8007e8c:	7812      	ldrb	r2, [r2, #0]
 8007e8e:	0151      	lsls	r1, r2, #5
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	440a      	add	r2, r1
 8007e94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007e9c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	683a      	ldr	r2, [r7, #0]
 8007eb0:	7812      	ldrb	r2, [r2, #0]
 8007eb2:	0151      	lsls	r1, r2, #5
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	440a      	add	r2, r1
 8007eb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ebc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ec0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d902      	bls.n	8007ed8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ed6:	e056      	b.n	8007f86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007eec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ef0:	d0e7      	beq.n	8007ec2 <USB_EPStopXfer+0x82>
 8007ef2:	e048      	b.n	8007f86 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	015a      	lsls	r2, r3, #5
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	4413      	add	r3, r2
 8007efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f0c:	d13b      	bne.n	8007f86 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	015a      	lsls	r2, r3, #5
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	4413      	add	r3, r2
 8007f18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	683a      	ldr	r2, [r7, #0]
 8007f20:	7812      	ldrb	r2, [r2, #0]
 8007f22:	0151      	lsls	r1, r2, #5
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	440a      	add	r2, r1
 8007f28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f2c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f30:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	7812      	ldrb	r2, [r2, #0]
 8007f46:	0151      	lsls	r1, r2, #5
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	440a      	add	r2, r1
 8007f4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d902      	bls.n	8007f6c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	75fb      	strb	r3, [r7, #23]
          break;
 8007f6a:	e00c      	b.n	8007f86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f84:	d0e7      	beq.n	8007f56 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	371c      	adds	r7, #28
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b089      	sub	sp, #36	@ 0x24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	4611      	mov	r1, r2
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	71fb      	strb	r3, [r7, #7]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007fb2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d123      	bne.n	8008002 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007fba:	88bb      	ldrh	r3, [r7, #4]
 8007fbc:	3303      	adds	r3, #3
 8007fbe:	089b      	lsrs	r3, r3, #2
 8007fc0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	61bb      	str	r3, [r7, #24]
 8007fc6:	e018      	b.n	8007ffa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007fc8:	79fb      	ldrb	r3, [r7, #7]
 8007fca:	031a      	lsls	r2, r3, #12
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	4413      	add	r3, r2
 8007fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	3301      	adds	r3, #1
 8007fec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	61bb      	str	r3, [r7, #24]
 8007ffa:	69ba      	ldr	r2, [r7, #24]
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d3e2      	bcc.n	8007fc8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3724      	adds	r7, #36	@ 0x24
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008010:	b480      	push	{r7}
 8008012:	b08b      	sub	sp, #44	@ 0x2c
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	4613      	mov	r3, r2
 800801c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008026:	88fb      	ldrh	r3, [r7, #6]
 8008028:	089b      	lsrs	r3, r3, #2
 800802a:	b29b      	uxth	r3, r3
 800802c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800802e:	88fb      	ldrh	r3, [r7, #6]
 8008030:	f003 0303 	and.w	r3, r3, #3
 8008034:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008036:	2300      	movs	r3, #0
 8008038:	623b      	str	r3, [r7, #32]
 800803a:	e014      	b.n	8008066 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008046:	601a      	str	r2, [r3, #0]
    pDest++;
 8008048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804a:	3301      	adds	r3, #1
 800804c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800804e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008050:	3301      	adds	r3, #1
 8008052:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008056:	3301      	adds	r3, #1
 8008058:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800805a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805c:	3301      	adds	r3, #1
 800805e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	3301      	adds	r3, #1
 8008064:	623b      	str	r3, [r7, #32]
 8008066:	6a3a      	ldr	r2, [r7, #32]
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	429a      	cmp	r2, r3
 800806c:	d3e6      	bcc.n	800803c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800806e:	8bfb      	ldrh	r3, [r7, #30]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d01e      	beq.n	80080b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008074:	2300      	movs	r3, #0
 8008076:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800807e:	461a      	mov	r2, r3
 8008080:	f107 0310 	add.w	r3, r7, #16
 8008084:	6812      	ldr	r2, [r2, #0]
 8008086:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008088:	693a      	ldr	r2, [r7, #16]
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	b2db      	uxtb	r3, r3
 800808e:	00db      	lsls	r3, r3, #3
 8008090:	fa22 f303 	lsr.w	r3, r2, r3
 8008094:	b2da      	uxtb	r2, r3
 8008096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008098:	701a      	strb	r2, [r3, #0]
      i++;
 800809a:	6a3b      	ldr	r3, [r7, #32]
 800809c:	3301      	adds	r3, #1
 800809e:	623b      	str	r3, [r7, #32]
      pDest++;
 80080a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a2:	3301      	adds	r3, #1
 80080a4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80080a6:	8bfb      	ldrh	r3, [r7, #30]
 80080a8:	3b01      	subs	r3, #1
 80080aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80080ac:	8bfb      	ldrh	r3, [r7, #30]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1ea      	bne.n	8008088 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80080b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	372c      	adds	r7, #44	@ 0x2c
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	785b      	ldrb	r3, [r3, #1]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d12c      	bne.n	8008136 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	015a      	lsls	r2, r3, #5
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	db12      	blt.n	8008114 <USB_EPSetStall+0x54>
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00f      	beq.n	8008114 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	015a      	lsls	r2, r3, #5
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4413      	add	r3, r2
 80080fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	0151      	lsls	r1, r2, #5
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	440a      	add	r2, r1
 800810a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800810e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008112:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	4413      	add	r3, r2
 800811c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	0151      	lsls	r1, r2, #5
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	440a      	add	r2, r1
 800812a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800812e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008132:	6013      	str	r3, [r2, #0]
 8008134:	e02b      	b.n	800818e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	015a      	lsls	r2, r3, #5
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	4413      	add	r3, r2
 800813e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	db12      	blt.n	800816e <USB_EPSetStall+0xae>
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00f      	beq.n	800816e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	0151      	lsls	r1, r2, #5
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	440a      	add	r2, r1
 8008164:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008168:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800816c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	015a      	lsls	r2, r3, #5
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	4413      	add	r3, r2
 8008176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	0151      	lsls	r1, r2, #5
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	440a      	add	r2, r1
 8008184:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008188:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800818c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	785b      	ldrb	r3, [r3, #1]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d128      	bne.n	800820a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	015a      	lsls	r2, r3, #5
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	4413      	add	r3, r2
 80081c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	0151      	lsls	r1, r2, #5
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	440a      	add	r2, r1
 80081ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80081d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	791b      	ldrb	r3, [r3, #4]
 80081dc:	2b03      	cmp	r3, #3
 80081de:	d003      	beq.n	80081e8 <USB_EPClearStall+0x4c>
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	791b      	ldrb	r3, [r3, #4]
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d138      	bne.n	800825a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	0151      	lsls	r1, r2, #5
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	440a      	add	r2, r1
 80081fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008206:	6013      	str	r3, [r2, #0]
 8008208:	e027      	b.n	800825a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	015a      	lsls	r2, r3, #5
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	4413      	add	r3, r2
 8008212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	0151      	lsls	r1, r2, #5
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	440a      	add	r2, r1
 8008220:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008224:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008228:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	791b      	ldrb	r3, [r3, #4]
 800822e:	2b03      	cmp	r3, #3
 8008230:	d003      	beq.n	800823a <USB_EPClearStall+0x9e>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	791b      	ldrb	r3, [r3, #4]
 8008236:	2b02      	cmp	r3, #2
 8008238:	d10f      	bne.n	800825a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4413      	add	r3, r2
 8008242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	0151      	lsls	r1, r2, #5
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	440a      	add	r2, r1
 8008250:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008258:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3714      	adds	r7, #20
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	460b      	mov	r3, r1
 8008272:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008286:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800828a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	78fb      	ldrb	r3, [r7, #3]
 8008296:	011b      	lsls	r3, r3, #4
 8008298:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800829c:	68f9      	ldr	r1, [r7, #12]
 800829e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80082a2:	4313      	orrs	r3, r2
 80082a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3714      	adds	r7, #20
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80082ce:	f023 0303 	bic.w	r3, r3, #3
 80082d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082e2:	f023 0302 	bic.w	r3, r3, #2
 80082e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80082f6:	b480      	push	{r7}
 80082f8:	b085      	sub	sp, #20
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008310:	f023 0303 	bic.w	r3, r3, #3
 8008314:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008324:	f043 0302 	orr.w	r3, r3, #2
 8008328:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	695b      	ldr	r3, [r3, #20]
 8008344:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	4013      	ands	r3, r2
 800834e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008350:	68fb      	ldr	r3, [r7, #12]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr

0800835e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800835e:	b480      	push	{r7}
 8008360:	b085      	sub	sp, #20
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800837a:	69db      	ldr	r3, [r3, #28]
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	4013      	ands	r3, r2
 8008380:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	0c1b      	lsrs	r3, r3, #16
}
 8008386:	4618      	mov	r0, r3
 8008388:	3714      	adds	r7, #20
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008392:	b480      	push	{r7}
 8008394:	b085      	sub	sp, #20
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	4013      	ands	r3, r2
 80083b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	b29b      	uxth	r3, r3
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b085      	sub	sp, #20
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	460b      	mov	r3, r1
 80083d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80083d6:	78fb      	ldrb	r3, [r7, #3]
 80083d8:	015a      	lsls	r2, r3, #5
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	4413      	add	r3, r2
 80083de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	4013      	ands	r3, r2
 80083f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80083f4:	68bb      	ldr	r3, [r7, #8]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008402:	b480      	push	{r7}
 8008404:	b087      	sub	sp, #28
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	460b      	mov	r3, r1
 800840c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008424:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008426:	78fb      	ldrb	r3, [r7, #3]
 8008428:	f003 030f 	and.w	r3, r3, #15
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	fa22 f303 	lsr.w	r3, r2, r3
 8008432:	01db      	lsls	r3, r3, #7
 8008434:	b2db      	uxtb	r3, r3
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	4313      	orrs	r3, r2
 800843a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800843c:	78fb      	ldrb	r3, [r7, #3]
 800843e:	015a      	lsls	r2, r3, #5
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	4413      	add	r3, r2
 8008444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	4013      	ands	r3, r2
 800844e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008450:	68bb      	ldr	r3, [r7, #8]
}
 8008452:	4618      	mov	r0, r3
 8008454:	371c      	adds	r7, #28
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	f003 0301 	and.w	r3, r3, #1
}
 800846e:	4618      	mov	r0, r3
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800847a:	b480      	push	{r7}
 800847c:	b085      	sub	sp, #20
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008494:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008498:	f023 0307 	bic.w	r3, r3, #7
 800849c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3714      	adds	r7, #20
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b087      	sub	sp, #28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	460b      	mov	r3, r1
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	333c      	adds	r3, #60	@ 0x3c
 80084d6:	3304      	adds	r3, #4
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	4a26      	ldr	r2, [pc, #152]	@ (8008578 <USB_EP0_OutStart+0xb8>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d90a      	bls.n	80084fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084f4:	d101      	bne.n	80084fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	e037      	b.n	800856a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008500:	461a      	mov	r2, r3
 8008502:	2300      	movs	r3, #0
 8008504:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	697a      	ldr	r2, [r7, #20]
 8008510:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008514:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008518:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	697a      	ldr	r2, [r7, #20]
 8008524:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008528:	f043 0318 	orr.w	r3, r3, #24
 800852c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800853c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008540:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008542:	7afb      	ldrb	r3, [r7, #11]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d10f      	bne.n	8008568 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800854e:	461a      	mov	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008562:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008566:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	371c      	adds	r7, #28
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	4f54300a 	.word	0x4f54300a

0800857c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008584:	2300      	movs	r3, #0
 8008586:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	3301      	adds	r3, #1
 800858c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008594:	d901      	bls.n	800859a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e01b      	b.n	80085d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	daf2      	bge.n	8008588 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80085a2:	2300      	movs	r3, #0
 80085a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	f043 0201 	orr.w	r2, r3, #1
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3301      	adds	r3, #1
 80085b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085be:	d901      	bls.n	80085c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e006      	b.n	80085d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d0f0      	beq.n	80085b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
	...

080085e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80085ec:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80085f0:	f002 fc9e 	bl	800af30 <USBD_static_malloc>
 80085f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d109      	bne.n	8008610 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	32b0      	adds	r2, #176	@ 0xb0
 8008606:	2100      	movs	r1, #0
 8008608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800860c:	2302      	movs	r3, #2
 800860e:	e0d4      	b.n	80087ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008610:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008614:	2100      	movs	r1, #0
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f003 fb0f 	bl	800bc3a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	32b0      	adds	r2, #176	@ 0xb0
 8008626:	68f9      	ldr	r1, [r7, #12]
 8008628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	32b0      	adds	r2, #176	@ 0xb0
 8008636:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	7c1b      	ldrb	r3, [r3, #16]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d138      	bne.n	80086ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008648:	4b5e      	ldr	r3, [pc, #376]	@ (80087c4 <USBD_CDC_Init+0x1e4>)
 800864a:	7819      	ldrb	r1, [r3, #0]
 800864c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008650:	2202      	movs	r2, #2
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f002 fb49 	bl	800acea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008658:	4b5a      	ldr	r3, [pc, #360]	@ (80087c4 <USBD_CDC_Init+0x1e4>)
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	f003 020f 	and.w	r2, r3, #15
 8008660:	6879      	ldr	r1, [r7, #4]
 8008662:	4613      	mov	r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	4413      	add	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	440b      	add	r3, r1
 800866c:	3324      	adds	r3, #36	@ 0x24
 800866e:	2201      	movs	r2, #1
 8008670:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008672:	4b55      	ldr	r3, [pc, #340]	@ (80087c8 <USBD_CDC_Init+0x1e8>)
 8008674:	7819      	ldrb	r1, [r3, #0]
 8008676:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800867a:	2202      	movs	r2, #2
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f002 fb34 	bl	800acea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008682:	4b51      	ldr	r3, [pc, #324]	@ (80087c8 <USBD_CDC_Init+0x1e8>)
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	f003 020f 	and.w	r2, r3, #15
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	4613      	mov	r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	440b      	add	r3, r1
 8008696:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800869a:	2201      	movs	r2, #1
 800869c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800869e:	4b4b      	ldr	r3, [pc, #300]	@ (80087cc <USBD_CDC_Init+0x1ec>)
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	f003 020f 	and.w	r2, r3, #15
 80086a6:	6879      	ldr	r1, [r7, #4]
 80086a8:	4613      	mov	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	440b      	add	r3, r1
 80086b2:	3326      	adds	r3, #38	@ 0x26
 80086b4:	2210      	movs	r2, #16
 80086b6:	801a      	strh	r2, [r3, #0]
 80086b8:	e035      	b.n	8008726 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80086ba:	4b42      	ldr	r3, [pc, #264]	@ (80087c4 <USBD_CDC_Init+0x1e4>)
 80086bc:	7819      	ldrb	r1, [r3, #0]
 80086be:	2340      	movs	r3, #64	@ 0x40
 80086c0:	2202      	movs	r2, #2
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f002 fb11 	bl	800acea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80086c8:	4b3e      	ldr	r3, [pc, #248]	@ (80087c4 <USBD_CDC_Init+0x1e4>)
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	f003 020f 	and.w	r2, r3, #15
 80086d0:	6879      	ldr	r1, [r7, #4]
 80086d2:	4613      	mov	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4413      	add	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	440b      	add	r3, r1
 80086dc:	3324      	adds	r3, #36	@ 0x24
 80086de:	2201      	movs	r2, #1
 80086e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80086e2:	4b39      	ldr	r3, [pc, #228]	@ (80087c8 <USBD_CDC_Init+0x1e8>)
 80086e4:	7819      	ldrb	r1, [r3, #0]
 80086e6:	2340      	movs	r3, #64	@ 0x40
 80086e8:	2202      	movs	r2, #2
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f002 fafd 	bl	800acea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80086f0:	4b35      	ldr	r3, [pc, #212]	@ (80087c8 <USBD_CDC_Init+0x1e8>)
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	f003 020f 	and.w	r2, r3, #15
 80086f8:	6879      	ldr	r1, [r7, #4]
 80086fa:	4613      	mov	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4413      	add	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	440b      	add	r3, r1
 8008704:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008708:	2201      	movs	r2, #1
 800870a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800870c:	4b2f      	ldr	r3, [pc, #188]	@ (80087cc <USBD_CDC_Init+0x1ec>)
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	f003 020f 	and.w	r2, r3, #15
 8008714:	6879      	ldr	r1, [r7, #4]
 8008716:	4613      	mov	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	440b      	add	r3, r1
 8008720:	3326      	adds	r3, #38	@ 0x26
 8008722:	2210      	movs	r2, #16
 8008724:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008726:	4b29      	ldr	r3, [pc, #164]	@ (80087cc <USBD_CDC_Init+0x1ec>)
 8008728:	7819      	ldrb	r1, [r3, #0]
 800872a:	2308      	movs	r3, #8
 800872c:	2203      	movs	r2, #3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f002 fadb 	bl	800acea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008734:	4b25      	ldr	r3, [pc, #148]	@ (80087cc <USBD_CDC_Init+0x1ec>)
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	f003 020f 	and.w	r2, r3, #15
 800873c:	6879      	ldr	r1, [r7, #4]
 800873e:	4613      	mov	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4413      	add	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	440b      	add	r3, r1
 8008748:	3324      	adds	r3, #36	@ 0x24
 800874a:	2201      	movs	r2, #1
 800874c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	33b0      	adds	r3, #176	@ 0xb0
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4413      	add	r3, r2
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2200      	movs	r2, #0
 800876e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008780:	2b00      	cmp	r3, #0
 8008782:	d101      	bne.n	8008788 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008784:	2302      	movs	r3, #2
 8008786:	e018      	b.n	80087ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	7c1b      	ldrb	r3, [r3, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10a      	bne.n	80087a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008790:	4b0d      	ldr	r3, [pc, #52]	@ (80087c8 <USBD_CDC_Init+0x1e8>)
 8008792:	7819      	ldrb	r1, [r3, #0]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800879a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f002 fb92 	bl	800aec8 <USBD_LL_PrepareReceive>
 80087a4:	e008      	b.n	80087b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087a6:	4b08      	ldr	r3, [pc, #32]	@ (80087c8 <USBD_CDC_Init+0x1e8>)
 80087a8:	7819      	ldrb	r1, [r3, #0]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80087b0:	2340      	movs	r3, #64	@ 0x40
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f002 fb88 	bl	800aec8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	20000097 	.word	0x20000097
 80087c8:	20000098 	.word	0x20000098
 80087cc:	20000099 	.word	0x20000099

080087d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80087dc:	4b3a      	ldr	r3, [pc, #232]	@ (80088c8 <USBD_CDC_DeInit+0xf8>)
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	4619      	mov	r1, r3
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f002 faa7 	bl	800ad36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80087e8:	4b37      	ldr	r3, [pc, #220]	@ (80088c8 <USBD_CDC_DeInit+0xf8>)
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	f003 020f 	and.w	r2, r3, #15
 80087f0:	6879      	ldr	r1, [r7, #4]
 80087f2:	4613      	mov	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	440b      	add	r3, r1
 80087fc:	3324      	adds	r3, #36	@ 0x24
 80087fe:	2200      	movs	r2, #0
 8008800:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008802:	4b32      	ldr	r3, [pc, #200]	@ (80088cc <USBD_CDC_DeInit+0xfc>)
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f002 fa94 	bl	800ad36 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800880e:	4b2f      	ldr	r3, [pc, #188]	@ (80088cc <USBD_CDC_DeInit+0xfc>)
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	f003 020f 	and.w	r2, r3, #15
 8008816:	6879      	ldr	r1, [r7, #4]
 8008818:	4613      	mov	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	440b      	add	r3, r1
 8008822:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008826:	2200      	movs	r2, #0
 8008828:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800882a:	4b29      	ldr	r3, [pc, #164]	@ (80088d0 <USBD_CDC_DeInit+0x100>)
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	4619      	mov	r1, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f002 fa80 	bl	800ad36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008836:	4b26      	ldr	r3, [pc, #152]	@ (80088d0 <USBD_CDC_DeInit+0x100>)
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	f003 020f 	and.w	r2, r3, #15
 800883e:	6879      	ldr	r1, [r7, #4]
 8008840:	4613      	mov	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	4413      	add	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	440b      	add	r3, r1
 800884a:	3324      	adds	r3, #36	@ 0x24
 800884c:	2200      	movs	r2, #0
 800884e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008850:	4b1f      	ldr	r3, [pc, #124]	@ (80088d0 <USBD_CDC_DeInit+0x100>)
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	f003 020f 	and.w	r2, r3, #15
 8008858:	6879      	ldr	r1, [r7, #4]
 800885a:	4613      	mov	r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	4413      	add	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	440b      	add	r3, r1
 8008864:	3326      	adds	r3, #38	@ 0x26
 8008866:	2200      	movs	r2, #0
 8008868:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	32b0      	adds	r2, #176	@ 0xb0
 8008874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d01f      	beq.n	80088bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	33b0      	adds	r3, #176	@ 0xb0
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	4413      	add	r3, r2
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	32b0      	adds	r2, #176	@ 0xb0
 800889a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800889e:	4618      	mov	r0, r3
 80088a0:	f002 fb54 	bl	800af4c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	32b0      	adds	r2, #176	@ 0xb0
 80088ae:	2100      	movs	r1, #0
 80088b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	20000097 	.word	0x20000097
 80088cc:	20000098 	.word	0x20000098
 80088d0:	20000099 	.word	0x20000099

080088d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	32b0      	adds	r2, #176	@ 0xb0
 80088e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80088f2:	2300      	movs	r3, #0
 80088f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d101      	bne.n	8008904 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008900:	2303      	movs	r3, #3
 8008902:	e0bf      	b.n	8008a84 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800890c:	2b00      	cmp	r3, #0
 800890e:	d050      	beq.n	80089b2 <USBD_CDC_Setup+0xde>
 8008910:	2b20      	cmp	r3, #32
 8008912:	f040 80af 	bne.w	8008a74 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	88db      	ldrh	r3, [r3, #6]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d03a      	beq.n	8008994 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	b25b      	sxtb	r3, r3
 8008924:	2b00      	cmp	r3, #0
 8008926:	da1b      	bge.n	8008960 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	33b0      	adds	r3, #176	@ 0xb0
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4413      	add	r3, r2
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	683a      	ldr	r2, [r7, #0]
 800893c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800893e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008940:	683a      	ldr	r2, [r7, #0]
 8008942:	88d2      	ldrh	r2, [r2, #6]
 8008944:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	88db      	ldrh	r3, [r3, #6]
 800894a:	2b07      	cmp	r3, #7
 800894c:	bf28      	it	cs
 800894e:	2307      	movcs	r3, #7
 8008950:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	89fa      	ldrh	r2, [r7, #14]
 8008956:	4619      	mov	r1, r3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f001 fd93 	bl	800a484 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800895e:	e090      	b.n	8008a82 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	785a      	ldrb	r2, [r3, #1]
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	88db      	ldrh	r3, [r3, #6]
 800896e:	2b3f      	cmp	r3, #63	@ 0x3f
 8008970:	d803      	bhi.n	800897a <USBD_CDC_Setup+0xa6>
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	88db      	ldrh	r3, [r3, #6]
 8008976:	b2da      	uxtb	r2, r3
 8008978:	e000      	b.n	800897c <USBD_CDC_Setup+0xa8>
 800897a:	2240      	movs	r2, #64	@ 0x40
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008982:	6939      	ldr	r1, [r7, #16]
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800898a:	461a      	mov	r2, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f001 fda5 	bl	800a4dc <USBD_CtlPrepareRx>
      break;
 8008992:	e076      	b.n	8008a82 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	33b0      	adds	r3, #176	@ 0xb0
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	683a      	ldr	r2, [r7, #0]
 80089a8:	7850      	ldrb	r0, [r2, #1]
 80089aa:	2200      	movs	r2, #0
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	4798      	blx	r3
      break;
 80089b0:	e067      	b.n	8008a82 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	785b      	ldrb	r3, [r3, #1]
 80089b6:	2b0b      	cmp	r3, #11
 80089b8:	d851      	bhi.n	8008a5e <USBD_CDC_Setup+0x18a>
 80089ba:	a201      	add	r2, pc, #4	@ (adr r2, 80089c0 <USBD_CDC_Setup+0xec>)
 80089bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c0:	080089f1 	.word	0x080089f1
 80089c4:	08008a6d 	.word	0x08008a6d
 80089c8:	08008a5f 	.word	0x08008a5f
 80089cc:	08008a5f 	.word	0x08008a5f
 80089d0:	08008a5f 	.word	0x08008a5f
 80089d4:	08008a5f 	.word	0x08008a5f
 80089d8:	08008a5f 	.word	0x08008a5f
 80089dc:	08008a5f 	.word	0x08008a5f
 80089e0:	08008a5f 	.word	0x08008a5f
 80089e4:	08008a5f 	.word	0x08008a5f
 80089e8:	08008a1b 	.word	0x08008a1b
 80089ec:	08008a45 	.word	0x08008a45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b03      	cmp	r3, #3
 80089fa:	d107      	bne.n	8008a0c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80089fc:	f107 030a 	add.w	r3, r7, #10
 8008a00:	2202      	movs	r2, #2
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f001 fd3d 	bl	800a484 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a0a:	e032      	b.n	8008a72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f001 fcbb 	bl	800a38a <USBD_CtlError>
            ret = USBD_FAIL;
 8008a14:	2303      	movs	r3, #3
 8008a16:	75fb      	strb	r3, [r7, #23]
          break;
 8008a18:	e02b      	b.n	8008a72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b03      	cmp	r3, #3
 8008a24:	d107      	bne.n	8008a36 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008a26:	f107 030d 	add.w	r3, r7, #13
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f001 fd28 	bl	800a484 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a34:	e01d      	b.n	8008a72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008a36:	6839      	ldr	r1, [r7, #0]
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f001 fca6 	bl	800a38a <USBD_CtlError>
            ret = USBD_FAIL;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	75fb      	strb	r3, [r7, #23]
          break;
 8008a42:	e016      	b.n	8008a72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d00f      	beq.n	8008a70 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008a50:	6839      	ldr	r1, [r7, #0]
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f001 fc99 	bl	800a38a <USBD_CtlError>
            ret = USBD_FAIL;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008a5c:	e008      	b.n	8008a70 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f001 fc92 	bl	800a38a <USBD_CtlError>
          ret = USBD_FAIL;
 8008a66:	2303      	movs	r3, #3
 8008a68:	75fb      	strb	r3, [r7, #23]
          break;
 8008a6a:	e002      	b.n	8008a72 <USBD_CDC_Setup+0x19e>
          break;
 8008a6c:	bf00      	nop
 8008a6e:	e008      	b.n	8008a82 <USBD_CDC_Setup+0x1ae>
          break;
 8008a70:	bf00      	nop
      }
      break;
 8008a72:	e006      	b.n	8008a82 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f001 fc87 	bl	800a38a <USBD_CtlError>
      ret = USBD_FAIL;
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8008a80:	bf00      	nop
  }

  return (uint8_t)ret;
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	460b      	mov	r3, r1
 8008a96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	32b0      	adds	r2, #176	@ 0xb0
 8008aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d101      	bne.n	8008ab6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e065      	b.n	8008b82 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	32b0      	adds	r2, #176	@ 0xb0
 8008ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008ac6:	78fb      	ldrb	r3, [r7, #3]
 8008ac8:	f003 020f 	and.w	r2, r3, #15
 8008acc:	6879      	ldr	r1, [r7, #4]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	440b      	add	r3, r1
 8008ad8:	3318      	adds	r3, #24
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d02f      	beq.n	8008b40 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008ae0:	78fb      	ldrb	r3, [r7, #3]
 8008ae2:	f003 020f 	and.w	r2, r3, #15
 8008ae6:	6879      	ldr	r1, [r7, #4]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	4413      	add	r3, r2
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	440b      	add	r3, r1
 8008af2:	3318      	adds	r3, #24
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	78fb      	ldrb	r3, [r7, #3]
 8008af8:	f003 010f 	and.w	r1, r3, #15
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	460b      	mov	r3, r1
 8008b00:	00db      	lsls	r3, r3, #3
 8008b02:	440b      	add	r3, r1
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	4403      	add	r3, r0
 8008b08:	331c      	adds	r3, #28
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b10:	fb01 f303 	mul.w	r3, r1, r3
 8008b14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d112      	bne.n	8008b40 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008b1a:	78fb      	ldrb	r3, [r7, #3]
 8008b1c:	f003 020f 	and.w	r2, r3, #15
 8008b20:	6879      	ldr	r1, [r7, #4]
 8008b22:	4613      	mov	r3, r2
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	4413      	add	r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	440b      	add	r3, r1
 8008b2c:	3318      	adds	r3, #24
 8008b2e:	2200      	movs	r2, #0
 8008b30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008b32:	78f9      	ldrb	r1, [r7, #3]
 8008b34:	2300      	movs	r3, #0
 8008b36:	2200      	movs	r2, #0
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f002 f9a4 	bl	800ae86 <USBD_LL_Transmit>
 8008b3e:	e01f      	b.n	8008b80 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	33b0      	adds	r3, #176	@ 0xb0
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	4413      	add	r3, r2
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d010      	beq.n	8008b80 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	33b0      	adds	r3, #176	@ 0xb0
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008b7c:	78fa      	ldrb	r2, [r7, #3]
 8008b7e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b084      	sub	sp, #16
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	460b      	mov	r3, r1
 8008b94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	32b0      	adds	r2, #176	@ 0xb0
 8008ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	32b0      	adds	r2, #176	@ 0xb0
 8008bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d101      	bne.n	8008bbc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e01a      	b.n	8008bf2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008bbc:	78fb      	ldrb	r3, [r7, #3]
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f002 f9a2 	bl	800af0a <USBD_LL_GetRxDataSize>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	33b0      	adds	r3, #176	@ 0xb0
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	4413      	add	r3, r2
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008bec:	4611      	mov	r1, r2
 8008bee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	32b0      	adds	r2, #176	@ 0xb0
 8008c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d101      	bne.n	8008c1c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c18:	2303      	movs	r3, #3
 8008c1a:	e024      	b.n	8008c66 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	33b0      	adds	r3, #176	@ 0xb0
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4413      	add	r3, r2
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d019      	beq.n	8008c64 <USBD_CDC_EP0_RxReady+0x6a>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008c36:	2bff      	cmp	r3, #255	@ 0xff
 8008c38:	d014      	beq.n	8008c64 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	33b0      	adds	r3, #176	@ 0xb0
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4413      	add	r3, r2
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008c52:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008c5a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	22ff      	movs	r2, #255	@ 0xff
 8008c60:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
	...

08008c70 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c78:	2182      	movs	r1, #130	@ 0x82
 8008c7a:	4818      	ldr	r0, [pc, #96]	@ (8008cdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c7c:	f000 fd4f 	bl	800971e <USBD_GetEpDesc>
 8008c80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c82:	2101      	movs	r1, #1
 8008c84:	4815      	ldr	r0, [pc, #84]	@ (8008cdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c86:	f000 fd4a 	bl	800971e <USBD_GetEpDesc>
 8008c8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c8c:	2181      	movs	r1, #129	@ 0x81
 8008c8e:	4813      	ldr	r0, [pc, #76]	@ (8008cdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c90:	f000 fd45 	bl	800971e <USBD_GetEpDesc>
 8008c94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	2210      	movs	r2, #16
 8008ca0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d006      	beq.n	8008cb6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cb0:	711a      	strb	r2, [r3, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d006      	beq.n	8008cca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cc4:	711a      	strb	r2, [r3, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2243      	movs	r2, #67	@ 0x43
 8008cce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008cd0:	4b02      	ldr	r3, [pc, #8]	@ (8008cdc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3718      	adds	r7, #24
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	20000054 	.word	0x20000054

08008ce0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ce8:	2182      	movs	r1, #130	@ 0x82
 8008cea:	4818      	ldr	r0, [pc, #96]	@ (8008d4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008cec:	f000 fd17 	bl	800971e <USBD_GetEpDesc>
 8008cf0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008cf2:	2101      	movs	r1, #1
 8008cf4:	4815      	ldr	r0, [pc, #84]	@ (8008d4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008cf6:	f000 fd12 	bl	800971e <USBD_GetEpDesc>
 8008cfa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008cfc:	2181      	movs	r1, #129	@ 0x81
 8008cfe:	4813      	ldr	r0, [pc, #76]	@ (8008d4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d00:	f000 fd0d 	bl	800971e <USBD_GetEpDesc>
 8008d04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d002      	beq.n	8008d12 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	2210      	movs	r2, #16
 8008d10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d006      	beq.n	8008d26 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	711a      	strb	r2, [r3, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f042 0202 	orr.w	r2, r2, #2
 8008d24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d006      	beq.n	8008d3a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	711a      	strb	r2, [r3, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f042 0202 	orr.w	r2, r2, #2
 8008d38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2243      	movs	r2, #67	@ 0x43
 8008d3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008d40:	4b02      	ldr	r3, [pc, #8]	@ (8008d4c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3718      	adds	r7, #24
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	20000054 	.word	0x20000054

08008d50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008d58:	2182      	movs	r1, #130	@ 0x82
 8008d5a:	4818      	ldr	r0, [pc, #96]	@ (8008dbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d5c:	f000 fcdf 	bl	800971e <USBD_GetEpDesc>
 8008d60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d62:	2101      	movs	r1, #1
 8008d64:	4815      	ldr	r0, [pc, #84]	@ (8008dbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d66:	f000 fcda 	bl	800971e <USBD_GetEpDesc>
 8008d6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d6c:	2181      	movs	r1, #129	@ 0x81
 8008d6e:	4813      	ldr	r0, [pc, #76]	@ (8008dbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d70:	f000 fcd5 	bl	800971e <USBD_GetEpDesc>
 8008d74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d002      	beq.n	8008d82 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	2210      	movs	r2, #16
 8008d80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d006      	beq.n	8008d96 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d90:	711a      	strb	r2, [r3, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d006      	beq.n	8008daa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008da4:	711a      	strb	r2, [r3, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2243      	movs	r2, #67	@ 0x43
 8008dae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008db0:	4b02      	ldr	r3, [pc, #8]	@ (8008dbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3718      	adds	r7, #24
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	20000054 	.word	0x20000054

08008dc0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	220a      	movs	r2, #10
 8008dcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008dce:	4b03      	ldr	r3, [pc, #12]	@ (8008ddc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr
 8008ddc:	20000010 	.word	0x20000010

08008de0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d101      	bne.n	8008df4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e009      	b.n	8008e08 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	33b0      	adds	r3, #176	@ 0xb0
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4413      	add	r3, r2
 8008e02:	683a      	ldr	r2, [r7, #0]
 8008e04:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b087      	sub	sp, #28
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	32b0      	adds	r2, #176	@ 0xb0
 8008e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e2e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d101      	bne.n	8008e3a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e008      	b.n	8008e4c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	371c      	adds	r7, #28
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	32b0      	adds	r2, #176	@ 0xb0
 8008e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d101      	bne.n	8008e7c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008e78:	2303      	movs	r3, #3
 8008e7a:	e004      	b.n	8008e86 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
	...

08008e94 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	32b0      	adds	r2, #176	@ 0xb0
 8008ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eaa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008eac:	2301      	movs	r3, #1
 8008eae:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d101      	bne.n	8008eba <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	e025      	b.n	8008f06 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d11f      	bne.n	8008f04 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008ecc:	4b10      	ldr	r3, [pc, #64]	@ (8008f10 <USBD_CDC_TransmitPacket+0x7c>)
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	f003 020f 	and.w	r2, r3, #15
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	4613      	mov	r3, r2
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	4413      	add	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4403      	add	r3, r0
 8008ee6:	3318      	adds	r3, #24
 8008ee8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008eea:	4b09      	ldr	r3, [pc, #36]	@ (8008f10 <USBD_CDC_TransmitPacket+0x7c>)
 8008eec:	7819      	ldrb	r1, [r3, #0]
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f001 ffc3 	bl	800ae86 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	20000097 	.word	0x20000097

08008f14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	32b0      	adds	r2, #176	@ 0xb0
 8008f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	32b0      	adds	r2, #176	@ 0xb0
 8008f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d101      	bne.n	8008f42 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	e018      	b.n	8008f74 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	7c1b      	ldrb	r3, [r3, #16]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10a      	bne.n	8008f60 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8008f7c <USBD_CDC_ReceivePacket+0x68>)
 8008f4c:	7819      	ldrb	r1, [r3, #0]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f001 ffb5 	bl	800aec8 <USBD_LL_PrepareReceive>
 8008f5e:	e008      	b.n	8008f72 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f60:	4b06      	ldr	r3, [pc, #24]	@ (8008f7c <USBD_CDC_ReceivePacket+0x68>)
 8008f62:	7819      	ldrb	r1, [r3, #0]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f6a:	2340      	movs	r3, #64	@ 0x40
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f001 ffab 	bl	800aec8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	20000098 	.word	0x20000098

08008f80 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d101      	bne.n	8008f98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e01f      	b.n	8008fd8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d003      	beq.n	8008fbe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	79fa      	ldrb	r2, [r7, #7]
 8008fca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f001 fe25 	bl	800ac1c <USBD_LL_Init>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3718      	adds	r7, #24
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008fea:	2300      	movs	r3, #0
 8008fec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d101      	bne.n	8008ff8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	e025      	b.n	8009044 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	683a      	ldr	r2, [r7, #0]
 8008ffc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	32ae      	adds	r2, #174	@ 0xae
 800900a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800900e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00f      	beq.n	8009034 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	32ae      	adds	r2, #174	@ 0xae
 800901e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009024:	f107 020e 	add.w	r2, r7, #14
 8009028:	4610      	mov	r0, r2
 800902a:	4798      	blx	r3
 800902c:	4602      	mov	r2, r0
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800903a:	1c5a      	adds	r2, r3, #1
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f001 fe2d 	bl	800acb4 <USBD_LL_Start>
 800905a:	4603      	mov	r3, r0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800906c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800906e:	4618      	mov	r0, r3
 8009070:	370c      	adds	r7, #12
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr

0800907a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b084      	sub	sp, #16
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	460b      	mov	r3, r1
 8009084:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009086:	2300      	movs	r3, #0
 8009088:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009090:	2b00      	cmp	r3, #0
 8009092:	d009      	beq.n	80090a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	78fa      	ldrb	r2, [r7, #3]
 800909e:	4611      	mov	r1, r2
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	4798      	blx	r3
 80090a4:	4603      	mov	r3, r0
 80090a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80090a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b084      	sub	sp, #16
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	460b      	mov	r3, r1
 80090bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80090be:	2300      	movs	r3, #0
 80090c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	78fa      	ldrb	r2, [r7, #3]
 80090cc:	4611      	mov	r1, r2
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	4798      	blx	r3
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80090d8:	2303      	movs	r3, #3
 80090da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b084      	sub	sp, #16
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f001 f90c 	bl	800a316 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2201      	movs	r2, #1
 8009102:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800910c:	461a      	mov	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800911a:	f003 031f 	and.w	r3, r3, #31
 800911e:	2b02      	cmp	r3, #2
 8009120:	d01a      	beq.n	8009158 <USBD_LL_SetupStage+0x72>
 8009122:	2b02      	cmp	r3, #2
 8009124:	d822      	bhi.n	800916c <USBD_LL_SetupStage+0x86>
 8009126:	2b00      	cmp	r3, #0
 8009128:	d002      	beq.n	8009130 <USBD_LL_SetupStage+0x4a>
 800912a:	2b01      	cmp	r3, #1
 800912c:	d00a      	beq.n	8009144 <USBD_LL_SetupStage+0x5e>
 800912e:	e01d      	b.n	800916c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 fb63 	bl	8009804 <USBD_StdDevReq>
 800913e:	4603      	mov	r3, r0
 8009140:	73fb      	strb	r3, [r7, #15]
      break;
 8009142:	e020      	b.n	8009186 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800914a:	4619      	mov	r1, r3
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fbcb 	bl	80098e8 <USBD_StdItfReq>
 8009152:	4603      	mov	r3, r0
 8009154:	73fb      	strb	r3, [r7, #15]
      break;
 8009156:	e016      	b.n	8009186 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800915e:	4619      	mov	r1, r3
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 fc2d 	bl	80099c0 <USBD_StdEPReq>
 8009166:	4603      	mov	r3, r0
 8009168:	73fb      	strb	r3, [r7, #15]
      break;
 800916a:	e00c      	b.n	8009186 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009172:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009176:	b2db      	uxtb	r3, r3
 8009178:	4619      	mov	r1, r3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f001 fdfa 	bl	800ad74 <USBD_LL_StallEP>
 8009180:	4603      	mov	r3, r0
 8009182:	73fb      	strb	r3, [r7, #15]
      break;
 8009184:	bf00      	nop
  }

  return ret;
 8009186:	7bfb      	ldrb	r3, [r7, #15]
}
 8009188:	4618      	mov	r0, r3
 800918a:	3710      	adds	r7, #16
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	460b      	mov	r3, r1
 800919a:	607a      	str	r2, [r7, #4]
 800919c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80091a2:	7afb      	ldrb	r3, [r7, #11]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d16e      	bne.n	8009286 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80091ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80091b6:	2b03      	cmp	r3, #3
 80091b8:	f040 8098 	bne.w	80092ec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	689a      	ldr	r2, [r3, #8]
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d913      	bls.n	80091f0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	689a      	ldr	r2, [r3, #8]
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	1ad2      	subs	r2, r2, r3
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	68da      	ldr	r2, [r3, #12]
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	4293      	cmp	r3, r2
 80091e0:	bf28      	it	cs
 80091e2:	4613      	movcs	r3, r2
 80091e4:	461a      	mov	r2, r3
 80091e6:	6879      	ldr	r1, [r7, #4]
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f001 f994 	bl	800a516 <USBD_CtlContinueRx>
 80091ee:	e07d      	b.n	80092ec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80091f6:	f003 031f 	and.w	r3, r3, #31
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	d014      	beq.n	8009228 <USBD_LL_DataOutStage+0x98>
 80091fe:	2b02      	cmp	r3, #2
 8009200:	d81d      	bhi.n	800923e <USBD_LL_DataOutStage+0xae>
 8009202:	2b00      	cmp	r3, #0
 8009204:	d002      	beq.n	800920c <USBD_LL_DataOutStage+0x7c>
 8009206:	2b01      	cmp	r3, #1
 8009208:	d003      	beq.n	8009212 <USBD_LL_DataOutStage+0x82>
 800920a:	e018      	b.n	800923e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800920c:	2300      	movs	r3, #0
 800920e:	75bb      	strb	r3, [r7, #22]
            break;
 8009210:	e018      	b.n	8009244 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009218:	b2db      	uxtb	r3, r3
 800921a:	4619      	mov	r1, r3
 800921c:	68f8      	ldr	r0, [r7, #12]
 800921e:	f000 fa64 	bl	80096ea <USBD_CoreFindIF>
 8009222:	4603      	mov	r3, r0
 8009224:	75bb      	strb	r3, [r7, #22]
            break;
 8009226:	e00d      	b.n	8009244 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800922e:	b2db      	uxtb	r3, r3
 8009230:	4619      	mov	r1, r3
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f000 fa66 	bl	8009704 <USBD_CoreFindEP>
 8009238:	4603      	mov	r3, r0
 800923a:	75bb      	strb	r3, [r7, #22]
            break;
 800923c:	e002      	b.n	8009244 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800923e:	2300      	movs	r3, #0
 8009240:	75bb      	strb	r3, [r7, #22]
            break;
 8009242:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009244:	7dbb      	ldrb	r3, [r7, #22]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d119      	bne.n	800927e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009250:	b2db      	uxtb	r3, r3
 8009252:	2b03      	cmp	r3, #3
 8009254:	d113      	bne.n	800927e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009256:	7dba      	ldrb	r2, [r7, #22]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	32ae      	adds	r2, #174	@ 0xae
 800925c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00b      	beq.n	800927e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009266:	7dba      	ldrb	r2, [r7, #22]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800926e:	7dba      	ldrb	r2, [r7, #22]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	32ae      	adds	r2, #174	@ 0xae
 8009274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f001 f95a 	bl	800a538 <USBD_CtlSendStatus>
 8009284:	e032      	b.n	80092ec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009286:	7afb      	ldrb	r3, [r7, #11]
 8009288:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800928c:	b2db      	uxtb	r3, r3
 800928e:	4619      	mov	r1, r3
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f000 fa37 	bl	8009704 <USBD_CoreFindEP>
 8009296:	4603      	mov	r3, r0
 8009298:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800929a:	7dbb      	ldrb	r3, [r7, #22]
 800929c:	2bff      	cmp	r3, #255	@ 0xff
 800929e:	d025      	beq.n	80092ec <USBD_LL_DataOutStage+0x15c>
 80092a0:	7dbb      	ldrb	r3, [r7, #22]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d122      	bne.n	80092ec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	2b03      	cmp	r3, #3
 80092b0:	d117      	bne.n	80092e2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80092b2:	7dba      	ldrb	r2, [r7, #22]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	32ae      	adds	r2, #174	@ 0xae
 80092b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092bc:	699b      	ldr	r3, [r3, #24]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00f      	beq.n	80092e2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80092c2:	7dba      	ldrb	r2, [r7, #22]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80092ca:	7dba      	ldrb	r2, [r7, #22]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	32ae      	adds	r2, #174	@ 0xae
 80092d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	7afa      	ldrb	r2, [r7, #11]
 80092d8:	4611      	mov	r1, r2
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	4798      	blx	r3
 80092de:	4603      	mov	r3, r0
 80092e0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80092e2:	7dfb      	ldrb	r3, [r7, #23]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d001      	beq.n	80092ec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80092e8:	7dfb      	ldrb	r3, [r7, #23]
 80092ea:	e000      	b.n	80092ee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3718      	adds	r7, #24
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b086      	sub	sp, #24
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	60f8      	str	r0, [r7, #12]
 80092fe:	460b      	mov	r3, r1
 8009300:	607a      	str	r2, [r7, #4]
 8009302:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009304:	7afb      	ldrb	r3, [r7, #11]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d16f      	bne.n	80093ea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	3314      	adds	r3, #20
 800930e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009316:	2b02      	cmp	r3, #2
 8009318:	d15a      	bne.n	80093d0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	689a      	ldr	r2, [r3, #8]
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	429a      	cmp	r2, r3
 8009324:	d914      	bls.n	8009350 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	689a      	ldr	r2, [r3, #8]
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	1ad2      	subs	r2, r2, r3
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	461a      	mov	r2, r3
 800933a:	6879      	ldr	r1, [r7, #4]
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f001 f8bc 	bl	800a4ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009342:	2300      	movs	r3, #0
 8009344:	2200      	movs	r2, #0
 8009346:	2100      	movs	r1, #0
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f001 fdbd 	bl	800aec8 <USBD_LL_PrepareReceive>
 800934e:	e03f      	b.n	80093d0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	68da      	ldr	r2, [r3, #12]
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	429a      	cmp	r2, r3
 800935a:	d11c      	bne.n	8009396 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	685a      	ldr	r2, [r3, #4]
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009364:	429a      	cmp	r2, r3
 8009366:	d316      	bcc.n	8009396 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	685a      	ldr	r2, [r3, #4]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009372:	429a      	cmp	r2, r3
 8009374:	d20f      	bcs.n	8009396 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009376:	2200      	movs	r2, #0
 8009378:	2100      	movs	r1, #0
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f001 f89d 	bl	800a4ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009388:	2300      	movs	r3, #0
 800938a:	2200      	movs	r2, #0
 800938c:	2100      	movs	r1, #0
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f001 fd9a 	bl	800aec8 <USBD_LL_PrepareReceive>
 8009394:	e01c      	b.n	80093d0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800939c:	b2db      	uxtb	r3, r3
 800939e:	2b03      	cmp	r3, #3
 80093a0:	d10f      	bne.n	80093c2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d009      	beq.n	80093c2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80093c2:	2180      	movs	r1, #128	@ 0x80
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f001 fcd5 	bl	800ad74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f001 f8c7 	bl	800a55e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d03a      	beq.n	8009450 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f7ff fe42 	bl	8009064 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80093e8:	e032      	b.n	8009450 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80093ea:	7afb      	ldrb	r3, [r7, #11]
 80093ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	4619      	mov	r1, r3
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f000 f985 	bl	8009704 <USBD_CoreFindEP>
 80093fa:	4603      	mov	r3, r0
 80093fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093fe:	7dfb      	ldrb	r3, [r7, #23]
 8009400:	2bff      	cmp	r3, #255	@ 0xff
 8009402:	d025      	beq.n	8009450 <USBD_LL_DataInStage+0x15a>
 8009404:	7dfb      	ldrb	r3, [r7, #23]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d122      	bne.n	8009450 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009410:	b2db      	uxtb	r3, r3
 8009412:	2b03      	cmp	r3, #3
 8009414:	d11c      	bne.n	8009450 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009416:	7dfa      	ldrb	r2, [r7, #23]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	32ae      	adds	r2, #174	@ 0xae
 800941c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d014      	beq.n	8009450 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009426:	7dfa      	ldrb	r2, [r7, #23]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800942e:	7dfa      	ldrb	r2, [r7, #23]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	32ae      	adds	r2, #174	@ 0xae
 8009434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009438:	695b      	ldr	r3, [r3, #20]
 800943a:	7afa      	ldrb	r2, [r7, #11]
 800943c:	4611      	mov	r1, r2
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	4798      	blx	r3
 8009442:	4603      	mov	r3, r0
 8009444:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009446:	7dbb      	ldrb	r3, [r7, #22]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800944c:	7dbb      	ldrb	r3, [r7, #22]
 800944e:	e000      	b.n	8009452 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3718      	adds	r7, #24
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b084      	sub	sp, #16
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009492:	2b00      	cmp	r3, #0
 8009494:	d014      	beq.n	80094c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00e      	beq.n	80094c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	6852      	ldr	r2, [r2, #4]
 80094ae:	b2d2      	uxtb	r2, r2
 80094b0:	4611      	mov	r1, r2
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	4798      	blx	r3
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d001      	beq.n	80094c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80094bc:	2303      	movs	r3, #3
 80094be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094c0:	2340      	movs	r3, #64	@ 0x40
 80094c2:	2200      	movs	r2, #0
 80094c4:	2100      	movs	r1, #0
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f001 fc0f 	bl	800acea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2240      	movs	r2, #64	@ 0x40
 80094d8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094dc:	2340      	movs	r3, #64	@ 0x40
 80094de:	2200      	movs	r2, #0
 80094e0:	2180      	movs	r1, #128	@ 0x80
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f001 fc01 	bl	800acea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2240      	movs	r2, #64	@ 0x40
 80094f2:	621a      	str	r2, [r3, #32]

  return ret;
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80094fe:	b480      	push	{r7}
 8009500:	b083      	sub	sp, #12
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
 8009506:	460b      	mov	r3, r1
 8009508:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	78fa      	ldrb	r2, [r7, #3]
 800950e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	370c      	adds	r7, #12
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800951e:	b480      	push	{r7}
 8009520:	b083      	sub	sp, #12
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800952c:	b2db      	uxtb	r3, r3
 800952e:	2b04      	cmp	r3, #4
 8009530:	d006      	beq.n	8009540 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009538:	b2da      	uxtb	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2204      	movs	r2, #4
 8009544:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009556:	b480      	push	{r7}
 8009558:	b083      	sub	sp, #12
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b04      	cmp	r3, #4
 8009568:	d106      	bne.n	8009578 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009570:	b2da      	uxtb	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	370c      	adds	r7, #12
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr

08009586 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b082      	sub	sp, #8
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b03      	cmp	r3, #3
 8009598:	d110      	bne.n	80095bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00b      	beq.n	80095bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095aa:	69db      	ldr	r3, [r3, #28]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d005      	beq.n	80095bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095b6:	69db      	ldr	r3, [r3, #28]
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b082      	sub	sp, #8
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	460b      	mov	r3, r1
 80095d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	32ae      	adds	r2, #174	@ 0xae
 80095dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d101      	bne.n	80095e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80095e4:	2303      	movs	r3, #3
 80095e6:	e01c      	b.n	8009622 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	2b03      	cmp	r3, #3
 80095f2:	d115      	bne.n	8009620 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	32ae      	adds	r2, #174	@ 0xae
 80095fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009602:	6a1b      	ldr	r3, [r3, #32]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00b      	beq.n	8009620 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	32ae      	adds	r2, #174	@ 0xae
 8009612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009616:	6a1b      	ldr	r3, [r3, #32]
 8009618:	78fa      	ldrb	r2, [r7, #3]
 800961a:	4611      	mov	r1, r2
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b082      	sub	sp, #8
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
 8009632:	460b      	mov	r3, r1
 8009634:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	32ae      	adds	r2, #174	@ 0xae
 8009640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d101      	bne.n	800964c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009648:	2303      	movs	r3, #3
 800964a:	e01c      	b.n	8009686 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009652:	b2db      	uxtb	r3, r3
 8009654:	2b03      	cmp	r3, #3
 8009656:	d115      	bne.n	8009684 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	32ae      	adds	r2, #174	@ 0xae
 8009662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00b      	beq.n	8009684 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	32ae      	adds	r2, #174	@ 0xae
 8009676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800967a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800967c:	78fa      	ldrb	r2, [r7, #3]
 800967e:	4611      	mov	r1, r2
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3708      	adds	r7, #8
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800968e:	b480      	push	{r7}
 8009690:	b083      	sub	sp, #12
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80096ac:	2300      	movs	r3, #0
 80096ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00e      	beq.n	80096e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	6852      	ldr	r2, [r2, #4]
 80096ce:	b2d2      	uxtb	r2, r2
 80096d0:	4611      	mov	r1, r2
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	4798      	blx	r3
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d001      	beq.n	80096e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80096dc:	2303      	movs	r3, #3
 80096de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80096ea:	b480      	push	{r7}
 80096ec:	b083      	sub	sp, #12
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
 80096f2:	460b      	mov	r3, r1
 80096f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80096f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	460b      	mov	r3, r1
 800970e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009710:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009712:	4618      	mov	r0, r3
 8009714:	370c      	adds	r7, #12
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b086      	sub	sp, #24
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	460b      	mov	r3, r1
 8009728:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009732:	2300      	movs	r3, #0
 8009734:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	885b      	ldrh	r3, [r3, #2]
 800973a:	b29b      	uxth	r3, r3
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	7812      	ldrb	r2, [r2, #0]
 8009740:	4293      	cmp	r3, r2
 8009742:	d91f      	bls.n	8009784 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800974a:	e013      	b.n	8009774 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800974c:	f107 030a 	add.w	r3, r7, #10
 8009750:	4619      	mov	r1, r3
 8009752:	6978      	ldr	r0, [r7, #20]
 8009754:	f000 f81b 	bl	800978e <USBD_GetNextDesc>
 8009758:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	785b      	ldrb	r3, [r3, #1]
 800975e:	2b05      	cmp	r3, #5
 8009760:	d108      	bne.n	8009774 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	789b      	ldrb	r3, [r3, #2]
 800976a:	78fa      	ldrb	r2, [r7, #3]
 800976c:	429a      	cmp	r2, r3
 800976e:	d008      	beq.n	8009782 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009770:	2300      	movs	r3, #0
 8009772:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	885b      	ldrh	r3, [r3, #2]
 8009778:	b29a      	uxth	r2, r3
 800977a:	897b      	ldrh	r3, [r7, #10]
 800977c:	429a      	cmp	r2, r3
 800977e:	d8e5      	bhi.n	800974c <USBD_GetEpDesc+0x2e>
 8009780:	e000      	b.n	8009784 <USBD_GetEpDesc+0x66>
          break;
 8009782:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009784:	693b      	ldr	r3, [r7, #16]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3718      	adds	r7, #24
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800978e:	b480      	push	{r7}
 8009790:	b085      	sub	sp, #20
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
 8009796:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	881b      	ldrh	r3, [r3, #0]
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	7812      	ldrb	r2, [r2, #0]
 80097a4:	4413      	add	r3, r2
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	461a      	mov	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4413      	add	r3, r2
 80097b6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80097b8:	68fb      	ldr	r3, [r7, #12]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3714      	adds	r7, #20
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr

080097c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80097c6:	b480      	push	{r7}
 80097c8:	b087      	sub	sp, #28
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	3301      	adds	r3, #1
 80097dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80097e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80097e8:	021b      	lsls	r3, r3, #8
 80097ea:	b21a      	sxth	r2, r3
 80097ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	b21b      	sxth	r3, r3
 80097f4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80097f6:	89fb      	ldrh	r3, [r7, #14]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	371c      	adds	r7, #28
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800980e:	2300      	movs	r3, #0
 8009810:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800981a:	2b40      	cmp	r3, #64	@ 0x40
 800981c:	d005      	beq.n	800982a <USBD_StdDevReq+0x26>
 800981e:	2b40      	cmp	r3, #64	@ 0x40
 8009820:	d857      	bhi.n	80098d2 <USBD_StdDevReq+0xce>
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00f      	beq.n	8009846 <USBD_StdDevReq+0x42>
 8009826:	2b20      	cmp	r3, #32
 8009828:	d153      	bne.n	80098d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	32ae      	adds	r2, #174	@ 0xae
 8009834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	6839      	ldr	r1, [r7, #0]
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	4798      	blx	r3
 8009840:	4603      	mov	r3, r0
 8009842:	73fb      	strb	r3, [r7, #15]
      break;
 8009844:	e04a      	b.n	80098dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	785b      	ldrb	r3, [r3, #1]
 800984a:	2b09      	cmp	r3, #9
 800984c:	d83b      	bhi.n	80098c6 <USBD_StdDevReq+0xc2>
 800984e:	a201      	add	r2, pc, #4	@ (adr r2, 8009854 <USBD_StdDevReq+0x50>)
 8009850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009854:	080098a9 	.word	0x080098a9
 8009858:	080098bd 	.word	0x080098bd
 800985c:	080098c7 	.word	0x080098c7
 8009860:	080098b3 	.word	0x080098b3
 8009864:	080098c7 	.word	0x080098c7
 8009868:	08009887 	.word	0x08009887
 800986c:	0800987d 	.word	0x0800987d
 8009870:	080098c7 	.word	0x080098c7
 8009874:	0800989f 	.word	0x0800989f
 8009878:	08009891 	.word	0x08009891
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800987c:	6839      	ldr	r1, [r7, #0]
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 fa3c 	bl	8009cfc <USBD_GetDescriptor>
          break;
 8009884:	e024      	b.n	80098d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fba1 	bl	8009fd0 <USBD_SetAddress>
          break;
 800988e:	e01f      	b.n	80098d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009890:	6839      	ldr	r1, [r7, #0]
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fbe0 	bl	800a058 <USBD_SetConfig>
 8009898:	4603      	mov	r3, r0
 800989a:	73fb      	strb	r3, [r7, #15]
          break;
 800989c:	e018      	b.n	80098d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800989e:	6839      	ldr	r1, [r7, #0]
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 fc83 	bl	800a1ac <USBD_GetConfig>
          break;
 80098a6:	e013      	b.n	80098d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80098a8:	6839      	ldr	r1, [r7, #0]
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 fcb4 	bl	800a218 <USBD_GetStatus>
          break;
 80098b0:	e00e      	b.n	80098d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80098b2:	6839      	ldr	r1, [r7, #0]
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fce3 	bl	800a280 <USBD_SetFeature>
          break;
 80098ba:	e009      	b.n	80098d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80098bc:	6839      	ldr	r1, [r7, #0]
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fd07 	bl	800a2d2 <USBD_ClrFeature>
          break;
 80098c4:	e004      	b.n	80098d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80098c6:	6839      	ldr	r1, [r7, #0]
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fd5e 	bl	800a38a <USBD_CtlError>
          break;
 80098ce:	bf00      	nop
      }
      break;
 80098d0:	e004      	b.n	80098dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80098d2:	6839      	ldr	r1, [r7, #0]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 fd58 	bl	800a38a <USBD_CtlError>
      break;
 80098da:	bf00      	nop
  }

  return ret;
 80098dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop

080098e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098f2:	2300      	movs	r3, #0
 80098f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098fe:	2b40      	cmp	r3, #64	@ 0x40
 8009900:	d005      	beq.n	800990e <USBD_StdItfReq+0x26>
 8009902:	2b40      	cmp	r3, #64	@ 0x40
 8009904:	d852      	bhi.n	80099ac <USBD_StdItfReq+0xc4>
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <USBD_StdItfReq+0x26>
 800990a:	2b20      	cmp	r3, #32
 800990c:	d14e      	bne.n	80099ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009914:	b2db      	uxtb	r3, r3
 8009916:	3b01      	subs	r3, #1
 8009918:	2b02      	cmp	r3, #2
 800991a:	d840      	bhi.n	800999e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	889b      	ldrh	r3, [r3, #4]
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b01      	cmp	r3, #1
 8009924:	d836      	bhi.n	8009994 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	889b      	ldrh	r3, [r3, #4]
 800992a:	b2db      	uxtb	r3, r3
 800992c:	4619      	mov	r1, r3
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f7ff fedb 	bl	80096ea <USBD_CoreFindIF>
 8009934:	4603      	mov	r3, r0
 8009936:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009938:	7bbb      	ldrb	r3, [r7, #14]
 800993a:	2bff      	cmp	r3, #255	@ 0xff
 800993c:	d01d      	beq.n	800997a <USBD_StdItfReq+0x92>
 800993e:	7bbb      	ldrb	r3, [r7, #14]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d11a      	bne.n	800997a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009944:	7bba      	ldrb	r2, [r7, #14]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	32ae      	adds	r2, #174	@ 0xae
 800994a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d00f      	beq.n	8009974 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009954:	7bba      	ldrb	r2, [r7, #14]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800995c:	7bba      	ldrb	r2, [r7, #14]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	32ae      	adds	r2, #174	@ 0xae
 8009962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	6839      	ldr	r1, [r7, #0]
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	4798      	blx	r3
 800996e:	4603      	mov	r3, r0
 8009970:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009972:	e004      	b.n	800997e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009974:	2303      	movs	r3, #3
 8009976:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009978:	e001      	b.n	800997e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800997a:	2303      	movs	r3, #3
 800997c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	88db      	ldrh	r3, [r3, #6]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d110      	bne.n	80099a8 <USBD_StdItfReq+0xc0>
 8009986:	7bfb      	ldrb	r3, [r7, #15]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10d      	bne.n	80099a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 fdd3 	bl	800a538 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009992:	e009      	b.n	80099a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009994:	6839      	ldr	r1, [r7, #0]
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 fcf7 	bl	800a38a <USBD_CtlError>
          break;
 800999c:	e004      	b.n	80099a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800999e:	6839      	ldr	r1, [r7, #0]
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fcf2 	bl	800a38a <USBD_CtlError>
          break;
 80099a6:	e000      	b.n	80099aa <USBD_StdItfReq+0xc2>
          break;
 80099a8:	bf00      	nop
      }
      break;
 80099aa:	e004      	b.n	80099b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fceb 	bl	800a38a <USBD_CtlError>
      break;
 80099b4:	bf00      	nop
  }

  return ret;
 80099b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	889b      	ldrh	r3, [r3, #4]
 80099d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80099dc:	2b40      	cmp	r3, #64	@ 0x40
 80099de:	d007      	beq.n	80099f0 <USBD_StdEPReq+0x30>
 80099e0:	2b40      	cmp	r3, #64	@ 0x40
 80099e2:	f200 817f 	bhi.w	8009ce4 <USBD_StdEPReq+0x324>
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d02a      	beq.n	8009a40 <USBD_StdEPReq+0x80>
 80099ea:	2b20      	cmp	r3, #32
 80099ec:	f040 817a 	bne.w	8009ce4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80099f0:	7bbb      	ldrb	r3, [r7, #14]
 80099f2:	4619      	mov	r1, r3
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f7ff fe85 	bl	8009704 <USBD_CoreFindEP>
 80099fa:	4603      	mov	r3, r0
 80099fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099fe:	7b7b      	ldrb	r3, [r7, #13]
 8009a00:	2bff      	cmp	r3, #255	@ 0xff
 8009a02:	f000 8174 	beq.w	8009cee <USBD_StdEPReq+0x32e>
 8009a06:	7b7b      	ldrb	r3, [r7, #13]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f040 8170 	bne.w	8009cee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009a0e:	7b7a      	ldrb	r2, [r7, #13]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009a16:	7b7a      	ldrb	r2, [r7, #13]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	32ae      	adds	r2, #174	@ 0xae
 8009a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f000 8163 	beq.w	8009cee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009a28:	7b7a      	ldrb	r2, [r7, #13]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	32ae      	adds	r2, #174	@ 0xae
 8009a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	6839      	ldr	r1, [r7, #0]
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	4798      	blx	r3
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009a3e:	e156      	b.n	8009cee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	785b      	ldrb	r3, [r3, #1]
 8009a44:	2b03      	cmp	r3, #3
 8009a46:	d008      	beq.n	8009a5a <USBD_StdEPReq+0x9a>
 8009a48:	2b03      	cmp	r3, #3
 8009a4a:	f300 8145 	bgt.w	8009cd8 <USBD_StdEPReq+0x318>
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f000 809b 	beq.w	8009b8a <USBD_StdEPReq+0x1ca>
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d03c      	beq.n	8009ad2 <USBD_StdEPReq+0x112>
 8009a58:	e13e      	b.n	8009cd8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d002      	beq.n	8009a6c <USBD_StdEPReq+0xac>
 8009a66:	2b03      	cmp	r3, #3
 8009a68:	d016      	beq.n	8009a98 <USBD_StdEPReq+0xd8>
 8009a6a:	e02c      	b.n	8009ac6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a6c:	7bbb      	ldrb	r3, [r7, #14]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00d      	beq.n	8009a8e <USBD_StdEPReq+0xce>
 8009a72:	7bbb      	ldrb	r3, [r7, #14]
 8009a74:	2b80      	cmp	r3, #128	@ 0x80
 8009a76:	d00a      	beq.n	8009a8e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a78:	7bbb      	ldrb	r3, [r7, #14]
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f001 f979 	bl	800ad74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a82:	2180      	movs	r1, #128	@ 0x80
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f001 f975 	bl	800ad74 <USBD_LL_StallEP>
 8009a8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a8c:	e020      	b.n	8009ad0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009a8e:	6839      	ldr	r1, [r7, #0]
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 fc7a 	bl	800a38a <USBD_CtlError>
              break;
 8009a96:	e01b      	b.n	8009ad0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	885b      	ldrh	r3, [r3, #2]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10e      	bne.n	8009abe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009aa0:	7bbb      	ldrb	r3, [r7, #14]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00b      	beq.n	8009abe <USBD_StdEPReq+0xfe>
 8009aa6:	7bbb      	ldrb	r3, [r7, #14]
 8009aa8:	2b80      	cmp	r3, #128	@ 0x80
 8009aaa:	d008      	beq.n	8009abe <USBD_StdEPReq+0xfe>
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	88db      	ldrh	r3, [r3, #6]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d104      	bne.n	8009abe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ab4:	7bbb      	ldrb	r3, [r7, #14]
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f001 f95b 	bl	800ad74 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fd3a 	bl	800a538 <USBD_CtlSendStatus>

              break;
 8009ac4:	e004      	b.n	8009ad0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009ac6:	6839      	ldr	r1, [r7, #0]
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 fc5e 	bl	800a38a <USBD_CtlError>
              break;
 8009ace:	bf00      	nop
          }
          break;
 8009ad0:	e107      	b.n	8009ce2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d002      	beq.n	8009ae4 <USBD_StdEPReq+0x124>
 8009ade:	2b03      	cmp	r3, #3
 8009ae0:	d016      	beq.n	8009b10 <USBD_StdEPReq+0x150>
 8009ae2:	e04b      	b.n	8009b7c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ae4:	7bbb      	ldrb	r3, [r7, #14]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00d      	beq.n	8009b06 <USBD_StdEPReq+0x146>
 8009aea:	7bbb      	ldrb	r3, [r7, #14]
 8009aec:	2b80      	cmp	r3, #128	@ 0x80
 8009aee:	d00a      	beq.n	8009b06 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009af0:	7bbb      	ldrb	r3, [r7, #14]
 8009af2:	4619      	mov	r1, r3
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f001 f93d 	bl	800ad74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009afa:	2180      	movs	r1, #128	@ 0x80
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f001 f939 	bl	800ad74 <USBD_LL_StallEP>
 8009b02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b04:	e040      	b.n	8009b88 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009b06:	6839      	ldr	r1, [r7, #0]
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 fc3e 	bl	800a38a <USBD_CtlError>
              break;
 8009b0e:	e03b      	b.n	8009b88 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	885b      	ldrh	r3, [r3, #2]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d136      	bne.n	8009b86 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
 8009b1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d004      	beq.n	8009b2c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b22:	7bbb      	ldrb	r3, [r7, #14]
 8009b24:	4619      	mov	r1, r3
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f001 f943 	bl	800adb2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 fd03 	bl	800a538 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009b32:	7bbb      	ldrb	r3, [r7, #14]
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7ff fde4 	bl	8009704 <USBD_CoreFindEP>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b40:	7b7b      	ldrb	r3, [r7, #13]
 8009b42:	2bff      	cmp	r3, #255	@ 0xff
 8009b44:	d01f      	beq.n	8009b86 <USBD_StdEPReq+0x1c6>
 8009b46:	7b7b      	ldrb	r3, [r7, #13]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d11c      	bne.n	8009b86 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009b4c:	7b7a      	ldrb	r2, [r7, #13]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009b54:	7b7a      	ldrb	r2, [r7, #13]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	32ae      	adds	r2, #174	@ 0xae
 8009b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d010      	beq.n	8009b86 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b64:	7b7a      	ldrb	r2, [r7, #13]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	32ae      	adds	r2, #174	@ 0xae
 8009b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	6839      	ldr	r1, [r7, #0]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	4798      	blx	r3
 8009b76:	4603      	mov	r3, r0
 8009b78:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009b7a:	e004      	b.n	8009b86 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009b7c:	6839      	ldr	r1, [r7, #0]
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 fc03 	bl	800a38a <USBD_CtlError>
              break;
 8009b84:	e000      	b.n	8009b88 <USBD_StdEPReq+0x1c8>
              break;
 8009b86:	bf00      	nop
          }
          break;
 8009b88:	e0ab      	b.n	8009ce2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	d002      	beq.n	8009b9c <USBD_StdEPReq+0x1dc>
 8009b96:	2b03      	cmp	r3, #3
 8009b98:	d032      	beq.n	8009c00 <USBD_StdEPReq+0x240>
 8009b9a:	e097      	b.n	8009ccc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b9c:	7bbb      	ldrb	r3, [r7, #14]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d007      	beq.n	8009bb2 <USBD_StdEPReq+0x1f2>
 8009ba2:	7bbb      	ldrb	r3, [r7, #14]
 8009ba4:	2b80      	cmp	r3, #128	@ 0x80
 8009ba6:	d004      	beq.n	8009bb2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009ba8:	6839      	ldr	r1, [r7, #0]
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fbed 	bl	800a38a <USBD_CtlError>
                break;
 8009bb0:	e091      	b.n	8009cd6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	da0b      	bge.n	8009bd2 <USBD_StdEPReq+0x212>
 8009bba:	7bbb      	ldrb	r3, [r7, #14]
 8009bbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4413      	add	r3, r2
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	3310      	adds	r3, #16
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	4413      	add	r3, r2
 8009bce:	3304      	adds	r3, #4
 8009bd0:	e00b      	b.n	8009bea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009bd2:	7bbb      	ldrb	r3, [r7, #14]
 8009bd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bd8:	4613      	mov	r3, r2
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	4413      	add	r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	4413      	add	r3, r2
 8009be8:	3304      	adds	r3, #4
 8009bea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	2202      	movs	r2, #2
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 fc43 	bl	800a484 <USBD_CtlSendData>
              break;
 8009bfe:	e06a      	b.n	8009cd6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	da11      	bge.n	8009c2c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c08:	7bbb      	ldrb	r3, [r7, #14]
 8009c0a:	f003 020f 	and.w	r2, r3, #15
 8009c0e:	6879      	ldr	r1, [r7, #4]
 8009c10:	4613      	mov	r3, r2
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	4413      	add	r3, r2
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	440b      	add	r3, r1
 8009c1a:	3324      	adds	r3, #36	@ 0x24
 8009c1c:	881b      	ldrh	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d117      	bne.n	8009c52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009c22:	6839      	ldr	r1, [r7, #0]
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fbb0 	bl	800a38a <USBD_CtlError>
                  break;
 8009c2a:	e054      	b.n	8009cd6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c2c:	7bbb      	ldrb	r3, [r7, #14]
 8009c2e:	f003 020f 	and.w	r2, r3, #15
 8009c32:	6879      	ldr	r1, [r7, #4]
 8009c34:	4613      	mov	r3, r2
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	4413      	add	r3, r2
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	440b      	add	r3, r1
 8009c3e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009c42:	881b      	ldrh	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d104      	bne.n	8009c52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009c48:	6839      	ldr	r1, [r7, #0]
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 fb9d 	bl	800a38a <USBD_CtlError>
                  break;
 8009c50:	e041      	b.n	8009cd6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	da0b      	bge.n	8009c72 <USBD_StdEPReq+0x2b2>
 8009c5a:	7bbb      	ldrb	r3, [r7, #14]
 8009c5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c60:	4613      	mov	r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	4413      	add	r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	3310      	adds	r3, #16
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	3304      	adds	r3, #4
 8009c70:	e00b      	b.n	8009c8a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c72:	7bbb      	ldrb	r3, [r7, #14]
 8009c74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c78:	4613      	mov	r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4413      	add	r3, r2
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	4413      	add	r3, r2
 8009c88:	3304      	adds	r3, #4
 8009c8a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c8c:	7bbb      	ldrb	r3, [r7, #14]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d002      	beq.n	8009c98 <USBD_StdEPReq+0x2d8>
 8009c92:	7bbb      	ldrb	r3, [r7, #14]
 8009c94:	2b80      	cmp	r3, #128	@ 0x80
 8009c96:	d103      	bne.n	8009ca0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	601a      	str	r2, [r3, #0]
 8009c9e:	e00e      	b.n	8009cbe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009ca0:	7bbb      	ldrb	r3, [r7, #14]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f001 f8a3 	bl	800adf0 <USBD_LL_IsStallEP>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d003      	beq.n	8009cb8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	e002      	b.n	8009cbe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	2202      	movs	r2, #2
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 fbdd 	bl	800a484 <USBD_CtlSendData>
              break;
 8009cca:	e004      	b.n	8009cd6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009ccc:	6839      	ldr	r1, [r7, #0]
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 fb5b 	bl	800a38a <USBD_CtlError>
              break;
 8009cd4:	bf00      	nop
          }
          break;
 8009cd6:	e004      	b.n	8009ce2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009cd8:	6839      	ldr	r1, [r7, #0]
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 fb55 	bl	800a38a <USBD_CtlError>
          break;
 8009ce0:	bf00      	nop
      }
      break;
 8009ce2:	e005      	b.n	8009cf0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009ce4:	6839      	ldr	r1, [r7, #0]
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 fb4f 	bl	800a38a <USBD_CtlError>
      break;
 8009cec:	e000      	b.n	8009cf0 <USBD_StdEPReq+0x330>
      break;
 8009cee:	bf00      	nop
  }

  return ret;
 8009cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
	...

08009cfc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d06:	2300      	movs	r3, #0
 8009d08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	885b      	ldrh	r3, [r3, #2]
 8009d16:	0a1b      	lsrs	r3, r3, #8
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	2b06      	cmp	r3, #6
 8009d1e:	f200 8128 	bhi.w	8009f72 <USBD_GetDescriptor+0x276>
 8009d22:	a201      	add	r2, pc, #4	@ (adr r2, 8009d28 <USBD_GetDescriptor+0x2c>)
 8009d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d28:	08009d45 	.word	0x08009d45
 8009d2c:	08009d5d 	.word	0x08009d5d
 8009d30:	08009d9d 	.word	0x08009d9d
 8009d34:	08009f73 	.word	0x08009f73
 8009d38:	08009f73 	.word	0x08009f73
 8009d3c:	08009f13 	.word	0x08009f13
 8009d40:	08009f3f 	.word	0x08009f3f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	7c12      	ldrb	r2, [r2, #16]
 8009d50:	f107 0108 	add.w	r1, r7, #8
 8009d54:	4610      	mov	r0, r2
 8009d56:	4798      	blx	r3
 8009d58:	60f8      	str	r0, [r7, #12]
      break;
 8009d5a:	e112      	b.n	8009f82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	7c1b      	ldrb	r3, [r3, #16]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10d      	bne.n	8009d80 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d6c:	f107 0208 	add.w	r2, r7, #8
 8009d70:	4610      	mov	r0, r2
 8009d72:	4798      	blx	r3
 8009d74:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d7e:	e100      	b.n	8009f82 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d88:	f107 0208 	add.w	r2, r7, #8
 8009d8c:	4610      	mov	r0, r2
 8009d8e:	4798      	blx	r3
 8009d90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	3301      	adds	r3, #1
 8009d96:	2202      	movs	r2, #2
 8009d98:	701a      	strb	r2, [r3, #0]
      break;
 8009d9a:	e0f2      	b.n	8009f82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	885b      	ldrh	r3, [r3, #2]
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	2b05      	cmp	r3, #5
 8009da4:	f200 80ac 	bhi.w	8009f00 <USBD_GetDescriptor+0x204>
 8009da8:	a201      	add	r2, pc, #4	@ (adr r2, 8009db0 <USBD_GetDescriptor+0xb4>)
 8009daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dae:	bf00      	nop
 8009db0:	08009dc9 	.word	0x08009dc9
 8009db4:	08009dfd 	.word	0x08009dfd
 8009db8:	08009e31 	.word	0x08009e31
 8009dbc:	08009e65 	.word	0x08009e65
 8009dc0:	08009e99 	.word	0x08009e99
 8009dc4:	08009ecd 	.word	0x08009ecd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d00b      	beq.n	8009dec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	7c12      	ldrb	r2, [r2, #16]
 8009de0:	f107 0108 	add.w	r1, r7, #8
 8009de4:	4610      	mov	r0, r2
 8009de6:	4798      	blx	r3
 8009de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dea:	e091      	b.n	8009f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009dec:	6839      	ldr	r1, [r7, #0]
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 facb 	bl	800a38a <USBD_CtlError>
            err++;
 8009df4:	7afb      	ldrb	r3, [r7, #11]
 8009df6:	3301      	adds	r3, #1
 8009df8:	72fb      	strb	r3, [r7, #11]
          break;
 8009dfa:	e089      	b.n	8009f10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00b      	beq.n	8009e20 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	7c12      	ldrb	r2, [r2, #16]
 8009e14:	f107 0108 	add.w	r1, r7, #8
 8009e18:	4610      	mov	r0, r2
 8009e1a:	4798      	blx	r3
 8009e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e1e:	e077      	b.n	8009f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e20:	6839      	ldr	r1, [r7, #0]
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 fab1 	bl	800a38a <USBD_CtlError>
            err++;
 8009e28:	7afb      	ldrb	r3, [r7, #11]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e2e:	e06f      	b.n	8009f10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00b      	beq.n	8009e54 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	7c12      	ldrb	r2, [r2, #16]
 8009e48:	f107 0108 	add.w	r1, r7, #8
 8009e4c:	4610      	mov	r0, r2
 8009e4e:	4798      	blx	r3
 8009e50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e52:	e05d      	b.n	8009f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e54:	6839      	ldr	r1, [r7, #0]
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fa97 	bl	800a38a <USBD_CtlError>
            err++;
 8009e5c:	7afb      	ldrb	r3, [r7, #11]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	72fb      	strb	r3, [r7, #11]
          break;
 8009e62:	e055      	b.n	8009f10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00b      	beq.n	8009e88 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e76:	691b      	ldr	r3, [r3, #16]
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	7c12      	ldrb	r2, [r2, #16]
 8009e7c:	f107 0108 	add.w	r1, r7, #8
 8009e80:	4610      	mov	r0, r2
 8009e82:	4798      	blx	r3
 8009e84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e86:	e043      	b.n	8009f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e88:	6839      	ldr	r1, [r7, #0]
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 fa7d 	bl	800a38a <USBD_CtlError>
            err++;
 8009e90:	7afb      	ldrb	r3, [r7, #11]
 8009e92:	3301      	adds	r3, #1
 8009e94:	72fb      	strb	r3, [r7, #11]
          break;
 8009e96:	e03b      	b.n	8009f10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e9e:	695b      	ldr	r3, [r3, #20]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00b      	beq.n	8009ebc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009eaa:	695b      	ldr	r3, [r3, #20]
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	7c12      	ldrb	r2, [r2, #16]
 8009eb0:	f107 0108 	add.w	r1, r7, #8
 8009eb4:	4610      	mov	r0, r2
 8009eb6:	4798      	blx	r3
 8009eb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eba:	e029      	b.n	8009f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ebc:	6839      	ldr	r1, [r7, #0]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fa63 	bl	800a38a <USBD_CtlError>
            err++;
 8009ec4:	7afb      	ldrb	r3, [r7, #11]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	72fb      	strb	r3, [r7, #11]
          break;
 8009eca:	e021      	b.n	8009f10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ed2:	699b      	ldr	r3, [r3, #24]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00b      	beq.n	8009ef0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ede:	699b      	ldr	r3, [r3, #24]
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	7c12      	ldrb	r2, [r2, #16]
 8009ee4:	f107 0108 	add.w	r1, r7, #8
 8009ee8:	4610      	mov	r0, r2
 8009eea:	4798      	blx	r3
 8009eec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eee:	e00f      	b.n	8009f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ef0:	6839      	ldr	r1, [r7, #0]
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fa49 	bl	800a38a <USBD_CtlError>
            err++;
 8009ef8:	7afb      	ldrb	r3, [r7, #11]
 8009efa:	3301      	adds	r3, #1
 8009efc:	72fb      	strb	r3, [r7, #11]
          break;
 8009efe:	e007      	b.n	8009f10 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009f00:	6839      	ldr	r1, [r7, #0]
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 fa41 	bl	800a38a <USBD_CtlError>
          err++;
 8009f08:	7afb      	ldrb	r3, [r7, #11]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009f0e:	bf00      	nop
      }
      break;
 8009f10:	e037      	b.n	8009f82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	7c1b      	ldrb	r3, [r3, #16]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d109      	bne.n	8009f2e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f22:	f107 0208 	add.w	r2, r7, #8
 8009f26:	4610      	mov	r0, r2
 8009f28:	4798      	blx	r3
 8009f2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f2c:	e029      	b.n	8009f82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f2e:	6839      	ldr	r1, [r7, #0]
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fa2a 	bl	800a38a <USBD_CtlError>
        err++;
 8009f36:	7afb      	ldrb	r3, [r7, #11]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	72fb      	strb	r3, [r7, #11]
      break;
 8009f3c:	e021      	b.n	8009f82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	7c1b      	ldrb	r3, [r3, #16]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10d      	bne.n	8009f62 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f4e:	f107 0208 	add.w	r2, r7, #8
 8009f52:	4610      	mov	r0, r2
 8009f54:	4798      	blx	r3
 8009f56:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	2207      	movs	r2, #7
 8009f5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f60:	e00f      	b.n	8009f82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f62:	6839      	ldr	r1, [r7, #0]
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 fa10 	bl	800a38a <USBD_CtlError>
        err++;
 8009f6a:	7afb      	ldrb	r3, [r7, #11]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	72fb      	strb	r3, [r7, #11]
      break;
 8009f70:	e007      	b.n	8009f82 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009f72:	6839      	ldr	r1, [r7, #0]
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 fa08 	bl	800a38a <USBD_CtlError>
      err++;
 8009f7a:	7afb      	ldrb	r3, [r7, #11]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	72fb      	strb	r3, [r7, #11]
      break;
 8009f80:	bf00      	nop
  }

  if (err != 0U)
 8009f82:	7afb      	ldrb	r3, [r7, #11]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d11e      	bne.n	8009fc6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	88db      	ldrh	r3, [r3, #6]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d016      	beq.n	8009fbe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009f90:	893b      	ldrh	r3, [r7, #8]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00e      	beq.n	8009fb4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	88da      	ldrh	r2, [r3, #6]
 8009f9a:	893b      	ldrh	r3, [r7, #8]
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	bf28      	it	cs
 8009fa0:	4613      	movcs	r3, r2
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009fa6:	893b      	ldrh	r3, [r7, #8]
 8009fa8:	461a      	mov	r2, r3
 8009faa:	68f9      	ldr	r1, [r7, #12]
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 fa69 	bl	800a484 <USBD_CtlSendData>
 8009fb2:	e009      	b.n	8009fc8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009fb4:	6839      	ldr	r1, [r7, #0]
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 f9e7 	bl	800a38a <USBD_CtlError>
 8009fbc:	e004      	b.n	8009fc8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 faba 	bl	800a538 <USBD_CtlSendStatus>
 8009fc4:	e000      	b.n	8009fc8 <USBD_GetDescriptor+0x2cc>
    return;
 8009fc6:	bf00      	nop
  }
}
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop

08009fd0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	889b      	ldrh	r3, [r3, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d131      	bne.n	800a046 <USBD_SetAddress+0x76>
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	88db      	ldrh	r3, [r3, #6]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d12d      	bne.n	800a046 <USBD_SetAddress+0x76>
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	885b      	ldrh	r3, [r3, #2]
 8009fee:	2b7f      	cmp	r3, #127	@ 0x7f
 8009ff0:	d829      	bhi.n	800a046 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	885b      	ldrh	r3, [r3, #2]
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ffc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a004:	b2db      	uxtb	r3, r3
 800a006:	2b03      	cmp	r3, #3
 800a008:	d104      	bne.n	800a014 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a00a:	6839      	ldr	r1, [r7, #0]
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 f9bc 	bl	800a38a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a012:	e01d      	b.n	800a050 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	7bfa      	ldrb	r2, [r7, #15]
 800a018:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a01c:	7bfb      	ldrb	r3, [r7, #15]
 800a01e:	4619      	mov	r1, r3
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 ff11 	bl	800ae48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fa86 	bl	800a538 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d004      	beq.n	800a03c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2202      	movs	r2, #2
 800a036:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a03a:	e009      	b.n	800a050 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2201      	movs	r2, #1
 800a040:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a044:	e004      	b.n	800a050 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a046:	6839      	ldr	r1, [r7, #0]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f99e 	bl	800a38a <USBD_CtlError>
  }
}
 800a04e:	bf00      	nop
 800a050:	bf00      	nop
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a062:	2300      	movs	r3, #0
 800a064:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	885b      	ldrh	r3, [r3, #2]
 800a06a:	b2da      	uxtb	r2, r3
 800a06c:	4b4e      	ldr	r3, [pc, #312]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a06e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a070:	4b4d      	ldr	r3, [pc, #308]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d905      	bls.n	800a084 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a078:	6839      	ldr	r1, [r7, #0]
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 f985 	bl	800a38a <USBD_CtlError>
    return USBD_FAIL;
 800a080:	2303      	movs	r3, #3
 800a082:	e08c      	b.n	800a19e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	d002      	beq.n	800a096 <USBD_SetConfig+0x3e>
 800a090:	2b03      	cmp	r3, #3
 800a092:	d029      	beq.n	800a0e8 <USBD_SetConfig+0x90>
 800a094:	e075      	b.n	800a182 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a096:	4b44      	ldr	r3, [pc, #272]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d020      	beq.n	800a0e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a09e:	4b42      	ldr	r3, [pc, #264]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a0a8:	4b3f      	ldr	r3, [pc, #252]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f7fe ffe3 	bl	800907a <USBD_SetClassConfig>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a0b8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d008      	beq.n	800a0d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a0be:	6839      	ldr	r1, [r7, #0]
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 f962 	bl	800a38a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2202      	movs	r2, #2
 800a0ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0ce:	e065      	b.n	800a19c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 fa31 	bl	800a538 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2203      	movs	r2, #3
 800a0da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a0de:	e05d      	b.n	800a19c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 fa29 	bl	800a538 <USBD_CtlSendStatus>
      break;
 800a0e6:	e059      	b.n	800a19c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a0e8:	4b2f      	ldr	r3, [pc, #188]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d112      	bne.n	800a116 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2202      	movs	r2, #2
 800a0f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a0f8:	4b2b      	ldr	r3, [pc, #172]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a102:	4b29      	ldr	r3, [pc, #164]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	4619      	mov	r1, r3
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f7fe ffd2 	bl	80090b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 fa12 	bl	800a538 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a114:	e042      	b.n	800a19c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a116:	4b24      	ldr	r3, [pc, #144]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	461a      	mov	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	429a      	cmp	r2, r3
 800a122:	d02a      	beq.n	800a17a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	4619      	mov	r1, r3
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7fe ffc0 	bl	80090b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a132:	4b1d      	ldr	r3, [pc, #116]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	461a      	mov	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a13c:	4b1a      	ldr	r3, [pc, #104]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	4619      	mov	r1, r3
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f7fe ff99 	bl	800907a <USBD_SetClassConfig>
 800a148:	4603      	mov	r3, r0
 800a14a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a14c:	7bfb      	ldrb	r3, [r7, #15]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00f      	beq.n	800a172 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a152:	6839      	ldr	r1, [r7, #0]
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 f918 	bl	800a38a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	4619      	mov	r1, r3
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f7fe ffa5 	bl	80090b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2202      	movs	r2, #2
 800a16c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a170:	e014      	b.n	800a19c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f9e0 	bl	800a538 <USBD_CtlSendStatus>
      break;
 800a178:	e010      	b.n	800a19c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 f9dc 	bl	800a538 <USBD_CtlSendStatus>
      break;
 800a180:	e00c      	b.n	800a19c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a182:	6839      	ldr	r1, [r7, #0]
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f900 	bl	800a38a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a18a:	4b07      	ldr	r3, [pc, #28]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7fe ff8e 	bl	80090b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a196:	2303      	movs	r3, #3
 800a198:	73fb      	strb	r3, [r7, #15]
      break;
 800a19a:	bf00      	nop
  }

  return ret;
 800a19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	2000050c 	.word	0x2000050c

0800a1ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	88db      	ldrh	r3, [r3, #6]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d004      	beq.n	800a1c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a1be:	6839      	ldr	r1, [r7, #0]
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 f8e2 	bl	800a38a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a1c6:	e023      	b.n	800a210 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	2b02      	cmp	r3, #2
 800a1d2:	dc02      	bgt.n	800a1da <USBD_GetConfig+0x2e>
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	dc03      	bgt.n	800a1e0 <USBD_GetConfig+0x34>
 800a1d8:	e015      	b.n	800a206 <USBD_GetConfig+0x5a>
 800a1da:	2b03      	cmp	r3, #3
 800a1dc:	d00b      	beq.n	800a1f6 <USBD_GetConfig+0x4a>
 800a1de:	e012      	b.n	800a206 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	3308      	adds	r3, #8
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 f948 	bl	800a484 <USBD_CtlSendData>
        break;
 800a1f4:	e00c      	b.n	800a210 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	3304      	adds	r3, #4
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 f940 	bl	800a484 <USBD_CtlSendData>
        break;
 800a204:	e004      	b.n	800a210 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a206:	6839      	ldr	r1, [r7, #0]
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 f8be 	bl	800a38a <USBD_CtlError>
        break;
 800a20e:	bf00      	nop
}
 800a210:	bf00      	nop
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	3b01      	subs	r3, #1
 800a22c:	2b02      	cmp	r3, #2
 800a22e:	d81e      	bhi.n	800a26e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	88db      	ldrh	r3, [r3, #6]
 800a234:	2b02      	cmp	r3, #2
 800a236:	d004      	beq.n	800a242 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a238:	6839      	ldr	r1, [r7, #0]
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 f8a5 	bl	800a38a <USBD_CtlError>
        break;
 800a240:	e01a      	b.n	800a278 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2201      	movs	r2, #1
 800a246:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d005      	beq.n	800a25e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	f043 0202 	orr.w	r2, r3, #2
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	330c      	adds	r3, #12
 800a262:	2202      	movs	r2, #2
 800a264:	4619      	mov	r1, r3
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 f90c 	bl	800a484 <USBD_CtlSendData>
      break;
 800a26c:	e004      	b.n	800a278 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a26e:	6839      	ldr	r1, [r7, #0]
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 f88a 	bl	800a38a <USBD_CtlError>
      break;
 800a276:	bf00      	nop
  }
}
 800a278:	bf00      	nop
 800a27a:	3708      	adds	r7, #8
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	885b      	ldrh	r3, [r3, #2]
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d107      	bne.n	800a2a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2201      	movs	r2, #1
 800a296:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f94c 	bl	800a538 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a2a0:	e013      	b.n	800a2ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	885b      	ldrh	r3, [r3, #2]
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d10b      	bne.n	800a2c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	889b      	ldrh	r3, [r3, #4]
 800a2ae:	0a1b      	lsrs	r3, r3, #8
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	b2da      	uxtb	r2, r3
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 f93c 	bl	800a538 <USBD_CtlSendStatus>
}
 800a2c0:	e003      	b.n	800a2ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a2c2:	6839      	ldr	r1, [r7, #0]
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 f860 	bl	800a38a <USBD_CtlError>
}
 800a2ca:	bf00      	nop
 800a2cc:	3708      	adds	r7, #8
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b082      	sub	sp, #8
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
 800a2da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d80b      	bhi.n	800a302 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	885b      	ldrh	r3, [r3, #2]
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d10c      	bne.n	800a30c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 f91c 	bl	800a538 <USBD_CtlSendStatus>
      }
      break;
 800a300:	e004      	b.n	800a30c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a302:	6839      	ldr	r1, [r7, #0]
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 f840 	bl	800a38a <USBD_CtlError>
      break;
 800a30a:	e000      	b.n	800a30e <USBD_ClrFeature+0x3c>
      break;
 800a30c:	bf00      	nop
  }
}
 800a30e:	bf00      	nop
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a316:	b580      	push	{r7, lr}
 800a318:	b084      	sub	sp, #16
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
 800a31e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	781a      	ldrb	r2, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	3301      	adds	r3, #1
 800a330:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	781a      	ldrb	r2, [r3, #0]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	3301      	adds	r3, #1
 800a33e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f7ff fa40 	bl	80097c6 <SWAPBYTE>
 800a346:	4603      	mov	r3, r0
 800a348:	461a      	mov	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	3301      	adds	r3, #1
 800a352:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	3301      	adds	r3, #1
 800a358:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f7ff fa33 	bl	80097c6 <SWAPBYTE>
 800a360:	4603      	mov	r3, r0
 800a362:	461a      	mov	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	3301      	adds	r3, #1
 800a36c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	3301      	adds	r3, #1
 800a372:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f7ff fa26 	bl	80097c6 <SWAPBYTE>
 800a37a:	4603      	mov	r3, r0
 800a37c:	461a      	mov	r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	80da      	strh	r2, [r3, #6]
}
 800a382:	bf00      	nop
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b082      	sub	sp, #8
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
 800a392:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a394:	2180      	movs	r1, #128	@ 0x80
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 fcec 	bl	800ad74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a39c:	2100      	movs	r1, #0
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 fce8 	bl	800ad74 <USBD_LL_StallEP>
}
 800a3a4:	bf00      	nop
 800a3a6:	3708      	adds	r7, #8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d042      	beq.n	800a448 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a3c6:	6938      	ldr	r0, [r7, #16]
 800a3c8:	f000 f842 	bl	800a450 <USBD_GetLen>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	005b      	lsls	r3, r3, #1
 800a3d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3d6:	d808      	bhi.n	800a3ea <USBD_GetString+0x3e>
 800a3d8:	6938      	ldr	r0, [r7, #16]
 800a3da:	f000 f839 	bl	800a450 <USBD_GetLen>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	005b      	lsls	r3, r3, #1
 800a3e6:	b29a      	uxth	r2, r3
 800a3e8:	e001      	b.n	800a3ee <USBD_GetString+0x42>
 800a3ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a3f2:	7dfb      	ldrb	r3, [r7, #23]
 800a3f4:	68ba      	ldr	r2, [r7, #8]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	7812      	ldrb	r2, [r2, #0]
 800a3fc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3fe:	7dfb      	ldrb	r3, [r7, #23]
 800a400:	3301      	adds	r3, #1
 800a402:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a404:	7dfb      	ldrb	r3, [r7, #23]
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	4413      	add	r3, r2
 800a40a:	2203      	movs	r2, #3
 800a40c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a40e:	7dfb      	ldrb	r3, [r7, #23]
 800a410:	3301      	adds	r3, #1
 800a412:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a414:	e013      	b.n	800a43e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a416:	7dfb      	ldrb	r3, [r7, #23]
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	4413      	add	r3, r2
 800a41c:	693a      	ldr	r2, [r7, #16]
 800a41e:	7812      	ldrb	r2, [r2, #0]
 800a420:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	3301      	adds	r3, #1
 800a426:	613b      	str	r3, [r7, #16]
    idx++;
 800a428:	7dfb      	ldrb	r3, [r7, #23]
 800a42a:	3301      	adds	r3, #1
 800a42c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a42e:	7dfb      	ldrb	r3, [r7, #23]
 800a430:	68ba      	ldr	r2, [r7, #8]
 800a432:	4413      	add	r3, r2
 800a434:	2200      	movs	r2, #0
 800a436:	701a      	strb	r2, [r3, #0]
    idx++;
 800a438:	7dfb      	ldrb	r3, [r7, #23]
 800a43a:	3301      	adds	r3, #1
 800a43c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1e7      	bne.n	800a416 <USBD_GetString+0x6a>
 800a446:	e000      	b.n	800a44a <USBD_GetString+0x9e>
    return;
 800a448:	bf00      	nop
  }
}
 800a44a:	3718      	adds	r7, #24
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a458:	2300      	movs	r3, #0
 800a45a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a460:	e005      	b.n	800a46e <USBD_GetLen+0x1e>
  {
    len++;
 800a462:	7bfb      	ldrb	r3, [r7, #15]
 800a464:	3301      	adds	r3, #1
 800a466:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	3301      	adds	r3, #1
 800a46c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d1f5      	bne.n	800a462 <USBD_GetLen+0x12>
  }

  return len;
 800a476:	7bfb      	ldrb	r3, [r7, #15]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3714      	adds	r7, #20
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2202      	movs	r2, #2
 800a494:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	68ba      	ldr	r2, [r7, #8]
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f000 fceb 	bl	800ae86 <USBD_LL_Transmit>

  return USBD_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b084      	sub	sp, #16
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	60f8      	str	r0, [r7, #12]
 800a4c2:	60b9      	str	r1, [r7, #8]
 800a4c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	2100      	movs	r1, #0
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f000 fcda 	bl	800ae86 <USBD_LL_Transmit>

  return USBD_OK;
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2203      	movs	r2, #3
 800a4ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	68ba      	ldr	r2, [r7, #8]
 800a504:	2100      	movs	r1, #0
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	f000 fcde 	bl	800aec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b084      	sub	sp, #16
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	60f8      	str	r0, [r7, #12]
 800a51e:	60b9      	str	r1, [r7, #8]
 800a520:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	68ba      	ldr	r2, [r7, #8]
 800a526:	2100      	movs	r1, #0
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f000 fccd 	bl	800aec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2204      	movs	r2, #4
 800a544:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a548:	2300      	movs	r3, #0
 800a54a:	2200      	movs	r2, #0
 800a54c:	2100      	movs	r1, #0
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 fc99 	bl	800ae86 <USBD_LL_Transmit>

  return USBD_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3708      	adds	r7, #8
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b082      	sub	sp, #8
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2205      	movs	r2, #5
 800a56a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a56e:	2300      	movs	r3, #0
 800a570:	2200      	movs	r2, #0
 800a572:	2100      	movs	r1, #0
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 fca7 	bl	800aec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a588:	2200      	movs	r2, #0
 800a58a:	4912      	ldr	r1, [pc, #72]	@ (800a5d4 <MX_USB_DEVICE_Init+0x50>)
 800a58c:	4812      	ldr	r0, [pc, #72]	@ (800a5d8 <MX_USB_DEVICE_Init+0x54>)
 800a58e:	f7fe fcf7 	bl	8008f80 <USBD_Init>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d001      	beq.n	800a59c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a598:	f7f8 fe38 	bl	800320c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a59c:	490f      	ldr	r1, [pc, #60]	@ (800a5dc <MX_USB_DEVICE_Init+0x58>)
 800a59e:	480e      	ldr	r0, [pc, #56]	@ (800a5d8 <MX_USB_DEVICE_Init+0x54>)
 800a5a0:	f7fe fd1e 	bl	8008fe0 <USBD_RegisterClass>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d001      	beq.n	800a5ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a5aa:	f7f8 fe2f 	bl	800320c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a5ae:	490c      	ldr	r1, [pc, #48]	@ (800a5e0 <MX_USB_DEVICE_Init+0x5c>)
 800a5b0:	4809      	ldr	r0, [pc, #36]	@ (800a5d8 <MX_USB_DEVICE_Init+0x54>)
 800a5b2:	f7fe fc15 	bl	8008de0 <USBD_CDC_RegisterInterface>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d001      	beq.n	800a5c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a5bc:	f7f8 fe26 	bl	800320c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a5c0:	4805      	ldr	r0, [pc, #20]	@ (800a5d8 <MX_USB_DEVICE_Init+0x54>)
 800a5c2:	f7fe fd43 	bl	800904c <USBD_Start>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d001      	beq.n	800a5d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a5cc:	f7f8 fe1e 	bl	800320c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a5d0:	bf00      	nop
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	200000b0 	.word	0x200000b0
 800a5d8:	20000510 	.word	0x20000510
 800a5dc:	2000001c 	.word	0x2000001c
 800a5e0:	2000009c 	.word	0x2000009c

0800a5e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	4905      	ldr	r1, [pc, #20]	@ (800a600 <CDC_Init_FS+0x1c>)
 800a5ec:	4805      	ldr	r0, [pc, #20]	@ (800a604 <CDC_Init_FS+0x20>)
 800a5ee:	f7fe fc11 	bl	8008e14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a5f2:	4905      	ldr	r1, [pc, #20]	@ (800a608 <CDC_Init_FS+0x24>)
 800a5f4:	4803      	ldr	r0, [pc, #12]	@ (800a604 <CDC_Init_FS+0x20>)
 800a5f6:	f7fe fc2f 	bl	8008e58 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a5fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	20000fec 	.word	0x20000fec
 800a604:	20000510 	.word	0x20000510
 800a608:	200007ec 	.word	0x200007ec

0800a60c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a60c:	b480      	push	{r7}
 800a60e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a610:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a612:	4618      	mov	r0, r3
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	4603      	mov	r3, r0
 800a624:	6039      	str	r1, [r7, #0]
 800a626:	71fb      	strb	r3, [r7, #7]
 800a628:	4613      	mov	r3, r2
 800a62a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a62c:	79fb      	ldrb	r3, [r7, #7]
 800a62e:	2b23      	cmp	r3, #35	@ 0x23
 800a630:	d84a      	bhi.n	800a6c8 <CDC_Control_FS+0xac>
 800a632:	a201      	add	r2, pc, #4	@ (adr r2, 800a638 <CDC_Control_FS+0x1c>)
 800a634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a638:	0800a6c9 	.word	0x0800a6c9
 800a63c:	0800a6c9 	.word	0x0800a6c9
 800a640:	0800a6c9 	.word	0x0800a6c9
 800a644:	0800a6c9 	.word	0x0800a6c9
 800a648:	0800a6c9 	.word	0x0800a6c9
 800a64c:	0800a6c9 	.word	0x0800a6c9
 800a650:	0800a6c9 	.word	0x0800a6c9
 800a654:	0800a6c9 	.word	0x0800a6c9
 800a658:	0800a6c9 	.word	0x0800a6c9
 800a65c:	0800a6c9 	.word	0x0800a6c9
 800a660:	0800a6c9 	.word	0x0800a6c9
 800a664:	0800a6c9 	.word	0x0800a6c9
 800a668:	0800a6c9 	.word	0x0800a6c9
 800a66c:	0800a6c9 	.word	0x0800a6c9
 800a670:	0800a6c9 	.word	0x0800a6c9
 800a674:	0800a6c9 	.word	0x0800a6c9
 800a678:	0800a6c9 	.word	0x0800a6c9
 800a67c:	0800a6c9 	.word	0x0800a6c9
 800a680:	0800a6c9 	.word	0x0800a6c9
 800a684:	0800a6c9 	.word	0x0800a6c9
 800a688:	0800a6c9 	.word	0x0800a6c9
 800a68c:	0800a6c9 	.word	0x0800a6c9
 800a690:	0800a6c9 	.word	0x0800a6c9
 800a694:	0800a6c9 	.word	0x0800a6c9
 800a698:	0800a6c9 	.word	0x0800a6c9
 800a69c:	0800a6c9 	.word	0x0800a6c9
 800a6a0:	0800a6c9 	.word	0x0800a6c9
 800a6a4:	0800a6c9 	.word	0x0800a6c9
 800a6a8:	0800a6c9 	.word	0x0800a6c9
 800a6ac:	0800a6c9 	.word	0x0800a6c9
 800a6b0:	0800a6c9 	.word	0x0800a6c9
 800a6b4:	0800a6c9 	.word	0x0800a6c9
 800a6b8:	0800a6c9 	.word	0x0800a6c9
 800a6bc:	0800a6c9 	.word	0x0800a6c9
 800a6c0:	0800a6c9 	.word	0x0800a6c9
 800a6c4:	0800a6c9 	.word	0x0800a6c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a6c8:	bf00      	nop
  }

  return (USBD_OK);
 800a6ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a6e2:	6879      	ldr	r1, [r7, #4]
 800a6e4:	4805      	ldr	r0, [pc, #20]	@ (800a6fc <CDC_Receive_FS+0x24>)
 800a6e6:	f7fe fbb7 	bl	8008e58 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a6ea:	4804      	ldr	r0, [pc, #16]	@ (800a6fc <CDC_Receive_FS+0x24>)
 800a6ec:	f7fe fc12 	bl	8008f14 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a6f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20000510 	.word	0x20000510

0800a700 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	460b      	mov	r3, r1
 800a70a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a70c:	2300      	movs	r3, #0
 800a70e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a710:	4b0d      	ldr	r3, [pc, #52]	@ (800a748 <CDC_Transmit_FS+0x48>)
 800a712:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a716:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d001      	beq.n	800a726 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a722:	2301      	movs	r3, #1
 800a724:	e00b      	b.n	800a73e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a726:	887b      	ldrh	r3, [r7, #2]
 800a728:	461a      	mov	r2, r3
 800a72a:	6879      	ldr	r1, [r7, #4]
 800a72c:	4806      	ldr	r0, [pc, #24]	@ (800a748 <CDC_Transmit_FS+0x48>)
 800a72e:	f7fe fb71 	bl	8008e14 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a732:	4805      	ldr	r0, [pc, #20]	@ (800a748 <CDC_Transmit_FS+0x48>)
 800a734:	f7fe fbae 	bl	8008e94 <USBD_CDC_TransmitPacket>
 800a738:	4603      	mov	r3, r0
 800a73a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a73c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	20000510 	.word	0x20000510

0800a74c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b087      	sub	sp, #28
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	4613      	mov	r3, r2
 800a758:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a75e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a762:	4618      	mov	r0, r3
 800a764:	371c      	adds	r7, #28
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr
	...

0800a770 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	4603      	mov	r3, r0
 800a778:	6039      	str	r1, [r7, #0]
 800a77a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	2212      	movs	r2, #18
 800a780:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a782:	4b03      	ldr	r3, [pc, #12]	@ (800a790 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a784:	4618      	mov	r0, r3
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr
 800a790:	200000cc 	.word	0x200000cc

0800a794 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	4603      	mov	r3, r0
 800a79c:	6039      	str	r1, [r7, #0]
 800a79e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	2204      	movs	r2, #4
 800a7a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a7a6:	4b03      	ldr	r3, [pc, #12]	@ (800a7b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr
 800a7b4:	200000e0 	.word	0x200000e0

0800a7b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	4603      	mov	r3, r0
 800a7c0:	6039      	str	r1, [r7, #0]
 800a7c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7c4:	79fb      	ldrb	r3, [r7, #7]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d105      	bne.n	800a7d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7ca:	683a      	ldr	r2, [r7, #0]
 800a7cc:	4907      	ldr	r1, [pc, #28]	@ (800a7ec <USBD_FS_ProductStrDescriptor+0x34>)
 800a7ce:	4808      	ldr	r0, [pc, #32]	@ (800a7f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7d0:	f7ff fdec 	bl	800a3ac <USBD_GetString>
 800a7d4:	e004      	b.n	800a7e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7d6:	683a      	ldr	r2, [r7, #0]
 800a7d8:	4904      	ldr	r1, [pc, #16]	@ (800a7ec <USBD_FS_ProductStrDescriptor+0x34>)
 800a7da:	4805      	ldr	r0, [pc, #20]	@ (800a7f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7dc:	f7ff fde6 	bl	800a3ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7e0:	4b02      	ldr	r3, [pc, #8]	@ (800a7ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3708      	adds	r7, #8
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	200017ec 	.word	0x200017ec
 800a7f0:	0800d904 	.word	0x0800d904

0800a7f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	6039      	str	r1, [r7, #0]
 800a7fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a800:	683a      	ldr	r2, [r7, #0]
 800a802:	4904      	ldr	r1, [pc, #16]	@ (800a814 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a804:	4804      	ldr	r0, [pc, #16]	@ (800a818 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a806:	f7ff fdd1 	bl	800a3ac <USBD_GetString>
  return USBD_StrDesc;
 800a80a:	4b02      	ldr	r3, [pc, #8]	@ (800a814 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3708      	adds	r7, #8
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	200017ec 	.word	0x200017ec
 800a818:	0800d91c 	.word	0x0800d91c

0800a81c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	4603      	mov	r3, r0
 800a824:	6039      	str	r1, [r7, #0]
 800a826:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	221a      	movs	r2, #26
 800a82c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a82e:	f000 f843 	bl	800a8b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a832:	4b02      	ldr	r3, [pc, #8]	@ (800a83c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a834:	4618      	mov	r0, r3
 800a836:	3708      	adds	r7, #8
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	200000e4 	.word	0x200000e4

0800a840 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	4603      	mov	r3, r0
 800a848:	6039      	str	r1, [r7, #0]
 800a84a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a84c:	79fb      	ldrb	r3, [r7, #7]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d105      	bne.n	800a85e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a852:	683a      	ldr	r2, [r7, #0]
 800a854:	4907      	ldr	r1, [pc, #28]	@ (800a874 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a856:	4808      	ldr	r0, [pc, #32]	@ (800a878 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a858:	f7ff fda8 	bl	800a3ac <USBD_GetString>
 800a85c:	e004      	b.n	800a868 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a85e:	683a      	ldr	r2, [r7, #0]
 800a860:	4904      	ldr	r1, [pc, #16]	@ (800a874 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a862:	4805      	ldr	r0, [pc, #20]	@ (800a878 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a864:	f7ff fda2 	bl	800a3ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800a868:	4b02      	ldr	r3, [pc, #8]	@ (800a874 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	200017ec 	.word	0x200017ec
 800a878:	0800d930 	.word	0x0800d930

0800a87c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	4603      	mov	r3, r0
 800a884:	6039      	str	r1, [r7, #0]
 800a886:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a888:	79fb      	ldrb	r3, [r7, #7]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d105      	bne.n	800a89a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a88e:	683a      	ldr	r2, [r7, #0]
 800a890:	4907      	ldr	r1, [pc, #28]	@ (800a8b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a892:	4808      	ldr	r0, [pc, #32]	@ (800a8b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a894:	f7ff fd8a 	bl	800a3ac <USBD_GetString>
 800a898:	e004      	b.n	800a8a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a89a:	683a      	ldr	r2, [r7, #0]
 800a89c:	4904      	ldr	r1, [pc, #16]	@ (800a8b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a89e:	4805      	ldr	r0, [pc, #20]	@ (800a8b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8a0:	f7ff fd84 	bl	800a3ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8a4:	4b02      	ldr	r3, [pc, #8]	@ (800a8b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	200017ec 	.word	0x200017ec
 800a8b4:	0800d93c 	.word	0x0800d93c

0800a8b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a8be:	4b0f      	ldr	r3, [pc, #60]	@ (800a8fc <Get_SerialNum+0x44>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a8c4:	4b0e      	ldr	r3, [pc, #56]	@ (800a900 <Get_SerialNum+0x48>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a8ca:	4b0e      	ldr	r3, [pc, #56]	@ (800a904 <Get_SerialNum+0x4c>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a8d0:	68fa      	ldr	r2, [r7, #12]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d009      	beq.n	800a8f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a8de:	2208      	movs	r2, #8
 800a8e0:	4909      	ldr	r1, [pc, #36]	@ (800a908 <Get_SerialNum+0x50>)
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f000 f814 	bl	800a910 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a8e8:	2204      	movs	r2, #4
 800a8ea:	4908      	ldr	r1, [pc, #32]	@ (800a90c <Get_SerialNum+0x54>)
 800a8ec:	68b8      	ldr	r0, [r7, #8]
 800a8ee:	f000 f80f 	bl	800a910 <IntToUnicode>
  }
}
 800a8f2:	bf00      	nop
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	1fff7a10 	.word	0x1fff7a10
 800a900:	1fff7a14 	.word	0x1fff7a14
 800a904:	1fff7a18 	.word	0x1fff7a18
 800a908:	200000e6 	.word	0x200000e6
 800a90c:	200000f6 	.word	0x200000f6

0800a910 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a910:	b480      	push	{r7}
 800a912:	b087      	sub	sp, #28
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	4613      	mov	r3, r2
 800a91c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a91e:	2300      	movs	r3, #0
 800a920:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a922:	2300      	movs	r3, #0
 800a924:	75fb      	strb	r3, [r7, #23]
 800a926:	e027      	b.n	800a978 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	0f1b      	lsrs	r3, r3, #28
 800a92c:	2b09      	cmp	r3, #9
 800a92e:	d80b      	bhi.n	800a948 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	0f1b      	lsrs	r3, r3, #28
 800a934:	b2da      	uxtb	r2, r3
 800a936:	7dfb      	ldrb	r3, [r7, #23]
 800a938:	005b      	lsls	r3, r3, #1
 800a93a:	4619      	mov	r1, r3
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	440b      	add	r3, r1
 800a940:	3230      	adds	r2, #48	@ 0x30
 800a942:	b2d2      	uxtb	r2, r2
 800a944:	701a      	strb	r2, [r3, #0]
 800a946:	e00a      	b.n	800a95e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	0f1b      	lsrs	r3, r3, #28
 800a94c:	b2da      	uxtb	r2, r3
 800a94e:	7dfb      	ldrb	r3, [r7, #23]
 800a950:	005b      	lsls	r3, r3, #1
 800a952:	4619      	mov	r1, r3
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	440b      	add	r3, r1
 800a958:	3237      	adds	r2, #55	@ 0x37
 800a95a:	b2d2      	uxtb	r2, r2
 800a95c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	011b      	lsls	r3, r3, #4
 800a962:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a964:	7dfb      	ldrb	r3, [r7, #23]
 800a966:	005b      	lsls	r3, r3, #1
 800a968:	3301      	adds	r3, #1
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	4413      	add	r3, r2
 800a96e:	2200      	movs	r2, #0
 800a970:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a972:	7dfb      	ldrb	r3, [r7, #23]
 800a974:	3301      	adds	r3, #1
 800a976:	75fb      	strb	r3, [r7, #23]
 800a978:	7dfa      	ldrb	r2, [r7, #23]
 800a97a:	79fb      	ldrb	r3, [r7, #7]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d3d3      	bcc.n	800a928 <IntToUnicode+0x18>
  }
}
 800a980:	bf00      	nop
 800a982:	bf00      	nop
 800a984:	371c      	adds	r7, #28
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
	...

0800a990 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b08a      	sub	sp, #40	@ 0x28
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a998:	f107 0314 	add.w	r3, r7, #20
 800a99c:	2200      	movs	r2, #0
 800a99e:	601a      	str	r2, [r3, #0]
 800a9a0:	605a      	str	r2, [r3, #4]
 800a9a2:	609a      	str	r2, [r3, #8]
 800a9a4:	60da      	str	r2, [r3, #12]
 800a9a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a9b0:	d13a      	bne.n	800aa28 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	613b      	str	r3, [r7, #16]
 800a9b6:	4b1e      	ldr	r3, [pc, #120]	@ (800aa30 <HAL_PCD_MspInit+0xa0>)
 800a9b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9ba:	4a1d      	ldr	r2, [pc, #116]	@ (800aa30 <HAL_PCD_MspInit+0xa0>)
 800a9bc:	f043 0301 	orr.w	r3, r3, #1
 800a9c0:	6313      	str	r3, [r2, #48]	@ 0x30
 800a9c2:	4b1b      	ldr	r3, [pc, #108]	@ (800aa30 <HAL_PCD_MspInit+0xa0>)
 800a9c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9c6:	f003 0301 	and.w	r3, r3, #1
 800a9ca:	613b      	str	r3, [r7, #16]
 800a9cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a9ce:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a9d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9d4:	2302      	movs	r3, #2
 800a9d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9dc:	2303      	movs	r3, #3
 800a9de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a9e0:	230a      	movs	r3, #10
 800a9e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9e4:	f107 0314 	add.w	r3, r7, #20
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	4812      	ldr	r0, [pc, #72]	@ (800aa34 <HAL_PCD_MspInit+0xa4>)
 800a9ec:	f7f9 f826 	bl	8003a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a9f0:	4b0f      	ldr	r3, [pc, #60]	@ (800aa30 <HAL_PCD_MspInit+0xa0>)
 800a9f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9f4:	4a0e      	ldr	r2, [pc, #56]	@ (800aa30 <HAL_PCD_MspInit+0xa0>)
 800a9f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9fa:	6353      	str	r3, [r2, #52]	@ 0x34
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	60fb      	str	r3, [r7, #12]
 800aa00:	4b0b      	ldr	r3, [pc, #44]	@ (800aa30 <HAL_PCD_MspInit+0xa0>)
 800aa02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa04:	4a0a      	ldr	r2, [pc, #40]	@ (800aa30 <HAL_PCD_MspInit+0xa0>)
 800aa06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800aa0a:	6453      	str	r3, [r2, #68]	@ 0x44
 800aa0c:	4b08      	ldr	r3, [pc, #32]	@ (800aa30 <HAL_PCD_MspInit+0xa0>)
 800aa0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aa14:	60fb      	str	r3, [r7, #12]
 800aa16:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800aa18:	2200      	movs	r2, #0
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	2043      	movs	r0, #67	@ 0x43
 800aa1e:	f7f8 ffd6 	bl	80039ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aa22:	2043      	movs	r0, #67	@ 0x43
 800aa24:	f7f8 ffef 	bl	8003a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aa28:	bf00      	nop
 800aa2a:	3728      	adds	r7, #40	@ 0x28
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	40023800 	.word	0x40023800
 800aa34:	40020000 	.word	0x40020000

0800aa38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	4610      	mov	r0, r2
 800aa50:	f7fe fb49 	bl	80090e6 <USBD_LL_SetupStage>
}
 800aa54:	bf00      	nop
 800aa56:	3708      	adds	r7, #8
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	460b      	mov	r3, r1
 800aa66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aa6e:	78fa      	ldrb	r2, [r7, #3]
 800aa70:	6879      	ldr	r1, [r7, #4]
 800aa72:	4613      	mov	r3, r2
 800aa74:	00db      	lsls	r3, r3, #3
 800aa76:	4413      	add	r3, r2
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	440b      	add	r3, r1
 800aa7c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	78fb      	ldrb	r3, [r7, #3]
 800aa84:	4619      	mov	r1, r3
 800aa86:	f7fe fb83 	bl	8009190 <USBD_LL_DataOutStage>
}
 800aa8a:	bf00      	nop
 800aa8c:	3708      	adds	r7, #8
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b082      	sub	sp, #8
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aaa4:	78fa      	ldrb	r2, [r7, #3]
 800aaa6:	6879      	ldr	r1, [r7, #4]
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	00db      	lsls	r3, r3, #3
 800aaac:	4413      	add	r3, r2
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	440b      	add	r3, r1
 800aab2:	3320      	adds	r3, #32
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	78fb      	ldrb	r3, [r7, #3]
 800aab8:	4619      	mov	r1, r3
 800aaba:	f7fe fc1c 	bl	80092f6 <USBD_LL_DataInStage>
}
 800aabe:	bf00      	nop
 800aac0:	3708      	adds	r7, #8
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b082      	sub	sp, #8
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7fe fd56 	bl	8009586 <USBD_LL_SOF>
}
 800aada:	bf00      	nop
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b084      	sub	sp, #16
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aaea:	2301      	movs	r3, #1
 800aaec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	79db      	ldrb	r3, [r3, #7]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d102      	bne.n	800aafc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	73fb      	strb	r3, [r7, #15]
 800aafa:	e008      	b.n	800ab0e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	79db      	ldrb	r3, [r3, #7]
 800ab00:	2b02      	cmp	r3, #2
 800ab02:	d102      	bne.n	800ab0a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ab04:	2301      	movs	r3, #1
 800ab06:	73fb      	strb	r3, [r7, #15]
 800ab08:	e001      	b.n	800ab0e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ab0a:	f7f8 fb7f 	bl	800320c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab14:	7bfa      	ldrb	r2, [r7, #15]
 800ab16:	4611      	mov	r1, r2
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7fe fcf0 	bl	80094fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab24:	4618      	mov	r0, r3
 800ab26:	f7fe fc98 	bl	800945a <USBD_LL_Reset>
}
 800ab2a:	bf00      	nop
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
	...

0800ab34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b082      	sub	sp, #8
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab42:	4618      	mov	r0, r3
 800ab44:	f7fe fceb 	bl	800951e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	6812      	ldr	r2, [r2, #0]
 800ab56:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ab5a:	f043 0301 	orr.w	r3, r3, #1
 800ab5e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	7adb      	ldrb	r3, [r3, #11]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d005      	beq.n	800ab74 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab68:	4b04      	ldr	r3, [pc, #16]	@ (800ab7c <HAL_PCD_SuspendCallback+0x48>)
 800ab6a:	691b      	ldr	r3, [r3, #16]
 800ab6c:	4a03      	ldr	r2, [pc, #12]	@ (800ab7c <HAL_PCD_SuspendCallback+0x48>)
 800ab6e:	f043 0306 	orr.w	r3, r3, #6
 800ab72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab74:	bf00      	nop
 800ab76:	3708      	adds	r7, #8
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	e000ed00 	.word	0xe000ed00

0800ab80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fe fce1 	bl	8009556 <USBD_LL_Resume>
}
 800ab94:	bf00      	nop
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	460b      	mov	r3, r1
 800aba6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abae:	78fa      	ldrb	r2, [r7, #3]
 800abb0:	4611      	mov	r1, r2
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7fe fd39 	bl	800962a <USBD_LL_IsoOUTIncomplete>
}
 800abb8:	bf00      	nop
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	460b      	mov	r3, r1
 800abca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abd2:	78fa      	ldrb	r2, [r7, #3]
 800abd4:	4611      	mov	r1, r2
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7fe fcf5 	bl	80095c6 <USBD_LL_IsoINIncomplete>
}
 800abdc:	bf00      	nop
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7fe fd4b 	bl	800968e <USBD_LL_DevConnected>
}
 800abf8:	bf00      	nop
 800abfa:	3708      	adds	r7, #8
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7fe fd48 	bl	80096a4 <USBD_LL_DevDisconnected>
}
 800ac14:	bf00      	nop
 800ac16:	3708      	adds	r7, #8
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d13c      	bne.n	800aca6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ac2c:	4a20      	ldr	r2, [pc, #128]	@ (800acb0 <USBD_LL_Init+0x94>)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	4a1e      	ldr	r2, [pc, #120]	@ (800acb0 <USBD_LL_Init+0x94>)
 800ac38:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ac3c:	4b1c      	ldr	r3, [pc, #112]	@ (800acb0 <USBD_LL_Init+0x94>)
 800ac3e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ac42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ac44:	4b1a      	ldr	r3, [pc, #104]	@ (800acb0 <USBD_LL_Init+0x94>)
 800ac46:	2204      	movs	r2, #4
 800ac48:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ac4a:	4b19      	ldr	r3, [pc, #100]	@ (800acb0 <USBD_LL_Init+0x94>)
 800ac4c:	2202      	movs	r2, #2
 800ac4e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ac50:	4b17      	ldr	r3, [pc, #92]	@ (800acb0 <USBD_LL_Init+0x94>)
 800ac52:	2200      	movs	r2, #0
 800ac54:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ac56:	4b16      	ldr	r3, [pc, #88]	@ (800acb0 <USBD_LL_Init+0x94>)
 800ac58:	2202      	movs	r2, #2
 800ac5a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ac5c:	4b14      	ldr	r3, [pc, #80]	@ (800acb0 <USBD_LL_Init+0x94>)
 800ac5e:	2200      	movs	r2, #0
 800ac60:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ac62:	4b13      	ldr	r3, [pc, #76]	@ (800acb0 <USBD_LL_Init+0x94>)
 800ac64:	2200      	movs	r2, #0
 800ac66:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ac68:	4b11      	ldr	r3, [pc, #68]	@ (800acb0 <USBD_LL_Init+0x94>)
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ac6e:	4b10      	ldr	r3, [pc, #64]	@ (800acb0 <USBD_LL_Init+0x94>)
 800ac70:	2200      	movs	r2, #0
 800ac72:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ac74:	4b0e      	ldr	r3, [pc, #56]	@ (800acb0 <USBD_LL_Init+0x94>)
 800ac76:	2200      	movs	r2, #0
 800ac78:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ac7a:	480d      	ldr	r0, [pc, #52]	@ (800acb0 <USBD_LL_Init+0x94>)
 800ac7c:	f7f9 f87a 	bl	8003d74 <HAL_PCD_Init>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d001      	beq.n	800ac8a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ac86:	f7f8 fac1 	bl	800320c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ac8a:	2180      	movs	r1, #128	@ 0x80
 800ac8c:	4808      	ldr	r0, [pc, #32]	@ (800acb0 <USBD_LL_Init+0x94>)
 800ac8e:	f7fa faa6 	bl	80051de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ac92:	2240      	movs	r2, #64	@ 0x40
 800ac94:	2100      	movs	r1, #0
 800ac96:	4806      	ldr	r0, [pc, #24]	@ (800acb0 <USBD_LL_Init+0x94>)
 800ac98:	f7fa fa5a 	bl	8005150 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ac9c:	2280      	movs	r2, #128	@ 0x80
 800ac9e:	2101      	movs	r1, #1
 800aca0:	4803      	ldr	r0, [pc, #12]	@ (800acb0 <USBD_LL_Init+0x94>)
 800aca2:	f7fa fa55 	bl	8005150 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800aca6:	2300      	movs	r3, #0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	200019ec 	.word	0x200019ec

0800acb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acbc:	2300      	movs	r3, #0
 800acbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acc0:	2300      	movs	r3, #0
 800acc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800acca:	4618      	mov	r0, r3
 800accc:	f7f9 f961 	bl	8003f92 <HAL_PCD_Start>
 800acd0:	4603      	mov	r3, r0
 800acd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acd4:	7bfb      	ldrb	r3, [r7, #15]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 f942 	bl	800af60 <USBD_Get_USB_Status>
 800acdc:	4603      	mov	r3, r0
 800acde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ace0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b084      	sub	sp, #16
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
 800acf2:	4608      	mov	r0, r1
 800acf4:	4611      	mov	r1, r2
 800acf6:	461a      	mov	r2, r3
 800acf8:	4603      	mov	r3, r0
 800acfa:	70fb      	strb	r3, [r7, #3]
 800acfc:	460b      	mov	r3, r1
 800acfe:	70bb      	strb	r3, [r7, #2]
 800ad00:	4613      	mov	r3, r2
 800ad02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad04:	2300      	movs	r3, #0
 800ad06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ad12:	78bb      	ldrb	r3, [r7, #2]
 800ad14:	883a      	ldrh	r2, [r7, #0]
 800ad16:	78f9      	ldrb	r1, [r7, #3]
 800ad18:	f7f9 fe35 	bl	8004986 <HAL_PCD_EP_Open>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad20:	7bfb      	ldrb	r3, [r7, #15]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f000 f91c 	bl	800af60 <USBD_Get_USB_Status>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b084      	sub	sp, #16
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
 800ad3e:	460b      	mov	r3, r1
 800ad40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad42:	2300      	movs	r3, #0
 800ad44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad46:	2300      	movs	r3, #0
 800ad48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad50:	78fa      	ldrb	r2, [r7, #3]
 800ad52:	4611      	mov	r1, r2
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7f9 fe80 	bl	8004a5a <HAL_PCD_EP_Close>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad5e:	7bfb      	ldrb	r3, [r7, #15]
 800ad60:	4618      	mov	r0, r3
 800ad62:	f000 f8fd 	bl	800af60 <USBD_Get_USB_Status>
 800ad66:	4603      	mov	r3, r0
 800ad68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad80:	2300      	movs	r3, #0
 800ad82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad84:	2300      	movs	r3, #0
 800ad86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad8e:	78fa      	ldrb	r2, [r7, #3]
 800ad90:	4611      	mov	r1, r2
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7f9 ff38 	bl	8004c08 <HAL_PCD_EP_SetStall>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad9c:	7bfb      	ldrb	r3, [r7, #15]
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f000 f8de 	bl	800af60 <USBD_Get_USB_Status>
 800ada4:	4603      	mov	r3, r0
 800ada6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ada8:	7bbb      	ldrb	r3, [r7, #14]
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b084      	sub	sp, #16
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
 800adba:	460b      	mov	r3, r1
 800adbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adbe:	2300      	movs	r3, #0
 800adc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adc2:	2300      	movs	r3, #0
 800adc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800adcc:	78fa      	ldrb	r2, [r7, #3]
 800adce:	4611      	mov	r1, r2
 800add0:	4618      	mov	r0, r3
 800add2:	f7f9 ff7c 	bl	8004cce <HAL_PCD_EP_ClrStall>
 800add6:	4603      	mov	r3, r0
 800add8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adda:	7bfb      	ldrb	r3, [r7, #15]
 800addc:	4618      	mov	r0, r3
 800adde:	f000 f8bf 	bl	800af60 <USBD_Get_USB_Status>
 800ade2:	4603      	mov	r3, r0
 800ade4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ade6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b085      	sub	sp, #20
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	460b      	mov	r3, r1
 800adfa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ae04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	da0b      	bge.n	800ae24 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ae0c:	78fb      	ldrb	r3, [r7, #3]
 800ae0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae12:	68f9      	ldr	r1, [r7, #12]
 800ae14:	4613      	mov	r3, r2
 800ae16:	00db      	lsls	r3, r3, #3
 800ae18:	4413      	add	r3, r2
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	440b      	add	r3, r1
 800ae1e:	3316      	adds	r3, #22
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	e00b      	b.n	800ae3c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ae24:	78fb      	ldrb	r3, [r7, #3]
 800ae26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae2a:	68f9      	ldr	r1, [r7, #12]
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	00db      	lsls	r3, r3, #3
 800ae30:	4413      	add	r3, r2
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	440b      	add	r3, r1
 800ae36:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ae3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3714      	adds	r7, #20
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	460b      	mov	r3, r1
 800ae52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae54:	2300      	movs	r3, #0
 800ae56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae62:	78fa      	ldrb	r2, [r7, #3]
 800ae64:	4611      	mov	r1, r2
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7f9 fd69 	bl	800493e <HAL_PCD_SetAddress>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae70:	7bfb      	ldrb	r3, [r7, #15]
 800ae72:	4618      	mov	r0, r3
 800ae74:	f000 f874 	bl	800af60 <USBD_Get_USB_Status>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3710      	adds	r7, #16
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b086      	sub	sp, #24
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	60f8      	str	r0, [r7, #12]
 800ae8e:	607a      	str	r2, [r7, #4]
 800ae90:	603b      	str	r3, [r7, #0]
 800ae92:	460b      	mov	r3, r1
 800ae94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae96:	2300      	movs	r3, #0
 800ae98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aea4:	7af9      	ldrb	r1, [r7, #11]
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	f7f9 fe73 	bl	8004b94 <HAL_PCD_EP_Transmit>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeb2:	7dfb      	ldrb	r3, [r7, #23]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f000 f853 	bl	800af60 <USBD_Get_USB_Status>
 800aeba:	4603      	mov	r3, r0
 800aebc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aebe:	7dbb      	ldrb	r3, [r7, #22]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3718      	adds	r7, #24
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b086      	sub	sp, #24
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	607a      	str	r2, [r7, #4]
 800aed2:	603b      	str	r3, [r7, #0]
 800aed4:	460b      	mov	r3, r1
 800aed6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aed8:	2300      	movs	r3, #0
 800aeda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aedc:	2300      	movs	r3, #0
 800aede:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aee6:	7af9      	ldrb	r1, [r7, #11]
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	f7f9 fdff 	bl	8004aee <HAL_PCD_EP_Receive>
 800aef0:	4603      	mov	r3, r0
 800aef2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aef4:	7dfb      	ldrb	r3, [r7, #23]
 800aef6:	4618      	mov	r0, r3
 800aef8:	f000 f832 	bl	800af60 <USBD_Get_USB_Status>
 800aefc:	4603      	mov	r3, r0
 800aefe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af00:	7dbb      	ldrb	r3, [r7, #22]
}
 800af02:	4618      	mov	r0, r3
 800af04:	3718      	adds	r7, #24
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}

0800af0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b082      	sub	sp, #8
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
 800af12:	460b      	mov	r3, r1
 800af14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af1c:	78fa      	ldrb	r2, [r7, #3]
 800af1e:	4611      	mov	r1, r2
 800af20:	4618      	mov	r0, r3
 800af22:	f7f9 fe1f 	bl	8004b64 <HAL_PCD_EP_GetRxCount>
 800af26:	4603      	mov	r3, r0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3708      	adds	r7, #8
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800af30:	b480      	push	{r7}
 800af32:	b083      	sub	sp, #12
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800af38:	4b03      	ldr	r3, [pc, #12]	@ (800af48 <USBD_static_malloc+0x18>)
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	370c      	adds	r7, #12
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	20001ed0 	.word	0x20001ed0

0800af4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]

}
 800af54:	bf00      	nop
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	4603      	mov	r3, r0
 800af68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af6a:	2300      	movs	r3, #0
 800af6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af6e:	79fb      	ldrb	r3, [r7, #7]
 800af70:	2b03      	cmp	r3, #3
 800af72:	d817      	bhi.n	800afa4 <USBD_Get_USB_Status+0x44>
 800af74:	a201      	add	r2, pc, #4	@ (adr r2, 800af7c <USBD_Get_USB_Status+0x1c>)
 800af76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af7a:	bf00      	nop
 800af7c:	0800af8d 	.word	0x0800af8d
 800af80:	0800af93 	.word	0x0800af93
 800af84:	0800af99 	.word	0x0800af99
 800af88:	0800af9f 	.word	0x0800af9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af8c:	2300      	movs	r3, #0
 800af8e:	73fb      	strb	r3, [r7, #15]
    break;
 800af90:	e00b      	b.n	800afaa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af92:	2303      	movs	r3, #3
 800af94:	73fb      	strb	r3, [r7, #15]
    break;
 800af96:	e008      	b.n	800afaa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af98:	2301      	movs	r3, #1
 800af9a:	73fb      	strb	r3, [r7, #15]
    break;
 800af9c:	e005      	b.n	800afaa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af9e:	2303      	movs	r3, #3
 800afa0:	73fb      	strb	r3, [r7, #15]
    break;
 800afa2:	e002      	b.n	800afaa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800afa4:	2303      	movs	r3, #3
 800afa6:	73fb      	strb	r3, [r7, #15]
    break;
 800afa8:	bf00      	nop
  }
  return usb_status;
 800afaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800afac:	4618      	mov	r0, r3
 800afae:	3714      	adds	r7, #20
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <__assert_func>:
 800afb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afba:	4614      	mov	r4, r2
 800afbc:	461a      	mov	r2, r3
 800afbe:	4b09      	ldr	r3, [pc, #36]	@ (800afe4 <__assert_func+0x2c>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4605      	mov	r5, r0
 800afc4:	68d8      	ldr	r0, [r3, #12]
 800afc6:	b14c      	cbz	r4, 800afdc <__assert_func+0x24>
 800afc8:	4b07      	ldr	r3, [pc, #28]	@ (800afe8 <__assert_func+0x30>)
 800afca:	9100      	str	r1, [sp, #0]
 800afcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800afd0:	4906      	ldr	r1, [pc, #24]	@ (800afec <__assert_func+0x34>)
 800afd2:	462b      	mov	r3, r5
 800afd4:	f000 fdbe 	bl	800bb54 <fiprintf>
 800afd8:	f000 febf 	bl	800bd5a <abort>
 800afdc:	4b04      	ldr	r3, [pc, #16]	@ (800aff0 <__assert_func+0x38>)
 800afde:	461c      	mov	r4, r3
 800afe0:	e7f3      	b.n	800afca <__assert_func+0x12>
 800afe2:	bf00      	nop
 800afe4:	2000010c 	.word	0x2000010c
 800afe8:	0800d9c0 	.word	0x0800d9c0
 800afec:	0800d9cd 	.word	0x0800d9cd
 800aff0:	0800d9fb 	.word	0x0800d9fb

0800aff4 <malloc>:
 800aff4:	4b02      	ldr	r3, [pc, #8]	@ (800b000 <malloc+0xc>)
 800aff6:	4601      	mov	r1, r0
 800aff8:	6818      	ldr	r0, [r3, #0]
 800affa:	f000 b825 	b.w	800b048 <_malloc_r>
 800affe:	bf00      	nop
 800b000:	2000010c 	.word	0x2000010c

0800b004 <sbrk_aligned>:
 800b004:	b570      	push	{r4, r5, r6, lr}
 800b006:	4e0f      	ldr	r6, [pc, #60]	@ (800b044 <sbrk_aligned+0x40>)
 800b008:	460c      	mov	r4, r1
 800b00a:	6831      	ldr	r1, [r6, #0]
 800b00c:	4605      	mov	r5, r0
 800b00e:	b911      	cbnz	r1, 800b016 <sbrk_aligned+0x12>
 800b010:	f000 fe54 	bl	800bcbc <_sbrk_r>
 800b014:	6030      	str	r0, [r6, #0]
 800b016:	4621      	mov	r1, r4
 800b018:	4628      	mov	r0, r5
 800b01a:	f000 fe4f 	bl	800bcbc <_sbrk_r>
 800b01e:	1c43      	adds	r3, r0, #1
 800b020:	d103      	bne.n	800b02a <sbrk_aligned+0x26>
 800b022:	f04f 34ff 	mov.w	r4, #4294967295
 800b026:	4620      	mov	r0, r4
 800b028:	bd70      	pop	{r4, r5, r6, pc}
 800b02a:	1cc4      	adds	r4, r0, #3
 800b02c:	f024 0403 	bic.w	r4, r4, #3
 800b030:	42a0      	cmp	r0, r4
 800b032:	d0f8      	beq.n	800b026 <sbrk_aligned+0x22>
 800b034:	1a21      	subs	r1, r4, r0
 800b036:	4628      	mov	r0, r5
 800b038:	f000 fe40 	bl	800bcbc <_sbrk_r>
 800b03c:	3001      	adds	r0, #1
 800b03e:	d1f2      	bne.n	800b026 <sbrk_aligned+0x22>
 800b040:	e7ef      	b.n	800b022 <sbrk_aligned+0x1e>
 800b042:	bf00      	nop
 800b044:	200020f0 	.word	0x200020f0

0800b048 <_malloc_r>:
 800b048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b04c:	1ccd      	adds	r5, r1, #3
 800b04e:	f025 0503 	bic.w	r5, r5, #3
 800b052:	3508      	adds	r5, #8
 800b054:	2d0c      	cmp	r5, #12
 800b056:	bf38      	it	cc
 800b058:	250c      	movcc	r5, #12
 800b05a:	2d00      	cmp	r5, #0
 800b05c:	4606      	mov	r6, r0
 800b05e:	db01      	blt.n	800b064 <_malloc_r+0x1c>
 800b060:	42a9      	cmp	r1, r5
 800b062:	d904      	bls.n	800b06e <_malloc_r+0x26>
 800b064:	230c      	movs	r3, #12
 800b066:	6033      	str	r3, [r6, #0]
 800b068:	2000      	movs	r0, #0
 800b06a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b06e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b144 <_malloc_r+0xfc>
 800b072:	f000 f869 	bl	800b148 <__malloc_lock>
 800b076:	f8d8 3000 	ldr.w	r3, [r8]
 800b07a:	461c      	mov	r4, r3
 800b07c:	bb44      	cbnz	r4, 800b0d0 <_malloc_r+0x88>
 800b07e:	4629      	mov	r1, r5
 800b080:	4630      	mov	r0, r6
 800b082:	f7ff ffbf 	bl	800b004 <sbrk_aligned>
 800b086:	1c43      	adds	r3, r0, #1
 800b088:	4604      	mov	r4, r0
 800b08a:	d158      	bne.n	800b13e <_malloc_r+0xf6>
 800b08c:	f8d8 4000 	ldr.w	r4, [r8]
 800b090:	4627      	mov	r7, r4
 800b092:	2f00      	cmp	r7, #0
 800b094:	d143      	bne.n	800b11e <_malloc_r+0xd6>
 800b096:	2c00      	cmp	r4, #0
 800b098:	d04b      	beq.n	800b132 <_malloc_r+0xea>
 800b09a:	6823      	ldr	r3, [r4, #0]
 800b09c:	4639      	mov	r1, r7
 800b09e:	4630      	mov	r0, r6
 800b0a0:	eb04 0903 	add.w	r9, r4, r3
 800b0a4:	f000 fe0a 	bl	800bcbc <_sbrk_r>
 800b0a8:	4581      	cmp	r9, r0
 800b0aa:	d142      	bne.n	800b132 <_malloc_r+0xea>
 800b0ac:	6821      	ldr	r1, [r4, #0]
 800b0ae:	1a6d      	subs	r5, r5, r1
 800b0b0:	4629      	mov	r1, r5
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	f7ff ffa6 	bl	800b004 <sbrk_aligned>
 800b0b8:	3001      	adds	r0, #1
 800b0ba:	d03a      	beq.n	800b132 <_malloc_r+0xea>
 800b0bc:	6823      	ldr	r3, [r4, #0]
 800b0be:	442b      	add	r3, r5
 800b0c0:	6023      	str	r3, [r4, #0]
 800b0c2:	f8d8 3000 	ldr.w	r3, [r8]
 800b0c6:	685a      	ldr	r2, [r3, #4]
 800b0c8:	bb62      	cbnz	r2, 800b124 <_malloc_r+0xdc>
 800b0ca:	f8c8 7000 	str.w	r7, [r8]
 800b0ce:	e00f      	b.n	800b0f0 <_malloc_r+0xa8>
 800b0d0:	6822      	ldr	r2, [r4, #0]
 800b0d2:	1b52      	subs	r2, r2, r5
 800b0d4:	d420      	bmi.n	800b118 <_malloc_r+0xd0>
 800b0d6:	2a0b      	cmp	r2, #11
 800b0d8:	d917      	bls.n	800b10a <_malloc_r+0xc2>
 800b0da:	1961      	adds	r1, r4, r5
 800b0dc:	42a3      	cmp	r3, r4
 800b0de:	6025      	str	r5, [r4, #0]
 800b0e0:	bf18      	it	ne
 800b0e2:	6059      	strne	r1, [r3, #4]
 800b0e4:	6863      	ldr	r3, [r4, #4]
 800b0e6:	bf08      	it	eq
 800b0e8:	f8c8 1000 	streq.w	r1, [r8]
 800b0ec:	5162      	str	r2, [r4, r5]
 800b0ee:	604b      	str	r3, [r1, #4]
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	f000 f82f 	bl	800b154 <__malloc_unlock>
 800b0f6:	f104 000b 	add.w	r0, r4, #11
 800b0fa:	1d23      	adds	r3, r4, #4
 800b0fc:	f020 0007 	bic.w	r0, r0, #7
 800b100:	1ac2      	subs	r2, r0, r3
 800b102:	bf1c      	itt	ne
 800b104:	1a1b      	subne	r3, r3, r0
 800b106:	50a3      	strne	r3, [r4, r2]
 800b108:	e7af      	b.n	800b06a <_malloc_r+0x22>
 800b10a:	6862      	ldr	r2, [r4, #4]
 800b10c:	42a3      	cmp	r3, r4
 800b10e:	bf0c      	ite	eq
 800b110:	f8c8 2000 	streq.w	r2, [r8]
 800b114:	605a      	strne	r2, [r3, #4]
 800b116:	e7eb      	b.n	800b0f0 <_malloc_r+0xa8>
 800b118:	4623      	mov	r3, r4
 800b11a:	6864      	ldr	r4, [r4, #4]
 800b11c:	e7ae      	b.n	800b07c <_malloc_r+0x34>
 800b11e:	463c      	mov	r4, r7
 800b120:	687f      	ldr	r7, [r7, #4]
 800b122:	e7b6      	b.n	800b092 <_malloc_r+0x4a>
 800b124:	461a      	mov	r2, r3
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	42a3      	cmp	r3, r4
 800b12a:	d1fb      	bne.n	800b124 <_malloc_r+0xdc>
 800b12c:	2300      	movs	r3, #0
 800b12e:	6053      	str	r3, [r2, #4]
 800b130:	e7de      	b.n	800b0f0 <_malloc_r+0xa8>
 800b132:	230c      	movs	r3, #12
 800b134:	6033      	str	r3, [r6, #0]
 800b136:	4630      	mov	r0, r6
 800b138:	f000 f80c 	bl	800b154 <__malloc_unlock>
 800b13c:	e794      	b.n	800b068 <_malloc_r+0x20>
 800b13e:	6005      	str	r5, [r0, #0]
 800b140:	e7d6      	b.n	800b0f0 <_malloc_r+0xa8>
 800b142:	bf00      	nop
 800b144:	200020f4 	.word	0x200020f4

0800b148 <__malloc_lock>:
 800b148:	4801      	ldr	r0, [pc, #4]	@ (800b150 <__malloc_lock+0x8>)
 800b14a:	f000 be04 	b.w	800bd56 <__retarget_lock_acquire_recursive>
 800b14e:	bf00      	nop
 800b150:	20002238 	.word	0x20002238

0800b154 <__malloc_unlock>:
 800b154:	4801      	ldr	r0, [pc, #4]	@ (800b15c <__malloc_unlock+0x8>)
 800b156:	f000 bdff 	b.w	800bd58 <__retarget_lock_release_recursive>
 800b15a:	bf00      	nop
 800b15c:	20002238 	.word	0x20002238

0800b160 <__cvt>:
 800b160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b164:	ec57 6b10 	vmov	r6, r7, d0
 800b168:	2f00      	cmp	r7, #0
 800b16a:	460c      	mov	r4, r1
 800b16c:	4619      	mov	r1, r3
 800b16e:	463b      	mov	r3, r7
 800b170:	bfbb      	ittet	lt
 800b172:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b176:	461f      	movlt	r7, r3
 800b178:	2300      	movge	r3, #0
 800b17a:	232d      	movlt	r3, #45	@ 0x2d
 800b17c:	700b      	strb	r3, [r1, #0]
 800b17e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b180:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b184:	4691      	mov	r9, r2
 800b186:	f023 0820 	bic.w	r8, r3, #32
 800b18a:	bfbc      	itt	lt
 800b18c:	4632      	movlt	r2, r6
 800b18e:	4616      	movlt	r6, r2
 800b190:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b194:	d005      	beq.n	800b1a2 <__cvt+0x42>
 800b196:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b19a:	d100      	bne.n	800b19e <__cvt+0x3e>
 800b19c:	3401      	adds	r4, #1
 800b19e:	2102      	movs	r1, #2
 800b1a0:	e000      	b.n	800b1a4 <__cvt+0x44>
 800b1a2:	2103      	movs	r1, #3
 800b1a4:	ab03      	add	r3, sp, #12
 800b1a6:	9301      	str	r3, [sp, #4]
 800b1a8:	ab02      	add	r3, sp, #8
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	ec47 6b10 	vmov	d0, r6, r7
 800b1b0:	4653      	mov	r3, sl
 800b1b2:	4622      	mov	r2, r4
 800b1b4:	f000 fe60 	bl	800be78 <_dtoa_r>
 800b1b8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b1bc:	4605      	mov	r5, r0
 800b1be:	d119      	bne.n	800b1f4 <__cvt+0x94>
 800b1c0:	f019 0f01 	tst.w	r9, #1
 800b1c4:	d00e      	beq.n	800b1e4 <__cvt+0x84>
 800b1c6:	eb00 0904 	add.w	r9, r0, r4
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	4630      	mov	r0, r6
 800b1d0:	4639      	mov	r1, r7
 800b1d2:	f7f5 fc79 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1d6:	b108      	cbz	r0, 800b1dc <__cvt+0x7c>
 800b1d8:	f8cd 900c 	str.w	r9, [sp, #12]
 800b1dc:	2230      	movs	r2, #48	@ 0x30
 800b1de:	9b03      	ldr	r3, [sp, #12]
 800b1e0:	454b      	cmp	r3, r9
 800b1e2:	d31e      	bcc.n	800b222 <__cvt+0xc2>
 800b1e4:	9b03      	ldr	r3, [sp, #12]
 800b1e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1e8:	1b5b      	subs	r3, r3, r5
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	6013      	str	r3, [r2, #0]
 800b1ee:	b004      	add	sp, #16
 800b1f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b1f8:	eb00 0904 	add.w	r9, r0, r4
 800b1fc:	d1e5      	bne.n	800b1ca <__cvt+0x6a>
 800b1fe:	7803      	ldrb	r3, [r0, #0]
 800b200:	2b30      	cmp	r3, #48	@ 0x30
 800b202:	d10a      	bne.n	800b21a <__cvt+0xba>
 800b204:	2200      	movs	r2, #0
 800b206:	2300      	movs	r3, #0
 800b208:	4630      	mov	r0, r6
 800b20a:	4639      	mov	r1, r7
 800b20c:	f7f5 fc5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b210:	b918      	cbnz	r0, 800b21a <__cvt+0xba>
 800b212:	f1c4 0401 	rsb	r4, r4, #1
 800b216:	f8ca 4000 	str.w	r4, [sl]
 800b21a:	f8da 3000 	ldr.w	r3, [sl]
 800b21e:	4499      	add	r9, r3
 800b220:	e7d3      	b.n	800b1ca <__cvt+0x6a>
 800b222:	1c59      	adds	r1, r3, #1
 800b224:	9103      	str	r1, [sp, #12]
 800b226:	701a      	strb	r2, [r3, #0]
 800b228:	e7d9      	b.n	800b1de <__cvt+0x7e>

0800b22a <__exponent>:
 800b22a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b22c:	2900      	cmp	r1, #0
 800b22e:	bfba      	itte	lt
 800b230:	4249      	neglt	r1, r1
 800b232:	232d      	movlt	r3, #45	@ 0x2d
 800b234:	232b      	movge	r3, #43	@ 0x2b
 800b236:	2909      	cmp	r1, #9
 800b238:	7002      	strb	r2, [r0, #0]
 800b23a:	7043      	strb	r3, [r0, #1]
 800b23c:	dd29      	ble.n	800b292 <__exponent+0x68>
 800b23e:	f10d 0307 	add.w	r3, sp, #7
 800b242:	461d      	mov	r5, r3
 800b244:	270a      	movs	r7, #10
 800b246:	461a      	mov	r2, r3
 800b248:	fbb1 f6f7 	udiv	r6, r1, r7
 800b24c:	fb07 1416 	mls	r4, r7, r6, r1
 800b250:	3430      	adds	r4, #48	@ 0x30
 800b252:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b256:	460c      	mov	r4, r1
 800b258:	2c63      	cmp	r4, #99	@ 0x63
 800b25a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b25e:	4631      	mov	r1, r6
 800b260:	dcf1      	bgt.n	800b246 <__exponent+0x1c>
 800b262:	3130      	adds	r1, #48	@ 0x30
 800b264:	1e94      	subs	r4, r2, #2
 800b266:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b26a:	1c41      	adds	r1, r0, #1
 800b26c:	4623      	mov	r3, r4
 800b26e:	42ab      	cmp	r3, r5
 800b270:	d30a      	bcc.n	800b288 <__exponent+0x5e>
 800b272:	f10d 0309 	add.w	r3, sp, #9
 800b276:	1a9b      	subs	r3, r3, r2
 800b278:	42ac      	cmp	r4, r5
 800b27a:	bf88      	it	hi
 800b27c:	2300      	movhi	r3, #0
 800b27e:	3302      	adds	r3, #2
 800b280:	4403      	add	r3, r0
 800b282:	1a18      	subs	r0, r3, r0
 800b284:	b003      	add	sp, #12
 800b286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b288:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b28c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b290:	e7ed      	b.n	800b26e <__exponent+0x44>
 800b292:	2330      	movs	r3, #48	@ 0x30
 800b294:	3130      	adds	r1, #48	@ 0x30
 800b296:	7083      	strb	r3, [r0, #2]
 800b298:	70c1      	strb	r1, [r0, #3]
 800b29a:	1d03      	adds	r3, r0, #4
 800b29c:	e7f1      	b.n	800b282 <__exponent+0x58>
	...

0800b2a0 <_printf_float>:
 800b2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a4:	b08d      	sub	sp, #52	@ 0x34
 800b2a6:	460c      	mov	r4, r1
 800b2a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b2ac:	4616      	mov	r6, r2
 800b2ae:	461f      	mov	r7, r3
 800b2b0:	4605      	mov	r5, r0
 800b2b2:	f000 fccb 	bl	800bc4c <_localeconv_r>
 800b2b6:	6803      	ldr	r3, [r0, #0]
 800b2b8:	9304      	str	r3, [sp, #16]
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7f4 ffd8 	bl	8000270 <strlen>
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2c4:	f8d8 3000 	ldr.w	r3, [r8]
 800b2c8:	9005      	str	r0, [sp, #20]
 800b2ca:	3307      	adds	r3, #7
 800b2cc:	f023 0307 	bic.w	r3, r3, #7
 800b2d0:	f103 0208 	add.w	r2, r3, #8
 800b2d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b2d8:	f8d4 b000 	ldr.w	fp, [r4]
 800b2dc:	f8c8 2000 	str.w	r2, [r8]
 800b2e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2e4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b2e8:	9307      	str	r3, [sp, #28]
 800b2ea:	f8cd 8018 	str.w	r8, [sp, #24]
 800b2ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b2f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2f6:	4b9c      	ldr	r3, [pc, #624]	@ (800b568 <_printf_float+0x2c8>)
 800b2f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2fc:	f7f5 fc16 	bl	8000b2c <__aeabi_dcmpun>
 800b300:	bb70      	cbnz	r0, 800b360 <_printf_float+0xc0>
 800b302:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b306:	4b98      	ldr	r3, [pc, #608]	@ (800b568 <_printf_float+0x2c8>)
 800b308:	f04f 32ff 	mov.w	r2, #4294967295
 800b30c:	f7f5 fbf0 	bl	8000af0 <__aeabi_dcmple>
 800b310:	bb30      	cbnz	r0, 800b360 <_printf_float+0xc0>
 800b312:	2200      	movs	r2, #0
 800b314:	2300      	movs	r3, #0
 800b316:	4640      	mov	r0, r8
 800b318:	4649      	mov	r1, r9
 800b31a:	f7f5 fbdf 	bl	8000adc <__aeabi_dcmplt>
 800b31e:	b110      	cbz	r0, 800b326 <_printf_float+0x86>
 800b320:	232d      	movs	r3, #45	@ 0x2d
 800b322:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b326:	4a91      	ldr	r2, [pc, #580]	@ (800b56c <_printf_float+0x2cc>)
 800b328:	4b91      	ldr	r3, [pc, #580]	@ (800b570 <_printf_float+0x2d0>)
 800b32a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b32e:	bf8c      	ite	hi
 800b330:	4690      	movhi	r8, r2
 800b332:	4698      	movls	r8, r3
 800b334:	2303      	movs	r3, #3
 800b336:	6123      	str	r3, [r4, #16]
 800b338:	f02b 0304 	bic.w	r3, fp, #4
 800b33c:	6023      	str	r3, [r4, #0]
 800b33e:	f04f 0900 	mov.w	r9, #0
 800b342:	9700      	str	r7, [sp, #0]
 800b344:	4633      	mov	r3, r6
 800b346:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b348:	4621      	mov	r1, r4
 800b34a:	4628      	mov	r0, r5
 800b34c:	f000 f9d2 	bl	800b6f4 <_printf_common>
 800b350:	3001      	adds	r0, #1
 800b352:	f040 808d 	bne.w	800b470 <_printf_float+0x1d0>
 800b356:	f04f 30ff 	mov.w	r0, #4294967295
 800b35a:	b00d      	add	sp, #52	@ 0x34
 800b35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b360:	4642      	mov	r2, r8
 800b362:	464b      	mov	r3, r9
 800b364:	4640      	mov	r0, r8
 800b366:	4649      	mov	r1, r9
 800b368:	f7f5 fbe0 	bl	8000b2c <__aeabi_dcmpun>
 800b36c:	b140      	cbz	r0, 800b380 <_printf_float+0xe0>
 800b36e:	464b      	mov	r3, r9
 800b370:	2b00      	cmp	r3, #0
 800b372:	bfbc      	itt	lt
 800b374:	232d      	movlt	r3, #45	@ 0x2d
 800b376:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b37a:	4a7e      	ldr	r2, [pc, #504]	@ (800b574 <_printf_float+0x2d4>)
 800b37c:	4b7e      	ldr	r3, [pc, #504]	@ (800b578 <_printf_float+0x2d8>)
 800b37e:	e7d4      	b.n	800b32a <_printf_float+0x8a>
 800b380:	6863      	ldr	r3, [r4, #4]
 800b382:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b386:	9206      	str	r2, [sp, #24]
 800b388:	1c5a      	adds	r2, r3, #1
 800b38a:	d13b      	bne.n	800b404 <_printf_float+0x164>
 800b38c:	2306      	movs	r3, #6
 800b38e:	6063      	str	r3, [r4, #4]
 800b390:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b394:	2300      	movs	r3, #0
 800b396:	6022      	str	r2, [r4, #0]
 800b398:	9303      	str	r3, [sp, #12]
 800b39a:	ab0a      	add	r3, sp, #40	@ 0x28
 800b39c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b3a0:	ab09      	add	r3, sp, #36	@ 0x24
 800b3a2:	9300      	str	r3, [sp, #0]
 800b3a4:	6861      	ldr	r1, [r4, #4]
 800b3a6:	ec49 8b10 	vmov	d0, r8, r9
 800b3aa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b3ae:	4628      	mov	r0, r5
 800b3b0:	f7ff fed6 	bl	800b160 <__cvt>
 800b3b4:	9b06      	ldr	r3, [sp, #24]
 800b3b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b3b8:	2b47      	cmp	r3, #71	@ 0x47
 800b3ba:	4680      	mov	r8, r0
 800b3bc:	d129      	bne.n	800b412 <_printf_float+0x172>
 800b3be:	1cc8      	adds	r0, r1, #3
 800b3c0:	db02      	blt.n	800b3c8 <_printf_float+0x128>
 800b3c2:	6863      	ldr	r3, [r4, #4]
 800b3c4:	4299      	cmp	r1, r3
 800b3c6:	dd41      	ble.n	800b44c <_printf_float+0x1ac>
 800b3c8:	f1aa 0a02 	sub.w	sl, sl, #2
 800b3cc:	fa5f fa8a 	uxtb.w	sl, sl
 800b3d0:	3901      	subs	r1, #1
 800b3d2:	4652      	mov	r2, sl
 800b3d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b3d8:	9109      	str	r1, [sp, #36]	@ 0x24
 800b3da:	f7ff ff26 	bl	800b22a <__exponent>
 800b3de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3e0:	1813      	adds	r3, r2, r0
 800b3e2:	2a01      	cmp	r2, #1
 800b3e4:	4681      	mov	r9, r0
 800b3e6:	6123      	str	r3, [r4, #16]
 800b3e8:	dc02      	bgt.n	800b3f0 <_printf_float+0x150>
 800b3ea:	6822      	ldr	r2, [r4, #0]
 800b3ec:	07d2      	lsls	r2, r2, #31
 800b3ee:	d501      	bpl.n	800b3f4 <_printf_float+0x154>
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	6123      	str	r3, [r4, #16]
 800b3f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d0a2      	beq.n	800b342 <_printf_float+0xa2>
 800b3fc:	232d      	movs	r3, #45	@ 0x2d
 800b3fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b402:	e79e      	b.n	800b342 <_printf_float+0xa2>
 800b404:	9a06      	ldr	r2, [sp, #24]
 800b406:	2a47      	cmp	r2, #71	@ 0x47
 800b408:	d1c2      	bne.n	800b390 <_printf_float+0xf0>
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d1c0      	bne.n	800b390 <_printf_float+0xf0>
 800b40e:	2301      	movs	r3, #1
 800b410:	e7bd      	b.n	800b38e <_printf_float+0xee>
 800b412:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b416:	d9db      	bls.n	800b3d0 <_printf_float+0x130>
 800b418:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b41c:	d118      	bne.n	800b450 <_printf_float+0x1b0>
 800b41e:	2900      	cmp	r1, #0
 800b420:	6863      	ldr	r3, [r4, #4]
 800b422:	dd0b      	ble.n	800b43c <_printf_float+0x19c>
 800b424:	6121      	str	r1, [r4, #16]
 800b426:	b913      	cbnz	r3, 800b42e <_printf_float+0x18e>
 800b428:	6822      	ldr	r2, [r4, #0]
 800b42a:	07d0      	lsls	r0, r2, #31
 800b42c:	d502      	bpl.n	800b434 <_printf_float+0x194>
 800b42e:	3301      	adds	r3, #1
 800b430:	440b      	add	r3, r1
 800b432:	6123      	str	r3, [r4, #16]
 800b434:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b436:	f04f 0900 	mov.w	r9, #0
 800b43a:	e7db      	b.n	800b3f4 <_printf_float+0x154>
 800b43c:	b913      	cbnz	r3, 800b444 <_printf_float+0x1a4>
 800b43e:	6822      	ldr	r2, [r4, #0]
 800b440:	07d2      	lsls	r2, r2, #31
 800b442:	d501      	bpl.n	800b448 <_printf_float+0x1a8>
 800b444:	3302      	adds	r3, #2
 800b446:	e7f4      	b.n	800b432 <_printf_float+0x192>
 800b448:	2301      	movs	r3, #1
 800b44a:	e7f2      	b.n	800b432 <_printf_float+0x192>
 800b44c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b450:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b452:	4299      	cmp	r1, r3
 800b454:	db05      	blt.n	800b462 <_printf_float+0x1c2>
 800b456:	6823      	ldr	r3, [r4, #0]
 800b458:	6121      	str	r1, [r4, #16]
 800b45a:	07d8      	lsls	r0, r3, #31
 800b45c:	d5ea      	bpl.n	800b434 <_printf_float+0x194>
 800b45e:	1c4b      	adds	r3, r1, #1
 800b460:	e7e7      	b.n	800b432 <_printf_float+0x192>
 800b462:	2900      	cmp	r1, #0
 800b464:	bfd4      	ite	le
 800b466:	f1c1 0202 	rsble	r2, r1, #2
 800b46a:	2201      	movgt	r2, #1
 800b46c:	4413      	add	r3, r2
 800b46e:	e7e0      	b.n	800b432 <_printf_float+0x192>
 800b470:	6823      	ldr	r3, [r4, #0]
 800b472:	055a      	lsls	r2, r3, #21
 800b474:	d407      	bmi.n	800b486 <_printf_float+0x1e6>
 800b476:	6923      	ldr	r3, [r4, #16]
 800b478:	4642      	mov	r2, r8
 800b47a:	4631      	mov	r1, r6
 800b47c:	4628      	mov	r0, r5
 800b47e:	47b8      	blx	r7
 800b480:	3001      	adds	r0, #1
 800b482:	d12b      	bne.n	800b4dc <_printf_float+0x23c>
 800b484:	e767      	b.n	800b356 <_printf_float+0xb6>
 800b486:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b48a:	f240 80dd 	bls.w	800b648 <_printf_float+0x3a8>
 800b48e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b492:	2200      	movs	r2, #0
 800b494:	2300      	movs	r3, #0
 800b496:	f7f5 fb17 	bl	8000ac8 <__aeabi_dcmpeq>
 800b49a:	2800      	cmp	r0, #0
 800b49c:	d033      	beq.n	800b506 <_printf_float+0x266>
 800b49e:	4a37      	ldr	r2, [pc, #220]	@ (800b57c <_printf_float+0x2dc>)
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	4631      	mov	r1, r6
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	47b8      	blx	r7
 800b4a8:	3001      	adds	r0, #1
 800b4aa:	f43f af54 	beq.w	800b356 <_printf_float+0xb6>
 800b4ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b4b2:	4543      	cmp	r3, r8
 800b4b4:	db02      	blt.n	800b4bc <_printf_float+0x21c>
 800b4b6:	6823      	ldr	r3, [r4, #0]
 800b4b8:	07d8      	lsls	r0, r3, #31
 800b4ba:	d50f      	bpl.n	800b4dc <_printf_float+0x23c>
 800b4bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4c0:	4631      	mov	r1, r6
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	47b8      	blx	r7
 800b4c6:	3001      	adds	r0, #1
 800b4c8:	f43f af45 	beq.w	800b356 <_printf_float+0xb6>
 800b4cc:	f04f 0900 	mov.w	r9, #0
 800b4d0:	f108 38ff 	add.w	r8, r8, #4294967295
 800b4d4:	f104 0a1a 	add.w	sl, r4, #26
 800b4d8:	45c8      	cmp	r8, r9
 800b4da:	dc09      	bgt.n	800b4f0 <_printf_float+0x250>
 800b4dc:	6823      	ldr	r3, [r4, #0]
 800b4de:	079b      	lsls	r3, r3, #30
 800b4e0:	f100 8103 	bmi.w	800b6ea <_printf_float+0x44a>
 800b4e4:	68e0      	ldr	r0, [r4, #12]
 800b4e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4e8:	4298      	cmp	r0, r3
 800b4ea:	bfb8      	it	lt
 800b4ec:	4618      	movlt	r0, r3
 800b4ee:	e734      	b.n	800b35a <_printf_float+0xba>
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	4652      	mov	r2, sl
 800b4f4:	4631      	mov	r1, r6
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	47b8      	blx	r7
 800b4fa:	3001      	adds	r0, #1
 800b4fc:	f43f af2b 	beq.w	800b356 <_printf_float+0xb6>
 800b500:	f109 0901 	add.w	r9, r9, #1
 800b504:	e7e8      	b.n	800b4d8 <_printf_float+0x238>
 800b506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b508:	2b00      	cmp	r3, #0
 800b50a:	dc39      	bgt.n	800b580 <_printf_float+0x2e0>
 800b50c:	4a1b      	ldr	r2, [pc, #108]	@ (800b57c <_printf_float+0x2dc>)
 800b50e:	2301      	movs	r3, #1
 800b510:	4631      	mov	r1, r6
 800b512:	4628      	mov	r0, r5
 800b514:	47b8      	blx	r7
 800b516:	3001      	adds	r0, #1
 800b518:	f43f af1d 	beq.w	800b356 <_printf_float+0xb6>
 800b51c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b520:	ea59 0303 	orrs.w	r3, r9, r3
 800b524:	d102      	bne.n	800b52c <_printf_float+0x28c>
 800b526:	6823      	ldr	r3, [r4, #0]
 800b528:	07d9      	lsls	r1, r3, #31
 800b52a:	d5d7      	bpl.n	800b4dc <_printf_float+0x23c>
 800b52c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b530:	4631      	mov	r1, r6
 800b532:	4628      	mov	r0, r5
 800b534:	47b8      	blx	r7
 800b536:	3001      	adds	r0, #1
 800b538:	f43f af0d 	beq.w	800b356 <_printf_float+0xb6>
 800b53c:	f04f 0a00 	mov.w	sl, #0
 800b540:	f104 0b1a 	add.w	fp, r4, #26
 800b544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b546:	425b      	negs	r3, r3
 800b548:	4553      	cmp	r3, sl
 800b54a:	dc01      	bgt.n	800b550 <_printf_float+0x2b0>
 800b54c:	464b      	mov	r3, r9
 800b54e:	e793      	b.n	800b478 <_printf_float+0x1d8>
 800b550:	2301      	movs	r3, #1
 800b552:	465a      	mov	r2, fp
 800b554:	4631      	mov	r1, r6
 800b556:	4628      	mov	r0, r5
 800b558:	47b8      	blx	r7
 800b55a:	3001      	adds	r0, #1
 800b55c:	f43f aefb 	beq.w	800b356 <_printf_float+0xb6>
 800b560:	f10a 0a01 	add.w	sl, sl, #1
 800b564:	e7ee      	b.n	800b544 <_printf_float+0x2a4>
 800b566:	bf00      	nop
 800b568:	7fefffff 	.word	0x7fefffff
 800b56c:	0800da00 	.word	0x0800da00
 800b570:	0800d9fc 	.word	0x0800d9fc
 800b574:	0800da08 	.word	0x0800da08
 800b578:	0800da04 	.word	0x0800da04
 800b57c:	0800da0c 	.word	0x0800da0c
 800b580:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b582:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b586:	4553      	cmp	r3, sl
 800b588:	bfa8      	it	ge
 800b58a:	4653      	movge	r3, sl
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	4699      	mov	r9, r3
 800b590:	dc36      	bgt.n	800b600 <_printf_float+0x360>
 800b592:	f04f 0b00 	mov.w	fp, #0
 800b596:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b59a:	f104 021a 	add.w	r2, r4, #26
 800b59e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b5a0:	9306      	str	r3, [sp, #24]
 800b5a2:	eba3 0309 	sub.w	r3, r3, r9
 800b5a6:	455b      	cmp	r3, fp
 800b5a8:	dc31      	bgt.n	800b60e <_printf_float+0x36e>
 800b5aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5ac:	459a      	cmp	sl, r3
 800b5ae:	dc3a      	bgt.n	800b626 <_printf_float+0x386>
 800b5b0:	6823      	ldr	r3, [r4, #0]
 800b5b2:	07da      	lsls	r2, r3, #31
 800b5b4:	d437      	bmi.n	800b626 <_printf_float+0x386>
 800b5b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5b8:	ebaa 0903 	sub.w	r9, sl, r3
 800b5bc:	9b06      	ldr	r3, [sp, #24]
 800b5be:	ebaa 0303 	sub.w	r3, sl, r3
 800b5c2:	4599      	cmp	r9, r3
 800b5c4:	bfa8      	it	ge
 800b5c6:	4699      	movge	r9, r3
 800b5c8:	f1b9 0f00 	cmp.w	r9, #0
 800b5cc:	dc33      	bgt.n	800b636 <_printf_float+0x396>
 800b5ce:	f04f 0800 	mov.w	r8, #0
 800b5d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5d6:	f104 0b1a 	add.w	fp, r4, #26
 800b5da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5dc:	ebaa 0303 	sub.w	r3, sl, r3
 800b5e0:	eba3 0309 	sub.w	r3, r3, r9
 800b5e4:	4543      	cmp	r3, r8
 800b5e6:	f77f af79 	ble.w	800b4dc <_printf_float+0x23c>
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	465a      	mov	r2, fp
 800b5ee:	4631      	mov	r1, r6
 800b5f0:	4628      	mov	r0, r5
 800b5f2:	47b8      	blx	r7
 800b5f4:	3001      	adds	r0, #1
 800b5f6:	f43f aeae 	beq.w	800b356 <_printf_float+0xb6>
 800b5fa:	f108 0801 	add.w	r8, r8, #1
 800b5fe:	e7ec      	b.n	800b5da <_printf_float+0x33a>
 800b600:	4642      	mov	r2, r8
 800b602:	4631      	mov	r1, r6
 800b604:	4628      	mov	r0, r5
 800b606:	47b8      	blx	r7
 800b608:	3001      	adds	r0, #1
 800b60a:	d1c2      	bne.n	800b592 <_printf_float+0x2f2>
 800b60c:	e6a3      	b.n	800b356 <_printf_float+0xb6>
 800b60e:	2301      	movs	r3, #1
 800b610:	4631      	mov	r1, r6
 800b612:	4628      	mov	r0, r5
 800b614:	9206      	str	r2, [sp, #24]
 800b616:	47b8      	blx	r7
 800b618:	3001      	adds	r0, #1
 800b61a:	f43f ae9c 	beq.w	800b356 <_printf_float+0xb6>
 800b61e:	9a06      	ldr	r2, [sp, #24]
 800b620:	f10b 0b01 	add.w	fp, fp, #1
 800b624:	e7bb      	b.n	800b59e <_printf_float+0x2fe>
 800b626:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b62a:	4631      	mov	r1, r6
 800b62c:	4628      	mov	r0, r5
 800b62e:	47b8      	blx	r7
 800b630:	3001      	adds	r0, #1
 800b632:	d1c0      	bne.n	800b5b6 <_printf_float+0x316>
 800b634:	e68f      	b.n	800b356 <_printf_float+0xb6>
 800b636:	9a06      	ldr	r2, [sp, #24]
 800b638:	464b      	mov	r3, r9
 800b63a:	4442      	add	r2, r8
 800b63c:	4631      	mov	r1, r6
 800b63e:	4628      	mov	r0, r5
 800b640:	47b8      	blx	r7
 800b642:	3001      	adds	r0, #1
 800b644:	d1c3      	bne.n	800b5ce <_printf_float+0x32e>
 800b646:	e686      	b.n	800b356 <_printf_float+0xb6>
 800b648:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b64c:	f1ba 0f01 	cmp.w	sl, #1
 800b650:	dc01      	bgt.n	800b656 <_printf_float+0x3b6>
 800b652:	07db      	lsls	r3, r3, #31
 800b654:	d536      	bpl.n	800b6c4 <_printf_float+0x424>
 800b656:	2301      	movs	r3, #1
 800b658:	4642      	mov	r2, r8
 800b65a:	4631      	mov	r1, r6
 800b65c:	4628      	mov	r0, r5
 800b65e:	47b8      	blx	r7
 800b660:	3001      	adds	r0, #1
 800b662:	f43f ae78 	beq.w	800b356 <_printf_float+0xb6>
 800b666:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b66a:	4631      	mov	r1, r6
 800b66c:	4628      	mov	r0, r5
 800b66e:	47b8      	blx	r7
 800b670:	3001      	adds	r0, #1
 800b672:	f43f ae70 	beq.w	800b356 <_printf_float+0xb6>
 800b676:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b67a:	2200      	movs	r2, #0
 800b67c:	2300      	movs	r3, #0
 800b67e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b682:	f7f5 fa21 	bl	8000ac8 <__aeabi_dcmpeq>
 800b686:	b9c0      	cbnz	r0, 800b6ba <_printf_float+0x41a>
 800b688:	4653      	mov	r3, sl
 800b68a:	f108 0201 	add.w	r2, r8, #1
 800b68e:	4631      	mov	r1, r6
 800b690:	4628      	mov	r0, r5
 800b692:	47b8      	blx	r7
 800b694:	3001      	adds	r0, #1
 800b696:	d10c      	bne.n	800b6b2 <_printf_float+0x412>
 800b698:	e65d      	b.n	800b356 <_printf_float+0xb6>
 800b69a:	2301      	movs	r3, #1
 800b69c:	465a      	mov	r2, fp
 800b69e:	4631      	mov	r1, r6
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	47b8      	blx	r7
 800b6a4:	3001      	adds	r0, #1
 800b6a6:	f43f ae56 	beq.w	800b356 <_printf_float+0xb6>
 800b6aa:	f108 0801 	add.w	r8, r8, #1
 800b6ae:	45d0      	cmp	r8, sl
 800b6b0:	dbf3      	blt.n	800b69a <_printf_float+0x3fa>
 800b6b2:	464b      	mov	r3, r9
 800b6b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b6b8:	e6df      	b.n	800b47a <_printf_float+0x1da>
 800b6ba:	f04f 0800 	mov.w	r8, #0
 800b6be:	f104 0b1a 	add.w	fp, r4, #26
 800b6c2:	e7f4      	b.n	800b6ae <_printf_float+0x40e>
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	4642      	mov	r2, r8
 800b6c8:	e7e1      	b.n	800b68e <_printf_float+0x3ee>
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	464a      	mov	r2, r9
 800b6ce:	4631      	mov	r1, r6
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	47b8      	blx	r7
 800b6d4:	3001      	adds	r0, #1
 800b6d6:	f43f ae3e 	beq.w	800b356 <_printf_float+0xb6>
 800b6da:	f108 0801 	add.w	r8, r8, #1
 800b6de:	68e3      	ldr	r3, [r4, #12]
 800b6e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b6e2:	1a5b      	subs	r3, r3, r1
 800b6e4:	4543      	cmp	r3, r8
 800b6e6:	dcf0      	bgt.n	800b6ca <_printf_float+0x42a>
 800b6e8:	e6fc      	b.n	800b4e4 <_printf_float+0x244>
 800b6ea:	f04f 0800 	mov.w	r8, #0
 800b6ee:	f104 0919 	add.w	r9, r4, #25
 800b6f2:	e7f4      	b.n	800b6de <_printf_float+0x43e>

0800b6f4 <_printf_common>:
 800b6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6f8:	4616      	mov	r6, r2
 800b6fa:	4698      	mov	r8, r3
 800b6fc:	688a      	ldr	r2, [r1, #8]
 800b6fe:	690b      	ldr	r3, [r1, #16]
 800b700:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b704:	4293      	cmp	r3, r2
 800b706:	bfb8      	it	lt
 800b708:	4613      	movlt	r3, r2
 800b70a:	6033      	str	r3, [r6, #0]
 800b70c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b710:	4607      	mov	r7, r0
 800b712:	460c      	mov	r4, r1
 800b714:	b10a      	cbz	r2, 800b71a <_printf_common+0x26>
 800b716:	3301      	adds	r3, #1
 800b718:	6033      	str	r3, [r6, #0]
 800b71a:	6823      	ldr	r3, [r4, #0]
 800b71c:	0699      	lsls	r1, r3, #26
 800b71e:	bf42      	ittt	mi
 800b720:	6833      	ldrmi	r3, [r6, #0]
 800b722:	3302      	addmi	r3, #2
 800b724:	6033      	strmi	r3, [r6, #0]
 800b726:	6825      	ldr	r5, [r4, #0]
 800b728:	f015 0506 	ands.w	r5, r5, #6
 800b72c:	d106      	bne.n	800b73c <_printf_common+0x48>
 800b72e:	f104 0a19 	add.w	sl, r4, #25
 800b732:	68e3      	ldr	r3, [r4, #12]
 800b734:	6832      	ldr	r2, [r6, #0]
 800b736:	1a9b      	subs	r3, r3, r2
 800b738:	42ab      	cmp	r3, r5
 800b73a:	dc26      	bgt.n	800b78a <_printf_common+0x96>
 800b73c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b740:	6822      	ldr	r2, [r4, #0]
 800b742:	3b00      	subs	r3, #0
 800b744:	bf18      	it	ne
 800b746:	2301      	movne	r3, #1
 800b748:	0692      	lsls	r2, r2, #26
 800b74a:	d42b      	bmi.n	800b7a4 <_printf_common+0xb0>
 800b74c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b750:	4641      	mov	r1, r8
 800b752:	4638      	mov	r0, r7
 800b754:	47c8      	blx	r9
 800b756:	3001      	adds	r0, #1
 800b758:	d01e      	beq.n	800b798 <_printf_common+0xa4>
 800b75a:	6823      	ldr	r3, [r4, #0]
 800b75c:	6922      	ldr	r2, [r4, #16]
 800b75e:	f003 0306 	and.w	r3, r3, #6
 800b762:	2b04      	cmp	r3, #4
 800b764:	bf02      	ittt	eq
 800b766:	68e5      	ldreq	r5, [r4, #12]
 800b768:	6833      	ldreq	r3, [r6, #0]
 800b76a:	1aed      	subeq	r5, r5, r3
 800b76c:	68a3      	ldr	r3, [r4, #8]
 800b76e:	bf0c      	ite	eq
 800b770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b774:	2500      	movne	r5, #0
 800b776:	4293      	cmp	r3, r2
 800b778:	bfc4      	itt	gt
 800b77a:	1a9b      	subgt	r3, r3, r2
 800b77c:	18ed      	addgt	r5, r5, r3
 800b77e:	2600      	movs	r6, #0
 800b780:	341a      	adds	r4, #26
 800b782:	42b5      	cmp	r5, r6
 800b784:	d11a      	bne.n	800b7bc <_printf_common+0xc8>
 800b786:	2000      	movs	r0, #0
 800b788:	e008      	b.n	800b79c <_printf_common+0xa8>
 800b78a:	2301      	movs	r3, #1
 800b78c:	4652      	mov	r2, sl
 800b78e:	4641      	mov	r1, r8
 800b790:	4638      	mov	r0, r7
 800b792:	47c8      	blx	r9
 800b794:	3001      	adds	r0, #1
 800b796:	d103      	bne.n	800b7a0 <_printf_common+0xac>
 800b798:	f04f 30ff 	mov.w	r0, #4294967295
 800b79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7a0:	3501      	adds	r5, #1
 800b7a2:	e7c6      	b.n	800b732 <_printf_common+0x3e>
 800b7a4:	18e1      	adds	r1, r4, r3
 800b7a6:	1c5a      	adds	r2, r3, #1
 800b7a8:	2030      	movs	r0, #48	@ 0x30
 800b7aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b7ae:	4422      	add	r2, r4
 800b7b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b7b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b7b8:	3302      	adds	r3, #2
 800b7ba:	e7c7      	b.n	800b74c <_printf_common+0x58>
 800b7bc:	2301      	movs	r3, #1
 800b7be:	4622      	mov	r2, r4
 800b7c0:	4641      	mov	r1, r8
 800b7c2:	4638      	mov	r0, r7
 800b7c4:	47c8      	blx	r9
 800b7c6:	3001      	adds	r0, #1
 800b7c8:	d0e6      	beq.n	800b798 <_printf_common+0xa4>
 800b7ca:	3601      	adds	r6, #1
 800b7cc:	e7d9      	b.n	800b782 <_printf_common+0x8e>
	...

0800b7d0 <_printf_i>:
 800b7d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7d4:	7e0f      	ldrb	r7, [r1, #24]
 800b7d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b7d8:	2f78      	cmp	r7, #120	@ 0x78
 800b7da:	4691      	mov	r9, r2
 800b7dc:	4680      	mov	r8, r0
 800b7de:	460c      	mov	r4, r1
 800b7e0:	469a      	mov	sl, r3
 800b7e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b7e6:	d807      	bhi.n	800b7f8 <_printf_i+0x28>
 800b7e8:	2f62      	cmp	r7, #98	@ 0x62
 800b7ea:	d80a      	bhi.n	800b802 <_printf_i+0x32>
 800b7ec:	2f00      	cmp	r7, #0
 800b7ee:	f000 80d1 	beq.w	800b994 <_printf_i+0x1c4>
 800b7f2:	2f58      	cmp	r7, #88	@ 0x58
 800b7f4:	f000 80b8 	beq.w	800b968 <_printf_i+0x198>
 800b7f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b800:	e03a      	b.n	800b878 <_printf_i+0xa8>
 800b802:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b806:	2b15      	cmp	r3, #21
 800b808:	d8f6      	bhi.n	800b7f8 <_printf_i+0x28>
 800b80a:	a101      	add	r1, pc, #4	@ (adr r1, 800b810 <_printf_i+0x40>)
 800b80c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b810:	0800b869 	.word	0x0800b869
 800b814:	0800b87d 	.word	0x0800b87d
 800b818:	0800b7f9 	.word	0x0800b7f9
 800b81c:	0800b7f9 	.word	0x0800b7f9
 800b820:	0800b7f9 	.word	0x0800b7f9
 800b824:	0800b7f9 	.word	0x0800b7f9
 800b828:	0800b87d 	.word	0x0800b87d
 800b82c:	0800b7f9 	.word	0x0800b7f9
 800b830:	0800b7f9 	.word	0x0800b7f9
 800b834:	0800b7f9 	.word	0x0800b7f9
 800b838:	0800b7f9 	.word	0x0800b7f9
 800b83c:	0800b97b 	.word	0x0800b97b
 800b840:	0800b8a7 	.word	0x0800b8a7
 800b844:	0800b935 	.word	0x0800b935
 800b848:	0800b7f9 	.word	0x0800b7f9
 800b84c:	0800b7f9 	.word	0x0800b7f9
 800b850:	0800b99d 	.word	0x0800b99d
 800b854:	0800b7f9 	.word	0x0800b7f9
 800b858:	0800b8a7 	.word	0x0800b8a7
 800b85c:	0800b7f9 	.word	0x0800b7f9
 800b860:	0800b7f9 	.word	0x0800b7f9
 800b864:	0800b93d 	.word	0x0800b93d
 800b868:	6833      	ldr	r3, [r6, #0]
 800b86a:	1d1a      	adds	r2, r3, #4
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	6032      	str	r2, [r6, #0]
 800b870:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b874:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b878:	2301      	movs	r3, #1
 800b87a:	e09c      	b.n	800b9b6 <_printf_i+0x1e6>
 800b87c:	6833      	ldr	r3, [r6, #0]
 800b87e:	6820      	ldr	r0, [r4, #0]
 800b880:	1d19      	adds	r1, r3, #4
 800b882:	6031      	str	r1, [r6, #0]
 800b884:	0606      	lsls	r6, r0, #24
 800b886:	d501      	bpl.n	800b88c <_printf_i+0xbc>
 800b888:	681d      	ldr	r5, [r3, #0]
 800b88a:	e003      	b.n	800b894 <_printf_i+0xc4>
 800b88c:	0645      	lsls	r5, r0, #25
 800b88e:	d5fb      	bpl.n	800b888 <_printf_i+0xb8>
 800b890:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b894:	2d00      	cmp	r5, #0
 800b896:	da03      	bge.n	800b8a0 <_printf_i+0xd0>
 800b898:	232d      	movs	r3, #45	@ 0x2d
 800b89a:	426d      	negs	r5, r5
 800b89c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8a0:	4858      	ldr	r0, [pc, #352]	@ (800ba04 <_printf_i+0x234>)
 800b8a2:	230a      	movs	r3, #10
 800b8a4:	e011      	b.n	800b8ca <_printf_i+0xfa>
 800b8a6:	6821      	ldr	r1, [r4, #0]
 800b8a8:	6833      	ldr	r3, [r6, #0]
 800b8aa:	0608      	lsls	r0, r1, #24
 800b8ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800b8b0:	d402      	bmi.n	800b8b8 <_printf_i+0xe8>
 800b8b2:	0649      	lsls	r1, r1, #25
 800b8b4:	bf48      	it	mi
 800b8b6:	b2ad      	uxthmi	r5, r5
 800b8b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b8ba:	4852      	ldr	r0, [pc, #328]	@ (800ba04 <_printf_i+0x234>)
 800b8bc:	6033      	str	r3, [r6, #0]
 800b8be:	bf14      	ite	ne
 800b8c0:	230a      	movne	r3, #10
 800b8c2:	2308      	moveq	r3, #8
 800b8c4:	2100      	movs	r1, #0
 800b8c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b8ca:	6866      	ldr	r6, [r4, #4]
 800b8cc:	60a6      	str	r6, [r4, #8]
 800b8ce:	2e00      	cmp	r6, #0
 800b8d0:	db05      	blt.n	800b8de <_printf_i+0x10e>
 800b8d2:	6821      	ldr	r1, [r4, #0]
 800b8d4:	432e      	orrs	r6, r5
 800b8d6:	f021 0104 	bic.w	r1, r1, #4
 800b8da:	6021      	str	r1, [r4, #0]
 800b8dc:	d04b      	beq.n	800b976 <_printf_i+0x1a6>
 800b8de:	4616      	mov	r6, r2
 800b8e0:	fbb5 f1f3 	udiv	r1, r5, r3
 800b8e4:	fb03 5711 	mls	r7, r3, r1, r5
 800b8e8:	5dc7      	ldrb	r7, [r0, r7]
 800b8ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b8ee:	462f      	mov	r7, r5
 800b8f0:	42bb      	cmp	r3, r7
 800b8f2:	460d      	mov	r5, r1
 800b8f4:	d9f4      	bls.n	800b8e0 <_printf_i+0x110>
 800b8f6:	2b08      	cmp	r3, #8
 800b8f8:	d10b      	bne.n	800b912 <_printf_i+0x142>
 800b8fa:	6823      	ldr	r3, [r4, #0]
 800b8fc:	07df      	lsls	r7, r3, #31
 800b8fe:	d508      	bpl.n	800b912 <_printf_i+0x142>
 800b900:	6923      	ldr	r3, [r4, #16]
 800b902:	6861      	ldr	r1, [r4, #4]
 800b904:	4299      	cmp	r1, r3
 800b906:	bfde      	ittt	le
 800b908:	2330      	movle	r3, #48	@ 0x30
 800b90a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b90e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b912:	1b92      	subs	r2, r2, r6
 800b914:	6122      	str	r2, [r4, #16]
 800b916:	f8cd a000 	str.w	sl, [sp]
 800b91a:	464b      	mov	r3, r9
 800b91c:	aa03      	add	r2, sp, #12
 800b91e:	4621      	mov	r1, r4
 800b920:	4640      	mov	r0, r8
 800b922:	f7ff fee7 	bl	800b6f4 <_printf_common>
 800b926:	3001      	adds	r0, #1
 800b928:	d14a      	bne.n	800b9c0 <_printf_i+0x1f0>
 800b92a:	f04f 30ff 	mov.w	r0, #4294967295
 800b92e:	b004      	add	sp, #16
 800b930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b934:	6823      	ldr	r3, [r4, #0]
 800b936:	f043 0320 	orr.w	r3, r3, #32
 800b93a:	6023      	str	r3, [r4, #0]
 800b93c:	4832      	ldr	r0, [pc, #200]	@ (800ba08 <_printf_i+0x238>)
 800b93e:	2778      	movs	r7, #120	@ 0x78
 800b940:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b944:	6823      	ldr	r3, [r4, #0]
 800b946:	6831      	ldr	r1, [r6, #0]
 800b948:	061f      	lsls	r7, r3, #24
 800b94a:	f851 5b04 	ldr.w	r5, [r1], #4
 800b94e:	d402      	bmi.n	800b956 <_printf_i+0x186>
 800b950:	065f      	lsls	r7, r3, #25
 800b952:	bf48      	it	mi
 800b954:	b2ad      	uxthmi	r5, r5
 800b956:	6031      	str	r1, [r6, #0]
 800b958:	07d9      	lsls	r1, r3, #31
 800b95a:	bf44      	itt	mi
 800b95c:	f043 0320 	orrmi.w	r3, r3, #32
 800b960:	6023      	strmi	r3, [r4, #0]
 800b962:	b11d      	cbz	r5, 800b96c <_printf_i+0x19c>
 800b964:	2310      	movs	r3, #16
 800b966:	e7ad      	b.n	800b8c4 <_printf_i+0xf4>
 800b968:	4826      	ldr	r0, [pc, #152]	@ (800ba04 <_printf_i+0x234>)
 800b96a:	e7e9      	b.n	800b940 <_printf_i+0x170>
 800b96c:	6823      	ldr	r3, [r4, #0]
 800b96e:	f023 0320 	bic.w	r3, r3, #32
 800b972:	6023      	str	r3, [r4, #0]
 800b974:	e7f6      	b.n	800b964 <_printf_i+0x194>
 800b976:	4616      	mov	r6, r2
 800b978:	e7bd      	b.n	800b8f6 <_printf_i+0x126>
 800b97a:	6833      	ldr	r3, [r6, #0]
 800b97c:	6825      	ldr	r5, [r4, #0]
 800b97e:	6961      	ldr	r1, [r4, #20]
 800b980:	1d18      	adds	r0, r3, #4
 800b982:	6030      	str	r0, [r6, #0]
 800b984:	062e      	lsls	r6, r5, #24
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	d501      	bpl.n	800b98e <_printf_i+0x1be>
 800b98a:	6019      	str	r1, [r3, #0]
 800b98c:	e002      	b.n	800b994 <_printf_i+0x1c4>
 800b98e:	0668      	lsls	r0, r5, #25
 800b990:	d5fb      	bpl.n	800b98a <_printf_i+0x1ba>
 800b992:	8019      	strh	r1, [r3, #0]
 800b994:	2300      	movs	r3, #0
 800b996:	6123      	str	r3, [r4, #16]
 800b998:	4616      	mov	r6, r2
 800b99a:	e7bc      	b.n	800b916 <_printf_i+0x146>
 800b99c:	6833      	ldr	r3, [r6, #0]
 800b99e:	1d1a      	adds	r2, r3, #4
 800b9a0:	6032      	str	r2, [r6, #0]
 800b9a2:	681e      	ldr	r6, [r3, #0]
 800b9a4:	6862      	ldr	r2, [r4, #4]
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	f7f4 fc11 	bl	80001d0 <memchr>
 800b9ae:	b108      	cbz	r0, 800b9b4 <_printf_i+0x1e4>
 800b9b0:	1b80      	subs	r0, r0, r6
 800b9b2:	6060      	str	r0, [r4, #4]
 800b9b4:	6863      	ldr	r3, [r4, #4]
 800b9b6:	6123      	str	r3, [r4, #16]
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9be:	e7aa      	b.n	800b916 <_printf_i+0x146>
 800b9c0:	6923      	ldr	r3, [r4, #16]
 800b9c2:	4632      	mov	r2, r6
 800b9c4:	4649      	mov	r1, r9
 800b9c6:	4640      	mov	r0, r8
 800b9c8:	47d0      	blx	sl
 800b9ca:	3001      	adds	r0, #1
 800b9cc:	d0ad      	beq.n	800b92a <_printf_i+0x15a>
 800b9ce:	6823      	ldr	r3, [r4, #0]
 800b9d0:	079b      	lsls	r3, r3, #30
 800b9d2:	d413      	bmi.n	800b9fc <_printf_i+0x22c>
 800b9d4:	68e0      	ldr	r0, [r4, #12]
 800b9d6:	9b03      	ldr	r3, [sp, #12]
 800b9d8:	4298      	cmp	r0, r3
 800b9da:	bfb8      	it	lt
 800b9dc:	4618      	movlt	r0, r3
 800b9de:	e7a6      	b.n	800b92e <_printf_i+0x15e>
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	4632      	mov	r2, r6
 800b9e4:	4649      	mov	r1, r9
 800b9e6:	4640      	mov	r0, r8
 800b9e8:	47d0      	blx	sl
 800b9ea:	3001      	adds	r0, #1
 800b9ec:	d09d      	beq.n	800b92a <_printf_i+0x15a>
 800b9ee:	3501      	adds	r5, #1
 800b9f0:	68e3      	ldr	r3, [r4, #12]
 800b9f2:	9903      	ldr	r1, [sp, #12]
 800b9f4:	1a5b      	subs	r3, r3, r1
 800b9f6:	42ab      	cmp	r3, r5
 800b9f8:	dcf2      	bgt.n	800b9e0 <_printf_i+0x210>
 800b9fa:	e7eb      	b.n	800b9d4 <_printf_i+0x204>
 800b9fc:	2500      	movs	r5, #0
 800b9fe:	f104 0619 	add.w	r6, r4, #25
 800ba02:	e7f5      	b.n	800b9f0 <_printf_i+0x220>
 800ba04:	0800da0e 	.word	0x0800da0e
 800ba08:	0800da1f 	.word	0x0800da1f

0800ba0c <std>:
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	b510      	push	{r4, lr}
 800ba10:	4604      	mov	r4, r0
 800ba12:	e9c0 3300 	strd	r3, r3, [r0]
 800ba16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba1a:	6083      	str	r3, [r0, #8]
 800ba1c:	8181      	strh	r1, [r0, #12]
 800ba1e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ba20:	81c2      	strh	r2, [r0, #14]
 800ba22:	6183      	str	r3, [r0, #24]
 800ba24:	4619      	mov	r1, r3
 800ba26:	2208      	movs	r2, #8
 800ba28:	305c      	adds	r0, #92	@ 0x5c
 800ba2a:	f000 f906 	bl	800bc3a <memset>
 800ba2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ba64 <std+0x58>)
 800ba30:	6263      	str	r3, [r4, #36]	@ 0x24
 800ba32:	4b0d      	ldr	r3, [pc, #52]	@ (800ba68 <std+0x5c>)
 800ba34:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ba36:	4b0d      	ldr	r3, [pc, #52]	@ (800ba6c <std+0x60>)
 800ba38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ba3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ba70 <std+0x64>)
 800ba3c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ba3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ba74 <std+0x68>)
 800ba40:	6224      	str	r4, [r4, #32]
 800ba42:	429c      	cmp	r4, r3
 800ba44:	d006      	beq.n	800ba54 <std+0x48>
 800ba46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ba4a:	4294      	cmp	r4, r2
 800ba4c:	d002      	beq.n	800ba54 <std+0x48>
 800ba4e:	33d0      	adds	r3, #208	@ 0xd0
 800ba50:	429c      	cmp	r4, r3
 800ba52:	d105      	bne.n	800ba60 <std+0x54>
 800ba54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ba58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba5c:	f000 b97a 	b.w	800bd54 <__retarget_lock_init_recursive>
 800ba60:	bd10      	pop	{r4, pc}
 800ba62:	bf00      	nop
 800ba64:	0800bbb5 	.word	0x0800bbb5
 800ba68:	0800bbd7 	.word	0x0800bbd7
 800ba6c:	0800bc0f 	.word	0x0800bc0f
 800ba70:	0800bc33 	.word	0x0800bc33
 800ba74:	200020f8 	.word	0x200020f8

0800ba78 <stdio_exit_handler>:
 800ba78:	4a02      	ldr	r2, [pc, #8]	@ (800ba84 <stdio_exit_handler+0xc>)
 800ba7a:	4903      	ldr	r1, [pc, #12]	@ (800ba88 <stdio_exit_handler+0x10>)
 800ba7c:	4803      	ldr	r0, [pc, #12]	@ (800ba8c <stdio_exit_handler+0x14>)
 800ba7e:	f000 b87b 	b.w	800bb78 <_fwalk_sglue>
 800ba82:	bf00      	nop
 800ba84:	20000100 	.word	0x20000100
 800ba88:	0800d52d 	.word	0x0800d52d
 800ba8c:	20000110 	.word	0x20000110

0800ba90 <cleanup_stdio>:
 800ba90:	6841      	ldr	r1, [r0, #4]
 800ba92:	4b0c      	ldr	r3, [pc, #48]	@ (800bac4 <cleanup_stdio+0x34>)
 800ba94:	4299      	cmp	r1, r3
 800ba96:	b510      	push	{r4, lr}
 800ba98:	4604      	mov	r4, r0
 800ba9a:	d001      	beq.n	800baa0 <cleanup_stdio+0x10>
 800ba9c:	f001 fd46 	bl	800d52c <_fflush_r>
 800baa0:	68a1      	ldr	r1, [r4, #8]
 800baa2:	4b09      	ldr	r3, [pc, #36]	@ (800bac8 <cleanup_stdio+0x38>)
 800baa4:	4299      	cmp	r1, r3
 800baa6:	d002      	beq.n	800baae <cleanup_stdio+0x1e>
 800baa8:	4620      	mov	r0, r4
 800baaa:	f001 fd3f 	bl	800d52c <_fflush_r>
 800baae:	68e1      	ldr	r1, [r4, #12]
 800bab0:	4b06      	ldr	r3, [pc, #24]	@ (800bacc <cleanup_stdio+0x3c>)
 800bab2:	4299      	cmp	r1, r3
 800bab4:	d004      	beq.n	800bac0 <cleanup_stdio+0x30>
 800bab6:	4620      	mov	r0, r4
 800bab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800babc:	f001 bd36 	b.w	800d52c <_fflush_r>
 800bac0:	bd10      	pop	{r4, pc}
 800bac2:	bf00      	nop
 800bac4:	200020f8 	.word	0x200020f8
 800bac8:	20002160 	.word	0x20002160
 800bacc:	200021c8 	.word	0x200021c8

0800bad0 <global_stdio_init.part.0>:
 800bad0:	b510      	push	{r4, lr}
 800bad2:	4b0b      	ldr	r3, [pc, #44]	@ (800bb00 <global_stdio_init.part.0+0x30>)
 800bad4:	4c0b      	ldr	r4, [pc, #44]	@ (800bb04 <global_stdio_init.part.0+0x34>)
 800bad6:	4a0c      	ldr	r2, [pc, #48]	@ (800bb08 <global_stdio_init.part.0+0x38>)
 800bad8:	601a      	str	r2, [r3, #0]
 800bada:	4620      	mov	r0, r4
 800badc:	2200      	movs	r2, #0
 800bade:	2104      	movs	r1, #4
 800bae0:	f7ff ff94 	bl	800ba0c <std>
 800bae4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bae8:	2201      	movs	r2, #1
 800baea:	2109      	movs	r1, #9
 800baec:	f7ff ff8e 	bl	800ba0c <std>
 800baf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800baf4:	2202      	movs	r2, #2
 800baf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bafa:	2112      	movs	r1, #18
 800bafc:	f7ff bf86 	b.w	800ba0c <std>
 800bb00:	20002230 	.word	0x20002230
 800bb04:	200020f8 	.word	0x200020f8
 800bb08:	0800ba79 	.word	0x0800ba79

0800bb0c <__sfp_lock_acquire>:
 800bb0c:	4801      	ldr	r0, [pc, #4]	@ (800bb14 <__sfp_lock_acquire+0x8>)
 800bb0e:	f000 b922 	b.w	800bd56 <__retarget_lock_acquire_recursive>
 800bb12:	bf00      	nop
 800bb14:	20002239 	.word	0x20002239

0800bb18 <__sfp_lock_release>:
 800bb18:	4801      	ldr	r0, [pc, #4]	@ (800bb20 <__sfp_lock_release+0x8>)
 800bb1a:	f000 b91d 	b.w	800bd58 <__retarget_lock_release_recursive>
 800bb1e:	bf00      	nop
 800bb20:	20002239 	.word	0x20002239

0800bb24 <__sinit>:
 800bb24:	b510      	push	{r4, lr}
 800bb26:	4604      	mov	r4, r0
 800bb28:	f7ff fff0 	bl	800bb0c <__sfp_lock_acquire>
 800bb2c:	6a23      	ldr	r3, [r4, #32]
 800bb2e:	b11b      	cbz	r3, 800bb38 <__sinit+0x14>
 800bb30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb34:	f7ff bff0 	b.w	800bb18 <__sfp_lock_release>
 800bb38:	4b04      	ldr	r3, [pc, #16]	@ (800bb4c <__sinit+0x28>)
 800bb3a:	6223      	str	r3, [r4, #32]
 800bb3c:	4b04      	ldr	r3, [pc, #16]	@ (800bb50 <__sinit+0x2c>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d1f5      	bne.n	800bb30 <__sinit+0xc>
 800bb44:	f7ff ffc4 	bl	800bad0 <global_stdio_init.part.0>
 800bb48:	e7f2      	b.n	800bb30 <__sinit+0xc>
 800bb4a:	bf00      	nop
 800bb4c:	0800ba91 	.word	0x0800ba91
 800bb50:	20002230 	.word	0x20002230

0800bb54 <fiprintf>:
 800bb54:	b40e      	push	{r1, r2, r3}
 800bb56:	b503      	push	{r0, r1, lr}
 800bb58:	4601      	mov	r1, r0
 800bb5a:	ab03      	add	r3, sp, #12
 800bb5c:	4805      	ldr	r0, [pc, #20]	@ (800bb74 <fiprintf+0x20>)
 800bb5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb62:	6800      	ldr	r0, [r0, #0]
 800bb64:	9301      	str	r3, [sp, #4]
 800bb66:	f001 fb45 	bl	800d1f4 <_vfiprintf_r>
 800bb6a:	b002      	add	sp, #8
 800bb6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb70:	b003      	add	sp, #12
 800bb72:	4770      	bx	lr
 800bb74:	2000010c 	.word	0x2000010c

0800bb78 <_fwalk_sglue>:
 800bb78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb7c:	4607      	mov	r7, r0
 800bb7e:	4688      	mov	r8, r1
 800bb80:	4614      	mov	r4, r2
 800bb82:	2600      	movs	r6, #0
 800bb84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb88:	f1b9 0901 	subs.w	r9, r9, #1
 800bb8c:	d505      	bpl.n	800bb9a <_fwalk_sglue+0x22>
 800bb8e:	6824      	ldr	r4, [r4, #0]
 800bb90:	2c00      	cmp	r4, #0
 800bb92:	d1f7      	bne.n	800bb84 <_fwalk_sglue+0xc>
 800bb94:	4630      	mov	r0, r6
 800bb96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb9a:	89ab      	ldrh	r3, [r5, #12]
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d907      	bls.n	800bbb0 <_fwalk_sglue+0x38>
 800bba0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bba4:	3301      	adds	r3, #1
 800bba6:	d003      	beq.n	800bbb0 <_fwalk_sglue+0x38>
 800bba8:	4629      	mov	r1, r5
 800bbaa:	4638      	mov	r0, r7
 800bbac:	47c0      	blx	r8
 800bbae:	4306      	orrs	r6, r0
 800bbb0:	3568      	adds	r5, #104	@ 0x68
 800bbb2:	e7e9      	b.n	800bb88 <_fwalk_sglue+0x10>

0800bbb4 <__sread>:
 800bbb4:	b510      	push	{r4, lr}
 800bbb6:	460c      	mov	r4, r1
 800bbb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbbc:	f000 f86c 	bl	800bc98 <_read_r>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	bfab      	itete	ge
 800bbc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bbc6:	89a3      	ldrhlt	r3, [r4, #12]
 800bbc8:	181b      	addge	r3, r3, r0
 800bbca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bbce:	bfac      	ite	ge
 800bbd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bbd2:	81a3      	strhlt	r3, [r4, #12]
 800bbd4:	bd10      	pop	{r4, pc}

0800bbd6 <__swrite>:
 800bbd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbda:	461f      	mov	r7, r3
 800bbdc:	898b      	ldrh	r3, [r1, #12]
 800bbde:	05db      	lsls	r3, r3, #23
 800bbe0:	4605      	mov	r5, r0
 800bbe2:	460c      	mov	r4, r1
 800bbe4:	4616      	mov	r6, r2
 800bbe6:	d505      	bpl.n	800bbf4 <__swrite+0x1e>
 800bbe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbec:	2302      	movs	r3, #2
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f000 f840 	bl	800bc74 <_lseek_r>
 800bbf4:	89a3      	ldrh	r3, [r4, #12]
 800bbf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bbfe:	81a3      	strh	r3, [r4, #12]
 800bc00:	4632      	mov	r2, r6
 800bc02:	463b      	mov	r3, r7
 800bc04:	4628      	mov	r0, r5
 800bc06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc0a:	f000 b867 	b.w	800bcdc <_write_r>

0800bc0e <__sseek>:
 800bc0e:	b510      	push	{r4, lr}
 800bc10:	460c      	mov	r4, r1
 800bc12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc16:	f000 f82d 	bl	800bc74 <_lseek_r>
 800bc1a:	1c43      	adds	r3, r0, #1
 800bc1c:	89a3      	ldrh	r3, [r4, #12]
 800bc1e:	bf15      	itete	ne
 800bc20:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bc22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bc26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bc2a:	81a3      	strheq	r3, [r4, #12]
 800bc2c:	bf18      	it	ne
 800bc2e:	81a3      	strhne	r3, [r4, #12]
 800bc30:	bd10      	pop	{r4, pc}

0800bc32 <__sclose>:
 800bc32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc36:	f000 b80d 	b.w	800bc54 <_close_r>

0800bc3a <memset>:
 800bc3a:	4402      	add	r2, r0
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d100      	bne.n	800bc44 <memset+0xa>
 800bc42:	4770      	bx	lr
 800bc44:	f803 1b01 	strb.w	r1, [r3], #1
 800bc48:	e7f9      	b.n	800bc3e <memset+0x4>
	...

0800bc4c <_localeconv_r>:
 800bc4c:	4800      	ldr	r0, [pc, #0]	@ (800bc50 <_localeconv_r+0x4>)
 800bc4e:	4770      	bx	lr
 800bc50:	2000024c 	.word	0x2000024c

0800bc54 <_close_r>:
 800bc54:	b538      	push	{r3, r4, r5, lr}
 800bc56:	4d06      	ldr	r5, [pc, #24]	@ (800bc70 <_close_r+0x1c>)
 800bc58:	2300      	movs	r3, #0
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	4608      	mov	r0, r1
 800bc5e:	602b      	str	r3, [r5, #0]
 800bc60:	f7f7 fc9e 	bl	80035a0 <_close>
 800bc64:	1c43      	adds	r3, r0, #1
 800bc66:	d102      	bne.n	800bc6e <_close_r+0x1a>
 800bc68:	682b      	ldr	r3, [r5, #0]
 800bc6a:	b103      	cbz	r3, 800bc6e <_close_r+0x1a>
 800bc6c:	6023      	str	r3, [r4, #0]
 800bc6e:	bd38      	pop	{r3, r4, r5, pc}
 800bc70:	20002234 	.word	0x20002234

0800bc74 <_lseek_r>:
 800bc74:	b538      	push	{r3, r4, r5, lr}
 800bc76:	4d07      	ldr	r5, [pc, #28]	@ (800bc94 <_lseek_r+0x20>)
 800bc78:	4604      	mov	r4, r0
 800bc7a:	4608      	mov	r0, r1
 800bc7c:	4611      	mov	r1, r2
 800bc7e:	2200      	movs	r2, #0
 800bc80:	602a      	str	r2, [r5, #0]
 800bc82:	461a      	mov	r2, r3
 800bc84:	f7f7 fcb3 	bl	80035ee <_lseek>
 800bc88:	1c43      	adds	r3, r0, #1
 800bc8a:	d102      	bne.n	800bc92 <_lseek_r+0x1e>
 800bc8c:	682b      	ldr	r3, [r5, #0]
 800bc8e:	b103      	cbz	r3, 800bc92 <_lseek_r+0x1e>
 800bc90:	6023      	str	r3, [r4, #0]
 800bc92:	bd38      	pop	{r3, r4, r5, pc}
 800bc94:	20002234 	.word	0x20002234

0800bc98 <_read_r>:
 800bc98:	b538      	push	{r3, r4, r5, lr}
 800bc9a:	4d07      	ldr	r5, [pc, #28]	@ (800bcb8 <_read_r+0x20>)
 800bc9c:	4604      	mov	r4, r0
 800bc9e:	4608      	mov	r0, r1
 800bca0:	4611      	mov	r1, r2
 800bca2:	2200      	movs	r2, #0
 800bca4:	602a      	str	r2, [r5, #0]
 800bca6:	461a      	mov	r2, r3
 800bca8:	f7f7 fc5d 	bl	8003566 <_read>
 800bcac:	1c43      	adds	r3, r0, #1
 800bcae:	d102      	bne.n	800bcb6 <_read_r+0x1e>
 800bcb0:	682b      	ldr	r3, [r5, #0]
 800bcb2:	b103      	cbz	r3, 800bcb6 <_read_r+0x1e>
 800bcb4:	6023      	str	r3, [r4, #0]
 800bcb6:	bd38      	pop	{r3, r4, r5, pc}
 800bcb8:	20002234 	.word	0x20002234

0800bcbc <_sbrk_r>:
 800bcbc:	b538      	push	{r3, r4, r5, lr}
 800bcbe:	4d06      	ldr	r5, [pc, #24]	@ (800bcd8 <_sbrk_r+0x1c>)
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	4608      	mov	r0, r1
 800bcc6:	602b      	str	r3, [r5, #0]
 800bcc8:	f7f7 fc9e 	bl	8003608 <_sbrk>
 800bccc:	1c43      	adds	r3, r0, #1
 800bcce:	d102      	bne.n	800bcd6 <_sbrk_r+0x1a>
 800bcd0:	682b      	ldr	r3, [r5, #0]
 800bcd2:	b103      	cbz	r3, 800bcd6 <_sbrk_r+0x1a>
 800bcd4:	6023      	str	r3, [r4, #0]
 800bcd6:	bd38      	pop	{r3, r4, r5, pc}
 800bcd8:	20002234 	.word	0x20002234

0800bcdc <_write_r>:
 800bcdc:	b538      	push	{r3, r4, r5, lr}
 800bcde:	4d07      	ldr	r5, [pc, #28]	@ (800bcfc <_write_r+0x20>)
 800bce0:	4604      	mov	r4, r0
 800bce2:	4608      	mov	r0, r1
 800bce4:	4611      	mov	r1, r2
 800bce6:	2200      	movs	r2, #0
 800bce8:	602a      	str	r2, [r5, #0]
 800bcea:	461a      	mov	r2, r3
 800bcec:	f7f6 fc16 	bl	800251c <_write>
 800bcf0:	1c43      	adds	r3, r0, #1
 800bcf2:	d102      	bne.n	800bcfa <_write_r+0x1e>
 800bcf4:	682b      	ldr	r3, [r5, #0]
 800bcf6:	b103      	cbz	r3, 800bcfa <_write_r+0x1e>
 800bcf8:	6023      	str	r3, [r4, #0]
 800bcfa:	bd38      	pop	{r3, r4, r5, pc}
 800bcfc:	20002234 	.word	0x20002234

0800bd00 <__errno>:
 800bd00:	4b01      	ldr	r3, [pc, #4]	@ (800bd08 <__errno+0x8>)
 800bd02:	6818      	ldr	r0, [r3, #0]
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop
 800bd08:	2000010c 	.word	0x2000010c

0800bd0c <__libc_init_array>:
 800bd0c:	b570      	push	{r4, r5, r6, lr}
 800bd0e:	4d0d      	ldr	r5, [pc, #52]	@ (800bd44 <__libc_init_array+0x38>)
 800bd10:	4c0d      	ldr	r4, [pc, #52]	@ (800bd48 <__libc_init_array+0x3c>)
 800bd12:	1b64      	subs	r4, r4, r5
 800bd14:	10a4      	asrs	r4, r4, #2
 800bd16:	2600      	movs	r6, #0
 800bd18:	42a6      	cmp	r6, r4
 800bd1a:	d109      	bne.n	800bd30 <__libc_init_array+0x24>
 800bd1c:	4d0b      	ldr	r5, [pc, #44]	@ (800bd4c <__libc_init_array+0x40>)
 800bd1e:	4c0c      	ldr	r4, [pc, #48]	@ (800bd50 <__libc_init_array+0x44>)
 800bd20:	f001 fdca 	bl	800d8b8 <_init>
 800bd24:	1b64      	subs	r4, r4, r5
 800bd26:	10a4      	asrs	r4, r4, #2
 800bd28:	2600      	movs	r6, #0
 800bd2a:	42a6      	cmp	r6, r4
 800bd2c:	d105      	bne.n	800bd3a <__libc_init_array+0x2e>
 800bd2e:	bd70      	pop	{r4, r5, r6, pc}
 800bd30:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd34:	4798      	blx	r3
 800bd36:	3601      	adds	r6, #1
 800bd38:	e7ee      	b.n	800bd18 <__libc_init_array+0xc>
 800bd3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd3e:	4798      	blx	r3
 800bd40:	3601      	adds	r6, #1
 800bd42:	e7f2      	b.n	800bd2a <__libc_init_array+0x1e>
 800bd44:	0800dd3c 	.word	0x0800dd3c
 800bd48:	0800dd3c 	.word	0x0800dd3c
 800bd4c:	0800dd3c 	.word	0x0800dd3c
 800bd50:	0800dd40 	.word	0x0800dd40

0800bd54 <__retarget_lock_init_recursive>:
 800bd54:	4770      	bx	lr

0800bd56 <__retarget_lock_acquire_recursive>:
 800bd56:	4770      	bx	lr

0800bd58 <__retarget_lock_release_recursive>:
 800bd58:	4770      	bx	lr

0800bd5a <abort>:
 800bd5a:	b508      	push	{r3, lr}
 800bd5c:	2006      	movs	r0, #6
 800bd5e:	f001 fcc9 	bl	800d6f4 <raise>
 800bd62:	2001      	movs	r0, #1
 800bd64:	f7f7 fbf4 	bl	8003550 <_exit>

0800bd68 <quorem>:
 800bd68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd6c:	6903      	ldr	r3, [r0, #16]
 800bd6e:	690c      	ldr	r4, [r1, #16]
 800bd70:	42a3      	cmp	r3, r4
 800bd72:	4607      	mov	r7, r0
 800bd74:	db7e      	blt.n	800be74 <quorem+0x10c>
 800bd76:	3c01      	subs	r4, #1
 800bd78:	f101 0814 	add.w	r8, r1, #20
 800bd7c:	00a3      	lsls	r3, r4, #2
 800bd7e:	f100 0514 	add.w	r5, r0, #20
 800bd82:	9300      	str	r3, [sp, #0]
 800bd84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd88:	9301      	str	r3, [sp, #4]
 800bd8a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd92:	3301      	adds	r3, #1
 800bd94:	429a      	cmp	r2, r3
 800bd96:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bd9a:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd9e:	d32e      	bcc.n	800bdfe <quorem+0x96>
 800bda0:	f04f 0a00 	mov.w	sl, #0
 800bda4:	46c4      	mov	ip, r8
 800bda6:	46ae      	mov	lr, r5
 800bda8:	46d3      	mov	fp, sl
 800bdaa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bdae:	b298      	uxth	r0, r3
 800bdb0:	fb06 a000 	mla	r0, r6, r0, sl
 800bdb4:	0c02      	lsrs	r2, r0, #16
 800bdb6:	0c1b      	lsrs	r3, r3, #16
 800bdb8:	fb06 2303 	mla	r3, r6, r3, r2
 800bdbc:	f8de 2000 	ldr.w	r2, [lr]
 800bdc0:	b280      	uxth	r0, r0
 800bdc2:	b292      	uxth	r2, r2
 800bdc4:	1a12      	subs	r2, r2, r0
 800bdc6:	445a      	add	r2, fp
 800bdc8:	f8de 0000 	ldr.w	r0, [lr]
 800bdcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bdd6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bdda:	b292      	uxth	r2, r2
 800bddc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bde0:	45e1      	cmp	r9, ip
 800bde2:	f84e 2b04 	str.w	r2, [lr], #4
 800bde6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bdea:	d2de      	bcs.n	800bdaa <quorem+0x42>
 800bdec:	9b00      	ldr	r3, [sp, #0]
 800bdee:	58eb      	ldr	r3, [r5, r3]
 800bdf0:	b92b      	cbnz	r3, 800bdfe <quorem+0x96>
 800bdf2:	9b01      	ldr	r3, [sp, #4]
 800bdf4:	3b04      	subs	r3, #4
 800bdf6:	429d      	cmp	r5, r3
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	d32f      	bcc.n	800be5c <quorem+0xf4>
 800bdfc:	613c      	str	r4, [r7, #16]
 800bdfe:	4638      	mov	r0, r7
 800be00:	f001 f8c6 	bl	800cf90 <__mcmp>
 800be04:	2800      	cmp	r0, #0
 800be06:	db25      	blt.n	800be54 <quorem+0xec>
 800be08:	4629      	mov	r1, r5
 800be0a:	2000      	movs	r0, #0
 800be0c:	f858 2b04 	ldr.w	r2, [r8], #4
 800be10:	f8d1 c000 	ldr.w	ip, [r1]
 800be14:	fa1f fe82 	uxth.w	lr, r2
 800be18:	fa1f f38c 	uxth.w	r3, ip
 800be1c:	eba3 030e 	sub.w	r3, r3, lr
 800be20:	4403      	add	r3, r0
 800be22:	0c12      	lsrs	r2, r2, #16
 800be24:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800be28:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be32:	45c1      	cmp	r9, r8
 800be34:	f841 3b04 	str.w	r3, [r1], #4
 800be38:	ea4f 4022 	mov.w	r0, r2, asr #16
 800be3c:	d2e6      	bcs.n	800be0c <quorem+0xa4>
 800be3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be46:	b922      	cbnz	r2, 800be52 <quorem+0xea>
 800be48:	3b04      	subs	r3, #4
 800be4a:	429d      	cmp	r5, r3
 800be4c:	461a      	mov	r2, r3
 800be4e:	d30b      	bcc.n	800be68 <quorem+0x100>
 800be50:	613c      	str	r4, [r7, #16]
 800be52:	3601      	adds	r6, #1
 800be54:	4630      	mov	r0, r6
 800be56:	b003      	add	sp, #12
 800be58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be5c:	6812      	ldr	r2, [r2, #0]
 800be5e:	3b04      	subs	r3, #4
 800be60:	2a00      	cmp	r2, #0
 800be62:	d1cb      	bne.n	800bdfc <quorem+0x94>
 800be64:	3c01      	subs	r4, #1
 800be66:	e7c6      	b.n	800bdf6 <quorem+0x8e>
 800be68:	6812      	ldr	r2, [r2, #0]
 800be6a:	3b04      	subs	r3, #4
 800be6c:	2a00      	cmp	r2, #0
 800be6e:	d1ef      	bne.n	800be50 <quorem+0xe8>
 800be70:	3c01      	subs	r4, #1
 800be72:	e7ea      	b.n	800be4a <quorem+0xe2>
 800be74:	2000      	movs	r0, #0
 800be76:	e7ee      	b.n	800be56 <quorem+0xee>

0800be78 <_dtoa_r>:
 800be78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be7c:	69c7      	ldr	r7, [r0, #28]
 800be7e:	b097      	sub	sp, #92	@ 0x5c
 800be80:	ed8d 0b04 	vstr	d0, [sp, #16]
 800be84:	ec55 4b10 	vmov	r4, r5, d0
 800be88:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800be8a:	9107      	str	r1, [sp, #28]
 800be8c:	4681      	mov	r9, r0
 800be8e:	920c      	str	r2, [sp, #48]	@ 0x30
 800be90:	9311      	str	r3, [sp, #68]	@ 0x44
 800be92:	b97f      	cbnz	r7, 800beb4 <_dtoa_r+0x3c>
 800be94:	2010      	movs	r0, #16
 800be96:	f7ff f8ad 	bl	800aff4 <malloc>
 800be9a:	4602      	mov	r2, r0
 800be9c:	f8c9 001c 	str.w	r0, [r9, #28]
 800bea0:	b920      	cbnz	r0, 800beac <_dtoa_r+0x34>
 800bea2:	4ba9      	ldr	r3, [pc, #676]	@ (800c148 <_dtoa_r+0x2d0>)
 800bea4:	21ef      	movs	r1, #239	@ 0xef
 800bea6:	48a9      	ldr	r0, [pc, #676]	@ (800c14c <_dtoa_r+0x2d4>)
 800bea8:	f7ff f886 	bl	800afb8 <__assert_func>
 800beac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800beb0:	6007      	str	r7, [r0, #0]
 800beb2:	60c7      	str	r7, [r0, #12]
 800beb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800beb8:	6819      	ldr	r1, [r3, #0]
 800beba:	b159      	cbz	r1, 800bed4 <_dtoa_r+0x5c>
 800bebc:	685a      	ldr	r2, [r3, #4]
 800bebe:	604a      	str	r2, [r1, #4]
 800bec0:	2301      	movs	r3, #1
 800bec2:	4093      	lsls	r3, r2
 800bec4:	608b      	str	r3, [r1, #8]
 800bec6:	4648      	mov	r0, r9
 800bec8:	f000 fe30 	bl	800cb2c <_Bfree>
 800becc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bed0:	2200      	movs	r2, #0
 800bed2:	601a      	str	r2, [r3, #0]
 800bed4:	1e2b      	subs	r3, r5, #0
 800bed6:	bfb9      	ittee	lt
 800bed8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bedc:	9305      	strlt	r3, [sp, #20]
 800bede:	2300      	movge	r3, #0
 800bee0:	6033      	strge	r3, [r6, #0]
 800bee2:	9f05      	ldr	r7, [sp, #20]
 800bee4:	4b9a      	ldr	r3, [pc, #616]	@ (800c150 <_dtoa_r+0x2d8>)
 800bee6:	bfbc      	itt	lt
 800bee8:	2201      	movlt	r2, #1
 800beea:	6032      	strlt	r2, [r6, #0]
 800beec:	43bb      	bics	r3, r7
 800beee:	d112      	bne.n	800bf16 <_dtoa_r+0x9e>
 800bef0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bef2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bef6:	6013      	str	r3, [r2, #0]
 800bef8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800befc:	4323      	orrs	r3, r4
 800befe:	f000 855a 	beq.w	800c9b6 <_dtoa_r+0xb3e>
 800bf02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf04:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c164 <_dtoa_r+0x2ec>
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	f000 855c 	beq.w	800c9c6 <_dtoa_r+0xb4e>
 800bf0e:	f10a 0303 	add.w	r3, sl, #3
 800bf12:	f000 bd56 	b.w	800c9c2 <_dtoa_r+0xb4a>
 800bf16:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	ec51 0b17 	vmov	r0, r1, d7
 800bf20:	2300      	movs	r3, #0
 800bf22:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800bf26:	f7f4 fdcf 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf2a:	4680      	mov	r8, r0
 800bf2c:	b158      	cbz	r0, 800bf46 <_dtoa_r+0xce>
 800bf2e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf30:	2301      	movs	r3, #1
 800bf32:	6013      	str	r3, [r2, #0]
 800bf34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf36:	b113      	cbz	r3, 800bf3e <_dtoa_r+0xc6>
 800bf38:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bf3a:	4b86      	ldr	r3, [pc, #536]	@ (800c154 <_dtoa_r+0x2dc>)
 800bf3c:	6013      	str	r3, [r2, #0]
 800bf3e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c168 <_dtoa_r+0x2f0>
 800bf42:	f000 bd40 	b.w	800c9c6 <_dtoa_r+0xb4e>
 800bf46:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800bf4a:	aa14      	add	r2, sp, #80	@ 0x50
 800bf4c:	a915      	add	r1, sp, #84	@ 0x54
 800bf4e:	4648      	mov	r0, r9
 800bf50:	f001 f8ce 	bl	800d0f0 <__d2b>
 800bf54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bf58:	9002      	str	r0, [sp, #8]
 800bf5a:	2e00      	cmp	r6, #0
 800bf5c:	d078      	beq.n	800c050 <_dtoa_r+0x1d8>
 800bf5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf60:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800bf64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bf6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bf70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bf74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bf78:	4619      	mov	r1, r3
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	4b76      	ldr	r3, [pc, #472]	@ (800c158 <_dtoa_r+0x2e0>)
 800bf7e:	f7f4 f983 	bl	8000288 <__aeabi_dsub>
 800bf82:	a36b      	add	r3, pc, #428	@ (adr r3, 800c130 <_dtoa_r+0x2b8>)
 800bf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf88:	f7f4 fb36 	bl	80005f8 <__aeabi_dmul>
 800bf8c:	a36a      	add	r3, pc, #424	@ (adr r3, 800c138 <_dtoa_r+0x2c0>)
 800bf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf92:	f7f4 f97b 	bl	800028c <__adddf3>
 800bf96:	4604      	mov	r4, r0
 800bf98:	4630      	mov	r0, r6
 800bf9a:	460d      	mov	r5, r1
 800bf9c:	f7f4 fac2 	bl	8000524 <__aeabi_i2d>
 800bfa0:	a367      	add	r3, pc, #412	@ (adr r3, 800c140 <_dtoa_r+0x2c8>)
 800bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa6:	f7f4 fb27 	bl	80005f8 <__aeabi_dmul>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	460b      	mov	r3, r1
 800bfae:	4620      	mov	r0, r4
 800bfb0:	4629      	mov	r1, r5
 800bfb2:	f7f4 f96b 	bl	800028c <__adddf3>
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	460d      	mov	r5, r1
 800bfba:	f7f4 fdcd 	bl	8000b58 <__aeabi_d2iz>
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	4607      	mov	r7, r0
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	4629      	mov	r1, r5
 800bfc8:	f7f4 fd88 	bl	8000adc <__aeabi_dcmplt>
 800bfcc:	b140      	cbz	r0, 800bfe0 <_dtoa_r+0x168>
 800bfce:	4638      	mov	r0, r7
 800bfd0:	f7f4 faa8 	bl	8000524 <__aeabi_i2d>
 800bfd4:	4622      	mov	r2, r4
 800bfd6:	462b      	mov	r3, r5
 800bfd8:	f7f4 fd76 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfdc:	b900      	cbnz	r0, 800bfe0 <_dtoa_r+0x168>
 800bfde:	3f01      	subs	r7, #1
 800bfe0:	2f16      	cmp	r7, #22
 800bfe2:	d852      	bhi.n	800c08a <_dtoa_r+0x212>
 800bfe4:	4b5d      	ldr	r3, [pc, #372]	@ (800c15c <_dtoa_r+0x2e4>)
 800bfe6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bff2:	f7f4 fd73 	bl	8000adc <__aeabi_dcmplt>
 800bff6:	2800      	cmp	r0, #0
 800bff8:	d049      	beq.n	800c08e <_dtoa_r+0x216>
 800bffa:	3f01      	subs	r7, #1
 800bffc:	2300      	movs	r3, #0
 800bffe:	9310      	str	r3, [sp, #64]	@ 0x40
 800c000:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c002:	1b9b      	subs	r3, r3, r6
 800c004:	1e5a      	subs	r2, r3, #1
 800c006:	bf45      	ittet	mi
 800c008:	f1c3 0301 	rsbmi	r3, r3, #1
 800c00c:	9300      	strmi	r3, [sp, #0]
 800c00e:	2300      	movpl	r3, #0
 800c010:	2300      	movmi	r3, #0
 800c012:	9206      	str	r2, [sp, #24]
 800c014:	bf54      	ite	pl
 800c016:	9300      	strpl	r3, [sp, #0]
 800c018:	9306      	strmi	r3, [sp, #24]
 800c01a:	2f00      	cmp	r7, #0
 800c01c:	db39      	blt.n	800c092 <_dtoa_r+0x21a>
 800c01e:	9b06      	ldr	r3, [sp, #24]
 800c020:	970d      	str	r7, [sp, #52]	@ 0x34
 800c022:	443b      	add	r3, r7
 800c024:	9306      	str	r3, [sp, #24]
 800c026:	2300      	movs	r3, #0
 800c028:	9308      	str	r3, [sp, #32]
 800c02a:	9b07      	ldr	r3, [sp, #28]
 800c02c:	2b09      	cmp	r3, #9
 800c02e:	d863      	bhi.n	800c0f8 <_dtoa_r+0x280>
 800c030:	2b05      	cmp	r3, #5
 800c032:	bfc4      	itt	gt
 800c034:	3b04      	subgt	r3, #4
 800c036:	9307      	strgt	r3, [sp, #28]
 800c038:	9b07      	ldr	r3, [sp, #28]
 800c03a:	f1a3 0302 	sub.w	r3, r3, #2
 800c03e:	bfcc      	ite	gt
 800c040:	2400      	movgt	r4, #0
 800c042:	2401      	movle	r4, #1
 800c044:	2b03      	cmp	r3, #3
 800c046:	d863      	bhi.n	800c110 <_dtoa_r+0x298>
 800c048:	e8df f003 	tbb	[pc, r3]
 800c04c:	2b375452 	.word	0x2b375452
 800c050:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c054:	441e      	add	r6, r3
 800c056:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c05a:	2b20      	cmp	r3, #32
 800c05c:	bfc1      	itttt	gt
 800c05e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c062:	409f      	lslgt	r7, r3
 800c064:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c068:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c06c:	bfd6      	itet	le
 800c06e:	f1c3 0320 	rsble	r3, r3, #32
 800c072:	ea47 0003 	orrgt.w	r0, r7, r3
 800c076:	fa04 f003 	lslle.w	r0, r4, r3
 800c07a:	f7f4 fa43 	bl	8000504 <__aeabi_ui2d>
 800c07e:	2201      	movs	r2, #1
 800c080:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c084:	3e01      	subs	r6, #1
 800c086:	9212      	str	r2, [sp, #72]	@ 0x48
 800c088:	e776      	b.n	800bf78 <_dtoa_r+0x100>
 800c08a:	2301      	movs	r3, #1
 800c08c:	e7b7      	b.n	800bffe <_dtoa_r+0x186>
 800c08e:	9010      	str	r0, [sp, #64]	@ 0x40
 800c090:	e7b6      	b.n	800c000 <_dtoa_r+0x188>
 800c092:	9b00      	ldr	r3, [sp, #0]
 800c094:	1bdb      	subs	r3, r3, r7
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	427b      	negs	r3, r7
 800c09a:	9308      	str	r3, [sp, #32]
 800c09c:	2300      	movs	r3, #0
 800c09e:	930d      	str	r3, [sp, #52]	@ 0x34
 800c0a0:	e7c3      	b.n	800c02a <_dtoa_r+0x1b2>
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0a8:	eb07 0b03 	add.w	fp, r7, r3
 800c0ac:	f10b 0301 	add.w	r3, fp, #1
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	9303      	str	r3, [sp, #12]
 800c0b4:	bfb8      	it	lt
 800c0b6:	2301      	movlt	r3, #1
 800c0b8:	e006      	b.n	800c0c8 <_dtoa_r+0x250>
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	dd28      	ble.n	800c116 <_dtoa_r+0x29e>
 800c0c4:	469b      	mov	fp, r3
 800c0c6:	9303      	str	r3, [sp, #12]
 800c0c8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c0cc:	2100      	movs	r1, #0
 800c0ce:	2204      	movs	r2, #4
 800c0d0:	f102 0514 	add.w	r5, r2, #20
 800c0d4:	429d      	cmp	r5, r3
 800c0d6:	d926      	bls.n	800c126 <_dtoa_r+0x2ae>
 800c0d8:	6041      	str	r1, [r0, #4]
 800c0da:	4648      	mov	r0, r9
 800c0dc:	f000 fce6 	bl	800caac <_Balloc>
 800c0e0:	4682      	mov	sl, r0
 800c0e2:	2800      	cmp	r0, #0
 800c0e4:	d142      	bne.n	800c16c <_dtoa_r+0x2f4>
 800c0e6:	4b1e      	ldr	r3, [pc, #120]	@ (800c160 <_dtoa_r+0x2e8>)
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	f240 11af 	movw	r1, #431	@ 0x1af
 800c0ee:	e6da      	b.n	800bea6 <_dtoa_r+0x2e>
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	e7e3      	b.n	800c0bc <_dtoa_r+0x244>
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	e7d5      	b.n	800c0a4 <_dtoa_r+0x22c>
 800c0f8:	2401      	movs	r4, #1
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	9307      	str	r3, [sp, #28]
 800c0fe:	9409      	str	r4, [sp, #36]	@ 0x24
 800c100:	f04f 3bff 	mov.w	fp, #4294967295
 800c104:	2200      	movs	r2, #0
 800c106:	f8cd b00c 	str.w	fp, [sp, #12]
 800c10a:	2312      	movs	r3, #18
 800c10c:	920c      	str	r2, [sp, #48]	@ 0x30
 800c10e:	e7db      	b.n	800c0c8 <_dtoa_r+0x250>
 800c110:	2301      	movs	r3, #1
 800c112:	9309      	str	r3, [sp, #36]	@ 0x24
 800c114:	e7f4      	b.n	800c100 <_dtoa_r+0x288>
 800c116:	f04f 0b01 	mov.w	fp, #1
 800c11a:	f8cd b00c 	str.w	fp, [sp, #12]
 800c11e:	465b      	mov	r3, fp
 800c120:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c124:	e7d0      	b.n	800c0c8 <_dtoa_r+0x250>
 800c126:	3101      	adds	r1, #1
 800c128:	0052      	lsls	r2, r2, #1
 800c12a:	e7d1      	b.n	800c0d0 <_dtoa_r+0x258>
 800c12c:	f3af 8000 	nop.w
 800c130:	636f4361 	.word	0x636f4361
 800c134:	3fd287a7 	.word	0x3fd287a7
 800c138:	8b60c8b3 	.word	0x8b60c8b3
 800c13c:	3fc68a28 	.word	0x3fc68a28
 800c140:	509f79fb 	.word	0x509f79fb
 800c144:	3fd34413 	.word	0x3fd34413
 800c148:	0800da3d 	.word	0x0800da3d
 800c14c:	0800da54 	.word	0x0800da54
 800c150:	7ff00000 	.word	0x7ff00000
 800c154:	0800da0d 	.word	0x0800da0d
 800c158:	3ff80000 	.word	0x3ff80000
 800c15c:	0800db68 	.word	0x0800db68
 800c160:	0800daac 	.word	0x0800daac
 800c164:	0800da39 	.word	0x0800da39
 800c168:	0800da0c 	.word	0x0800da0c
 800c16c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c170:	6018      	str	r0, [r3, #0]
 800c172:	9b03      	ldr	r3, [sp, #12]
 800c174:	2b0e      	cmp	r3, #14
 800c176:	f200 80a1 	bhi.w	800c2bc <_dtoa_r+0x444>
 800c17a:	2c00      	cmp	r4, #0
 800c17c:	f000 809e 	beq.w	800c2bc <_dtoa_r+0x444>
 800c180:	2f00      	cmp	r7, #0
 800c182:	dd33      	ble.n	800c1ec <_dtoa_r+0x374>
 800c184:	4b9c      	ldr	r3, [pc, #624]	@ (800c3f8 <_dtoa_r+0x580>)
 800c186:	f007 020f 	and.w	r2, r7, #15
 800c18a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c18e:	ed93 7b00 	vldr	d7, [r3]
 800c192:	05f8      	lsls	r0, r7, #23
 800c194:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c198:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c19c:	d516      	bpl.n	800c1cc <_dtoa_r+0x354>
 800c19e:	4b97      	ldr	r3, [pc, #604]	@ (800c3fc <_dtoa_r+0x584>)
 800c1a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c1a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c1a8:	f7f4 fb50 	bl	800084c <__aeabi_ddiv>
 800c1ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1b0:	f004 040f 	and.w	r4, r4, #15
 800c1b4:	2603      	movs	r6, #3
 800c1b6:	4d91      	ldr	r5, [pc, #580]	@ (800c3fc <_dtoa_r+0x584>)
 800c1b8:	b954      	cbnz	r4, 800c1d0 <_dtoa_r+0x358>
 800c1ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c1be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1c2:	f7f4 fb43 	bl	800084c <__aeabi_ddiv>
 800c1c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1ca:	e028      	b.n	800c21e <_dtoa_r+0x3a6>
 800c1cc:	2602      	movs	r6, #2
 800c1ce:	e7f2      	b.n	800c1b6 <_dtoa_r+0x33e>
 800c1d0:	07e1      	lsls	r1, r4, #31
 800c1d2:	d508      	bpl.n	800c1e6 <_dtoa_r+0x36e>
 800c1d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c1d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c1dc:	f7f4 fa0c 	bl	80005f8 <__aeabi_dmul>
 800c1e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c1e4:	3601      	adds	r6, #1
 800c1e6:	1064      	asrs	r4, r4, #1
 800c1e8:	3508      	adds	r5, #8
 800c1ea:	e7e5      	b.n	800c1b8 <_dtoa_r+0x340>
 800c1ec:	f000 80af 	beq.w	800c34e <_dtoa_r+0x4d6>
 800c1f0:	427c      	negs	r4, r7
 800c1f2:	4b81      	ldr	r3, [pc, #516]	@ (800c3f8 <_dtoa_r+0x580>)
 800c1f4:	4d81      	ldr	r5, [pc, #516]	@ (800c3fc <_dtoa_r+0x584>)
 800c1f6:	f004 020f 	and.w	r2, r4, #15
 800c1fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c202:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c206:	f7f4 f9f7 	bl	80005f8 <__aeabi_dmul>
 800c20a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c20e:	1124      	asrs	r4, r4, #4
 800c210:	2300      	movs	r3, #0
 800c212:	2602      	movs	r6, #2
 800c214:	2c00      	cmp	r4, #0
 800c216:	f040 808f 	bne.w	800c338 <_dtoa_r+0x4c0>
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1d3      	bne.n	800c1c6 <_dtoa_r+0x34e>
 800c21e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c220:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c224:	2b00      	cmp	r3, #0
 800c226:	f000 8094 	beq.w	800c352 <_dtoa_r+0x4da>
 800c22a:	4b75      	ldr	r3, [pc, #468]	@ (800c400 <_dtoa_r+0x588>)
 800c22c:	2200      	movs	r2, #0
 800c22e:	4620      	mov	r0, r4
 800c230:	4629      	mov	r1, r5
 800c232:	f7f4 fc53 	bl	8000adc <__aeabi_dcmplt>
 800c236:	2800      	cmp	r0, #0
 800c238:	f000 808b 	beq.w	800c352 <_dtoa_r+0x4da>
 800c23c:	9b03      	ldr	r3, [sp, #12]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f000 8087 	beq.w	800c352 <_dtoa_r+0x4da>
 800c244:	f1bb 0f00 	cmp.w	fp, #0
 800c248:	dd34      	ble.n	800c2b4 <_dtoa_r+0x43c>
 800c24a:	4620      	mov	r0, r4
 800c24c:	4b6d      	ldr	r3, [pc, #436]	@ (800c404 <_dtoa_r+0x58c>)
 800c24e:	2200      	movs	r2, #0
 800c250:	4629      	mov	r1, r5
 800c252:	f7f4 f9d1 	bl	80005f8 <__aeabi_dmul>
 800c256:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c25a:	f107 38ff 	add.w	r8, r7, #4294967295
 800c25e:	3601      	adds	r6, #1
 800c260:	465c      	mov	r4, fp
 800c262:	4630      	mov	r0, r6
 800c264:	f7f4 f95e 	bl	8000524 <__aeabi_i2d>
 800c268:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c26c:	f7f4 f9c4 	bl	80005f8 <__aeabi_dmul>
 800c270:	4b65      	ldr	r3, [pc, #404]	@ (800c408 <_dtoa_r+0x590>)
 800c272:	2200      	movs	r2, #0
 800c274:	f7f4 f80a 	bl	800028c <__adddf3>
 800c278:	4605      	mov	r5, r0
 800c27a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c27e:	2c00      	cmp	r4, #0
 800c280:	d16a      	bne.n	800c358 <_dtoa_r+0x4e0>
 800c282:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c286:	4b61      	ldr	r3, [pc, #388]	@ (800c40c <_dtoa_r+0x594>)
 800c288:	2200      	movs	r2, #0
 800c28a:	f7f3 fffd 	bl	8000288 <__aeabi_dsub>
 800c28e:	4602      	mov	r2, r0
 800c290:	460b      	mov	r3, r1
 800c292:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c296:	462a      	mov	r2, r5
 800c298:	4633      	mov	r3, r6
 800c29a:	f7f4 fc3d 	bl	8000b18 <__aeabi_dcmpgt>
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	f040 8298 	bne.w	800c7d4 <_dtoa_r+0x95c>
 800c2a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2a8:	462a      	mov	r2, r5
 800c2aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c2ae:	f7f4 fc15 	bl	8000adc <__aeabi_dcmplt>
 800c2b2:	bb38      	cbnz	r0, 800c304 <_dtoa_r+0x48c>
 800c2b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c2b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c2bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	f2c0 8157 	blt.w	800c572 <_dtoa_r+0x6fa>
 800c2c4:	2f0e      	cmp	r7, #14
 800c2c6:	f300 8154 	bgt.w	800c572 <_dtoa_r+0x6fa>
 800c2ca:	4b4b      	ldr	r3, [pc, #300]	@ (800c3f8 <_dtoa_r+0x580>)
 800c2cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c2d0:	ed93 7b00 	vldr	d7, [r3]
 800c2d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	ed8d 7b00 	vstr	d7, [sp]
 800c2dc:	f280 80e5 	bge.w	800c4aa <_dtoa_r+0x632>
 800c2e0:	9b03      	ldr	r3, [sp, #12]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	f300 80e1 	bgt.w	800c4aa <_dtoa_r+0x632>
 800c2e8:	d10c      	bne.n	800c304 <_dtoa_r+0x48c>
 800c2ea:	4b48      	ldr	r3, [pc, #288]	@ (800c40c <_dtoa_r+0x594>)
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	ec51 0b17 	vmov	r0, r1, d7
 800c2f2:	f7f4 f981 	bl	80005f8 <__aeabi_dmul>
 800c2f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2fa:	f7f4 fc03 	bl	8000b04 <__aeabi_dcmpge>
 800c2fe:	2800      	cmp	r0, #0
 800c300:	f000 8266 	beq.w	800c7d0 <_dtoa_r+0x958>
 800c304:	2400      	movs	r4, #0
 800c306:	4625      	mov	r5, r4
 800c308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c30a:	4656      	mov	r6, sl
 800c30c:	ea6f 0803 	mvn.w	r8, r3
 800c310:	2700      	movs	r7, #0
 800c312:	4621      	mov	r1, r4
 800c314:	4648      	mov	r0, r9
 800c316:	f000 fc09 	bl	800cb2c <_Bfree>
 800c31a:	2d00      	cmp	r5, #0
 800c31c:	f000 80bd 	beq.w	800c49a <_dtoa_r+0x622>
 800c320:	b12f      	cbz	r7, 800c32e <_dtoa_r+0x4b6>
 800c322:	42af      	cmp	r7, r5
 800c324:	d003      	beq.n	800c32e <_dtoa_r+0x4b6>
 800c326:	4639      	mov	r1, r7
 800c328:	4648      	mov	r0, r9
 800c32a:	f000 fbff 	bl	800cb2c <_Bfree>
 800c32e:	4629      	mov	r1, r5
 800c330:	4648      	mov	r0, r9
 800c332:	f000 fbfb 	bl	800cb2c <_Bfree>
 800c336:	e0b0      	b.n	800c49a <_dtoa_r+0x622>
 800c338:	07e2      	lsls	r2, r4, #31
 800c33a:	d505      	bpl.n	800c348 <_dtoa_r+0x4d0>
 800c33c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c340:	f7f4 f95a 	bl	80005f8 <__aeabi_dmul>
 800c344:	3601      	adds	r6, #1
 800c346:	2301      	movs	r3, #1
 800c348:	1064      	asrs	r4, r4, #1
 800c34a:	3508      	adds	r5, #8
 800c34c:	e762      	b.n	800c214 <_dtoa_r+0x39c>
 800c34e:	2602      	movs	r6, #2
 800c350:	e765      	b.n	800c21e <_dtoa_r+0x3a6>
 800c352:	9c03      	ldr	r4, [sp, #12]
 800c354:	46b8      	mov	r8, r7
 800c356:	e784      	b.n	800c262 <_dtoa_r+0x3ea>
 800c358:	4b27      	ldr	r3, [pc, #156]	@ (800c3f8 <_dtoa_r+0x580>)
 800c35a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c35c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c360:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c364:	4454      	add	r4, sl
 800c366:	2900      	cmp	r1, #0
 800c368:	d054      	beq.n	800c414 <_dtoa_r+0x59c>
 800c36a:	4929      	ldr	r1, [pc, #164]	@ (800c410 <_dtoa_r+0x598>)
 800c36c:	2000      	movs	r0, #0
 800c36e:	f7f4 fa6d 	bl	800084c <__aeabi_ddiv>
 800c372:	4633      	mov	r3, r6
 800c374:	462a      	mov	r2, r5
 800c376:	f7f3 ff87 	bl	8000288 <__aeabi_dsub>
 800c37a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c37e:	4656      	mov	r6, sl
 800c380:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c384:	f7f4 fbe8 	bl	8000b58 <__aeabi_d2iz>
 800c388:	4605      	mov	r5, r0
 800c38a:	f7f4 f8cb 	bl	8000524 <__aeabi_i2d>
 800c38e:	4602      	mov	r2, r0
 800c390:	460b      	mov	r3, r1
 800c392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c396:	f7f3 ff77 	bl	8000288 <__aeabi_dsub>
 800c39a:	3530      	adds	r5, #48	@ 0x30
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c3a4:	f806 5b01 	strb.w	r5, [r6], #1
 800c3a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c3ac:	f7f4 fb96 	bl	8000adc <__aeabi_dcmplt>
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	d172      	bne.n	800c49a <_dtoa_r+0x622>
 800c3b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3b8:	4911      	ldr	r1, [pc, #68]	@ (800c400 <_dtoa_r+0x588>)
 800c3ba:	2000      	movs	r0, #0
 800c3bc:	f7f3 ff64 	bl	8000288 <__aeabi_dsub>
 800c3c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c3c4:	f7f4 fb8a 	bl	8000adc <__aeabi_dcmplt>
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	f040 80b4 	bne.w	800c536 <_dtoa_r+0x6be>
 800c3ce:	42a6      	cmp	r6, r4
 800c3d0:	f43f af70 	beq.w	800c2b4 <_dtoa_r+0x43c>
 800c3d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c3d8:	4b0a      	ldr	r3, [pc, #40]	@ (800c404 <_dtoa_r+0x58c>)
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f7f4 f90c 	bl	80005f8 <__aeabi_dmul>
 800c3e0:	4b08      	ldr	r3, [pc, #32]	@ (800c404 <_dtoa_r+0x58c>)
 800c3e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3ec:	f7f4 f904 	bl	80005f8 <__aeabi_dmul>
 800c3f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c3f4:	e7c4      	b.n	800c380 <_dtoa_r+0x508>
 800c3f6:	bf00      	nop
 800c3f8:	0800db68 	.word	0x0800db68
 800c3fc:	0800db40 	.word	0x0800db40
 800c400:	3ff00000 	.word	0x3ff00000
 800c404:	40240000 	.word	0x40240000
 800c408:	401c0000 	.word	0x401c0000
 800c40c:	40140000 	.word	0x40140000
 800c410:	3fe00000 	.word	0x3fe00000
 800c414:	4631      	mov	r1, r6
 800c416:	4628      	mov	r0, r5
 800c418:	f7f4 f8ee 	bl	80005f8 <__aeabi_dmul>
 800c41c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c420:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c422:	4656      	mov	r6, sl
 800c424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c428:	f7f4 fb96 	bl	8000b58 <__aeabi_d2iz>
 800c42c:	4605      	mov	r5, r0
 800c42e:	f7f4 f879 	bl	8000524 <__aeabi_i2d>
 800c432:	4602      	mov	r2, r0
 800c434:	460b      	mov	r3, r1
 800c436:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c43a:	f7f3 ff25 	bl	8000288 <__aeabi_dsub>
 800c43e:	3530      	adds	r5, #48	@ 0x30
 800c440:	f806 5b01 	strb.w	r5, [r6], #1
 800c444:	4602      	mov	r2, r0
 800c446:	460b      	mov	r3, r1
 800c448:	42a6      	cmp	r6, r4
 800c44a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c44e:	f04f 0200 	mov.w	r2, #0
 800c452:	d124      	bne.n	800c49e <_dtoa_r+0x626>
 800c454:	4baf      	ldr	r3, [pc, #700]	@ (800c714 <_dtoa_r+0x89c>)
 800c456:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c45a:	f7f3 ff17 	bl	800028c <__adddf3>
 800c45e:	4602      	mov	r2, r0
 800c460:	460b      	mov	r3, r1
 800c462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c466:	f7f4 fb57 	bl	8000b18 <__aeabi_dcmpgt>
 800c46a:	2800      	cmp	r0, #0
 800c46c:	d163      	bne.n	800c536 <_dtoa_r+0x6be>
 800c46e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c472:	49a8      	ldr	r1, [pc, #672]	@ (800c714 <_dtoa_r+0x89c>)
 800c474:	2000      	movs	r0, #0
 800c476:	f7f3 ff07 	bl	8000288 <__aeabi_dsub>
 800c47a:	4602      	mov	r2, r0
 800c47c:	460b      	mov	r3, r1
 800c47e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c482:	f7f4 fb2b 	bl	8000adc <__aeabi_dcmplt>
 800c486:	2800      	cmp	r0, #0
 800c488:	f43f af14 	beq.w	800c2b4 <_dtoa_r+0x43c>
 800c48c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c48e:	1e73      	subs	r3, r6, #1
 800c490:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c492:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c496:	2b30      	cmp	r3, #48	@ 0x30
 800c498:	d0f8      	beq.n	800c48c <_dtoa_r+0x614>
 800c49a:	4647      	mov	r7, r8
 800c49c:	e03b      	b.n	800c516 <_dtoa_r+0x69e>
 800c49e:	4b9e      	ldr	r3, [pc, #632]	@ (800c718 <_dtoa_r+0x8a0>)
 800c4a0:	f7f4 f8aa 	bl	80005f8 <__aeabi_dmul>
 800c4a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4a8:	e7bc      	b.n	800c424 <_dtoa_r+0x5ac>
 800c4aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c4ae:	4656      	mov	r6, sl
 800c4b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	4629      	mov	r1, r5
 800c4b8:	f7f4 f9c8 	bl	800084c <__aeabi_ddiv>
 800c4bc:	f7f4 fb4c 	bl	8000b58 <__aeabi_d2iz>
 800c4c0:	4680      	mov	r8, r0
 800c4c2:	f7f4 f82f 	bl	8000524 <__aeabi_i2d>
 800c4c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4ca:	f7f4 f895 	bl	80005f8 <__aeabi_dmul>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	4629      	mov	r1, r5
 800c4d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c4da:	f7f3 fed5 	bl	8000288 <__aeabi_dsub>
 800c4de:	f806 4b01 	strb.w	r4, [r6], #1
 800c4e2:	9d03      	ldr	r5, [sp, #12]
 800c4e4:	eba6 040a 	sub.w	r4, r6, sl
 800c4e8:	42a5      	cmp	r5, r4
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	d133      	bne.n	800c558 <_dtoa_r+0x6e0>
 800c4f0:	f7f3 fecc 	bl	800028c <__adddf3>
 800c4f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4f8:	4604      	mov	r4, r0
 800c4fa:	460d      	mov	r5, r1
 800c4fc:	f7f4 fb0c 	bl	8000b18 <__aeabi_dcmpgt>
 800c500:	b9c0      	cbnz	r0, 800c534 <_dtoa_r+0x6bc>
 800c502:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c506:	4620      	mov	r0, r4
 800c508:	4629      	mov	r1, r5
 800c50a:	f7f4 fadd 	bl	8000ac8 <__aeabi_dcmpeq>
 800c50e:	b110      	cbz	r0, 800c516 <_dtoa_r+0x69e>
 800c510:	f018 0f01 	tst.w	r8, #1
 800c514:	d10e      	bne.n	800c534 <_dtoa_r+0x6bc>
 800c516:	9902      	ldr	r1, [sp, #8]
 800c518:	4648      	mov	r0, r9
 800c51a:	f000 fb07 	bl	800cb2c <_Bfree>
 800c51e:	2300      	movs	r3, #0
 800c520:	7033      	strb	r3, [r6, #0]
 800c522:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c524:	3701      	adds	r7, #1
 800c526:	601f      	str	r7, [r3, #0]
 800c528:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f000 824b 	beq.w	800c9c6 <_dtoa_r+0xb4e>
 800c530:	601e      	str	r6, [r3, #0]
 800c532:	e248      	b.n	800c9c6 <_dtoa_r+0xb4e>
 800c534:	46b8      	mov	r8, r7
 800c536:	4633      	mov	r3, r6
 800c538:	461e      	mov	r6, r3
 800c53a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c53e:	2a39      	cmp	r2, #57	@ 0x39
 800c540:	d106      	bne.n	800c550 <_dtoa_r+0x6d8>
 800c542:	459a      	cmp	sl, r3
 800c544:	d1f8      	bne.n	800c538 <_dtoa_r+0x6c0>
 800c546:	2230      	movs	r2, #48	@ 0x30
 800c548:	f108 0801 	add.w	r8, r8, #1
 800c54c:	f88a 2000 	strb.w	r2, [sl]
 800c550:	781a      	ldrb	r2, [r3, #0]
 800c552:	3201      	adds	r2, #1
 800c554:	701a      	strb	r2, [r3, #0]
 800c556:	e7a0      	b.n	800c49a <_dtoa_r+0x622>
 800c558:	4b6f      	ldr	r3, [pc, #444]	@ (800c718 <_dtoa_r+0x8a0>)
 800c55a:	2200      	movs	r2, #0
 800c55c:	f7f4 f84c 	bl	80005f8 <__aeabi_dmul>
 800c560:	2200      	movs	r2, #0
 800c562:	2300      	movs	r3, #0
 800c564:	4604      	mov	r4, r0
 800c566:	460d      	mov	r5, r1
 800c568:	f7f4 faae 	bl	8000ac8 <__aeabi_dcmpeq>
 800c56c:	2800      	cmp	r0, #0
 800c56e:	d09f      	beq.n	800c4b0 <_dtoa_r+0x638>
 800c570:	e7d1      	b.n	800c516 <_dtoa_r+0x69e>
 800c572:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c574:	2a00      	cmp	r2, #0
 800c576:	f000 80ea 	beq.w	800c74e <_dtoa_r+0x8d6>
 800c57a:	9a07      	ldr	r2, [sp, #28]
 800c57c:	2a01      	cmp	r2, #1
 800c57e:	f300 80cd 	bgt.w	800c71c <_dtoa_r+0x8a4>
 800c582:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c584:	2a00      	cmp	r2, #0
 800c586:	f000 80c1 	beq.w	800c70c <_dtoa_r+0x894>
 800c58a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c58e:	9c08      	ldr	r4, [sp, #32]
 800c590:	9e00      	ldr	r6, [sp, #0]
 800c592:	9a00      	ldr	r2, [sp, #0]
 800c594:	441a      	add	r2, r3
 800c596:	9200      	str	r2, [sp, #0]
 800c598:	9a06      	ldr	r2, [sp, #24]
 800c59a:	2101      	movs	r1, #1
 800c59c:	441a      	add	r2, r3
 800c59e:	4648      	mov	r0, r9
 800c5a0:	9206      	str	r2, [sp, #24]
 800c5a2:	f000 fb77 	bl	800cc94 <__i2b>
 800c5a6:	4605      	mov	r5, r0
 800c5a8:	b166      	cbz	r6, 800c5c4 <_dtoa_r+0x74c>
 800c5aa:	9b06      	ldr	r3, [sp, #24]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	dd09      	ble.n	800c5c4 <_dtoa_r+0x74c>
 800c5b0:	42b3      	cmp	r3, r6
 800c5b2:	9a00      	ldr	r2, [sp, #0]
 800c5b4:	bfa8      	it	ge
 800c5b6:	4633      	movge	r3, r6
 800c5b8:	1ad2      	subs	r2, r2, r3
 800c5ba:	9200      	str	r2, [sp, #0]
 800c5bc:	9a06      	ldr	r2, [sp, #24]
 800c5be:	1af6      	subs	r6, r6, r3
 800c5c0:	1ad3      	subs	r3, r2, r3
 800c5c2:	9306      	str	r3, [sp, #24]
 800c5c4:	9b08      	ldr	r3, [sp, #32]
 800c5c6:	b30b      	cbz	r3, 800c60c <_dtoa_r+0x794>
 800c5c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	f000 80c6 	beq.w	800c75c <_dtoa_r+0x8e4>
 800c5d0:	2c00      	cmp	r4, #0
 800c5d2:	f000 80c0 	beq.w	800c756 <_dtoa_r+0x8de>
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	4622      	mov	r2, r4
 800c5da:	4648      	mov	r0, r9
 800c5dc:	f000 fc12 	bl	800ce04 <__pow5mult>
 800c5e0:	9a02      	ldr	r2, [sp, #8]
 800c5e2:	4601      	mov	r1, r0
 800c5e4:	4605      	mov	r5, r0
 800c5e6:	4648      	mov	r0, r9
 800c5e8:	f000 fb6a 	bl	800ccc0 <__multiply>
 800c5ec:	9902      	ldr	r1, [sp, #8]
 800c5ee:	4680      	mov	r8, r0
 800c5f0:	4648      	mov	r0, r9
 800c5f2:	f000 fa9b 	bl	800cb2c <_Bfree>
 800c5f6:	9b08      	ldr	r3, [sp, #32]
 800c5f8:	1b1b      	subs	r3, r3, r4
 800c5fa:	9308      	str	r3, [sp, #32]
 800c5fc:	f000 80b1 	beq.w	800c762 <_dtoa_r+0x8ea>
 800c600:	9a08      	ldr	r2, [sp, #32]
 800c602:	4641      	mov	r1, r8
 800c604:	4648      	mov	r0, r9
 800c606:	f000 fbfd 	bl	800ce04 <__pow5mult>
 800c60a:	9002      	str	r0, [sp, #8]
 800c60c:	2101      	movs	r1, #1
 800c60e:	4648      	mov	r0, r9
 800c610:	f000 fb40 	bl	800cc94 <__i2b>
 800c614:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c616:	4604      	mov	r4, r0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f000 81d8 	beq.w	800c9ce <_dtoa_r+0xb56>
 800c61e:	461a      	mov	r2, r3
 800c620:	4601      	mov	r1, r0
 800c622:	4648      	mov	r0, r9
 800c624:	f000 fbee 	bl	800ce04 <__pow5mult>
 800c628:	9b07      	ldr	r3, [sp, #28]
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	4604      	mov	r4, r0
 800c62e:	f300 809f 	bgt.w	800c770 <_dtoa_r+0x8f8>
 800c632:	9b04      	ldr	r3, [sp, #16]
 800c634:	2b00      	cmp	r3, #0
 800c636:	f040 8097 	bne.w	800c768 <_dtoa_r+0x8f0>
 800c63a:	9b05      	ldr	r3, [sp, #20]
 800c63c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c640:	2b00      	cmp	r3, #0
 800c642:	f040 8093 	bne.w	800c76c <_dtoa_r+0x8f4>
 800c646:	9b05      	ldr	r3, [sp, #20]
 800c648:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c64c:	0d1b      	lsrs	r3, r3, #20
 800c64e:	051b      	lsls	r3, r3, #20
 800c650:	b133      	cbz	r3, 800c660 <_dtoa_r+0x7e8>
 800c652:	9b00      	ldr	r3, [sp, #0]
 800c654:	3301      	adds	r3, #1
 800c656:	9300      	str	r3, [sp, #0]
 800c658:	9b06      	ldr	r3, [sp, #24]
 800c65a:	3301      	adds	r3, #1
 800c65c:	9306      	str	r3, [sp, #24]
 800c65e:	2301      	movs	r3, #1
 800c660:	9308      	str	r3, [sp, #32]
 800c662:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c664:	2b00      	cmp	r3, #0
 800c666:	f000 81b8 	beq.w	800c9da <_dtoa_r+0xb62>
 800c66a:	6923      	ldr	r3, [r4, #16]
 800c66c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c670:	6918      	ldr	r0, [r3, #16]
 800c672:	f000 fac3 	bl	800cbfc <__hi0bits>
 800c676:	f1c0 0020 	rsb	r0, r0, #32
 800c67a:	9b06      	ldr	r3, [sp, #24]
 800c67c:	4418      	add	r0, r3
 800c67e:	f010 001f 	ands.w	r0, r0, #31
 800c682:	f000 8082 	beq.w	800c78a <_dtoa_r+0x912>
 800c686:	f1c0 0320 	rsb	r3, r0, #32
 800c68a:	2b04      	cmp	r3, #4
 800c68c:	dd73      	ble.n	800c776 <_dtoa_r+0x8fe>
 800c68e:	9b00      	ldr	r3, [sp, #0]
 800c690:	f1c0 001c 	rsb	r0, r0, #28
 800c694:	4403      	add	r3, r0
 800c696:	9300      	str	r3, [sp, #0]
 800c698:	9b06      	ldr	r3, [sp, #24]
 800c69a:	4403      	add	r3, r0
 800c69c:	4406      	add	r6, r0
 800c69e:	9306      	str	r3, [sp, #24]
 800c6a0:	9b00      	ldr	r3, [sp, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	dd05      	ble.n	800c6b2 <_dtoa_r+0x83a>
 800c6a6:	9902      	ldr	r1, [sp, #8]
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	4648      	mov	r0, r9
 800c6ac:	f000 fc04 	bl	800ceb8 <__lshift>
 800c6b0:	9002      	str	r0, [sp, #8]
 800c6b2:	9b06      	ldr	r3, [sp, #24]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	dd05      	ble.n	800c6c4 <_dtoa_r+0x84c>
 800c6b8:	4621      	mov	r1, r4
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	4648      	mov	r0, r9
 800c6be:	f000 fbfb 	bl	800ceb8 <__lshift>
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d061      	beq.n	800c78e <_dtoa_r+0x916>
 800c6ca:	9802      	ldr	r0, [sp, #8]
 800c6cc:	4621      	mov	r1, r4
 800c6ce:	f000 fc5f 	bl	800cf90 <__mcmp>
 800c6d2:	2800      	cmp	r0, #0
 800c6d4:	da5b      	bge.n	800c78e <_dtoa_r+0x916>
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	9902      	ldr	r1, [sp, #8]
 800c6da:	220a      	movs	r2, #10
 800c6dc:	4648      	mov	r0, r9
 800c6de:	f000 fa47 	bl	800cb70 <__multadd>
 800c6e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6e4:	9002      	str	r0, [sp, #8]
 800c6e6:	f107 38ff 	add.w	r8, r7, #4294967295
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	f000 8177 	beq.w	800c9de <_dtoa_r+0xb66>
 800c6f0:	4629      	mov	r1, r5
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	220a      	movs	r2, #10
 800c6f6:	4648      	mov	r0, r9
 800c6f8:	f000 fa3a 	bl	800cb70 <__multadd>
 800c6fc:	f1bb 0f00 	cmp.w	fp, #0
 800c700:	4605      	mov	r5, r0
 800c702:	dc6f      	bgt.n	800c7e4 <_dtoa_r+0x96c>
 800c704:	9b07      	ldr	r3, [sp, #28]
 800c706:	2b02      	cmp	r3, #2
 800c708:	dc49      	bgt.n	800c79e <_dtoa_r+0x926>
 800c70a:	e06b      	b.n	800c7e4 <_dtoa_r+0x96c>
 800c70c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c70e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c712:	e73c      	b.n	800c58e <_dtoa_r+0x716>
 800c714:	3fe00000 	.word	0x3fe00000
 800c718:	40240000 	.word	0x40240000
 800c71c:	9b03      	ldr	r3, [sp, #12]
 800c71e:	1e5c      	subs	r4, r3, #1
 800c720:	9b08      	ldr	r3, [sp, #32]
 800c722:	42a3      	cmp	r3, r4
 800c724:	db09      	blt.n	800c73a <_dtoa_r+0x8c2>
 800c726:	1b1c      	subs	r4, r3, r4
 800c728:	9b03      	ldr	r3, [sp, #12]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	f6bf af30 	bge.w	800c590 <_dtoa_r+0x718>
 800c730:	9b00      	ldr	r3, [sp, #0]
 800c732:	9a03      	ldr	r2, [sp, #12]
 800c734:	1a9e      	subs	r6, r3, r2
 800c736:	2300      	movs	r3, #0
 800c738:	e72b      	b.n	800c592 <_dtoa_r+0x71a>
 800c73a:	9b08      	ldr	r3, [sp, #32]
 800c73c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c73e:	9408      	str	r4, [sp, #32]
 800c740:	1ae3      	subs	r3, r4, r3
 800c742:	441a      	add	r2, r3
 800c744:	9e00      	ldr	r6, [sp, #0]
 800c746:	9b03      	ldr	r3, [sp, #12]
 800c748:	920d      	str	r2, [sp, #52]	@ 0x34
 800c74a:	2400      	movs	r4, #0
 800c74c:	e721      	b.n	800c592 <_dtoa_r+0x71a>
 800c74e:	9c08      	ldr	r4, [sp, #32]
 800c750:	9e00      	ldr	r6, [sp, #0]
 800c752:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c754:	e728      	b.n	800c5a8 <_dtoa_r+0x730>
 800c756:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c75a:	e751      	b.n	800c600 <_dtoa_r+0x788>
 800c75c:	9a08      	ldr	r2, [sp, #32]
 800c75e:	9902      	ldr	r1, [sp, #8]
 800c760:	e750      	b.n	800c604 <_dtoa_r+0x78c>
 800c762:	f8cd 8008 	str.w	r8, [sp, #8]
 800c766:	e751      	b.n	800c60c <_dtoa_r+0x794>
 800c768:	2300      	movs	r3, #0
 800c76a:	e779      	b.n	800c660 <_dtoa_r+0x7e8>
 800c76c:	9b04      	ldr	r3, [sp, #16]
 800c76e:	e777      	b.n	800c660 <_dtoa_r+0x7e8>
 800c770:	2300      	movs	r3, #0
 800c772:	9308      	str	r3, [sp, #32]
 800c774:	e779      	b.n	800c66a <_dtoa_r+0x7f2>
 800c776:	d093      	beq.n	800c6a0 <_dtoa_r+0x828>
 800c778:	9a00      	ldr	r2, [sp, #0]
 800c77a:	331c      	adds	r3, #28
 800c77c:	441a      	add	r2, r3
 800c77e:	9200      	str	r2, [sp, #0]
 800c780:	9a06      	ldr	r2, [sp, #24]
 800c782:	441a      	add	r2, r3
 800c784:	441e      	add	r6, r3
 800c786:	9206      	str	r2, [sp, #24]
 800c788:	e78a      	b.n	800c6a0 <_dtoa_r+0x828>
 800c78a:	4603      	mov	r3, r0
 800c78c:	e7f4      	b.n	800c778 <_dtoa_r+0x900>
 800c78e:	9b03      	ldr	r3, [sp, #12]
 800c790:	2b00      	cmp	r3, #0
 800c792:	46b8      	mov	r8, r7
 800c794:	dc20      	bgt.n	800c7d8 <_dtoa_r+0x960>
 800c796:	469b      	mov	fp, r3
 800c798:	9b07      	ldr	r3, [sp, #28]
 800c79a:	2b02      	cmp	r3, #2
 800c79c:	dd1e      	ble.n	800c7dc <_dtoa_r+0x964>
 800c79e:	f1bb 0f00 	cmp.w	fp, #0
 800c7a2:	f47f adb1 	bne.w	800c308 <_dtoa_r+0x490>
 800c7a6:	4621      	mov	r1, r4
 800c7a8:	465b      	mov	r3, fp
 800c7aa:	2205      	movs	r2, #5
 800c7ac:	4648      	mov	r0, r9
 800c7ae:	f000 f9df 	bl	800cb70 <__multadd>
 800c7b2:	4601      	mov	r1, r0
 800c7b4:	4604      	mov	r4, r0
 800c7b6:	9802      	ldr	r0, [sp, #8]
 800c7b8:	f000 fbea 	bl	800cf90 <__mcmp>
 800c7bc:	2800      	cmp	r0, #0
 800c7be:	f77f ada3 	ble.w	800c308 <_dtoa_r+0x490>
 800c7c2:	4656      	mov	r6, sl
 800c7c4:	2331      	movs	r3, #49	@ 0x31
 800c7c6:	f806 3b01 	strb.w	r3, [r6], #1
 800c7ca:	f108 0801 	add.w	r8, r8, #1
 800c7ce:	e59f      	b.n	800c310 <_dtoa_r+0x498>
 800c7d0:	9c03      	ldr	r4, [sp, #12]
 800c7d2:	46b8      	mov	r8, r7
 800c7d4:	4625      	mov	r5, r4
 800c7d6:	e7f4      	b.n	800c7c2 <_dtoa_r+0x94a>
 800c7d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c7dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	f000 8101 	beq.w	800c9e6 <_dtoa_r+0xb6e>
 800c7e4:	2e00      	cmp	r6, #0
 800c7e6:	dd05      	ble.n	800c7f4 <_dtoa_r+0x97c>
 800c7e8:	4629      	mov	r1, r5
 800c7ea:	4632      	mov	r2, r6
 800c7ec:	4648      	mov	r0, r9
 800c7ee:	f000 fb63 	bl	800ceb8 <__lshift>
 800c7f2:	4605      	mov	r5, r0
 800c7f4:	9b08      	ldr	r3, [sp, #32]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d05c      	beq.n	800c8b4 <_dtoa_r+0xa3c>
 800c7fa:	6869      	ldr	r1, [r5, #4]
 800c7fc:	4648      	mov	r0, r9
 800c7fe:	f000 f955 	bl	800caac <_Balloc>
 800c802:	4606      	mov	r6, r0
 800c804:	b928      	cbnz	r0, 800c812 <_dtoa_r+0x99a>
 800c806:	4b82      	ldr	r3, [pc, #520]	@ (800ca10 <_dtoa_r+0xb98>)
 800c808:	4602      	mov	r2, r0
 800c80a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c80e:	f7ff bb4a 	b.w	800bea6 <_dtoa_r+0x2e>
 800c812:	692a      	ldr	r2, [r5, #16]
 800c814:	3202      	adds	r2, #2
 800c816:	0092      	lsls	r2, r2, #2
 800c818:	f105 010c 	add.w	r1, r5, #12
 800c81c:	300c      	adds	r0, #12
 800c81e:	f000 ff85 	bl	800d72c <memcpy>
 800c822:	2201      	movs	r2, #1
 800c824:	4631      	mov	r1, r6
 800c826:	4648      	mov	r0, r9
 800c828:	f000 fb46 	bl	800ceb8 <__lshift>
 800c82c:	f10a 0301 	add.w	r3, sl, #1
 800c830:	9300      	str	r3, [sp, #0]
 800c832:	eb0a 030b 	add.w	r3, sl, fp
 800c836:	9308      	str	r3, [sp, #32]
 800c838:	9b04      	ldr	r3, [sp, #16]
 800c83a:	f003 0301 	and.w	r3, r3, #1
 800c83e:	462f      	mov	r7, r5
 800c840:	9306      	str	r3, [sp, #24]
 800c842:	4605      	mov	r5, r0
 800c844:	9b00      	ldr	r3, [sp, #0]
 800c846:	9802      	ldr	r0, [sp, #8]
 800c848:	4621      	mov	r1, r4
 800c84a:	f103 3bff 	add.w	fp, r3, #4294967295
 800c84e:	f7ff fa8b 	bl	800bd68 <quorem>
 800c852:	4603      	mov	r3, r0
 800c854:	3330      	adds	r3, #48	@ 0x30
 800c856:	9003      	str	r0, [sp, #12]
 800c858:	4639      	mov	r1, r7
 800c85a:	9802      	ldr	r0, [sp, #8]
 800c85c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c85e:	f000 fb97 	bl	800cf90 <__mcmp>
 800c862:	462a      	mov	r2, r5
 800c864:	9004      	str	r0, [sp, #16]
 800c866:	4621      	mov	r1, r4
 800c868:	4648      	mov	r0, r9
 800c86a:	f000 fbad 	bl	800cfc8 <__mdiff>
 800c86e:	68c2      	ldr	r2, [r0, #12]
 800c870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c872:	4606      	mov	r6, r0
 800c874:	bb02      	cbnz	r2, 800c8b8 <_dtoa_r+0xa40>
 800c876:	4601      	mov	r1, r0
 800c878:	9802      	ldr	r0, [sp, #8]
 800c87a:	f000 fb89 	bl	800cf90 <__mcmp>
 800c87e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c880:	4602      	mov	r2, r0
 800c882:	4631      	mov	r1, r6
 800c884:	4648      	mov	r0, r9
 800c886:	920c      	str	r2, [sp, #48]	@ 0x30
 800c888:	9309      	str	r3, [sp, #36]	@ 0x24
 800c88a:	f000 f94f 	bl	800cb2c <_Bfree>
 800c88e:	9b07      	ldr	r3, [sp, #28]
 800c890:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c892:	9e00      	ldr	r6, [sp, #0]
 800c894:	ea42 0103 	orr.w	r1, r2, r3
 800c898:	9b06      	ldr	r3, [sp, #24]
 800c89a:	4319      	orrs	r1, r3
 800c89c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c89e:	d10d      	bne.n	800c8bc <_dtoa_r+0xa44>
 800c8a0:	2b39      	cmp	r3, #57	@ 0x39
 800c8a2:	d027      	beq.n	800c8f4 <_dtoa_r+0xa7c>
 800c8a4:	9a04      	ldr	r2, [sp, #16]
 800c8a6:	2a00      	cmp	r2, #0
 800c8a8:	dd01      	ble.n	800c8ae <_dtoa_r+0xa36>
 800c8aa:	9b03      	ldr	r3, [sp, #12]
 800c8ac:	3331      	adds	r3, #49	@ 0x31
 800c8ae:	f88b 3000 	strb.w	r3, [fp]
 800c8b2:	e52e      	b.n	800c312 <_dtoa_r+0x49a>
 800c8b4:	4628      	mov	r0, r5
 800c8b6:	e7b9      	b.n	800c82c <_dtoa_r+0x9b4>
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	e7e2      	b.n	800c882 <_dtoa_r+0xa0a>
 800c8bc:	9904      	ldr	r1, [sp, #16]
 800c8be:	2900      	cmp	r1, #0
 800c8c0:	db04      	blt.n	800c8cc <_dtoa_r+0xa54>
 800c8c2:	9807      	ldr	r0, [sp, #28]
 800c8c4:	4301      	orrs	r1, r0
 800c8c6:	9806      	ldr	r0, [sp, #24]
 800c8c8:	4301      	orrs	r1, r0
 800c8ca:	d120      	bne.n	800c90e <_dtoa_r+0xa96>
 800c8cc:	2a00      	cmp	r2, #0
 800c8ce:	ddee      	ble.n	800c8ae <_dtoa_r+0xa36>
 800c8d0:	9902      	ldr	r1, [sp, #8]
 800c8d2:	9300      	str	r3, [sp, #0]
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	4648      	mov	r0, r9
 800c8d8:	f000 faee 	bl	800ceb8 <__lshift>
 800c8dc:	4621      	mov	r1, r4
 800c8de:	9002      	str	r0, [sp, #8]
 800c8e0:	f000 fb56 	bl	800cf90 <__mcmp>
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	9b00      	ldr	r3, [sp, #0]
 800c8e8:	dc02      	bgt.n	800c8f0 <_dtoa_r+0xa78>
 800c8ea:	d1e0      	bne.n	800c8ae <_dtoa_r+0xa36>
 800c8ec:	07da      	lsls	r2, r3, #31
 800c8ee:	d5de      	bpl.n	800c8ae <_dtoa_r+0xa36>
 800c8f0:	2b39      	cmp	r3, #57	@ 0x39
 800c8f2:	d1da      	bne.n	800c8aa <_dtoa_r+0xa32>
 800c8f4:	2339      	movs	r3, #57	@ 0x39
 800c8f6:	f88b 3000 	strb.w	r3, [fp]
 800c8fa:	4633      	mov	r3, r6
 800c8fc:	461e      	mov	r6, r3
 800c8fe:	3b01      	subs	r3, #1
 800c900:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c904:	2a39      	cmp	r2, #57	@ 0x39
 800c906:	d04e      	beq.n	800c9a6 <_dtoa_r+0xb2e>
 800c908:	3201      	adds	r2, #1
 800c90a:	701a      	strb	r2, [r3, #0]
 800c90c:	e501      	b.n	800c312 <_dtoa_r+0x49a>
 800c90e:	2a00      	cmp	r2, #0
 800c910:	dd03      	ble.n	800c91a <_dtoa_r+0xaa2>
 800c912:	2b39      	cmp	r3, #57	@ 0x39
 800c914:	d0ee      	beq.n	800c8f4 <_dtoa_r+0xa7c>
 800c916:	3301      	adds	r3, #1
 800c918:	e7c9      	b.n	800c8ae <_dtoa_r+0xa36>
 800c91a:	9a00      	ldr	r2, [sp, #0]
 800c91c:	9908      	ldr	r1, [sp, #32]
 800c91e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c922:	428a      	cmp	r2, r1
 800c924:	d028      	beq.n	800c978 <_dtoa_r+0xb00>
 800c926:	9902      	ldr	r1, [sp, #8]
 800c928:	2300      	movs	r3, #0
 800c92a:	220a      	movs	r2, #10
 800c92c:	4648      	mov	r0, r9
 800c92e:	f000 f91f 	bl	800cb70 <__multadd>
 800c932:	42af      	cmp	r7, r5
 800c934:	9002      	str	r0, [sp, #8]
 800c936:	f04f 0300 	mov.w	r3, #0
 800c93a:	f04f 020a 	mov.w	r2, #10
 800c93e:	4639      	mov	r1, r7
 800c940:	4648      	mov	r0, r9
 800c942:	d107      	bne.n	800c954 <_dtoa_r+0xadc>
 800c944:	f000 f914 	bl	800cb70 <__multadd>
 800c948:	4607      	mov	r7, r0
 800c94a:	4605      	mov	r5, r0
 800c94c:	9b00      	ldr	r3, [sp, #0]
 800c94e:	3301      	adds	r3, #1
 800c950:	9300      	str	r3, [sp, #0]
 800c952:	e777      	b.n	800c844 <_dtoa_r+0x9cc>
 800c954:	f000 f90c 	bl	800cb70 <__multadd>
 800c958:	4629      	mov	r1, r5
 800c95a:	4607      	mov	r7, r0
 800c95c:	2300      	movs	r3, #0
 800c95e:	220a      	movs	r2, #10
 800c960:	4648      	mov	r0, r9
 800c962:	f000 f905 	bl	800cb70 <__multadd>
 800c966:	4605      	mov	r5, r0
 800c968:	e7f0      	b.n	800c94c <_dtoa_r+0xad4>
 800c96a:	f1bb 0f00 	cmp.w	fp, #0
 800c96e:	bfcc      	ite	gt
 800c970:	465e      	movgt	r6, fp
 800c972:	2601      	movle	r6, #1
 800c974:	4456      	add	r6, sl
 800c976:	2700      	movs	r7, #0
 800c978:	9902      	ldr	r1, [sp, #8]
 800c97a:	9300      	str	r3, [sp, #0]
 800c97c:	2201      	movs	r2, #1
 800c97e:	4648      	mov	r0, r9
 800c980:	f000 fa9a 	bl	800ceb8 <__lshift>
 800c984:	4621      	mov	r1, r4
 800c986:	9002      	str	r0, [sp, #8]
 800c988:	f000 fb02 	bl	800cf90 <__mcmp>
 800c98c:	2800      	cmp	r0, #0
 800c98e:	dcb4      	bgt.n	800c8fa <_dtoa_r+0xa82>
 800c990:	d102      	bne.n	800c998 <_dtoa_r+0xb20>
 800c992:	9b00      	ldr	r3, [sp, #0]
 800c994:	07db      	lsls	r3, r3, #31
 800c996:	d4b0      	bmi.n	800c8fa <_dtoa_r+0xa82>
 800c998:	4633      	mov	r3, r6
 800c99a:	461e      	mov	r6, r3
 800c99c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9a0:	2a30      	cmp	r2, #48	@ 0x30
 800c9a2:	d0fa      	beq.n	800c99a <_dtoa_r+0xb22>
 800c9a4:	e4b5      	b.n	800c312 <_dtoa_r+0x49a>
 800c9a6:	459a      	cmp	sl, r3
 800c9a8:	d1a8      	bne.n	800c8fc <_dtoa_r+0xa84>
 800c9aa:	2331      	movs	r3, #49	@ 0x31
 800c9ac:	f108 0801 	add.w	r8, r8, #1
 800c9b0:	f88a 3000 	strb.w	r3, [sl]
 800c9b4:	e4ad      	b.n	800c312 <_dtoa_r+0x49a>
 800c9b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c9b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ca14 <_dtoa_r+0xb9c>
 800c9bc:	b11b      	cbz	r3, 800c9c6 <_dtoa_r+0xb4e>
 800c9be:	f10a 0308 	add.w	r3, sl, #8
 800c9c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c9c4:	6013      	str	r3, [r2, #0]
 800c9c6:	4650      	mov	r0, sl
 800c9c8:	b017      	add	sp, #92	@ 0x5c
 800c9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ce:	9b07      	ldr	r3, [sp, #28]
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	f77f ae2e 	ble.w	800c632 <_dtoa_r+0x7ba>
 800c9d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c9d8:	9308      	str	r3, [sp, #32]
 800c9da:	2001      	movs	r0, #1
 800c9dc:	e64d      	b.n	800c67a <_dtoa_r+0x802>
 800c9de:	f1bb 0f00 	cmp.w	fp, #0
 800c9e2:	f77f aed9 	ble.w	800c798 <_dtoa_r+0x920>
 800c9e6:	4656      	mov	r6, sl
 800c9e8:	9802      	ldr	r0, [sp, #8]
 800c9ea:	4621      	mov	r1, r4
 800c9ec:	f7ff f9bc 	bl	800bd68 <quorem>
 800c9f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c9f4:	f806 3b01 	strb.w	r3, [r6], #1
 800c9f8:	eba6 020a 	sub.w	r2, r6, sl
 800c9fc:	4593      	cmp	fp, r2
 800c9fe:	ddb4      	ble.n	800c96a <_dtoa_r+0xaf2>
 800ca00:	9902      	ldr	r1, [sp, #8]
 800ca02:	2300      	movs	r3, #0
 800ca04:	220a      	movs	r2, #10
 800ca06:	4648      	mov	r0, r9
 800ca08:	f000 f8b2 	bl	800cb70 <__multadd>
 800ca0c:	9002      	str	r0, [sp, #8]
 800ca0e:	e7eb      	b.n	800c9e8 <_dtoa_r+0xb70>
 800ca10:	0800daac 	.word	0x0800daac
 800ca14:	0800da30 	.word	0x0800da30

0800ca18 <_free_r>:
 800ca18:	b538      	push	{r3, r4, r5, lr}
 800ca1a:	4605      	mov	r5, r0
 800ca1c:	2900      	cmp	r1, #0
 800ca1e:	d041      	beq.n	800caa4 <_free_r+0x8c>
 800ca20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca24:	1f0c      	subs	r4, r1, #4
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	bfb8      	it	lt
 800ca2a:	18e4      	addlt	r4, r4, r3
 800ca2c:	f7fe fb8c 	bl	800b148 <__malloc_lock>
 800ca30:	4a1d      	ldr	r2, [pc, #116]	@ (800caa8 <_free_r+0x90>)
 800ca32:	6813      	ldr	r3, [r2, #0]
 800ca34:	b933      	cbnz	r3, 800ca44 <_free_r+0x2c>
 800ca36:	6063      	str	r3, [r4, #4]
 800ca38:	6014      	str	r4, [r2, #0]
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca40:	f7fe bb88 	b.w	800b154 <__malloc_unlock>
 800ca44:	42a3      	cmp	r3, r4
 800ca46:	d908      	bls.n	800ca5a <_free_r+0x42>
 800ca48:	6820      	ldr	r0, [r4, #0]
 800ca4a:	1821      	adds	r1, r4, r0
 800ca4c:	428b      	cmp	r3, r1
 800ca4e:	bf01      	itttt	eq
 800ca50:	6819      	ldreq	r1, [r3, #0]
 800ca52:	685b      	ldreq	r3, [r3, #4]
 800ca54:	1809      	addeq	r1, r1, r0
 800ca56:	6021      	streq	r1, [r4, #0]
 800ca58:	e7ed      	b.n	800ca36 <_free_r+0x1e>
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	b10b      	cbz	r3, 800ca64 <_free_r+0x4c>
 800ca60:	42a3      	cmp	r3, r4
 800ca62:	d9fa      	bls.n	800ca5a <_free_r+0x42>
 800ca64:	6811      	ldr	r1, [r2, #0]
 800ca66:	1850      	adds	r0, r2, r1
 800ca68:	42a0      	cmp	r0, r4
 800ca6a:	d10b      	bne.n	800ca84 <_free_r+0x6c>
 800ca6c:	6820      	ldr	r0, [r4, #0]
 800ca6e:	4401      	add	r1, r0
 800ca70:	1850      	adds	r0, r2, r1
 800ca72:	4283      	cmp	r3, r0
 800ca74:	6011      	str	r1, [r2, #0]
 800ca76:	d1e0      	bne.n	800ca3a <_free_r+0x22>
 800ca78:	6818      	ldr	r0, [r3, #0]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	6053      	str	r3, [r2, #4]
 800ca7e:	4408      	add	r0, r1
 800ca80:	6010      	str	r0, [r2, #0]
 800ca82:	e7da      	b.n	800ca3a <_free_r+0x22>
 800ca84:	d902      	bls.n	800ca8c <_free_r+0x74>
 800ca86:	230c      	movs	r3, #12
 800ca88:	602b      	str	r3, [r5, #0]
 800ca8a:	e7d6      	b.n	800ca3a <_free_r+0x22>
 800ca8c:	6820      	ldr	r0, [r4, #0]
 800ca8e:	1821      	adds	r1, r4, r0
 800ca90:	428b      	cmp	r3, r1
 800ca92:	bf04      	itt	eq
 800ca94:	6819      	ldreq	r1, [r3, #0]
 800ca96:	685b      	ldreq	r3, [r3, #4]
 800ca98:	6063      	str	r3, [r4, #4]
 800ca9a:	bf04      	itt	eq
 800ca9c:	1809      	addeq	r1, r1, r0
 800ca9e:	6021      	streq	r1, [r4, #0]
 800caa0:	6054      	str	r4, [r2, #4]
 800caa2:	e7ca      	b.n	800ca3a <_free_r+0x22>
 800caa4:	bd38      	pop	{r3, r4, r5, pc}
 800caa6:	bf00      	nop
 800caa8:	200020f4 	.word	0x200020f4

0800caac <_Balloc>:
 800caac:	b570      	push	{r4, r5, r6, lr}
 800caae:	69c6      	ldr	r6, [r0, #28]
 800cab0:	4604      	mov	r4, r0
 800cab2:	460d      	mov	r5, r1
 800cab4:	b976      	cbnz	r6, 800cad4 <_Balloc+0x28>
 800cab6:	2010      	movs	r0, #16
 800cab8:	f7fe fa9c 	bl	800aff4 <malloc>
 800cabc:	4602      	mov	r2, r0
 800cabe:	61e0      	str	r0, [r4, #28]
 800cac0:	b920      	cbnz	r0, 800cacc <_Balloc+0x20>
 800cac2:	4b18      	ldr	r3, [pc, #96]	@ (800cb24 <_Balloc+0x78>)
 800cac4:	4818      	ldr	r0, [pc, #96]	@ (800cb28 <_Balloc+0x7c>)
 800cac6:	216b      	movs	r1, #107	@ 0x6b
 800cac8:	f7fe fa76 	bl	800afb8 <__assert_func>
 800cacc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cad0:	6006      	str	r6, [r0, #0]
 800cad2:	60c6      	str	r6, [r0, #12]
 800cad4:	69e6      	ldr	r6, [r4, #28]
 800cad6:	68f3      	ldr	r3, [r6, #12]
 800cad8:	b183      	cbz	r3, 800cafc <_Balloc+0x50>
 800cada:	69e3      	ldr	r3, [r4, #28]
 800cadc:	68db      	ldr	r3, [r3, #12]
 800cade:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cae2:	b9b8      	cbnz	r0, 800cb14 <_Balloc+0x68>
 800cae4:	2101      	movs	r1, #1
 800cae6:	fa01 f605 	lsl.w	r6, r1, r5
 800caea:	1d72      	adds	r2, r6, #5
 800caec:	0092      	lsls	r2, r2, #2
 800caee:	4620      	mov	r0, r4
 800caf0:	f000 fe2a 	bl	800d748 <_calloc_r>
 800caf4:	b160      	cbz	r0, 800cb10 <_Balloc+0x64>
 800caf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cafa:	e00e      	b.n	800cb1a <_Balloc+0x6e>
 800cafc:	2221      	movs	r2, #33	@ 0x21
 800cafe:	2104      	movs	r1, #4
 800cb00:	4620      	mov	r0, r4
 800cb02:	f000 fe21 	bl	800d748 <_calloc_r>
 800cb06:	69e3      	ldr	r3, [r4, #28]
 800cb08:	60f0      	str	r0, [r6, #12]
 800cb0a:	68db      	ldr	r3, [r3, #12]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d1e4      	bne.n	800cada <_Balloc+0x2e>
 800cb10:	2000      	movs	r0, #0
 800cb12:	bd70      	pop	{r4, r5, r6, pc}
 800cb14:	6802      	ldr	r2, [r0, #0]
 800cb16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb20:	e7f7      	b.n	800cb12 <_Balloc+0x66>
 800cb22:	bf00      	nop
 800cb24:	0800da3d 	.word	0x0800da3d
 800cb28:	0800dabd 	.word	0x0800dabd

0800cb2c <_Bfree>:
 800cb2c:	b570      	push	{r4, r5, r6, lr}
 800cb2e:	69c6      	ldr	r6, [r0, #28]
 800cb30:	4605      	mov	r5, r0
 800cb32:	460c      	mov	r4, r1
 800cb34:	b976      	cbnz	r6, 800cb54 <_Bfree+0x28>
 800cb36:	2010      	movs	r0, #16
 800cb38:	f7fe fa5c 	bl	800aff4 <malloc>
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	61e8      	str	r0, [r5, #28]
 800cb40:	b920      	cbnz	r0, 800cb4c <_Bfree+0x20>
 800cb42:	4b09      	ldr	r3, [pc, #36]	@ (800cb68 <_Bfree+0x3c>)
 800cb44:	4809      	ldr	r0, [pc, #36]	@ (800cb6c <_Bfree+0x40>)
 800cb46:	218f      	movs	r1, #143	@ 0x8f
 800cb48:	f7fe fa36 	bl	800afb8 <__assert_func>
 800cb4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb50:	6006      	str	r6, [r0, #0]
 800cb52:	60c6      	str	r6, [r0, #12]
 800cb54:	b13c      	cbz	r4, 800cb66 <_Bfree+0x3a>
 800cb56:	69eb      	ldr	r3, [r5, #28]
 800cb58:	6862      	ldr	r2, [r4, #4]
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb60:	6021      	str	r1, [r4, #0]
 800cb62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb66:	bd70      	pop	{r4, r5, r6, pc}
 800cb68:	0800da3d 	.word	0x0800da3d
 800cb6c:	0800dabd 	.word	0x0800dabd

0800cb70 <__multadd>:
 800cb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb74:	690d      	ldr	r5, [r1, #16]
 800cb76:	4607      	mov	r7, r0
 800cb78:	460c      	mov	r4, r1
 800cb7a:	461e      	mov	r6, r3
 800cb7c:	f101 0c14 	add.w	ip, r1, #20
 800cb80:	2000      	movs	r0, #0
 800cb82:	f8dc 3000 	ldr.w	r3, [ip]
 800cb86:	b299      	uxth	r1, r3
 800cb88:	fb02 6101 	mla	r1, r2, r1, r6
 800cb8c:	0c1e      	lsrs	r6, r3, #16
 800cb8e:	0c0b      	lsrs	r3, r1, #16
 800cb90:	fb02 3306 	mla	r3, r2, r6, r3
 800cb94:	b289      	uxth	r1, r1
 800cb96:	3001      	adds	r0, #1
 800cb98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb9c:	4285      	cmp	r5, r0
 800cb9e:	f84c 1b04 	str.w	r1, [ip], #4
 800cba2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cba6:	dcec      	bgt.n	800cb82 <__multadd+0x12>
 800cba8:	b30e      	cbz	r6, 800cbee <__multadd+0x7e>
 800cbaa:	68a3      	ldr	r3, [r4, #8]
 800cbac:	42ab      	cmp	r3, r5
 800cbae:	dc19      	bgt.n	800cbe4 <__multadd+0x74>
 800cbb0:	6861      	ldr	r1, [r4, #4]
 800cbb2:	4638      	mov	r0, r7
 800cbb4:	3101      	adds	r1, #1
 800cbb6:	f7ff ff79 	bl	800caac <_Balloc>
 800cbba:	4680      	mov	r8, r0
 800cbbc:	b928      	cbnz	r0, 800cbca <__multadd+0x5a>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	4b0c      	ldr	r3, [pc, #48]	@ (800cbf4 <__multadd+0x84>)
 800cbc2:	480d      	ldr	r0, [pc, #52]	@ (800cbf8 <__multadd+0x88>)
 800cbc4:	21ba      	movs	r1, #186	@ 0xba
 800cbc6:	f7fe f9f7 	bl	800afb8 <__assert_func>
 800cbca:	6922      	ldr	r2, [r4, #16]
 800cbcc:	3202      	adds	r2, #2
 800cbce:	f104 010c 	add.w	r1, r4, #12
 800cbd2:	0092      	lsls	r2, r2, #2
 800cbd4:	300c      	adds	r0, #12
 800cbd6:	f000 fda9 	bl	800d72c <memcpy>
 800cbda:	4621      	mov	r1, r4
 800cbdc:	4638      	mov	r0, r7
 800cbde:	f7ff ffa5 	bl	800cb2c <_Bfree>
 800cbe2:	4644      	mov	r4, r8
 800cbe4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cbe8:	3501      	adds	r5, #1
 800cbea:	615e      	str	r6, [r3, #20]
 800cbec:	6125      	str	r5, [r4, #16]
 800cbee:	4620      	mov	r0, r4
 800cbf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbf4:	0800daac 	.word	0x0800daac
 800cbf8:	0800dabd 	.word	0x0800dabd

0800cbfc <__hi0bits>:
 800cbfc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cc00:	4603      	mov	r3, r0
 800cc02:	bf36      	itet	cc
 800cc04:	0403      	lslcc	r3, r0, #16
 800cc06:	2000      	movcs	r0, #0
 800cc08:	2010      	movcc	r0, #16
 800cc0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cc0e:	bf3c      	itt	cc
 800cc10:	021b      	lslcc	r3, r3, #8
 800cc12:	3008      	addcc	r0, #8
 800cc14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc18:	bf3c      	itt	cc
 800cc1a:	011b      	lslcc	r3, r3, #4
 800cc1c:	3004      	addcc	r0, #4
 800cc1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc22:	bf3c      	itt	cc
 800cc24:	009b      	lslcc	r3, r3, #2
 800cc26:	3002      	addcc	r0, #2
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	db05      	blt.n	800cc38 <__hi0bits+0x3c>
 800cc2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cc30:	f100 0001 	add.w	r0, r0, #1
 800cc34:	bf08      	it	eq
 800cc36:	2020      	moveq	r0, #32
 800cc38:	4770      	bx	lr

0800cc3a <__lo0bits>:
 800cc3a:	6803      	ldr	r3, [r0, #0]
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	f013 0007 	ands.w	r0, r3, #7
 800cc42:	d00b      	beq.n	800cc5c <__lo0bits+0x22>
 800cc44:	07d9      	lsls	r1, r3, #31
 800cc46:	d421      	bmi.n	800cc8c <__lo0bits+0x52>
 800cc48:	0798      	lsls	r0, r3, #30
 800cc4a:	bf49      	itett	mi
 800cc4c:	085b      	lsrmi	r3, r3, #1
 800cc4e:	089b      	lsrpl	r3, r3, #2
 800cc50:	2001      	movmi	r0, #1
 800cc52:	6013      	strmi	r3, [r2, #0]
 800cc54:	bf5c      	itt	pl
 800cc56:	6013      	strpl	r3, [r2, #0]
 800cc58:	2002      	movpl	r0, #2
 800cc5a:	4770      	bx	lr
 800cc5c:	b299      	uxth	r1, r3
 800cc5e:	b909      	cbnz	r1, 800cc64 <__lo0bits+0x2a>
 800cc60:	0c1b      	lsrs	r3, r3, #16
 800cc62:	2010      	movs	r0, #16
 800cc64:	b2d9      	uxtb	r1, r3
 800cc66:	b909      	cbnz	r1, 800cc6c <__lo0bits+0x32>
 800cc68:	3008      	adds	r0, #8
 800cc6a:	0a1b      	lsrs	r3, r3, #8
 800cc6c:	0719      	lsls	r1, r3, #28
 800cc6e:	bf04      	itt	eq
 800cc70:	091b      	lsreq	r3, r3, #4
 800cc72:	3004      	addeq	r0, #4
 800cc74:	0799      	lsls	r1, r3, #30
 800cc76:	bf04      	itt	eq
 800cc78:	089b      	lsreq	r3, r3, #2
 800cc7a:	3002      	addeq	r0, #2
 800cc7c:	07d9      	lsls	r1, r3, #31
 800cc7e:	d403      	bmi.n	800cc88 <__lo0bits+0x4e>
 800cc80:	085b      	lsrs	r3, r3, #1
 800cc82:	f100 0001 	add.w	r0, r0, #1
 800cc86:	d003      	beq.n	800cc90 <__lo0bits+0x56>
 800cc88:	6013      	str	r3, [r2, #0]
 800cc8a:	4770      	bx	lr
 800cc8c:	2000      	movs	r0, #0
 800cc8e:	4770      	bx	lr
 800cc90:	2020      	movs	r0, #32
 800cc92:	4770      	bx	lr

0800cc94 <__i2b>:
 800cc94:	b510      	push	{r4, lr}
 800cc96:	460c      	mov	r4, r1
 800cc98:	2101      	movs	r1, #1
 800cc9a:	f7ff ff07 	bl	800caac <_Balloc>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	b928      	cbnz	r0, 800ccae <__i2b+0x1a>
 800cca2:	4b05      	ldr	r3, [pc, #20]	@ (800ccb8 <__i2b+0x24>)
 800cca4:	4805      	ldr	r0, [pc, #20]	@ (800ccbc <__i2b+0x28>)
 800cca6:	f240 1145 	movw	r1, #325	@ 0x145
 800ccaa:	f7fe f985 	bl	800afb8 <__assert_func>
 800ccae:	2301      	movs	r3, #1
 800ccb0:	6144      	str	r4, [r0, #20]
 800ccb2:	6103      	str	r3, [r0, #16]
 800ccb4:	bd10      	pop	{r4, pc}
 800ccb6:	bf00      	nop
 800ccb8:	0800daac 	.word	0x0800daac
 800ccbc:	0800dabd 	.word	0x0800dabd

0800ccc0 <__multiply>:
 800ccc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccc4:	4617      	mov	r7, r2
 800ccc6:	690a      	ldr	r2, [r1, #16]
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	bfa8      	it	ge
 800ccce:	463b      	movge	r3, r7
 800ccd0:	4689      	mov	r9, r1
 800ccd2:	bfa4      	itt	ge
 800ccd4:	460f      	movge	r7, r1
 800ccd6:	4699      	movge	r9, r3
 800ccd8:	693d      	ldr	r5, [r7, #16]
 800ccda:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	6879      	ldr	r1, [r7, #4]
 800cce2:	eb05 060a 	add.w	r6, r5, sl
 800cce6:	42b3      	cmp	r3, r6
 800cce8:	b085      	sub	sp, #20
 800ccea:	bfb8      	it	lt
 800ccec:	3101      	addlt	r1, #1
 800ccee:	f7ff fedd 	bl	800caac <_Balloc>
 800ccf2:	b930      	cbnz	r0, 800cd02 <__multiply+0x42>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	4b41      	ldr	r3, [pc, #260]	@ (800cdfc <__multiply+0x13c>)
 800ccf8:	4841      	ldr	r0, [pc, #260]	@ (800ce00 <__multiply+0x140>)
 800ccfa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ccfe:	f7fe f95b 	bl	800afb8 <__assert_func>
 800cd02:	f100 0414 	add.w	r4, r0, #20
 800cd06:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cd0a:	4623      	mov	r3, r4
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	4573      	cmp	r3, lr
 800cd10:	d320      	bcc.n	800cd54 <__multiply+0x94>
 800cd12:	f107 0814 	add.w	r8, r7, #20
 800cd16:	f109 0114 	add.w	r1, r9, #20
 800cd1a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cd1e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cd22:	9302      	str	r3, [sp, #8]
 800cd24:	1beb      	subs	r3, r5, r7
 800cd26:	3b15      	subs	r3, #21
 800cd28:	f023 0303 	bic.w	r3, r3, #3
 800cd2c:	3304      	adds	r3, #4
 800cd2e:	3715      	adds	r7, #21
 800cd30:	42bd      	cmp	r5, r7
 800cd32:	bf38      	it	cc
 800cd34:	2304      	movcc	r3, #4
 800cd36:	9301      	str	r3, [sp, #4]
 800cd38:	9b02      	ldr	r3, [sp, #8]
 800cd3a:	9103      	str	r1, [sp, #12]
 800cd3c:	428b      	cmp	r3, r1
 800cd3e:	d80c      	bhi.n	800cd5a <__multiply+0x9a>
 800cd40:	2e00      	cmp	r6, #0
 800cd42:	dd03      	ble.n	800cd4c <__multiply+0x8c>
 800cd44:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d055      	beq.n	800cdf8 <__multiply+0x138>
 800cd4c:	6106      	str	r6, [r0, #16]
 800cd4e:	b005      	add	sp, #20
 800cd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd54:	f843 2b04 	str.w	r2, [r3], #4
 800cd58:	e7d9      	b.n	800cd0e <__multiply+0x4e>
 800cd5a:	f8b1 a000 	ldrh.w	sl, [r1]
 800cd5e:	f1ba 0f00 	cmp.w	sl, #0
 800cd62:	d01f      	beq.n	800cda4 <__multiply+0xe4>
 800cd64:	46c4      	mov	ip, r8
 800cd66:	46a1      	mov	r9, r4
 800cd68:	2700      	movs	r7, #0
 800cd6a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cd6e:	f8d9 3000 	ldr.w	r3, [r9]
 800cd72:	fa1f fb82 	uxth.w	fp, r2
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	fb0a 330b 	mla	r3, sl, fp, r3
 800cd7c:	443b      	add	r3, r7
 800cd7e:	f8d9 7000 	ldr.w	r7, [r9]
 800cd82:	0c12      	lsrs	r2, r2, #16
 800cd84:	0c3f      	lsrs	r7, r7, #16
 800cd86:	fb0a 7202 	mla	r2, sl, r2, r7
 800cd8a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd94:	4565      	cmp	r5, ip
 800cd96:	f849 3b04 	str.w	r3, [r9], #4
 800cd9a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cd9e:	d8e4      	bhi.n	800cd6a <__multiply+0xaa>
 800cda0:	9b01      	ldr	r3, [sp, #4]
 800cda2:	50e7      	str	r7, [r4, r3]
 800cda4:	9b03      	ldr	r3, [sp, #12]
 800cda6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cdaa:	3104      	adds	r1, #4
 800cdac:	f1b9 0f00 	cmp.w	r9, #0
 800cdb0:	d020      	beq.n	800cdf4 <__multiply+0x134>
 800cdb2:	6823      	ldr	r3, [r4, #0]
 800cdb4:	4647      	mov	r7, r8
 800cdb6:	46a4      	mov	ip, r4
 800cdb8:	f04f 0a00 	mov.w	sl, #0
 800cdbc:	f8b7 b000 	ldrh.w	fp, [r7]
 800cdc0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cdc4:	fb09 220b 	mla	r2, r9, fp, r2
 800cdc8:	4452      	add	r2, sl
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cdd0:	f84c 3b04 	str.w	r3, [ip], #4
 800cdd4:	f857 3b04 	ldr.w	r3, [r7], #4
 800cdd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cddc:	f8bc 3000 	ldrh.w	r3, [ip]
 800cde0:	fb09 330a 	mla	r3, r9, sl, r3
 800cde4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cde8:	42bd      	cmp	r5, r7
 800cdea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cdee:	d8e5      	bhi.n	800cdbc <__multiply+0xfc>
 800cdf0:	9a01      	ldr	r2, [sp, #4]
 800cdf2:	50a3      	str	r3, [r4, r2]
 800cdf4:	3404      	adds	r4, #4
 800cdf6:	e79f      	b.n	800cd38 <__multiply+0x78>
 800cdf8:	3e01      	subs	r6, #1
 800cdfa:	e7a1      	b.n	800cd40 <__multiply+0x80>
 800cdfc:	0800daac 	.word	0x0800daac
 800ce00:	0800dabd 	.word	0x0800dabd

0800ce04 <__pow5mult>:
 800ce04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce08:	4615      	mov	r5, r2
 800ce0a:	f012 0203 	ands.w	r2, r2, #3
 800ce0e:	4607      	mov	r7, r0
 800ce10:	460e      	mov	r6, r1
 800ce12:	d007      	beq.n	800ce24 <__pow5mult+0x20>
 800ce14:	4c25      	ldr	r4, [pc, #148]	@ (800ceac <__pow5mult+0xa8>)
 800ce16:	3a01      	subs	r2, #1
 800ce18:	2300      	movs	r3, #0
 800ce1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce1e:	f7ff fea7 	bl	800cb70 <__multadd>
 800ce22:	4606      	mov	r6, r0
 800ce24:	10ad      	asrs	r5, r5, #2
 800ce26:	d03d      	beq.n	800cea4 <__pow5mult+0xa0>
 800ce28:	69fc      	ldr	r4, [r7, #28]
 800ce2a:	b97c      	cbnz	r4, 800ce4c <__pow5mult+0x48>
 800ce2c:	2010      	movs	r0, #16
 800ce2e:	f7fe f8e1 	bl	800aff4 <malloc>
 800ce32:	4602      	mov	r2, r0
 800ce34:	61f8      	str	r0, [r7, #28]
 800ce36:	b928      	cbnz	r0, 800ce44 <__pow5mult+0x40>
 800ce38:	4b1d      	ldr	r3, [pc, #116]	@ (800ceb0 <__pow5mult+0xac>)
 800ce3a:	481e      	ldr	r0, [pc, #120]	@ (800ceb4 <__pow5mult+0xb0>)
 800ce3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ce40:	f7fe f8ba 	bl	800afb8 <__assert_func>
 800ce44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce48:	6004      	str	r4, [r0, #0]
 800ce4a:	60c4      	str	r4, [r0, #12]
 800ce4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ce50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce54:	b94c      	cbnz	r4, 800ce6a <__pow5mult+0x66>
 800ce56:	f240 2171 	movw	r1, #625	@ 0x271
 800ce5a:	4638      	mov	r0, r7
 800ce5c:	f7ff ff1a 	bl	800cc94 <__i2b>
 800ce60:	2300      	movs	r3, #0
 800ce62:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce66:	4604      	mov	r4, r0
 800ce68:	6003      	str	r3, [r0, #0]
 800ce6a:	f04f 0900 	mov.w	r9, #0
 800ce6e:	07eb      	lsls	r3, r5, #31
 800ce70:	d50a      	bpl.n	800ce88 <__pow5mult+0x84>
 800ce72:	4631      	mov	r1, r6
 800ce74:	4622      	mov	r2, r4
 800ce76:	4638      	mov	r0, r7
 800ce78:	f7ff ff22 	bl	800ccc0 <__multiply>
 800ce7c:	4631      	mov	r1, r6
 800ce7e:	4680      	mov	r8, r0
 800ce80:	4638      	mov	r0, r7
 800ce82:	f7ff fe53 	bl	800cb2c <_Bfree>
 800ce86:	4646      	mov	r6, r8
 800ce88:	106d      	asrs	r5, r5, #1
 800ce8a:	d00b      	beq.n	800cea4 <__pow5mult+0xa0>
 800ce8c:	6820      	ldr	r0, [r4, #0]
 800ce8e:	b938      	cbnz	r0, 800cea0 <__pow5mult+0x9c>
 800ce90:	4622      	mov	r2, r4
 800ce92:	4621      	mov	r1, r4
 800ce94:	4638      	mov	r0, r7
 800ce96:	f7ff ff13 	bl	800ccc0 <__multiply>
 800ce9a:	6020      	str	r0, [r4, #0]
 800ce9c:	f8c0 9000 	str.w	r9, [r0]
 800cea0:	4604      	mov	r4, r0
 800cea2:	e7e4      	b.n	800ce6e <__pow5mult+0x6a>
 800cea4:	4630      	mov	r0, r6
 800cea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ceaa:	bf00      	nop
 800ceac:	0800db34 	.word	0x0800db34
 800ceb0:	0800da3d 	.word	0x0800da3d
 800ceb4:	0800dabd 	.word	0x0800dabd

0800ceb8 <__lshift>:
 800ceb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cebc:	460c      	mov	r4, r1
 800cebe:	6849      	ldr	r1, [r1, #4]
 800cec0:	6923      	ldr	r3, [r4, #16]
 800cec2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cec6:	68a3      	ldr	r3, [r4, #8]
 800cec8:	4607      	mov	r7, r0
 800ceca:	4691      	mov	r9, r2
 800cecc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ced0:	f108 0601 	add.w	r6, r8, #1
 800ced4:	42b3      	cmp	r3, r6
 800ced6:	db0b      	blt.n	800cef0 <__lshift+0x38>
 800ced8:	4638      	mov	r0, r7
 800ceda:	f7ff fde7 	bl	800caac <_Balloc>
 800cede:	4605      	mov	r5, r0
 800cee0:	b948      	cbnz	r0, 800cef6 <__lshift+0x3e>
 800cee2:	4602      	mov	r2, r0
 800cee4:	4b28      	ldr	r3, [pc, #160]	@ (800cf88 <__lshift+0xd0>)
 800cee6:	4829      	ldr	r0, [pc, #164]	@ (800cf8c <__lshift+0xd4>)
 800cee8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ceec:	f7fe f864 	bl	800afb8 <__assert_func>
 800cef0:	3101      	adds	r1, #1
 800cef2:	005b      	lsls	r3, r3, #1
 800cef4:	e7ee      	b.n	800ced4 <__lshift+0x1c>
 800cef6:	2300      	movs	r3, #0
 800cef8:	f100 0114 	add.w	r1, r0, #20
 800cefc:	f100 0210 	add.w	r2, r0, #16
 800cf00:	4618      	mov	r0, r3
 800cf02:	4553      	cmp	r3, sl
 800cf04:	db33      	blt.n	800cf6e <__lshift+0xb6>
 800cf06:	6920      	ldr	r0, [r4, #16]
 800cf08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf0c:	f104 0314 	add.w	r3, r4, #20
 800cf10:	f019 091f 	ands.w	r9, r9, #31
 800cf14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf1c:	d02b      	beq.n	800cf76 <__lshift+0xbe>
 800cf1e:	f1c9 0e20 	rsb	lr, r9, #32
 800cf22:	468a      	mov	sl, r1
 800cf24:	2200      	movs	r2, #0
 800cf26:	6818      	ldr	r0, [r3, #0]
 800cf28:	fa00 f009 	lsl.w	r0, r0, r9
 800cf2c:	4310      	orrs	r0, r2
 800cf2e:	f84a 0b04 	str.w	r0, [sl], #4
 800cf32:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf36:	459c      	cmp	ip, r3
 800cf38:	fa22 f20e 	lsr.w	r2, r2, lr
 800cf3c:	d8f3      	bhi.n	800cf26 <__lshift+0x6e>
 800cf3e:	ebac 0304 	sub.w	r3, ip, r4
 800cf42:	3b15      	subs	r3, #21
 800cf44:	f023 0303 	bic.w	r3, r3, #3
 800cf48:	3304      	adds	r3, #4
 800cf4a:	f104 0015 	add.w	r0, r4, #21
 800cf4e:	4560      	cmp	r0, ip
 800cf50:	bf88      	it	hi
 800cf52:	2304      	movhi	r3, #4
 800cf54:	50ca      	str	r2, [r1, r3]
 800cf56:	b10a      	cbz	r2, 800cf5c <__lshift+0xa4>
 800cf58:	f108 0602 	add.w	r6, r8, #2
 800cf5c:	3e01      	subs	r6, #1
 800cf5e:	4638      	mov	r0, r7
 800cf60:	612e      	str	r6, [r5, #16]
 800cf62:	4621      	mov	r1, r4
 800cf64:	f7ff fde2 	bl	800cb2c <_Bfree>
 800cf68:	4628      	mov	r0, r5
 800cf6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf6e:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf72:	3301      	adds	r3, #1
 800cf74:	e7c5      	b.n	800cf02 <__lshift+0x4a>
 800cf76:	3904      	subs	r1, #4
 800cf78:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf7c:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf80:	459c      	cmp	ip, r3
 800cf82:	d8f9      	bhi.n	800cf78 <__lshift+0xc0>
 800cf84:	e7ea      	b.n	800cf5c <__lshift+0xa4>
 800cf86:	bf00      	nop
 800cf88:	0800daac 	.word	0x0800daac
 800cf8c:	0800dabd 	.word	0x0800dabd

0800cf90 <__mcmp>:
 800cf90:	690a      	ldr	r2, [r1, #16]
 800cf92:	4603      	mov	r3, r0
 800cf94:	6900      	ldr	r0, [r0, #16]
 800cf96:	1a80      	subs	r0, r0, r2
 800cf98:	b530      	push	{r4, r5, lr}
 800cf9a:	d10e      	bne.n	800cfba <__mcmp+0x2a>
 800cf9c:	3314      	adds	r3, #20
 800cf9e:	3114      	adds	r1, #20
 800cfa0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cfa4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cfa8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cfac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cfb0:	4295      	cmp	r5, r2
 800cfb2:	d003      	beq.n	800cfbc <__mcmp+0x2c>
 800cfb4:	d205      	bcs.n	800cfc2 <__mcmp+0x32>
 800cfb6:	f04f 30ff 	mov.w	r0, #4294967295
 800cfba:	bd30      	pop	{r4, r5, pc}
 800cfbc:	42a3      	cmp	r3, r4
 800cfbe:	d3f3      	bcc.n	800cfa8 <__mcmp+0x18>
 800cfc0:	e7fb      	b.n	800cfba <__mcmp+0x2a>
 800cfc2:	2001      	movs	r0, #1
 800cfc4:	e7f9      	b.n	800cfba <__mcmp+0x2a>
	...

0800cfc8 <__mdiff>:
 800cfc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfcc:	4689      	mov	r9, r1
 800cfce:	4606      	mov	r6, r0
 800cfd0:	4611      	mov	r1, r2
 800cfd2:	4648      	mov	r0, r9
 800cfd4:	4614      	mov	r4, r2
 800cfd6:	f7ff ffdb 	bl	800cf90 <__mcmp>
 800cfda:	1e05      	subs	r5, r0, #0
 800cfdc:	d112      	bne.n	800d004 <__mdiff+0x3c>
 800cfde:	4629      	mov	r1, r5
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	f7ff fd63 	bl	800caac <_Balloc>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	b928      	cbnz	r0, 800cff6 <__mdiff+0x2e>
 800cfea:	4b3f      	ldr	r3, [pc, #252]	@ (800d0e8 <__mdiff+0x120>)
 800cfec:	f240 2137 	movw	r1, #567	@ 0x237
 800cff0:	483e      	ldr	r0, [pc, #248]	@ (800d0ec <__mdiff+0x124>)
 800cff2:	f7fd ffe1 	bl	800afb8 <__assert_func>
 800cff6:	2301      	movs	r3, #1
 800cff8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cffc:	4610      	mov	r0, r2
 800cffe:	b003      	add	sp, #12
 800d000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d004:	bfbc      	itt	lt
 800d006:	464b      	movlt	r3, r9
 800d008:	46a1      	movlt	r9, r4
 800d00a:	4630      	mov	r0, r6
 800d00c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d010:	bfba      	itte	lt
 800d012:	461c      	movlt	r4, r3
 800d014:	2501      	movlt	r5, #1
 800d016:	2500      	movge	r5, #0
 800d018:	f7ff fd48 	bl	800caac <_Balloc>
 800d01c:	4602      	mov	r2, r0
 800d01e:	b918      	cbnz	r0, 800d028 <__mdiff+0x60>
 800d020:	4b31      	ldr	r3, [pc, #196]	@ (800d0e8 <__mdiff+0x120>)
 800d022:	f240 2145 	movw	r1, #581	@ 0x245
 800d026:	e7e3      	b.n	800cff0 <__mdiff+0x28>
 800d028:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d02c:	6926      	ldr	r6, [r4, #16]
 800d02e:	60c5      	str	r5, [r0, #12]
 800d030:	f109 0310 	add.w	r3, r9, #16
 800d034:	f109 0514 	add.w	r5, r9, #20
 800d038:	f104 0e14 	add.w	lr, r4, #20
 800d03c:	f100 0b14 	add.w	fp, r0, #20
 800d040:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d044:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d048:	9301      	str	r3, [sp, #4]
 800d04a:	46d9      	mov	r9, fp
 800d04c:	f04f 0c00 	mov.w	ip, #0
 800d050:	9b01      	ldr	r3, [sp, #4]
 800d052:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d056:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d05a:	9301      	str	r3, [sp, #4]
 800d05c:	fa1f f38a 	uxth.w	r3, sl
 800d060:	4619      	mov	r1, r3
 800d062:	b283      	uxth	r3, r0
 800d064:	1acb      	subs	r3, r1, r3
 800d066:	0c00      	lsrs	r0, r0, #16
 800d068:	4463      	add	r3, ip
 800d06a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d06e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d072:	b29b      	uxth	r3, r3
 800d074:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d078:	4576      	cmp	r6, lr
 800d07a:	f849 3b04 	str.w	r3, [r9], #4
 800d07e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d082:	d8e5      	bhi.n	800d050 <__mdiff+0x88>
 800d084:	1b33      	subs	r3, r6, r4
 800d086:	3b15      	subs	r3, #21
 800d088:	f023 0303 	bic.w	r3, r3, #3
 800d08c:	3415      	adds	r4, #21
 800d08e:	3304      	adds	r3, #4
 800d090:	42a6      	cmp	r6, r4
 800d092:	bf38      	it	cc
 800d094:	2304      	movcc	r3, #4
 800d096:	441d      	add	r5, r3
 800d098:	445b      	add	r3, fp
 800d09a:	461e      	mov	r6, r3
 800d09c:	462c      	mov	r4, r5
 800d09e:	4544      	cmp	r4, r8
 800d0a0:	d30e      	bcc.n	800d0c0 <__mdiff+0xf8>
 800d0a2:	f108 0103 	add.w	r1, r8, #3
 800d0a6:	1b49      	subs	r1, r1, r5
 800d0a8:	f021 0103 	bic.w	r1, r1, #3
 800d0ac:	3d03      	subs	r5, #3
 800d0ae:	45a8      	cmp	r8, r5
 800d0b0:	bf38      	it	cc
 800d0b2:	2100      	movcc	r1, #0
 800d0b4:	440b      	add	r3, r1
 800d0b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d0ba:	b191      	cbz	r1, 800d0e2 <__mdiff+0x11a>
 800d0bc:	6117      	str	r7, [r2, #16]
 800d0be:	e79d      	b.n	800cffc <__mdiff+0x34>
 800d0c0:	f854 1b04 	ldr.w	r1, [r4], #4
 800d0c4:	46e6      	mov	lr, ip
 800d0c6:	0c08      	lsrs	r0, r1, #16
 800d0c8:	fa1c fc81 	uxtah	ip, ip, r1
 800d0cc:	4471      	add	r1, lr
 800d0ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d0d2:	b289      	uxth	r1, r1
 800d0d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d0d8:	f846 1b04 	str.w	r1, [r6], #4
 800d0dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d0e0:	e7dd      	b.n	800d09e <__mdiff+0xd6>
 800d0e2:	3f01      	subs	r7, #1
 800d0e4:	e7e7      	b.n	800d0b6 <__mdiff+0xee>
 800d0e6:	bf00      	nop
 800d0e8:	0800daac 	.word	0x0800daac
 800d0ec:	0800dabd 	.word	0x0800dabd

0800d0f0 <__d2b>:
 800d0f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d0f4:	460f      	mov	r7, r1
 800d0f6:	2101      	movs	r1, #1
 800d0f8:	ec59 8b10 	vmov	r8, r9, d0
 800d0fc:	4616      	mov	r6, r2
 800d0fe:	f7ff fcd5 	bl	800caac <_Balloc>
 800d102:	4604      	mov	r4, r0
 800d104:	b930      	cbnz	r0, 800d114 <__d2b+0x24>
 800d106:	4602      	mov	r2, r0
 800d108:	4b23      	ldr	r3, [pc, #140]	@ (800d198 <__d2b+0xa8>)
 800d10a:	4824      	ldr	r0, [pc, #144]	@ (800d19c <__d2b+0xac>)
 800d10c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d110:	f7fd ff52 	bl	800afb8 <__assert_func>
 800d114:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d118:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d11c:	b10d      	cbz	r5, 800d122 <__d2b+0x32>
 800d11e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d122:	9301      	str	r3, [sp, #4]
 800d124:	f1b8 0300 	subs.w	r3, r8, #0
 800d128:	d023      	beq.n	800d172 <__d2b+0x82>
 800d12a:	4668      	mov	r0, sp
 800d12c:	9300      	str	r3, [sp, #0]
 800d12e:	f7ff fd84 	bl	800cc3a <__lo0bits>
 800d132:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d136:	b1d0      	cbz	r0, 800d16e <__d2b+0x7e>
 800d138:	f1c0 0320 	rsb	r3, r0, #32
 800d13c:	fa02 f303 	lsl.w	r3, r2, r3
 800d140:	430b      	orrs	r3, r1
 800d142:	40c2      	lsrs	r2, r0
 800d144:	6163      	str	r3, [r4, #20]
 800d146:	9201      	str	r2, [sp, #4]
 800d148:	9b01      	ldr	r3, [sp, #4]
 800d14a:	61a3      	str	r3, [r4, #24]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	bf0c      	ite	eq
 800d150:	2201      	moveq	r2, #1
 800d152:	2202      	movne	r2, #2
 800d154:	6122      	str	r2, [r4, #16]
 800d156:	b1a5      	cbz	r5, 800d182 <__d2b+0x92>
 800d158:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d15c:	4405      	add	r5, r0
 800d15e:	603d      	str	r5, [r7, #0]
 800d160:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d164:	6030      	str	r0, [r6, #0]
 800d166:	4620      	mov	r0, r4
 800d168:	b003      	add	sp, #12
 800d16a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d16e:	6161      	str	r1, [r4, #20]
 800d170:	e7ea      	b.n	800d148 <__d2b+0x58>
 800d172:	a801      	add	r0, sp, #4
 800d174:	f7ff fd61 	bl	800cc3a <__lo0bits>
 800d178:	9b01      	ldr	r3, [sp, #4]
 800d17a:	6163      	str	r3, [r4, #20]
 800d17c:	3020      	adds	r0, #32
 800d17e:	2201      	movs	r2, #1
 800d180:	e7e8      	b.n	800d154 <__d2b+0x64>
 800d182:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d186:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d18a:	6038      	str	r0, [r7, #0]
 800d18c:	6918      	ldr	r0, [r3, #16]
 800d18e:	f7ff fd35 	bl	800cbfc <__hi0bits>
 800d192:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d196:	e7e5      	b.n	800d164 <__d2b+0x74>
 800d198:	0800daac 	.word	0x0800daac
 800d19c:	0800dabd 	.word	0x0800dabd

0800d1a0 <__sfputc_r>:
 800d1a0:	6893      	ldr	r3, [r2, #8]
 800d1a2:	3b01      	subs	r3, #1
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	b410      	push	{r4}
 800d1a8:	6093      	str	r3, [r2, #8]
 800d1aa:	da08      	bge.n	800d1be <__sfputc_r+0x1e>
 800d1ac:	6994      	ldr	r4, [r2, #24]
 800d1ae:	42a3      	cmp	r3, r4
 800d1b0:	db01      	blt.n	800d1b6 <__sfputc_r+0x16>
 800d1b2:	290a      	cmp	r1, #10
 800d1b4:	d103      	bne.n	800d1be <__sfputc_r+0x1e>
 800d1b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1ba:	f000 b9df 	b.w	800d57c <__swbuf_r>
 800d1be:	6813      	ldr	r3, [r2, #0]
 800d1c0:	1c58      	adds	r0, r3, #1
 800d1c2:	6010      	str	r0, [r2, #0]
 800d1c4:	7019      	strb	r1, [r3, #0]
 800d1c6:	4608      	mov	r0, r1
 800d1c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1cc:	4770      	bx	lr

0800d1ce <__sfputs_r>:
 800d1ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1d0:	4606      	mov	r6, r0
 800d1d2:	460f      	mov	r7, r1
 800d1d4:	4614      	mov	r4, r2
 800d1d6:	18d5      	adds	r5, r2, r3
 800d1d8:	42ac      	cmp	r4, r5
 800d1da:	d101      	bne.n	800d1e0 <__sfputs_r+0x12>
 800d1dc:	2000      	movs	r0, #0
 800d1de:	e007      	b.n	800d1f0 <__sfputs_r+0x22>
 800d1e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1e4:	463a      	mov	r2, r7
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	f7ff ffda 	bl	800d1a0 <__sfputc_r>
 800d1ec:	1c43      	adds	r3, r0, #1
 800d1ee:	d1f3      	bne.n	800d1d8 <__sfputs_r+0xa>
 800d1f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d1f4 <_vfiprintf_r>:
 800d1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f8:	460d      	mov	r5, r1
 800d1fa:	b09d      	sub	sp, #116	@ 0x74
 800d1fc:	4614      	mov	r4, r2
 800d1fe:	4698      	mov	r8, r3
 800d200:	4606      	mov	r6, r0
 800d202:	b118      	cbz	r0, 800d20c <_vfiprintf_r+0x18>
 800d204:	6a03      	ldr	r3, [r0, #32]
 800d206:	b90b      	cbnz	r3, 800d20c <_vfiprintf_r+0x18>
 800d208:	f7fe fc8c 	bl	800bb24 <__sinit>
 800d20c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d20e:	07d9      	lsls	r1, r3, #31
 800d210:	d405      	bmi.n	800d21e <_vfiprintf_r+0x2a>
 800d212:	89ab      	ldrh	r3, [r5, #12]
 800d214:	059a      	lsls	r2, r3, #22
 800d216:	d402      	bmi.n	800d21e <_vfiprintf_r+0x2a>
 800d218:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d21a:	f7fe fd9c 	bl	800bd56 <__retarget_lock_acquire_recursive>
 800d21e:	89ab      	ldrh	r3, [r5, #12]
 800d220:	071b      	lsls	r3, r3, #28
 800d222:	d501      	bpl.n	800d228 <_vfiprintf_r+0x34>
 800d224:	692b      	ldr	r3, [r5, #16]
 800d226:	b99b      	cbnz	r3, 800d250 <_vfiprintf_r+0x5c>
 800d228:	4629      	mov	r1, r5
 800d22a:	4630      	mov	r0, r6
 800d22c:	f000 f9e4 	bl	800d5f8 <__swsetup_r>
 800d230:	b170      	cbz	r0, 800d250 <_vfiprintf_r+0x5c>
 800d232:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d234:	07dc      	lsls	r4, r3, #31
 800d236:	d504      	bpl.n	800d242 <_vfiprintf_r+0x4e>
 800d238:	f04f 30ff 	mov.w	r0, #4294967295
 800d23c:	b01d      	add	sp, #116	@ 0x74
 800d23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d242:	89ab      	ldrh	r3, [r5, #12]
 800d244:	0598      	lsls	r0, r3, #22
 800d246:	d4f7      	bmi.n	800d238 <_vfiprintf_r+0x44>
 800d248:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d24a:	f7fe fd85 	bl	800bd58 <__retarget_lock_release_recursive>
 800d24e:	e7f3      	b.n	800d238 <_vfiprintf_r+0x44>
 800d250:	2300      	movs	r3, #0
 800d252:	9309      	str	r3, [sp, #36]	@ 0x24
 800d254:	2320      	movs	r3, #32
 800d256:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d25a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d25e:	2330      	movs	r3, #48	@ 0x30
 800d260:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d410 <_vfiprintf_r+0x21c>
 800d264:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d268:	f04f 0901 	mov.w	r9, #1
 800d26c:	4623      	mov	r3, r4
 800d26e:	469a      	mov	sl, r3
 800d270:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d274:	b10a      	cbz	r2, 800d27a <_vfiprintf_r+0x86>
 800d276:	2a25      	cmp	r2, #37	@ 0x25
 800d278:	d1f9      	bne.n	800d26e <_vfiprintf_r+0x7a>
 800d27a:	ebba 0b04 	subs.w	fp, sl, r4
 800d27e:	d00b      	beq.n	800d298 <_vfiprintf_r+0xa4>
 800d280:	465b      	mov	r3, fp
 800d282:	4622      	mov	r2, r4
 800d284:	4629      	mov	r1, r5
 800d286:	4630      	mov	r0, r6
 800d288:	f7ff ffa1 	bl	800d1ce <__sfputs_r>
 800d28c:	3001      	adds	r0, #1
 800d28e:	f000 80a7 	beq.w	800d3e0 <_vfiprintf_r+0x1ec>
 800d292:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d294:	445a      	add	r2, fp
 800d296:	9209      	str	r2, [sp, #36]	@ 0x24
 800d298:	f89a 3000 	ldrb.w	r3, [sl]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	f000 809f 	beq.w	800d3e0 <_vfiprintf_r+0x1ec>
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d2a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2ac:	f10a 0a01 	add.w	sl, sl, #1
 800d2b0:	9304      	str	r3, [sp, #16]
 800d2b2:	9307      	str	r3, [sp, #28]
 800d2b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d2b8:	931a      	str	r3, [sp, #104]	@ 0x68
 800d2ba:	4654      	mov	r4, sl
 800d2bc:	2205      	movs	r2, #5
 800d2be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2c2:	4853      	ldr	r0, [pc, #332]	@ (800d410 <_vfiprintf_r+0x21c>)
 800d2c4:	f7f2 ff84 	bl	80001d0 <memchr>
 800d2c8:	9a04      	ldr	r2, [sp, #16]
 800d2ca:	b9d8      	cbnz	r0, 800d304 <_vfiprintf_r+0x110>
 800d2cc:	06d1      	lsls	r1, r2, #27
 800d2ce:	bf44      	itt	mi
 800d2d0:	2320      	movmi	r3, #32
 800d2d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2d6:	0713      	lsls	r3, r2, #28
 800d2d8:	bf44      	itt	mi
 800d2da:	232b      	movmi	r3, #43	@ 0x2b
 800d2dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2e0:	f89a 3000 	ldrb.w	r3, [sl]
 800d2e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2e6:	d015      	beq.n	800d314 <_vfiprintf_r+0x120>
 800d2e8:	9a07      	ldr	r2, [sp, #28]
 800d2ea:	4654      	mov	r4, sl
 800d2ec:	2000      	movs	r0, #0
 800d2ee:	f04f 0c0a 	mov.w	ip, #10
 800d2f2:	4621      	mov	r1, r4
 800d2f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2f8:	3b30      	subs	r3, #48	@ 0x30
 800d2fa:	2b09      	cmp	r3, #9
 800d2fc:	d94b      	bls.n	800d396 <_vfiprintf_r+0x1a2>
 800d2fe:	b1b0      	cbz	r0, 800d32e <_vfiprintf_r+0x13a>
 800d300:	9207      	str	r2, [sp, #28]
 800d302:	e014      	b.n	800d32e <_vfiprintf_r+0x13a>
 800d304:	eba0 0308 	sub.w	r3, r0, r8
 800d308:	fa09 f303 	lsl.w	r3, r9, r3
 800d30c:	4313      	orrs	r3, r2
 800d30e:	9304      	str	r3, [sp, #16]
 800d310:	46a2      	mov	sl, r4
 800d312:	e7d2      	b.n	800d2ba <_vfiprintf_r+0xc6>
 800d314:	9b03      	ldr	r3, [sp, #12]
 800d316:	1d19      	adds	r1, r3, #4
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	9103      	str	r1, [sp, #12]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	bfbb      	ittet	lt
 800d320:	425b      	neglt	r3, r3
 800d322:	f042 0202 	orrlt.w	r2, r2, #2
 800d326:	9307      	strge	r3, [sp, #28]
 800d328:	9307      	strlt	r3, [sp, #28]
 800d32a:	bfb8      	it	lt
 800d32c:	9204      	strlt	r2, [sp, #16]
 800d32e:	7823      	ldrb	r3, [r4, #0]
 800d330:	2b2e      	cmp	r3, #46	@ 0x2e
 800d332:	d10a      	bne.n	800d34a <_vfiprintf_r+0x156>
 800d334:	7863      	ldrb	r3, [r4, #1]
 800d336:	2b2a      	cmp	r3, #42	@ 0x2a
 800d338:	d132      	bne.n	800d3a0 <_vfiprintf_r+0x1ac>
 800d33a:	9b03      	ldr	r3, [sp, #12]
 800d33c:	1d1a      	adds	r2, r3, #4
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	9203      	str	r2, [sp, #12]
 800d342:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d346:	3402      	adds	r4, #2
 800d348:	9305      	str	r3, [sp, #20]
 800d34a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d420 <_vfiprintf_r+0x22c>
 800d34e:	7821      	ldrb	r1, [r4, #0]
 800d350:	2203      	movs	r2, #3
 800d352:	4650      	mov	r0, sl
 800d354:	f7f2 ff3c 	bl	80001d0 <memchr>
 800d358:	b138      	cbz	r0, 800d36a <_vfiprintf_r+0x176>
 800d35a:	9b04      	ldr	r3, [sp, #16]
 800d35c:	eba0 000a 	sub.w	r0, r0, sl
 800d360:	2240      	movs	r2, #64	@ 0x40
 800d362:	4082      	lsls	r2, r0
 800d364:	4313      	orrs	r3, r2
 800d366:	3401      	adds	r4, #1
 800d368:	9304      	str	r3, [sp, #16]
 800d36a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d36e:	4829      	ldr	r0, [pc, #164]	@ (800d414 <_vfiprintf_r+0x220>)
 800d370:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d374:	2206      	movs	r2, #6
 800d376:	f7f2 ff2b 	bl	80001d0 <memchr>
 800d37a:	2800      	cmp	r0, #0
 800d37c:	d03f      	beq.n	800d3fe <_vfiprintf_r+0x20a>
 800d37e:	4b26      	ldr	r3, [pc, #152]	@ (800d418 <_vfiprintf_r+0x224>)
 800d380:	bb1b      	cbnz	r3, 800d3ca <_vfiprintf_r+0x1d6>
 800d382:	9b03      	ldr	r3, [sp, #12]
 800d384:	3307      	adds	r3, #7
 800d386:	f023 0307 	bic.w	r3, r3, #7
 800d38a:	3308      	adds	r3, #8
 800d38c:	9303      	str	r3, [sp, #12]
 800d38e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d390:	443b      	add	r3, r7
 800d392:	9309      	str	r3, [sp, #36]	@ 0x24
 800d394:	e76a      	b.n	800d26c <_vfiprintf_r+0x78>
 800d396:	fb0c 3202 	mla	r2, ip, r2, r3
 800d39a:	460c      	mov	r4, r1
 800d39c:	2001      	movs	r0, #1
 800d39e:	e7a8      	b.n	800d2f2 <_vfiprintf_r+0xfe>
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	3401      	adds	r4, #1
 800d3a4:	9305      	str	r3, [sp, #20]
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	f04f 0c0a 	mov.w	ip, #10
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3b2:	3a30      	subs	r2, #48	@ 0x30
 800d3b4:	2a09      	cmp	r2, #9
 800d3b6:	d903      	bls.n	800d3c0 <_vfiprintf_r+0x1cc>
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d0c6      	beq.n	800d34a <_vfiprintf_r+0x156>
 800d3bc:	9105      	str	r1, [sp, #20]
 800d3be:	e7c4      	b.n	800d34a <_vfiprintf_r+0x156>
 800d3c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	e7f0      	b.n	800d3ac <_vfiprintf_r+0x1b8>
 800d3ca:	ab03      	add	r3, sp, #12
 800d3cc:	9300      	str	r3, [sp, #0]
 800d3ce:	462a      	mov	r2, r5
 800d3d0:	4b12      	ldr	r3, [pc, #72]	@ (800d41c <_vfiprintf_r+0x228>)
 800d3d2:	a904      	add	r1, sp, #16
 800d3d4:	4630      	mov	r0, r6
 800d3d6:	f7fd ff63 	bl	800b2a0 <_printf_float>
 800d3da:	4607      	mov	r7, r0
 800d3dc:	1c78      	adds	r0, r7, #1
 800d3de:	d1d6      	bne.n	800d38e <_vfiprintf_r+0x19a>
 800d3e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3e2:	07d9      	lsls	r1, r3, #31
 800d3e4:	d405      	bmi.n	800d3f2 <_vfiprintf_r+0x1fe>
 800d3e6:	89ab      	ldrh	r3, [r5, #12]
 800d3e8:	059a      	lsls	r2, r3, #22
 800d3ea:	d402      	bmi.n	800d3f2 <_vfiprintf_r+0x1fe>
 800d3ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3ee:	f7fe fcb3 	bl	800bd58 <__retarget_lock_release_recursive>
 800d3f2:	89ab      	ldrh	r3, [r5, #12]
 800d3f4:	065b      	lsls	r3, r3, #25
 800d3f6:	f53f af1f 	bmi.w	800d238 <_vfiprintf_r+0x44>
 800d3fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3fc:	e71e      	b.n	800d23c <_vfiprintf_r+0x48>
 800d3fe:	ab03      	add	r3, sp, #12
 800d400:	9300      	str	r3, [sp, #0]
 800d402:	462a      	mov	r2, r5
 800d404:	4b05      	ldr	r3, [pc, #20]	@ (800d41c <_vfiprintf_r+0x228>)
 800d406:	a904      	add	r1, sp, #16
 800d408:	4630      	mov	r0, r6
 800d40a:	f7fe f9e1 	bl	800b7d0 <_printf_i>
 800d40e:	e7e4      	b.n	800d3da <_vfiprintf_r+0x1e6>
 800d410:	0800db16 	.word	0x0800db16
 800d414:	0800db20 	.word	0x0800db20
 800d418:	0800b2a1 	.word	0x0800b2a1
 800d41c:	0800d1cf 	.word	0x0800d1cf
 800d420:	0800db1c 	.word	0x0800db1c

0800d424 <__sflush_r>:
 800d424:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d42c:	0716      	lsls	r6, r2, #28
 800d42e:	4605      	mov	r5, r0
 800d430:	460c      	mov	r4, r1
 800d432:	d454      	bmi.n	800d4de <__sflush_r+0xba>
 800d434:	684b      	ldr	r3, [r1, #4]
 800d436:	2b00      	cmp	r3, #0
 800d438:	dc02      	bgt.n	800d440 <__sflush_r+0x1c>
 800d43a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	dd48      	ble.n	800d4d2 <__sflush_r+0xae>
 800d440:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d442:	2e00      	cmp	r6, #0
 800d444:	d045      	beq.n	800d4d2 <__sflush_r+0xae>
 800d446:	2300      	movs	r3, #0
 800d448:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d44c:	682f      	ldr	r7, [r5, #0]
 800d44e:	6a21      	ldr	r1, [r4, #32]
 800d450:	602b      	str	r3, [r5, #0]
 800d452:	d030      	beq.n	800d4b6 <__sflush_r+0x92>
 800d454:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d456:	89a3      	ldrh	r3, [r4, #12]
 800d458:	0759      	lsls	r1, r3, #29
 800d45a:	d505      	bpl.n	800d468 <__sflush_r+0x44>
 800d45c:	6863      	ldr	r3, [r4, #4]
 800d45e:	1ad2      	subs	r2, r2, r3
 800d460:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d462:	b10b      	cbz	r3, 800d468 <__sflush_r+0x44>
 800d464:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d466:	1ad2      	subs	r2, r2, r3
 800d468:	2300      	movs	r3, #0
 800d46a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d46c:	6a21      	ldr	r1, [r4, #32]
 800d46e:	4628      	mov	r0, r5
 800d470:	47b0      	blx	r6
 800d472:	1c43      	adds	r3, r0, #1
 800d474:	89a3      	ldrh	r3, [r4, #12]
 800d476:	d106      	bne.n	800d486 <__sflush_r+0x62>
 800d478:	6829      	ldr	r1, [r5, #0]
 800d47a:	291d      	cmp	r1, #29
 800d47c:	d82b      	bhi.n	800d4d6 <__sflush_r+0xb2>
 800d47e:	4a2a      	ldr	r2, [pc, #168]	@ (800d528 <__sflush_r+0x104>)
 800d480:	40ca      	lsrs	r2, r1
 800d482:	07d6      	lsls	r6, r2, #31
 800d484:	d527      	bpl.n	800d4d6 <__sflush_r+0xb2>
 800d486:	2200      	movs	r2, #0
 800d488:	6062      	str	r2, [r4, #4]
 800d48a:	04d9      	lsls	r1, r3, #19
 800d48c:	6922      	ldr	r2, [r4, #16]
 800d48e:	6022      	str	r2, [r4, #0]
 800d490:	d504      	bpl.n	800d49c <__sflush_r+0x78>
 800d492:	1c42      	adds	r2, r0, #1
 800d494:	d101      	bne.n	800d49a <__sflush_r+0x76>
 800d496:	682b      	ldr	r3, [r5, #0]
 800d498:	b903      	cbnz	r3, 800d49c <__sflush_r+0x78>
 800d49a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d49c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d49e:	602f      	str	r7, [r5, #0]
 800d4a0:	b1b9      	cbz	r1, 800d4d2 <__sflush_r+0xae>
 800d4a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d4a6:	4299      	cmp	r1, r3
 800d4a8:	d002      	beq.n	800d4b0 <__sflush_r+0x8c>
 800d4aa:	4628      	mov	r0, r5
 800d4ac:	f7ff fab4 	bl	800ca18 <_free_r>
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	6363      	str	r3, [r4, #52]	@ 0x34
 800d4b4:	e00d      	b.n	800d4d2 <__sflush_r+0xae>
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	47b0      	blx	r6
 800d4bc:	4602      	mov	r2, r0
 800d4be:	1c50      	adds	r0, r2, #1
 800d4c0:	d1c9      	bne.n	800d456 <__sflush_r+0x32>
 800d4c2:	682b      	ldr	r3, [r5, #0]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d0c6      	beq.n	800d456 <__sflush_r+0x32>
 800d4c8:	2b1d      	cmp	r3, #29
 800d4ca:	d001      	beq.n	800d4d0 <__sflush_r+0xac>
 800d4cc:	2b16      	cmp	r3, #22
 800d4ce:	d11e      	bne.n	800d50e <__sflush_r+0xea>
 800d4d0:	602f      	str	r7, [r5, #0]
 800d4d2:	2000      	movs	r0, #0
 800d4d4:	e022      	b.n	800d51c <__sflush_r+0xf8>
 800d4d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4da:	b21b      	sxth	r3, r3
 800d4dc:	e01b      	b.n	800d516 <__sflush_r+0xf2>
 800d4de:	690f      	ldr	r7, [r1, #16]
 800d4e0:	2f00      	cmp	r7, #0
 800d4e2:	d0f6      	beq.n	800d4d2 <__sflush_r+0xae>
 800d4e4:	0793      	lsls	r3, r2, #30
 800d4e6:	680e      	ldr	r6, [r1, #0]
 800d4e8:	bf08      	it	eq
 800d4ea:	694b      	ldreq	r3, [r1, #20]
 800d4ec:	600f      	str	r7, [r1, #0]
 800d4ee:	bf18      	it	ne
 800d4f0:	2300      	movne	r3, #0
 800d4f2:	eba6 0807 	sub.w	r8, r6, r7
 800d4f6:	608b      	str	r3, [r1, #8]
 800d4f8:	f1b8 0f00 	cmp.w	r8, #0
 800d4fc:	dde9      	ble.n	800d4d2 <__sflush_r+0xae>
 800d4fe:	6a21      	ldr	r1, [r4, #32]
 800d500:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d502:	4643      	mov	r3, r8
 800d504:	463a      	mov	r2, r7
 800d506:	4628      	mov	r0, r5
 800d508:	47b0      	blx	r6
 800d50a:	2800      	cmp	r0, #0
 800d50c:	dc08      	bgt.n	800d520 <__sflush_r+0xfc>
 800d50e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d512:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d516:	81a3      	strh	r3, [r4, #12]
 800d518:	f04f 30ff 	mov.w	r0, #4294967295
 800d51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d520:	4407      	add	r7, r0
 800d522:	eba8 0800 	sub.w	r8, r8, r0
 800d526:	e7e7      	b.n	800d4f8 <__sflush_r+0xd4>
 800d528:	20400001 	.word	0x20400001

0800d52c <_fflush_r>:
 800d52c:	b538      	push	{r3, r4, r5, lr}
 800d52e:	690b      	ldr	r3, [r1, #16]
 800d530:	4605      	mov	r5, r0
 800d532:	460c      	mov	r4, r1
 800d534:	b913      	cbnz	r3, 800d53c <_fflush_r+0x10>
 800d536:	2500      	movs	r5, #0
 800d538:	4628      	mov	r0, r5
 800d53a:	bd38      	pop	{r3, r4, r5, pc}
 800d53c:	b118      	cbz	r0, 800d546 <_fflush_r+0x1a>
 800d53e:	6a03      	ldr	r3, [r0, #32]
 800d540:	b90b      	cbnz	r3, 800d546 <_fflush_r+0x1a>
 800d542:	f7fe faef 	bl	800bb24 <__sinit>
 800d546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d0f3      	beq.n	800d536 <_fflush_r+0xa>
 800d54e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d550:	07d0      	lsls	r0, r2, #31
 800d552:	d404      	bmi.n	800d55e <_fflush_r+0x32>
 800d554:	0599      	lsls	r1, r3, #22
 800d556:	d402      	bmi.n	800d55e <_fflush_r+0x32>
 800d558:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d55a:	f7fe fbfc 	bl	800bd56 <__retarget_lock_acquire_recursive>
 800d55e:	4628      	mov	r0, r5
 800d560:	4621      	mov	r1, r4
 800d562:	f7ff ff5f 	bl	800d424 <__sflush_r>
 800d566:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d568:	07da      	lsls	r2, r3, #31
 800d56a:	4605      	mov	r5, r0
 800d56c:	d4e4      	bmi.n	800d538 <_fflush_r+0xc>
 800d56e:	89a3      	ldrh	r3, [r4, #12]
 800d570:	059b      	lsls	r3, r3, #22
 800d572:	d4e1      	bmi.n	800d538 <_fflush_r+0xc>
 800d574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d576:	f7fe fbef 	bl	800bd58 <__retarget_lock_release_recursive>
 800d57a:	e7dd      	b.n	800d538 <_fflush_r+0xc>

0800d57c <__swbuf_r>:
 800d57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d57e:	460e      	mov	r6, r1
 800d580:	4614      	mov	r4, r2
 800d582:	4605      	mov	r5, r0
 800d584:	b118      	cbz	r0, 800d58e <__swbuf_r+0x12>
 800d586:	6a03      	ldr	r3, [r0, #32]
 800d588:	b90b      	cbnz	r3, 800d58e <__swbuf_r+0x12>
 800d58a:	f7fe facb 	bl	800bb24 <__sinit>
 800d58e:	69a3      	ldr	r3, [r4, #24]
 800d590:	60a3      	str	r3, [r4, #8]
 800d592:	89a3      	ldrh	r3, [r4, #12]
 800d594:	071a      	lsls	r2, r3, #28
 800d596:	d501      	bpl.n	800d59c <__swbuf_r+0x20>
 800d598:	6923      	ldr	r3, [r4, #16]
 800d59a:	b943      	cbnz	r3, 800d5ae <__swbuf_r+0x32>
 800d59c:	4621      	mov	r1, r4
 800d59e:	4628      	mov	r0, r5
 800d5a0:	f000 f82a 	bl	800d5f8 <__swsetup_r>
 800d5a4:	b118      	cbz	r0, 800d5ae <__swbuf_r+0x32>
 800d5a6:	f04f 37ff 	mov.w	r7, #4294967295
 800d5aa:	4638      	mov	r0, r7
 800d5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5ae:	6823      	ldr	r3, [r4, #0]
 800d5b0:	6922      	ldr	r2, [r4, #16]
 800d5b2:	1a98      	subs	r0, r3, r2
 800d5b4:	6963      	ldr	r3, [r4, #20]
 800d5b6:	b2f6      	uxtb	r6, r6
 800d5b8:	4283      	cmp	r3, r0
 800d5ba:	4637      	mov	r7, r6
 800d5bc:	dc05      	bgt.n	800d5ca <__swbuf_r+0x4e>
 800d5be:	4621      	mov	r1, r4
 800d5c0:	4628      	mov	r0, r5
 800d5c2:	f7ff ffb3 	bl	800d52c <_fflush_r>
 800d5c6:	2800      	cmp	r0, #0
 800d5c8:	d1ed      	bne.n	800d5a6 <__swbuf_r+0x2a>
 800d5ca:	68a3      	ldr	r3, [r4, #8]
 800d5cc:	3b01      	subs	r3, #1
 800d5ce:	60a3      	str	r3, [r4, #8]
 800d5d0:	6823      	ldr	r3, [r4, #0]
 800d5d2:	1c5a      	adds	r2, r3, #1
 800d5d4:	6022      	str	r2, [r4, #0]
 800d5d6:	701e      	strb	r6, [r3, #0]
 800d5d8:	6962      	ldr	r2, [r4, #20]
 800d5da:	1c43      	adds	r3, r0, #1
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d004      	beq.n	800d5ea <__swbuf_r+0x6e>
 800d5e0:	89a3      	ldrh	r3, [r4, #12]
 800d5e2:	07db      	lsls	r3, r3, #31
 800d5e4:	d5e1      	bpl.n	800d5aa <__swbuf_r+0x2e>
 800d5e6:	2e0a      	cmp	r6, #10
 800d5e8:	d1df      	bne.n	800d5aa <__swbuf_r+0x2e>
 800d5ea:	4621      	mov	r1, r4
 800d5ec:	4628      	mov	r0, r5
 800d5ee:	f7ff ff9d 	bl	800d52c <_fflush_r>
 800d5f2:	2800      	cmp	r0, #0
 800d5f4:	d0d9      	beq.n	800d5aa <__swbuf_r+0x2e>
 800d5f6:	e7d6      	b.n	800d5a6 <__swbuf_r+0x2a>

0800d5f8 <__swsetup_r>:
 800d5f8:	b538      	push	{r3, r4, r5, lr}
 800d5fa:	4b29      	ldr	r3, [pc, #164]	@ (800d6a0 <__swsetup_r+0xa8>)
 800d5fc:	4605      	mov	r5, r0
 800d5fe:	6818      	ldr	r0, [r3, #0]
 800d600:	460c      	mov	r4, r1
 800d602:	b118      	cbz	r0, 800d60c <__swsetup_r+0x14>
 800d604:	6a03      	ldr	r3, [r0, #32]
 800d606:	b90b      	cbnz	r3, 800d60c <__swsetup_r+0x14>
 800d608:	f7fe fa8c 	bl	800bb24 <__sinit>
 800d60c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d610:	0719      	lsls	r1, r3, #28
 800d612:	d422      	bmi.n	800d65a <__swsetup_r+0x62>
 800d614:	06da      	lsls	r2, r3, #27
 800d616:	d407      	bmi.n	800d628 <__swsetup_r+0x30>
 800d618:	2209      	movs	r2, #9
 800d61a:	602a      	str	r2, [r5, #0]
 800d61c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d620:	81a3      	strh	r3, [r4, #12]
 800d622:	f04f 30ff 	mov.w	r0, #4294967295
 800d626:	e033      	b.n	800d690 <__swsetup_r+0x98>
 800d628:	0758      	lsls	r0, r3, #29
 800d62a:	d512      	bpl.n	800d652 <__swsetup_r+0x5a>
 800d62c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d62e:	b141      	cbz	r1, 800d642 <__swsetup_r+0x4a>
 800d630:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d634:	4299      	cmp	r1, r3
 800d636:	d002      	beq.n	800d63e <__swsetup_r+0x46>
 800d638:	4628      	mov	r0, r5
 800d63a:	f7ff f9ed 	bl	800ca18 <_free_r>
 800d63e:	2300      	movs	r3, #0
 800d640:	6363      	str	r3, [r4, #52]	@ 0x34
 800d642:	89a3      	ldrh	r3, [r4, #12]
 800d644:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d648:	81a3      	strh	r3, [r4, #12]
 800d64a:	2300      	movs	r3, #0
 800d64c:	6063      	str	r3, [r4, #4]
 800d64e:	6923      	ldr	r3, [r4, #16]
 800d650:	6023      	str	r3, [r4, #0]
 800d652:	89a3      	ldrh	r3, [r4, #12]
 800d654:	f043 0308 	orr.w	r3, r3, #8
 800d658:	81a3      	strh	r3, [r4, #12]
 800d65a:	6923      	ldr	r3, [r4, #16]
 800d65c:	b94b      	cbnz	r3, 800d672 <__swsetup_r+0x7a>
 800d65e:	89a3      	ldrh	r3, [r4, #12]
 800d660:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d668:	d003      	beq.n	800d672 <__swsetup_r+0x7a>
 800d66a:	4621      	mov	r1, r4
 800d66c:	4628      	mov	r0, r5
 800d66e:	f000 f8c4 	bl	800d7fa <__smakebuf_r>
 800d672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d676:	f013 0201 	ands.w	r2, r3, #1
 800d67a:	d00a      	beq.n	800d692 <__swsetup_r+0x9a>
 800d67c:	2200      	movs	r2, #0
 800d67e:	60a2      	str	r2, [r4, #8]
 800d680:	6962      	ldr	r2, [r4, #20]
 800d682:	4252      	negs	r2, r2
 800d684:	61a2      	str	r2, [r4, #24]
 800d686:	6922      	ldr	r2, [r4, #16]
 800d688:	b942      	cbnz	r2, 800d69c <__swsetup_r+0xa4>
 800d68a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d68e:	d1c5      	bne.n	800d61c <__swsetup_r+0x24>
 800d690:	bd38      	pop	{r3, r4, r5, pc}
 800d692:	0799      	lsls	r1, r3, #30
 800d694:	bf58      	it	pl
 800d696:	6962      	ldrpl	r2, [r4, #20]
 800d698:	60a2      	str	r2, [r4, #8]
 800d69a:	e7f4      	b.n	800d686 <__swsetup_r+0x8e>
 800d69c:	2000      	movs	r0, #0
 800d69e:	e7f7      	b.n	800d690 <__swsetup_r+0x98>
 800d6a0:	2000010c 	.word	0x2000010c

0800d6a4 <_raise_r>:
 800d6a4:	291f      	cmp	r1, #31
 800d6a6:	b538      	push	{r3, r4, r5, lr}
 800d6a8:	4605      	mov	r5, r0
 800d6aa:	460c      	mov	r4, r1
 800d6ac:	d904      	bls.n	800d6b8 <_raise_r+0x14>
 800d6ae:	2316      	movs	r3, #22
 800d6b0:	6003      	str	r3, [r0, #0]
 800d6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b6:	bd38      	pop	{r3, r4, r5, pc}
 800d6b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d6ba:	b112      	cbz	r2, 800d6c2 <_raise_r+0x1e>
 800d6bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d6c0:	b94b      	cbnz	r3, 800d6d6 <_raise_r+0x32>
 800d6c2:	4628      	mov	r0, r5
 800d6c4:	f000 f830 	bl	800d728 <_getpid_r>
 800d6c8:	4622      	mov	r2, r4
 800d6ca:	4601      	mov	r1, r0
 800d6cc:	4628      	mov	r0, r5
 800d6ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6d2:	f000 b817 	b.w	800d704 <_kill_r>
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d00a      	beq.n	800d6f0 <_raise_r+0x4c>
 800d6da:	1c59      	adds	r1, r3, #1
 800d6dc:	d103      	bne.n	800d6e6 <_raise_r+0x42>
 800d6de:	2316      	movs	r3, #22
 800d6e0:	6003      	str	r3, [r0, #0]
 800d6e2:	2001      	movs	r0, #1
 800d6e4:	e7e7      	b.n	800d6b6 <_raise_r+0x12>
 800d6e6:	2100      	movs	r1, #0
 800d6e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	4798      	blx	r3
 800d6f0:	2000      	movs	r0, #0
 800d6f2:	e7e0      	b.n	800d6b6 <_raise_r+0x12>

0800d6f4 <raise>:
 800d6f4:	4b02      	ldr	r3, [pc, #8]	@ (800d700 <raise+0xc>)
 800d6f6:	4601      	mov	r1, r0
 800d6f8:	6818      	ldr	r0, [r3, #0]
 800d6fa:	f7ff bfd3 	b.w	800d6a4 <_raise_r>
 800d6fe:	bf00      	nop
 800d700:	2000010c 	.word	0x2000010c

0800d704 <_kill_r>:
 800d704:	b538      	push	{r3, r4, r5, lr}
 800d706:	4d07      	ldr	r5, [pc, #28]	@ (800d724 <_kill_r+0x20>)
 800d708:	2300      	movs	r3, #0
 800d70a:	4604      	mov	r4, r0
 800d70c:	4608      	mov	r0, r1
 800d70e:	4611      	mov	r1, r2
 800d710:	602b      	str	r3, [r5, #0]
 800d712:	f7f5 ff0d 	bl	8003530 <_kill>
 800d716:	1c43      	adds	r3, r0, #1
 800d718:	d102      	bne.n	800d720 <_kill_r+0x1c>
 800d71a:	682b      	ldr	r3, [r5, #0]
 800d71c:	b103      	cbz	r3, 800d720 <_kill_r+0x1c>
 800d71e:	6023      	str	r3, [r4, #0]
 800d720:	bd38      	pop	{r3, r4, r5, pc}
 800d722:	bf00      	nop
 800d724:	20002234 	.word	0x20002234

0800d728 <_getpid_r>:
 800d728:	f7f5 befa 	b.w	8003520 <_getpid>

0800d72c <memcpy>:
 800d72c:	440a      	add	r2, r1
 800d72e:	4291      	cmp	r1, r2
 800d730:	f100 33ff 	add.w	r3, r0, #4294967295
 800d734:	d100      	bne.n	800d738 <memcpy+0xc>
 800d736:	4770      	bx	lr
 800d738:	b510      	push	{r4, lr}
 800d73a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d73e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d742:	4291      	cmp	r1, r2
 800d744:	d1f9      	bne.n	800d73a <memcpy+0xe>
 800d746:	bd10      	pop	{r4, pc}

0800d748 <_calloc_r>:
 800d748:	b570      	push	{r4, r5, r6, lr}
 800d74a:	fba1 5402 	umull	r5, r4, r1, r2
 800d74e:	b934      	cbnz	r4, 800d75e <_calloc_r+0x16>
 800d750:	4629      	mov	r1, r5
 800d752:	f7fd fc79 	bl	800b048 <_malloc_r>
 800d756:	4606      	mov	r6, r0
 800d758:	b928      	cbnz	r0, 800d766 <_calloc_r+0x1e>
 800d75a:	4630      	mov	r0, r6
 800d75c:	bd70      	pop	{r4, r5, r6, pc}
 800d75e:	220c      	movs	r2, #12
 800d760:	6002      	str	r2, [r0, #0]
 800d762:	2600      	movs	r6, #0
 800d764:	e7f9      	b.n	800d75a <_calloc_r+0x12>
 800d766:	462a      	mov	r2, r5
 800d768:	4621      	mov	r1, r4
 800d76a:	f7fe fa66 	bl	800bc3a <memset>
 800d76e:	e7f4      	b.n	800d75a <_calloc_r+0x12>

0800d770 <__ascii_mbtowc>:
 800d770:	b082      	sub	sp, #8
 800d772:	b901      	cbnz	r1, 800d776 <__ascii_mbtowc+0x6>
 800d774:	a901      	add	r1, sp, #4
 800d776:	b142      	cbz	r2, 800d78a <__ascii_mbtowc+0x1a>
 800d778:	b14b      	cbz	r3, 800d78e <__ascii_mbtowc+0x1e>
 800d77a:	7813      	ldrb	r3, [r2, #0]
 800d77c:	600b      	str	r3, [r1, #0]
 800d77e:	7812      	ldrb	r2, [r2, #0]
 800d780:	1e10      	subs	r0, r2, #0
 800d782:	bf18      	it	ne
 800d784:	2001      	movne	r0, #1
 800d786:	b002      	add	sp, #8
 800d788:	4770      	bx	lr
 800d78a:	4610      	mov	r0, r2
 800d78c:	e7fb      	b.n	800d786 <__ascii_mbtowc+0x16>
 800d78e:	f06f 0001 	mvn.w	r0, #1
 800d792:	e7f8      	b.n	800d786 <__ascii_mbtowc+0x16>

0800d794 <__ascii_wctomb>:
 800d794:	4603      	mov	r3, r0
 800d796:	4608      	mov	r0, r1
 800d798:	b141      	cbz	r1, 800d7ac <__ascii_wctomb+0x18>
 800d79a:	2aff      	cmp	r2, #255	@ 0xff
 800d79c:	d904      	bls.n	800d7a8 <__ascii_wctomb+0x14>
 800d79e:	228a      	movs	r2, #138	@ 0x8a
 800d7a0:	601a      	str	r2, [r3, #0]
 800d7a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d7a6:	4770      	bx	lr
 800d7a8:	700a      	strb	r2, [r1, #0]
 800d7aa:	2001      	movs	r0, #1
 800d7ac:	4770      	bx	lr

0800d7ae <__swhatbuf_r>:
 800d7ae:	b570      	push	{r4, r5, r6, lr}
 800d7b0:	460c      	mov	r4, r1
 800d7b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7b6:	2900      	cmp	r1, #0
 800d7b8:	b096      	sub	sp, #88	@ 0x58
 800d7ba:	4615      	mov	r5, r2
 800d7bc:	461e      	mov	r6, r3
 800d7be:	da0d      	bge.n	800d7dc <__swhatbuf_r+0x2e>
 800d7c0:	89a3      	ldrh	r3, [r4, #12]
 800d7c2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d7c6:	f04f 0100 	mov.w	r1, #0
 800d7ca:	bf14      	ite	ne
 800d7cc:	2340      	movne	r3, #64	@ 0x40
 800d7ce:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d7d2:	2000      	movs	r0, #0
 800d7d4:	6031      	str	r1, [r6, #0]
 800d7d6:	602b      	str	r3, [r5, #0]
 800d7d8:	b016      	add	sp, #88	@ 0x58
 800d7da:	bd70      	pop	{r4, r5, r6, pc}
 800d7dc:	466a      	mov	r2, sp
 800d7de:	f000 f849 	bl	800d874 <_fstat_r>
 800d7e2:	2800      	cmp	r0, #0
 800d7e4:	dbec      	blt.n	800d7c0 <__swhatbuf_r+0x12>
 800d7e6:	9901      	ldr	r1, [sp, #4]
 800d7e8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d7ec:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d7f0:	4259      	negs	r1, r3
 800d7f2:	4159      	adcs	r1, r3
 800d7f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d7f8:	e7eb      	b.n	800d7d2 <__swhatbuf_r+0x24>

0800d7fa <__smakebuf_r>:
 800d7fa:	898b      	ldrh	r3, [r1, #12]
 800d7fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7fe:	079d      	lsls	r5, r3, #30
 800d800:	4606      	mov	r6, r0
 800d802:	460c      	mov	r4, r1
 800d804:	d507      	bpl.n	800d816 <__smakebuf_r+0x1c>
 800d806:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d80a:	6023      	str	r3, [r4, #0]
 800d80c:	6123      	str	r3, [r4, #16]
 800d80e:	2301      	movs	r3, #1
 800d810:	6163      	str	r3, [r4, #20]
 800d812:	b003      	add	sp, #12
 800d814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d816:	ab01      	add	r3, sp, #4
 800d818:	466a      	mov	r2, sp
 800d81a:	f7ff ffc8 	bl	800d7ae <__swhatbuf_r>
 800d81e:	9f00      	ldr	r7, [sp, #0]
 800d820:	4605      	mov	r5, r0
 800d822:	4639      	mov	r1, r7
 800d824:	4630      	mov	r0, r6
 800d826:	f7fd fc0f 	bl	800b048 <_malloc_r>
 800d82a:	b948      	cbnz	r0, 800d840 <__smakebuf_r+0x46>
 800d82c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d830:	059a      	lsls	r2, r3, #22
 800d832:	d4ee      	bmi.n	800d812 <__smakebuf_r+0x18>
 800d834:	f023 0303 	bic.w	r3, r3, #3
 800d838:	f043 0302 	orr.w	r3, r3, #2
 800d83c:	81a3      	strh	r3, [r4, #12]
 800d83e:	e7e2      	b.n	800d806 <__smakebuf_r+0xc>
 800d840:	89a3      	ldrh	r3, [r4, #12]
 800d842:	6020      	str	r0, [r4, #0]
 800d844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d848:	81a3      	strh	r3, [r4, #12]
 800d84a:	9b01      	ldr	r3, [sp, #4]
 800d84c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d850:	b15b      	cbz	r3, 800d86a <__smakebuf_r+0x70>
 800d852:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d856:	4630      	mov	r0, r6
 800d858:	f000 f81e 	bl	800d898 <_isatty_r>
 800d85c:	b128      	cbz	r0, 800d86a <__smakebuf_r+0x70>
 800d85e:	89a3      	ldrh	r3, [r4, #12]
 800d860:	f023 0303 	bic.w	r3, r3, #3
 800d864:	f043 0301 	orr.w	r3, r3, #1
 800d868:	81a3      	strh	r3, [r4, #12]
 800d86a:	89a3      	ldrh	r3, [r4, #12]
 800d86c:	431d      	orrs	r5, r3
 800d86e:	81a5      	strh	r5, [r4, #12]
 800d870:	e7cf      	b.n	800d812 <__smakebuf_r+0x18>
	...

0800d874 <_fstat_r>:
 800d874:	b538      	push	{r3, r4, r5, lr}
 800d876:	4d07      	ldr	r5, [pc, #28]	@ (800d894 <_fstat_r+0x20>)
 800d878:	2300      	movs	r3, #0
 800d87a:	4604      	mov	r4, r0
 800d87c:	4608      	mov	r0, r1
 800d87e:	4611      	mov	r1, r2
 800d880:	602b      	str	r3, [r5, #0]
 800d882:	f7f5 fe99 	bl	80035b8 <_fstat>
 800d886:	1c43      	adds	r3, r0, #1
 800d888:	d102      	bne.n	800d890 <_fstat_r+0x1c>
 800d88a:	682b      	ldr	r3, [r5, #0]
 800d88c:	b103      	cbz	r3, 800d890 <_fstat_r+0x1c>
 800d88e:	6023      	str	r3, [r4, #0]
 800d890:	bd38      	pop	{r3, r4, r5, pc}
 800d892:	bf00      	nop
 800d894:	20002234 	.word	0x20002234

0800d898 <_isatty_r>:
 800d898:	b538      	push	{r3, r4, r5, lr}
 800d89a:	4d06      	ldr	r5, [pc, #24]	@ (800d8b4 <_isatty_r+0x1c>)
 800d89c:	2300      	movs	r3, #0
 800d89e:	4604      	mov	r4, r0
 800d8a0:	4608      	mov	r0, r1
 800d8a2:	602b      	str	r3, [r5, #0]
 800d8a4:	f7f5 fe98 	bl	80035d8 <_isatty>
 800d8a8:	1c43      	adds	r3, r0, #1
 800d8aa:	d102      	bne.n	800d8b2 <_isatty_r+0x1a>
 800d8ac:	682b      	ldr	r3, [r5, #0]
 800d8ae:	b103      	cbz	r3, 800d8b2 <_isatty_r+0x1a>
 800d8b0:	6023      	str	r3, [r4, #0]
 800d8b2:	bd38      	pop	{r3, r4, r5, pc}
 800d8b4:	20002234 	.word	0x20002234

0800d8b8 <_init>:
 800d8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ba:	bf00      	nop
 800d8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8be:	bc08      	pop	{r3}
 800d8c0:	469e      	mov	lr, r3
 800d8c2:	4770      	bx	lr

0800d8c4 <_fini>:
 800d8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8c6:	bf00      	nop
 800d8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ca:	bc08      	pop	{r3}
 800d8cc:	469e      	mov	lr, r3
 800d8ce:	4770      	bx	lr
