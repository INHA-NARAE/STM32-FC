
Plane.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f05c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800f1f0  0800f1f0  000101f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f63c  0800f63c  000112c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f63c  0800f63c  0001063c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f644  0800f644  000112c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f644  0800f644  00010644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f648  0800f648  00010648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800f64c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000112c4  2**0
                  CONTENTS
 10 .bss          00001f70  200002c4  200002c4  000112c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002234  20002234  000112c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000112c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018d5b  00000000  00000000  000112f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000053ea  00000000  00000000  0002a04f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016d0  00000000  00000000  0002f440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010cc  00000000  00000000  00030b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ab18  00000000  00000000  00031bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fda1  00000000  00000000  0003c6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4094  00000000  00000000  0005c495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00140529  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a8c  00000000  00000000  0014056c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00146ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f1d4 	.word	0x0800f1d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800f1d4 	.word	0x0800f1d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	601a      	str	r2, [r3, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(const SPI_TypeDef *SPIx)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f44:	2b40      	cmp	r3, #64	@ 0x40
 8000f46:	d101      	bne.n	8000f4c <LL_SPI_IsEnabled+0x18>
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e000      	b.n	8000f4e <LL_SPI_IsEnabled+0x1a>
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d101      	bne.n	8000f72 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d101      	bne.n	8000f98 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f94:	2301      	movs	r3, #1
 8000f96:	e000      	b.n	8000f9a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	330c      	adds	r3, #12
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b2db      	uxtb	r3, r3
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b085      	sub	sp, #20
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	330c      	adds	r3, #12
 8000fd2:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	78fa      	ldrb	r2, [r7, #3]
 8000fd8:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	619a      	str	r2, [r3, #24]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	041a      	lsls	r2, r3, #16
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	619a      	str	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <ICM42688_Initialization>:
 * @detail SPI 연결 수행, 감도 설정, offset 제거
 * @retval 0 : 완료
 * @retval 1 : 센서 없음
 */
int ICM42688_Initialization(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
	uint8_t who_am_i = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001034:	463b      	mov	r3, r7
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	809a      	strh	r2, [r3, #4]

	if(!LL_SPI_IsEnabled(SPI1)){
 800103c:	4821      	ldr	r0, [pc, #132]	@ (80010c4 <ICM42688_Initialization+0xa4>)
 800103e:	f7ff ff79 	bl	8000f34 <LL_SPI_IsEnabled>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d102      	bne.n	800104e <ICM42688_Initialization+0x2e>
		LL_SPI_Enable(SPI1);
 8001048:	481e      	ldr	r0, [pc, #120]	@ (80010c4 <ICM42688_Initialization+0xa4>)
 800104a:	f7ff ff63 	bl	8000f14 <LL_SPI_Enable>
	}
	CHIP_DESELECT();
 800104e:	f000 f9cf 	bl	80013f0 <CHIP_DESELECT>

	// Check
	who_am_i = ICM42688_Readbyte(WHO_AM_I);
 8001052:	2075      	movs	r0, #117	@ 0x75
 8001054:	f000 f9f8 	bl	8001448 <ICM42688_Readbyte>
 8001058:	4603      	mov	r3, r0
 800105a:	73fb      	strb	r3, [r7, #15]
	if(who_am_i != 0x47)
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	2b47      	cmp	r3, #71	@ 0x47
 8001060:	d001      	beq.n	8001066 <ICM42688_Initialization+0x46>
	{
		return 1;
 8001062:	2301      	movs	r3, #1
 8001064:	e02a      	b.n	80010bc <ICM42688_Initialization+0x9c>
	}

	// PWR_MGMT0
	ICM42688_Writebyte(PWR_MGMT0, 0x0F); // Temp on, ACC, GYRO LPF Mode
 8001066:	210f      	movs	r1, #15
 8001068:	204e      	movs	r0, #78	@ 0x4e
 800106a:	f000 fa2f 	bl	80014cc <ICM42688_Writebyte>
	HAL_Delay(50);
 800106e:	2032      	movs	r0, #50	@ 0x32
 8001070:	f003 fecc 	bl	8004e0c <HAL_Delay>

	// GYRO_CONFIG0
	ICM42688_Writebyte(GYRO_CONFIG0, 0x26); // Gyro sensitivity 1000 dps, 1kHz
 8001074:	2126      	movs	r1, #38	@ 0x26
 8001076:	204f      	movs	r0, #79	@ 0x4f
 8001078:	f000 fa28 	bl	80014cc <ICM42688_Writebyte>
	HAL_Delay(50);
 800107c:	2032      	movs	r0, #50	@ 0x32
 800107e:	f003 fec5 	bl	8004e0c <HAL_Delay>
	ICM42688_Writebyte(GYRO_CONFIG1, 0x00); // Gyro temp DLPF 4kHz, UI Filter 1st, 	DEC2_M2 reserved
 8001082:	2100      	movs	r1, #0
 8001084:	2051      	movs	r0, #81	@ 0x51
 8001086:	f000 fa21 	bl	80014cc <ICM42688_Writebyte>
	HAL_Delay(50);
 800108a:	2032      	movs	r0, #50	@ 0x32
 800108c:	f003 febe 	bl	8004e0c <HAL_Delay>

	ICM42688_Writebyte(ACCEL_CONFIG0, 0x46); // Acc sensitivity 4g, 1kHz
 8001090:	2146      	movs	r1, #70	@ 0x46
 8001092:	2050      	movs	r0, #80	@ 0x50
 8001094:	f000 fa1a 	bl	80014cc <ICM42688_Writebyte>
	HAL_Delay(50);
 8001098:	2032      	movs	r0, #50	@ 0x32
 800109a:	f003 feb7 	bl	8004e0c <HAL_Delay>
	ICM42688_Writebyte(ACCEL_CONFIG1, 0x00); // Acc UI Filter 1st, 	DEC2_M2 reserved
 800109e:	2100      	movs	r1, #0
 80010a0:	2053      	movs	r0, #83	@ 0x53
 80010a2:	f000 fa13 	bl	80014cc <ICM42688_Writebyte>
	HAL_Delay(50);
 80010a6:	2032      	movs	r0, #50	@ 0x32
 80010a8:	f003 feb0 	bl	8004e0c <HAL_Delay>

	ICM42688_Writebyte(GYRO_ACCEL_CONFIG0, 0x11); // LPF default max(400Hz,ODR)/4
 80010ac:	2111      	movs	r1, #17
 80010ae:	2052      	movs	r0, #82	@ 0x52
 80010b0:	f000 fa0c 	bl	80014cc <ICM42688_Writebyte>
	HAL_Delay(50);
 80010b4:	2032      	movs	r0, #50	@ 0x32
 80010b6:	f003 fea9 	bl	8004e0c <HAL_Delay>
//	ICM42688_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
//	HAL_Delay(50);


	// Remove Gyro X offset
	return 0; //OK
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40013000 	.word	0x40013000

080010c8 <ICM42688_GetData>:
 * @brief 데이터 로드
 * @detail 자이로, 가속도 및 온도 데이터 로딩, 물리량 변환
 * @retval 0 : 완료
 */
int ICM42688_GetData(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	Get6AxisRawData();
 80010cc:	f000 f808 	bl	80010e0 <Get6AxisRawData>

	ConvertGyroRaw2Dps();
 80010d0:	f000 f864 	bl	800119c <ConvertGyroRaw2Dps>
	ConvertAccRaw2G();
 80010d4:	f000 f904 	bl	80012e0 <ConvertAccRaw2G>

	return 0;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <Get6AxisRawData>:
/*
 * @brief 6축 데이터를 레지스터 레벨에서 로딩
 * @retval None
 */
void Get6AxisRawData()
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
	uint8_t data[14];

	ICM42688_Readbytes(TEMP_DATA1, 14, data);
 80010e6:	463b      	mov	r3, r7
 80010e8:	461a      	mov	r2, r3
 80010ea:	210e      	movs	r1, #14
 80010ec:	201d      	movs	r0, #29
 80010ee:	f000 f9c5 	bl	800147c <ICM42688_Readbytes>

	raw_imu.time_usec = system_time.time_unix_usec;
 80010f2:	4928      	ldr	r1, [pc, #160]	@ (8001194 <Get6AxisRawData+0xb4>)
 80010f4:	680a      	ldr	r2, [r1, #0]
 80010f6:	684b      	ldr	r3, [r1, #4]
 80010f8:	4927      	ldr	r1, [pc, #156]	@ (8001198 <Get6AxisRawData+0xb8>)
 80010fa:	600a      	str	r2, [r1, #0]
 80010fc:	604b      	str	r3, [r1, #4]
	raw_imu.temperature = (data[0] << 8) | data[1];
 80010fe:	783b      	ldrb	r3, [r7, #0]
 8001100:	b21b      	sxth	r3, r3
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	b21a      	sxth	r2, r3
 8001106:	787b      	ldrb	r3, [r7, #1]
 8001108:	b21b      	sxth	r3, r3
 800110a:	4313      	orrs	r3, r2
 800110c:	b21a      	sxth	r2, r3
 800110e:	4b22      	ldr	r3, [pc, #136]	@ (8001198 <Get6AxisRawData+0xb8>)
 8001110:	f8a3 201b 	strh.w	r2, [r3, #27]
	raw_imu.xacc = (data[2] << 8) | data[3];
 8001114:	78bb      	ldrb	r3, [r7, #2]
 8001116:	b21b      	sxth	r3, r3
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	b21a      	sxth	r2, r3
 800111c:	78fb      	ldrb	r3, [r7, #3]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b21a      	sxth	r2, r3
 8001124:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <Get6AxisRawData+0xb8>)
 8001126:	811a      	strh	r2, [r3, #8]
	raw_imu.yacc = (data[4] << 8) | data[5];
 8001128:	793b      	ldrb	r3, [r7, #4]
 800112a:	b21b      	sxth	r3, r3
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b21a      	sxth	r2, r3
 8001130:	797b      	ldrb	r3, [r7, #5]
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b21a      	sxth	r2, r3
 8001138:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <Get6AxisRawData+0xb8>)
 800113a:	815a      	strh	r2, [r3, #10]
	raw_imu.zacc = ((data[6] << 8) | data[7]);
 800113c:	79bb      	ldrb	r3, [r7, #6]
 800113e:	b21b      	sxth	r3, r3
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b21a      	sxth	r2, r3
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	b21b      	sxth	r3, r3
 8001148:	4313      	orrs	r3, r2
 800114a:	b21a      	sxth	r2, r3
 800114c:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <Get6AxisRawData+0xb8>)
 800114e:	819a      	strh	r2, [r3, #12]
	raw_imu.xgyro = ((data[8] << 8) | data[9]);
 8001150:	7a3b      	ldrb	r3, [r7, #8]
 8001152:	b21b      	sxth	r3, r3
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	b21a      	sxth	r2, r3
 8001158:	7a7b      	ldrb	r3, [r7, #9]
 800115a:	b21b      	sxth	r3, r3
 800115c:	4313      	orrs	r3, r2
 800115e:	b21a      	sxth	r2, r3
 8001160:	4b0d      	ldr	r3, [pc, #52]	@ (8001198 <Get6AxisRawData+0xb8>)
 8001162:	81da      	strh	r2, [r3, #14]
	raw_imu.ygyro = ((data[10] << 8) | data[11]);
 8001164:	7abb      	ldrb	r3, [r7, #10]
 8001166:	b21b      	sxth	r3, r3
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	b21a      	sxth	r2, r3
 800116c:	7afb      	ldrb	r3, [r7, #11]
 800116e:	b21b      	sxth	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <Get6AxisRawData+0xb8>)
 8001176:	821a      	strh	r2, [r3, #16]
	raw_imu.zgyro = ((data[12] << 8) | data[13]);
 8001178:	7b3b      	ldrb	r3, [r7, #12]
 800117a:	b21b      	sxth	r3, r3
 800117c:	021b      	lsls	r3, r3, #8
 800117e:	b21a      	sxth	r2, r3
 8001180:	7b7b      	ldrb	r3, [r7, #13]
 8001182:	b21b      	sxth	r3, r3
 8001184:	4313      	orrs	r3, r2
 8001186:	b21a      	sxth	r2, r3
 8001188:	4b03      	ldr	r3, [pc, #12]	@ (8001198 <Get6AxisRawData+0xb8>)
 800118a:	825a      	strh	r2, [r3, #18]

	return;
 800118c:	bf00      	nop
}
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000454 	.word	0x20000454
 8001198:	20000478 	.word	0x20000478

0800119c <ConvertGyroRaw2Dps>:
 * 			m degree/s
 * @parm none
 * @retval none
 */
void ConvertGyroRaw2Dps(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
	uint8_t gyro_reg_val = ICM42688_Readbyte(GYRO_CONFIG0);
 80011a2:	204f      	movs	r0, #79	@ 0x4f
 80011a4:	f000 f950 	bl	8001448 <ICM42688_Readbyte>
 80011a8:	4603      	mov	r3, r0
 80011aa:	70fb      	strb	r3, [r7, #3]
	uint8_t gyro_fs_sel = (gyro_reg_val >> 5) & 0x07;
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	70bb      	strb	r3, [r7, #2]

	float sensitivity;

	switch (gyro_fs_sel)
 80011b2:	78bb      	ldrb	r3, [r7, #2]
 80011b4:	2b07      	cmp	r3, #7
 80011b6:	d82b      	bhi.n	8001210 <ConvertGyroRaw2Dps+0x74>
 80011b8:	a201      	add	r2, pc, #4	@ (adr r2, 80011c0 <ConvertGyroRaw2Dps+0x24>)
 80011ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011be:	bf00      	nop
 80011c0:	080011e1 	.word	0x080011e1
 80011c4:	080011e7 	.word	0x080011e7
 80011c8:	080011ed 	.word	0x080011ed
 80011cc:	080011f3 	.word	0x080011f3
 80011d0:	080011f9 	.word	0x080011f9
 80011d4:	080011ff 	.word	0x080011ff
 80011d8:	08001205 	.word	0x08001205
 80011dc:	0800120b 	.word	0x0800120b
	{
	case 0: sensitivity = 16.4f; break;       // ±2000 dps
 80011e0:	4b33      	ldr	r3, [pc, #204]	@ (80012b0 <ConvertGyroRaw2Dps+0x114>)
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	e017      	b.n	8001216 <ConvertGyroRaw2Dps+0x7a>
	case 1: sensitivity = 32.8f; break;       // ±1000 dps
 80011e6:	4b33      	ldr	r3, [pc, #204]	@ (80012b4 <ConvertGyroRaw2Dps+0x118>)
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	e014      	b.n	8001216 <ConvertGyroRaw2Dps+0x7a>
	case 2: sensitivity = 65.5f; break;       // ±500 dps
 80011ec:	4b32      	ldr	r3, [pc, #200]	@ (80012b8 <ConvertGyroRaw2Dps+0x11c>)
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	e011      	b.n	8001216 <ConvertGyroRaw2Dps+0x7a>
	case 3: sensitivity = 131.0f; break;      // ±250 dps
 80011f2:	4b32      	ldr	r3, [pc, #200]	@ (80012bc <ConvertGyroRaw2Dps+0x120>)
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	e00e      	b.n	8001216 <ConvertGyroRaw2Dps+0x7a>
	case 4: sensitivity = 262.0f; break;      // ±125 dps
 80011f8:	4b31      	ldr	r3, [pc, #196]	@ (80012c0 <ConvertGyroRaw2Dps+0x124>)
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	e00b      	b.n	8001216 <ConvertGyroRaw2Dps+0x7a>
	case 5: sensitivity = 524.3f; break;      // ±62.5 dps
 80011fe:	4b31      	ldr	r3, [pc, #196]	@ (80012c4 <ConvertGyroRaw2Dps+0x128>)
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	e008      	b.n	8001216 <ConvertGyroRaw2Dps+0x7a>
	case 6: sensitivity = 1048.6f; break;     // ±31.25 dps
 8001204:	4b30      	ldr	r3, [pc, #192]	@ (80012c8 <ConvertGyroRaw2Dps+0x12c>)
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	e005      	b.n	8001216 <ConvertGyroRaw2Dps+0x7a>
	case 7: sensitivity = 2097.2f; break;     // ±15.625 dps
 800120a:	4b30      	ldr	r3, [pc, #192]	@ (80012cc <ConvertGyroRaw2Dps+0x130>)
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	e002      	b.n	8001216 <ConvertGyroRaw2Dps+0x7a>
	default: sensitivity = 16.4f; break;      // fallback: ±2000 dps
 8001210:	4b27      	ldr	r3, [pc, #156]	@ (80012b0 <ConvertGyroRaw2Dps+0x114>)
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	bf00      	nop
	}

	scaled_imu.time_boot_ms = system_time.time_boot_ms;
 8001216:	4b2e      	ldr	r3, [pc, #184]	@ (80012d0 <ConvertGyroRaw2Dps+0x134>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	4a2e      	ldr	r2, [pc, #184]	@ (80012d4 <ConvertGyroRaw2Dps+0x138>)
 800121c:	6013      	str	r3, [r2, #0]

	// m degree
	scaled_imu.xgyro = (float)raw_imu.xgyro / sensitivity * 1000;
 800121e:	4b2e      	ldr	r3, [pc, #184]	@ (80012d8 <ConvertGyroRaw2Dps+0x13c>)
 8001220:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001224:	b21b      	sxth	r3, r3
 8001226:	ee07 3a90 	vmov	s15, r3
 800122a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800122e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001236:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80012dc <ConvertGyroRaw2Dps+0x140>
 800123a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800123e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001242:	ee17 3a90 	vmov	r3, s15
 8001246:	b21a      	sxth	r2, r3
 8001248:	4b22      	ldr	r3, [pc, #136]	@ (80012d4 <ConvertGyroRaw2Dps+0x138>)
 800124a:	815a      	strh	r2, [r3, #10]
	scaled_imu.ygyro = (float)raw_imu.ygyro / sensitivity * 1000;
 800124c:	4b22      	ldr	r3, [pc, #136]	@ (80012d8 <ConvertGyroRaw2Dps+0x13c>)
 800124e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001252:	b21b      	sxth	r3, r3
 8001254:	ee07 3a90 	vmov	s15, r3
 8001258:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800125c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001264:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80012dc <ConvertGyroRaw2Dps+0x140>
 8001268:	ee67 7a87 	vmul.f32	s15, s15, s14
 800126c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001270:	ee17 3a90 	vmov	r3, s15
 8001274:	b21a      	sxth	r2, r3
 8001276:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <ConvertGyroRaw2Dps+0x138>)
 8001278:	819a      	strh	r2, [r3, #12]
	scaled_imu.zgyro = (float)raw_imu.zgyro / sensitivity * 1000;
 800127a:	4b17      	ldr	r3, [pc, #92]	@ (80012d8 <ConvertGyroRaw2Dps+0x13c>)
 800127c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001280:	b21b      	sxth	r3, r3
 8001282:	ee07 3a90 	vmov	s15, r3
 8001286:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800128a:	ed97 7a01 	vldr	s14, [r7, #4]
 800128e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001292:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80012dc <ConvertGyroRaw2Dps+0x140>
 8001296:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800129e:	ee17 3a90 	vmov	r3, s15
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <ConvertGyroRaw2Dps+0x138>)
 80012a6:	81da      	strh	r2, [r3, #14]

	return;
 80012a8:	bf00      	nop
}
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	41833333 	.word	0x41833333
 80012b4:	42033333 	.word	0x42033333
 80012b8:	42830000 	.word	0x42830000
 80012bc:	43030000 	.word	0x43030000
 80012c0:	43830000 	.word	0x43830000
 80012c4:	44031333 	.word	0x44031333
 80012c8:	44831333 	.word	0x44831333
 80012cc:	45031333 	.word	0x45031333
 80012d0:	20000454 	.word	0x20000454
 80012d4:	20000460 	.word	0x20000460
 80012d8:	20000478 	.word	0x20000478
 80012dc:	447a0000 	.word	0x447a0000

080012e0 <ConvertAccRaw2G>:
 * 			mG (Gauss)
 * @parm none
 * @retval none
 */
void ConvertAccRaw2G(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
	uint8_t acc_reg_val = ICM42688_Readbyte(ACCEL_CONFIG0);
 80012e6:	2050      	movs	r0, #80	@ 0x50
 80012e8:	f000 f8ae 	bl	8001448 <ICM42688_Readbyte>
 80012ec:	4603      	mov	r3, r0
 80012ee:	70fb      	strb	r3, [r7, #3]
	uint8_t acc_fs_sel = (acc_reg_val >> 5) & 0x07;
 80012f0:	78fb      	ldrb	r3, [r7, #3]
 80012f2:	095b      	lsrs	r3, r3, #5
 80012f4:	70bb      	strb	r3, [r7, #2]

	float sensitivity;

	switch (acc_fs_sel)
 80012f6:	78bb      	ldrb	r3, [r7, #2]
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d81b      	bhi.n	8001334 <ConvertAccRaw2G+0x54>
 80012fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001304 <ConvertAccRaw2G+0x24>)
 80012fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001302:	bf00      	nop
 8001304:	08001315 	.word	0x08001315
 8001308:	0800131d 	.word	0x0800131d
 800130c:	08001325 	.word	0x08001325
 8001310:	0800132d 	.word	0x0800132d
	{
	case 0: sensitivity = 2048.0f; break;    // ±16g
 8001314:	f04f 438a 	mov.w	r3, #1157627904	@ 0x45000000
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	e00f      	b.n	800133c <ConvertAccRaw2G+0x5c>
	case 1: sensitivity = 4096.0f; break;    // ±8g
 800131c:	f04f 438b 	mov.w	r3, #1166016512	@ 0x45800000
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	e00b      	b.n	800133c <ConvertAccRaw2G+0x5c>
	case 2: sensitivity = 8192.0f; break;    // ±4g
 8001324:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	e007      	b.n	800133c <ConvertAccRaw2G+0x5c>
	case 3: sensitivity = 16384.0f; break;   // ±2g
 800132c:	f04f 438d 	mov.w	r3, #1182793728	@ 0x46800000
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	e003      	b.n	800133c <ConvertAccRaw2G+0x5c>
	default: sensitivity = 2048.0f; break;   // fallback: ±16g
 8001334:	f04f 438a 	mov.w	r3, #1157627904	@ 0x45000000
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	bf00      	nop
	}

	// mG
	scaled_imu.xacc = (float)raw_imu.xacc / sensitivity * 1000;
 800133c:	4b24      	ldr	r3, [pc, #144]	@ (80013d0 <ConvertAccRaw2G+0xf0>)
 800133e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001342:	b21b      	sxth	r3, r3
 8001344:	ee07 3a90 	vmov	s15, r3
 8001348:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800134c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001354:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80013d4 <ConvertAccRaw2G+0xf4>
 8001358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001360:	ee17 3a90 	vmov	r3, s15
 8001364:	b21a      	sxth	r2, r3
 8001366:	4b1c      	ldr	r3, [pc, #112]	@ (80013d8 <ConvertAccRaw2G+0xf8>)
 8001368:	809a      	strh	r2, [r3, #4]
	scaled_imu.yacc = (float)raw_imu.yacc / sensitivity * 1000;
 800136a:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <ConvertAccRaw2G+0xf0>)
 800136c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001370:	b21b      	sxth	r3, r3
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800137a:	ed97 7a01 	vldr	s14, [r7, #4]
 800137e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001382:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80013d4 <ConvertAccRaw2G+0xf4>
 8001386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800138a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800138e:	ee17 3a90 	vmov	r3, s15
 8001392:	b21a      	sxth	r2, r3
 8001394:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <ConvertAccRaw2G+0xf8>)
 8001396:	80da      	strh	r2, [r3, #6]
	scaled_imu.zacc = (float)raw_imu.zacc / sensitivity * 1000;
 8001398:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <ConvertAccRaw2G+0xf0>)
 800139a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800139e:	b21b      	sxth	r3, r3
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80013ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b0:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80013d4 <ConvertAccRaw2G+0xf4>
 80013b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013bc:	ee17 3a90 	vmov	r3, s15
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <ConvertAccRaw2G+0xf8>)
 80013c4:	811a      	strh	r2, [r3, #8]

	return;
 80013c6:	bf00      	nop
}
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000478 	.word	0x20000478
 80013d4:	447a0000 	.word	0x447a0000
 80013d8:	20000460 	.word	0x20000460

080013dc <CHIP_SELECT>:


/* Functions 2 ---------------------------------------------------------------*/
inline static void CHIP_SELECT(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GYRO1_NSS_GPIO_Port, GYRO1_NSS_Pin);
 80013e0:	2120      	movs	r1, #32
 80013e2:	4802      	ldr	r0, [pc, #8]	@ (80013ec <CHIP_SELECT+0x10>)
 80013e4:	f7ff fe0d 	bl	8001002 <LL_GPIO_ResetOutputPin>
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000

080013f0 <CHIP_DESELECT>:

inline static void CHIP_DESELECT(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GYRO1_NSS_GPIO_Port, GYRO1_NSS_Pin);
 80013f4:	2120      	movs	r1, #32
 80013f6:	4802      	ldr	r0, [pc, #8]	@ (8001400 <CHIP_DESELECT+0x10>)
 80013f8:	f7ff fdf5 	bl	8000fe6 <LL_GPIO_SetOutputPin>
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021000 	.word	0x40021000

08001404 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(SPI1)==RESET);
 800140e:	bf00      	nop
 8001410:	480c      	ldr	r0, [pc, #48]	@ (8001444 <SPI1_SendByte+0x40>)
 8001412:	f7ff fdb5 	bl	8000f80 <LL_SPI_IsActiveFlag_TXE>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f9      	beq.n	8001410 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(SPI1, data);
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	4619      	mov	r1, r3
 8001420:	4808      	ldr	r0, [pc, #32]	@ (8001444 <SPI1_SendByte+0x40>)
 8001422:	f7ff fdce 	bl	8000fc2 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(SPI1)==RESET);
 8001426:	bf00      	nop
 8001428:	4806      	ldr	r0, [pc, #24]	@ (8001444 <SPI1_SendByte+0x40>)
 800142a:	f7ff fd96 	bl	8000f5a <LL_SPI_IsActiveFlag_RXNE>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f9      	beq.n	8001428 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(SPI1);
 8001434:	4803      	ldr	r0, [pc, #12]	@ (8001444 <SPI1_SendByte+0x40>)
 8001436:	f7ff fdb6 	bl	8000fa6 <LL_SPI_ReceiveData8>
 800143a:	4603      	mov	r3, r0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40013000 	.word	0x40013000

08001448 <ICM42688_Readbyte>:

uint8_t ICM42688_Readbyte(uint8_t reg_addr)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT();
 8001452:	f7ff ffc3 	bl	80013dc <CHIP_SELECT>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800145c:	b2db      	uxtb	r3, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ffd0 	bl	8001404 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001464:	2000      	movs	r0, #0
 8001466:	f7ff ffcd 	bl	8001404 <SPI1_SendByte>
 800146a:	4603      	mov	r3, r0
 800146c:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT();
 800146e:	f7ff ffbf 	bl	80013f0 <CHIP_DESELECT>
	
	return val;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <ICM42688_Readbytes>:

void ICM42688_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	603a      	str	r2, [r7, #0]
 8001486:	71fb      	strb	r3, [r7, #7]
 8001488:	460b      	mov	r3, r1
 800148a:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT();
 8001490:	f7ff ffa4 	bl	80013dc <CHIP_SELECT>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800149a:	b2db      	uxtb	r3, r3
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ffb1 	bl	8001404 <SPI1_SendByte>
	while(i < len)
 80014a2:	e009      	b.n	80014b8 <ICM42688_Readbytes+0x3c>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	60fa      	str	r2, [r7, #12]
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	18d4      	adds	r4, r2, r3
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff ffa8 	bl	8001404 <SPI1_SendByte>
 80014b4:	4603      	mov	r3, r0
 80014b6:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80014b8:	79bb      	ldrb	r3, [r7, #6]
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d3f1      	bcc.n	80014a4 <ICM42688_Readbytes+0x28>
	}
	CHIP_DESELECT();
 80014c0:	f7ff ff96 	bl	80013f0 <CHIP_DESELECT>
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd90      	pop	{r4, r7, pc}

080014cc <ICM42688_Writebyte>:

void ICM42688_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	460a      	mov	r2, r1
 80014d6:	71fb      	strb	r3, [r7, #7]
 80014d8:	4613      	mov	r3, r2
 80014da:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT();
 80014dc:	f7ff ff7e 	bl	80013dc <CHIP_SELECT>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff8b 	bl	8001404 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80014ee:	79bb      	ldrb	r3, [r7, #6]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff87 	bl	8001404 <SPI1_SendByte>
	CHIP_DESELECT();
 80014f6:	f7ff ff7b 	bl	80013f0 <CHIP_DESELECT>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <LL_GPIO_SetOutputPin>:
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	619a      	str	r2, [r3, #24]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <LL_GPIO_ResetOutputPin>:
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	041a      	lsls	r2, r3, #16
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	619a      	str	r2, [r3, #24]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <IMU_Initialization>:
 * @detail IMU 1 - ICM42688P : GYRO, ACC, TEMP
 * @parm none
 * @retval 0
 */
int IMU_Initialization(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8001540:	2102      	movs	r1, #2
 8001542:	4806      	ldr	r0, [pc, #24]	@ (800155c <IMU_Initialization+0x20>)
 8001544:	f7ff ffdd 	bl	8001502 <LL_GPIO_SetOutputPin>

	ICM42688_Initialization();
 8001548:	f7ff fd6a 	bl	8001020 <ICM42688_Initialization>

	LL_GPIO_ResetOutputPin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 800154c:	2102      	movs	r1, #2
 800154e:	4803      	ldr	r0, [pc, #12]	@ (800155c <IMU_Initialization+0x20>)
 8001550:	f7ff ffe5 	bl	800151e <LL_GPIO_ResetOutputPin>
	return 0;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000

08001560 <IMU_GetData>:
 * @detail SCALED_IMU(2,3)에 저장
 * @parm none
 * @retval none
 */
unsigned int IMU_GetData(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0

	// SCALED_IMU
	ICM42688_GetData();
 8001564:	f7ff fdb0 	bl	80010c8 <ICM42688_GetData>
	// SCALED_IMU3

//	ComplementaryFilter();
//	KalmanFilter();

	return 0;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	bd80      	pop	{r7, pc}

0800156e <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a1a      	ldr	r2, [r3, #32]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	621a      	str	r2, [r3, #32]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1a      	ldr	r2, [r3, #32]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	401a      	ands	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	621a      	str	r2, [r3, #32]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <BuzzerPlayInit>:
 * @brief 초기 알림
 * @detail 기본 점검 전 알림
 * @retval None
 */
void BuzzerPlayInit(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	TIM4->ARR = 21;
 80015b8:	4b14      	ldr	r3, [pc, #80]	@ (800160c <BuzzerPlayInit+0x58>)
 80015ba:	2215      	movs	r2, #21
 80015bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 80015be:	4b13      	ldr	r3, [pc, #76]	@ (800160c <BuzzerPlayInit+0x58>)
 80015c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c2:	4a12      	ldr	r2, [pc, #72]	@ (800160c <BuzzerPlayInit+0x58>)
 80015c4:	085b      	lsrs	r3, r3, #1
 80015c6:	63d3      	str	r3, [r2, #60]	@ 0x3c

	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 80015c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015cc:	480f      	ldr	r0, [pc, #60]	@ (800160c <BuzzerPlayInit+0x58>)
 80015ce:	f7ff ffce 	bl	800156e <LL_TIM_CC_EnableChannel>
	TIM4->PSC = 2000;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <BuzzerPlayInit+0x58>)
 80015d4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80015d8:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 80015da:	2064      	movs	r0, #100	@ 0x64
 80015dc:	f003 fc16 	bl	8004e0c <HAL_Delay>
	TIM4->PSC = 1500;
 80015e0:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <BuzzerPlayInit+0x58>)
 80015e2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80015e6:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 80015e8:	2064      	movs	r0, #100	@ 0x64
 80015ea:	f003 fc0f 	bl	8004e0c <HAL_Delay>
	TIM4->PSC = 1000;
 80015ee:	4b07      	ldr	r3, [pc, #28]	@ (800160c <BuzzerPlayInit+0x58>)
 80015f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015f4:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 80015f6:	2064      	movs	r0, #100	@ 0x64
 80015f8:	f003 fc08 	bl	8004e0c <HAL_Delay>

	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 80015fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001600:	4802      	ldr	r0, [pc, #8]	@ (800160c <BuzzerPlayInit+0x58>)
 8001602:	f7ff ffc5 	bl	8001590 <LL_TIM_CC_DisableChannel>
	return;
 8001606:	bf00      	nop
}
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40000800 	.word	0x40000800

08001610 <BuzzerPlayOneCycle>:
/*
 * @brief 점검 완료 알림
 * @retval None
 */
void BuzzerPlayOneCycle(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
	for (int i=0; i<8; i++){
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	e008      	b.n	800162e <BuzzerPlayOneCycle+0x1e>
		playNote(i, 150);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2196      	movs	r1, #150	@ 0x96
 8001622:	4618      	mov	r0, r3
 8001624:	f000 f82e 	bl	8001684 <playNote>
	for (int i=0; i<8; i++){
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3301      	adds	r3, #1
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b07      	cmp	r3, #7
 8001632:	ddf3      	ble.n	800161c <BuzzerPlayOneCycle+0xc>
	}
	return;
 8001634:	bf00      	nop
}
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <BuzzerEnableThrottleHigh>:


/* Functions (RC Alarm) ------------------------------------------------------*/
void BuzzerEnableThrottleHigh(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8001640:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001644:	4808      	ldr	r0, [pc, #32]	@ (8001668 <BuzzerEnableThrottleHigh+0x2c>)
 8001646:	f7ff ff92 	bl	800156e <LL_TIM_CC_EnableChannel>
	TIM4->ARR = 21;
 800164a:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <BuzzerEnableThrottleHigh+0x2c>)
 800164c:	2215      	movs	r2, #21
 800164e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 8001650:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <BuzzerEnableThrottleHigh+0x2c>)
 8001652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001654:	4a04      	ldr	r2, [pc, #16]	@ (8001668 <BuzzerEnableThrottleHigh+0x2c>)
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM4->PSC = 2000;
 800165a:	4b03      	ldr	r3, [pc, #12]	@ (8001668 <BuzzerEnableThrottleHigh+0x2c>)
 800165c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001660:	629a      	str	r2, [r3, #40]	@ 0x28

	return;
 8001662:	bf00      	nop
}
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40000800 	.word	0x40000800

0800166c <BuzzerDisableThrottleHigh>:

void BuzzerDisableThrottleHigh(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8001670:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001674:	4802      	ldr	r0, [pc, #8]	@ (8001680 <BuzzerDisableThrottleHigh+0x14>)
 8001676:	f7ff ff8b 	bl	8001590 <LL_TIM_CC_DisableChannel>
	return;
 800167a:	bf00      	nop
}
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40000800 	.word	0x40000800

08001684 <playNote>:


/* Functions 3 ----------------------------------------------------------------*/
void playNote(Note note, uint16_t time)
{
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	460a      	mov	r2, r1
 800168e:	71fb      	strb	r3, [r7, #7]
 8001690:	4613      	mov	r3, r2
 8001692:	80bb      	strh	r3, [r7, #4]
	TIM4->PSC = 4;
 8001694:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <playNote+0x78>)
 8001696:	2204      	movs	r2, #4
 8001698:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = APB1_CLOCKS/(TIM4->PSC)/tones[note];
 800169a:	4b18      	ldr	r3, [pc, #96]	@ (80016fc <playNote+0x78>)
 800169c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169e:	4a18      	ldr	r2, [pc, #96]	@ (8001700 <playNote+0x7c>)
 80016a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff2d 	bl	8000504 <__aeabi_ui2d>
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	4a15      	ldr	r2, [pc, #84]	@ (8001704 <playNote+0x80>)
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	4413      	add	r3, r2
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7ff f8c9 	bl	800084c <__aeabi_ddiv>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4c0f      	ldr	r4, [pc, #60]	@ (80016fc <playNote+0x78>)
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f7ff fa70 	bl	8000ba8 <__aeabi_d2uiz>
 80016c8:	4603      	mov	r3, r0
 80016ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 80016cc:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <playNote+0x78>)
 80016ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d0:	4a0a      	ldr	r2, [pc, #40]	@ (80016fc <playNote+0x78>)
 80016d2:	085b      	lsrs	r3, r3, #1
 80016d4:	63d3      	str	r3, [r2, #60]	@ 0x3c

	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 80016d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016da:	4808      	ldr	r0, [pc, #32]	@ (80016fc <playNote+0x78>)
 80016dc:	f7ff ff47 	bl	800156e <LL_TIM_CC_EnableChannel>

	HAL_Delay(time);
 80016e0:	88bb      	ldrh	r3, [r7, #4]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 fb92 	bl	8004e0c <HAL_Delay>
	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 80016e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016ec:	4803      	ldr	r0, [pc, #12]	@ (80016fc <playNote+0x78>)
 80016ee:	f7ff ff4f 	bl	8001590 <LL_TIM_CC_DisableChannel>
	return;
 80016f2:	bf00      	nop
}
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd90      	pop	{r4, r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40000800 	.word	0x40000800
 8001700:	0501bd00 	.word	0x0501bd00
 8001704:	0800f250 	.word	0x0800f250

08001708 <LL_GPIO_SetOutputPin>:
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	619a      	str	r2, [r3, #24]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <FS_mannualMode>:
#include <FC_Failsafe/Failsafe.h>

uint8_t fsFlag = 0;

void FS_mannualMode(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001728:	2101      	movs	r1, #1
 800172a:	4803      	ldr	r0, [pc, #12]	@ (8001738 <FS_mannualMode+0x14>)
 800172c:	f7ff ffec 	bl	8001708 <LL_GPIO_SetOutputPin>
	// RTH가 있는지 확인

	// RTH가 없으면 쓰로틀 끄고 서보 중립
	// 추후 원주 비행 구현
	SERVO_setFailsafe();
 8001730:	f001 fabe 	bl	8002cb0 <SERVO_setFailsafe>

	return;
 8001734:	bf00      	nop
}
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000

0800173c <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800174c:	2b80      	cmp	r3, #128	@ 0x80
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	460b      	mov	r3, r1
 800176c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800176e:	78fa      	ldrb	r2, [r7, #3]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	605a      	str	r2, [r3, #4]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <Log_Send>:
const uint8_t code = 0xFD;
uint16_t logType = 0;

/* Functions -----------------------------------------------------------------*/
int Log_Send()
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	static uint32_t previous_time = 0;

	// 10Hz 단위로 전송
	if(!(system_time.time_boot_ms - previous_time > 100)) return -1;
 8001784:	4b41      	ldr	r3, [pc, #260]	@ (800188c <Log_Send+0x10c>)
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	4b41      	ldr	r3, [pc, #260]	@ (8001890 <Log_Send+0x110>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	@ 0x64
 8001790:	d802      	bhi.n	8001798 <Log_Send+0x18>
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	e076      	b.n	8001886 <Log_Send+0x106>
	previous_time = system_time.time_boot_ms;
 8001798:	4b3c      	ldr	r3, [pc, #240]	@ (800188c <Log_Send+0x10c>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a3c      	ldr	r2, [pc, #240]	@ (8001890 <Log_Send+0x110>)
 800179e:	6013      	str	r3, [r2, #0]

	switch(logType)
 80017a0:	4b3c      	ldr	r3, [pc, #240]	@ (8001894 <Log_Send+0x114>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	3b1a      	subs	r3, #26
 80017a6:	2b27      	cmp	r3, #39	@ 0x27
 80017a8:	d86b      	bhi.n	8001882 <Log_Send+0x102>
 80017aa:	a201      	add	r2, pc, #4	@ (adr r2, 80017b0 <Log_Send+0x30>)
 80017ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b0:	08001851 	.word	0x08001851
 80017b4:	0800185b 	.word	0x0800185b
 80017b8:	08001883 	.word	0x08001883
 80017bc:	08001865 	.word	0x08001865
 80017c0:	08001883 	.word	0x08001883
 80017c4:	08001883 	.word	0x08001883
 80017c8:	08001883 	.word	0x08001883
 80017cc:	08001883 	.word	0x08001883
 80017d0:	08001883 	.word	0x08001883
 80017d4:	08001883 	.word	0x08001883
 80017d8:	0800186f 	.word	0x0800186f
 80017dc:	08001883 	.word	0x08001883
 80017e0:	08001883 	.word	0x08001883
 80017e4:	08001883 	.word	0x08001883
 80017e8:	08001883 	.word	0x08001883
 80017ec:	08001883 	.word	0x08001883
 80017f0:	08001883 	.word	0x08001883
 80017f4:	08001883 	.word	0x08001883
 80017f8:	08001883 	.word	0x08001883
 80017fc:	08001883 	.word	0x08001883
 8001800:	08001883 	.word	0x08001883
 8001804:	08001883 	.word	0x08001883
 8001808:	08001883 	.word	0x08001883
 800180c:	08001883 	.word	0x08001883
 8001810:	08001883 	.word	0x08001883
 8001814:	08001883 	.word	0x08001883
 8001818:	08001883 	.word	0x08001883
 800181c:	08001883 	.word	0x08001883
 8001820:	08001883 	.word	0x08001883
 8001824:	08001883 	.word	0x08001883
 8001828:	08001883 	.word	0x08001883
 800182c:	08001883 	.word	0x08001883
 8001830:	08001883 	.word	0x08001883
 8001834:	08001883 	.word	0x08001883
 8001838:	08001883 	.word	0x08001883
 800183c:	08001883 	.word	0x08001883
 8001840:	08001883 	.word	0x08001883
 8001844:	08001883 	.word	0x08001883
 8001848:	08001883 	.word	0x08001883
 800184c:	08001879 	.word	0x08001879
	{
	case 26: LOG_TRANSMIT(scaled_imu); break;
 8001850:	2118      	movs	r1, #24
 8001852:	4811      	ldr	r0, [pc, #68]	@ (8001898 <Log_Send+0x118>)
 8001854:	f000 f82a 	bl	80018ac <Log_transmit>
 8001858:	e014      	b.n	8001884 <Log_Send+0x104>
	case 27: LOG_TRANSMIT(raw_imu); break;
 800185a:	211d      	movs	r1, #29
 800185c:	480f      	ldr	r0, [pc, #60]	@ (800189c <Log_Send+0x11c>)
 800185e:	f000 f825 	bl	80018ac <Log_transmit>
 8001862:	e00f      	b.n	8001884 <Log_Send+0x104>
	case 29: LOG_TRANSMIT(scaled_pressure); break;
 8001864:	2110      	movs	r1, #16
 8001866:	480e      	ldr	r0, [pc, #56]	@ (80018a0 <Log_Send+0x120>)
 8001868:	f000 f820 	bl	80018ac <Log_transmit>
 800186c:	e00a      	b.n	8001884 <Log_Send+0x104>
	case 36: LOG_TRANSMIT(servo_output_raw); break;
 800186e:	2125      	movs	r1, #37	@ 0x25
 8001870:	480c      	ldr	r0, [pc, #48]	@ (80018a4 <Log_Send+0x124>)
 8001872:	f000 f81b 	bl	80018ac <Log_transmit>
 8001876:	e005      	b.n	8001884 <Log_Send+0x104>
	case 65: LOG_TRANSMIT(RC_channels); break;
 8001878:	212a      	movs	r1, #42	@ 0x2a
 800187a:	480b      	ldr	r0, [pc, #44]	@ (80018a8 <Log_Send+0x128>)
 800187c:	f000 f816 	bl	80018ac <Log_transmit>
 8001880:	e000      	b.n	8001884 <Log_Send+0x104>
	default: break;
 8001882:	bf00      	nop
	}
	return 0;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000454 	.word	0x20000454
 8001890:	200002e4 	.word	0x200002e4
 8001894:	200002e2 	.word	0x200002e2
 8001898:	20000460 	.word	0x20000460
 800189c:	20000478 	.word	0x20000478
 80018a0:	20000498 	.word	0x20000498
 80018a4:	200004a8 	.word	0x200004a8
 80018a8:	200004d0 	.word	0x200004d0

080018ac <Log_transmit>:
 * SRXL2.c 코드 정리
 * 	- readByte 내에 cal crc 수행 후 타입에 따라 리턴
 */
extern uint16_t calculate_crc(const uint8_t *data, uint8_t len);
int Log_transmit(uint8_t* p, uint8_t len)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	70fb      	strb	r3, [r7, #3]

    uint8_t packetLen = len+sizeof(uint8_t)*3;
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	3303      	adds	r3, #3
 80018bc:	74fb      	strb	r3, [r7, #19]
    uint8_t* packet = malloc(packetLen);
 80018be:	7cfb      	ldrb	r3, [r7, #19]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f00b f81d 	bl	800c900 <malloc>
 80018c6:	4603      	mov	r3, r0
 80018c8:	60fb      	str	r3, [r7, #12]

    memcpy(packet, &code, sizeof(uint8_t));
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	22fd      	movs	r2, #253	@ 0xfd
 80018ce:	701a      	strb	r2, [r3, #0]
    memcpy(packet + sizeof(uint8_t), p, len);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	3301      	adds	r3, #1
 80018d4:	78fa      	ldrb	r2, [r7, #3]
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4618      	mov	r0, r3
 80018da:	f00b fecc 	bl	800d676 <memcpy>

    uint16_t crc = calculate_crc(packet, packetLen);
 80018de:	7cfb      	ldrb	r3, [r7, #19]
 80018e0:	4619      	mov	r1, r3
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 fdb2 	bl	800244c <calculate_crc>
 80018e8:	4603      	mov	r3, r0
 80018ea:	817b      	strh	r3, [r7, #10]

    memcpy(packet + sizeof(uint8_t) + len, &crc, sizeof(uint16_t));
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	3301      	adds	r3, #1
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	4413      	add	r3, r2
 80018f4:	897a      	ldrh	r2, [r7, #10]
 80018f6:	801a      	strh	r2, [r3, #0]

	CDC_Transmit_FS(packet, packetLen);
 80018f8:	7cfb      	ldrb	r3, [r7, #19]
 80018fa:	4619      	mov	r1, r3
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f00a fb85 	bl	800c00c <CDC_Transmit_FS>

	for(int i=0; i<packetLen; i++)
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	e019      	b.n	800193c <Log_transmit+0x90>
	{
		while(!LL_USART_IsActiveFlag_TXE(USART2)){}
 8001908:	bf00      	nop
 800190a:	4812      	ldr	r0, [pc, #72]	@ (8001954 <Log_transmit+0xa8>)
 800190c:	f7ff ff16 	bl	800173c <LL_USART_IsActiveFlag_TXE>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f9      	beq.n	800190a <Log_transmit+0x5e>
		LL_USART_TransmitData8(USART2, packet[i]);
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	4619      	mov	r1, r3
 8001920:	480c      	ldr	r0, [pc, #48]	@ (8001954 <Log_transmit+0xa8>)
 8001922:	f7ff ff1e 	bl	8001762 <LL_USART_TransmitData8>
		LL_USART_TransmitData8(USART3, packet[i]);
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4413      	add	r3, r2
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	4619      	mov	r1, r3
 8001930:	4809      	ldr	r0, [pc, #36]	@ (8001958 <Log_transmit+0xac>)
 8001932:	f7ff ff16 	bl	8001762 <LL_USART_TransmitData8>
	for(int i=0; i<packetLen; i++)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3301      	adds	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	7cfb      	ldrb	r3, [r7, #19]
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	429a      	cmp	r2, r3
 8001942:	dbe1      	blt.n	8001908 <Log_transmit+0x5c>
	}

    free(packet);
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f00a ffe3 	bl	800c910 <free>

	return packetLen;
 800194a:	7cfb      	ldrb	r3, [r7, #19]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40004400 	.word	0x40004400
 8001958:	40004800 	.word	0x40004800

0800195c <USB_CDC_RxHandler>:


void USB_CDC_RxHandler(uint8_t* Buf, uint32_t Len)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
	if(Len<3 || Len > 255) return;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	2b02      	cmp	r3, #2
 800196a:	d92a      	bls.n	80019c2 <USB_CDC_RxHandler+0x66>
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	2bff      	cmp	r3, #255	@ 0xff
 8001970:	d827      	bhi.n	80019c2 <USB_CDC_RxHandler+0x66>
	if(Buf[0] != code) return;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	22fd      	movs	r2, #253	@ 0xfd
 8001978:	4293      	cmp	r3, r2
 800197a:	d124      	bne.n	80019c6 <USB_CDC_RxHandler+0x6a>

	uint16_t crc = ((uint16_t)Buf[Len -2] << 8 | Buf[Len -1]);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	3b02      	subs	r3, #2
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	b21b      	sxth	r3, r3
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	b21a      	sxth	r2, r3
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	3b01      	subs	r3, #1
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	440b      	add	r3, r1
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b21b      	sxth	r3, r3
 8001998:	4313      	orrs	r3, r2
 800199a:	b21b      	sxth	r3, r3
 800199c:	81fb      	strh	r3, [r7, #14]
	if(crc != calculate_crc(&Buf[0], (uint8_t)Len)) return;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4619      	mov	r1, r3
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 fd51 	bl	800244c <calculate_crc>
 80019aa:	4603      	mov	r3, r0
 80019ac:	461a      	mov	r2, r3
 80019ae:	89fb      	ldrh	r3, [r7, #14]
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d10a      	bne.n	80019ca <USB_CDC_RxHandler+0x6e>

	logType = Buf[1];
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3301      	adds	r3, #1
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <USB_CDC_RxHandler+0x78>)
 80019be:	801a      	strh	r2, [r3, #0]

	return;
 80019c0:	e004      	b.n	80019cc <USB_CDC_RxHandler+0x70>
	if(Len<3 || Len > 255) return;
 80019c2:	bf00      	nop
 80019c4:	e002      	b.n	80019cc <USB_CDC_RxHandler+0x70>
	if(Buf[0] != code) return;
 80019c6:	bf00      	nop
 80019c8:	e000      	b.n	80019cc <USB_CDC_RxHandler+0x70>
	if(crc != calculate_crc(&Buf[0], (uint8_t)Len)) return;
 80019ca:	bf00      	nop
}
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200002e2 	.word	0x200002e2

080019d8 <PARM_load>:

#include <FC_Param/Param.h>
#include <FC_RC/RadioControl.h>


int PARM_load(void){
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
	param.rc.OPTIONS = 0;
 80019de:	4b82      	ldr	r3, [pc, #520]	@ (8001be8 <PARM_load+0x210>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	param.rc.OVERRIDE_TIME = 0.0;
 80019ec:	4b7e      	ldr	r3, [pc, #504]	@ (8001be8 <PARM_load+0x210>)
 80019ee:	337b      	adds	r3, #123	@ 0x7b
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
	param.rc.PROTOCOLS = (0x00);			// 수신기 없이 테스트
 80019f6:	4b7c      	ldr	r3, [pc, #496]	@ (8001be8 <PARM_load+0x210>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	param.rc.PROTOCOLS = (0x1<<SRXL2);	// SRXL2
 8001a04:	4b78      	ldr	r3, [pc, #480]	@ (8001be8 <PARM_load+0x210>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
//	param.rc.PROTOCOLS = (0x1<<PPM);		// PPM (FS-iA6B)
	param.rc.FS_TIMEOUT = 1.0;
 8001a16:	4b74      	ldr	r3, [pc, #464]	@ (8001be8 <PARM_load+0x210>)
 8001a18:	3383      	adds	r3, #131	@ 0x83
 8001a1a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a1e:	601a      	str	r2, [r3, #0]
	param.rc.reversedMask = 0x00;
 8001a20:	4b71      	ldr	r3, [pc, #452]	@ (8001be8 <PARM_load+0x210>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a

	for(int i=0; i<RC_CHANNEL_MAX; i++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	e03f      	b.n	8001ac0 <PARM_load+0xe8>
	{
		param.rc.channel[i].MIN = 1000;
 8001a40:	4969      	ldr	r1, [pc, #420]	@ (8001be8 <PARM_load+0x210>)
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	4413      	add	r3, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3388      	adds	r3, #136	@ 0x88
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f062 0217 	orn	r2, r2, #23
 8001a54:	70da      	strb	r2, [r3, #3]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f042 0203 	orr.w	r2, r2, #3
 8001a5c:	711a      	strb	r2, [r3, #4]
		param.rc.channel[i].MAX = 2000;
 8001a5e:	4962      	ldr	r1, [pc, #392]	@ (8001be8 <PARM_load+0x210>)
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4413      	add	r3, r2
 8001a68:	440b      	add	r3, r1
 8001a6a:	3388      	adds	r3, #136	@ 0x88
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f062 022f 	orn	r2, r2, #47	@ 0x2f
 8001a72:	715a      	strb	r2, [r3, #5]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f042 0207 	orr.w	r2, r2, #7
 8001a7a:	719a      	strb	r2, [r3, #6]
		param.rc.channel[i].TRIM = 0;
 8001a7c:	495a      	ldr	r1, [pc, #360]	@ (8001be8 <PARM_load+0x210>)
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	4413      	add	r3, r2
 8001a86:	440b      	add	r3, r1
 8001a88:	3388      	adds	r3, #136	@ 0x88
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	71da      	strb	r2, [r3, #7]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	721a      	strb	r2, [r3, #8]
		param.rc.channel[i].DZ = 0;
 8001a92:	4955      	ldr	r1, [pc, #340]	@ (8001be8 <PARM_load+0x210>)
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	3391      	adds	r3, #145	@ 0x91
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
		param.rc.channel[i].OPTION = 0;
 8001aa4:	4950      	ldr	r1, [pc, #320]	@ (8001be8 <PARM_load+0x210>)
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4413      	add	r3, r2
 8001aae:	440b      	add	r3, r1
 8001ab0:	3388      	adds	r3, #136	@ 0x88
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	729a      	strb	r2, [r3, #10]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	72da      	strb	r2, [r3, #11]
	for(int i=0; i<RC_CHANNEL_MAX; i++)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3301      	adds	r3, #1
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b11      	cmp	r3, #17
 8001ac4:	ddbc      	ble.n	8001a40 <PARM_load+0x68>
	}
	param.rc.map.THR = 0;		// SRXL2 값
 8001ac6:	4b48      	ldr	r3, [pc, #288]	@ (8001be8 <PARM_load+0x210>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 212d 	strb.w	r2, [r3, #301]	@ 0x12d
	param.rc.map.ROL = 1;
 8001ace:	4b46      	ldr	r3, [pc, #280]	@ (8001be8 <PARM_load+0x210>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
	param.rc.map.PIT = 2;
 8001ad6:	4b44      	ldr	r3, [pc, #272]	@ (8001be8 <PARM_load+0x210>)
 8001ad8:	2202      	movs	r2, #2
 8001ada:	f883 212f 	strb.w	r2, [r3, #303]	@ 0x12f
	param.rc.map.YAW = 3;
 8001ade:	4b42      	ldr	r3, [pc, #264]	@ (8001be8 <PARM_load+0x210>)
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
//	param.rc.map.THR = 2;		// FS-iA6B용 값들
//	param.rc.map.ROL = 3;
//	param.rc.map.PIT = 1;
//	param.rc.map.YAW = 0;

	param.servo.AUTO_TRIM = 0;
 8001ae6:	4a40      	ldr	r2, [pc, #256]	@ (8001be8 <PARM_load+0x210>)
 8001ae8:	7913      	ldrb	r3, [r2, #4]
 8001aea:	f023 0301 	bic.w	r3, r3, #1
 8001aee:	7113      	strb	r3, [r2, #4]
	param.servo.DSHOT_ESC = 0;
 8001af0:	4a3d      	ldr	r2, [pc, #244]	@ (8001be8 <PARM_load+0x210>)
 8001af2:	79d3      	ldrb	r3, [r2, #7]
 8001af4:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8001af8:	71d3      	strb	r3, [r2, #7]
	param.servo.DSHOT_RATE = 0;
 8001afa:	4a3b      	ldr	r2, [pc, #236]	@ (8001be8 <PARM_load+0x210>)
 8001afc:	79d3      	ldrb	r3, [r2, #7]
 8001afe:	f023 0307 	bic.w	r3, r3, #7
 8001b02:	71d3      	strb	r3, [r2, #7]
	param.servo.RATE = 50;
 8001b04:	4b38      	ldr	r3, [pc, #224]	@ (8001be8 <PARM_load+0x210>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 8001b0c:	715a      	strb	r2, [r3, #5]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	719a      	strb	r2, [r3, #6]
	param.servo.GPIO_MASK = 0x0FFF;
 8001b12:	4b35      	ldr	r3, [pc, #212]	@ (8001be8 <PARM_load+0x210>)
 8001b14:	f04f 32ff 	mov.w	r2, #4294967295
 8001b18:	721a      	strb	r2, [r3, #8]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f042 020f 	orr.w	r2, r2, #15
 8001b20:	725a      	strb	r2, [r3, #9]
 8001b22:	2200      	movs	r2, #0
 8001b24:	729a      	strb	r2, [r3, #10]
 8001b26:	2200      	movs	r2, #0
 8001b28:	72da      	strb	r2, [r3, #11]
	param.servo.RC_FS_MSK = 0xFF;
 8001b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001be8 <PARM_load+0x210>)
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b30:	731a      	strb	r2, [r3, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	735a      	strb	r2, [r3, #13]
	param.servo._32_ENABLE = 0;
 8001b36:	4a2c      	ldr	r2, [pc, #176]	@ (8001be8 <PARM_load+0x210>)
 8001b38:	7b93      	ldrb	r3, [r2, #14]
 8001b3a:	f023 0301 	bic.w	r3, r3, #1
 8001b3e:	7393      	strb	r3, [r2, #14]

	for(int i=0; i<SERVO_CHANNEL_MAX; i++){
 8001b40:	2300      	movs	r3, #0
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	e046      	b.n	8001bd4 <PARM_load+0x1fc>
		param.servo.channel[i].FUNCTION = 0;
 8001b46:	4928      	ldr	r1, [pc, #160]	@ (8001be8 <PARM_load+0x210>)
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4413      	add	r3, r2
 8001b50:	440b      	add	r3, r1
 8001b52:	3308      	adds	r3, #8
 8001b54:	2200      	movs	r2, #0
 8001b56:	739a      	strb	r2, [r3, #14]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	73da      	strb	r2, [r3, #15]
		param.servo.channel[i].MAX = 2000;
 8001b5c:	4922      	ldr	r1, [pc, #136]	@ (8001be8 <PARM_load+0x210>)
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	4613      	mov	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4413      	add	r3, r2
 8001b66:	440b      	add	r3, r1
 8001b68:	3308      	adds	r3, #8
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f062 022f 	orn	r2, r2, #47	@ 0x2f
 8001b70:	725a      	strb	r2, [r3, #9]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f042 0207 	orr.w	r2, r2, #7
 8001b78:	729a      	strb	r2, [r3, #10]
		param.servo.channel[i].MIN = 1000;
 8001b7a:	491b      	ldr	r1, [pc, #108]	@ (8001be8 <PARM_load+0x210>)
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4413      	add	r3, r2
 8001b84:	440b      	add	r3, r1
 8001b86:	3308      	adds	r3, #8
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f062 0217 	orn	r2, r2, #23
 8001b8e:	71da      	strb	r2, [r3, #7]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f042 0203 	orr.w	r2, r2, #3
 8001b96:	721a      	strb	r2, [r3, #8]
		param.servo.channel[i].TRIM = 1500;
 8001b98:	4913      	ldr	r1, [pc, #76]	@ (8001be8 <PARM_load+0x210>)
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	3308      	adds	r3, #8
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f062 0223 	orn	r2, r2, #35	@ 0x23
 8001bac:	72da      	strb	r2, [r3, #11]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f042 0205 	orr.w	r2, r2, #5
 8001bb4:	731a      	strb	r2, [r3, #12]
		param.servo.channel[i].REVERSED = 0;
 8001bb6:	490c      	ldr	r1, [pc, #48]	@ (8001be8 <PARM_load+0x210>)
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	f103 0208 	add.w	r2, r3, #8
 8001bc6:	7b53      	ldrb	r3, [r2, #13]
 8001bc8:	f023 0301 	bic.w	r3, r3, #1
 8001bcc:	7353      	strb	r3, [r2, #13]
	for(int i=0; i<SERVO_CHANNEL_MAX; i++){
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2b0b      	cmp	r3, #11
 8001bd8:	ddb5      	ble.n	8001b46 <PARM_load+0x16e>
	}
	return 0;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	200002e8 	.word	0x200002e8

08001bec <PPM_init>:
 * @brief PPM 입력 설정
 * @detail RC_Initialization()에서 실행됨
 * @retval 0 : 정상 수신
 */
int PPM_init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
	while(PPM_getControlData());
 8001bf0:	bf00      	nop
 8001bf2:	f000 f84d 	bl	8001c90 <PPM_getControlData>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1fa      	bne.n	8001bf2 <PPM_init+0x6>
	return 0;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <PPM_readData>:
 * @retval 0 : 정상 수신
 * @retval 1 : 모든 수신 읽음 (= 첫수신)
 * @retval -1 : 이상 데이터
 */
int PPM_readData(uint16_t data)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	80fb      	strh	r3, [r7, #6]
	static uint16_t previous = 0;
    static uint8_t cnt = 0;
	uint16_t rx = system_time.time_unix_usec - previous;
 8001c0e:	491c      	ldr	r1, [pc, #112]	@ (8001c80 <PPM_readData+0x7c>)
 8001c10:	680a      	ldr	r2, [r1, #0]
 8001c12:	684b      	ldr	r3, [r1, #4]
 8001c14:	b292      	uxth	r2, r2
 8001c16:	4b1b      	ldr	r3, [pc, #108]	@ (8001c84 <PPM_readData+0x80>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	81fb      	strh	r3, [r7, #14]

	previous = system_time.time_unix_usec;
 8001c1e:	4918      	ldr	r1, [pc, #96]	@ (8001c80 <PPM_readData+0x7c>)
 8001c20:	680a      	ldr	r2, [r1, #0]
 8001c22:	684b      	ldr	r3, [r1, #4]
 8001c24:	b292      	uxth	r2, r2
 8001c26:	4b17      	ldr	r3, [pc, #92]	@ (8001c84 <PPM_readData+0x80>)
 8001c28:	801a      	strh	r2, [r3, #0]

	// 첫 수신
    if(rx>2500){
 8001c2a:	89fb      	ldrh	r3, [r7, #14]
 8001c2c:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d904      	bls.n	8001c3e <PPM_readData+0x3a>
    	cnt = 0;
 8001c34:	4b14      	ldr	r3, [pc, #80]	@ (8001c88 <PPM_readData+0x84>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
    	return 1;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e01a      	b.n	8001c74 <PPM_readData+0x70>
    }
    // 수신값 이상
    else if(rx>2200 || rx<800) return -1;
 8001c3e:	89fb      	ldrh	r3, [r7, #14]
 8001c40:	f640 0298 	movw	r2, #2200	@ 0x898
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d803      	bhi.n	8001c50 <PPM_readData+0x4c>
 8001c48:	89fb      	ldrh	r3, [r7, #14]
 8001c4a:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001c4e:	d202      	bcs.n	8001c56 <PPM_readData+0x52>
 8001c50:	f04f 33ff 	mov.w	r3, #4294967295
 8001c54:	e00e      	b.n	8001c74 <PPM_readData+0x70>

	((uint16_t*)RC_Buffer)[cnt] = rx;
 8001c56:	4b0d      	ldr	r3, [pc, #52]	@ (8001c8c <PPM_readData+0x88>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <PPM_readData+0x84>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	89fa      	ldrh	r2, [r7, #14]
 8001c64:	801a      	strh	r2, [r3, #0]
    cnt++;
 8001c66:	4b08      	ldr	r3, [pc, #32]	@ (8001c88 <PPM_readData+0x84>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <PPM_readData+0x84>)
 8001c70:	701a      	strb	r2, [r3, #0]

	return 0;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	20000454 	.word	0x20000454
 8001c84:	2000041a 	.word	0x2000041a
 8001c88:	2000041c 	.word	0x2000041c
 8001c8c:	20000450 	.word	0x20000450

08001c90 <PPM_getControlData>:
 * @retval -1 : 수신 값 없음
 * @retval -2 : 수신 버퍼가 설정되지 않음
 * @retval 0xf2 : FailSafe
 */
int PPM_getControlData(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af02      	add	r7, sp, #8
	PARAM_RC_CH* paramCh = (PARAM_RC_CH*)&param.rc.channel[0];
 8001c96:	4b61      	ldr	r3, [pc, #388]	@ (8001e1c <PPM_getControlData+0x18c>)
 8001c98:	60bb      	str	r3, [r7, #8]
	RC_CHANNELS* rc = &RC_channels;
 8001c9a:	4b61      	ldr	r3, [pc, #388]	@ (8001e20 <PPM_getControlData+0x190>)
 8001c9c:	607b      	str	r3, [r7, #4]

	if(IS_FL_RX == 0) return -1;
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f000 fee2 	bl	8002a68 <isFlag>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d102      	bne.n	8001cb0 <PPM_getControlData+0x20>
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cae:	e0b1      	b.n	8001e14 <PPM_getControlData+0x184>
	if(RC_isBufferInit() != 0) return -2;
 8001cb0:	f000 fde6 	bl	8002880 <RC_isBufferInit>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <PPM_getControlData+0x30>
 8001cba:	f06f 0301 	mvn.w	r3, #1
 8001cbe:	e0a9      	b.n	8001e14 <PPM_getControlData+0x184>

	// flag clear
	CLEAR_FL_RX();
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f000 feb7 	bl	8002a34 <clearFlag>

	for(int i=0; i<PPM_MAX_CHANNEL; i++){
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	e09e      	b.n	8001e0a <PPM_getControlData+0x17a>
		// Reverse 처리
		uint16_t value = ((uint16_t*)RC_Buffer)[i];
 8001ccc:	4b55      	ldr	r3, [pc, #340]	@ (8001e24 <PPM_getControlData+0x194>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	807b      	strh	r3, [r7, #2]
		if((param.rc.reversedMask>>i)&0x01)
 8001cda:	4b53      	ldr	r3, [pc, #332]	@ (8001e28 <PPM_getControlData+0x198>)
 8001cdc:	f8d3 2087 	ldr.w	r2, [r3, #135]	@ 0x87
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d02c      	beq.n	8001d48 <PPM_getControlData+0xb8>
		{
			rc->value[i] = map(value,
					1000, 2000,
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	4413      	add	r3, r2
			rc->value[i] = map(value,
 8001cfa:	885b      	ldrh	r3, [r3, #2]
 8001cfc:	b299      	uxth	r1, r3
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4613      	mov	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4413      	add	r3, r2
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	4413      	add	r3, r2
			rc->value[i] = map(value,
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	8878      	ldrh	r0, [r7, #2]
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	460b      	mov	r3, r1
 8001d14:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001d18:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d1c:	f000 fe4a 	bl	80029b4 <map>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4619      	mov	r1, r3
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4613      	mov	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	4413      	add	r3, r2
 8001d30:	889b      	ldrh	r3, [r3, #4]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	440b      	add	r3, r1
 8001d36:	b299      	uxth	r1, r3
			rc->value[i] = map(value,
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	460a      	mov	r2, r1
 8001d42:	f8a3 2005 	strh.w	r2, [r3, #5]
 8001d46:	e02b      	b.n	8001da0 <PPM_getControlData+0x110>
		}
		else{
			rc->value[i] = map(value,
					1000, 2000,
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	4413      	add	r3, r2
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	4413      	add	r3, r2
			rc->value[i] = map(value,
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	b299      	uxth	r1, r3
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	4413      	add	r3, r2
			rc->value[i] = map(value,
 8001d64:	885b      	ldrh	r3, [r3, #2]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	8878      	ldrh	r0, [r7, #2]
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001d72:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d76:	f000 fe1d 	bl	80029b4 <map>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4619      	mov	r1, r3
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4613      	mov	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4413      	add	r3, r2
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	4413      	add	r3, r2
 8001d8a:	889b      	ldrh	r3, [r3, #4]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	440b      	add	r3, r1
 8001d90:	b299      	uxth	r1, r3
			rc->value[i] = map(value,
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	460a      	mov	r2, r1
 8001d9c:	f8a3 2005 	strh.w	r2, [r3, #5]
		}

		// Dead-zone 처리
		if(rc->value[i]>(1500-paramCh[i].DZ) && rc->value[i]<(1500+paramCh[i].DZ)){
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4413      	add	r3, r2
 8001da8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	4619      	mov	r1, r3
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	4613      	mov	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4413      	add	r3, r2
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	4413      	add	r3, r2
 8001dbc:	799b      	ldrb	r3, [r3, #6]
 8001dbe:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	4299      	cmp	r1, r3
 8001dc6:	dd1d      	ble.n	8001e04 <PPM_getControlData+0x174>
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4413      	add	r3, r2
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	799b      	ldrb	r3, [r3, #6]
 8001dd6:	f203 52db 	addw	r2, r3, #1499	@ 0x5db
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	440b      	add	r3, r1
 8001de2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	429a      	cmp	r2, r3
 8001dea:	db0b      	blt.n	8001e04 <PPM_getControlData+0x174>
			rc->value[i] = 1500;
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	2200      	movs	r2, #0
 8001df6:	f062 0223 	orn	r2, r2, #35	@ 0x23
 8001dfa:	715a      	strb	r2, [r3, #5]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f042 0205 	orr.w	r2, r2, #5
 8001e02:	719a      	strb	r2, [r3, #6]
	for(int i=0; i<PPM_MAX_CHANNEL; i++){
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	3301      	adds	r3, #1
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2b07      	cmp	r3, #7
 8001e0e:	f77f af5d 	ble.w	8001ccc <PPM_getControlData+0x3c>
		}
	}

	return 0;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000373 	.word	0x20000373
 8001e20:	200004d0 	.word	0x200004d0
 8001e24:	20000450 	.word	0x20000450
 8001e28:	200002e8 	.word	0x200002e8

08001e2c <SRXL2_connect>:
 * @detail 수신기와 연결하기 위한 Handshake 절차 수행
 * @parm none
 * @retval 0 : 연결 완료
 * @retval 2 : 이미 연결됨
 */
int SRXL2_connect(void){
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
	SRXL2_Header *header = &packet.header;
 8001e32:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee8 <SRXL2_connect+0xbc>)
 8001e34:	617b      	str	r3, [r7, #20]

	SRXL2_Handshake_Packet tx_packet;

	while(1)
	{
		if(SRXL2_isReceived()!=0) continue;
 8001e36:	f000 faaf 	bl	8002398 <SRXL2_isReceived>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d136      	bne.n	8001eae <SRXL2_connect+0x82>

		switch(header->pType)
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	785b      	ldrb	r3, [r3, #1]
 8001e44:	2b21      	cmp	r3, #33	@ 0x21
 8001e46:	d002      	beq.n	8001e4e <SRXL2_connect+0x22>
 8001e48:	2bcd      	cmp	r3, #205	@ 0xcd
 8001e4a:	d132      	bne.n	8001eb2 <SRXL2_connect+0x86>
		{
		case SRXL_CTRL_ID:
			//Bind 정보 요청 또는 unbind 후 재 연결하도록 작성
			break;
 8001e4c:	e018      	b.n	8001e80 <SRXL2_connect+0x54>
		case SRXL_HANDSHAKE_ID:
			rx = &(((SRXL2_Handshake_Packet *) RC_Buffer)->data);
 8001e4e:	4b27      	ldr	r3, [pc, #156]	@ (8001eec <SRXL2_connect+0xc0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	3303      	adds	r3, #3
 8001e54:	613b      	str	r3, [r7, #16]

			// 수신기의 ID를 가져옴
			if((rx->SrcID>>4) == 0x1)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	091b      	lsrs	r3, r3, #4
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d10d      	bne.n	8001e7e <SRXL2_connect+0x52>
			{
				receiver_info.SrcID = rx->SrcID;
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	781a      	ldrb	r2, [r3, #0]
 8001e66:	4b22      	ldr	r3, [pc, #136]	@ (8001ef0 <SRXL2_connect+0xc4>)
 8001e68:	701a      	strb	r2, [r3, #0]
				receiver_info.Info = rx->Info;
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	791a      	ldrb	r2, [r3, #4]
 8001e6e:	4b20      	ldr	r3, [pc, #128]	@ (8001ef0 <SRXL2_connect+0xc4>)
 8001e70:	711a      	strb	r2, [r3, #4]
				receiver_info.UID = rx->UID;
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8001e78:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef0 <SRXL2_connect+0xc4>)
 8001e7a:	f8c2 3005 	str.w	r3, [r2, #5]
			}
			break;
 8001e7e:	bf00      	nop
		default:
			continue;
		}

		break;
 8001e80:	bf00      	nop
	}

	tx_packet.header.speckrum_id = SPEKTRUM_SRXL_ID;
 8001e82:	23a6      	movs	r3, #166	@ 0xa6
 8001e84:	703b      	strb	r3, [r7, #0]
	tx_packet.header.pType = SRXL_HANDSHAKE_ID;
 8001e86:	2321      	movs	r3, #33	@ 0x21
 8001e88:	707b      	strb	r3, [r7, #1]
	tx_packet.header.len = sizeof(SRXL2_Handshake_Packet);
 8001e8a:	230e      	movs	r3, #14
 8001e8c:	70bb      	strb	r3, [r7, #2]

	tx_packet.data.SrcID = SRXL_FC_DEVICE_ID;
 8001e8e:	2330      	movs	r3, #48	@ 0x30
 8001e90:	70fb      	strb	r3, [r7, #3]
	tx_packet.data.DestID = receiver_info.SrcID;
 8001e92:	4b17      	ldr	r3, [pc, #92]	@ (8001ef0 <SRXL2_connect+0xc4>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	713b      	strb	r3, [r7, #4]
	tx_packet.data.Priority = 0x60;
 8001e98:	2360      	movs	r3, #96	@ 0x60
 8001e9a:	717b      	strb	r3, [r7, #5]
	tx_packet.data.BaudRate = SRXL_BAUD_115200;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	71bb      	strb	r3, [r7, #6]
	tx_packet.data.Info = 0x01;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	71fb      	strb	r3, [r7, #7]
	tx_packet.data.UID = 0x12345678;
 8001ea4:	4b13      	ldr	r3, [pc, #76]	@ (8001ef4 <SRXL2_connect+0xc8>)
 8001ea6:	60bb      	str	r3, [r7, #8]

	tx_packet.crc = 0x0000;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	81bb      	strh	r3, [r7, #12]

	while(SRXL2_doHandshake(&tx_packet));
 8001eac:	e003      	b.n	8001eb6 <SRXL2_connect+0x8a>
		if(SRXL2_isReceived()!=0) continue;
 8001eae:	bf00      	nop
 8001eb0:	e7c1      	b.n	8001e36 <SRXL2_connect+0xa>
			continue;
 8001eb2:	bf00      	nop
		if(SRXL2_isReceived()!=0) continue;
 8001eb4:	e7bf      	b.n	8001e36 <SRXL2_connect+0xa>
	while(SRXL2_doHandshake(&tx_packet));
 8001eb6:	463b      	mov	r3, r7
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 f909 	bl	80020d0 <SRXL2_doHandshake>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f8      	bne.n	8001eb6 <SRXL2_connect+0x8a>

	/*
	 * 조종기가 꺼진 상황에서 Bind 하는 경우
	 */
	while(SRXL2_getControlData());
 8001ec4:	bf00      	nop
 8001ec6:	f000 f817 	bl	8001ef8 <SRXL2_getControlData>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1fa      	bne.n	8001ec6 <SRXL2_connect+0x9a>
	if(SRXL2_getRssi()==0) SRXL2_connect();
 8001ed0:	f000 f84e 	bl	8001f70 <SRXL2_getRssi>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <SRXL2_connect+0xb2>
 8001eda:	f7ff ffa7 	bl	8001e2c <SRXL2_connect>
	return 0;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000420 	.word	0x20000420
 8001eec:	20000450 	.word	0x20000450
 8001ef0:	20000438 	.word	0x20000438
 8001ef4:	12345678 	.word	0x12345678

08001ef8 <SRXL2_getControlData>:
 * @retval 0 : 정상 수신
 * @retval -1 : 수신 버퍼 없음
 * @retval -2 : 조종 데이터가 아님
 * @retval 0xf2 : FailSafe
 */
int SRXL2_getControlData(void){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
	SRXL2_Header* header = &packet.header;
 8001efe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f68 <SRXL2_getControlData+0x70>)
 8001f00:	607b      	str	r3, [r7, #4]
	SRXL2_Control_Packet* rx = (SRXL2_Control_Packet*)RC_Buffer;
 8001f02:	4b1a      	ldr	r3, [pc, #104]	@ (8001f6c <SRXL2_getControlData+0x74>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	603b      	str	r3, [r7, #0]

	if(SRXL2_isReceived()!=0) return -1;
 8001f08:	f000 fa46 	bl	8002398 <SRXL2_isReceived>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <SRXL2_getControlData+0x20>
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295
 8001f16:	e022      	b.n	8001f5e <SRXL2_getControlData+0x66>
	if(header->pType != SRXL_CTRL_ID) return -2;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	785b      	ldrb	r3, [r3, #1]
 8001f1c:	2bcd      	cmp	r3, #205	@ 0xcd
 8001f1e:	d002      	beq.n	8001f26 <SRXL2_getControlData+0x2e>
 8001f20:	f06f 0301 	mvn.w	r3, #1
 8001f24:	e01b      	b.n	8001f5e <SRXL2_getControlData+0x66>

	// rssi, frameLoss, Fail-safe 기능 등 구현

	switch(rx->Command){
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	78db      	ldrb	r3, [r3, #3]
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d816      	bhi.n	8001f5c <SRXL2_getControlData+0x64>
 8001f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f34 <SRXL2_getControlData+0x3c>)
 8001f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f34:	08001f45 	.word	0x08001f45
 8001f38:	08001f51 	.word	0x08001f51
 8001f3c:	08001f5d 	.word	0x08001f5d
 8001f40:	08001f5d 	.word	0x08001f5d
	case SRXL_CTRL_CMD_CHANNEL:
		// SRXL2_SendTelemetryData();
		SRXL2_parseControlData((SRXL2_Control_Packet*)RC_Buffer);
 8001f44:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <SRXL2_getControlData+0x74>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f000 f903 	bl	8002154 <SRXL2_parseControlData>
		break;
 8001f4e:	e005      	b.n	8001f5c <SRXL2_getControlData+0x64>
	case SRXL_CTRL_CMD_CHANNEL_FS:
		return RC_setFailsafe(0x1<<SRXL2);
 8001f50:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001f54:	f000 fcd2 	bl	80028fc <RC_setFailsafe>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	e000      	b.n	8001f5e <SRXL2_getControlData+0x66>
		break;
	case SRXL_CTRL_CMD_FWDPGM:
		break;
	}

	return 0;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000420 	.word	0x20000420
 8001f6c:	20000450 	.word	0x20000450

08001f70 <SRXL2_getRssi>:
/*
 * @brief RSSI 수신 값 로드
 * @retval rssi
 */
uint8_t SRXL2_getRssi(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
	return (uint8_t)((SRXL2_Control_Packet*)RC_Buffer)->data.rssi;
 8001f74:	4b04      	ldr	r3, [pc, #16]	@ (8001f88 <SRXL2_getRssi+0x18>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001f7c:	b2db      	uxtb	r3, r3
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	20000450 	.word	0x20000450

08001f8c <SRXL2_readByteIRQ2>:
 * @retval 1 : 1byte 수신 완료
 * @retval -1 : 헤더 에러
 * @retval -2 : 버퍼 설정 안됨
 */
int SRXL2_readByteIRQ2(const uint8_t data)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
	static uint8_t cnt = 0;
	static uint8_t maxLen = 0;

	if(RC_isBufferInit()!=0) return -2;
 8001f96:	f000 fc73 	bl	8002880 <RC_isBufferInit>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d002      	beq.n	8001fa6 <SRXL2_readByteIRQ2+0x1a>
 8001fa0:	f06f 0301 	mvn.w	r3, #1
 8001fa4:	e089      	b.n	80020ba <SRXL2_readByteIRQ2+0x12e>
	if(cnt>=SRXL_MAX_BUFFER_SIZE) return -2;
 8001fa6:	4b47      	ldr	r3, [pc, #284]	@ (80020c4 <SRXL2_readByteIRQ2+0x138>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b4f      	cmp	r3, #79	@ 0x4f
 8001fac:	d902      	bls.n	8001fb4 <SRXL2_readByteIRQ2+0x28>
 8001fae:	f06f 0301 	mvn.w	r3, #1
 8001fb2:	e082      	b.n	80020ba <SRXL2_readByteIRQ2+0x12e>

	switch(cnt)
 8001fb4:	4b43      	ldr	r3, [pc, #268]	@ (80020c4 <SRXL2_readByteIRQ2+0x138>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <SRXL2_readByteIRQ2+0x36>
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d011      	beq.n	8001fe4 <SRXL2_readByteIRQ2+0x58>
 8001fc0:	e052      	b.n	8002068 <SRXL2_readByteIRQ2+0xdc>
	{
	case 0:
		if(data == SPEKTRUM_SRXL_ID){
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	2ba6      	cmp	r3, #166	@ 0xa6
 8001fc6:	d176      	bne.n	80020b6 <SRXL2_readByteIRQ2+0x12a>
			RC_Buffer[cnt] = data;
 8001fc8:	4b3f      	ldr	r3, [pc, #252]	@ (80020c8 <SRXL2_readByteIRQ2+0x13c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a3d      	ldr	r2, [pc, #244]	@ (80020c4 <SRXL2_readByteIRQ2+0x138>)
 8001fce:	7812      	ldrb	r2, [r2, #0]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	79fa      	ldrb	r2, [r7, #7]
 8001fd4:	701a      	strb	r2, [r3, #0]
			cnt++;
 8001fd6:	4b3b      	ldr	r3, [pc, #236]	@ (80020c4 <SRXL2_readByteIRQ2+0x138>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4b39      	ldr	r3, [pc, #228]	@ (80020c4 <SRXL2_readByteIRQ2+0x138>)
 8001fe0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001fe2:	e068      	b.n	80020b6 <SRXL2_readByteIRQ2+0x12a>
	case 1:
		switch(data){
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	2bcd      	cmp	r3, #205	@ 0xcd
 8001fe8:	d026      	beq.n	8002038 <SRXL2_readByteIRQ2+0xac>
 8001fea:	2bcd      	cmp	r3, #205	@ 0xcd
 8001fec:	dc28      	bgt.n	8002040 <SRXL2_readByteIRQ2+0xb4>
 8001fee:	2b80      	cmp	r3, #128	@ 0x80
 8001ff0:	d01e      	beq.n	8002030 <SRXL2_readByteIRQ2+0xa4>
 8001ff2:	2b80      	cmp	r3, #128	@ 0x80
 8001ff4:	dc24      	bgt.n	8002040 <SRXL2_readByteIRQ2+0xb4>
 8001ff6:	2b55      	cmp	r3, #85	@ 0x55
 8001ff8:	d016      	beq.n	8002028 <SRXL2_readByteIRQ2+0x9c>
 8001ffa:	2b55      	cmp	r3, #85	@ 0x55
 8001ffc:	dc20      	bgt.n	8002040 <SRXL2_readByteIRQ2+0xb4>
 8001ffe:	2b50      	cmp	r3, #80	@ 0x50
 8002000:	d00e      	beq.n	8002020 <SRXL2_readByteIRQ2+0x94>
 8002002:	2b50      	cmp	r3, #80	@ 0x50
 8002004:	dc1c      	bgt.n	8002040 <SRXL2_readByteIRQ2+0xb4>
 8002006:	2b21      	cmp	r3, #33	@ 0x21
 8002008:	d002      	beq.n	8002010 <SRXL2_readByteIRQ2+0x84>
 800200a:	2b41      	cmp	r3, #65	@ 0x41
 800200c:	d004      	beq.n	8002018 <SRXL2_readByteIRQ2+0x8c>
 800200e:	e017      	b.n	8002040 <SRXL2_readByteIRQ2+0xb4>
		case SRXL_HANDSHAKE_ID:
			maxLen = 14;
 8002010:	4b2e      	ldr	r3, [pc, #184]	@ (80020cc <SRXL2_readByteIRQ2+0x140>)
 8002012:	220e      	movs	r2, #14
 8002014:	701a      	strb	r2, [r3, #0]
			break;
 8002016:	e019      	b.n	800204c <SRXL2_readByteIRQ2+0xc0>
		case SRXL_BIND_ID:
			maxLen = 21;
 8002018:	4b2c      	ldr	r3, [pc, #176]	@ (80020cc <SRXL2_readByteIRQ2+0x140>)
 800201a:	2215      	movs	r2, #21
 800201c:	701a      	strb	r2, [r3, #0]
			break;
 800201e:	e015      	b.n	800204c <SRXL2_readByteIRQ2+0xc0>
		case SRXL_PARAM_ID:
			maxLen = 14;
 8002020:	4b2a      	ldr	r3, [pc, #168]	@ (80020cc <SRXL2_readByteIRQ2+0x140>)
 8002022:	220e      	movs	r2, #14
 8002024:	701a      	strb	r2, [r3, #0]
			break;
 8002026:	e011      	b.n	800204c <SRXL2_readByteIRQ2+0xc0>
		case SRXL_RSSI_ID:
			maxLen = 10;
 8002028:	4b28      	ldr	r3, [pc, #160]	@ (80020cc <SRXL2_readByteIRQ2+0x140>)
 800202a:	220a      	movs	r2, #10
 800202c:	701a      	strb	r2, [r3, #0]
			break;
 800202e:	e00d      	b.n	800204c <SRXL2_readByteIRQ2+0xc0>
		case SRXL_TELEM_ID:
			maxLen = 22;
 8002030:	4b26      	ldr	r3, [pc, #152]	@ (80020cc <SRXL2_readByteIRQ2+0x140>)
 8002032:	2216      	movs	r2, #22
 8002034:	701a      	strb	r2, [r3, #0]
			break;
 8002036:	e009      	b.n	800204c <SRXL2_readByteIRQ2+0xc0>
		case SRXL_CTRL_ID:
			maxLen = 80;
 8002038:	4b24      	ldr	r3, [pc, #144]	@ (80020cc <SRXL2_readByteIRQ2+0x140>)
 800203a:	2250      	movs	r2, #80	@ 0x50
 800203c:	701a      	strb	r2, [r3, #0]
			break;
 800203e:	e005      	b.n	800204c <SRXL2_readByteIRQ2+0xc0>
		default :
			cnt = 0;
 8002040:	4b20      	ldr	r3, [pc, #128]	@ (80020c4 <SRXL2_readByteIRQ2+0x138>)
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
			return -1;
 8002046:	f04f 33ff 	mov.w	r3, #4294967295
 800204a:	e036      	b.n	80020ba <SRXL2_readByteIRQ2+0x12e>
		}
		RC_Buffer[cnt] = data;
 800204c:	4b1e      	ldr	r3, [pc, #120]	@ (80020c8 <SRXL2_readByteIRQ2+0x13c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a1c      	ldr	r2, [pc, #112]	@ (80020c4 <SRXL2_readByteIRQ2+0x138>)
 8002052:	7812      	ldrb	r2, [r2, #0]
 8002054:	4413      	add	r3, r2
 8002056:	79fa      	ldrb	r2, [r7, #7]
 8002058:	701a      	strb	r2, [r3, #0]
		cnt++;
 800205a:	4b1a      	ldr	r3, [pc, #104]	@ (80020c4 <SRXL2_readByteIRQ2+0x138>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	3301      	adds	r3, #1
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4b18      	ldr	r3, [pc, #96]	@ (80020c4 <SRXL2_readByteIRQ2+0x138>)
 8002064:	701a      	strb	r2, [r3, #0]
		break;
 8002066:	e027      	b.n	80020b8 <SRXL2_readByteIRQ2+0x12c>
	default :
		RC_Buffer[cnt] = data;
 8002068:	4b17      	ldr	r3, [pc, #92]	@ (80020c8 <SRXL2_readByteIRQ2+0x13c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a15      	ldr	r2, [pc, #84]	@ (80020c4 <SRXL2_readByteIRQ2+0x138>)
 800206e:	7812      	ldrb	r2, [r2, #0]
 8002070:	4413      	add	r3, r2
 8002072:	79fa      	ldrb	r2, [r7, #7]
 8002074:	701a      	strb	r2, [r3, #0]

		/*
		 * Control Packet은 사이즈가 가변적임
		 * 3번째 바이트가 패킷의 크기를 결정함
		 */
		if(maxLen == 80) maxLen = RC_Buffer[cnt];
 8002076:	4b15      	ldr	r3, [pc, #84]	@ (80020cc <SRXL2_readByteIRQ2+0x140>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b50      	cmp	r3, #80	@ 0x50
 800207c:	d107      	bne.n	800208e <SRXL2_readByteIRQ2+0x102>
 800207e:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <SRXL2_readByteIRQ2+0x13c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a10      	ldr	r2, [pc, #64]	@ (80020c4 <SRXL2_readByteIRQ2+0x138>)
 8002084:	7812      	ldrb	r2, [r2, #0]
 8002086:	4413      	add	r3, r2
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	4b10      	ldr	r3, [pc, #64]	@ (80020cc <SRXL2_readByteIRQ2+0x140>)
 800208c:	701a      	strb	r2, [r3, #0]

		if(cnt == maxLen-1){
 800208e:	4b0d      	ldr	r3, [pc, #52]	@ (80020c4 <SRXL2_readByteIRQ2+0x138>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	4b0d      	ldr	r3, [pc, #52]	@ (80020cc <SRXL2_readByteIRQ2+0x140>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	3b01      	subs	r3, #1
 800209a:	429a      	cmp	r2, r3
 800209c:	d104      	bne.n	80020a8 <SRXL2_readByteIRQ2+0x11c>
			cnt=0;
 800209e:	4b09      	ldr	r3, [pc, #36]	@ (80020c4 <SRXL2_readByteIRQ2+0x138>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
			return 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	e008      	b.n	80020ba <SRXL2_readByteIRQ2+0x12e>
		}
		else{
			cnt++;
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <SRXL2_readByteIRQ2+0x138>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	3301      	adds	r3, #1
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <SRXL2_readByteIRQ2+0x138>)
 80020b2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80020b4:	e000      	b.n	80020b8 <SRXL2_readByteIRQ2+0x12c>
		break;
 80020b6:	bf00      	nop
	}
	return 1;
 80020b8:	2301      	movs	r3, #1
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000441 	.word	0x20000441
 80020c8:	20000450 	.word	0x20000450
 80020cc:	20000442 	.word	0x20000442

080020d0 <SRXL2_doHandshake>:
 * @retval 0 : 송신 완료
 * @retval -1 : 송신 실패
 * @retval -2 : 패킷 크기와 정보가 불일치
 */
int SRXL2_doHandshake(SRXL2_Handshake_Packet *tx_packet)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	SRXL2_Handshake_Data* rx;
	SRXL2_Handshake_Data* data = &tx_packet->data;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3303      	adds	r3, #3
 80020dc:	617b      	str	r3, [r7, #20]

	uint8_t len = tx_packet->header.len;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	789b      	ldrb	r3, [r3, #2]
 80020e2:	74fb      	strb	r3, [r7, #19]
	if(sizeof(*tx_packet) != len) return -2;
 80020e4:	7cfb      	ldrb	r3, [r7, #19]
 80020e6:	2b0e      	cmp	r3, #14
 80020e8:	d002      	beq.n	80020f0 <SRXL2_doHandshake+0x20>
 80020ea:	f06f 0301 	mvn.w	r3, #1
 80020ee:	e029      	b.n	8002144 <SRXL2_doHandshake+0x74>

	while(1)
	{
		if(SRXL2_isReceived()!=0) continue;
 80020f0:	f000 f952 	bl	8002398 <SRXL2_isReceived>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d114      	bne.n	8002124 <SRXL2_doHandshake+0x54>
		if(packet.header.pType != SRXL_HANDSHAKE_ID) continue;
 80020fa:	4b14      	ldr	r3, [pc, #80]	@ (800214c <SRXL2_doHandshake+0x7c>)
 80020fc:	785b      	ldrb	r3, [r3, #1]
 80020fe:	2b21      	cmp	r3, #33	@ 0x21
 8002100:	d112      	bne.n	8002128 <SRXL2_doHandshake+0x58>

		rx = &(((SRXL2_Handshake_Packet *) RC_Buffer)->data);
 8002102:	4b13      	ldr	r3, [pc, #76]	@ (8002150 <SRXL2_doHandshake+0x80>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	3303      	adds	r3, #3
 8002108:	60fb      	str	r3, [r7, #12]

		if(rx->SrcID == data->DestID && rx->DestID == data->SrcID)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	781a      	ldrb	r2, [r3, #0]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	785b      	ldrb	r3, [r3, #1]
 8002112:	429a      	cmp	r2, r3
 8002114:	d1ec      	bne.n	80020f0 <SRXL2_doHandshake+0x20>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	785a      	ldrb	r2, [r3, #1]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d004      	beq.n	800212c <SRXL2_doHandshake+0x5c>
 8002122:	e7e5      	b.n	80020f0 <SRXL2_doHandshake+0x20>
		if(SRXL2_isReceived()!=0) continue;
 8002124:	bf00      	nop
 8002126:	e7e3      	b.n	80020f0 <SRXL2_doHandshake+0x20>
		if(packet.header.pType != SRXL_HANDSHAKE_ID) continue;
 8002128:	bf00      	nop
		if(SRXL2_isReceived()!=0) continue;
 800212a:	e7e1      	b.n	80020f0 <SRXL2_doHandshake+0x20>
		{
			break;
 800212c:	bf00      	nop
		}
	}

	insert_crc((uint8_t*)tx_packet, len);
 800212e:	7cfb      	ldrb	r3, [r7, #19]
 8002130:	4619      	mov	r1, r3
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f9cb 	bl	80024ce <insert_crc>
	return RC_halfDuplex_Transmit((uint8_t*)tx_packet, len);
 8002138:	7cfb      	ldrb	r3, [r7, #19]
 800213a:	4619      	mov	r1, r3
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 fbfd 	bl	800293c <RC_halfDuplex_Transmit>
 8002142:	4603      	mov	r3, r0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000420 	.word	0x20000420
 8002150:	20000450 	.word	0x20000450

08002154 <SRXL2_parseControlData>:
 *		   data 범위 조정(1000us~2000us), 반전, 트림, Dead-zone 적용.
 * 		   RC_Channel[]에 저장
 * @parm SRXL_Control_Pack *rx : (SRXL2_Control_Packet*)packet
 */
int SRXL2_parseControlData(SRXL2_Control_Packet *rx)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	@ 0x28
 8002158:	af02      	add	r7, sp, #8
 800215a:	6078      	str	r0, [r7, #4]
	RC_CHANNELS* rc = &RC_channels;
 800215c:	4b88      	ldr	r3, [pc, #544]	@ (8002380 <SRXL2_parseControlData+0x22c>)
 800215e:	617b      	str	r3, [r7, #20]
	PARAM_RC_CH* paramCh = (PARAM_RC_CH*)&param.rc.channel[0];
 8002160:	4b88      	ldr	r3, [pc, #544]	@ (8002384 <SRXL2_parseControlData+0x230>)
 8002162:	613b      	str	r3, [r7, #16]

	uint8_t channelCnt = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	77fb      	strb	r3, [r7, #31]
	static uint32_t channelMask = 0;

	static uint32_t previousTime = 0;

	for(int i=0; i<SRXL_MAX_CHANNEL; i++)
 8002168:	2300      	movs	r3, #0
 800216a:	61bb      	str	r3, [r7, #24]
 800216c:	e0c3      	b.n	80022f6 <SRXL2_parseControlData+0x1a2>
	{
		if(!((rx->data.mask>>i)&0x01)) continue;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	fa22 f303 	lsr.w	r3, r2, r3
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 80b6 	beq.w	80022ee <SRXL2_parseControlData+0x19a>
		if(i>=RC_CHANNEL_MAX) break;
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	2b11      	cmp	r3, #17
 8002186:	f300 80bb 	bgt.w	8002300 <SRXL2_parseControlData+0x1ac>

		uint16_t value = rx->data.values[channelCnt];
 800218a:	7ff9      	ldrb	r1, [r7, #31]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	004b      	lsls	r3, r1, #1
 8002190:	4413      	add	r3, r2
 8002192:	7b18      	ldrb	r0, [r3, #12]
 8002194:	004b      	lsls	r3, r1, #1
 8002196:	4413      	add	r3, r2
 8002198:	7b5b      	ldrb	r3, [r3, #13]
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	4303      	orrs	r3, r0
 800219e:	81fb      	strh	r3, [r7, #14]
		channelCnt++;
 80021a0:	7ffb      	ldrb	r3, [r7, #31]
 80021a2:	3301      	adds	r3, #1
 80021a4:	77fb      	strb	r3, [r7, #31]

		// RC 값 필터링 코드 작성
		value = value<SRXL_CTRL_VALUE_MIN?SRXL_CTRL_VALUE_MIN:value;
 80021a6:	89fb      	ldrh	r3, [r7, #14]
 80021a8:	f642 22a0 	movw	r2, #10912	@ 0x2aa0
 80021ac:	4293      	cmp	r3, r2
 80021ae:	bf38      	it	cc
 80021b0:	4613      	movcc	r3, r2
 80021b2:	81fb      	strh	r3, [r7, #14]
		value = value>SRXL_CTRL_VALUE_MAX?SRXL_CTRL_VALUE_MAX:value;
 80021b4:	89fb      	ldrh	r3, [r7, #14]
 80021b6:	f24d 5254 	movw	r2, #54612	@ 0xd554
 80021ba:	4293      	cmp	r3, r2
 80021bc:	bf28      	it	cs
 80021be:	4613      	movcs	r3, r2
 80021c0:	81fb      	strh	r3, [r7, #14]

		// Reverse 처리
		if((param.rc.reversedMask>>i)&0x01)
 80021c2:	4b71      	ldr	r3, [pc, #452]	@ (8002388 <SRXL2_parseControlData+0x234>)
 80021c4:	f8d3 2087 	ldr.w	r2, [r3, #135]	@ 0x87
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	fa22 f303 	lsr.w	r3, r2, r3
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d02c      	beq.n	8002230 <SRXL2_parseControlData+0xdc>
		{
			rc->value[i] = map(value,
					SRXL_CTRL_VALUE_MIN, SRXL_CTRL_VALUE_MAX,
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4413      	add	r3, r2
			rc->value[i] = map(value,
 80021e2:	885b      	ldrh	r3, [r3, #2]
 80021e4:	b299      	uxth	r1, r3
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4413      	add	r3, r2
			rc->value[i] = map(value,
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	89f8      	ldrh	r0, [r7, #14]
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	460b      	mov	r3, r1
 80021fc:	f24d 5254 	movw	r2, #54612	@ 0xd554
 8002200:	f642 21a0 	movw	r1, #10912	@ 0x2aa0
 8002204:	f000 fbd6 	bl	80029b4 <map>
 8002208:	4603      	mov	r3, r0
 800220a:	4619      	mov	r1, r3
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4613      	mov	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4413      	add	r3, r2
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4413      	add	r3, r2
 8002218:	889b      	ldrh	r3, [r3, #4]
 800221a:	b29b      	uxth	r3, r3
 800221c:	440b      	add	r3, r1
 800221e:	b299      	uxth	r1, r3
			rc->value[i] = map(value,
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	460a      	mov	r2, r1
 800222a:	f8a3 2005 	strh.w	r2, [r3, #5]
 800222e:	e02b      	b.n	8002288 <SRXL2_parseControlData+0x134>
		}
		else{
			rc->value[i] = map(value,
					SRXL_CTRL_VALUE_MIN, SRXL_CTRL_VALUE_MAX,
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4613      	mov	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4413      	add	r3, r2
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4413      	add	r3, r2
			rc->value[i] = map(value,
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	b299      	uxth	r1, r3
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4613      	mov	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4413      	add	r3, r2
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4413      	add	r3, r2
			rc->value[i] = map(value,
 800224c:	885b      	ldrh	r3, [r3, #2]
 800224e:	b29b      	uxth	r3, r3
 8002250:	89f8      	ldrh	r0, [r7, #14]
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	460b      	mov	r3, r1
 8002256:	f24d 5254 	movw	r2, #54612	@ 0xd554
 800225a:	f642 21a0 	movw	r1, #10912	@ 0x2aa0
 800225e:	f000 fba9 	bl	80029b4 <map>
 8002262:	4603      	mov	r3, r0
 8002264:	4619      	mov	r1, r3
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4613      	mov	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4413      	add	r3, r2
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4413      	add	r3, r2
 8002272:	889b      	ldrh	r3, [r3, #4]
 8002274:	b29b      	uxth	r3, r3
 8002276:	440b      	add	r3, r1
 8002278:	b299      	uxth	r1, r3
			rc->value[i] = map(value,
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4413      	add	r3, r2
 8002282:	460a      	mov	r2, r1
 8002284:	f8a3 2005 	strh.w	r2, [r3, #5]
		}

		// Dead-zone 처리
		if(rc->value[i]>(1500-paramCh[i].DZ) && rc->value[i]<(1500+paramCh[i].DZ)){
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4413      	add	r3, r2
 8002290:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002294:	b29b      	uxth	r3, r3
 8002296:	4619      	mov	r1, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4413      	add	r3, r2
 80022a4:	799b      	ldrb	r3, [r3, #6]
 80022a6:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 80022aa:	3304      	adds	r3, #4
 80022ac:	4299      	cmp	r1, r3
 80022ae:	dd1f      	ble.n	80022f0 <SRXL2_parseControlData+0x19c>
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4613      	mov	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4413      	add	r3, r2
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	799b      	ldrb	r3, [r3, #6]
 80022be:	f203 52db 	addw	r2, r3, #1499	@ 0x5db
 80022c2:	6979      	ldr	r1, [r7, #20]
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	440b      	add	r3, r1
 80022ca:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	429a      	cmp	r2, r3
 80022d2:	db0d      	blt.n	80022f0 <SRXL2_parseControlData+0x19c>
			rc->value[i] = 1500;
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	2200      	movs	r2, #0
 80022de:	f062 0223 	orn	r2, r2, #35	@ 0x23
 80022e2:	715a      	strb	r2, [r3, #5]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f042 0205 	orr.w	r2, r2, #5
 80022ea:	719a      	strb	r2, [r3, #6]
 80022ec:	e000      	b.n	80022f0 <SRXL2_parseControlData+0x19c>
		if(!((rx->data.mask>>i)&0x01)) continue;
 80022ee:	bf00      	nop
	for(int i=0; i<SRXL_MAX_CHANNEL; i++)
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	3301      	adds	r3, #1
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2b1f      	cmp	r3, #31
 80022fa:	f77f af38 	ble.w	800216e <SRXL2_parseControlData+0x1a>
 80022fe:	e000      	b.n	8002302 <SRXL2_parseControlData+0x1ae>
		if(i>=RC_CHANNEL_MAX) break;
 8002300:	bf00      	nop
		}
	}

	if(system_time.time_boot_ms - previousTime > 2000){
 8002302:	4b22      	ldr	r3, [pc, #136]	@ (800238c <SRXL2_parseControlData+0x238>)
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	4b22      	ldr	r3, [pc, #136]	@ (8002390 <SRXL2_parseControlData+0x23c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002310:	d906      	bls.n	8002320 <SRXL2_parseControlData+0x1cc>
		previousTime = system_time.time_boot_ms;
 8002312:	4b1e      	ldr	r3, [pc, #120]	@ (800238c <SRXL2_parseControlData+0x238>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	4a1e      	ldr	r2, [pc, #120]	@ (8002390 <SRXL2_parseControlData+0x23c>)
 8002318:	6013      	str	r3, [r2, #0]
		channelMask = 0;
 800231a:	4b1e      	ldr	r3, [pc, #120]	@ (8002394 <SRXL2_parseControlData+0x240>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
	}

	channelMask |= rx->data.mask;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	4b1b      	ldr	r3, [pc, #108]	@ (8002394 <SRXL2_parseControlData+0x240>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4313      	orrs	r3, r2
 800232a:	4a1a      	ldr	r2, [pc, #104]	@ (8002394 <SRXL2_parseControlData+0x240>)
 800232c:	6013      	str	r3, [r2, #0]
	rc->chancount = countSetBits(channelMask);
 800232e:	4b19      	ldr	r3, [pc, #100]	@ (8002394 <SRXL2_parseControlData+0x240>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f000 f8ed 	bl	8002512 <countSetBits>
 8002338:	4603      	mov	r3, r0
 800233a:	461a      	mov	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	711a      	strb	r2, [r3, #4]
	rc->time_boot_ms = system_time.time_boot_ms;
 8002340:	4b12      	ldr	r3, [pc, #72]	@ (800238c <SRXL2_parseControlData+0x238>)
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	601a      	str	r2, [r3, #0]

	/*
	 * SRXL2에서 rssi가 양수면 %값, 음수면 dBm 값임.
	 * MAVLink는 %값을 0-254 범위로 표현함
	 */
	if(!((rx->data.rssi>>8)&0x1)){
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800234e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10f      	bne.n	8002376 <SRXL2_parseControlData+0x222>
		rc->rssi = map(rx->data.rssi, 0, 100, 0, 254);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800235c:	b298      	uxth	r0, r3
 800235e:	23fe      	movs	r3, #254	@ 0xfe
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	2300      	movs	r3, #0
 8002364:	2264      	movs	r2, #100	@ 0x64
 8002366:	2100      	movs	r1, #0
 8002368:	f000 fb24 	bl	80029b4 <map>
 800236c:	4603      	mov	r3, r0
 800236e:	b2da      	uxtb	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	}

	return 0;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3720      	adds	r7, #32
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	200004d0 	.word	0x200004d0
 8002384:	20000373 	.word	0x20000373
 8002388:	200002e8 	.word	0x200002e8
 800238c:	20000454 	.word	0x20000454
 8002390:	20000444 	.word	0x20000444
 8002394:	20000448 	.word	0x20000448

08002398 <SRXL2_isReceived>:
 * @detail IRQ2가 실행되었는지 확인
 * @retval 0 : 수신 완료
 * @retval -1 : 수신 인터럽트 없음
 * @retval -2 : CRC 불일치
 */
int SRXL2_isReceived(void){
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
	SRXL2_Packet *rx = &packet;
 800239e:	4b29      	ldr	r3, [pc, #164]	@ (8002444 <SRXL2_isReceived+0xac>)
 80023a0:	607b      	str	r3, [r7, #4]
	SRXL2_Header *header = &rx->header;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]

	if(IS_FL_RX == 0){
 80023a6:	2000      	movs	r0, #0
 80023a8:	f000 fb5e 	bl	8002a68 <isFlag>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d102      	bne.n	80023b8 <SRXL2_isReceived+0x20>
		return -1;
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295
 80023b6:	e040      	b.n	800243a <SRXL2_isReceived+0xa2>
	}

	// flag clear
	CLEAR_FL_RX();
 80023b8:	2000      	movs	r0, #0
 80023ba:	f000 fb3b 	bl	8002a34 <clearFlag>

	header->speckrum_id = SPEKTRUM_SRXL_ID;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	22a6      	movs	r2, #166	@ 0xa6
 80023c2:	701a      	strb	r2, [r3, #0]
	header->pType = RC_Buffer[1];
 80023c4:	4b20      	ldr	r3, [pc, #128]	@ (8002448 <SRXL2_isReceived+0xb0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	785a      	ldrb	r2, [r3, #1]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	705a      	strb	r2, [r3, #1]
	header->len = RC_Buffer[2];
 80023ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002448 <SRXL2_isReceived+0xb0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	789a      	ldrb	r2, [r3, #2]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	709a      	strb	r2, [r3, #2]

	rx->Data = RC_Buffer;
 80023d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002448 <SRXL2_isReceived+0xb0>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f8c3 2003 	str.w	r2, [r3, #3]
	rx->crc = ((uint16_t)RC_Buffer[header->len -2] << 8 | RC_Buffer[header->len -1]);
 80023e2:	4b19      	ldr	r3, [pc, #100]	@ (8002448 <SRXL2_isReceived+0xb0>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	789b      	ldrb	r3, [r3, #2]
 80023ea:	3b02      	subs	r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	b21b      	sxth	r3, r3
 80023f2:	021b      	lsls	r3, r3, #8
 80023f4:	b21a      	sxth	r2, r3
 80023f6:	4b14      	ldr	r3, [pc, #80]	@ (8002448 <SRXL2_isReceived+0xb0>)
 80023f8:	6819      	ldr	r1, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	789b      	ldrb	r3, [r3, #2]
 80023fe:	3b01      	subs	r3, #1
 8002400:	440b      	add	r3, r1
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	b21b      	sxth	r3, r3
 8002406:	4313      	orrs	r3, r2
 8002408:	b21b      	sxth	r3, r3
 800240a:	b29a      	uxth	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8a3 2013 	strh.w	r2, [r3, #19]

	if(calculate_crc(RC_Buffer, header->len) != rx->crc){
 8002412:	4b0d      	ldr	r3, [pc, #52]	@ (8002448 <SRXL2_isReceived+0xb0>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	789b      	ldrb	r3, [r3, #2]
 800241a:	4619      	mov	r1, r3
 800241c:	4610      	mov	r0, r2
 800241e:	f000 f815 	bl	800244c <calculate_crc>
 8002422:	4603      	mov	r3, r0
 8002424:	461a      	mov	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f8b3 3013 	ldrh.w	r3, [r3, #19]
 800242c:	b29b      	uxth	r3, r3
 800242e:	429a      	cmp	r2, r3
 8002430:	d002      	beq.n	8002438 <SRXL2_isReceived+0xa0>
		return -2;
 8002432:	f06f 0301 	mvn.w	r3, #1
 8002436:	e000      	b.n	800243a <SRXL2_isReceived+0xa2>
	}

	return 0;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000420 	.word	0x20000420
 8002448:	20000450 	.word	0x20000450

0800244c <calculate_crc>:
 * @parm const uint8_t* data : data address
 * @parm uint8_t len : sizeof(data)
 * @retval uint16_t crc
 */
uint16_t calculate_crc(const uint8_t *data, uint8_t len)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0x0000;
 8002458:	2300      	movs	r3, #0
 800245a:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len-2; i++) {
 800245c:	2300      	movs	r3, #0
 800245e:	737b      	strb	r3, [r7, #13]
 8002460:	e029      	b.n	80024b6 <calculate_crc+0x6a>
		crc ^= ((uint16_t)data[i] << 8);
 8002462:	7b7b      	ldrb	r3, [r7, #13]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	4413      	add	r3, r2
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	b21b      	sxth	r3, r3
 800246c:	021b      	lsls	r3, r3, #8
 800246e:	b21a      	sxth	r2, r3
 8002470:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002474:	4053      	eors	r3, r2
 8002476:	b21b      	sxth	r3, r3
 8002478:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 800247a:	2300      	movs	r3, #0
 800247c:	733b      	strb	r3, [r7, #12]
 800247e:	e014      	b.n	80024aa <calculate_crc+0x5e>
			if (crc & 0x8000)
 8002480:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002484:	2b00      	cmp	r3, #0
 8002486:	da0a      	bge.n	800249e <calculate_crc+0x52>
				crc = (crc << 1) ^ 0x1021;
 8002488:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	b21b      	sxth	r3, r3
 8002490:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8002494:	f083 0301 	eor.w	r3, r3, #1
 8002498:	b21b      	sxth	r3, r3
 800249a:	81fb      	strh	r3, [r7, #14]
 800249c:	e002      	b.n	80024a4 <calculate_crc+0x58>
			else
				crc = (crc << 1);
 800249e:	89fb      	ldrh	r3, [r7, #14]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 80024a4:	7b3b      	ldrb	r3, [r7, #12]
 80024a6:	3301      	adds	r3, #1
 80024a8:	733b      	strb	r3, [r7, #12]
 80024aa:	7b3b      	ldrb	r3, [r7, #12]
 80024ac:	2b07      	cmp	r3, #7
 80024ae:	d9e7      	bls.n	8002480 <calculate_crc+0x34>
	for (uint8_t i = 0; i < len-2; i++) {
 80024b0:	7b7b      	ldrb	r3, [r7, #13]
 80024b2:	3301      	adds	r3, #1
 80024b4:	737b      	strb	r3, [r7, #13]
 80024b6:	7b7a      	ldrb	r2, [r7, #13]
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	3b02      	subs	r3, #2
 80024bc:	429a      	cmp	r2, r3
 80024be:	dbd0      	blt.n	8002462 <calculate_crc+0x16>
		}
	}

	return crc;
 80024c0:	89fb      	ldrh	r3, [r7, #14]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <insert_crc>:
 * @parm uint8_t* data : data address
 * @parm uint8_t len : sizeof(data)
 * @retval uint16_t crc
 */
uint16_t insert_crc(uint8_t *data, uint8_t len)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b084      	sub	sp, #16
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = calculate_crc(data, len);
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	4619      	mov	r1, r3
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ffb4 	bl	800244c <calculate_crc>
 80024e4:	4603      	mov	r3, r0
 80024e6:	81fb      	strh	r3, [r7, #14]

	data[len -2] = (uint8_t)(crc >> 8);
 80024e8:	89fb      	ldrh	r3, [r7, #14]
 80024ea:	0a1b      	lsrs	r3, r3, #8
 80024ec:	b299      	uxth	r1, r3
 80024ee:	78fb      	ldrb	r3, [r7, #3]
 80024f0:	3b02      	subs	r3, #2
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	b2ca      	uxtb	r2, r1
 80024f8:	701a      	strb	r2, [r3, #0]
	data[len -1] = (uint8_t)(crc & 0xFF);
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	3b01      	subs	r3, #1
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	89fa      	ldrh	r2, [r7, #14]
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	701a      	strb	r2, [r3, #0]

	return crc;
 8002508:	89fb      	ldrh	r3, [r7, #14]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <countSetBits>:
 *	Set bit(1)의 갯수를 세는 함수
 *	@parm uint32_t i : bits
 *	@retval uint8_t num of set bits
 */
uint8_t countSetBits(uint32_t i)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
     // C or C++: use uint32_t
     i = i - ((i >> 1) & 0x55555555);        // add pairs of bits
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	085b      	lsrs	r3, r3, #1
 800251e:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	607b      	str	r3, [r7, #4]
     i = (i & 0x33333333) + ((i >> 2) & 0x33333333);  // quads
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f003 3233 	and.w	r2, r3, #858993459	@ 0x33333333
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	089b      	lsrs	r3, r3, #2
 8002532:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8002536:	4413      	add	r3, r2
 8002538:	607b      	str	r3, [r7, #4]
     i = (i + (i >> 4)) & 0x0F0F0F0F;        // groups of 8
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	091a      	lsrs	r2, r3, #4
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8002546:	607b      	str	r3, [r7, #4]
     return (uint8_t)((i * 0x01010101) >> 24);          // horizontal sum of bytes
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	021b      	lsls	r3, r3, #8
 800254e:	4413      	add	r3, r2
 8002550:	041a      	lsls	r2, r3, #16
 8002552:	4413      	add	r3, r2
 8002554:	0e1b      	lsrs	r3, r3, #24
 8002556:	b2db      	uxtb	r3, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <LL_USART_IsActiveFlag_TXE>:
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002574:	2b80      	cmp	r3, #128	@ 0x80
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
}
 800257e:	4618      	mov	r0, r3
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <LL_USART_TransmitData8>:
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	460b      	mov	r3, r1
 8002594:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002596:	78fa      	ldrb	r2, [r7, #3]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	605a      	str	r2, [r3, #4]
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <LL_GPIO_SetOutputPin>:
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	619a      	str	r2, [r3, #24]
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <LL_GPIO_ResetOutputPin>:
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	041a      	lsls	r2, r3, #16
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	619a      	str	r2, [r3, #24]
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <RC_Initialization>:
 * @brief RC 초기 설정
 * @detail RC 종류에 따라 메모리 설정
 * 			쓰로틀 체크 및 ESC 캘리브레이션 수행
 */
int RC_Initialization(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 80025ea:	2101      	movs	r1, #1
 80025ec:	4838      	ldr	r0, [pc, #224]	@ (80026d0 <RC_Initialization+0xec>)
 80025ee:	f7ff ffdb 	bl	80025a8 <LL_GPIO_SetOutputPin>

	// 메모리 설정
	for(int i=0; i<8*sizeof(param.rc.PROTOCOLS); i++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	e033      	b.n	8002660 <RC_Initialization+0x7c>
	{
		if(!(param.rc.PROTOCOLS&(0x1<<i))) continue;
 80025f8:	4b36      	ldr	r3, [pc, #216]	@ (80026d4 <RC_Initialization+0xf0>)
 80025fa:	f8b3 3081 	ldrh.w	r3, [r3, #129]	@ 0x81
 80025fe:	b29b      	uxth	r3, r3
 8002600:	461a      	mov	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	fa42 f303 	asr.w	r3, r2, r3
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d023      	beq.n	8002658 <RC_Initialization+0x74>

		switch(i){
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d003      	beq.n	800261e <RC_Initialization+0x3a>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b08      	cmp	r3, #8
 800261a:	d00a      	beq.n	8002632 <RC_Initialization+0x4e>
 800261c:	e013      	b.n	8002646 <RC_Initialization+0x62>
		case PPM:
			RC_Buffer = malloc(PPM_MAX_BUFFER_SIZE*sizeof(uint16_t));
 800261e:	2010      	movs	r0, #16
 8002620:	f00a f96e 	bl	800c900 <malloc>
 8002624:	4603      	mov	r3, r0
 8002626:	461a      	mov	r2, r3
 8002628:	4b2b      	ldr	r3, [pc, #172]	@ (80026d8 <RC_Initialization+0xf4>)
 800262a:	601a      	str	r2, [r3, #0]
			PPM_init();
 800262c:	f7ff fade 	bl	8001bec <PPM_init>
			break;
 8002630:	e009      	b.n	8002646 <RC_Initialization+0x62>
		case SRXL2:
			RC_Buffer = malloc(SRXL_MAX_BUFFER_SIZE*sizeof(uint8_t));
 8002632:	2050      	movs	r0, #80	@ 0x50
 8002634:	f00a f964 	bl	800c900 <malloc>
 8002638:	4603      	mov	r3, r0
 800263a:	461a      	mov	r2, r3
 800263c:	4b26      	ldr	r3, [pc, #152]	@ (80026d8 <RC_Initialization+0xf4>)
 800263e:	601a      	str	r2, [r3, #0]
			SRXL2_connect();
 8002640:	f7ff fbf4 	bl	8001e2c <SRXL2_connect>
			break;
 8002644:	bf00      	nop
		}

		/*
		 * Enable multiple receiver support
		 */
		if(param.rc.OPTIONS&(0x1<<10)) continue;
 8002646:	4b23      	ldr	r3, [pc, #140]	@ (80026d4 <RC_Initialization+0xf0>)
 8002648:	f8b3 307f 	ldrh.w	r3, [r3, #127]	@ 0x7f
 800264c:	b29b      	uxth	r3, r3
 800264e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002652:	2b00      	cmp	r3, #0
 8002654:	d008      	beq.n	8002668 <RC_Initialization+0x84>
 8002656:	e000      	b.n	800265a <RC_Initialization+0x76>
		if(!(param.rc.PROTOCOLS&(0x1<<i))) continue;
 8002658:	bf00      	nop
	for(int i=0; i<8*sizeof(param.rc.PROTOCOLS); i++)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	3301      	adds	r3, #1
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b0f      	cmp	r3, #15
 8002664:	d9c8      	bls.n	80025f8 <RC_Initialization+0x14>
 8002666:	e000      	b.n	800266a <RC_Initialization+0x86>
		else break;
 8002668:	bf00      	nop
	}

	// 쓰로틀 체크 & ESC 캘리브레이션
	uint32_t previous_time = system_time.time_boot_ms;
 800266a:	4b1c      	ldr	r3, [pc, #112]	@ (80026dc <RC_Initialization+0xf8>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	60bb      	str	r3, [r7, #8]
	while(1){
		uint8_t flag_cali =  system_time.time_boot_ms - previous_time > 5000;
 8002670:	4b1a      	ldr	r3, [pc, #104]	@ (80026dc <RC_Initialization+0xf8>)
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800267c:	4293      	cmp	r3, r2
 800267e:	bf8c      	ite	hi
 8002680:	2301      	movhi	r3, #1
 8002682:	2300      	movls	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	71fb      	strb	r3, [r7, #7]
		uint8_t retVal = RC_checkThrottle();
 8002688:	f000 f87a 	bl	8002780 <RC_checkThrottle>
 800268c:	4603      	mov	r3, r0
 800268e:	71bb      	strb	r3, [r7, #6]

		// 쓰로틀이 low 인 경우나 신호가 없는 경우
		if(0 == retVal && 0 == flag_cali) break;
 8002690:	79bb      	ldrb	r3, [r7, #6]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d102      	bne.n	800269c <RC_Initialization+0xb8>
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00f      	beq.n	80026bc <RC_Initialization+0xd8>
		else if(-2 == retVal) return retVal;

		BuzzerEnableThrottleHigh();
 800269c:	f7fe ffce 	bl	800163c <BuzzerEnableThrottleHigh>

		// calibration 조건(5s 동안 High)를 만족하지 못하면 while
		if(0 == flag_cali) continue;
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d007      	beq.n	80026b6 <RC_Initialization+0xd2>

		// ESC Calibration
		BuzzerDisableThrottleHigh();
 80026a6:	f7fe ffe1 	bl	800166c <BuzzerDisableThrottleHigh>
		if(RC_enterESCcalibration()==0) break;
 80026aa:	f000 f8fb 	bl	80028a4 <RC_enterESCcalibration>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <RC_Initialization+0xd6>
 80026b4:	e7dc      	b.n	8002670 <RC_Initialization+0x8c>
		if(0 == flag_cali) continue;
 80026b6:	bf00      	nop
	while(1){
 80026b8:	e7da      	b.n	8002670 <RC_Initialization+0x8c>
		if(RC_enterESCcalibration()==0) break;
 80026ba:	bf00      	nop
	}

	LL_GPIO_ResetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 80026bc:	2101      	movs	r1, #1
 80026be:	4804      	ldr	r0, [pc, #16]	@ (80026d0 <RC_Initialization+0xec>)
 80026c0:	f7ff ff80 	bl	80025c4 <LL_GPIO_ResetOutputPin>

	return 0;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
 80026d4:	200002e8 	.word	0x200002e8
 80026d8:	20000450 	.word	0x20000450
 80026dc:	20000454 	.word	0x20000454

080026e0 <RC_GetData>:
 * @retval 0 : 정상 수신
 * @retval -1 : 수신 버퍼 없음
 * @retval -2 : 조종 데이터가 아님
 */
int RC_GetData(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
	int retVal = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	607b      	str	r3, [r7, #4]

	for(int i=0; i<8*sizeof(param.rc.PROTOCOLS); i++)
 80026ea:	2300      	movs	r3, #0
 80026ec:	603b      	str	r3, [r7, #0]
 80026ee:	e029      	b.n	8002744 <RC_GetData+0x64>
	{
		// 모든 프로토콜에 대해 확인하되, 파마리터에서 설정된 것만 받아옴
		if(!((param.rc.PROTOCOLS>>i)&0x1)) continue;
 80026f0:	4b21      	ldr	r3, [pc, #132]	@ (8002778 <RC_GetData+0x98>)
 80026f2:	f8b3 3081 	ldrh.w	r3, [r3, #129]	@ 0x81
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	fa42 f303 	asr.w	r3, r2, r3
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d019      	beq.n	800273c <RC_GetData+0x5c>

		switch(i){
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d003      	beq.n	8002716 <RC_GetData+0x36>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b08      	cmp	r3, #8
 8002712:	d004      	beq.n	800271e <RC_GetData+0x3e>
 8002714:	e007      	b.n	8002726 <RC_GetData+0x46>
		case PPM:
			retVal = PPM_getControlData();
 8002716:	f7ff fabb 	bl	8001c90 <PPM_getControlData>
 800271a:	6078      	str	r0, [r7, #4]
			break;
 800271c:	e003      	b.n	8002726 <RC_GetData+0x46>
		case SRXL2:
			retVal = SRXL2_getControlData();
 800271e:	f7ff fbeb 	bl	8001ef8 <SRXL2_getControlData>
 8002722:	6078      	str	r0, [r7, #4]
			break;
 8002724:	bf00      	nop
		}

		/*
		 * Enable multiple receiver support
		 */
		if((param.rc.OPTIONS>>10)&0x1) continue;
 8002726:	4b14      	ldr	r3, [pc, #80]	@ (8002778 <RC_GetData+0x98>)
 8002728:	f8b3 307f 	ldrh.w	r3, [r3, #127]	@ 0x7f
 800272c:	b29b      	uxth	r3, r3
 800272e:	0a9b      	lsrs	r3, r3, #10
 8002730:	b29b      	uxth	r3, r3
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d008      	beq.n	800274c <RC_GetData+0x6c>
 800273a:	e000      	b.n	800273e <RC_GetData+0x5e>
		if(!((param.rc.PROTOCOLS>>i)&0x1)) continue;
 800273c:	bf00      	nop
	for(int i=0; i<8*sizeof(param.rc.PROTOCOLS); i++)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	3301      	adds	r3, #1
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	2b0f      	cmp	r3, #15
 8002748:	d9d2      	bls.n	80026f0 <RC_GetData+0x10>
 800274a:	e000      	b.n	800274e <RC_GetData+0x6e>
		else break;
 800274c:	bf00      	nop
	}

	if(retVal == -1 || retVal ==-2) return retVal;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002754:	d003      	beq.n	800275e <RC_GetData+0x7e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f113 0f02 	cmn.w	r3, #2
 800275c:	d101      	bne.n	8002762 <RC_GetData+0x82>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	e006      	b.n	8002770 <RC_GetData+0x90>
	if(retVal!=0xf2) fsFlag = 0;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2bf2      	cmp	r3, #242	@ 0xf2
 8002766:	d002      	beq.n	800276e <RC_GetData+0x8e>
 8002768:	4b04      	ldr	r3, [pc, #16]	@ (800277c <RC_GetData+0x9c>)
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]

	return 0;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	200002e8 	.word	0x200002e8
 800277c:	200002e0 	.word	0x200002e0

08002780 <RC_checkThrottle>:
 * @retval 0 : 쓰로틀 정상
 * @retval -1 : 쓰로틀 비정상
 * @retval -2 : RC 신호 없음
 */
int RC_checkThrottle(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
	uint8_t num = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	71fb      	strb	r3, [r7, #7]
	while(RC_GetData()){
 800278a:	e002      	b.n	8002792 <RC_checkThrottle+0x12>
		if(num++ > 1000) return -2;
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	3301      	adds	r3, #1
 8002790:	71fb      	strb	r3, [r7, #7]
	while(RC_GetData()){
 8002792:	f7ff ffa5 	bl	80026e0 <RC_GetData>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f7      	bne.n	800278c <RC_checkThrottle+0xc>
	}

	if(RC_channels.value[param.rc.map.THR]>1050) return -1;
 800279c:	4b0a      	ldr	r3, [pc, #40]	@ (80027c8 <RC_checkThrottle+0x48>)
 800279e:	f893 312d 	ldrb.w	r3, [r3, #301]	@ 0x12d
 80027a2:	4a0a      	ldr	r2, [pc, #40]	@ (80027cc <RC_checkThrottle+0x4c>)
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	f240 421a 	movw	r2, #1050	@ 0x41a
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d902      	bls.n	80027bc <RC_checkThrottle+0x3c>
 80027b6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ba:	e000      	b.n	80027be <RC_checkThrottle+0x3e>

	return 0;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200002e8 	.word	0x200002e8
 80027cc:	200004d0 	.word	0x200004d0

080027d0 <RC_receiveIRQ2>:
 *
 * @retval 0 : IRQ2 처리 완료
 * @retval 1 : (half_duplex) 송신 패킷임
 */
int RC_receiveIRQ2(const uint16_t data)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	80fb      	strh	r3, [r7, #6]
	SET_FL_UART_USING();
 80027da:	2002      	movs	r0, #2
 80027dc:	f000 f910 	bl	8002a00 <setFlag>
	// RC_rxFlag.half_using = 1;

	for(int i=0; i<8*sizeof(param.rc.PROTOCOLS); i++)
 80027e0:	2300      	movs	r3, #0
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	e040      	b.n	8002868 <RC_receiveIRQ2+0x98>
	{
		if(!((param.rc.PROTOCOLS>>i)&0x1)) continue;
 80027e6:	4b25      	ldr	r3, [pc, #148]	@ (800287c <RC_receiveIRQ2+0xac>)
 80027e8:	f8b3 3081 	ldrh.w	r3, [r3, #129]	@ 0x81
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	461a      	mov	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	fa42 f303 	asr.w	r3, r2, r3
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d030      	beq.n	8002860 <RC_receiveIRQ2+0x90>

		switch(i){
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d003      	beq.n	800280c <RC_receiveIRQ2+0x3c>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b08      	cmp	r3, #8
 8002808:	d008      	beq.n	800281c <RC_receiveIRQ2+0x4c>
 800280a:	e01e      	b.n	800284a <RC_receiveIRQ2+0x7a>
		case PPM:
			PPM_readData(data);
 800280c:	88fb      	ldrh	r3, [r7, #6]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff f9f8 	bl	8001c04 <PPM_readData>
			SET_FL_RX();
 8002814:	2000      	movs	r0, #0
 8002816:	f000 f8f3 	bl	8002a00 <setFlag>
			break;
 800281a:	e016      	b.n	800284a <RC_receiveIRQ2+0x7a>
		case SRXL2:
			// Half-Duplex에서 송신한 패킷을 무시
			if(IS_FL_UART_TX == 1) return 1;
 800281c:	2001      	movs	r0, #1
 800281e:	f000 f923 	bl	8002a68 <isFlag>
 8002822:	4603      	mov	r3, r0
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <RC_receiveIRQ2+0x5c>
 8002828:	2301      	movs	r3, #1
 800282a:	e023      	b.n	8002874 <RC_receiveIRQ2+0xa4>

			// 모든 바이트를 읽었는지 검사
			if(SRXL2_readByteIRQ2(data) == 0){
 800282c:	88fb      	ldrh	r3, [r7, #6]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fbab 	bl	8001f8c <SRXL2_readByteIRQ2>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d105      	bne.n	8002848 <RC_receiveIRQ2+0x78>
				SET_FL_RX();
 800283c:	2000      	movs	r0, #0
 800283e:	f000 f8df 	bl	8002a00 <setFlag>
				CLEAR_FL_UART_USING();
 8002842:	2002      	movs	r0, #2
 8002844:	f000 f8f6 	bl	8002a34 <clearFlag>
			}
			break;
 8002848:	bf00      	nop
		}

		/*
		 * Enable multiple receiver support
		 */
		if((param.rc.OPTIONS>>10)&0x1) continue;
 800284a:	4b0c      	ldr	r3, [pc, #48]	@ (800287c <RC_receiveIRQ2+0xac>)
 800284c:	f8b3 307f 	ldrh.w	r3, [r3, #127]	@ 0x7f
 8002850:	b29b      	uxth	r3, r3
 8002852:	0a9b      	lsrs	r3, r3, #10
 8002854:	b29b      	uxth	r3, r3
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d008      	beq.n	8002870 <RC_receiveIRQ2+0xa0>
 800285e:	e000      	b.n	8002862 <RC_receiveIRQ2+0x92>
		if(!((param.rc.PROTOCOLS>>i)&0x1)) continue;
 8002860:	bf00      	nop
	for(int i=0; i<8*sizeof(param.rc.PROTOCOLS); i++)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	3301      	adds	r3, #1
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b0f      	cmp	r3, #15
 800286c:	d9bb      	bls.n	80027e6 <RC_receiveIRQ2+0x16>
 800286e:	e000      	b.n	8002872 <RC_receiveIRQ2+0xa2>
		else break;
 8002870:	bf00      	nop
	}

	return 0;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	200002e8 	.word	0x200002e8

08002880 <RC_isBufferInit>:
 *
 * @parm None
 * @retval 0 : 설정됨
 * @retval -1 : 설정되지 않음
 */
int RC_isBufferInit(void){
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
	if(RC_Buffer == 0) return -1;
 8002884:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <RC_isBufferInit+0x20>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d102      	bne.n	8002892 <RC_isBufferInit+0x12>
 800288c:	f04f 33ff 	mov.w	r3, #4294967295
 8002890:	e000      	b.n	8002894 <RC_isBufferInit+0x14>
	return 0;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	20000450 	.word	0x20000450

080028a4 <RC_enterESCcalibration>:
 *
 * @parm None
 * @retval -2 : 조종기 이상
 */
int RC_enterESCcalibration()
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
	while(1)
	{
		uint8_t num = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	71fb      	strb	r3, [r7, #7]
		while(RC_GetData()){
 80028ae:	e002      	b.n	80028b6 <RC_enterESCcalibration+0x12>
			if(num++ > 1000) return -2;
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	3301      	adds	r3, #1
 80028b4:	71fb      	strb	r3, [r7, #7]
		while(RC_GetData()){
 80028b6:	f7ff ff13 	bl	80026e0 <RC_GetData>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f7      	bne.n	80028b0 <RC_enterESCcalibration+0xc>
		}

		if(RC_channels.value[param.rc.map.THR] > 1800){
 80028c0:	4b0c      	ldr	r3, [pc, #48]	@ (80028f4 <RC_enterESCcalibration+0x50>)
 80028c2:	f893 312d 	ldrb.w	r3, [r3, #301]	@ 0x12d
 80028c6:	4a0c      	ldr	r2, [pc, #48]	@ (80028f8 <RC_enterESCcalibration+0x54>)
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80028d6:	d903      	bls.n	80028e0 <RC_enterESCcalibration+0x3c>
			SERVO_doCalibrate(1);
 80028d8:	2001      	movs	r0, #1
 80028da:	f000 fa01 	bl	8002ce0 <SERVO_doCalibrate>
			continue;
 80028de:	e003      	b.n	80028e8 <RC_enterESCcalibration+0x44>
		}
		SERVO_doCalibrate(0);
 80028e0:	2000      	movs	r0, #0
 80028e2:	f000 f9fd 	bl	8002ce0 <SERVO_doCalibrate>
		break;
 80028e6:	e000      	b.n	80028ea <RC_enterESCcalibration+0x46>
	{
 80028e8:	e7df      	b.n	80028aa <RC_enterESCcalibration+0x6>
	}
	return 0;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	200002e8 	.word	0x200002e8
 80028f8:	200004d0 	.word	0x200004d0

080028fc <RC_setFailsafe>:
 * @brief Failsafe 모드로 진입
 *
 * @retval 0 : Failsafe 해제됨
 */
int RC_setFailsafe(uint16_t protocol)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	80fb      	strh	r3, [r7, #6]
	// 만약 수신기가 여러 개인 경우, fs를 발동하지 않음.
	if((param.rc.OPTIONS>>10)&0x1) {
 8002906:	4b0b      	ldr	r3, [pc, #44]	@ (8002934 <RC_setFailsafe+0x38>)
 8002908:	f8b3 307f 	ldrh.w	r3, [r3, #127]	@ 0x7f
 800290c:	b29b      	uxth	r3, r3
 800290e:	0a9b      	lsrs	r3, r3, #10
 8002910:	b29b      	uxth	r3, r3
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <RC_setFailsafe+0x22>
		// (추가) 수신기 하나에서 FS 임을 알림
		return 0;
 800291a:	2300      	movs	r3, #0
 800291c:	e003      	b.n	8002926 <RC_setFailsafe+0x2a>
	}

	fsFlag = 1;
 800291e:	4b06      	ldr	r3, [pc, #24]	@ (8002938 <RC_setFailsafe+0x3c>)
 8002920:	2201      	movs	r2, #1
 8002922:	701a      	strb	r2, [r3, #0]

	return 0xf2;
 8002924:	23f2      	movs	r3, #242	@ 0xf2
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	200002e8 	.word	0x200002e8
 8002938:	200002e0 	.word	0x200002e0

0800293c <RC_halfDuplex_Transmit>:
 * @parm uint8_t len : sizeof(data)
 * @retval 0 : 송신 완료.
 * @retval -1 : 송신 실패.
 */
int RC_halfDuplex_Transmit(uint8_t *data, uint8_t len)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	70fb      	strb	r3, [r7, #3]
	if(IS_FL_UART_USING == 1) return -1;
 8002948:	2002      	movs	r0, #2
 800294a:	f000 f88d 	bl	8002a68 <isFlag>
 800294e:	4603      	mov	r3, r0
 8002950:	2b01      	cmp	r3, #1
 8002952:	d102      	bne.n	800295a <RC_halfDuplex_Transmit+0x1e>
 8002954:	f04f 33ff 	mov.w	r3, #4294967295
 8002958:	e025      	b.n	80029a6 <RC_halfDuplex_Transmit+0x6a>

	SET_FL_UART_TX();
 800295a:	2001      	movs	r0, #1
 800295c:	f000 f850 	bl	8002a00 <setFlag>
	SET_FL_UART_USING();
 8002960:	2002      	movs	r0, #2
 8002962:	f000 f84d 	bl	8002a00 <setFlag>

	for(int i=0; i<len; i++){
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	e011      	b.n	8002990 <RC_halfDuplex_Transmit+0x54>
		while(!LL_USART_IsActiveFlag_TXE(USART1));
 800296c:	bf00      	nop
 800296e:	4810      	ldr	r0, [pc, #64]	@ (80029b0 <RC_halfDuplex_Transmit+0x74>)
 8002970:	f7ff fdf8 	bl	8002564 <LL_USART_IsActiveFlag_TXE>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f9      	beq.n	800296e <RC_halfDuplex_Transmit+0x32>
		LL_USART_TransmitData8(USART1, data[i]);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	4413      	add	r3, r2
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	4619      	mov	r1, r3
 8002984:	480a      	ldr	r0, [pc, #40]	@ (80029b0 <RC_halfDuplex_Transmit+0x74>)
 8002986:	f7ff fe00 	bl	800258a <LL_USART_TransmitData8>
	for(int i=0; i<len; i++){
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	3301      	adds	r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	429a      	cmp	r2, r3
 8002996:	dbe9      	blt.n	800296c <RC_halfDuplex_Transmit+0x30>
	}

	CLEAR_FL_UART_TX();
 8002998:	2001      	movs	r0, #1
 800299a:	f000 f84b 	bl	8002a34 <clearFlag>
	CLEAR_FL_UART_USING();
 800299e:	2002      	movs	r0, #2
 80029a0:	f000 f848 	bl	8002a34 <clearFlag>
	return 0;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40011000 	.word	0x40011000

080029b4 <map>:
 * @parm uint16_t in_max : x의 최댓값
 * @parm uint16_t out_min : x의 최솟값
 * @parm uint16_t out_max : x의 최댓값
 * @retVal uint16_t : 변환 값
 */
uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 80029b4:	b490      	push	{r4, r7}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4604      	mov	r4, r0
 80029bc:	4608      	mov	r0, r1
 80029be:	4611      	mov	r1, r2
 80029c0:	461a      	mov	r2, r3
 80029c2:	4623      	mov	r3, r4
 80029c4:	80fb      	strh	r3, [r7, #6]
 80029c6:	4603      	mov	r3, r0
 80029c8:	80bb      	strh	r3, [r7, #4]
 80029ca:	460b      	mov	r3, r1
 80029cc:	807b      	strh	r3, [r7, #2]
 80029ce:	4613      	mov	r3, r2
 80029d0:	803b      	strh	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80029d2:	88fa      	ldrh	r2, [r7, #6]
 80029d4:	88bb      	ldrh	r3, [r7, #4]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	8a39      	ldrh	r1, [r7, #16]
 80029da:	883a      	ldrh	r2, [r7, #0]
 80029dc:	1a8a      	subs	r2, r1, r2
 80029de:	fb03 f202 	mul.w	r2, r3, r2
 80029e2:	8879      	ldrh	r1, [r7, #2]
 80029e4:	88bb      	ldrh	r3, [r7, #4]
 80029e6:	1acb      	subs	r3, r1, r3
 80029e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	883b      	ldrh	r3, [r7, #0]
 80029f0:	4413      	add	r3, r2
 80029f2:	b29b      	uxth	r3, r3
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc90      	pop	{r4, r7}
 80029fc:	4770      	bx	lr
	...

08002a00 <setFlag>:



void setFlag(RC_FLAG i)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
	rxFlag |= (0x1<<i);
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	b25a      	sxtb	r2, r3
 8002a14:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <setFlag+0x30>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	b25b      	sxtb	r3, r3
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	b25b      	sxtb	r3, r3
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	4b03      	ldr	r3, [pc, #12]	@ (8002a30 <setFlag+0x30>)
 8002a22:	701a      	strb	r2, [r3, #0]
	return;
 8002a24:	bf00      	nop
}
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	2000044c 	.word	0x2000044c

08002a34 <clearFlag>:

void clearFlag(RC_FLAG i)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	71fb      	strb	r3, [r7, #7]
	rxFlag &= (uint8_t)(~(0x1<<i));
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	2201      	movs	r2, #1
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	4b05      	ldr	r3, [pc, #20]	@ (8002a64 <clearFlag+0x30>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	4013      	ands	r3, r2
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	4b03      	ldr	r3, [pc, #12]	@ (8002a64 <clearFlag+0x30>)
 8002a56:	701a      	strb	r2, [r3, #0]
	return;
 8002a58:	bf00      	nop
}
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	2000044c 	.word	0x2000044c

08002a68 <isFlag>:


int isFlag(RC_FLAG i)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]
	return (rxFlag>>i)&0x1;
 8002a72:	4b07      	ldr	r3, [pc, #28]	@ (8002a90 <isFlag+0x28>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	fa42 f303 	asr.w	r3, r2, r3
 8002a7e:	f003 0301 	and.w	r3, r3, #1
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	2000044c 	.word	0x2000044c

08002a94 <LL_TIM_EnableCounter>:
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f043 0201 	orr.w	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	601a      	str	r2, [r3, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <LL_TIM_IsEnabledCounter>:
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <LL_TIM_IsEnabledCounter+0x18>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <LL_TIM_IsEnabledCounter+0x1a>
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <LL_TIM_SetPrescaler>:
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <LL_TIM_SetAutoReload>:
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <LL_TIM_CC_EnableChannel>:
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1a      	ldr	r2, [r3, #32]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	621a      	str	r2, [r3, #32]
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <LL_TIM_CC_DisableChannel>:
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1a      	ldr	r2, [r3, #32]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	43db      	mvns	r3, r3
 8002b46:	401a      	ands	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	621a      	str	r2, [r3, #32]
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f043 0201 	orr.w	r2, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	615a      	str	r2, [r3, #20]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <SERVO_Initialization>:
 * @detail 출력 프로토콜, 주기 변경
 * @parm none
 * @retval none
 */
int SERVO_Initialization(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
	// PARAM_SERVO* servo = &paramServo;

	LL_TIM_EnableCounter(TIM1);
 8002b7c:	4814      	ldr	r0, [pc, #80]	@ (8002bd0 <SERVO_Initialization+0x58>)
 8002b7e:	f7ff ff89 	bl	8002a94 <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(TIM3);
 8002b82:	4814      	ldr	r0, [pc, #80]	@ (8002bd4 <SERVO_Initialization+0x5c>)
 8002b84:	f7ff ff86 	bl	8002a94 <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(TIM5);
 8002b88:	4813      	ldr	r0, [pc, #76]	@ (8002bd8 <SERVO_Initialization+0x60>)
 8002b8a:	f7ff ff83 	bl	8002a94 <LL_TIM_EnableCounter>

	if(!(LL_TIM_IsEnabledCounter(TIM1) &&
 8002b8e:	4810      	ldr	r0, [pc, #64]	@ (8002bd0 <SERVO_Initialization+0x58>)
 8002b90:	f7ff ff90 	bl	8002ab4 <LL_TIM_IsEnabledCounter>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d011      	beq.n	8002bbe <SERVO_Initialization+0x46>
			LL_TIM_IsEnabledCounter(TIM3) &&
 8002b9a:	480e      	ldr	r0, [pc, #56]	@ (8002bd4 <SERVO_Initialization+0x5c>)
 8002b9c:	f7ff ff8a 	bl	8002ab4 <LL_TIM_IsEnabledCounter>
 8002ba0:	4603      	mov	r3, r0
	if(!(LL_TIM_IsEnabledCounter(TIM1) &&
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00b      	beq.n	8002bbe <SERVO_Initialization+0x46>
			LL_TIM_IsEnabledCounter(TIM4) &&
 8002ba6:	480d      	ldr	r0, [pc, #52]	@ (8002bdc <SERVO_Initialization+0x64>)
 8002ba8:	f7ff ff84 	bl	8002ab4 <LL_TIM_IsEnabledCounter>
 8002bac:	4603      	mov	r3, r0
			LL_TIM_IsEnabledCounter(TIM3) &&
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d005      	beq.n	8002bbe <SERVO_Initialization+0x46>
			LL_TIM_IsEnabledCounter(TIM5)
 8002bb2:	4809      	ldr	r0, [pc, #36]	@ (8002bd8 <SERVO_Initialization+0x60>)
 8002bb4:	f7ff ff7e 	bl	8002ab4 <LL_TIM_IsEnabledCounter>
 8002bb8:	4603      	mov	r3, r0
	if(!(LL_TIM_IsEnabledCounter(TIM1) &&
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d102      	bne.n	8002bc4 <SERVO_Initialization+0x4c>
			)) return -1;
 8002bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc2:	e002      	b.n	8002bca <SERVO_Initialization+0x52>

	SERVO_doDisarm();
 8002bc4:	f000 f842 	bl	8002c4c <SERVO_doDisarm>

	return 0;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40010000 	.word	0x40010000
 8002bd4:	40000400 	.word	0x40000400
 8002bd8:	40000c00 	.word	0x40000c00
 8002bdc:	40000800 	.word	0x40000800

08002be0 <SERVO_doArm>:
 * @brief 모든 채널 출력 활성화
 * @parm none
 * @retval none
 */
void SERVO_doArm(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
	configurePWM(param.servo.RATE);
 8002be6:	4b16      	ldr	r3, [pc, #88]	@ (8002c40 <SERVO_doArm+0x60>)
 8002be8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 f93a 	bl	8002e68 <configurePWM>

	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	71fb      	strb	r3, [r7, #7]
 8002bf8:	e014      	b.n	8002c24 <SERVO_doArm+0x44>
	{
	    // 해당 서보 채널이 활성화되어 있지 않으면 다음으로 건너뜀.
		if(!((param.servo.GPIO_MASK >> i)&0x1)){
 8002bfa:	4b11      	ldr	r3, [pc, #68]	@ (8002c40 <SERVO_doArm+0x60>)
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <SERVO_doArm+0x3c>
			continue;
		}

		doArm2Channel(i+1, 1);
 8002c0c:	79fb      	ldrb	r3, [r7, #7]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2101      	movs	r1, #1
 8002c14:	4618      	mov	r0, r3
 8002c16:	f000 f899 	bl	8002d4c <doArm2Channel>
 8002c1a:	e000      	b.n	8002c1e <SERVO_doArm+0x3e>
			continue;
 8002c1c:	bf00      	nop
	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	3301      	adds	r3, #1
 8002c22:	71fb      	strb	r3, [r7, #7]
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	2b0b      	cmp	r3, #11
 8002c28:	d9e7      	bls.n	8002bfa <SERVO_doArm+0x1a>
	}

	LL_TIM_GenerateEvent_UPDATE(TIM1);
 8002c2a:	4806      	ldr	r0, [pc, #24]	@ (8002c44 <SERVO_doArm+0x64>)
 8002c2c:	f7ff ff94 	bl	8002b58 <LL_TIM_GenerateEvent_UPDATE>
	LL_TIM_GenerateEvent_UPDATE(TIM5);
 8002c30:	4805      	ldr	r0, [pc, #20]	@ (8002c48 <SERVO_doArm+0x68>)
 8002c32:	f7ff ff91 	bl	8002b58 <LL_TIM_GenerateEvent_UPDATE>
	return;
 8002c36:	bf00      	nop
}
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200002e8 	.word	0x200002e8
 8002c44:	40010000 	.word	0x40010000
 8002c48:	40000c00 	.word	0x40000c00

08002c4c <SERVO_doDisarm>:
 * @detail 출력 프로토콜 따라 수행
 * @parm none
 * @retval none
 */
void SERVO_doDisarm(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
	configurePWM(param.servo.RATE);
 8002c52:	4b10      	ldr	r3, [pc, #64]	@ (8002c94 <SERVO_doDisarm+0x48>)
 8002c54:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 f904 	bl	8002e68 <configurePWM>

	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002c60:	2300      	movs	r3, #0
 8002c62:	71fb      	strb	r3, [r7, #7]
 8002c64:	e009      	b.n	8002c7a <SERVO_doDisarm+0x2e>
	{
		doArm2Channel(i+1, 0);
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f86c 	bl	8002d4c <doArm2Channel>
	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	3301      	adds	r3, #1
 8002c78:	71fb      	strb	r3, [r7, #7]
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	2b0b      	cmp	r3, #11
 8002c7e:	d9f2      	bls.n	8002c66 <SERVO_doDisarm+0x1a>
	}

	LL_TIM_GenerateEvent_UPDATE(TIM1);
 8002c80:	4805      	ldr	r0, [pc, #20]	@ (8002c98 <SERVO_doDisarm+0x4c>)
 8002c82:	f7ff ff69 	bl	8002b58 <LL_TIM_GenerateEvent_UPDATE>
	LL_TIM_GenerateEvent_UPDATE(TIM5);
 8002c86:	4805      	ldr	r0, [pc, #20]	@ (8002c9c <SERVO_doDisarm+0x50>)
 8002c88:	f7ff ff66 	bl	8002b58 <LL_TIM_GenerateEvent_UPDATE>
	return;
 8002c8c:	bf00      	nop
}
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	200002e8 	.word	0x200002e8
 8002c98:	40010000 	.word	0x40010000
 8002c9c:	40000c00 	.word	0x40000c00

08002ca0 <SERVO_control>:
 * @detail 출력 프로토콜 따라 수행
 * @parm none
 * @retval none
 */
void SERVO_control(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
	calculateServoOutput();
 8002ca4:	f000 f938 	bl	8002f18 <calculateServoOutput>

	setPWM();
 8002ca8:	f000 f96e 	bl	8002f88 <setPWM>
	return;
 8002cac:	bf00      	nop
}
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <SERVO_setFailsafe>:
/*
 * @brief Fail-Safe 동작
 * @retval none
 */
void SERVO_setFailsafe(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
	setPWM2Channel(1, 1000);
 8002cb4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002cb8:	2001      	movs	r0, #1
 8002cba:	f000 f993 	bl	8002fe4 <setPWM2Channel>
	setPWM2Channel(2, 1500);
 8002cbe:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8002cc2:	2002      	movs	r0, #2
 8002cc4:	f000 f98e 	bl	8002fe4 <setPWM2Channel>
	setPWM2Channel(3, 1500);
 8002cc8:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8002ccc:	2003      	movs	r0, #3
 8002cce:	f000 f989 	bl	8002fe4 <setPWM2Channel>
	setPWM2Channel(4, 1500);
 8002cd2:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8002cd6:	2004      	movs	r0, #4
 8002cd8:	f000 f984 	bl	8002fe4 <setPWM2Channel>
	return;
 8002cdc:	bf00      	nop
}
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <SERVO_doCalibrate>:
 * 				0 : high 신호 입력
 * 				1 : low 신호 입력
 * @retval none
 */
void SERVO_doCalibrate(uint8_t mode)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	71fb      	strb	r3, [r7, #7]
	uint8_t channels[] = {1,2,3,4};
 8002cea:	4b17      	ldr	r3, [pc, #92]	@ (8002d48 <SERVO_doCalibrate+0x68>)
 8002cec:	60fb      	str	r3, [r7, #12]
	if(mode)
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d012      	beq.n	8002d1a <SERVO_doCalibrate+0x3a>
	{
		configurePWM(50);
 8002cf4:	2032      	movs	r0, #50	@ 0x32
 8002cf6:	f000 f8b7 	bl	8002e68 <configurePWM>

		doArm2Channels(&channels[0], sizeof(channels), 1);
 8002cfa:	f107 030c 	add.w	r3, r7, #12
 8002cfe:	2201      	movs	r2, #1
 8002d00:	2104      	movs	r1, #4
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 f88e 	bl	8002e24 <doArm2Channels>
		setPWM2Channels(&channels[0], sizeof(channels), 2000);
 8002d08:	f107 030c 	add.w	r3, r7, #12
 8002d0c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002d10:	2104      	movs	r1, #4
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 f9c6 	bl	80030a4 <setPWM2Channels>
	{
		setPWM2Channels(&channels[0], sizeof(channels), 1000);
		HAL_Delay(1000);
		doArm2Channels(&channels[0], sizeof(channels), 0);
	}
	return;
 8002d18:	e013      	b.n	8002d42 <SERVO_doCalibrate+0x62>
		setPWM2Channels(&channels[0], sizeof(channels), 1000);
 8002d1a:	f107 030c 	add.w	r3, r7, #12
 8002d1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d22:	2104      	movs	r1, #4
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 f9bd 	bl	80030a4 <setPWM2Channels>
		HAL_Delay(1000);
 8002d2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d2e:	f002 f86d 	bl	8004e0c <HAL_Delay>
		doArm2Channels(&channels[0], sizeof(channels), 0);
 8002d32:	f107 030c 	add.w	r3, r7, #12
 8002d36:	2200      	movs	r2, #0
 8002d38:	2104      	movs	r1, #4
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 f872 	bl	8002e24 <doArm2Channels>
	return;
 8002d40:	bf00      	nop
}
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	04030201 	.word	0x04030201

08002d4c <doArm2Channel>:
 * 					1 : disable
 * @retval 0 : 설정됨
 * @retval -1 : ch 범위 오류
 */
int doArm2Channel(uint8_t servoCh, uint8_t state)
{
 8002d4c:	b5b0      	push	{r4, r5, r7, lr}
 8002d4e:	b08a      	sub	sp, #40	@ 0x28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	460a      	mov	r2, r1
 8002d56:	71fb      	strb	r3, [r7, #7]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	71bb      	strb	r3, [r7, #6]
	if(servoCh<1 || servoCh>12) return -1;
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <doArm2Channel+0x1c>
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	2b0c      	cmp	r3, #12
 8002d66:	d902      	bls.n	8002d6e <doArm2Channel+0x22>
 8002d68:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6c:	e051      	b.n	8002e12 <doArm2Channel+0xc6>
	const TIM_TypeDef* timerArr[] = {
 8002d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8002e1c <doArm2Channel+0xd0>)
 8002d70:	f107 0408 	add.w	r4, r7, #8
 8002d74:	461d      	mov	r5, r3
 8002d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002d7e:	e884 0003 	stmia.w	r4, {r0, r1}
			0, TIM1, 0, TIM3, TIM4, TIM5
	};

	// map에서 상위 비트로 타이머 선택
	TIM_TypeDef* timer = (TIM_TypeDef*)timerArr[SERVO_TIMER_MAP[servoCh-1]>>4];
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	3b01      	subs	r3, #1
 8002d86:	4a26      	ldr	r2, [pc, #152]	@ (8002e20 <doArm2Channel+0xd4>)
 8002d88:	5cd3      	ldrb	r3, [r2, r3]
 8002d8a:	091b      	lsrs	r3, r3, #4
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	3328      	adds	r3, #40	@ 0x28
 8002d92:	443b      	add	r3, r7
 8002d94:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002d98:	623b      	str	r3, [r7, #32]

	// map에서 하위 비트로 채널 선택
	uint32_t ch;
	switch(SERVO_TIMER_MAP[servoCh-1]&0x0F){
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	4a20      	ldr	r2, [pc, #128]	@ (8002e20 <doArm2Channel+0xd4>)
 8002da0:	5cd3      	ldrb	r3, [r2, r3]
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	3b01      	subs	r3, #1
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d819      	bhi.n	8002de0 <doArm2Channel+0x94>
 8002dac:	a201      	add	r2, pc, #4	@ (adr r2, 8002db4 <doArm2Channel+0x68>)
 8002dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db2:	bf00      	nop
 8002db4:	08002dc5 	.word	0x08002dc5
 8002db8:	08002dcb 	.word	0x08002dcb
 8002dbc:	08002dd1 	.word	0x08002dd1
 8002dc0:	08002dd9 	.word	0x08002dd9
	case 1: ch = LL_TIM_CHANNEL_CH1; break;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dc8:	e00d      	b.n	8002de6 <doArm2Channel+0x9a>
	case 2: ch = LL_TIM_CHANNEL_CH2; break;
 8002dca:	2310      	movs	r3, #16
 8002dcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dce:	e00a      	b.n	8002de6 <doArm2Channel+0x9a>
	case 3: ch = LL_TIM_CHANNEL_CH3; break;
 8002dd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dd6:	e006      	b.n	8002de6 <doArm2Channel+0x9a>
	case 4: ch = LL_TIM_CHANNEL_CH4; break;
 8002dd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dde:	e002      	b.n	8002de6 <doArm2Channel+0x9a>
	default: ch = 0; break;
 8002de0:	2300      	movs	r3, #0
 8002de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002de4:	bf00      	nop
	}

	if(timer&&ch){
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d011      	beq.n	8002e10 <doArm2Channel+0xc4>
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00e      	beq.n	8002e10 <doArm2Channel+0xc4>
		if(state == 1) LL_TIM_CC_EnableChannel(timer, ch);
 8002df2:	79bb      	ldrb	r3, [r7, #6]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d104      	bne.n	8002e02 <doArm2Channel+0xb6>
 8002df8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dfa:	6a38      	ldr	r0, [r7, #32]
 8002dfc:	f7ff fe89 	bl	8002b12 <LL_TIM_CC_EnableChannel>
 8002e00:	e006      	b.n	8002e10 <doArm2Channel+0xc4>
		else if(state == 0) LL_TIM_CC_DisableChannel(timer, ch);
 8002e02:	79bb      	ldrb	r3, [r7, #6]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d103      	bne.n	8002e10 <doArm2Channel+0xc4>
 8002e08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e0a:	6a38      	ldr	r0, [r7, #32]
 8002e0c:	f7ff fe92 	bl	8002b34 <LL_TIM_CC_DisableChannel>
	}
	return 0;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3728      	adds	r7, #40	@ 0x28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bdb0      	pop	{r4, r5, r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	0800f1f0 	.word	0x0800f1f0
 8002e20:	0800f290 	.word	0x0800f290

08002e24 <doArm2Channels>:
 * 					0 : enable
 * 					1 : disable
 * @retval 0 : 설정됨
 */
int doArm2Channels(uint8_t *pCh, uint8_t len, uint8_t state)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	70fb      	strb	r3, [r7, #3]
 8002e30:	4613      	mov	r3, r2
 8002e32:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i=0; i<len; i++)
 8002e34:	2300      	movs	r3, #0
 8002e36:	73fb      	strb	r3, [r7, #15]
 8002e38:	e00d      	b.n	8002e56 <doArm2Channels+0x32>
	{
		uint8_t ch = pCh[i];
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	4413      	add	r3, r2
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	73bb      	strb	r3, [r7, #14]
		doArm2Channel(ch, state);
 8002e44:	78ba      	ldrb	r2, [r7, #2]
 8002e46:	7bbb      	ldrb	r3, [r7, #14]
 8002e48:	4611      	mov	r1, r2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff ff7e 	bl	8002d4c <doArm2Channel>
	for(uint8_t i=0; i<len; i++)
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	3301      	adds	r3, #1
 8002e54:	73fb      	strb	r3, [r7, #15]
 8002e56:	7bfa      	ldrb	r2, [r7, #15]
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d3ed      	bcc.n	8002e3a <doArm2Channels+0x16>
	}
	return 0;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <configurePWM>:
 * @parm uint16_t hz (in 50-490)
 * @retval 0 : 설정됨
 * @retval 1 : 주파수 범위 오설정
 */
uint8_t configurePWM(uint16_t hz)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	80fb      	strh	r3, [r7, #6]
	if(hz>490 || hz<50) return 1;
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	f5b3 7ff5 	cmp.w	r3, #490	@ 0x1ea
 8002e78:	d802      	bhi.n	8002e80 <configurePWM+0x18>
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	2b31      	cmp	r3, #49	@ 0x31
 8002e7e:	d801      	bhi.n	8002e84 <configurePWM+0x1c>
 8002e80:	2301      	movs	r3, #1
 8002e82:	e03a      	b.n	8002efa <configurePWM+0x92>

	// (추가) PPM 입력이 활성화 되어 있으면 50Hz 고정하도록
	LL_TIM_SetAutoReload(TIM1, 1000000/hz-1);
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	4a1f      	ldr	r2, [pc, #124]	@ (8002f04 <configurePWM+0x9c>)
 8002e88:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	4619      	mov	r1, r3
 8002e90:	481d      	ldr	r0, [pc, #116]	@ (8002f08 <configurePWM+0xa0>)
 8002e92:	f7ff fe30 	bl	8002af6 <LL_TIM_SetAutoReload>
	LL_TIM_SetAutoReload(TIM3, 1000000/hz-1);
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	4a1a      	ldr	r2, [pc, #104]	@ (8002f04 <configurePWM+0x9c>)
 8002e9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	481a      	ldr	r0, [pc, #104]	@ (8002f0c <configurePWM+0xa4>)
 8002ea4:	f7ff fe27 	bl	8002af6 <LL_TIM_SetAutoReload>
	LL_TIM_SetAutoReload(TIM4, 1000000/hz-1);
 8002ea8:	88fb      	ldrh	r3, [r7, #6]
 8002eaa:	4a16      	ldr	r2, [pc, #88]	@ (8002f04 <configurePWM+0x9c>)
 8002eac:	fb92 f3f3 	sdiv	r3, r2, r3
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4816      	ldr	r0, [pc, #88]	@ (8002f10 <configurePWM+0xa8>)
 8002eb6:	f7ff fe1e 	bl	8002af6 <LL_TIM_SetAutoReload>
	LL_TIM_SetAutoReload(TIM5, 1000000/hz-1);
 8002eba:	88fb      	ldrh	r3, [r7, #6]
 8002ebc:	4a11      	ldr	r2, [pc, #68]	@ (8002f04 <configurePWM+0x9c>)
 8002ebe:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4813      	ldr	r0, [pc, #76]	@ (8002f14 <configurePWM+0xac>)
 8002ec8:	f7ff fe15 	bl	8002af6 <LL_TIM_SetAutoReload>

	LL_TIM_SetPrescaler(TIM1, 168-1);
 8002ecc:	21a7      	movs	r1, #167	@ 0xa7
 8002ece:	480e      	ldr	r0, [pc, #56]	@ (8002f08 <configurePWM+0xa0>)
 8002ed0:	f7ff fe03 	bl	8002ada <LL_TIM_SetPrescaler>
	LL_TIM_SetPrescaler(TIM3, 84-1);
 8002ed4:	2153      	movs	r1, #83	@ 0x53
 8002ed6:	480d      	ldr	r0, [pc, #52]	@ (8002f0c <configurePWM+0xa4>)
 8002ed8:	f7ff fdff 	bl	8002ada <LL_TIM_SetPrescaler>
	LL_TIM_SetPrescaler(TIM4, 84-1);
 8002edc:	2153      	movs	r1, #83	@ 0x53
 8002ede:	480c      	ldr	r0, [pc, #48]	@ (8002f10 <configurePWM+0xa8>)
 8002ee0:	f7ff fdfb 	bl	8002ada <LL_TIM_SetPrescaler>
	LL_TIM_SetPrescaler(TIM5, 84-1);
 8002ee4:	2153      	movs	r1, #83	@ 0x53
 8002ee6:	480b      	ldr	r0, [pc, #44]	@ (8002f14 <configurePWM+0xac>)
 8002ee8:	f7ff fdf7 	bl	8002ada <LL_TIM_SetPrescaler>

	LL_TIM_GenerateEvent_UPDATE(TIM1);
 8002eec:	4806      	ldr	r0, [pc, #24]	@ (8002f08 <configurePWM+0xa0>)
 8002eee:	f7ff fe33 	bl	8002b58 <LL_TIM_GenerateEvent_UPDATE>
	LL_TIM_GenerateEvent_UPDATE(TIM5);
 8002ef2:	4808      	ldr	r0, [pc, #32]	@ (8002f14 <configurePWM+0xac>)
 8002ef4:	f7ff fe30 	bl	8002b58 <LL_TIM_GenerateEvent_UPDATE>

	return 0;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	000f4240 	.word	0x000f4240
 8002f08:	40010000 	.word	0x40010000
 8002f0c:	40000400 	.word	0x40000400
 8002f10:	40000800 	.word	0x40000800
 8002f14:	40000c00 	.word	0x40000c00

08002f18 <calculateServoOutput>:
 * @detail
 * @parm none
 * @retval none
 */
void calculateServoOutput(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
	servo_output_raw.time_usec = system_time.time_boot_ms;
 8002f1e:	4b16      	ldr	r3, [pc, #88]	@ (8002f78 <calculateServoOutput+0x60>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	4a16      	ldr	r2, [pc, #88]	@ (8002f7c <calculateServoOutput+0x64>)
 8002f24:	6013      	str	r3, [r2, #0]

	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002f26:	2300      	movs	r3, #0
 8002f28:	71fb      	strb	r3, [r7, #7]
 8002f2a:	e01b      	b.n	8002f64 <calculateServoOutput+0x4c>
	{
		// 해당 서보 채널이 활성화되어 있지 않으면 다음으로 건너뜀.
		if(!((param.servo.GPIO_MASK >> i)&0x1)){
 8002f2c:	4b14      	ldr	r3, [pc, #80]	@ (8002f80 <calculateServoOutput+0x68>)
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	fa22 f303 	lsr.w	r3, r2, r3
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00e      	beq.n	8002f5c <calculateServoOutput+0x44>
			continue;
		}

		servo_output_raw.servo_raw[i] = RC_channels.value[i];
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	79fa      	ldrb	r2, [r7, #7]
 8002f42:	4910      	ldr	r1, [pc, #64]	@ (8002f84 <calculateServoOutput+0x6c>)
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	440b      	add	r3, r1
 8002f48:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002f4c:	b298      	uxth	r0, r3
 8002f4e:	490b      	ldr	r1, [pc, #44]	@ (8002f7c <calculateServoOutput+0x64>)
 8002f50:	0053      	lsls	r3, r2, #1
 8002f52:	440b      	add	r3, r1
 8002f54:	4602      	mov	r2, r0
 8002f56:	f8a3 2005 	strh.w	r2, [r3, #5]
 8002f5a:	e000      	b.n	8002f5e <calculateServoOutput+0x46>
			continue;
 8002f5c:	bf00      	nop
	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	3301      	adds	r3, #1
 8002f62:	71fb      	strb	r3, [r7, #7]
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	2b0b      	cmp	r3, #11
 8002f68:	d9e0      	bls.n	8002f2c <calculateServoOutput+0x14>
		// servo_output_raw.servo_raw[i] = scaled_imu + RC_channels 를 기반으로 요리조리 계산해서 결정.
	}

	return;
 8002f6a:	bf00      	nop
}
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	20000454 	.word	0x20000454
 8002f7c:	200004a8 	.word	0x200004a8
 8002f80:	200002e8 	.word	0x200002e8
 8002f84:	200004d0 	.word	0x200004d0

08002f88 <setPWM>:
 * @detail
 * @parm none
 * @retval none
 */
void setPWM(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002f8e:	2300      	movs	r3, #0
 8002f90:	71fb      	strb	r3, [r7, #7]
 8002f92:	e01b      	b.n	8002fcc <setPWM+0x44>
	{
		// 해당 서보 채널이 활성화되어 있지 않으면 다음으로 건너뜀.
		if(!((param.servo.GPIO_MASK >> i)&0x1)){
 8002f94:	4b11      	ldr	r3, [pc, #68]	@ (8002fdc <setPWM+0x54>)
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00e      	beq.n	8002fc4 <setPWM+0x3c>
			continue;
		}
		setPWM2Channel(i+1, servo_output_raw.servo_raw[i]);
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	490c      	ldr	r1, [pc, #48]	@ (8002fe0 <setPWM+0x58>)
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	440b      	add	r3, r1
 8002fb4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	f000 f811 	bl	8002fe4 <setPWM2Channel>
 8002fc2:	e000      	b.n	8002fc6 <setPWM+0x3e>
			continue;
 8002fc4:	bf00      	nop
	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	71fb      	strb	r3, [r7, #7]
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	2b0b      	cmp	r3, #11
 8002fd0:	d9e0      	bls.n	8002f94 <setPWM+0xc>
	}
	return;
 8002fd2:	bf00      	nop
}
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	200002e8 	.word	0x200002e8
 8002fe0:	200004a8 	.word	0x200004a8

08002fe4 <setPWM2Channel>:
 * @parm uint8_t ch (in 1-12)
 * @parm uint16_t value (in 1000-2000)
 * @retval 0
 */
int setPWM2Channel(uint8_t ch, uint16_t value)
{
 8002fe4:	b4b0      	push	{r4, r5, r7}
 8002fe6:	b08b      	sub	sp, #44	@ 0x2c
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	460a      	mov	r2, r1
 8002fee:	71fb      	strb	r3, [r7, #7]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	80bb      	strh	r3, [r7, #4]
	if(ch<1 || ch>12) return -1;
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <setPWM2Channel+0x1c>
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	2b0c      	cmp	r3, #12
 8002ffe:	d902      	bls.n	8003006 <setPWM2Channel+0x22>
 8003000:	f04f 33ff 	mov.w	r3, #4294967295
 8003004:	e045      	b.n	8003092 <setPWM2Channel+0xae>
	if(value<800||value>2000) return -2;
 8003006:	88bb      	ldrh	r3, [r7, #4]
 8003008:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800300c:	d303      	bcc.n	8003016 <setPWM2Channel+0x32>
 800300e:	88bb      	ldrh	r3, [r7, #4]
 8003010:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003014:	d902      	bls.n	800301c <setPWM2Channel+0x38>
 8003016:	f06f 0301 	mvn.w	r3, #1
 800301a:	e03a      	b.n	8003092 <setPWM2Channel+0xae>

	const TIM_TypeDef* timerArr[] = {
 800301c:	4b1f      	ldr	r3, [pc, #124]	@ (800309c <setPWM2Channel+0xb8>)
 800301e:	f107 040c 	add.w	r4, r7, #12
 8003022:	461d      	mov	r5, r3
 8003024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003028:	e895 0003 	ldmia.w	r5, {r0, r1}
 800302c:	e884 0003 	stmia.w	r4, {r0, r1}
		0, TIM1, 0, TIM3, TIM4, TIM5
	};

	// map에서 상위 비트로 타이머 선택
	TIM_TypeDef* timer = (TIM_TypeDef*)timerArr[SERVO_TIMER_MAP[ch-1]>>4];
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	3b01      	subs	r3, #1
 8003034:	4a1a      	ldr	r2, [pc, #104]	@ (80030a0 <setPWM2Channel+0xbc>)
 8003036:	5cd3      	ldrb	r3, [r2, r3]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	b2db      	uxtb	r3, r3
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	3328      	adds	r3, #40	@ 0x28
 8003040:	443b      	add	r3, r7
 8003042:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003046:	627b      	str	r3, [r7, #36]	@ 0x24

	// map에서 하위 비트로 채널 선택
	switch(SERVO_TIMER_MAP[ch-1]&0x0F){
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	3b01      	subs	r3, #1
 800304c:	4a14      	ldr	r2, [pc, #80]	@ (80030a0 <setPWM2Channel+0xbc>)
 800304e:	5cd3      	ldrb	r3, [r2, r3]
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	3b01      	subs	r3, #1
 8003056:	2b03      	cmp	r3, #3
 8003058:	d81a      	bhi.n	8003090 <setPWM2Channel+0xac>
 800305a:	a201      	add	r2, pc, #4	@ (adr r2, 8003060 <setPWM2Channel+0x7c>)
 800305c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003060:	08003071 	.word	0x08003071
 8003064:	08003079 	.word	0x08003079
 8003068:	08003081 	.word	0x08003081
 800306c:	08003089 	.word	0x08003089
	case 1: timer->CCR1 = value; break;
 8003070:	88ba      	ldrh	r2, [r7, #4]
 8003072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003074:	635a      	str	r2, [r3, #52]	@ 0x34
 8003076:	e00b      	b.n	8003090 <setPWM2Channel+0xac>
	case 2: timer->CCR2 = value; break;
 8003078:	88ba      	ldrh	r2, [r7, #4]
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	639a      	str	r2, [r3, #56]	@ 0x38
 800307e:	e007      	b.n	8003090 <setPWM2Channel+0xac>
	case 3: timer->CCR3 = value; break;
 8003080:	88ba      	ldrh	r2, [r7, #4]
 8003082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003084:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003086:	e003      	b.n	8003090 <setPWM2Channel+0xac>
	case 4: timer->CCR4 = value; break;
 8003088:	88ba      	ldrh	r2, [r7, #4]
 800308a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308c:	641a      	str	r2, [r3, #64]	@ 0x40
 800308e:	bf00      	nop
	}

//	LL_TIM_GenerateEvent_UPDATE(TIM5);
	return 0;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	372c      	adds	r7, #44	@ 0x2c
 8003096:	46bd      	mov	sp, r7
 8003098:	bcb0      	pop	{r4, r5, r7}
 800309a:	4770      	bx	lr
 800309c:	0800f1f0 	.word	0x0800f1f0
 80030a0:	0800f290 	.word	0x0800f290

080030a4 <setPWM2Channels>:
 * @parm uint8_t len : array size
 * @parm uint16_t value (in 1000-2000)
 * @retval 0
 */
int setPWM2Channels(uint8_t *pCh, uint8_t len, uint16_t value)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	70fb      	strb	r3, [r7, #3]
 80030b0:	4613      	mov	r3, r2
 80030b2:	803b      	strh	r3, [r7, #0]
	for(uint8_t i=0; i<len; i++)
 80030b4:	2300      	movs	r3, #0
 80030b6:	73fb      	strb	r3, [r7, #15]
 80030b8:	e00d      	b.n	80030d6 <setPWM2Channels+0x32>
	{
		uint8_t ch = pCh[i];
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	4413      	add	r3, r2
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	73bb      	strb	r3, [r7, #14]
		setPWM2Channel(ch, value);
 80030c4:	883a      	ldrh	r2, [r7, #0]
 80030c6:	7bbb      	ldrb	r3, [r7, #14]
 80030c8:	4611      	mov	r1, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff ff8a 	bl	8002fe4 <setPWM2Channel>
	for(uint8_t i=0; i<len; i++)
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	3301      	adds	r3, #1
 80030d4:	73fb      	strb	r3, [r7, #15]
 80030d6:	7bfa      	ldrb	r2, [r7, #15]
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d3ed      	bcc.n	80030ba <setPWM2Channels+0x16>
	}
	return 0;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030ec:	4b04      	ldr	r3, [pc, #16]	@ (8003100 <__NVIC_GetPriorityGrouping+0x18>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	0a1b      	lsrs	r3, r3, #8
 80030f2:	f003 0307 	and.w	r3, r3, #7
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800310e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003112:	2b00      	cmp	r3, #0
 8003114:	db0b      	blt.n	800312e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	f003 021f 	and.w	r2, r3, #31
 800311c:	4907      	ldr	r1, [pc, #28]	@ (800313c <__NVIC_EnableIRQ+0x38>)
 800311e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	2001      	movs	r0, #1
 8003126:	fa00 f202 	lsl.w	r2, r0, r2
 800312a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	e000e100 	.word	0xe000e100

08003140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	6039      	str	r1, [r7, #0]
 800314a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003150:	2b00      	cmp	r3, #0
 8003152:	db0a      	blt.n	800316a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	b2da      	uxtb	r2, r3
 8003158:	490c      	ldr	r1, [pc, #48]	@ (800318c <__NVIC_SetPriority+0x4c>)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	0112      	lsls	r2, r2, #4
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	440b      	add	r3, r1
 8003164:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003168:	e00a      	b.n	8003180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	b2da      	uxtb	r2, r3
 800316e:	4908      	ldr	r1, [pc, #32]	@ (8003190 <__NVIC_SetPriority+0x50>)
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	3b04      	subs	r3, #4
 8003178:	0112      	lsls	r2, r2, #4
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	440b      	add	r3, r1
 800317e:	761a      	strb	r2, [r3, #24]
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	e000e100 	.word	0xe000e100
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003194:	b480      	push	{r7}
 8003196:	b089      	sub	sp, #36	@ 0x24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f1c3 0307 	rsb	r3, r3, #7
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	bf28      	it	cs
 80031b2:	2304      	movcs	r3, #4
 80031b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3304      	adds	r3, #4
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d902      	bls.n	80031c4 <NVIC_EncodePriority+0x30>
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3b03      	subs	r3, #3
 80031c2:	e000      	b.n	80031c6 <NVIC_EncodePriority+0x32>
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c8:	f04f 32ff 	mov.w	r2, #4294967295
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43da      	mvns	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	401a      	ands	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031dc:	f04f 31ff 	mov.w	r1, #4294967295
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	fa01 f303 	lsl.w	r3, r1, r3
 80031e6:	43d9      	mvns	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ec:	4313      	orrs	r3, r2
         );
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3724      	adds	r7, #36	@ 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b089      	sub	sp, #36	@ 0x24
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	332c      	adds	r3, #44	@ 0x2c
 800320a:	4619      	mov	r1, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003212:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003216:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	fa92 f2a2 	rbit	r2, r2
 800321e:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	61ba      	str	r2, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	2a00      	cmp	r2, #0
 8003228:	d101      	bne.n	800322e <LL_ADC_REG_SetSequencerRanks+0x34>
  {
    return 32U;
 800322a:	2220      	movs	r2, #32
 800322c:	e003      	b.n	8003236 <LL_ADC_REG_SetSequencerRanks+0x3c>
  }
  return __builtin_clz(value);
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	fab2 f282 	clz	r2, r2
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	40d3      	lsrs	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	61fb      	str	r3, [r7, #28]

  MODIFY_REG(*preg,
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	211f      	movs	r1, #31
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	401a      	ands	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f003 011f 	and.w	r1, r3, #31
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	fa01 f303 	lsl.w	r3, r1, r3
 8003262:	431a      	orrs	r2, r3
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003268:	bf00      	nop
 800326a:	3724      	adds	r7, #36	@ 0x24
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	609a      	str	r2, [r3, #8]
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800329a:	b480      	push	{r7}
 800329c:	b08f      	sub	sp, #60	@ 0x3c
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	330c      	adds	r3, #12
 80032aa:	4619      	mov	r1, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032b6:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	fa92 f2a2 	rbit	r2, r2
 80032be:	613a      	str	r2, [r7, #16]
  return result;
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	2a00      	cmp	r2, #0
 80032c8:	d101      	bne.n	80032ce <LL_ADC_SetChannelSamplingTime+0x34>
    return 32U;
 80032ca:	2220      	movs	r2, #32
 80032cc:	e003      	b.n	80032d6 <LL_ADC_SetChannelSamplingTime+0x3c>
  return __builtin_clz(value);
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	fab2 f282 	clz	r2, r2
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	40d3      	lsrs	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	637b      	str	r3, [r7, #52]	@ 0x34

  MODIFY_REG(*preg,
 80032de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80032e8:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80032ec:	6239      	str	r1, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ee:	6a39      	ldr	r1, [r7, #32]
 80032f0:	fa91 f1a1 	rbit	r1, r1
 80032f4:	61f9      	str	r1, [r7, #28]
  return result;
 80032f6:	69f9      	ldr	r1, [r7, #28]
 80032f8:	6279      	str	r1, [r7, #36]	@ 0x24
  if (value == 0U)
 80032fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032fc:	2900      	cmp	r1, #0
 80032fe:	d101      	bne.n	8003304 <LL_ADC_SetChannelSamplingTime+0x6a>
    return 32U;
 8003300:	2120      	movs	r1, #32
 8003302:	e003      	b.n	800330c <LL_ADC_SetChannelSamplingTime+0x72>
  return __builtin_clz(value);
 8003304:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003306:	fab1 f181 	clz	r1, r1
 800330a:	b2c9      	uxtb	r1, r1
 800330c:	40cb      	lsrs	r3, r1
 800330e:	2107      	movs	r1, #7
 8003310:	fa01 f303 	lsl.w	r3, r1, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	401a      	ands	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 800331e:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8003322:	62f9      	str	r1, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003324:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003326:	fa91 f1a1 	rbit	r1, r1
 800332a:	62b9      	str	r1, [r7, #40]	@ 0x28
  return result;
 800332c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800332e:	6339      	str	r1, [r7, #48]	@ 0x30
  if (value == 0U)
 8003330:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003332:	2900      	cmp	r1, #0
 8003334:	d101      	bne.n	800333a <LL_ADC_SetChannelSamplingTime+0xa0>
    return 32U;
 8003336:	2120      	movs	r1, #32
 8003338:	e003      	b.n	8003342 <LL_ADC_SetChannelSamplingTime+0xa8>
  return __builtin_clz(value);
 800333a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800333c:	fab1 f181 	clz	r1, r1
 8003340:	b2c9      	uxtb	r1, r1
 8003342:	40cb      	lsrs	r3, r1
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	fa01 f303 	lsl.w	r3, r1, r3
 800334a:	431a      	orrs	r2, r3
 800334c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800334e:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8003350:	bf00      	nop
 8003352:	373c      	adds	r7, #60	@ 0x3c
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <LL_SPI_SetStandard>:
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f023 0210 	bic.w	r2, r3, #16
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	605a      	str	r2, [r3, #4]
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <LL_TIM_EnableCounter>:
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f043 0201 	orr.w	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	601a      	str	r2, [r3, #0]
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <LL_TIM_DisableARRPreload>:
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	601a      	str	r2, [r3, #0]
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
	...

080033c4 <LL_TIM_OC_DisableFast>:
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d01c      	beq.n	800340e <LL_TIM_OC_DisableFast+0x4a>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d017      	beq.n	800340a <LL_TIM_OC_DisableFast+0x46>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b10      	cmp	r3, #16
 80033de:	d012      	beq.n	8003406 <LL_TIM_OC_DisableFast+0x42>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2b40      	cmp	r3, #64	@ 0x40
 80033e4:	d00d      	beq.n	8003402 <LL_TIM_OC_DisableFast+0x3e>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ec:	d007      	beq.n	80033fe <LL_TIM_OC_DisableFast+0x3a>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033f4:	d101      	bne.n	80033fa <LL_TIM_OC_DisableFast+0x36>
 80033f6:	2305      	movs	r3, #5
 80033f8:	e00a      	b.n	8003410 <LL_TIM_OC_DisableFast+0x4c>
 80033fa:	2306      	movs	r3, #6
 80033fc:	e008      	b.n	8003410 <LL_TIM_OC_DisableFast+0x4c>
 80033fe:	2304      	movs	r3, #4
 8003400:	e006      	b.n	8003410 <LL_TIM_OC_DisableFast+0x4c>
 8003402:	2303      	movs	r3, #3
 8003404:	e004      	b.n	8003410 <LL_TIM_OC_DisableFast+0x4c>
 8003406:	2302      	movs	r3, #2
 8003408:	e002      	b.n	8003410 <LL_TIM_OC_DisableFast+0x4c>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <LL_TIM_OC_DisableFast+0x4c>
 800340e:	2300      	movs	r3, #0
 8003410:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3318      	adds	r3, #24
 8003416:	4619      	mov	r1, r3
 8003418:	7bfb      	ldrb	r3, [r7, #15]
 800341a:	4a0b      	ldr	r2, [pc, #44]	@ (8003448 <LL_TIM_OC_DisableFast+0x84>)
 800341c:	5cd3      	ldrb	r3, [r2, r3]
 800341e:	440b      	add	r3, r1
 8003420:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	4908      	ldr	r1, [pc, #32]	@ (800344c <LL_TIM_OC_DisableFast+0x88>)
 800342a:	5ccb      	ldrb	r3, [r1, r3]
 800342c:	4619      	mov	r1, r3
 800342e:	2304      	movs	r3, #4
 8003430:	408b      	lsls	r3, r1
 8003432:	43db      	mvns	r3, r3
 8003434:	401a      	ands	r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	601a      	str	r2, [r3, #0]
}
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	0800f29c 	.word	0x0800f29c
 800344c:	0800f2a4 	.word	0x0800f2a4

08003450 <LL_TIM_OC_EnablePreload>:
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d01c      	beq.n	800349a <LL_TIM_OC_EnablePreload+0x4a>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2b04      	cmp	r3, #4
 8003464:	d017      	beq.n	8003496 <LL_TIM_OC_EnablePreload+0x46>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b10      	cmp	r3, #16
 800346a:	d012      	beq.n	8003492 <LL_TIM_OC_EnablePreload+0x42>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2b40      	cmp	r3, #64	@ 0x40
 8003470:	d00d      	beq.n	800348e <LL_TIM_OC_EnablePreload+0x3e>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003478:	d007      	beq.n	800348a <LL_TIM_OC_EnablePreload+0x3a>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003480:	d101      	bne.n	8003486 <LL_TIM_OC_EnablePreload+0x36>
 8003482:	2305      	movs	r3, #5
 8003484:	e00a      	b.n	800349c <LL_TIM_OC_EnablePreload+0x4c>
 8003486:	2306      	movs	r3, #6
 8003488:	e008      	b.n	800349c <LL_TIM_OC_EnablePreload+0x4c>
 800348a:	2304      	movs	r3, #4
 800348c:	e006      	b.n	800349c <LL_TIM_OC_EnablePreload+0x4c>
 800348e:	2303      	movs	r3, #3
 8003490:	e004      	b.n	800349c <LL_TIM_OC_EnablePreload+0x4c>
 8003492:	2302      	movs	r3, #2
 8003494:	e002      	b.n	800349c <LL_TIM_OC_EnablePreload+0x4c>
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <LL_TIM_OC_EnablePreload+0x4c>
 800349a:	2300      	movs	r3, #0
 800349c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3318      	adds	r3, #24
 80034a2:	4619      	mov	r1, r3
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	4a0a      	ldr	r2, [pc, #40]	@ (80034d0 <LL_TIM_OC_EnablePreload+0x80>)
 80034a8:	5cd3      	ldrb	r3, [r2, r3]
 80034aa:	440b      	add	r3, r1
 80034ac:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	4907      	ldr	r1, [pc, #28]	@ (80034d4 <LL_TIM_OC_EnablePreload+0x84>)
 80034b6:	5ccb      	ldrb	r3, [r1, r3]
 80034b8:	4619      	mov	r1, r3
 80034ba:	2308      	movs	r3, #8
 80034bc:	408b      	lsls	r3, r1
 80034be:	431a      	orrs	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	601a      	str	r2, [r3, #0]
}
 80034c4:	bf00      	nop
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	0800f29c 	.word	0x0800f29c
 80034d4:	0800f2a4 	.word	0x0800f2a4

080034d8 <LL_TIM_SetClockSource>:
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034ea:	f023 0307 	bic.w	r3, r3, #7
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	609a      	str	r2, [r3, #8]
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <LL_TIM_SetTriggerOutput>:
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	605a      	str	r2, [r3, #4]
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <LL_TIM_DisableMasterSlaveMode>:
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	609a      	str	r2, [r3, #8]
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <LL_TIM_EnableIT_UPDATE>:
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f043 0201 	orr.w	r2, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	60da      	str	r2, [r3, #12]
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <LL_USART_Enable>:
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	60da      	str	r2, [r3, #12]
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_USART_ConfigAsyncMode>:
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	615a      	str	r2, [r3, #20]
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <LL_USART_ConfigHalfDuplexMode>:
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	f023 0222 	bic.w	r2, r3, #34	@ 0x22
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	615a      	str	r2, [r3, #20]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	f043 0208 	orr.w	r2, r3, #8
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	615a      	str	r2, [r3, #20]
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <LL_USART_EnableIT_RXNE>:
{
 80035ec:	b480      	push	{r7}
 80035ee:	b089      	sub	sp, #36	@ 0x24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	330c      	adds	r3, #12
 80035f8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	e853 3f00 	ldrex	r3, [r3]
 8003600:	60bb      	str	r3, [r7, #8]
   return(result);
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f043 0320 	orr.w	r3, r3, #32
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	330c      	adds	r3, #12
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	61ba      	str	r2, [r7, #24]
 8003612:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003614:	6979      	ldr	r1, [r7, #20]
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	e841 2300 	strex	r3, r2, [r1]
 800361c:	613b      	str	r3, [r7, #16]
   return(result);
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e7      	bne.n	80035f4 <LL_USART_EnableIT_RXNE+0x8>
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	3724      	adds	r7, #36	@ 0x24
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800363e:	4a17      	ldr	r2, [pc, #92]	@ (800369c <LL_SYSCFG_SetEXTISource+0x68>)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	3302      	adds	r3, #2
 8003646:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	0c1b      	lsrs	r3, r3, #16
 800364e:	43db      	mvns	r3, r3
 8003650:	ea02 0103 	and.w	r1, r2, r3
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	0c1b      	lsrs	r3, r3, #16
 8003658:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	60fb      	str	r3, [r7, #12]
  return result;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <LL_SYSCFG_SetEXTISource+0x3c>
    return 32U;
 800366c:	2320      	movs	r3, #32
 800366e:	e003      	b.n	8003678 <LL_SYSCFG_SetEXTISource+0x44>
  return __builtin_clz(value);
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	fa03 f202 	lsl.w	r2, r3, r2
 8003680:	4806      	ldr	r0, [pc, #24]	@ (800369c <LL_SYSCFG_SetEXTISource+0x68>)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	430a      	orrs	r2, r1
 8003688:	3302      	adds	r3, #2
 800368a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40013800 	.word	0x40013800

080036a0 <LL_GPIO_SetPinMode>:
{
 80036a0:	b480      	push	{r7}
 80036a2:	b08b      	sub	sp, #44	@ 0x2c
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	613b      	str	r3, [r7, #16]
  return result;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80036c6:	2320      	movs	r3, #32
 80036c8:	e003      	b.n	80036d2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	fab3 f383 	clz	r3, r3
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	2103      	movs	r1, #3
 80036d6:	fa01 f303 	lsl.w	r3, r1, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	401a      	ands	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	fa93 f3a3 	rbit	r3, r3
 80036e8:	61fb      	str	r3, [r7, #28]
  return result;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80036ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80036f4:	2320      	movs	r3, #32
 80036f6:	e003      	b.n	8003700 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80036f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fa:	fab3 f383 	clz	r3, r3
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	fa01 f303 	lsl.w	r3, r1, r3
 8003708:	431a      	orrs	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	601a      	str	r2, [r3, #0]
}
 800370e:	bf00      	nop
 8003710:	372c      	adds	r7, #44	@ 0x2c
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <LL_GPIO_SetPinPull>:
{
 800371a:	b480      	push	{r7}
 800371c:	b08b      	sub	sp, #44	@ 0x2c
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	fa93 f3a3 	rbit	r3, r3
 8003734:	613b      	str	r3, [r7, #16]
  return result;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8003740:	2320      	movs	r3, #32
 8003742:	e003      	b.n	800374c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	fab3 f383 	clz	r3, r3
 800374a:	b2db      	uxtb	r3, r3
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	2103      	movs	r1, #3
 8003750:	fa01 f303 	lsl.w	r3, r1, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	401a      	ands	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	61fb      	str	r3, [r7, #28]
  return result;
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800376e:	2320      	movs	r3, #32
 8003770:	e003      	b.n	800377a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8003772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003774:	fab3 f383 	clz	r3, r3
 8003778:	b2db      	uxtb	r3, r3
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	fa01 f303 	lsl.w	r3, r1, r3
 8003782:	431a      	orrs	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	60da      	str	r2, [r3, #12]
}
 8003788:	bf00      	nop
 800378a:	372c      	adds	r7, #44	@ 0x2c
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <LL_GPIO_ResetOutputPin>:
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	041a      	lsls	r2, r3, #16
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	619a      	str	r2, [r3, #24]
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80037bc:	4b05      	ldr	r3, [pc, #20]	@ (80037d4 <LL_EXTI_EnableIT_0_31+0x20>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4904      	ldr	r1, [pc, #16]	@ (80037d4 <LL_EXTI_EnableIT_0_31+0x20>)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	600b      	str	r3, [r1, #0]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	40013c00 	.word	0x40013c00

080037d8 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80037e0:	4b05      	ldr	r3, [pc, #20]	@ (80037f8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	4904      	ldr	r1, [pc, #16]	@ (80037f8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60cb      	str	r3, [r1, #12]
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	40013c00 	.word	0x40013c00

080037fc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003804:	4b08      	ldr	r3, [pc, #32]	@ (8003828 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003806:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003808:	4907      	ldr	r1, [pc, #28]	@ (8003828 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4313      	orrs	r3, r2
 800380e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003810:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003812:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4013      	ands	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800381a:	68fb      	ldr	r3, [r7, #12]
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	40023800 	.word	0x40023800

0800382c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8003834:	4b08      	ldr	r3, [pc, #32]	@ (8003858 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003836:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003838:	4907      	ldr	r1, [pc, #28]	@ (8003858 <LL_APB1_GRP1_EnableClock+0x2c>)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4313      	orrs	r3, r2
 800383e:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003840:	4b05      	ldr	r3, [pc, #20]	@ (8003858 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003842:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4013      	ands	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800384a:	68fb      	ldr	r3, [r7, #12]
}
 800384c:	bf00      	nop
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	40023800 	.word	0x40023800

0800385c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003864:	4b08      	ldr	r3, [pc, #32]	@ (8003888 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003866:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003868:	4907      	ldr	r1, [pc, #28]	@ (8003888 <LL_APB2_GRP1_EnableClock+0x2c>)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4313      	orrs	r3, r2
 800386e:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003870:	4b05      	ldr	r3, [pc, #20]	@ (8003888 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003872:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4013      	ands	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800387a:	68fb      	ldr	r3, [r7, #12]
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	40023800 	.word	0x40023800

0800388c <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
	{
		while(!LL_USART_IsActiveFlag_TXE(USART2));
		LL_USART_TransmitData8(USART2, *(p+i));
	}
#else
	while(USBD_BUSY == CDC_Transmit_FS((uint8_t*)p, len)) {}
 8003898:	bf00      	nop
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	b29b      	uxth	r3, r3
 800389e:	4619      	mov	r1, r3
 80038a0:	68b8      	ldr	r0, [r7, #8]
 80038a2:	f008 fbb3 	bl	800c00c <CDC_Transmit_FS>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d0f6      	beq.n	800389a <_write+0xe>
	return len;
 80038ac:	687b      	ldr	r3, [r7, #4]
#endif
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038bc:	f001 fa34 	bl	8004d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038c0:	f000 f862 	bl	8003988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038c4:	f000 ff02 	bl	80046cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80038c8:	f000 fde0 	bl	800448c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80038cc:	f000 f98e 	bl	8003bec <MX_TIM1_Init>
  MX_TIM3_Init();
 80038d0:	f000 fa4a 	bl	8003d68 <MX_TIM3_Init>
  MX_TIM4_Init();
 80038d4:	f000 fb02 	bl	8003edc <MX_TIM4_Init>
  MX_TIM5_Init();
 80038d8:	f000 fbac 	bl	8004034 <MX_TIM5_Init>
  MX_TIM13_Init();
 80038dc:	f000 fc62 	bl	80041a4 <MX_TIM13_Init>
  MX_TIM14_Init();
 80038e0:	f000 fcb4 	bl	800424c <MX_TIM14_Init>
  MX_SPI1_Init();
 80038e4:	f000 f930 	bl	8003b48 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80038e8:	f000 fe2e 	bl	8004548 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80038ec:	f000 fe8c 	bl	8004608 <MX_USART3_UART_Init>
  MX_UART4_Init();
 80038f0:	f000 fd02 	bl	80042f8 <MX_UART4_Init>
  MX_UART5_Init();
 80038f4:	f000 fd52 	bl	800439c <MX_UART5_Init>
  MX_USB_DEVICE_Init();
 80038f8:	f008 fabc 	bl	800be74 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80038fc:	f000 f8ae 	bl	8003a5c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_EnableCounter(TIM4);
 8003900:	4819      	ldr	r0, [pc, #100]	@ (8003968 <main+0xb0>)
 8003902:	f7ff fd3e 	bl	8003382 <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM13);
 8003906:	4819      	ldr	r0, [pc, #100]	@ (800396c <main+0xb4>)
 8003908:	f7ff fd3b 	bl	8003382 <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM14);
 800390c:	4818      	ldr	r0, [pc, #96]	@ (8003970 <main+0xb8>)
 800390e:	f7ff fd38 	bl	8003382 <LL_TIM_EnableCounter>

  PARM_load();
 8003912:	f7fe f861 	bl	80019d8 <PARM_load>

  BuzzerPlayInit();
 8003916:	f7fd fe4d 	bl	80015b4 <BuzzerPlayInit>

  // interrupt when finished receiving
  LL_USART_EnableIT_RXNE(USART1);
 800391a:	4816      	ldr	r0, [pc, #88]	@ (8003974 <main+0xbc>)
 800391c:	f7ff fe66 	bl	80035ec <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART2);
 8003920:	4815      	ldr	r0, [pc, #84]	@ (8003978 <main+0xc0>)
 8003922:	f7ff fe63 	bl	80035ec <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART3);
 8003926:	4815      	ldr	r0, [pc, #84]	@ (800397c <main+0xc4>)
 8003928:	f7ff fe60 	bl	80035ec <LL_USART_EnableIT_RXNE>

  // 필수 기기 점검
  SERVO_Initialization();
 800392c:	f7ff f924 	bl	8002b78 <SERVO_Initialization>
  RC_Initialization();
 8003930:	f7fe fe58 	bl	80025e4 <RC_Initialization>
  IMU_Initialization();
 8003934:	f7fd fe02 	bl	800153c <IMU_Initialization>
//  Baro_Initialization();
  BuzzerPlayOneCycle();
 8003938:	f7fd fe6a 	bl	8001610 <BuzzerPlayOneCycle>
  SERVO_doArm();
 800393c:	f7ff f950 	bl	8002be0 <SERVO_doArm>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RC_GetData();
 8003940:	f7fe fece 	bl	80026e0 <RC_GetData>

	  IMU_GetData();
 8003944:	f7fd fe0c 	bl	8001560 <IMU_GetData>
//	  Baro_GetData();

	  if(fsFlag == 1){
 8003948:	4b0d      	ldr	r3, [pc, #52]	@ (8003980 <main+0xc8>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d102      	bne.n	8003956 <main+0x9e>
		  FS_mannualMode();
 8003950:	f7fd fee8 	bl	8001724 <FS_mannualMode>
 8003954:	e005      	b.n	8003962 <main+0xaa>
	  }
	  else{
		  LL_GPIO_ResetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 8003956:	2101      	movs	r1, #1
 8003958:	480a      	ldr	r0, [pc, #40]	@ (8003984 <main+0xcc>)
 800395a:	f7ff ff1b 	bl	8003794 <LL_GPIO_ResetOutputPin>
		  SERVO_control();
 800395e:	f7ff f99f 	bl	8002ca0 <SERVO_control>
	  }

	  Log_Send();
 8003962:	f7fd ff0d 	bl	8001780 <Log_Send>
	  RC_GetData();
 8003966:	e7eb      	b.n	8003940 <main+0x88>
 8003968:	40000800 	.word	0x40000800
 800396c:	40001c00 	.word	0x40001c00
 8003970:	40002000 	.word	0x40002000
 8003974:	40011000 	.word	0x40011000
 8003978:	40004400 	.word	0x40004400
 800397c:	40004800 	.word	0x40004800
 8003980:	200002e0 	.word	0x200002e0
 8003984:	40021000 	.word	0x40021000

08003988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b094      	sub	sp, #80	@ 0x50
 800398c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800398e:	f107 0320 	add.w	r3, r7, #32
 8003992:	2230      	movs	r2, #48	@ 0x30
 8003994:	2100      	movs	r1, #0
 8003996:	4618      	mov	r0, r3
 8003998:	f009 fddd 	bl	800d556 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800399c:	f107 030c 	add.w	r3, r7, #12
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	609a      	str	r2, [r3, #8]
 80039a8:	60da      	str	r2, [r3, #12]
 80039aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039ac:	2300      	movs	r3, #0
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	4b28      	ldr	r3, [pc, #160]	@ (8003a54 <SystemClock_Config+0xcc>)
 80039b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b4:	4a27      	ldr	r2, [pc, #156]	@ (8003a54 <SystemClock_Config+0xcc>)
 80039b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80039bc:	4b25      	ldr	r3, [pc, #148]	@ (8003a54 <SystemClock_Config+0xcc>)
 80039be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039c8:	2300      	movs	r3, #0
 80039ca:	607b      	str	r3, [r7, #4]
 80039cc:	4b22      	ldr	r3, [pc, #136]	@ (8003a58 <SystemClock_Config+0xd0>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a21      	ldr	r2, [pc, #132]	@ (8003a58 <SystemClock_Config+0xd0>)
 80039d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003a58 <SystemClock_Config+0xd0>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039e0:	607b      	str	r3, [r7, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039e4:	2301      	movs	r3, #1
 80039e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039ee:	2302      	movs	r3, #2
 80039f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80039f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80039f8:	2308      	movs	r3, #8
 80039fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80039fc:	23a8      	movs	r3, #168	@ 0xa8
 80039fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a00:	2302      	movs	r3, #2
 8003a02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003a04:	2307      	movs	r3, #7
 8003a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a08:	f107 0320 	add.w	r3, r7, #32
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f002 ff21 	bl	8006854 <HAL_RCC_OscConfig>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003a18:	f000 feee 	bl	80047f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a1c:	230f      	movs	r3, #15
 8003a1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a20:	2302      	movs	r3, #2
 8003a22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a28:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003a2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003a34:	f107 030c 	add.w	r3, r7, #12
 8003a38:	2105      	movs	r1, #5
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f003 f982 	bl	8006d44 <HAL_RCC_ClockConfig>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003a46:	f000 fed7 	bl	80047f8 <Error_Handler>
  }
}
 8003a4a:	bf00      	nop
 8003a4c:	3750      	adds	r7, #80	@ 0x50
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40023800 	.word	0x40023800
 8003a58:	40007000 	.word	0x40007000

08003a5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b092      	sub	sp, #72	@ 0x48
 8003a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8003a62:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	605a      	str	r2, [r3, #4]
 8003a6c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8003a6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	605a      	str	r2, [r3, #4]
 8003a78:	609a      	str	r2, [r3, #8]
 8003a7a:	60da      	str	r2, [r3, #12]
 8003a7c:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8003a7e:	f107 0318 	add.w	r3, r7, #24
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	605a      	str	r2, [r3, #4]
 8003a88:	609a      	str	r2, [r3, #8]
 8003a8a:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a8c:	463b      	mov	r3, r7
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	605a      	str	r2, [r3, #4]
 8003a94:	609a      	str	r2, [r3, #8]
 8003a96:	60da      	str	r2, [r3, #12]
 8003a98:	611a      	str	r2, [r3, #16]
 8003a9a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8003a9c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003aa0:	f7ff fedc 	bl	800385c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003aa4:	2004      	movs	r0, #4
 8003aa6:	f7ff fea9 	bl	80037fc <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC1   ------> ADC1_IN11
  */
  GPIO_InitStruct.Pin = RSSI_Pin;
 8003aaa:	2302      	movs	r3, #2
 8003aac:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(RSSI_GPIO_Port, &GPIO_InitStruct);
 8003ab6:	463b      	mov	r3, r7
 8003ab8:	4619      	mov	r1, r3
 8003aba:	481f      	ldr	r0, [pc, #124]	@ (8003b38 <MX_ADC1_Init+0xdc>)
 8003abc:	f003 fe76 	bl	80077ac <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	647b      	str	r3, [r7, #68]	@ 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8003acc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	481a      	ldr	r0, [pc, #104]	@ (8003b3c <MX_ADC1_Init+0xe0>)
 8003ad4:	f003 fb9a 	bl	800720c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8003adc:	2300      	movs	r3, #0
 8003ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8003aec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003af0:	4619      	mov	r1, r3
 8003af2:	4812      	ldr	r0, [pc, #72]	@ (8003b3c <MX_ADC1_Init+0xe0>)
 8003af4:	f003 fbb6 	bl	8007264 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8003af8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003afc:	480f      	ldr	r0, [pc, #60]	@ (8003b3c <MX_ADC1_Init+0xe0>)
 8003afe:	f7ff fbb9 	bl	8003274 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8003b02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b06:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8003b0c:	f107 0318 	add.w	r3, r7, #24
 8003b10:	4619      	mov	r1, r3
 8003b12:	480b      	ldr	r0, [pc, #44]	@ (8003b40 <MX_ADC1_Init+0xe4>)
 8003b14:	f003 fb32 	bl	800717c <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_11);
 8003b18:	4a0a      	ldr	r2, [pc, #40]	@ (8003b44 <MX_ADC1_Init+0xe8>)
 8003b1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003b1e:	4807      	ldr	r0, [pc, #28]	@ (8003b3c <MX_ADC1_Init+0xe0>)
 8003b20:	f7ff fb6b 	bl	80031fa <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8003b24:	2200      	movs	r2, #0
 8003b26:	4907      	ldr	r1, [pc, #28]	@ (8003b44 <MX_ADC1_Init+0xe8>)
 8003b28:	4804      	ldr	r0, [pc, #16]	@ (8003b3c <MX_ADC1_Init+0xe0>)
 8003b2a:	f7ff fbb6 	bl	800329a <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003b2e:	bf00      	nop
 8003b30:	3748      	adds	r7, #72	@ 0x48
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40020800 	.word	0x40020800
 8003b3c:	40012000 	.word	0x40012000
 8003b40:	40012300 	.word	0x40012300
 8003b44:	0030000b 	.word	0x0030000b

08003b48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b090      	sub	sp, #64	@ 0x40
 8003b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003b4e:	f107 0318 	add.w	r3, r7, #24
 8003b52:	2228      	movs	r2, #40	@ 0x28
 8003b54:	2100      	movs	r1, #0
 8003b56:	4618      	mov	r0, r3
 8003b58:	f009 fcfd 	bl	800d556 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b5c:	463b      	mov	r3, r7
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	605a      	str	r2, [r3, #4]
 8003b64:	609a      	str	r2, [r3, #8]
 8003b66:	60da      	str	r2, [r3, #12]
 8003b68:	611a      	str	r2, [r3, #16]
 8003b6a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003b6c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003b70:	f7ff fe74 	bl	800385c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003b74:	2001      	movs	r0, #1
 8003b76:	f7ff fe41 	bl	80037fc <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003b7a:	23e0      	movs	r3, #224	@ 0xe0
 8003b7c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003b82:	2303      	movs	r3, #3
 8003b84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003b8e:	2305      	movs	r3, #5
 8003b90:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b92:	463b      	mov	r3, r7
 8003b94:	4619      	mov	r1, r3
 8003b96:	4813      	ldr	r0, [pc, #76]	@ (8003be4 <MX_SPI1_Init+0x9c>)
 8003b98:	f003 fe08 	bl	80077ac <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003ba0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003ba4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003baa:	2302      	movs	r3, #2
 8003bac:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003bb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV128;
 8003bb8:	2330      	movs	r3, #48	@ 0x30
 8003bba:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003bc4:	230a      	movs	r3, #10
 8003bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003bc8:	f107 0318 	add.w	r3, r7, #24
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4806      	ldr	r0, [pc, #24]	@ (8003be8 <MX_SPI1_Init+0xa0>)
 8003bd0:	f003 ffc7 	bl	8007b62 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	4804      	ldr	r0, [pc, #16]	@ (8003be8 <MX_SPI1_Init+0xa0>)
 8003bd8:	f7ff fbc0 	bl	800335c <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003bdc:	bf00      	nop
 8003bde:	3740      	adds	r7, #64	@ 0x40
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40020000 	.word	0x40020000
 8003be8:	40013000 	.word	0x40013000

08003bec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b09a      	sub	sp, #104	@ 0x68
 8003bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003bf2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	605a      	str	r2, [r3, #4]
 8003bfc:	609a      	str	r2, [r3, #8]
 8003bfe:	60da      	str	r2, [r3, #12]
 8003c00:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003c02:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003c06:	2220      	movs	r2, #32
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f009 fca3 	bl	800d556 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8003c10:	f107 031c 	add.w	r3, r7, #28
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	605a      	str	r2, [r3, #4]
 8003c1a:	609a      	str	r2, [r3, #8]
 8003c1c:	60da      	str	r2, [r3, #12]
 8003c1e:	611a      	str	r2, [r3, #16]
 8003c20:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c22:	1d3b      	adds	r3, r7, #4
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	609a      	str	r2, [r3, #8]
 8003c2c:	60da      	str	r2, [r3, #12]
 8003c2e:	611a      	str	r2, [r3, #16]
 8003c30:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8003c32:	2001      	movs	r0, #1
 8003c34:	f7ff fe12 	bl	800385c <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 8003c38:	f7ff fa56 	bl	80030e8 <__NVIC_GetPriorityGrouping>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2103      	movs	r1, #3
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff faa6 	bl	8003194 <NVIC_EncodePriority>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	2019      	movs	r0, #25
 8003c4e:	f7ff fa77 	bl	8003140 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003c52:	2019      	movs	r0, #25
 8003c54:	f7ff fa56 	bl	8003104 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_InitStruct.Autoreload = 65535;
 8003c62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c66:	65fb      	str	r3, [r7, #92]	@ 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	663b      	str	r3, [r7, #96]	@ 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	667b      	str	r3, [r7, #100]	@ 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8003c70:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003c74:	4619      	mov	r1, r3
 8003c76:	483a      	ldr	r0, [pc, #232]	@ (8003d60 <MX_TIM1_Init+0x174>)
 8003c78:	f004 f838 	bl	8007cec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8003c7c:	4838      	ldr	r0, [pc, #224]	@ (8003d60 <MX_TIM1_Init+0x174>)
 8003c7e:	f7ff fb90 	bl	80033a2 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003c82:	2100      	movs	r1, #0
 8003c84:	4836      	ldr	r0, [pc, #216]	@ (8003d60 <MX_TIM1_Init+0x174>)
 8003c86:	f7ff fc27 	bl	80034d8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8003c8a:	2110      	movs	r1, #16
 8003c8c:	4834      	ldr	r0, [pc, #208]	@ (8003d60 <MX_TIM1_Init+0x174>)
 8003c8e:	f7ff fbdf 	bl	8003450 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003c92:	2360      	movs	r3, #96	@ 0x60
 8003c94:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003c96:	2300      	movs	r3, #0
 8003c98:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8003caa:	2300      	movs	r3, #0
 8003cac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	653b      	str	r3, [r7, #80]	@ 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8003cb2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	2110      	movs	r1, #16
 8003cba:	4829      	ldr	r0, [pc, #164]	@ (8003d60 <MX_TIM1_Init+0x174>)
 8003cbc:	f004 f8b0 	bl	8007e20 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8003cc0:	2110      	movs	r1, #16
 8003cc2:	4827      	ldr	r0, [pc, #156]	@ (8003d60 <MX_TIM1_Init+0x174>)
 8003cc4:	f7ff fb7e 	bl	80033c4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8003cc8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ccc:	4824      	ldr	r0, [pc, #144]	@ (8003d60 <MX_TIM1_Init+0x174>)
 8003cce:	f7ff fbbf 	bl	8003450 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8003cd2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003cdc:	4820      	ldr	r0, [pc, #128]	@ (8003d60 <MX_TIM1_Init+0x174>)
 8003cde:	f004 f89f 	bl	8007e20 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8003ce2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ce6:	481e      	ldr	r0, [pc, #120]	@ (8003d60 <MX_TIM1_Init+0x174>)
 8003ce8:	f7ff fb6c 	bl	80033c4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8003cec:	2100      	movs	r1, #0
 8003cee:	481c      	ldr	r0, [pc, #112]	@ (8003d60 <MX_TIM1_Init+0x174>)
 8003cf0:	f7ff fc07 	bl	8003502 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8003cf4:	481a      	ldr	r0, [pc, #104]	@ (8003d60 <MX_TIM1_Init+0x174>)
 8003cf6:	f7ff fc17 	bl	8003528 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8003d02:	2300      	movs	r3, #0
 8003d04:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8003d10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8003d16:	2300      	movs	r3, #0
 8003d18:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8003d1a:	f107 031c 	add.w	r3, r7, #28
 8003d1e:	4619      	mov	r1, r3
 8003d20:	480f      	ldr	r0, [pc, #60]	@ (8003d60 <MX_TIM1_Init+0x174>)
 8003d22:	f004 f8be 	bl	8007ea2 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM1);
 8003d26:	480e      	ldr	r0, [pc, #56]	@ (8003d60 <MX_TIM1_Init+0x174>)
 8003d28:	f7ff fc0e 	bl	8003548 <LL_TIM_EnableIT_UPDATE>

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8003d2c:	2010      	movs	r0, #16
 8003d2e:	f7ff fd65 	bl	80037fc <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PE11   ------> TIM1_CH2
  PE13   ------> TIM1_CH3
  */
  GPIO_InitStruct.Pin = MAIN_CH11_Pin|MAIN_CH12_Pin;
 8003d32:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003d36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003d40:	2300      	movs	r3, #0
 8003d42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d4c:	1d3b      	adds	r3, r7, #4
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4804      	ldr	r0, [pc, #16]	@ (8003d64 <MX_TIM1_Init+0x178>)
 8003d52:	f003 fd2b 	bl	80077ac <LL_GPIO_Init>

}
 8003d56:	bf00      	nop
 8003d58:	3768      	adds	r7, #104	@ 0x68
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40010000 	.word	0x40010000
 8003d64:	40021000 	.word	0x40021000

08003d68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b094      	sub	sp, #80	@ 0x50
 8003d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003d6e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	605a      	str	r2, [r3, #4]
 8003d78:	609a      	str	r2, [r3, #8]
 8003d7a:	60da      	str	r2, [r3, #12]
 8003d7c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003d7e:	f107 031c 	add.w	r3, r7, #28
 8003d82:	2220      	movs	r2, #32
 8003d84:	2100      	movs	r1, #0
 8003d86:	4618      	mov	r0, r3
 8003d88:	f009 fbe5 	bl	800d556 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	605a      	str	r2, [r3, #4]
 8003d94:	609a      	str	r2, [r3, #8]
 8003d96:	60da      	str	r2, [r3, #12]
 8003d98:	611a      	str	r2, [r3, #16]
 8003d9a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8003d9c:	2002      	movs	r0, #2
 8003d9e:	f7ff fd45 	bl	800382c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 8003da2:	2353      	movs	r3, #83	@ 0x53
 8003da4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003da6:	2300      	movs	r3, #0
 8003da8:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 20000-LL_TIM_IC_FILTER_FDIV1_N2;
 8003daa:	4b48      	ldr	r3, [pc, #288]	@ (8003ecc <MX_TIM3_Init+0x164>)
 8003dac:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003dae:	2300      	movs	r3, #0
 8003db0:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003db2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003db6:	4619      	mov	r1, r3
 8003db8:	4845      	ldr	r0, [pc, #276]	@ (8003ed0 <MX_TIM3_Init+0x168>)
 8003dba:	f003 ff97 	bl	8007cec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8003dbe:	4844      	ldr	r0, [pc, #272]	@ (8003ed0 <MX_TIM3_Init+0x168>)
 8003dc0:	f7ff faef 	bl	80033a2 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	4842      	ldr	r0, [pc, #264]	@ (8003ed0 <MX_TIM3_Init+0x168>)
 8003dc8:	f7ff fb86 	bl	80034d8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8003dcc:	2101      	movs	r1, #1
 8003dce:	4840      	ldr	r0, [pc, #256]	@ (8003ed0 <MX_TIM3_Init+0x168>)
 8003dd0:	f7ff fb3e 	bl	8003450 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003dd4:	2360      	movs	r3, #96	@ 0x60
 8003dd6:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8003de0:	2300      	movs	r3, #0
 8003de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003de4:	2300      	movs	r3, #0
 8003de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003de8:	f107 031c 	add.w	r3, r7, #28
 8003dec:	461a      	mov	r2, r3
 8003dee:	2101      	movs	r1, #1
 8003df0:	4837      	ldr	r0, [pc, #220]	@ (8003ed0 <MX_TIM3_Init+0x168>)
 8003df2:	f004 f815 	bl	8007e20 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8003df6:	2101      	movs	r1, #1
 8003df8:	4835      	ldr	r0, [pc, #212]	@ (8003ed0 <MX_TIM3_Init+0x168>)
 8003dfa:	f7ff fae3 	bl	80033c4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 8003dfe:	2110      	movs	r1, #16
 8003e00:	4833      	ldr	r0, [pc, #204]	@ (8003ed0 <MX_TIM3_Init+0x168>)
 8003e02:	f7ff fb25 	bl	8003450 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8003e06:	f107 031c 	add.w	r3, r7, #28
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	2110      	movs	r1, #16
 8003e0e:	4830      	ldr	r0, [pc, #192]	@ (8003ed0 <MX_TIM3_Init+0x168>)
 8003e10:	f004 f806 	bl	8007e20 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8003e14:	2110      	movs	r1, #16
 8003e16:	482e      	ldr	r0, [pc, #184]	@ (8003ed0 <MX_TIM3_Init+0x168>)
 8003e18:	f7ff fad4 	bl	80033c4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
 8003e1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e20:	482b      	ldr	r0, [pc, #172]	@ (8003ed0 <MX_TIM3_Init+0x168>)
 8003e22:	f7ff fb15 	bl	8003450 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8003e26:	f107 031c 	add.w	r3, r7, #28
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e30:	4827      	ldr	r0, [pc, #156]	@ (8003ed0 <MX_TIM3_Init+0x168>)
 8003e32:	f003 fff5 	bl	8007e20 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
 8003e36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e3a:	4825      	ldr	r0, [pc, #148]	@ (8003ed0 <MX_TIM3_Init+0x168>)
 8003e3c:	f7ff fac2 	bl	80033c4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8003e40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003e44:	4822      	ldr	r0, [pc, #136]	@ (8003ed0 <MX_TIM3_Init+0x168>)
 8003e46:	f7ff fb03 	bl	8003450 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003e4a:	f107 031c 	add.w	r3, r7, #28
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003e54:	481e      	ldr	r0, [pc, #120]	@ (8003ed0 <MX_TIM3_Init+0x168>)
 8003e56:	f003 ffe3 	bl	8007e20 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8003e5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003e5e:	481c      	ldr	r0, [pc, #112]	@ (8003ed0 <MX_TIM3_Init+0x168>)
 8003e60:	f7ff fab0 	bl	80033c4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8003e64:	2100      	movs	r1, #0
 8003e66:	481a      	ldr	r0, [pc, #104]	@ (8003ed0 <MX_TIM3_Init+0x168>)
 8003e68:	f7ff fb4b 	bl	8003502 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8003e6c:	4818      	ldr	r0, [pc, #96]	@ (8003ed0 <MX_TIM3_Init+0x168>)
 8003e6e:	f7ff fb5b 	bl	8003528 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003e72:	2002      	movs	r0, #2
 8003e74:	f7ff fcc2 	bl	80037fc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003e78:	2004      	movs	r0, #4
 8003e7a:	f7ff fcbf 	bl	80037fc <LL_AHB1_GRP1_EnableClock>
  PB0   ------> TIM3_CH3
  PB1   ------> TIM3_CH4
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = MAIN_CH9_Pin|MAIN_CH10_Pin;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003e82:	2302      	movs	r3, #2
 8003e84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003e92:	2302      	movs	r3, #2
 8003e94:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e96:	1d3b      	adds	r3, r7, #4
 8003e98:	4619      	mov	r1, r3
 8003e9a:	480e      	ldr	r0, [pc, #56]	@ (8003ed4 <MX_TIM3_Init+0x16c>)
 8003e9c:	f003 fc86 	bl	80077ac <LL_GPIO_Init>

  GPIO_InitStruct.Pin = MAIN_CH2_Pin|MAIN_CH3_Pin;
 8003ea0:	23c0      	movs	r3, #192	@ 0xc0
 8003ea2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eb8:	1d3b      	adds	r3, r7, #4
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4806      	ldr	r0, [pc, #24]	@ (8003ed8 <MX_TIM3_Init+0x170>)
 8003ebe:	f003 fc75 	bl	80077ac <LL_GPIO_Init>

}
 8003ec2:	bf00      	nop
 8003ec4:	3750      	adds	r7, #80	@ 0x50
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	fff04e20 	.word	0xfff04e20
 8003ed0:	40000400 	.word	0x40000400
 8003ed4:	40020400 	.word	0x40020400
 8003ed8:	40020800 	.word	0x40020800

08003edc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b094      	sub	sp, #80	@ 0x50
 8003ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003ee2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	605a      	str	r2, [r3, #4]
 8003eec:	609a      	str	r2, [r3, #8]
 8003eee:	60da      	str	r2, [r3, #12]
 8003ef0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003ef2:	f107 031c 	add.w	r3, r7, #28
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	2100      	movs	r1, #0
 8003efa:	4618      	mov	r0, r3
 8003efc:	f009 fb2b 	bl	800d556 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f00:	1d3b      	adds	r3, r7, #4
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	605a      	str	r2, [r3, #4]
 8003f08:	609a      	str	r2, [r3, #8]
 8003f0a:	60da      	str	r2, [r3, #12]
 8003f0c:	611a      	str	r2, [r3, #16]
 8003f0e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8003f10:	2004      	movs	r0, #4
 8003f12:	f7ff fc8b 	bl	800382c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 4;
 8003f16:	2304      	movs	r3, #4
 8003f18:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 64220-LL_TIM_IC_FILTER_FDIV1_N2;
 8003f1e:	4b41      	ldr	r3, [pc, #260]	@ (8004024 <MX_TIM4_Init+0x148>)
 8003f20:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003f22:	2300      	movs	r3, #0
 8003f24:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8003f26:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	483e      	ldr	r0, [pc, #248]	@ (8004028 <MX_TIM4_Init+0x14c>)
 8003f2e:	f003 fedd 	bl	8007cec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8003f32:	483d      	ldr	r0, [pc, #244]	@ (8004028 <MX_TIM4_Init+0x14c>)
 8003f34:	f7ff fa35 	bl	80033a2 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003f38:	2100      	movs	r1, #0
 8003f3a:	483b      	ldr	r0, [pc, #236]	@ (8004028 <MX_TIM4_Init+0x14c>)
 8003f3c:	f7ff facc 	bl	80034d8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH2);
 8003f40:	2110      	movs	r1, #16
 8003f42:	4839      	ldr	r0, [pc, #228]	@ (8004028 <MX_TIM4_Init+0x14c>)
 8003f44:	f7ff fa84 	bl	8003450 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003f48:	2360      	movs	r3, #96	@ 0x60
 8003f4a:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003f50:	2300      	movs	r3, #0
 8003f52:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8003f54:	2300      	movs	r3, #0
 8003f56:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8003f5c:	f107 031c 	add.w	r3, r7, #28
 8003f60:	461a      	mov	r2, r3
 8003f62:	2110      	movs	r1, #16
 8003f64:	4830      	ldr	r0, [pc, #192]	@ (8004028 <MX_TIM4_Init+0x14c>)
 8003f66:	f003 ff5b 	bl	8007e20 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 8003f6a:	2110      	movs	r1, #16
 8003f6c:	482e      	ldr	r0, [pc, #184]	@ (8004028 <MX_TIM4_Init+0x14c>)
 8003f6e:	f7ff fa29 	bl	80033c4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH3);
 8003f72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f76:	482c      	ldr	r0, [pc, #176]	@ (8004028 <MX_TIM4_Init+0x14c>)
 8003f78:	f7ff fa6a 	bl	8003450 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8003f7c:	f107 031c 	add.w	r3, r7, #28
 8003f80:	461a      	mov	r2, r3
 8003f82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f86:	4828      	ldr	r0, [pc, #160]	@ (8004028 <MX_TIM4_Init+0x14c>)
 8003f88:	f003 ff4a 	bl	8007e20 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 8003f8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f90:	4825      	ldr	r0, [pc, #148]	@ (8004028 <MX_TIM4_Init+0x14c>)
 8003f92:	f7ff fa17 	bl	80033c4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH4);
 8003f96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f9a:	4823      	ldr	r0, [pc, #140]	@ (8004028 <MX_TIM4_Init+0x14c>)
 8003f9c:	f7ff fa58 	bl	8003450 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003fa0:	f107 031c 	add.w	r3, r7, #28
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003faa:	481f      	ldr	r0, [pc, #124]	@ (8004028 <MX_TIM4_Init+0x14c>)
 8003fac:	f003 ff38 	bl	8007e20 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH4);
 8003fb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003fb4:	481c      	ldr	r0, [pc, #112]	@ (8004028 <MX_TIM4_Init+0x14c>)
 8003fb6:	f7ff fa05 	bl	80033c4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8003fba:	2100      	movs	r1, #0
 8003fbc:	481a      	ldr	r0, [pc, #104]	@ (8004028 <MX_TIM4_Init+0x14c>)
 8003fbe:	f7ff faa0 	bl	8003502 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8003fc2:	4819      	ldr	r0, [pc, #100]	@ (8004028 <MX_TIM4_Init+0x14c>)
 8003fc4:	f7ff fab0 	bl	8003528 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8003fc8:	2008      	movs	r0, #8
 8003fca:	f7ff fc17 	bl	80037fc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003fce:	2002      	movs	r0, #2
 8003fd0:	f7ff fc14 	bl	80037fc <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PD14   ------> TIM4_CH3
  PD15   ------> TIM4_CH4
  PB7   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = Buzzer_Pin|MAIN_CH4_Pin;
 8003fd4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003fd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003fea:	2302      	movs	r3, #2
 8003fec:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fee:	1d3b      	adds	r3, r7, #4
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	480e      	ldr	r0, [pc, #56]	@ (800402c <MX_TIM4_Init+0x150>)
 8003ff4:	f003 fbda 	bl	80077ac <LL_GPIO_Init>

  GPIO_InitStruct.Pin = MAIN_CH1_Pin;
 8003ff8:	2380      	movs	r3, #128	@ 0x80
 8003ffa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004000:	2300      	movs	r3, #0
 8004002:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004004:	2300      	movs	r3, #0
 8004006:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800400c:	2302      	movs	r3, #2
 800400e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(MAIN_CH1_GPIO_Port, &GPIO_InitStruct);
 8004010:	1d3b      	adds	r3, r7, #4
 8004012:	4619      	mov	r1, r3
 8004014:	4806      	ldr	r0, [pc, #24]	@ (8004030 <MX_TIM4_Init+0x154>)
 8004016:	f003 fbc9 	bl	80077ac <LL_GPIO_Init>

}
 800401a:	bf00      	nop
 800401c:	3750      	adds	r7, #80	@ 0x50
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	fff0fadc 	.word	0xfff0fadc
 8004028:	40000800 	.word	0x40000800
 800402c:	40020c00 	.word	0x40020c00
 8004030:	40020400 	.word	0x40020400

08004034 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b094      	sub	sp, #80	@ 0x50
 8004038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800403a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	605a      	str	r2, [r3, #4]
 8004044:	609a      	str	r2, [r3, #8]
 8004046:	60da      	str	r2, [r3, #12]
 8004048:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800404a:	f107 031c 	add.w	r3, r7, #28
 800404e:	2220      	movs	r2, #32
 8004050:	2100      	movs	r1, #0
 8004052:	4618      	mov	r0, r3
 8004054:	f009 fa7f 	bl	800d556 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004058:	1d3b      	adds	r3, r7, #4
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	605a      	str	r2, [r3, #4]
 8004060:	609a      	str	r2, [r3, #8]
 8004062:	60da      	str	r2, [r3, #12]
 8004064:	611a      	str	r2, [r3, #16]
 8004066:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8004068:	2008      	movs	r0, #8
 800406a:	f7ff fbdf 	bl	800382c <LL_APB1_GRP1_EnableClock>

  /* TIM5 interrupt Init */
  NVIC_SetPriority(TIM5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 800406e:	f7ff f83b 	bl	80030e8 <__NVIC_GetPriorityGrouping>
 8004072:	4603      	mov	r3, r0
 8004074:	2200      	movs	r2, #0
 8004076:	2103      	movs	r1, #3
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff f88b 	bl	8003194 <NVIC_EncodePriority>
 800407e:	4603      	mov	r3, r0
 8004080:	4619      	mov	r1, r3
 8004082:	2032      	movs	r0, #50	@ 0x32
 8004084:	f7ff f85c 	bl	8003140 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8004088:	2032      	movs	r0, #50	@ 0x32
 800408a:	f7ff f83b 	bl	8003104 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 800408e:	2353      	movs	r3, #83	@ 0x53
 8004090:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004092:	2300      	movs	r3, #0
 8004094:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 20000-LL_TIM_IC_FILTER_FDIV1_N2;
 8004096:	4b3f      	ldr	r3, [pc, #252]	@ (8004194 <MX_TIM5_Init+0x160>)
 8004098:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800409a:	2300      	movs	r3, #0
 800409c:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 800409e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80040a2:	4619      	mov	r1, r3
 80040a4:	483c      	ldr	r0, [pc, #240]	@ (8004198 <MX_TIM5_Init+0x164>)
 80040a6:	f003 fe21 	bl	8007cec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 80040aa:	483b      	ldr	r0, [pc, #236]	@ (8004198 <MX_TIM5_Init+0x164>)
 80040ac:	f7ff f979 	bl	80033a2 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 80040b0:	2100      	movs	r1, #0
 80040b2:	4839      	ldr	r0, [pc, #228]	@ (8004198 <MX_TIM5_Init+0x164>)
 80040b4:	f7ff fa10 	bl	80034d8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 80040b8:	2101      	movs	r1, #1
 80040ba:	4837      	ldr	r0, [pc, #220]	@ (8004198 <MX_TIM5_Init+0x164>)
 80040bc:	f7ff f9c8 	bl	8003450 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80040c0:	2360      	movs	r3, #96	@ 0x60
 80040c2:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80040c4:	2300      	movs	r3, #0
 80040c6:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80040c8:	2300      	movs	r3, #0
 80040ca:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 80040cc:	4b33      	ldr	r3, [pc, #204]	@ (800419c <MX_TIM5_Init+0x168>)
 80040ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80040d0:	2300      	movs	r3, #0
 80040d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80040d4:	f107 031c 	add.w	r3, r7, #28
 80040d8:	461a      	mov	r2, r3
 80040da:	2101      	movs	r1, #1
 80040dc:	482e      	ldr	r0, [pc, #184]	@ (8004198 <MX_TIM5_Init+0x164>)
 80040de:	f003 fe9f 	bl	8007e20 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH1);
 80040e2:	2101      	movs	r1, #1
 80040e4:	482c      	ldr	r0, [pc, #176]	@ (8004198 <MX_TIM5_Init+0x164>)
 80040e6:	f7ff f96d 	bl	80033c4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 80040ea:	2110      	movs	r1, #16
 80040ec:	482a      	ldr	r0, [pc, #168]	@ (8004198 <MX_TIM5_Init+0x164>)
 80040ee:	f7ff f9af 	bl	8003450 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80040f2:	f107 031c 	add.w	r3, r7, #28
 80040f6:	461a      	mov	r2, r3
 80040f8:	2110      	movs	r1, #16
 80040fa:	4827      	ldr	r0, [pc, #156]	@ (8004198 <MX_TIM5_Init+0x164>)
 80040fc:	f003 fe90 	bl	8007e20 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH2);
 8004100:	2110      	movs	r1, #16
 8004102:	4825      	ldr	r0, [pc, #148]	@ (8004198 <MX_TIM5_Init+0x164>)
 8004104:	f7ff f95e 	bl	80033c4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 8004108:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800410c:	4822      	ldr	r0, [pc, #136]	@ (8004198 <MX_TIM5_Init+0x164>)
 800410e:	f7ff f99f 	bl	8003450 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8004112:	f107 031c 	add.w	r3, r7, #28
 8004116:	461a      	mov	r2, r3
 8004118:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800411c:	481e      	ldr	r0, [pc, #120]	@ (8004198 <MX_TIM5_Init+0x164>)
 800411e:	f003 fe7f 	bl	8007e20 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH3);
 8004122:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004126:	481c      	ldr	r0, [pc, #112]	@ (8004198 <MX_TIM5_Init+0x164>)
 8004128:	f7ff f94c 	bl	80033c4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 800412c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004130:	4819      	ldr	r0, [pc, #100]	@ (8004198 <MX_TIM5_Init+0x164>)
 8004132:	f7ff f98d 	bl	8003450 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8004136:	f107 031c 	add.w	r3, r7, #28
 800413a:	461a      	mov	r2, r3
 800413c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004140:	4815      	ldr	r0, [pc, #84]	@ (8004198 <MX_TIM5_Init+0x164>)
 8004142:	f003 fe6d 	bl	8007e20 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH4);
 8004146:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800414a:	4813      	ldr	r0, [pc, #76]	@ (8004198 <MX_TIM5_Init+0x164>)
 800414c:	f7ff f93a 	bl	80033c4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8004150:	2100      	movs	r1, #0
 8004152:	4811      	ldr	r0, [pc, #68]	@ (8004198 <MX_TIM5_Init+0x164>)
 8004154:	f7ff f9d5 	bl	8003502 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8004158:	480f      	ldr	r0, [pc, #60]	@ (8004198 <MX_TIM5_Init+0x164>)
 800415a:	f7ff f9e5 	bl	8003528 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM5);
 800415e:	480e      	ldr	r0, [pc, #56]	@ (8004198 <MX_TIM5_Init+0x164>)
 8004160:	f7ff f9f2 	bl	8003548 <LL_TIM_EnableIT_UPDATE>

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004164:	2001      	movs	r0, #1
 8004166:	f7ff fb49 	bl	80037fc <LL_AHB1_GRP1_EnableClock>
  PA0-WKUP   ------> TIM5_CH1
  PA1   ------> TIM5_CH2
  PA2   ------> TIM5_CH3
  PA3   ------> TIM5_CH4
  */
  GPIO_InitStruct.Pin = MAIN_CH5_Pin|MAIN_CH6_Pin|MAIN_CH7_Pin|MAIN_CH8_Pin;
 800416a:	230f      	movs	r3, #15
 800416c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800416e:	2302      	movs	r3, #2
 8004170:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004176:	2300      	movs	r3, #0
 8004178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800417e:	2302      	movs	r3, #2
 8004180:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004182:	1d3b      	adds	r3, r7, #4
 8004184:	4619      	mov	r1, r3
 8004186:	4806      	ldr	r0, [pc, #24]	@ (80041a0 <MX_TIM5_Init+0x16c>)
 8004188:	f003 fb10 	bl	80077ac <LL_GPIO_Init>

}
 800418c:	bf00      	nop
 800418e:	3750      	adds	r7, #80	@ 0x50
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	fff04e20 	.word	0xfff04e20
 8004198:	40000c00 	.word	0x40000c00
 800419c:	fff003e8 	.word	0xfff003e8
 80041a0:	40020000 	.word	0x40020000

080041a4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08e      	sub	sp, #56	@ 0x38
 80041a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80041aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	605a      	str	r2, [r3, #4]
 80041b4:	609a      	str	r2, [r3, #8]
 80041b6:	60da      	str	r2, [r3, #12]
 80041b8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80041ba:	1d3b      	adds	r3, r7, #4
 80041bc:	2220      	movs	r2, #32
 80041be:	2100      	movs	r1, #0
 80041c0:	4618      	mov	r0, r3
 80041c2:	f009 f9c8 	bl	800d556 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM13);
 80041c6:	2080      	movs	r0, #128	@ 0x80
 80041c8:	f7ff fb30 	bl	800382c <LL_APB1_GRP1_EnableClock>

  /* TIM13 interrupt Init */
  NVIC_SetPriority(TIM8_UP_TIM13_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 80041cc:	f7fe ff8c 	bl	80030e8 <__NVIC_GetPriorityGrouping>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2200      	movs	r2, #0
 80041d4:	2104      	movs	r1, #4
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fe ffdc 	bl	8003194 <NVIC_EncodePriority>
 80041dc:	4603      	mov	r3, r0
 80041de:	4619      	mov	r1, r3
 80041e0:	202c      	movs	r0, #44	@ 0x2c
 80041e2:	f7fe ffad 	bl	8003140 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80041e6:	202c      	movs	r0, #44	@ 0x2c
 80041e8:	f7fe ff8c 	bl	8003104 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  TIM_InitStruct.Prescaler = 1;
 80041ec:	2301      	movs	r3, #1
 80041ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80041f0:	2300      	movs	r3, #0
 80041f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_InitStruct.Autoreload = 42000-LL_TIM_IC_FILTER_FDIV1_N2;
 80041f4:	4b13      	ldr	r3, [pc, #76]	@ (8004244 <MX_TIM13_Init+0xa0>)
 80041f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80041f8:	2300      	movs	r3, #0
 80041fa:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_Init(TIM13, &TIM_InitStruct);
 80041fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004200:	4619      	mov	r1, r3
 8004202:	4811      	ldr	r0, [pc, #68]	@ (8004248 <MX_TIM13_Init+0xa4>)
 8004204:	f003 fd72 	bl	8007cec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM13);
 8004208:	480f      	ldr	r0, [pc, #60]	@ (8004248 <MX_TIM13_Init+0xa4>)
 800420a:	f7ff f8ca 	bl	80033a2 <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 800420e:	2300      	movs	r3, #0
 8004210:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004212:	2300      	movs	r3, #0
 8004214:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 800421a:	2300      	movs	r3, #0
 800421c:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM13, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8004222:	1d3b      	adds	r3, r7, #4
 8004224:	461a      	mov	r2, r3
 8004226:	2101      	movs	r1, #1
 8004228:	4807      	ldr	r0, [pc, #28]	@ (8004248 <MX_TIM13_Init+0xa4>)
 800422a:	f003 fdf9 	bl	8007e20 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM13, LL_TIM_CHANNEL_CH1);
 800422e:	2101      	movs	r1, #1
 8004230:	4805      	ldr	r0, [pc, #20]	@ (8004248 <MX_TIM13_Init+0xa4>)
 8004232:	f7ff f8c7 	bl	80033c4 <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM13_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM13);
 8004236:	4804      	ldr	r0, [pc, #16]	@ (8004248 <MX_TIM13_Init+0xa4>)
 8004238:	f7ff f986 	bl	8003548 <LL_TIM_EnableIT_UPDATE>

  /* USER CODE END TIM13_Init 2 */

}
 800423c:	bf00      	nop
 800423e:	3738      	adds	r7, #56	@ 0x38
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	fff0a410 	.word	0xfff0a410
 8004248:	40001c00 	.word	0x40001c00

0800424c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08e      	sub	sp, #56	@ 0x38
 8004250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004252:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	605a      	str	r2, [r3, #4]
 800425c:	609a      	str	r2, [r3, #8]
 800425e:	60da      	str	r2, [r3, #12]
 8004260:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004262:	1d3b      	adds	r3, r7, #4
 8004264:	2220      	movs	r2, #32
 8004266:	2100      	movs	r1, #0
 8004268:	4618      	mov	r0, r3
 800426a:	f009 f974 	bl	800d556 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM14);
 800426e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004272:	f7ff fadb 	bl	800382c <LL_APB1_GRP1_EnableClock>

  /* TIM14 interrupt Init */
  NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 8004276:	f7fe ff37 	bl	80030e8 <__NVIC_GetPriorityGrouping>
 800427a:	4603      	mov	r3, r0
 800427c:	2200      	movs	r2, #0
 800427e:	2104      	movs	r1, #4
 8004280:	4618      	mov	r0, r3
 8004282:	f7fe ff87 	bl	8003194 <NVIC_EncodePriority>
 8004286:	4603      	mov	r3, r0
 8004288:	4619      	mov	r1, r3
 800428a:	202d      	movs	r0, #45	@ 0x2d
 800428c:	f7fe ff58 	bl	8003140 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004290:	202d      	movs	r0, #45	@ 0x2d
 8004292:	f7fe ff37 	bl	8003104 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8004296:	2300      	movs	r3, #0
 8004298:	84bb      	strh	r3, [r7, #36]	@ 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800429a:	2300      	movs	r3, #0
 800429c:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_InitStruct.Autoreload = 84-LL_TIM_IC_FILTER_FDIV1_N2;
 800429e:	4b14      	ldr	r3, [pc, #80]	@ (80042f0 <MX_TIM14_Init+0xa4>)
 80042a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80042a2:	2300      	movs	r3, #0
 80042a4:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_Init(TIM14, &TIM_InitStruct);
 80042a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042aa:	4619      	mov	r1, r3
 80042ac:	4811      	ldr	r0, [pc, #68]	@ (80042f4 <MX_TIM14_Init+0xa8>)
 80042ae:	f003 fd1d 	bl	8007cec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM14);
 80042b2:	4810      	ldr	r0, [pc, #64]	@ (80042f4 <MX_TIM14_Init+0xa8>)
 80042b4:	f7ff f875 	bl	80033a2 <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 80042b8:	2300      	movs	r3, #0
 80042ba:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80042bc:	2300      	movs	r3, #0
 80042be:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM14, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80042cc:	1d3b      	adds	r3, r7, #4
 80042ce:	461a      	mov	r2, r3
 80042d0:	2101      	movs	r1, #1
 80042d2:	4808      	ldr	r0, [pc, #32]	@ (80042f4 <MX_TIM14_Init+0xa8>)
 80042d4:	f003 fda4 	bl	8007e20 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM14, LL_TIM_CHANNEL_CH1);
 80042d8:	2101      	movs	r1, #1
 80042da:	4806      	ldr	r0, [pc, #24]	@ (80042f4 <MX_TIM14_Init+0xa8>)
 80042dc:	f7ff f872 	bl	80033c4 <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM14_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM14);
 80042e0:	4804      	ldr	r0, [pc, #16]	@ (80042f4 <MX_TIM14_Init+0xa8>)
 80042e2:	f7ff f931 	bl	8003548 <LL_TIM_EnableIT_UPDATE>

  /* USER CODE END TIM14_Init 2 */

}
 80042e6:	bf00      	nop
 80042e8:	3738      	adds	r7, #56	@ 0x38
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	fff00054 	.word	0xfff00054
 80042f4:	40002000 	.word	0x40002000

080042f8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08e      	sub	sp, #56	@ 0x38
 80042fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80042fe:	f107 031c 	add.w	r3, r7, #28
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	605a      	str	r2, [r3, #4]
 8004308:	609a      	str	r2, [r3, #8]
 800430a:	60da      	str	r2, [r3, #12]
 800430c:	611a      	str	r2, [r3, #16]
 800430e:	615a      	str	r2, [r3, #20]
 8004310:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004312:	1d3b      	adds	r3, r7, #4
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	605a      	str	r2, [r3, #4]
 800431a:	609a      	str	r2, [r3, #8]
 800431c:	60da      	str	r2, [r3, #12]
 800431e:	611a      	str	r2, [r3, #16]
 8004320:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8004322:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004326:	f7ff fa81 	bl	800382c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800432a:	2004      	movs	r0, #4
 800432c:	f7ff fa66 	bl	80037fc <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = GPS1_TX_Pin|GPS2_RX_Pin;
 8004330:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004334:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004336:	2302      	movs	r3, #2
 8004338:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800433a:	2303      	movs	r3, #3
 800433c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800433e:	2300      	movs	r3, #0
 8004340:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8004346:	2308      	movs	r3, #8
 8004348:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800434a:	1d3b      	adds	r3, r7, #4
 800434c:	4619      	mov	r1, r3
 800434e:	4811      	ldr	r0, [pc, #68]	@ (8004394 <MX_UART4_Init+0x9c>)
 8004350:	f003 fa2c 	bl	80077ac <LL_GPIO_Init>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8004354:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8004358:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800435a:	2300      	movs	r3, #0
 800435c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800435e:	2300      	movs	r3, #0
 8004360:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004362:	2300      	movs	r3, #0
 8004364:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004366:	230c      	movs	r3, #12
 8004368:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800436a:	2300      	movs	r3, #0
 800436c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800436e:	2300      	movs	r3, #0
 8004370:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8004372:	f107 031c 	add.w	r3, r7, #28
 8004376:	4619      	mov	r1, r3
 8004378:	4807      	ldr	r0, [pc, #28]	@ (8004398 <MX_UART4_Init+0xa0>)
 800437a:	f004 f9e1 	bl	8008740 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 800437e:	4806      	ldr	r0, [pc, #24]	@ (8004398 <MX_UART4_Init+0xa0>)
 8004380:	f7ff f902 	bl	8003588 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8004384:	4804      	ldr	r0, [pc, #16]	@ (8004398 <MX_UART4_Init+0xa0>)
 8004386:	f7ff f8ef 	bl	8003568 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800438a:	bf00      	nop
 800438c:	3738      	adds	r7, #56	@ 0x38
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40020800 	.word	0x40020800
 8004398:	40004c00 	.word	0x40004c00

0800439c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08e      	sub	sp, #56	@ 0x38
 80043a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80043a2:	f107 031c 	add.w	r3, r7, #28
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	605a      	str	r2, [r3, #4]
 80043ac:	609a      	str	r2, [r3, #8]
 80043ae:	60da      	str	r2, [r3, #12]
 80043b0:	611a      	str	r2, [r3, #16]
 80043b2:	615a      	str	r2, [r3, #20]
 80043b4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b6:	1d3b      	adds	r3, r7, #4
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	605a      	str	r2, [r3, #4]
 80043be:	609a      	str	r2, [r3, #8]
 80043c0:	60da      	str	r2, [r3, #12]
 80043c2:	611a      	str	r2, [r3, #16]
 80043c4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 80043c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80043ca:	f7ff fa2f 	bl	800382c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80043ce:	2004      	movs	r0, #4
 80043d0:	f7ff fa14 	bl	80037fc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80043d4:	2008      	movs	r0, #8
 80043d6:	f7ff fa11 	bl	80037fc <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = GPS2_TX_Pin;
 80043da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80043de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80043e0:	2302      	movs	r3, #2
 80043e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80043e4:	2303      	movs	r3, #3
 80043e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80043f0:	2308      	movs	r3, #8
 80043f2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPS2_TX_GPIO_Port, &GPIO_InitStruct);
 80043f4:	1d3b      	adds	r3, r7, #4
 80043f6:	4619      	mov	r1, r3
 80043f8:	4821      	ldr	r0, [pc, #132]	@ (8004480 <MX_UART5_Init+0xe4>)
 80043fa:	f003 f9d7 	bl	80077ac <LL_GPIO_Init>

  GPIO_InitStruct.Pin = GPS2_RXD2_Pin;
 80043fe:	2304      	movs	r3, #4
 8004400:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004402:	2302      	movs	r3, #2
 8004404:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004406:	2303      	movs	r3, #3
 8004408:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800440a:	2300      	movs	r3, #0
 800440c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8004412:	2308      	movs	r3, #8
 8004414:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPS2_RXD2_GPIO_Port, &GPIO_InitStruct);
 8004416:	1d3b      	adds	r3, r7, #4
 8004418:	4619      	mov	r1, r3
 800441a:	481a      	ldr	r0, [pc, #104]	@ (8004484 <MX_UART5_Init+0xe8>)
 800441c:	f003 f9c6 	bl	80077ac <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8004420:	f7fe fe62 	bl	80030e8 <__NVIC_GetPriorityGrouping>
 8004424:	4603      	mov	r3, r0
 8004426:	2200      	movs	r2, #0
 8004428:	2102      	movs	r1, #2
 800442a:	4618      	mov	r0, r3
 800442c:	f7fe feb2 	bl	8003194 <NVIC_EncodePriority>
 8004430:	4603      	mov	r3, r0
 8004432:	4619      	mov	r1, r3
 8004434:	2035      	movs	r0, #53	@ 0x35
 8004436:	f7fe fe83 	bl	8003140 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 800443a:	2035      	movs	r0, #53	@ 0x35
 800443c:	f7fe fe62 	bl	8003104 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8004440:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8004444:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004446:	2300      	movs	r3, #0
 8004448:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800444a:	2300      	movs	r3, #0
 800444c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800444e:	2300      	movs	r3, #0
 8004450:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004452:	230c      	movs	r3, #12
 8004454:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004456:	2300      	movs	r3, #0
 8004458:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800445a:	2300      	movs	r3, #0
 800445c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 800445e:	f107 031c 	add.w	r3, r7, #28
 8004462:	4619      	mov	r1, r3
 8004464:	4808      	ldr	r0, [pc, #32]	@ (8004488 <MX_UART5_Init+0xec>)
 8004466:	f004 f96b 	bl	8008740 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 800446a:	4807      	ldr	r0, [pc, #28]	@ (8004488 <MX_UART5_Init+0xec>)
 800446c:	f7ff f88c 	bl	8003588 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8004470:	4805      	ldr	r0, [pc, #20]	@ (8004488 <MX_UART5_Init+0xec>)
 8004472:	f7ff f879 	bl	8003568 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004476:	bf00      	nop
 8004478:	3738      	adds	r7, #56	@ 0x38
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40020800 	.word	0x40020800
 8004484:	40020c00 	.word	0x40020c00
 8004488:	40005000 	.word	0x40005000

0800448c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08e      	sub	sp, #56	@ 0x38
 8004490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004492:	f107 031c 	add.w	r3, r7, #28
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	605a      	str	r2, [r3, #4]
 800449c:	609a      	str	r2, [r3, #8]
 800449e:	60da      	str	r2, [r3, #12]
 80044a0:	611a      	str	r2, [r3, #16]
 80044a2:	615a      	str	r2, [r3, #20]
 80044a4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a6:	1d3b      	adds	r3, r7, #4
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	605a      	str	r2, [r3, #4]
 80044ae:	609a      	str	r2, [r3, #8]
 80044b0:	60da      	str	r2, [r3, #12]
 80044b2:	611a      	str	r2, [r3, #16]
 80044b4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80044b6:	2010      	movs	r0, #16
 80044b8:	f7ff f9d0 	bl	800385c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80044bc:	2001      	movs	r0, #1
 80044be:	f7ff f99d 	bl	80037fc <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = RC_SRXL2_Pin;
 80044c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80044c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80044c8:	2302      	movs	r3, #2
 80044ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80044cc:	2303      	movs	r3, #3
 80044ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80044d0:	2300      	movs	r3, #0
 80044d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80044d4:	2301      	movs	r3, #1
 80044d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80044d8:	2307      	movs	r3, #7
 80044da:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(RC_SRXL2_GPIO_Port, &GPIO_InitStruct);
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	4619      	mov	r1, r3
 80044e0:	4817      	ldr	r0, [pc, #92]	@ (8004540 <MX_USART1_UART_Init+0xb4>)
 80044e2:	f003 f963 	bl	80077ac <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80044e6:	f7fe fdff 	bl	80030e8 <__NVIC_GetPriorityGrouping>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2200      	movs	r2, #0
 80044ee:	2100      	movs	r1, #0
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fe fe4f 	bl	8003194 <NVIC_EncodePriority>
 80044f6:	4603      	mov	r3, r0
 80044f8:	4619      	mov	r1, r3
 80044fa:	2025      	movs	r0, #37	@ 0x25
 80044fc:	f7fe fe20 	bl	8003140 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8004500:	2025      	movs	r0, #37	@ 0x25
 8004502:	f7fe fdff 	bl	8003104 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8004506:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800450a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800450c:	2300      	movs	r3, #0
 800450e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004510:	2300      	movs	r3, #0
 8004512:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004514:	2300      	movs	r3, #0
 8004516:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004518:	230c      	movs	r3, #12
 800451a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800451c:	2300      	movs	r3, #0
 800451e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8004520:	f107 031c 	add.w	r3, r7, #28
 8004524:	4619      	mov	r1, r3
 8004526:	4807      	ldr	r0, [pc, #28]	@ (8004544 <MX_USART1_UART_Init+0xb8>)
 8004528:	f004 f90a 	bl	8008740 <LL_USART_Init>
  LL_USART_Enable(USART1);
 800452c:	4805      	ldr	r0, [pc, #20]	@ (8004544 <MX_USART1_UART_Init+0xb8>)
 800452e:	f7ff f81b 	bl	8003568 <LL_USART_Enable>
  LL_USART_ConfigHalfDuplexMode(USART1);
 8004532:	4804      	ldr	r0, [pc, #16]	@ (8004544 <MX_USART1_UART_Init+0xb8>)
 8004534:	f7ff f83e 	bl	80035b4 <LL_USART_ConfigHalfDuplexMode>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004538:	bf00      	nop
 800453a:	3738      	adds	r7, #56	@ 0x38
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40020000 	.word	0x40020000
 8004544:	40011000 	.word	0x40011000

08004548 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08e      	sub	sp, #56	@ 0x38
 800454c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800454e:	f107 031c 	add.w	r3, r7, #28
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	605a      	str	r2, [r3, #4]
 8004558:	609a      	str	r2, [r3, #8]
 800455a:	60da      	str	r2, [r3, #12]
 800455c:	611a      	str	r2, [r3, #16]
 800455e:	615a      	str	r2, [r3, #20]
 8004560:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004562:	1d3b      	adds	r3, r7, #4
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	605a      	str	r2, [r3, #4]
 800456a:	609a      	str	r2, [r3, #8]
 800456c:	60da      	str	r2, [r3, #12]
 800456e:	611a      	str	r2, [r3, #16]
 8004570:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8004572:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8004576:	f7ff f959 	bl	800382c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800457a:	2008      	movs	r0, #8
 800457c:	f7ff f93e 	bl	80037fc <LL_AHB1_GRP1_EnableClock>
  PD3   ------> USART2_CTS
  PD4   ------> USART2_RTS
  PD5   ------> USART2_TX
  PD6   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|Telm1_TX_Pin|Telm1_RX_Pin;
 8004580:	2378      	movs	r3, #120	@ 0x78
 8004582:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004584:	2302      	movs	r3, #2
 8004586:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004588:	2303      	movs	r3, #3
 800458a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800458c:	2300      	movs	r3, #0
 800458e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004594:	2307      	movs	r3, #7
 8004596:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004598:	1d3b      	adds	r3, r7, #4
 800459a:	4619      	mov	r1, r3
 800459c:	4818      	ldr	r0, [pc, #96]	@ (8004600 <MX_USART2_UART_Init+0xb8>)
 800459e:	f003 f905 	bl	80077ac <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 80045a2:	f7fe fda1 	bl	80030e8 <__NVIC_GetPriorityGrouping>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2200      	movs	r2, #0
 80045aa:	2102      	movs	r1, #2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fe fdf1 	bl	8003194 <NVIC_EncodePriority>
 80045b2:	4603      	mov	r3, r0
 80045b4:	4619      	mov	r1, r3
 80045b6:	2026      	movs	r0, #38	@ 0x26
 80045b8:	f7fe fdc2 	bl	8003140 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80045bc:	2026      	movs	r0, #38	@ 0x26
 80045be:	f7fe fda1 	bl	8003104 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 57600;
 80045c2:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 80045c6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80045c8:	2300      	movs	r3, #0
 80045ca:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80045cc:	2300      	movs	r3, #0
 80045ce:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80045d4:	230c      	movs	r3, #12
 80045d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80045d8:	2300      	movs	r3, #0
 80045da:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80045dc:	2300      	movs	r3, #0
 80045de:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80045e0:	f107 031c 	add.w	r3, r7, #28
 80045e4:	4619      	mov	r1, r3
 80045e6:	4807      	ldr	r0, [pc, #28]	@ (8004604 <MX_USART2_UART_Init+0xbc>)
 80045e8:	f004 f8aa 	bl	8008740 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80045ec:	4805      	ldr	r0, [pc, #20]	@ (8004604 <MX_USART2_UART_Init+0xbc>)
 80045ee:	f7fe ffcb 	bl	8003588 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80045f2:	4804      	ldr	r0, [pc, #16]	@ (8004604 <MX_USART2_UART_Init+0xbc>)
 80045f4:	f7fe ffb8 	bl	8003568 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80045f8:	bf00      	nop
 80045fa:	3738      	adds	r7, #56	@ 0x38
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40020c00 	.word	0x40020c00
 8004604:	40004400 	.word	0x40004400

08004608 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08e      	sub	sp, #56	@ 0x38
 800460c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800460e:	f107 031c 	add.w	r3, r7, #28
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	605a      	str	r2, [r3, #4]
 8004618:	609a      	str	r2, [r3, #8]
 800461a:	60da      	str	r2, [r3, #12]
 800461c:	611a      	str	r2, [r3, #16]
 800461e:	615a      	str	r2, [r3, #20]
 8004620:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004622:	1d3b      	adds	r3, r7, #4
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	609a      	str	r2, [r3, #8]
 800462c:	60da      	str	r2, [r3, #12]
 800462e:	611a      	str	r2, [r3, #16]
 8004630:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8004632:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8004636:	f7ff f8f9 	bl	800382c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800463a:	2008      	movs	r0, #8
 800463c:	f7ff f8de 	bl	80037fc <LL_AHB1_GRP1_EnableClock>
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  PD11   ------> USART3_CTS
  PD12   ------> USART3_RTS
  */
  GPIO_InitStruct.Pin = Telm2_TX_Pin|Telm2_RX_Pin|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8004640:	f44f 53d8 	mov.w	r3, #6912	@ 0x1b00
 8004644:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004646:	2302      	movs	r3, #2
 8004648:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800464a:	2303      	movs	r3, #3
 800464c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800464e:	2300      	movs	r3, #0
 8004650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004656:	2307      	movs	r3, #7
 8004658:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800465a:	1d3b      	adds	r3, r7, #4
 800465c:	4619      	mov	r1, r3
 800465e:	4819      	ldr	r0, [pc, #100]	@ (80046c4 <MX_USART3_UART_Init+0xbc>)
 8004660:	f003 f8a4 	bl	80077ac <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8004664:	f7fe fd40 	bl	80030e8 <__NVIC_GetPriorityGrouping>
 8004668:	4603      	mov	r3, r0
 800466a:	2200      	movs	r2, #0
 800466c:	2102      	movs	r1, #2
 800466e:	4618      	mov	r0, r3
 8004670:	f7fe fd90 	bl	8003194 <NVIC_EncodePriority>
 8004674:	4603      	mov	r3, r0
 8004676:	4619      	mov	r1, r3
 8004678:	2027      	movs	r0, #39	@ 0x27
 800467a:	f7fe fd61 	bl	8003140 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 800467e:	2027      	movs	r0, #39	@ 0x27
 8004680:	f7fe fd40 	bl	8003104 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8004684:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8004688:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800468a:	2300      	movs	r3, #0
 800468c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800468e:	2300      	movs	r3, #0
 8004690:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004692:	2300      	movs	r3, #0
 8004694:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004696:	230c      	movs	r3, #12
 8004698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800469a:	2300      	movs	r3, #0
 800469c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800469e:	2300      	movs	r3, #0
 80046a0:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 80046a2:	f107 031c 	add.w	r3, r7, #28
 80046a6:	4619      	mov	r1, r3
 80046a8:	4807      	ldr	r0, [pc, #28]	@ (80046c8 <MX_USART3_UART_Init+0xc0>)
 80046aa:	f004 f849 	bl	8008740 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80046ae:	4806      	ldr	r0, [pc, #24]	@ (80046c8 <MX_USART3_UART_Init+0xc0>)
 80046b0:	f7fe ff6a 	bl	8003588 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 80046b4:	4804      	ldr	r0, [pc, #16]	@ (80046c8 <MX_USART3_UART_Init+0xc0>)
 80046b6:	f7fe ff57 	bl	8003568 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80046ba:	bf00      	nop
 80046bc:	3738      	adds	r7, #56	@ 0x38
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40020c00 	.word	0x40020c00
 80046c8:	40004800 	.word	0x40004800

080046cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80046d2:	f107 0318 	add.w	r3, r7, #24
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046dc:	463b      	mov	r3, r7
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	605a      	str	r2, [r3, #4]
 80046e4:	609a      	str	r2, [r3, #8]
 80046e6:	60da      	str	r2, [r3, #12]
 80046e8:	611a      	str	r2, [r3, #16]
 80046ea:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 80046ec:	2010      	movs	r0, #16
 80046ee:	f7ff f885 	bl	80037fc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80046f2:	2080      	movs	r0, #128	@ 0x80
 80046f4:	f7ff f882 	bl	80037fc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80046f8:	2004      	movs	r0, #4
 80046fa:	f7ff f87f 	bl	80037fc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80046fe:	2001      	movs	r0, #1
 8004700:	f7ff f87c 	bl	80037fc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004704:	2002      	movs	r0, #2
 8004706:	f7ff f879 	bl	80037fc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800470a:	2008      	movs	r0, #8
 800470c:	f7ff f876 	bl	80037fc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LED_BLUE_Pin|GYRO1_NSS_Pin|BARO_NSS_Pin|LED_RED_Pin
 8004710:	2167      	movs	r1, #103	@ 0x67
 8004712:	4836      	ldr	r0, [pc, #216]	@ (80047ec <MX_GPIO_Init+0x120>)
 8004714:	f7ff f83e 	bl	8003794 <LL_GPIO_ResetOutputPin>
                          |LED_YELLOW_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPS1_SW_LED_GPIO_Port, GPS1_SW_LED_Pin);
 8004718:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800471c:	4834      	ldr	r0, [pc, #208]	@ (80047f0 <MX_GPIO_Init+0x124>)
 800471e:	f7ff f839 	bl	8003794 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_BLUE_Pin|GYRO1_NSS_Pin|BARO_NSS_Pin|LED_RED_Pin
 8004722:	2367      	movs	r3, #103	@ 0x67
 8004724:	603b      	str	r3, [r7, #0]
                          |LED_YELLOW_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004726:	2301      	movs	r3, #1
 8004728:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800472a:	2300      	movs	r3, #0
 800472c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800472e:	2300      	movs	r3, #0
 8004730:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004732:	2300      	movs	r3, #0
 8004734:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004736:	463b      	mov	r3, r7
 8004738:	4619      	mov	r1, r3
 800473a:	482c      	ldr	r0, [pc, #176]	@ (80047ec <MX_GPIO_Init+0x120>)
 800473c:	f003 f836 	bl	80077ac <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BARO_INT_Pin;
 8004740:	2380      	movs	r3, #128	@ 0x80
 8004742:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004744:	2300      	movs	r3, #0
 8004746:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BARO_INT_GPIO_Port, &GPIO_InitStruct);
 800474c:	463b      	mov	r3, r7
 800474e:	4619      	mov	r1, r3
 8004750:	4826      	ldr	r0, [pc, #152]	@ (80047ec <MX_GPIO_Init+0x120>)
 8004752:	f003 f82b 	bl	80077ac <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GPS1_SW_LED_Pin;
 8004756:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800475a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800475c:	2301      	movs	r3, #1
 800475e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004760:	2300      	movs	r3, #0
 8004762:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004768:	2300      	movs	r3, #0
 800476a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPS1_SW_LED_GPIO_Port, &GPIO_InitStruct);
 800476c:	463b      	mov	r3, r7
 800476e:	4619      	mov	r1, r3
 8004770:	481f      	ldr	r0, [pc, #124]	@ (80047f0 <MX_GPIO_Init+0x124>)
 8004772:	f003 f81b 	bl	80077ac <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE14);
 8004776:	491f      	ldr	r1, [pc, #124]	@ (80047f4 <MX_GPIO_Init+0x128>)
 8004778:	2004      	movs	r0, #4
 800477a:	f7fe ff5b 	bl	8003634 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 800477e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004782:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8004784:	2301      	movs	r3, #1
 8004786:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8004788:	2300      	movs	r3, #0
 800478a:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800478c:	2302      	movs	r3, #2
 800478e:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8004790:	f107 0318 	add.w	r3, r7, #24
 8004794:	4618      	mov	r0, r3
 8004796:	f002 fe3f 	bl	8007418 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(PPM_IN_GPIO_Port, PPM_IN_Pin, LL_GPIO_PULL_NO);
 800479a:	2200      	movs	r2, #0
 800479c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80047a0:	4812      	ldr	r0, [pc, #72]	@ (80047ec <MX_GPIO_Init+0x120>)
 80047a2:	f7fe ffba 	bl	800371a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(PPM_IN_GPIO_Port, PPM_IN_Pin, LL_GPIO_MODE_INPUT);
 80047a6:	2200      	movs	r2, #0
 80047a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80047ac:	480f      	ldr	r0, [pc, #60]	@ (80047ec <MX_GPIO_Init+0x120>)
 80047ae:	f7fe ff77 	bl	80036a0 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80047b2:	f7fe fc99 	bl	80030e8 <__NVIC_GetPriorityGrouping>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2200      	movs	r2, #0
 80047ba:	2100      	movs	r1, #0
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fe fce9 	bl	8003194 <NVIC_EncodePriority>
 80047c2:	4603      	mov	r3, r0
 80047c4:	4619      	mov	r1, r3
 80047c6:	2028      	movs	r0, #40	@ 0x28
 80047c8:	f7fe fcba 	bl	8003140 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80047cc:	2028      	movs	r0, #40	@ 0x28
 80047ce:	f7fe fc99 	bl	8003104 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_14);
 80047d2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80047d6:	f7fe ffed 	bl	80037b4 <LL_EXTI_EnableIT_0_31>
  LL_EXTI_EnableFallingTrig_0_31(LL_EXTI_LINE_14);
 80047da:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80047de:	f7fe fffb 	bl	80037d8 <LL_EXTI_EnableFallingTrig_0_31>
  /* USER CODE END MX_GPIO_Init_2 */
}
 80047e2:	bf00      	nop
 80047e4:	3720      	adds	r7, #32
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40021000 	.word	0x40021000
 80047f0:	40020c00 	.word	0x40020c00
 80047f4:	0f000003 	.word	0x0f000003

080047f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047fc:	b672      	cpsid	i
}
 80047fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004800:	bf00      	nop
 8004802:	e7fd      	b.n	8004800 <Error_Handler+0x8>

08004804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800480a:	2300      	movs	r3, #0
 800480c:	607b      	str	r3, [r7, #4]
 800480e:	4b10      	ldr	r3, [pc, #64]	@ (8004850 <HAL_MspInit+0x4c>)
 8004810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004812:	4a0f      	ldr	r2, [pc, #60]	@ (8004850 <HAL_MspInit+0x4c>)
 8004814:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004818:	6453      	str	r3, [r2, #68]	@ 0x44
 800481a:	4b0d      	ldr	r3, [pc, #52]	@ (8004850 <HAL_MspInit+0x4c>)
 800481c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004822:	607b      	str	r3, [r7, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004826:	2300      	movs	r3, #0
 8004828:	603b      	str	r3, [r7, #0]
 800482a:	4b09      	ldr	r3, [pc, #36]	@ (8004850 <HAL_MspInit+0x4c>)
 800482c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482e:	4a08      	ldr	r2, [pc, #32]	@ (8004850 <HAL_MspInit+0x4c>)
 8004830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004834:	6413      	str	r3, [r2, #64]	@ 0x40
 8004836:	4b06      	ldr	r3, [pc, #24]	@ (8004850 <HAL_MspInit+0x4c>)
 8004838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	40023800 	.word	0x40023800

08004854 <LL_TIM_SetCounter>:
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <LL_TIM_ClearFlag_UPDATE>:
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f06f 0201 	mvn.w	r2, #1
 800487e:	611a      	str	r2, [r3, #16]
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <LL_TIM_IsActiveFlag_UPDATE>:
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80048a0:	2301      	movs	r3, #1
 80048a2:	e000      	b.n	80048a6 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <LL_TIM_IsEnabledIT_UPDATE>:
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d101      	bne.n	80048ca <LL_TIM_IsEnabledIT_UPDATE+0x18>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <LL_TIM_IsEnabledIT_UPDATE+0x1a>
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <LL_USART_IsActiveFlag_RXNE>:
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0320 	and.w	r3, r3, #32
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	bf0c      	ite	eq
 80048ec:	2301      	moveq	r3, #1
 80048ee:	2300      	movne	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <LL_USART_ClearFlag_RXNE>:
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f06f 0220 	mvn.w	r2, #32
 800490c:	601a      	str	r2, [r3, #0]
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <LL_USART_ReceiveData8>:
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	b2db      	uxtb	r3, r3
}
 8004928:	4618      	mov	r0, r3
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800493c:	4b07      	ldr	r3, [pc, #28]	@ (800495c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800493e:	695a      	ldr	r2, [r3, #20]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4013      	ands	r3, r2
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	429a      	cmp	r2, r3
 8004948:	bf0c      	ite	eq
 800494a:	2301      	moveq	r3, #1
 800494c:	2300      	movne	r3, #0
 800494e:	b2db      	uxtb	r3, r3
}
 8004950:	4618      	mov	r0, r3
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	40013c00 	.word	0x40013c00

08004960 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8004968:	4a04      	ldr	r2, [pc, #16]	@ (800497c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6153      	str	r3, [r2, #20]
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40013c00 	.word	0x40013c00

08004980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004984:	bf00      	nop
 8004986:	e7fd      	b.n	8004984 <NMI_Handler+0x4>

08004988 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800498c:	bf00      	nop
 800498e:	e7fd      	b.n	800498c <HardFault_Handler+0x4>

08004990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004994:	bf00      	nop
 8004996:	e7fd      	b.n	8004994 <MemManage_Handler+0x4>

08004998 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800499c:	bf00      	nop
 800499e:	e7fd      	b.n	800499c <BusFault_Handler+0x4>

080049a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049a4:	bf00      	nop
 80049a6:	e7fd      	b.n	80049a4 <UsageFault_Handler+0x4>

080049a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049ac:	bf00      	nop
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049b6:	b480      	push	{r7}
 80049b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049ba:	bf00      	nop
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049c8:	bf00      	nop
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049d6:	f000 f9f9 	bl	8004dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049da:	bf00      	nop
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if(LL_TIM_IsEnabledIT_UPDATE(TIM1))
 80049e4:	4807      	ldr	r0, [pc, #28]	@ (8004a04 <TIM1_UP_TIM10_IRQHandler+0x24>)
 80049e6:	f7ff ff64 	bl	80048b2 <LL_TIM_IsEnabledIT_UPDATE>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d006      	beq.n	80049fe <TIM1_UP_TIM10_IRQHandler+0x1e>
	{
		LL_TIM_ClearFlag_UPDATE(TIM1);
 80049f0:	4804      	ldr	r0, [pc, #16]	@ (8004a04 <TIM1_UP_TIM10_IRQHandler+0x24>)
 80049f2:	f7ff ff3d 	bl	8004870 <LL_TIM_ClearFlag_UPDATE>
		LL_TIM_SetCounter(TIM1, 0);
 80049f6:	2100      	movs	r1, #0
 80049f8:	4802      	ldr	r0, [pc, #8]	@ (8004a04 <TIM1_UP_TIM10_IRQHandler+0x24>)
 80049fa:	f7ff ff2b 	bl	8004854 <LL_TIM_SetCounter>

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80049fe:	bf00      	nop
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40010000 	.word	0x40010000

08004a08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART1))
 8004a0e:	480b      	ldr	r0, [pc, #44]	@ (8004a3c <USART1_IRQHandler+0x34>)
 8004a10:	f7ff ff62 	bl	80048d8 <LL_USART_IsActiveFlag_RXNE>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00c      	beq.n	8004a34 <USART1_IRQHandler+0x2c>
	{
		LL_USART_ClearFlag_RXNE(USART1);
 8004a1a:	4808      	ldr	r0, [pc, #32]	@ (8004a3c <USART1_IRQHandler+0x34>)
 8004a1c:	f7ff ff6f 	bl	80048fe <LL_USART_ClearFlag_RXNE>
		uint8_t uart1_rx_data = LL_USART_ReceiveData8(USART1);
 8004a20:	4806      	ldr	r0, [pc, #24]	@ (8004a3c <USART1_IRQHandler+0x34>)
 8004a22:	f7ff ff7a 	bl	800491a <LL_USART_ReceiveData8>
 8004a26:	4603      	mov	r3, r0
 8004a28:	71fb      	strb	r3, [r7, #7]

		// IRQ2 수행
		RC_receiveIRQ2(uart1_rx_data);
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fd fece 	bl	80027d0 <RC_receiveIRQ2>

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004a34:	bf00      	nop
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40011000 	.word	0x40011000

08004a40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART2))
 8004a44:	480a      	ldr	r0, [pc, #40]	@ (8004a70 <USART2_IRQHandler+0x30>)
 8004a46:	f7ff ff47 	bl	80048d8 <LL_USART_IsActiveFlag_RXNE>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00c      	beq.n	8004a6a <USART2_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART2);
 8004a50:	4807      	ldr	r0, [pc, #28]	@ (8004a70 <USART2_IRQHandler+0x30>)
 8004a52:	f7ff ff54 	bl	80048fe <LL_USART_ClearFlag_RXNE>

		uart2_rx_data = LL_USART_ReceiveData8(USART2);
 8004a56:	4806      	ldr	r0, [pc, #24]	@ (8004a70 <USART2_IRQHandler+0x30>)
 8004a58:	f7ff ff5f 	bl	800491a <LL_USART_ReceiveData8>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	461a      	mov	r2, r3
 8004a60:	4b04      	ldr	r3, [pc, #16]	@ (8004a74 <USART2_IRQHandler+0x34>)
 8004a62:	701a      	strb	r2, [r3, #0]
		uart2_rx_flag = 1;
 8004a64:	4b04      	ldr	r3, [pc, #16]	@ (8004a78 <USART2_IRQHandler+0x38>)
 8004a66:	2201      	movs	r2, #1
 8004a68:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004a6a:	bf00      	nop
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	40004400 	.word	0x40004400
 8004a74:	200004fb 	.word	0x200004fb
 8004a78:	200004fa 	.word	0x200004fa

08004a7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004a80:	bf00      	nop
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8004a8e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004a92:	f7ff ff4f 	bl	8004934 <LL_EXTI_IsActiveFlag_0_31>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d006      	beq.n	8004aaa <EXTI15_10_IRQHandler+0x20>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8004a9c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004aa0:	f7ff ff5e 	bl	8004960 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
		// IRQ2 수행
	RC_receiveIRQ2(0);
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	f7fd fe93 	bl	80027d0 <RC_receiveIRQ2>
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004aaa:	bf00      	nop
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM13))
 8004ab4:	4807      	ldr	r0, [pc, #28]	@ (8004ad4 <TIM8_UP_TIM13_IRQHandler+0x24>)
 8004ab6:	f7ff fee9 	bl	800488c <LL_TIM_IsActiveFlag_UPDATE>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d007      	beq.n	8004ad0 <TIM8_UP_TIM13_IRQHandler+0x20>
	{
		LL_TIM_ClearFlag_UPDATE(TIM13);
 8004ac0:	4804      	ldr	r0, [pc, #16]	@ (8004ad4 <TIM8_UP_TIM13_IRQHandler+0x24>)
 8004ac2:	f7ff fed5 	bl	8004870 <LL_TIM_ClearFlag_UPDATE>
		system_time.time_boot_ms++;
 8004ac6:	4b04      	ldr	r3, [pc, #16]	@ (8004ad8 <TIM8_UP_TIM13_IRQHandler+0x28>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	3301      	adds	r3, #1
 8004acc:	4a02      	ldr	r2, [pc, #8]	@ (8004ad8 <TIM8_UP_TIM13_IRQHandler+0x28>)
 8004ace:	6093      	str	r3, [r2, #8]

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004ad0:	bf00      	nop
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40001c00 	.word	0x40001c00
 8004ad8:	20000454 	.word	0x20000454

08004adc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004adc:	b5b0      	push	{r4, r5, r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM14))
 8004ae0:	4809      	ldr	r0, [pc, #36]	@ (8004b08 <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 8004ae2:	f7ff fed3 	bl	800488c <LL_TIM_IsActiveFlag_UPDATE>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00b      	beq.n	8004b04 <TIM8_TRG_COM_TIM14_IRQHandler+0x28>
	{
		LL_TIM_ClearFlag_UPDATE(TIM14);
 8004aec:	4806      	ldr	r0, [pc, #24]	@ (8004b08 <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 8004aee:	f7ff febf 	bl	8004870 <LL_TIM_ClearFlag_UPDATE>
		system_time.time_unix_usec++;
 8004af2:	4906      	ldr	r1, [pc, #24]	@ (8004b0c <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 8004af4:	680a      	ldr	r2, [r1, #0]
 8004af6:	684b      	ldr	r3, [r1, #4]
 8004af8:	1c54      	adds	r4, r2, #1
 8004afa:	f143 0500 	adc.w	r5, r3, #0
 8004afe:	4b03      	ldr	r3, [pc, #12]	@ (8004b0c <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 8004b00:	601c      	str	r4, [r3, #0]
 8004b02:	605d      	str	r5, [r3, #4]

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004b04:	bf00      	nop
 8004b06:	bdb0      	pop	{r4, r5, r7, pc}
 8004b08:	40002000 	.word	0x40002000
 8004b0c:	20000454 	.word	0x20000454

08004b10 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	if(LL_TIM_IsEnabledIT_UPDATE(TIM5))
 8004b14:	4807      	ldr	r0, [pc, #28]	@ (8004b34 <TIM5_IRQHandler+0x24>)
 8004b16:	f7ff fecc 	bl	80048b2 <LL_TIM_IsEnabledIT_UPDATE>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d006      	beq.n	8004b2e <TIM5_IRQHandler+0x1e>
	{
		LL_TIM_ClearFlag_UPDATE(TIM5);
 8004b20:	4804      	ldr	r0, [pc, #16]	@ (8004b34 <TIM5_IRQHandler+0x24>)
 8004b22:	f7ff fea5 	bl	8004870 <LL_TIM_ClearFlag_UPDATE>
		LL_TIM_SetCounter(TIM5, 0);
 8004b26:	2100      	movs	r1, #0
 8004b28:	4802      	ldr	r0, [pc, #8]	@ (8004b34 <TIM5_IRQHandler+0x24>)
 8004b2a:	f7ff fe93 	bl	8004854 <LL_TIM_SetCounter>

  /* USER CODE END TIM5_IRQn 0 */
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004b2e:	bf00      	nop
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40000c00 	.word	0x40000c00

08004b38 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004b3c:	bf00      	nop
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
	...

08004b48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004b4c:	4802      	ldr	r0, [pc, #8]	@ (8004b58 <OTG_FS_IRQHandler+0x10>)
 8004b4e:	f000 fd73 	bl	8005638 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004b52:	bf00      	nop
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	200019e4 	.word	0x200019e4

08004b5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  return 1;
 8004b60:	2301      	movs	r3, #1
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <_kill>:

int _kill(int pid, int sig)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004b76:	f008 fd51 	bl	800d61c <__errno>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2216      	movs	r2, #22
 8004b7e:	601a      	str	r2, [r3, #0]
  return -1;
 8004b80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <_exit>:

void _exit (int status)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004b94:	f04f 31ff 	mov.w	r1, #4294967295
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff ffe7 	bl	8004b6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b9e:	bf00      	nop
 8004ba0:	e7fd      	b.n	8004b9e <_exit+0x12>

08004ba2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b086      	sub	sp, #24
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	e00a      	b.n	8004bca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004bb4:	f3af 8000 	nop.w
 8004bb8:	4601      	mov	r1, r0
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	60ba      	str	r2, [r7, #8]
 8004bc0:	b2ca      	uxtb	r2, r1
 8004bc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	617b      	str	r3, [r7, #20]
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	dbf0      	blt.n	8004bb4 <_read+0x12>
  }

  return len;
 8004bd2:	687b      	ldr	r3, [r7, #4]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <_close>:
  }
  return len;
}

int _close(int file)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004be4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004c04:	605a      	str	r2, [r3, #4]
  return 0;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <_isatty>:

int _isatty(int file)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004c1c:	2301      	movs	r3, #1
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b085      	sub	sp, #20
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	60f8      	str	r0, [r7, #12]
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c4c:	4a14      	ldr	r2, [pc, #80]	@ (8004ca0 <_sbrk+0x5c>)
 8004c4e:	4b15      	ldr	r3, [pc, #84]	@ (8004ca4 <_sbrk+0x60>)
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c58:	4b13      	ldr	r3, [pc, #76]	@ (8004ca8 <_sbrk+0x64>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d102      	bne.n	8004c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c60:	4b11      	ldr	r3, [pc, #68]	@ (8004ca8 <_sbrk+0x64>)
 8004c62:	4a12      	ldr	r2, [pc, #72]	@ (8004cac <_sbrk+0x68>)
 8004c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c66:	4b10      	ldr	r3, [pc, #64]	@ (8004ca8 <_sbrk+0x64>)
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d207      	bcs.n	8004c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c74:	f008 fcd2 	bl	800d61c <__errno>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	220c      	movs	r2, #12
 8004c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c82:	e009      	b.n	8004c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c84:	4b08      	ldr	r3, [pc, #32]	@ (8004ca8 <_sbrk+0x64>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c8a:	4b07      	ldr	r3, [pc, #28]	@ (8004ca8 <_sbrk+0x64>)
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4413      	add	r3, r2
 8004c92:	4a05      	ldr	r2, [pc, #20]	@ (8004ca8 <_sbrk+0x64>)
 8004c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c96:	68fb      	ldr	r3, [r7, #12]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20020000 	.word	0x20020000
 8004ca4:	00000400 	.word	0x00000400
 8004ca8:	200004fc 	.word	0x200004fc
 8004cac:	20002238 	.word	0x20002238

08004cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004cb4:	4b06      	ldr	r3, [pc, #24]	@ (8004cd0 <SystemInit+0x20>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cba:	4a05      	ldr	r2, [pc, #20]	@ (8004cd0 <SystemInit+0x20>)
 8004cbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004cc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004cc4:	bf00      	nop
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	e000ed00 	.word	0xe000ed00

08004cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004cd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004d0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004cd8:	f7ff ffea 	bl	8004cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004cdc:	480c      	ldr	r0, [pc, #48]	@ (8004d10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004cde:	490d      	ldr	r1, [pc, #52]	@ (8004d14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8004d18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ce4:	e002      	b.n	8004cec <LoopCopyDataInit>

08004ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cea:	3304      	adds	r3, #4

08004cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004cf0:	d3f9      	bcc.n	8004ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8004d1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004cf4:	4c0a      	ldr	r4, [pc, #40]	@ (8004d20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cf8:	e001      	b.n	8004cfe <LoopFillZerobss>

08004cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cfc:	3204      	adds	r2, #4

08004cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d00:	d3fb      	bcc.n	8004cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004d02:	f008 fc91 	bl	800d628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d06:	f7fe fdd7 	bl	80038b8 <main>
  bx  lr    
 8004d0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004d0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d14:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8004d18:	0800f64c 	.word	0x0800f64c
  ldr r2, =_sbss
 8004d1c:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8004d20:	20002234 	.word	0x20002234

08004d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d24:	e7fe      	b.n	8004d24 <ADC_IRQHandler>
	...

08004d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d68 <HAL_Init+0x40>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a0d      	ldr	r2, [pc, #52]	@ (8004d68 <HAL_Init+0x40>)
 8004d32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d38:	4b0b      	ldr	r3, [pc, #44]	@ (8004d68 <HAL_Init+0x40>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8004d68 <HAL_Init+0x40>)
 8004d3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d44:	4b08      	ldr	r3, [pc, #32]	@ (8004d68 <HAL_Init+0x40>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a07      	ldr	r2, [pc, #28]	@ (8004d68 <HAL_Init+0x40>)
 8004d4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d50:	2003      	movs	r0, #3
 8004d52:	f000 f94f 	bl	8004ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d56:	200f      	movs	r0, #15
 8004d58:	f000 f808 	bl	8004d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d5c:	f7ff fd52 	bl	8004804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40023c00 	.word	0x40023c00

08004d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d74:	4b12      	ldr	r3, [pc, #72]	@ (8004dc0 <HAL_InitTick+0x54>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	4b12      	ldr	r3, [pc, #72]	@ (8004dc4 <HAL_InitTick+0x58>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 f967 	bl	800505e <HAL_SYSTICK_Config>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e00e      	b.n	8004db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b0f      	cmp	r3, #15
 8004d9e:	d80a      	bhi.n	8004db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004da0:	2200      	movs	r2, #0
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	f04f 30ff 	mov.w	r0, #4294967295
 8004da8:	f000 f92f 	bl	800500a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004dac:	4a06      	ldr	r2, [pc, #24]	@ (8004dc8 <HAL_InitTick+0x5c>)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	e000      	b.n	8004db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	20000000 	.word	0x20000000
 8004dc4:	20000008 	.word	0x20000008
 8004dc8:	20000004 	.word	0x20000004

08004dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004dd0:	4b06      	ldr	r3, [pc, #24]	@ (8004dec <HAL_IncTick+0x20>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4b06      	ldr	r3, [pc, #24]	@ (8004df0 <HAL_IncTick+0x24>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4413      	add	r3, r2
 8004ddc:	4a04      	ldr	r2, [pc, #16]	@ (8004df0 <HAL_IncTick+0x24>)
 8004dde:	6013      	str	r3, [r2, #0]
}
 8004de0:	bf00      	nop
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	20000008 	.word	0x20000008
 8004df0:	20000500 	.word	0x20000500

08004df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  return uwTick;
 8004df8:	4b03      	ldr	r3, [pc, #12]	@ (8004e08 <HAL_GetTick+0x14>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20000500 	.word	0x20000500

08004e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e14:	f7ff ffee 	bl	8004df4 <HAL_GetTick>
 8004e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e24:	d005      	beq.n	8004e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e26:	4b0a      	ldr	r3, [pc, #40]	@ (8004e50 <HAL_Delay+0x44>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004e32:	bf00      	nop
 8004e34:	f7ff ffde 	bl	8004df4 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d8f7      	bhi.n	8004e34 <HAL_Delay+0x28>
  {
  }
}
 8004e44:	bf00      	nop
 8004e46:	bf00      	nop
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000008 	.word	0x20000008

08004e54 <__NVIC_SetPriorityGrouping>:
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e64:	4b0c      	ldr	r3, [pc, #48]	@ (8004e98 <__NVIC_SetPriorityGrouping+0x44>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e70:	4013      	ands	r3, r2
 8004e72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e86:	4a04      	ldr	r2, [pc, #16]	@ (8004e98 <__NVIC_SetPriorityGrouping+0x44>)
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	60d3      	str	r3, [r2, #12]
}
 8004e8c:	bf00      	nop
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	e000ed00 	.word	0xe000ed00

08004e9c <__NVIC_GetPriorityGrouping>:
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ea0:	4b04      	ldr	r3, [pc, #16]	@ (8004eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	0a1b      	lsrs	r3, r3, #8
 8004ea6:	f003 0307 	and.w	r3, r3, #7
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	e000ed00 	.word	0xe000ed00

08004eb8 <__NVIC_EnableIRQ>:
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	db0b      	blt.n	8004ee2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eca:	79fb      	ldrb	r3, [r7, #7]
 8004ecc:	f003 021f 	and.w	r2, r3, #31
 8004ed0:	4907      	ldr	r1, [pc, #28]	@ (8004ef0 <__NVIC_EnableIRQ+0x38>)
 8004ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	2001      	movs	r0, #1
 8004eda:	fa00 f202 	lsl.w	r2, r0, r2
 8004ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	e000e100 	.word	0xe000e100

08004ef4 <__NVIC_SetPriority>:
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	4603      	mov	r3, r0
 8004efc:	6039      	str	r1, [r7, #0]
 8004efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	db0a      	blt.n	8004f1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	490c      	ldr	r1, [pc, #48]	@ (8004f40 <__NVIC_SetPriority+0x4c>)
 8004f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f12:	0112      	lsls	r2, r2, #4
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	440b      	add	r3, r1
 8004f18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004f1c:	e00a      	b.n	8004f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	4908      	ldr	r1, [pc, #32]	@ (8004f44 <__NVIC_SetPriority+0x50>)
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	3b04      	subs	r3, #4
 8004f2c:	0112      	lsls	r2, r2, #4
 8004f2e:	b2d2      	uxtb	r2, r2
 8004f30:	440b      	add	r3, r1
 8004f32:	761a      	strb	r2, [r3, #24]
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	e000e100 	.word	0xe000e100
 8004f44:	e000ed00 	.word	0xe000ed00

08004f48 <NVIC_EncodePriority>:
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b089      	sub	sp, #36	@ 0x24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	f1c3 0307 	rsb	r3, r3, #7
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	bf28      	it	cs
 8004f66:	2304      	movcs	r3, #4
 8004f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	2b06      	cmp	r3, #6
 8004f70:	d902      	bls.n	8004f78 <NVIC_EncodePriority+0x30>
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	3b03      	subs	r3, #3
 8004f76:	e000      	b.n	8004f7a <NVIC_EncodePriority+0x32>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	43da      	mvns	r2, r3
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	401a      	ands	r2, r3
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f90:	f04f 31ff 	mov.w	r1, #4294967295
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9a:	43d9      	mvns	r1, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fa0:	4313      	orrs	r3, r2
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3724      	adds	r7, #36	@ 0x24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
	...

08004fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fc0:	d301      	bcc.n	8004fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e00f      	b.n	8004fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ff0 <SysTick_Config+0x40>)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fce:	210f      	movs	r1, #15
 8004fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd4:	f7ff ff8e 	bl	8004ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fd8:	4b05      	ldr	r3, [pc, #20]	@ (8004ff0 <SysTick_Config+0x40>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fde:	4b04      	ldr	r3, [pc, #16]	@ (8004ff0 <SysTick_Config+0x40>)
 8004fe0:	2207      	movs	r2, #7
 8004fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	e000e010 	.word	0xe000e010

08004ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7ff ff29 	bl	8004e54 <__NVIC_SetPriorityGrouping>
}
 8005002:	bf00      	nop
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800500a:	b580      	push	{r7, lr}
 800500c:	b086      	sub	sp, #24
 800500e:	af00      	add	r7, sp, #0
 8005010:	4603      	mov	r3, r0
 8005012:	60b9      	str	r1, [r7, #8]
 8005014:	607a      	str	r2, [r7, #4]
 8005016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800501c:	f7ff ff3e 	bl	8004e9c <__NVIC_GetPriorityGrouping>
 8005020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	68b9      	ldr	r1, [r7, #8]
 8005026:	6978      	ldr	r0, [r7, #20]
 8005028:	f7ff ff8e 	bl	8004f48 <NVIC_EncodePriority>
 800502c:	4602      	mov	r2, r0
 800502e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005032:	4611      	mov	r1, r2
 8005034:	4618      	mov	r0, r3
 8005036:	f7ff ff5d 	bl	8004ef4 <__NVIC_SetPriority>
}
 800503a:	bf00      	nop
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b082      	sub	sp, #8
 8005046:	af00      	add	r7, sp, #0
 8005048:	4603      	mov	r3, r0
 800504a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800504c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff ff31 	bl	8004eb8 <__NVIC_EnableIRQ>
}
 8005056:	bf00      	nop
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b082      	sub	sp, #8
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7ff ffa2 	bl	8004fb0 <SysTick_Config>
 800506c:	4603      	mov	r3, r0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005078:	b480      	push	{r7}
 800507a:	b089      	sub	sp, #36	@ 0x24
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005082:	2300      	movs	r3, #0
 8005084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005086:	2300      	movs	r3, #0
 8005088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800508a:	2300      	movs	r3, #0
 800508c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800508e:	2300      	movs	r3, #0
 8005090:	61fb      	str	r3, [r7, #28]
 8005092:	e16b      	b.n	800536c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005094:	2201      	movs	r2, #1
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	fa02 f303 	lsl.w	r3, r2, r3
 800509c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4013      	ands	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	f040 815a 	bne.w	8005366 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d005      	beq.n	80050ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d130      	bne.n	800512c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	2203      	movs	r2, #3
 80050d6:	fa02 f303 	lsl.w	r3, r2, r3
 80050da:	43db      	mvns	r3, r3
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	4013      	ands	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68da      	ldr	r2, [r3, #12]
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005100:	2201      	movs	r2, #1
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	43db      	mvns	r3, r3
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4013      	ands	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	091b      	lsrs	r3, r3, #4
 8005116:	f003 0201 	and.w	r2, r3, #1
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	fa02 f303 	lsl.w	r3, r2, r3
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	4313      	orrs	r3, r2
 8005124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f003 0303 	and.w	r3, r3, #3
 8005134:	2b03      	cmp	r3, #3
 8005136:	d017      	beq.n	8005168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	2203      	movs	r2, #3
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	43db      	mvns	r3, r3
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	4013      	ands	r3, r2
 800514e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4313      	orrs	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f003 0303 	and.w	r3, r3, #3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d123      	bne.n	80051bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	08da      	lsrs	r2, r3, #3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3208      	adds	r2, #8
 800517c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	220f      	movs	r2, #15
 800518c:	fa02 f303 	lsl.w	r3, r2, r3
 8005190:	43db      	mvns	r3, r3
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	4013      	ands	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	691a      	ldr	r2, [r3, #16]
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	08da      	lsrs	r2, r3, #3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3208      	adds	r2, #8
 80051b6:	69b9      	ldr	r1, [r7, #24]
 80051b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	2203      	movs	r2, #3
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	43db      	mvns	r3, r3
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	4013      	ands	r3, r2
 80051d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f003 0203 	and.w	r2, r3, #3
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 80b4 	beq.w	8005366 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	4b60      	ldr	r3, [pc, #384]	@ (8005384 <HAL_GPIO_Init+0x30c>)
 8005204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005206:	4a5f      	ldr	r2, [pc, #380]	@ (8005384 <HAL_GPIO_Init+0x30c>)
 8005208:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800520c:	6453      	str	r3, [r2, #68]	@ 0x44
 800520e:	4b5d      	ldr	r3, [pc, #372]	@ (8005384 <HAL_GPIO_Init+0x30c>)
 8005210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800521a:	4a5b      	ldr	r2, [pc, #364]	@ (8005388 <HAL_GPIO_Init+0x310>)
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	089b      	lsrs	r3, r3, #2
 8005220:	3302      	adds	r3, #2
 8005222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	220f      	movs	r2, #15
 8005232:	fa02 f303 	lsl.w	r3, r2, r3
 8005236:	43db      	mvns	r3, r3
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	4013      	ands	r3, r2
 800523c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a52      	ldr	r2, [pc, #328]	@ (800538c <HAL_GPIO_Init+0x314>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d02b      	beq.n	800529e <HAL_GPIO_Init+0x226>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a51      	ldr	r2, [pc, #324]	@ (8005390 <HAL_GPIO_Init+0x318>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d025      	beq.n	800529a <HAL_GPIO_Init+0x222>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a50      	ldr	r2, [pc, #320]	@ (8005394 <HAL_GPIO_Init+0x31c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d01f      	beq.n	8005296 <HAL_GPIO_Init+0x21e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a4f      	ldr	r2, [pc, #316]	@ (8005398 <HAL_GPIO_Init+0x320>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d019      	beq.n	8005292 <HAL_GPIO_Init+0x21a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a4e      	ldr	r2, [pc, #312]	@ (800539c <HAL_GPIO_Init+0x324>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d013      	beq.n	800528e <HAL_GPIO_Init+0x216>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a4d      	ldr	r2, [pc, #308]	@ (80053a0 <HAL_GPIO_Init+0x328>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00d      	beq.n	800528a <HAL_GPIO_Init+0x212>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a4c      	ldr	r2, [pc, #304]	@ (80053a4 <HAL_GPIO_Init+0x32c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d007      	beq.n	8005286 <HAL_GPIO_Init+0x20e>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a4b      	ldr	r2, [pc, #300]	@ (80053a8 <HAL_GPIO_Init+0x330>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d101      	bne.n	8005282 <HAL_GPIO_Init+0x20a>
 800527e:	2307      	movs	r3, #7
 8005280:	e00e      	b.n	80052a0 <HAL_GPIO_Init+0x228>
 8005282:	2308      	movs	r3, #8
 8005284:	e00c      	b.n	80052a0 <HAL_GPIO_Init+0x228>
 8005286:	2306      	movs	r3, #6
 8005288:	e00a      	b.n	80052a0 <HAL_GPIO_Init+0x228>
 800528a:	2305      	movs	r3, #5
 800528c:	e008      	b.n	80052a0 <HAL_GPIO_Init+0x228>
 800528e:	2304      	movs	r3, #4
 8005290:	e006      	b.n	80052a0 <HAL_GPIO_Init+0x228>
 8005292:	2303      	movs	r3, #3
 8005294:	e004      	b.n	80052a0 <HAL_GPIO_Init+0x228>
 8005296:	2302      	movs	r3, #2
 8005298:	e002      	b.n	80052a0 <HAL_GPIO_Init+0x228>
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <HAL_GPIO_Init+0x228>
 800529e:	2300      	movs	r3, #0
 80052a0:	69fa      	ldr	r2, [r7, #28]
 80052a2:	f002 0203 	and.w	r2, r2, #3
 80052a6:	0092      	lsls	r2, r2, #2
 80052a8:	4093      	lsls	r3, r2
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052b0:	4935      	ldr	r1, [pc, #212]	@ (8005388 <HAL_GPIO_Init+0x310>)
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	089b      	lsrs	r3, r3, #2
 80052b6:	3302      	adds	r3, #2
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052be:	4b3b      	ldr	r3, [pc, #236]	@ (80053ac <HAL_GPIO_Init+0x334>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	43db      	mvns	r3, r3
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	4013      	ands	r3, r2
 80052cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052e2:	4a32      	ldr	r2, [pc, #200]	@ (80053ac <HAL_GPIO_Init+0x334>)
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052e8:	4b30      	ldr	r3, [pc, #192]	@ (80053ac <HAL_GPIO_Init+0x334>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	43db      	mvns	r3, r3
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	4013      	ands	r3, r2
 80052f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	4313      	orrs	r3, r2
 800530a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800530c:	4a27      	ldr	r2, [pc, #156]	@ (80053ac <HAL_GPIO_Init+0x334>)
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005312:	4b26      	ldr	r3, [pc, #152]	@ (80053ac <HAL_GPIO_Init+0x334>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	43db      	mvns	r3, r3
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	4013      	ands	r3, r2
 8005320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005336:	4a1d      	ldr	r2, [pc, #116]	@ (80053ac <HAL_GPIO_Init+0x334>)
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800533c:	4b1b      	ldr	r3, [pc, #108]	@ (80053ac <HAL_GPIO_Init+0x334>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	43db      	mvns	r3, r3
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	4013      	ands	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005360:	4a12      	ldr	r2, [pc, #72]	@ (80053ac <HAL_GPIO_Init+0x334>)
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	3301      	adds	r3, #1
 800536a:	61fb      	str	r3, [r7, #28]
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	2b0f      	cmp	r3, #15
 8005370:	f67f ae90 	bls.w	8005094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop
 8005378:	3724      	adds	r7, #36	@ 0x24
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40023800 	.word	0x40023800
 8005388:	40013800 	.word	0x40013800
 800538c:	40020000 	.word	0x40020000
 8005390:	40020400 	.word	0x40020400
 8005394:	40020800 	.word	0x40020800
 8005398:	40020c00 	.word	0x40020c00
 800539c:	40021000 	.word	0x40021000
 80053a0:	40021400 	.word	0x40021400
 80053a4:	40021800 	.word	0x40021800
 80053a8:	40021c00 	.word	0x40021c00
 80053ac:	40013c00 	.word	0x40013c00

080053b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af02      	add	r7, sp, #8
 80053b6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e101      	b.n	80055c6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d106      	bne.n	80053e2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f006 ff5d 	bl	800c29c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2203      	movs	r2, #3
 80053e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053f0:	d102      	bne.n	80053f8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f003 fb36 	bl	8008a6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	7c1a      	ldrb	r2, [r3, #16]
 800540a:	f88d 2000 	strb.w	r2, [sp]
 800540e:	3304      	adds	r3, #4
 8005410:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005412:	f003 fa15 	bl	8008840 <USB_CoreInit>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d005      	beq.n	8005428 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2202      	movs	r2, #2
 8005420:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e0ce      	b.n	80055c6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2100      	movs	r1, #0
 800542e:	4618      	mov	r0, r3
 8005430:	f003 fb2e 	bl	8008a90 <USB_SetCurrentMode>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d005      	beq.n	8005446 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2202      	movs	r2, #2
 800543e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e0bf      	b.n	80055c6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005446:	2300      	movs	r3, #0
 8005448:	73fb      	strb	r3, [r7, #15]
 800544a:	e04a      	b.n	80054e2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800544c:	7bfa      	ldrb	r2, [r7, #15]
 800544e:	6879      	ldr	r1, [r7, #4]
 8005450:	4613      	mov	r3, r2
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	4413      	add	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	440b      	add	r3, r1
 800545a:	3315      	adds	r3, #21
 800545c:	2201      	movs	r2, #1
 800545e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005460:	7bfa      	ldrb	r2, [r7, #15]
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	4613      	mov	r3, r2
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	440b      	add	r3, r1
 800546e:	3314      	adds	r3, #20
 8005470:	7bfa      	ldrb	r2, [r7, #15]
 8005472:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005474:	7bfa      	ldrb	r2, [r7, #15]
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	b298      	uxth	r0, r3
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	4613      	mov	r3, r2
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	332e      	adds	r3, #46	@ 0x2e
 8005488:	4602      	mov	r2, r0
 800548a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800548c:	7bfa      	ldrb	r2, [r7, #15]
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	4613      	mov	r3, r2
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	4413      	add	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	440b      	add	r3, r1
 800549a:	3318      	adds	r3, #24
 800549c:	2200      	movs	r2, #0
 800549e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80054a0:	7bfa      	ldrb	r2, [r7, #15]
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	4613      	mov	r3, r2
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	440b      	add	r3, r1
 80054ae:	331c      	adds	r3, #28
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80054b4:	7bfa      	ldrb	r2, [r7, #15]
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	4613      	mov	r3, r2
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	4413      	add	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	440b      	add	r3, r1
 80054c2:	3320      	adds	r3, #32
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80054c8:	7bfa      	ldrb	r2, [r7, #15]
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	4613      	mov	r3, r2
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	4413      	add	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	440b      	add	r3, r1
 80054d6:	3324      	adds	r3, #36	@ 0x24
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
 80054de:	3301      	adds	r3, #1
 80054e0:	73fb      	strb	r3, [r7, #15]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	791b      	ldrb	r3, [r3, #4]
 80054e6:	7bfa      	ldrb	r2, [r7, #15]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d3af      	bcc.n	800544c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054ec:	2300      	movs	r3, #0
 80054ee:	73fb      	strb	r3, [r7, #15]
 80054f0:	e044      	b.n	800557c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80054f2:	7bfa      	ldrb	r2, [r7, #15]
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	4613      	mov	r3, r2
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	4413      	add	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	440b      	add	r3, r1
 8005500:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005504:	2200      	movs	r2, #0
 8005506:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005508:	7bfa      	ldrb	r2, [r7, #15]
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	4613      	mov	r3, r2
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	4413      	add	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	440b      	add	r3, r1
 8005516:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800551a:	7bfa      	ldrb	r2, [r7, #15]
 800551c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800551e:	7bfa      	ldrb	r2, [r7, #15]
 8005520:	6879      	ldr	r1, [r7, #4]
 8005522:	4613      	mov	r3, r2
 8005524:	00db      	lsls	r3, r3, #3
 8005526:	4413      	add	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	440b      	add	r3, r1
 800552c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005530:	2200      	movs	r2, #0
 8005532:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005534:	7bfa      	ldrb	r2, [r7, #15]
 8005536:	6879      	ldr	r1, [r7, #4]
 8005538:	4613      	mov	r3, r2
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	4413      	add	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	440b      	add	r3, r1
 8005542:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800554a:	7bfa      	ldrb	r2, [r7, #15]
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	4613      	mov	r3, r2
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	4413      	add	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	440b      	add	r3, r1
 8005558:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005560:	7bfa      	ldrb	r2, [r7, #15]
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	4613      	mov	r3, r2
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	4413      	add	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	440b      	add	r3, r1
 800556e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005572:	2200      	movs	r2, #0
 8005574:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005576:	7bfb      	ldrb	r3, [r7, #15]
 8005578:	3301      	adds	r3, #1
 800557a:	73fb      	strb	r3, [r7, #15]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	791b      	ldrb	r3, [r3, #4]
 8005580:	7bfa      	ldrb	r2, [r7, #15]
 8005582:	429a      	cmp	r2, r3
 8005584:	d3b5      	bcc.n	80054f2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6818      	ldr	r0, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	7c1a      	ldrb	r2, [r3, #16]
 800558e:	f88d 2000 	strb.w	r2, [sp]
 8005592:	3304      	adds	r3, #4
 8005594:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005596:	f003 fac7 	bl	8008b28 <USB_DevInit>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d005      	beq.n	80055ac <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e00c      	b.n	80055c6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f004 fb11 	bl	8009be6 <USB_DevDisconnect>

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b084      	sub	sp, #16
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d101      	bne.n	80055ea <HAL_PCD_Start+0x1c>
 80055e6:	2302      	movs	r3, #2
 80055e8:	e022      	b.n	8005630 <HAL_PCD_Start+0x62>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d009      	beq.n	8005612 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005602:	2b01      	cmp	r3, #1
 8005604:	d105      	bne.n	8005612 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	f003 fa18 	bl	8008a4c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4618      	mov	r0, r3
 8005622:	f004 fabf 	bl	8009ba4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005638:	b590      	push	{r4, r7, lr}
 800563a:	b08d      	sub	sp, #52	@ 0x34
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f004 fb7d 	bl	8009d4e <USB_GetMode>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	f040 848c 	bne.w	8005f74 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4618      	mov	r0, r3
 8005662:	f004 fae1 	bl	8009c28 <USB_ReadInterrupts>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 8482 	beq.w	8005f72 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	0a1b      	lsrs	r3, r3, #8
 8005678:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f004 face 	bl	8009c28 <USB_ReadInterrupts>
 800568c:	4603      	mov	r3, r0
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b02      	cmp	r3, #2
 8005694:	d107      	bne.n	80056a6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695a      	ldr	r2, [r3, #20]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f002 0202 	and.w	r2, r2, #2
 80056a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f004 fabc 	bl	8009c28 <USB_ReadInterrupts>
 80056b0:	4603      	mov	r3, r0
 80056b2:	f003 0310 	and.w	r3, r3, #16
 80056b6:	2b10      	cmp	r3, #16
 80056b8:	d161      	bne.n	800577e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	699a      	ldr	r2, [r3, #24]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0210 	bic.w	r2, r2, #16
 80056c8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	f003 020f 	and.w	r2, r3, #15
 80056d6:	4613      	mov	r3, r2
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	4413      	add	r3, r2
 80056e6:	3304      	adds	r3, #4
 80056e8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80056f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80056f4:	d124      	bne.n	8005740 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80056fc:	4013      	ands	r3, r2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d035      	beq.n	800576e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	091b      	lsrs	r3, r3, #4
 800570a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800570c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005710:	b29b      	uxth	r3, r3
 8005712:	461a      	mov	r2, r3
 8005714:	6a38      	ldr	r0, [r7, #32]
 8005716:	f004 f8f3 	bl	8009900 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	091b      	lsrs	r3, r3, #4
 8005722:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005726:	441a      	add	r2, r3
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	695a      	ldr	r2, [r3, #20]
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	091b      	lsrs	r3, r3, #4
 8005734:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005738:	441a      	add	r2, r3
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	615a      	str	r2, [r3, #20]
 800573e:	e016      	b.n	800576e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005746:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800574a:	d110      	bne.n	800576e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005752:	2208      	movs	r2, #8
 8005754:	4619      	mov	r1, r3
 8005756:	6a38      	ldr	r0, [r7, #32]
 8005758:	f004 f8d2 	bl	8009900 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	695a      	ldr	r2, [r3, #20]
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	091b      	lsrs	r3, r3, #4
 8005764:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005768:	441a      	add	r2, r3
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	699a      	ldr	r2, [r3, #24]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f042 0210 	orr.w	r2, r2, #16
 800577c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4618      	mov	r0, r3
 8005784:	f004 fa50 	bl	8009c28 <USB_ReadInterrupts>
 8005788:	4603      	mov	r3, r0
 800578a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800578e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005792:	f040 80a7 	bne.w	80058e4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4618      	mov	r0, r3
 80057a0:	f004 fa55 	bl	8009c4e <USB_ReadDevAllOutEpInterrupt>
 80057a4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80057a6:	e099      	b.n	80058dc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80057a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 808e 	beq.w	80058d0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	4611      	mov	r1, r2
 80057be:	4618      	mov	r0, r3
 80057c0:	f004 fa79 	bl	8009cb6 <USB_ReadDevOutEPInterrupt>
 80057c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00c      	beq.n	80057ea <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80057d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057dc:	461a      	mov	r2, r3
 80057de:	2301      	movs	r3, #1
 80057e0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80057e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fea3 	bl	8006530 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f003 0308 	and.w	r3, r3, #8
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00c      	beq.n	800580e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80057f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005800:	461a      	mov	r2, r3
 8005802:	2308      	movs	r3, #8
 8005804:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005806:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 ff79 	bl	8006700 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f003 0310 	and.w	r3, r3, #16
 8005814:	2b00      	cmp	r3, #0
 8005816:	d008      	beq.n	800582a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005824:	461a      	mov	r2, r3
 8005826:	2310      	movs	r3, #16
 8005828:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d030      	beq.n	8005896 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800583c:	2b80      	cmp	r3, #128	@ 0x80
 800583e:	d109      	bne.n	8005854 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800584e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005852:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005856:	4613      	mov	r3, r2
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	4413      	add	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	4413      	add	r3, r2
 8005866:	3304      	adds	r3, #4
 8005868:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	78db      	ldrb	r3, [r3, #3]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d108      	bne.n	8005884 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2200      	movs	r2, #0
 8005876:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587a:	b2db      	uxtb	r3, r3
 800587c:	4619      	mov	r1, r3
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f006 fe12 	bl	800c4a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005890:	461a      	mov	r2, r3
 8005892:	2302      	movs	r3, #2
 8005894:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f003 0320 	and.w	r3, r3, #32
 800589c:	2b00      	cmp	r3, #0
 800589e:	d008      	beq.n	80058b2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80058a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ac:	461a      	mov	r2, r3
 80058ae:	2320      	movs	r3, #32
 80058b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d009      	beq.n	80058d0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80058bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058c8:	461a      	mov	r2, r3
 80058ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80058ce:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80058d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d2:	3301      	adds	r3, #1
 80058d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80058d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d8:	085b      	lsrs	r3, r3, #1
 80058da:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80058dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f47f af62 	bne.w	80057a8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f004 f99d 	bl	8009c28 <USB_ReadInterrupts>
 80058ee:	4603      	mov	r3, r0
 80058f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058f8:	f040 80db 	bne.w	8005ab2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4618      	mov	r0, r3
 8005902:	f004 f9be 	bl	8009c82 <USB_ReadDevAllInEpInterrupt>
 8005906:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800590c:	e0cd      	b.n	8005aaa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800590e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 80c2 	beq.w	8005a9e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005920:	b2d2      	uxtb	r2, r2
 8005922:	4611      	mov	r1, r2
 8005924:	4618      	mov	r0, r3
 8005926:	f004 f9e4 	bl	8009cf2 <USB_ReadDevInEPInterrupt>
 800592a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d057      	beq.n	80059e6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005938:	f003 030f 	and.w	r3, r3, #15
 800593c:	2201      	movs	r2, #1
 800593e:	fa02 f303 	lsl.w	r3, r2, r3
 8005942:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800594a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	43db      	mvns	r3, r3
 8005950:	69f9      	ldr	r1, [r7, #28]
 8005952:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005956:	4013      	ands	r3, r2
 8005958:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005966:	461a      	mov	r2, r3
 8005968:	2301      	movs	r3, #1
 800596a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	799b      	ldrb	r3, [r3, #6]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d132      	bne.n	80059da <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005978:	4613      	mov	r3, r2
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	4413      	add	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	440b      	add	r3, r1
 8005982:	3320      	adds	r3, #32
 8005984:	6819      	ldr	r1, [r3, #0]
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800598a:	4613      	mov	r3, r2
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	4413      	add	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4403      	add	r3, r0
 8005994:	331c      	adds	r3, #28
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4419      	add	r1, r3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800599e:	4613      	mov	r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	4413      	add	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4403      	add	r3, r0
 80059a8:	3320      	adds	r3, #32
 80059aa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80059ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d113      	bne.n	80059da <HAL_PCD_IRQHandler+0x3a2>
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059b6:	4613      	mov	r3, r2
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	4413      	add	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	440b      	add	r3, r1
 80059c0:	3324      	adds	r3, #36	@ 0x24
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d108      	bne.n	80059da <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6818      	ldr	r0, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80059d2:	461a      	mov	r2, r3
 80059d4:	2101      	movs	r1, #1
 80059d6:	f004 f9eb 	bl	8009db0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80059da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	4619      	mov	r1, r3
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f006 fcdc 	bl	800c39e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f003 0308 	and.w	r3, r3, #8
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d008      	beq.n	8005a02 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059fc:	461a      	mov	r2, r3
 80059fe:	2308      	movs	r3, #8
 8005a00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d008      	beq.n	8005a1e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a18:	461a      	mov	r2, r3
 8005a1a:	2310      	movs	r3, #16
 8005a1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d008      	beq.n	8005a3a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a34:	461a      	mov	r2, r3
 8005a36:	2340      	movs	r3, #64	@ 0x40
 8005a38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d023      	beq.n	8005a8c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005a44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a46:	6a38      	ldr	r0, [r7, #32]
 8005a48:	f003 f9d2 	bl	8008df0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005a4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a4e:	4613      	mov	r3, r2
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	4413      	add	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	3310      	adds	r3, #16
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	78db      	ldrb	r3, [r3, #3]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d108      	bne.n	8005a7a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	4619      	mov	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f006 fd29 	bl	800c4cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7c:	015a      	lsls	r2, r3, #5
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a86:	461a      	mov	r2, r3
 8005a88:	2302      	movs	r3, #2
 8005a8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005a96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 fcbd 	bl	8006418 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa6:	085b      	lsrs	r3, r3, #1
 8005aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f47f af2e 	bne.w	800590e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f004 f8b6 	bl	8009c28 <USB_ReadInterrupts>
 8005abc:	4603      	mov	r3, r0
 8005abe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ac6:	d122      	bne.n	8005b0e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	69fa      	ldr	r2, [r7, #28]
 8005ad2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ad6:	f023 0301 	bic.w	r3, r3, #1
 8005ada:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d108      	bne.n	8005af8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005aee:	2100      	movs	r1, #0
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 fea3 	bl	800683c <HAL_PCDEx_LPM_Callback>
 8005af6:	e002      	b.n	8005afe <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f006 fcc7 	bl	800c48c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695a      	ldr	r2, [r3, #20]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005b0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f004 f888 	bl	8009c28 <USB_ReadInterrupts>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b22:	d112      	bne.n	8005b4a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d102      	bne.n	8005b3a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f006 fc83 	bl	800c440 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	695a      	ldr	r2, [r3, #20]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005b48:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f004 f86a 	bl	8009c28 <USB_ReadInterrupts>
 8005b54:	4603      	mov	r3, r0
 8005b56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b5e:	f040 80b7 	bne.w	8005cd0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b70:	f023 0301 	bic.w	r3, r3, #1
 8005b74:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2110      	movs	r1, #16
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f003 f937 	bl	8008df0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b82:	2300      	movs	r3, #0
 8005b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b86:	e046      	b.n	8005c16 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b94:	461a      	mov	r2, r3
 8005b96:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b9a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bac:	0151      	lsls	r1, r2, #5
 8005bae:	69fa      	ldr	r2, [r7, #28]
 8005bb0:	440a      	add	r2, r1
 8005bb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bb6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005bba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc8:	461a      	mov	r2, r3
 8005bca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005bce:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005be0:	0151      	lsls	r1, r2, #5
 8005be2:	69fa      	ldr	r2, [r7, #28]
 8005be4:	440a      	add	r2, r1
 8005be6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005bee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c00:	0151      	lsls	r1, r2, #5
 8005c02:	69fa      	ldr	r2, [r7, #28]
 8005c04:	440a      	add	r2, r1
 8005c06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c0a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c0e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c12:	3301      	adds	r3, #1
 8005c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	791b      	ldrb	r3, [r3, #4]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d3b2      	bcc.n	8005b88 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	69fa      	ldr	r2, [r7, #28]
 8005c2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c30:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005c34:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	7bdb      	ldrb	r3, [r3, #15]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d016      	beq.n	8005c6c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c4e:	f043 030b 	orr.w	r3, r3, #11
 8005c52:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c5e:	69fa      	ldr	r2, [r7, #28]
 8005c60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c64:	f043 030b 	orr.w	r3, r3, #11
 8005c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8005c6a:	e015      	b.n	8005c98 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	69fa      	ldr	r2, [r7, #28]
 8005c76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c7a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005c7e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005c82:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	69fa      	ldr	r2, [r7, #28]
 8005c8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c92:	f043 030b 	orr.w	r3, r3, #11
 8005c96:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	69fa      	ldr	r2, [r7, #28]
 8005ca2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ca6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005caa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6818      	ldr	r0, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f004 f878 	bl	8009db0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	695a      	ldr	r2, [r3, #20]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005cce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f003 ffa7 	bl	8009c28 <USB_ReadInterrupts>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ce0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ce4:	d123      	bne.n	8005d2e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f004 f83d 	bl	8009d6a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f003 f8f4 	bl	8008ee2 <USB_GetDevSpeed>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681c      	ldr	r4, [r3, #0]
 8005d06:	f001 fa07 	bl	8007118 <HAL_RCC_GetHCLKFreq>
 8005d0a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d10:	461a      	mov	r2, r3
 8005d12:	4620      	mov	r0, r4
 8005d14:	f002 fdf8 	bl	8008908 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f006 fb68 	bl	800c3ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	695a      	ldr	r2, [r3, #20]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005d2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f003 ff78 	bl	8009c28 <USB_ReadInterrupts>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	f003 0308 	and.w	r3, r3, #8
 8005d3e:	2b08      	cmp	r3, #8
 8005d40:	d10a      	bne.n	8005d58 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f006 fb45 	bl	800c3d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	695a      	ldr	r2, [r3, #20]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f002 0208 	and.w	r2, r2, #8
 8005d56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f003 ff63 	bl	8009c28 <USB_ReadInterrupts>
 8005d62:	4603      	mov	r3, r0
 8005d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d68:	2b80      	cmp	r3, #128	@ 0x80
 8005d6a:	d123      	bne.n	8005db4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d78:	2301      	movs	r3, #1
 8005d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d7c:	e014      	b.n	8005da8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d82:	4613      	mov	r3, r2
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	4413      	add	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	440b      	add	r3, r1
 8005d8c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d105      	bne.n	8005da2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fb0a 	bl	80063b6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da4:	3301      	adds	r3, #1
 8005da6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	791b      	ldrb	r3, [r3, #4]
 8005dac:	461a      	mov	r2, r3
 8005dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d3e4      	bcc.n	8005d7e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f003 ff35 	bl	8009c28 <USB_ReadInterrupts>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dc8:	d13c      	bne.n	8005e44 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005dca:	2301      	movs	r3, #1
 8005dcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dce:	e02b      	b.n	8005e28 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005de4:	4613      	mov	r3, r2
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	4413      	add	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	440b      	add	r3, r1
 8005dee:	3318      	adds	r3, #24
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d115      	bne.n	8005e22 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005df6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	da12      	bge.n	8005e22 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005dfc:	6879      	ldr	r1, [r7, #4]
 8005dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e00:	4613      	mov	r3, r2
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	4413      	add	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	440b      	add	r3, r1
 8005e0a:	3317      	adds	r3, #23
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 faca 	bl	80063b6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e24:	3301      	adds	r3, #1
 8005e26:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	791b      	ldrb	r3, [r3, #4]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d3cd      	bcc.n	8005dd0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	695a      	ldr	r2, [r3, #20]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005e42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f003 feed 	bl	8009c28 <USB_ReadInterrupts>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e58:	d156      	bne.n	8005f08 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e5e:	e045      	b.n	8005eec <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e74:	4613      	mov	r3, r2
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	4413      	add	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	440b      	add	r3, r1
 8005e7e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d12e      	bne.n	8005ee6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005e88:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	da2b      	bge.n	8005ee6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005e9a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d121      	bne.n	8005ee6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005ea2:	6879      	ldr	r1, [r7, #4]
 8005ea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	4413      	add	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	440b      	add	r3, r1
 8005eb0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10a      	bne.n	8005ee6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	69fa      	ldr	r2, [r7, #28]
 8005eda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ede:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ee2:	6053      	str	r3, [r2, #4]
            break;
 8005ee4:	e008      	b.n	8005ef8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee8:	3301      	adds	r3, #1
 8005eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	791b      	ldrb	r3, [r3, #4]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d3b3      	bcc.n	8005e60 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	695a      	ldr	r2, [r3, #20]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005f06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f003 fe8b 	bl	8009c28 <USB_ReadInterrupts>
 8005f12:	4603      	mov	r3, r0
 8005f14:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f1c:	d10a      	bne.n	8005f34 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f006 fae6 	bl	800c4f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	695a      	ldr	r2, [r3, #20]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005f32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f003 fe75 	bl	8009c28 <USB_ReadInterrupts>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b04      	cmp	r3, #4
 8005f46:	d115      	bne.n	8005f74 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	f003 0304 	and.w	r3, r3, #4
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f006 fad6 	bl	800c50c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6859      	ldr	r1, [r3, #4]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	605a      	str	r2, [r3, #4]
 8005f70:	e000      	b.n	8005f74 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005f72:	bf00      	nop
    }
  }
}
 8005f74:	3734      	adds	r7, #52	@ 0x34
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd90      	pop	{r4, r7, pc}

08005f7a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	460b      	mov	r3, r1
 8005f84:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d101      	bne.n	8005f94 <HAL_PCD_SetAddress+0x1a>
 8005f90:	2302      	movs	r3, #2
 8005f92:	e012      	b.n	8005fba <HAL_PCD_SetAddress+0x40>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	78fa      	ldrb	r2, [r7, #3]
 8005fa0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	78fa      	ldrb	r2, [r7, #3]
 8005fa8:	4611      	mov	r1, r2
 8005faa:	4618      	mov	r0, r3
 8005fac:	f003 fdd4 	bl	8009b58 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b084      	sub	sp, #16
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	4608      	mov	r0, r1
 8005fcc:	4611      	mov	r1, r2
 8005fce:	461a      	mov	r2, r3
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	70fb      	strb	r3, [r7, #3]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	803b      	strh	r3, [r7, #0]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	da0f      	bge.n	8006008 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fe8:	78fb      	ldrb	r3, [r7, #3]
 8005fea:	f003 020f 	and.w	r2, r3, #15
 8005fee:	4613      	mov	r3, r2
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	4413      	add	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	3310      	adds	r3, #16
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2201      	movs	r2, #1
 8006004:	705a      	strb	r2, [r3, #1]
 8006006:	e00f      	b.n	8006028 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006008:	78fb      	ldrb	r3, [r7, #3]
 800600a:	f003 020f 	and.w	r2, r3, #15
 800600e:	4613      	mov	r3, r2
 8006010:	00db      	lsls	r3, r3, #3
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	4413      	add	r3, r2
 800601e:	3304      	adds	r3, #4
 8006020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006028:	78fb      	ldrb	r3, [r7, #3]
 800602a:	f003 030f 	and.w	r3, r3, #15
 800602e:	b2da      	uxtb	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006034:	883b      	ldrh	r3, [r7, #0]
 8006036:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	78ba      	ldrb	r2, [r7, #2]
 8006042:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	785b      	ldrb	r3, [r3, #1]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d004      	beq.n	8006056 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	461a      	mov	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006056:	78bb      	ldrb	r3, [r7, #2]
 8006058:	2b02      	cmp	r3, #2
 800605a:	d102      	bne.n	8006062 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006068:	2b01      	cmp	r3, #1
 800606a:	d101      	bne.n	8006070 <HAL_PCD_EP_Open+0xae>
 800606c:	2302      	movs	r3, #2
 800606e:	e00e      	b.n	800608e <HAL_PCD_EP_Open+0xcc>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68f9      	ldr	r1, [r7, #12]
 800607e:	4618      	mov	r0, r3
 8006080:	f002 ff54 	bl	8008f2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800608c:	7afb      	ldrb	r3, [r7, #11]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	460b      	mov	r3, r1
 80060a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80060a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	da0f      	bge.n	80060ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060aa:	78fb      	ldrb	r3, [r7, #3]
 80060ac:	f003 020f 	and.w	r2, r3, #15
 80060b0:	4613      	mov	r3, r2
 80060b2:	00db      	lsls	r3, r3, #3
 80060b4:	4413      	add	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	3310      	adds	r3, #16
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	4413      	add	r3, r2
 80060be:	3304      	adds	r3, #4
 80060c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2201      	movs	r2, #1
 80060c6:	705a      	strb	r2, [r3, #1]
 80060c8:	e00f      	b.n	80060ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060ca:	78fb      	ldrb	r3, [r7, #3]
 80060cc:	f003 020f 	and.w	r2, r3, #15
 80060d0:	4613      	mov	r3, r2
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	4413      	add	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	4413      	add	r3, r2
 80060e0:	3304      	adds	r3, #4
 80060e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80060ea:	78fb      	ldrb	r3, [r7, #3]
 80060ec:	f003 030f 	and.w	r3, r3, #15
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d101      	bne.n	8006104 <HAL_PCD_EP_Close+0x6e>
 8006100:	2302      	movs	r3, #2
 8006102:	e00e      	b.n	8006122 <HAL_PCD_EP_Close+0x8c>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68f9      	ldr	r1, [r7, #12]
 8006112:	4618      	mov	r0, r3
 8006114:	f002 ff92 	bl	800903c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b086      	sub	sp, #24
 800612e:	af00      	add	r7, sp, #0
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	603b      	str	r3, [r7, #0]
 8006136:	460b      	mov	r3, r1
 8006138:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800613a:	7afb      	ldrb	r3, [r7, #11]
 800613c:	f003 020f 	and.w	r2, r3, #15
 8006140:	4613      	mov	r3, r2
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	4413      	add	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	3304      	adds	r3, #4
 8006152:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	2200      	movs	r2, #0
 8006164:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2200      	movs	r2, #0
 800616a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800616c:	7afb      	ldrb	r3, [r7, #11]
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	b2da      	uxtb	r2, r3
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	799b      	ldrb	r3, [r3, #6]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d102      	bne.n	8006186 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6818      	ldr	r0, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	799b      	ldrb	r3, [r3, #6]
 800618e:	461a      	mov	r2, r3
 8006190:	6979      	ldr	r1, [r7, #20]
 8006192:	f003 f82f 	bl	80091f4 <USB_EPStartXfer>

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80061ac:	78fb      	ldrb	r3, [r7, #3]
 80061ae:	f003 020f 	and.w	r2, r3, #15
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	4613      	mov	r3, r2
 80061b6:	00db      	lsls	r3, r3, #3
 80061b8:	4413      	add	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	440b      	add	r3, r1
 80061be:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80061c2:	681b      	ldr	r3, [r3, #0]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	607a      	str	r2, [r7, #4]
 80061da:	603b      	str	r3, [r7, #0]
 80061dc:	460b      	mov	r3, r1
 80061de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061e0:	7afb      	ldrb	r3, [r7, #11]
 80061e2:	f003 020f 	and.w	r2, r3, #15
 80061e6:	4613      	mov	r3, r2
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	3310      	adds	r3, #16
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	3304      	adds	r3, #4
 80061f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	2200      	movs	r2, #0
 8006208:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2201      	movs	r2, #1
 800620e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006210:	7afb      	ldrb	r3, [r7, #11]
 8006212:	f003 030f 	and.w	r3, r3, #15
 8006216:	b2da      	uxtb	r2, r3
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	799b      	ldrb	r3, [r3, #6]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d102      	bne.n	800622a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6818      	ldr	r0, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	799b      	ldrb	r3, [r3, #6]
 8006232:	461a      	mov	r2, r3
 8006234:	6979      	ldr	r1, [r7, #20]
 8006236:	f002 ffdd 	bl	80091f4 <USB_EPStartXfer>

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3718      	adds	r7, #24
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	460b      	mov	r3, r1
 800624e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	f003 030f 	and.w	r3, r3, #15
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	7912      	ldrb	r2, [r2, #4]
 800625a:	4293      	cmp	r3, r2
 800625c:	d901      	bls.n	8006262 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e04f      	b.n	8006302 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006262:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006266:	2b00      	cmp	r3, #0
 8006268:	da0f      	bge.n	800628a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	f003 020f 	and.w	r2, r3, #15
 8006270:	4613      	mov	r3, r2
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	4413      	add	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	3310      	adds	r3, #16
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	4413      	add	r3, r2
 800627e:	3304      	adds	r3, #4
 8006280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	705a      	strb	r2, [r3, #1]
 8006288:	e00d      	b.n	80062a6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800628a:	78fa      	ldrb	r2, [r7, #3]
 800628c:	4613      	mov	r3, r2
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	4413      	add	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	4413      	add	r3, r2
 800629c:	3304      	adds	r3, #4
 800629e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2201      	movs	r2, #1
 80062aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062ac:	78fb      	ldrb	r3, [r7, #3]
 80062ae:	f003 030f 	and.w	r3, r3, #15
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d101      	bne.n	80062c6 <HAL_PCD_EP_SetStall+0x82>
 80062c2:	2302      	movs	r3, #2
 80062c4:	e01d      	b.n	8006302 <HAL_PCD_EP_SetStall+0xbe>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68f9      	ldr	r1, [r7, #12]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f003 fb6b 	bl	80099b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80062da:	78fb      	ldrb	r3, [r7, #3]
 80062dc:	f003 030f 	and.w	r3, r3, #15
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d109      	bne.n	80062f8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6818      	ldr	r0, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	7999      	ldrb	r1, [r3, #6]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80062f2:	461a      	mov	r2, r3
 80062f4:	f003 fd5c 	bl	8009db0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b084      	sub	sp, #16
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	460b      	mov	r3, r1
 8006314:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006316:	78fb      	ldrb	r3, [r7, #3]
 8006318:	f003 030f 	and.w	r3, r3, #15
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	7912      	ldrb	r2, [r2, #4]
 8006320:	4293      	cmp	r3, r2
 8006322:	d901      	bls.n	8006328 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e042      	b.n	80063ae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006328:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800632c:	2b00      	cmp	r3, #0
 800632e:	da0f      	bge.n	8006350 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006330:	78fb      	ldrb	r3, [r7, #3]
 8006332:	f003 020f 	and.w	r2, r3, #15
 8006336:	4613      	mov	r3, r2
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	4413      	add	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	3310      	adds	r3, #16
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	4413      	add	r3, r2
 8006344:	3304      	adds	r3, #4
 8006346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2201      	movs	r2, #1
 800634c:	705a      	strb	r2, [r3, #1]
 800634e:	e00f      	b.n	8006370 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	f003 020f 	and.w	r2, r3, #15
 8006356:	4613      	mov	r3, r2
 8006358:	00db      	lsls	r3, r3, #3
 800635a:	4413      	add	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	4413      	add	r3, r2
 8006366:	3304      	adds	r3, #4
 8006368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006376:	78fb      	ldrb	r3, [r7, #3]
 8006378:	f003 030f 	and.w	r3, r3, #15
 800637c:	b2da      	uxtb	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006388:	2b01      	cmp	r3, #1
 800638a:	d101      	bne.n	8006390 <HAL_PCD_EP_ClrStall+0x86>
 800638c:	2302      	movs	r3, #2
 800638e:	e00e      	b.n	80063ae <HAL_PCD_EP_ClrStall+0xa4>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68f9      	ldr	r1, [r7, #12]
 800639e:	4618      	mov	r0, r3
 80063a0:	f003 fb74 	bl	8009a8c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	460b      	mov	r3, r1
 80063c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80063c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	da0c      	bge.n	80063e4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063ca:	78fb      	ldrb	r3, [r7, #3]
 80063cc:	f003 020f 	and.w	r2, r3, #15
 80063d0:	4613      	mov	r3, r2
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	4413      	add	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	3310      	adds	r3, #16
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	4413      	add	r3, r2
 80063de:	3304      	adds	r3, #4
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	e00c      	b.n	80063fe <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063e4:	78fb      	ldrb	r3, [r7, #3]
 80063e6:	f003 020f 	and.w	r2, r3, #15
 80063ea:	4613      	mov	r3, r2
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	4413      	add	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	4413      	add	r3, r2
 80063fa:	3304      	adds	r3, #4
 80063fc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68f9      	ldr	r1, [r7, #12]
 8006404:	4618      	mov	r0, r3
 8006406:	f003 f993 	bl	8009730 <USB_EPStopXfer>
 800640a:	4603      	mov	r3, r0
 800640c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800640e:	7afb      	ldrb	r3, [r7, #11]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08a      	sub	sp, #40	@ 0x28
 800641c:	af02      	add	r7, sp, #8
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	4613      	mov	r3, r2
 8006430:	00db      	lsls	r3, r3, #3
 8006432:	4413      	add	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	3310      	adds	r3, #16
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	4413      	add	r3, r2
 800643c:	3304      	adds	r3, #4
 800643e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	695a      	ldr	r2, [r3, #20]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	429a      	cmp	r2, r3
 800644a:	d901      	bls.n	8006450 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e06b      	b.n	8006528 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	69fa      	ldr	r2, [r7, #28]
 8006462:	429a      	cmp	r2, r3
 8006464:	d902      	bls.n	800646c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	3303      	adds	r3, #3
 8006470:	089b      	lsrs	r3, r3, #2
 8006472:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006474:	e02a      	b.n	80064cc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	691a      	ldr	r2, [r3, #16]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	69fa      	ldr	r2, [r7, #28]
 8006488:	429a      	cmp	r2, r3
 800648a:	d902      	bls.n	8006492 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	3303      	adds	r3, #3
 8006496:	089b      	lsrs	r3, r3, #2
 8006498:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	68d9      	ldr	r1, [r3, #12]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	4603      	mov	r3, r0
 80064ae:	6978      	ldr	r0, [r7, #20]
 80064b0:	f003 f9e8 	bl	8009884 <USB_WritePacket>

    ep->xfer_buff  += len;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	68da      	ldr	r2, [r3, #12]
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	441a      	add	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	695a      	ldr	r2, [r3, #20]
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	441a      	add	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d809      	bhi.n	80064f6 <PCD_WriteEmptyTxFifo+0xde>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	695a      	ldr	r2, [r3, #20]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d203      	bcs.n	80064f6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1bf      	bne.n	8006476 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	691a      	ldr	r2, [r3, #16]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d811      	bhi.n	8006526 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	f003 030f 	and.w	r3, r3, #15
 8006508:	2201      	movs	r2, #1
 800650a:	fa02 f303 	lsl.w	r3, r2, r3
 800650e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006516:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	43db      	mvns	r3, r3
 800651c:	6939      	ldr	r1, [r7, #16]
 800651e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006522:	4013      	ands	r3, r2
 8006524:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3720      	adds	r7, #32
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	333c      	adds	r3, #60	@ 0x3c
 8006548:	3304      	adds	r3, #4
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	4413      	add	r3, r2
 8006556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	799b      	ldrb	r3, [r3, #6]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d17b      	bne.n	800665e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f003 0308 	and.w	r3, r3, #8
 800656c:	2b00      	cmp	r3, #0
 800656e:	d015      	beq.n	800659c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	4a61      	ldr	r2, [pc, #388]	@ (80066f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006574:	4293      	cmp	r3, r2
 8006576:	f240 80b9 	bls.w	80066ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 80b3 	beq.w	80066ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	4413      	add	r3, r2
 800658e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006592:	461a      	mov	r2, r3
 8006594:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006598:	6093      	str	r3, [r2, #8]
 800659a:	e0a7      	b.n	80066ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f003 0320 	and.w	r3, r3, #32
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d009      	beq.n	80065ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b2:	461a      	mov	r2, r3
 80065b4:	2320      	movs	r3, #32
 80065b6:	6093      	str	r3, [r2, #8]
 80065b8:	e098      	b.n	80066ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f040 8093 	bne.w	80066ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	4a4b      	ldr	r2, [pc, #300]	@ (80066f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d90f      	bls.n	80065ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00a      	beq.n	80065ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065e4:	461a      	mov	r2, r3
 80065e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065ea:	6093      	str	r3, [r2, #8]
 80065ec:	e07e      	b.n	80066ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	4613      	mov	r3, r2
 80065f2:	00db      	lsls	r3, r3, #3
 80065f4:	4413      	add	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	4413      	add	r3, r2
 8006600:	3304      	adds	r3, #4
 8006602:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6a1a      	ldr	r2, [r3, #32]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	0159      	lsls	r1, r3, #5
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	440b      	add	r3, r1
 8006610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800661a:	1ad2      	subs	r2, r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d114      	bne.n	8006650 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d109      	bne.n	8006642 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6818      	ldr	r0, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006638:	461a      	mov	r2, r3
 800663a:	2101      	movs	r1, #1
 800663c:	f003 fbb8 	bl	8009db0 <USB_EP0_OutStart>
 8006640:	e006      	b.n	8006650 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	68da      	ldr	r2, [r3, #12]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	441a      	add	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	b2db      	uxtb	r3, r3
 8006654:	4619      	mov	r1, r3
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f005 fe86 	bl	800c368 <HAL_PCD_DataOutStageCallback>
 800665c:	e046      	b.n	80066ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	4a26      	ldr	r2, [pc, #152]	@ (80066fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d124      	bne.n	80066b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00a      	beq.n	8006686 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	4413      	add	r3, r2
 8006678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800667c:	461a      	mov	r2, r3
 800667e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006682:	6093      	str	r3, [r2, #8]
 8006684:	e032      	b.n	80066ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f003 0320 	and.w	r3, r3, #32
 800668c:	2b00      	cmp	r3, #0
 800668e:	d008      	beq.n	80066a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800669c:	461a      	mov	r2, r3
 800669e:	2320      	movs	r3, #32
 80066a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	4619      	mov	r1, r3
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f005 fe5d 	bl	800c368 <HAL_PCD_DataOutStageCallback>
 80066ae:	e01d      	b.n	80066ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d114      	bne.n	80066e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80066b6:	6879      	ldr	r1, [r7, #4]
 80066b8:	683a      	ldr	r2, [r7, #0]
 80066ba:	4613      	mov	r3, r2
 80066bc:	00db      	lsls	r3, r3, #3
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	440b      	add	r3, r1
 80066c4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d108      	bne.n	80066e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6818      	ldr	r0, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80066d8:	461a      	mov	r2, r3
 80066da:	2100      	movs	r1, #0
 80066dc:	f003 fb68 	bl	8009db0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	4619      	mov	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f005 fe3e 	bl	800c368 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3720      	adds	r7, #32
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	4f54300a 	.word	0x4f54300a
 80066fc:	4f54310a 	.word	0x4f54310a

08006700 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	333c      	adds	r3, #60	@ 0x3c
 8006718:	3304      	adds	r3, #4
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4a15      	ldr	r2, [pc, #84]	@ (8006788 <PCD_EP_OutSetupPacket_int+0x88>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d90e      	bls.n	8006754 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800673c:	2b00      	cmp	r3, #0
 800673e:	d009      	beq.n	8006754 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800674c:	461a      	mov	r2, r3
 800674e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006752:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f005 fdf5 	bl	800c344 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	4a0a      	ldr	r2, [pc, #40]	@ (8006788 <PCD_EP_OutSetupPacket_int+0x88>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d90c      	bls.n	800677c <PCD_EP_OutSetupPacket_int+0x7c>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	799b      	ldrb	r3, [r3, #6]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d108      	bne.n	800677c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6818      	ldr	r0, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006774:	461a      	mov	r2, r3
 8006776:	2101      	movs	r1, #1
 8006778:	f003 fb1a 	bl	8009db0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	4f54300a 	.word	0x4f54300a

0800678c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	460b      	mov	r3, r1
 8006796:	70fb      	strb	r3, [r7, #3]
 8006798:	4613      	mov	r3, r2
 800679a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80067a4:	78fb      	ldrb	r3, [r7, #3]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d107      	bne.n	80067ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80067aa:	883b      	ldrh	r3, [r7, #0]
 80067ac:	0419      	lsls	r1, r3, #16
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	430a      	orrs	r2, r1
 80067b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80067b8:	e028      	b.n	800680c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c0:	0c1b      	lsrs	r3, r3, #16
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	4413      	add	r3, r2
 80067c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80067c8:	2300      	movs	r3, #0
 80067ca:	73fb      	strb	r3, [r7, #15]
 80067cc:	e00d      	b.n	80067ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
 80067d4:	3340      	adds	r3, #64	@ 0x40
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	0c1b      	lsrs	r3, r3, #16
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	4413      	add	r3, r2
 80067e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
 80067e6:	3301      	adds	r3, #1
 80067e8:	73fb      	strb	r3, [r7, #15]
 80067ea:	7bfa      	ldrb	r2, [r7, #15]
 80067ec:	78fb      	ldrb	r3, [r7, #3]
 80067ee:	3b01      	subs	r3, #1
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d3ec      	bcc.n	80067ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80067f4:	883b      	ldrh	r3, [r7, #0]
 80067f6:	0418      	lsls	r0, r3, #16
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6819      	ldr	r1, [r3, #0]
 80067fc:	78fb      	ldrb	r3, [r7, #3]
 80067fe:	3b01      	subs	r3, #1
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	4302      	orrs	r2, r0
 8006804:	3340      	adds	r3, #64	@ 0x40
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	440b      	add	r3, r1
 800680a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	460b      	mov	r3, r1
 8006824:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	887a      	ldrh	r2, [r7, #2]
 800682c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	460b      	mov	r3, r1
 8006846:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e267      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b00      	cmp	r3, #0
 8006870:	d075      	beq.n	800695e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006872:	4b88      	ldr	r3, [pc, #544]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f003 030c 	and.w	r3, r3, #12
 800687a:	2b04      	cmp	r3, #4
 800687c:	d00c      	beq.n	8006898 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800687e:	4b85      	ldr	r3, [pc, #532]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006886:	2b08      	cmp	r3, #8
 8006888:	d112      	bne.n	80068b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800688a:	4b82      	ldr	r3, [pc, #520]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006892:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006896:	d10b      	bne.n	80068b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006898:	4b7e      	ldr	r3, [pc, #504]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d05b      	beq.n	800695c <HAL_RCC_OscConfig+0x108>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d157      	bne.n	800695c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e242      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068b8:	d106      	bne.n	80068c8 <HAL_RCC_OscConfig+0x74>
 80068ba:	4b76      	ldr	r3, [pc, #472]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a75      	ldr	r2, [pc, #468]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 80068c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	e01d      	b.n	8006904 <HAL_RCC_OscConfig+0xb0>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80068d0:	d10c      	bne.n	80068ec <HAL_RCC_OscConfig+0x98>
 80068d2:	4b70      	ldr	r3, [pc, #448]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a6f      	ldr	r2, [pc, #444]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 80068d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068dc:	6013      	str	r3, [r2, #0]
 80068de:	4b6d      	ldr	r3, [pc, #436]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a6c      	ldr	r2, [pc, #432]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 80068e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068e8:	6013      	str	r3, [r2, #0]
 80068ea:	e00b      	b.n	8006904 <HAL_RCC_OscConfig+0xb0>
 80068ec:	4b69      	ldr	r3, [pc, #420]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a68      	ldr	r2, [pc, #416]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 80068f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	4b66      	ldr	r3, [pc, #408]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a65      	ldr	r2, [pc, #404]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 80068fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d013      	beq.n	8006934 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800690c:	f7fe fa72 	bl	8004df4 <HAL_GetTick>
 8006910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006912:	e008      	b.n	8006926 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006914:	f7fe fa6e 	bl	8004df4 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	2b64      	cmp	r3, #100	@ 0x64
 8006920:	d901      	bls.n	8006926 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e207      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006926:	4b5b      	ldr	r3, [pc, #364]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d0f0      	beq.n	8006914 <HAL_RCC_OscConfig+0xc0>
 8006932:	e014      	b.n	800695e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006934:	f7fe fa5e 	bl	8004df4 <HAL_GetTick>
 8006938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800693a:	e008      	b.n	800694e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800693c:	f7fe fa5a 	bl	8004df4 <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	2b64      	cmp	r3, #100	@ 0x64
 8006948:	d901      	bls.n	800694e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e1f3      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800694e:	4b51      	ldr	r3, [pc, #324]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1f0      	bne.n	800693c <HAL_RCC_OscConfig+0xe8>
 800695a:	e000      	b.n	800695e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800695c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d063      	beq.n	8006a32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800696a:	4b4a      	ldr	r3, [pc, #296]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f003 030c 	and.w	r3, r3, #12
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00b      	beq.n	800698e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006976:	4b47      	ldr	r3, [pc, #284]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800697e:	2b08      	cmp	r3, #8
 8006980:	d11c      	bne.n	80069bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006982:	4b44      	ldr	r3, [pc, #272]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d116      	bne.n	80069bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800698e:	4b41      	ldr	r3, [pc, #260]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d005      	beq.n	80069a6 <HAL_RCC_OscConfig+0x152>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d001      	beq.n	80069a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e1c7      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069a6:	4b3b      	ldr	r3, [pc, #236]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	4937      	ldr	r1, [pc, #220]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069ba:	e03a      	b.n	8006a32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d020      	beq.n	8006a06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069c4:	4b34      	ldr	r3, [pc, #208]	@ (8006a98 <HAL_RCC_OscConfig+0x244>)
 80069c6:	2201      	movs	r2, #1
 80069c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ca:	f7fe fa13 	bl	8004df4 <HAL_GetTick>
 80069ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069d0:	e008      	b.n	80069e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069d2:	f7fe fa0f 	bl	8004df4 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d901      	bls.n	80069e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e1a8      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0f0      	beq.n	80069d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069f0:	4b28      	ldr	r3, [pc, #160]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	00db      	lsls	r3, r3, #3
 80069fe:	4925      	ldr	r1, [pc, #148]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	600b      	str	r3, [r1, #0]
 8006a04:	e015      	b.n	8006a32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a06:	4b24      	ldr	r3, [pc, #144]	@ (8006a98 <HAL_RCC_OscConfig+0x244>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a0c:	f7fe f9f2 	bl	8004df4 <HAL_GetTick>
 8006a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a12:	e008      	b.n	8006a26 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a14:	f7fe f9ee 	bl	8004df4 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e187      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a26:	4b1b      	ldr	r3, [pc, #108]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1f0      	bne.n	8006a14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0308 	and.w	r3, r3, #8
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d036      	beq.n	8006aac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d016      	beq.n	8006a74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a46:	4b15      	ldr	r3, [pc, #84]	@ (8006a9c <HAL_RCC_OscConfig+0x248>)
 8006a48:	2201      	movs	r2, #1
 8006a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a4c:	f7fe f9d2 	bl	8004df4 <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a54:	f7fe f9ce 	bl	8004df4 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e167      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a66:	4b0b      	ldr	r3, [pc, #44]	@ (8006a94 <HAL_RCC_OscConfig+0x240>)
 8006a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d0f0      	beq.n	8006a54 <HAL_RCC_OscConfig+0x200>
 8006a72:	e01b      	b.n	8006aac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a74:	4b09      	ldr	r3, [pc, #36]	@ (8006a9c <HAL_RCC_OscConfig+0x248>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a7a:	f7fe f9bb 	bl	8004df4 <HAL_GetTick>
 8006a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a80:	e00e      	b.n	8006aa0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a82:	f7fe f9b7 	bl	8004df4 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d907      	bls.n	8006aa0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e150      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
 8006a94:	40023800 	.word	0x40023800
 8006a98:	42470000 	.word	0x42470000
 8006a9c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006aa0:	4b88      	ldr	r3, [pc, #544]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006aa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aa4:	f003 0302 	and.w	r3, r3, #2
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1ea      	bne.n	8006a82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0304 	and.w	r3, r3, #4
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f000 8097 	beq.w	8006be8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006aba:	2300      	movs	r3, #0
 8006abc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006abe:	4b81      	ldr	r3, [pc, #516]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10f      	bne.n	8006aea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006aca:	2300      	movs	r3, #0
 8006acc:	60bb      	str	r3, [r7, #8]
 8006ace:	4b7d      	ldr	r3, [pc, #500]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad2:	4a7c      	ldr	r2, [pc, #496]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006ada:	4b7a      	ldr	r3, [pc, #488]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ae2:	60bb      	str	r3, [r7, #8]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aea:	4b77      	ldr	r3, [pc, #476]	@ (8006cc8 <HAL_RCC_OscConfig+0x474>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d118      	bne.n	8006b28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006af6:	4b74      	ldr	r3, [pc, #464]	@ (8006cc8 <HAL_RCC_OscConfig+0x474>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a73      	ldr	r2, [pc, #460]	@ (8006cc8 <HAL_RCC_OscConfig+0x474>)
 8006afc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b02:	f7fe f977 	bl	8004df4 <HAL_GetTick>
 8006b06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b08:	e008      	b.n	8006b1c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b0a:	f7fe f973 	bl	8004df4 <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d901      	bls.n	8006b1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e10c      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b1c:	4b6a      	ldr	r3, [pc, #424]	@ (8006cc8 <HAL_RCC_OscConfig+0x474>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d0f0      	beq.n	8006b0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d106      	bne.n	8006b3e <HAL_RCC_OscConfig+0x2ea>
 8006b30:	4b64      	ldr	r3, [pc, #400]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b34:	4a63      	ldr	r2, [pc, #396]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006b36:	f043 0301 	orr.w	r3, r3, #1
 8006b3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b3c:	e01c      	b.n	8006b78 <HAL_RCC_OscConfig+0x324>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	2b05      	cmp	r3, #5
 8006b44:	d10c      	bne.n	8006b60 <HAL_RCC_OscConfig+0x30c>
 8006b46:	4b5f      	ldr	r3, [pc, #380]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b4a:	4a5e      	ldr	r2, [pc, #376]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006b4c:	f043 0304 	orr.w	r3, r3, #4
 8006b50:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b52:	4b5c      	ldr	r3, [pc, #368]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b56:	4a5b      	ldr	r2, [pc, #364]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006b58:	f043 0301 	orr.w	r3, r3, #1
 8006b5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b5e:	e00b      	b.n	8006b78 <HAL_RCC_OscConfig+0x324>
 8006b60:	4b58      	ldr	r3, [pc, #352]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b64:	4a57      	ldr	r2, [pc, #348]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006b66:	f023 0301 	bic.w	r3, r3, #1
 8006b6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b6c:	4b55      	ldr	r3, [pc, #340]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b70:	4a54      	ldr	r2, [pc, #336]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006b72:	f023 0304 	bic.w	r3, r3, #4
 8006b76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d015      	beq.n	8006bac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b80:	f7fe f938 	bl	8004df4 <HAL_GetTick>
 8006b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b86:	e00a      	b.n	8006b9e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b88:	f7fe f934 	bl	8004df4 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e0cb      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b9e:	4b49      	ldr	r3, [pc, #292]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d0ee      	beq.n	8006b88 <HAL_RCC_OscConfig+0x334>
 8006baa:	e014      	b.n	8006bd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bac:	f7fe f922 	bl	8004df4 <HAL_GetTick>
 8006bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bb2:	e00a      	b.n	8006bca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bb4:	f7fe f91e 	bl	8004df4 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e0b5      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bca:	4b3e      	ldr	r3, [pc, #248]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bce:	f003 0302 	and.w	r3, r3, #2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1ee      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006bd6:	7dfb      	ldrb	r3, [r7, #23]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d105      	bne.n	8006be8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bdc:	4b39      	ldr	r3, [pc, #228]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be0:	4a38      	ldr	r2, [pc, #224]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006be2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006be6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f000 80a1 	beq.w	8006d34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bf2:	4b34      	ldr	r3, [pc, #208]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 030c 	and.w	r3, r3, #12
 8006bfa:	2b08      	cmp	r3, #8
 8006bfc:	d05c      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d141      	bne.n	8006c8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c06:	4b31      	ldr	r3, [pc, #196]	@ (8006ccc <HAL_RCC_OscConfig+0x478>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c0c:	f7fe f8f2 	bl	8004df4 <HAL_GetTick>
 8006c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c12:	e008      	b.n	8006c26 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c14:	f7fe f8ee 	bl	8004df4 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e087      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c26:	4b27      	ldr	r3, [pc, #156]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1f0      	bne.n	8006c14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	69da      	ldr	r2, [r3, #28]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c40:	019b      	lsls	r3, r3, #6
 8006c42:	431a      	orrs	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c48:	085b      	lsrs	r3, r3, #1
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	041b      	lsls	r3, r3, #16
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c54:	061b      	lsls	r3, r3, #24
 8006c56:	491b      	ldr	r1, [pc, #108]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8006ccc <HAL_RCC_OscConfig+0x478>)
 8006c5e:	2201      	movs	r2, #1
 8006c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c62:	f7fe f8c7 	bl	8004df4 <HAL_GetTick>
 8006c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c68:	e008      	b.n	8006c7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c6a:	f7fe f8c3 	bl	8004df4 <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d901      	bls.n	8006c7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e05c      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c7c:	4b11      	ldr	r3, [pc, #68]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0f0      	beq.n	8006c6a <HAL_RCC_OscConfig+0x416>
 8006c88:	e054      	b.n	8006d34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c8a:	4b10      	ldr	r3, [pc, #64]	@ (8006ccc <HAL_RCC_OscConfig+0x478>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c90:	f7fe f8b0 	bl	8004df4 <HAL_GetTick>
 8006c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c96:	e008      	b.n	8006caa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c98:	f7fe f8ac 	bl	8004df4 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e045      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006caa:	4b06      	ldr	r3, [pc, #24]	@ (8006cc4 <HAL_RCC_OscConfig+0x470>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1f0      	bne.n	8006c98 <HAL_RCC_OscConfig+0x444>
 8006cb6:	e03d      	b.n	8006d34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d107      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e038      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
 8006cc4:	40023800 	.word	0x40023800
 8006cc8:	40007000 	.word	0x40007000
 8006ccc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8006d40 <HAL_RCC_OscConfig+0x4ec>)
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d028      	beq.n	8006d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d121      	bne.n	8006d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d11a      	bne.n	8006d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006d00:	4013      	ands	r3, r2
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006d06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d111      	bne.n	8006d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d16:	085b      	lsrs	r3, r3, #1
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d107      	bne.n	8006d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d001      	beq.n	8006d34 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e000      	b.n	8006d36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	40023800 	.word	0x40023800

08006d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e0cc      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d58:	4b68      	ldr	r3, [pc, #416]	@ (8006efc <HAL_RCC_ClockConfig+0x1b8>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0307 	and.w	r3, r3, #7
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d90c      	bls.n	8006d80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d66:	4b65      	ldr	r3, [pc, #404]	@ (8006efc <HAL_RCC_ClockConfig+0x1b8>)
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	b2d2      	uxtb	r2, r2
 8006d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d6e:	4b63      	ldr	r3, [pc, #396]	@ (8006efc <HAL_RCC_ClockConfig+0x1b8>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0307 	and.w	r3, r3, #7
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d001      	beq.n	8006d80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e0b8      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d020      	beq.n	8006dce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0304 	and.w	r3, r3, #4
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d005      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d98:	4b59      	ldr	r3, [pc, #356]	@ (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	4a58      	ldr	r2, [pc, #352]	@ (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006da2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0308 	and.w	r3, r3, #8
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d005      	beq.n	8006dbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006db0:	4b53      	ldr	r3, [pc, #332]	@ (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	4a52      	ldr	r2, [pc, #328]	@ (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006db6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006dba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dbc:	4b50      	ldr	r3, [pc, #320]	@ (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	494d      	ldr	r1, [pc, #308]	@ (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d044      	beq.n	8006e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d107      	bne.n	8006df2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006de2:	4b47      	ldr	r3, [pc, #284]	@ (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d119      	bne.n	8006e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e07f      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d003      	beq.n	8006e02 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dfe:	2b03      	cmp	r3, #3
 8006e00:	d107      	bne.n	8006e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e02:	4b3f      	ldr	r3, [pc, #252]	@ (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d109      	bne.n	8006e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e06f      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e12:	4b3b      	ldr	r3, [pc, #236]	@ (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e067      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e22:	4b37      	ldr	r3, [pc, #220]	@ (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f023 0203 	bic.w	r2, r3, #3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	4934      	ldr	r1, [pc, #208]	@ (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e34:	f7fd ffde 	bl	8004df4 <HAL_GetTick>
 8006e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e3a:	e00a      	b.n	8006e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e3c:	f7fd ffda 	bl	8004df4 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d901      	bls.n	8006e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e04f      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e52:	4b2b      	ldr	r3, [pc, #172]	@ (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f003 020c 	and.w	r2, r3, #12
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d1eb      	bne.n	8006e3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e64:	4b25      	ldr	r3, [pc, #148]	@ (8006efc <HAL_RCC_ClockConfig+0x1b8>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0307 	and.w	r3, r3, #7
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d20c      	bcs.n	8006e8c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e72:	4b22      	ldr	r3, [pc, #136]	@ (8006efc <HAL_RCC_ClockConfig+0x1b8>)
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e7a:	4b20      	ldr	r3, [pc, #128]	@ (8006efc <HAL_RCC_ClockConfig+0x1b8>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0307 	and.w	r3, r3, #7
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d001      	beq.n	8006e8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e032      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d008      	beq.n	8006eaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e98:	4b19      	ldr	r3, [pc, #100]	@ (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	4916      	ldr	r1, [pc, #88]	@ (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0308 	and.w	r3, r3, #8
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d009      	beq.n	8006eca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006eb6:	4b12      	ldr	r3, [pc, #72]	@ (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	00db      	lsls	r3, r3, #3
 8006ec4:	490e      	ldr	r1, [pc, #56]	@ (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006eca:	f000 f821 	bl	8006f10 <HAL_RCC_GetSysClockFreq>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8006f00 <HAL_RCC_ClockConfig+0x1bc>)
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	091b      	lsrs	r3, r3, #4
 8006ed6:	f003 030f 	and.w	r3, r3, #15
 8006eda:	490a      	ldr	r1, [pc, #40]	@ (8006f04 <HAL_RCC_ClockConfig+0x1c0>)
 8006edc:	5ccb      	ldrb	r3, [r1, r3]
 8006ede:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee2:	4a09      	ldr	r2, [pc, #36]	@ (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006ee6:	4b09      	ldr	r3, [pc, #36]	@ (8006f0c <HAL_RCC_ClockConfig+0x1c8>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fd ff3e 	bl	8004d6c <HAL_InitTick>

  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	40023c00 	.word	0x40023c00
 8006f00:	40023800 	.word	0x40023800
 8006f04:	0800f2ac 	.word	0x0800f2ac
 8006f08:	20000000 	.word	0x20000000
 8006f0c:	20000004 	.word	0x20000004

08006f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f14:	b094      	sub	sp, #80	@ 0x50
 8006f16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006f24:	2300      	movs	r3, #0
 8006f26:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f28:	4b79      	ldr	r3, [pc, #484]	@ (8007110 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f003 030c 	and.w	r3, r3, #12
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d00d      	beq.n	8006f50 <HAL_RCC_GetSysClockFreq+0x40>
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	f200 80e1 	bhi.w	80070fc <HAL_RCC_GetSysClockFreq+0x1ec>
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <HAL_RCC_GetSysClockFreq+0x34>
 8006f3e:	2b04      	cmp	r3, #4
 8006f40:	d003      	beq.n	8006f4a <HAL_RCC_GetSysClockFreq+0x3a>
 8006f42:	e0db      	b.n	80070fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f44:	4b73      	ldr	r3, [pc, #460]	@ (8007114 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f48:	e0db      	b.n	8007102 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f4a:	4b72      	ldr	r3, [pc, #456]	@ (8007114 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f4e:	e0d8      	b.n	8007102 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f50:	4b6f      	ldr	r3, [pc, #444]	@ (8007110 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f58:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f5a:	4b6d      	ldr	r3, [pc, #436]	@ (8007110 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d063      	beq.n	800702e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f66:	4b6a      	ldr	r3, [pc, #424]	@ (8007110 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	099b      	lsrs	r3, r3, #6
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f78:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006f82:	4622      	mov	r2, r4
 8006f84:	462b      	mov	r3, r5
 8006f86:	f04f 0000 	mov.w	r0, #0
 8006f8a:	f04f 0100 	mov.w	r1, #0
 8006f8e:	0159      	lsls	r1, r3, #5
 8006f90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f94:	0150      	lsls	r0, r2, #5
 8006f96:	4602      	mov	r2, r0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4621      	mov	r1, r4
 8006f9c:	1a51      	subs	r1, r2, r1
 8006f9e:	6139      	str	r1, [r7, #16]
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	eb63 0301 	sbc.w	r3, r3, r1
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	f04f 0200 	mov.w	r2, #0
 8006fac:	f04f 0300 	mov.w	r3, #0
 8006fb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fb4:	4659      	mov	r1, fp
 8006fb6:	018b      	lsls	r3, r1, #6
 8006fb8:	4651      	mov	r1, sl
 8006fba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006fbe:	4651      	mov	r1, sl
 8006fc0:	018a      	lsls	r2, r1, #6
 8006fc2:	4651      	mov	r1, sl
 8006fc4:	ebb2 0801 	subs.w	r8, r2, r1
 8006fc8:	4659      	mov	r1, fp
 8006fca:	eb63 0901 	sbc.w	r9, r3, r1
 8006fce:	f04f 0200 	mov.w	r2, #0
 8006fd2:	f04f 0300 	mov.w	r3, #0
 8006fd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fe2:	4690      	mov	r8, r2
 8006fe4:	4699      	mov	r9, r3
 8006fe6:	4623      	mov	r3, r4
 8006fe8:	eb18 0303 	adds.w	r3, r8, r3
 8006fec:	60bb      	str	r3, [r7, #8]
 8006fee:	462b      	mov	r3, r5
 8006ff0:	eb49 0303 	adc.w	r3, r9, r3
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	f04f 0200 	mov.w	r2, #0
 8006ffa:	f04f 0300 	mov.w	r3, #0
 8006ffe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007002:	4629      	mov	r1, r5
 8007004:	028b      	lsls	r3, r1, #10
 8007006:	4621      	mov	r1, r4
 8007008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800700c:	4621      	mov	r1, r4
 800700e:	028a      	lsls	r2, r1, #10
 8007010:	4610      	mov	r0, r2
 8007012:	4619      	mov	r1, r3
 8007014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007016:	2200      	movs	r2, #0
 8007018:	62bb      	str	r3, [r7, #40]	@ 0x28
 800701a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800701c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007020:	f7f9 fde2 	bl	8000be8 <__aeabi_uldivmod>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	4613      	mov	r3, r2
 800702a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800702c:	e058      	b.n	80070e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800702e:	4b38      	ldr	r3, [pc, #224]	@ (8007110 <HAL_RCC_GetSysClockFreq+0x200>)
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	099b      	lsrs	r3, r3, #6
 8007034:	2200      	movs	r2, #0
 8007036:	4618      	mov	r0, r3
 8007038:	4611      	mov	r1, r2
 800703a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800703e:	623b      	str	r3, [r7, #32]
 8007040:	2300      	movs	r3, #0
 8007042:	627b      	str	r3, [r7, #36]	@ 0x24
 8007044:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007048:	4642      	mov	r2, r8
 800704a:	464b      	mov	r3, r9
 800704c:	f04f 0000 	mov.w	r0, #0
 8007050:	f04f 0100 	mov.w	r1, #0
 8007054:	0159      	lsls	r1, r3, #5
 8007056:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800705a:	0150      	lsls	r0, r2, #5
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	4641      	mov	r1, r8
 8007062:	ebb2 0a01 	subs.w	sl, r2, r1
 8007066:	4649      	mov	r1, r9
 8007068:	eb63 0b01 	sbc.w	fp, r3, r1
 800706c:	f04f 0200 	mov.w	r2, #0
 8007070:	f04f 0300 	mov.w	r3, #0
 8007074:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007078:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800707c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007080:	ebb2 040a 	subs.w	r4, r2, sl
 8007084:	eb63 050b 	sbc.w	r5, r3, fp
 8007088:	f04f 0200 	mov.w	r2, #0
 800708c:	f04f 0300 	mov.w	r3, #0
 8007090:	00eb      	lsls	r3, r5, #3
 8007092:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007096:	00e2      	lsls	r2, r4, #3
 8007098:	4614      	mov	r4, r2
 800709a:	461d      	mov	r5, r3
 800709c:	4643      	mov	r3, r8
 800709e:	18e3      	adds	r3, r4, r3
 80070a0:	603b      	str	r3, [r7, #0]
 80070a2:	464b      	mov	r3, r9
 80070a4:	eb45 0303 	adc.w	r3, r5, r3
 80070a8:	607b      	str	r3, [r7, #4]
 80070aa:	f04f 0200 	mov.w	r2, #0
 80070ae:	f04f 0300 	mov.w	r3, #0
 80070b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80070b6:	4629      	mov	r1, r5
 80070b8:	028b      	lsls	r3, r1, #10
 80070ba:	4621      	mov	r1, r4
 80070bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80070c0:	4621      	mov	r1, r4
 80070c2:	028a      	lsls	r2, r1, #10
 80070c4:	4610      	mov	r0, r2
 80070c6:	4619      	mov	r1, r3
 80070c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070ca:	2200      	movs	r2, #0
 80070cc:	61bb      	str	r3, [r7, #24]
 80070ce:	61fa      	str	r2, [r7, #28]
 80070d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070d4:	f7f9 fd88 	bl	8000be8 <__aeabi_uldivmod>
 80070d8:	4602      	mov	r2, r0
 80070da:	460b      	mov	r3, r1
 80070dc:	4613      	mov	r3, r2
 80070de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80070e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007110 <HAL_RCC_GetSysClockFreq+0x200>)
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	0c1b      	lsrs	r3, r3, #16
 80070e6:	f003 0303 	and.w	r3, r3, #3
 80070ea:	3301      	adds	r3, #1
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80070f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80070fa:	e002      	b.n	8007102 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070fc:	4b05      	ldr	r3, [pc, #20]	@ (8007114 <HAL_RCC_GetSysClockFreq+0x204>)
 80070fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007100:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007102:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007104:	4618      	mov	r0, r3
 8007106:	3750      	adds	r7, #80	@ 0x50
 8007108:	46bd      	mov	sp, r7
 800710a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800710e:	bf00      	nop
 8007110:	40023800 	.word	0x40023800
 8007114:	00f42400 	.word	0x00f42400

08007118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800711c:	4b03      	ldr	r3, [pc, #12]	@ (800712c <HAL_RCC_GetHCLKFreq+0x14>)
 800711e:	681b      	ldr	r3, [r3, #0]
}
 8007120:	4618      	mov	r0, r3
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	20000000 	.word	0x20000000

08007130 <LL_ADC_REG_SetSequencerLength>:
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800713e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	431a      	orrs	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800714a:	bf00      	nop
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b01      	cmp	r3, #1
 8007168:	bf0c      	ite	eq
 800716a:	2301      	moveq	r3, #1
 800716c:	2300      	movne	r3, #0
 800716e:	b2db      	uxtb	r3, r3
}
 8007170:	4618      	mov	r0, r3
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800717c:	b590      	push	{r4, r7, lr}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8007186:	2300      	movs	r3, #0
 8007188:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800718a:	481c      	ldr	r0, [pc, #112]	@ (80071fc <LL_ADC_CommonInit+0x80>)
 800718c:	f7ff ffe3 	bl	8007156 <LL_ADC_IsEnabled>
 8007190:	4604      	mov	r4, r0
 8007192:	481b      	ldr	r0, [pc, #108]	@ (8007200 <LL_ADC_CommonInit+0x84>)
 8007194:	f7ff ffdf 	bl	8007156 <LL_ADC_IsEnabled>
 8007198:	4603      	mov	r3, r0
 800719a:	431c      	orrs	r4, r3
 800719c:	4819      	ldr	r0, [pc, #100]	@ (8007204 <LL_ADC_CommonInit+0x88>)
 800719e:	f7ff ffda 	bl	8007156 <LL_ADC_IsEnabled>
 80071a2:	4603      	mov	r3, r0
 80071a4:	4323      	orrs	r3, r4
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d120      	bne.n	80071ec <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d012      	beq.n	80071d8 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	4b14      	ldr	r3, [pc, #80]	@ (8007208 <LL_ADC_CommonInit+0x8c>)
 80071b8:	4013      	ands	r3, r2
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	6811      	ldr	r1, [r2, #0]
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	6852      	ldr	r2, [r2, #4]
 80071c2:	4311      	orrs	r1, r2
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	6892      	ldr	r2, [r2, #8]
 80071c8:	4311      	orrs	r1, r2
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	68d2      	ldr	r2, [r2, #12]
 80071ce:	430a      	orrs	r2, r1
 80071d0:	431a      	orrs	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	605a      	str	r2, [r3, #4]
 80071d6:	e00b      	b.n	80071f0 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007208 <LL_ADC_CommonInit+0x8c>)
 80071de:	4013      	ands	r3, r2
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	6812      	ldr	r2, [r2, #0]
 80071e4:	431a      	orrs	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	605a      	str	r2, [r3, #4]
 80071ea:	e001      	b.n	80071f0 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd90      	pop	{r4, r7, pc}
 80071fa:	bf00      	nop
 80071fc:	40012000 	.word	0x40012000
 8007200:	40012100 	.word	0x40012100
 8007204:	40012200 	.word	0x40012200
 8007208:	fffc10e0 	.word	0xfffc10e0

0800720c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8007216:	2300      	movs	r3, #0
 8007218:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff ff9b 	bl	8007156 <LL_ADC_IsEnabled>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d117      	bne.n	8007256 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800722e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	6811      	ldr	r1, [r2, #0]
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	6892      	ldr	r2, [r2, #8]
 800723a:	430a      	orrs	r2, r1
 800723c:	431a      	orrs	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	605a      	str	r2, [r3, #4]
               ,
               ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );

    MODIFY_REG(ADCx->CR2,
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	431a      	orrs	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	609a      	str	r2, [r3, #8]
 8007254:	e001      	b.n	800725a <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800725a:	7bfb      	ldrb	r3, [r7, #15]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800726e:	2300      	movs	r3, #0
 8007270:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7ff ff6f 	bl	8007156 <LL_ADC_IsEnabled>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d12b      	bne.n	80072d6 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d009      	beq.n	800729a <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	431a      	orrs	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	605a      	str	r2, [r3, #4]
 8007298:	e005      	b.n	80072a6 <LL_ADC_REG_Init+0x42>
                 ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	605a      	str	r2, [r3, #4]
                 ,
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	689a      	ldr	r2, [r3, #8]
 80072aa:	4b0e      	ldr	r3, [pc, #56]	@ (80072e4 <LL_ADC_REG_Init+0x80>)
 80072ac:	4013      	ands	r3, r2
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	6812      	ldr	r2, [r2, #0]
 80072b2:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	68d2      	ldr	r2, [r2, #12]
 80072ba:	4311      	orrs	r1, r2
 80072bc:	683a      	ldr	r2, [r7, #0]
 80072be:	6912      	ldr	r2, [r2, #16]
 80072c0:	430a      	orrs	r2, r1
 80072c2:	431a      	orrs	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	4619      	mov	r1, r3
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7ff ff2e 	bl	8007130 <LL_ADC_REG_SetSequencerLength>
 80072d4:	e001      	b.n	80072da <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80072da:	7bfb      	ldrb	r3, [r7, #15]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	c0fffcfd 	.word	0xc0fffcfd

080072e8 <LL_EXTI_EnableIT_0_31>:
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80072f0:	4b05      	ldr	r3, [pc, #20]	@ (8007308 <LL_EXTI_EnableIT_0_31+0x20>)
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	4904      	ldr	r1, [pc, #16]	@ (8007308 <LL_EXTI_EnableIT_0_31+0x20>)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	600b      	str	r3, [r1, #0]
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	40013c00 	.word	0x40013c00

0800730c <LL_EXTI_DisableIT_0_31>:
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8007314:	4b06      	ldr	r3, [pc, #24]	@ (8007330 <LL_EXTI_DisableIT_0_31+0x24>)
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	43db      	mvns	r3, r3
 800731c:	4904      	ldr	r1, [pc, #16]	@ (8007330 <LL_EXTI_DisableIT_0_31+0x24>)
 800731e:	4013      	ands	r3, r2
 8007320:	600b      	str	r3, [r1, #0]
}
 8007322:	bf00      	nop
 8007324:	370c      	adds	r7, #12
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	40013c00 	.word	0x40013c00

08007334 <LL_EXTI_EnableEvent_0_31>:
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800733c:	4b05      	ldr	r3, [pc, #20]	@ (8007354 <LL_EXTI_EnableEvent_0_31+0x20>)
 800733e:	685a      	ldr	r2, [r3, #4]
 8007340:	4904      	ldr	r1, [pc, #16]	@ (8007354 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4313      	orrs	r3, r2
 8007346:	604b      	str	r3, [r1, #4]
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	40013c00 	.word	0x40013c00

08007358 <LL_EXTI_DisableEvent_0_31>:
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8007360:	4b06      	ldr	r3, [pc, #24]	@ (800737c <LL_EXTI_DisableEvent_0_31+0x24>)
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	43db      	mvns	r3, r3
 8007368:	4904      	ldr	r1, [pc, #16]	@ (800737c <LL_EXTI_DisableEvent_0_31+0x24>)
 800736a:	4013      	ands	r3, r2
 800736c:	604b      	str	r3, [r1, #4]
}
 800736e:	bf00      	nop
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	40013c00 	.word	0x40013c00

08007380 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8007388:	4b05      	ldr	r3, [pc, #20]	@ (80073a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	4904      	ldr	r1, [pc, #16]	@ (80073a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4313      	orrs	r3, r2
 8007392:	608b      	str	r3, [r1, #8]
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	40013c00 	.word	0x40013c00

080073a4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80073ac:	4b06      	ldr	r3, [pc, #24]	@ (80073c8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80073ae:	689a      	ldr	r2, [r3, #8]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	43db      	mvns	r3, r3
 80073b4:	4904      	ldr	r1, [pc, #16]	@ (80073c8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80073b6:	4013      	ands	r3, r2
 80073b8:	608b      	str	r3, [r1, #8]
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	40013c00 	.word	0x40013c00

080073cc <LL_EXTI_EnableFallingTrig_0_31>:
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80073d4:	4b05      	ldr	r3, [pc, #20]	@ (80073ec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80073d6:	68da      	ldr	r2, [r3, #12]
 80073d8:	4904      	ldr	r1, [pc, #16]	@ (80073ec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4313      	orrs	r3, r2
 80073de:	60cb      	str	r3, [r1, #12]
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	40013c00 	.word	0x40013c00

080073f0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80073f8:	4b06      	ldr	r3, [pc, #24]	@ (8007414 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80073fa:	68da      	ldr	r2, [r3, #12]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	43db      	mvns	r3, r3
 8007400:	4904      	ldr	r1, [pc, #16]	@ (8007414 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007402:	4013      	ands	r3, r2
 8007404:	60cb      	str	r3, [r1, #12]
}
 8007406:	bf00      	nop
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	40013c00 	.word	0x40013c00

08007418 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8007420:	2300      	movs	r3, #0
 8007422:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	791b      	ldrb	r3, [r3, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d065      	beq.n	80074f8 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d06b      	beq.n	800750c <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	795b      	ldrb	r3, [r3, #5]
 8007438:	2b02      	cmp	r3, #2
 800743a:	d01c      	beq.n	8007476 <LL_EXTI_Init+0x5e>
 800743c:	2b02      	cmp	r3, #2
 800743e:	dc25      	bgt.n	800748c <LL_EXTI_Init+0x74>
 8007440:	2b00      	cmp	r3, #0
 8007442:	d002      	beq.n	800744a <LL_EXTI_Init+0x32>
 8007444:	2b01      	cmp	r3, #1
 8007446:	d00b      	beq.n	8007460 <LL_EXTI_Init+0x48>
 8007448:	e020      	b.n	800748c <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff ff82 	bl	8007358 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4618      	mov	r0, r3
 800745a:	f7ff ff45 	bl	80072e8 <LL_EXTI_EnableIT_0_31>
          break;
 800745e:	e018      	b.n	8007492 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4618      	mov	r0, r3
 8007466:	f7ff ff51 	bl	800730c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff ff60 	bl	8007334 <LL_EXTI_EnableEvent_0_31>
          break;
 8007474:	e00d      	b.n	8007492 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4618      	mov	r0, r3
 800747c:	f7ff ff34 	bl	80072e8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4618      	mov	r0, r3
 8007486:	f7ff ff55 	bl	8007334 <LL_EXTI_EnableEvent_0_31>
          break;
 800748a:	e002      	b.n	8007492 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	73fb      	strb	r3, [r7, #15]
          break;
 8007490:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	799b      	ldrb	r3, [r3, #6]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d038      	beq.n	800750c <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	799b      	ldrb	r3, [r3, #6]
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d01c      	beq.n	80074dc <LL_EXTI_Init+0xc4>
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	dc25      	bgt.n	80074f2 <LL_EXTI_Init+0xda>
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d002      	beq.n	80074b0 <LL_EXTI_Init+0x98>
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d00b      	beq.n	80074c6 <LL_EXTI_Init+0xae>
 80074ae:	e020      	b.n	80074f2 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff ff9b 	bl	80073f0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4618      	mov	r0, r3
 80074c0:	f7ff ff5e 	bl	8007380 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80074c4:	e022      	b.n	800750c <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7ff ff6a 	bl	80073a4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7ff ff79 	bl	80073cc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80074da:	e017      	b.n	800750c <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff ff4d 	bl	8007380 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7ff ff6e 	bl	80073cc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80074f0:	e00c      	b.n	800750c <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	73fb      	strb	r3, [r7, #15]
            break;
 80074f6:	e009      	b.n	800750c <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7ff ff05 	bl	800730c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4618      	mov	r0, r3
 8007508:	f7ff ff26 	bl	8007358 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 800750c:	7bfb      	ldrb	r3, [r7, #15]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <LL_GPIO_SetPinMode>:
{
 8007516:	b480      	push	{r7}
 8007518:	b08b      	sub	sp, #44	@ 0x2c
 800751a:	af00      	add	r7, sp, #0
 800751c:	60f8      	str	r0, [r7, #12]
 800751e:	60b9      	str	r1, [r7, #8]
 8007520:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	fa93 f3a3 	rbit	r3, r3
 8007530:	613b      	str	r3, [r7, #16]
  return result;
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800753c:	2320      	movs	r3, #32
 800753e:	e003      	b.n	8007548 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	fab3 f383 	clz	r3, r3
 8007546:	b2db      	uxtb	r3, r3
 8007548:	005b      	lsls	r3, r3, #1
 800754a:	2103      	movs	r1, #3
 800754c:	fa01 f303 	lsl.w	r3, r1, r3
 8007550:	43db      	mvns	r3, r3
 8007552:	401a      	ands	r2, r3
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	fa93 f3a3 	rbit	r3, r3
 800755e:	61fb      	str	r3, [r7, #28]
  return result;
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800756a:	2320      	movs	r3, #32
 800756c:	e003      	b.n	8007576 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800756e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007570:	fab3 f383 	clz	r3, r3
 8007574:	b2db      	uxtb	r3, r3
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	6879      	ldr	r1, [r7, #4]
 800757a:	fa01 f303 	lsl.w	r3, r1, r3
 800757e:	431a      	orrs	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	601a      	str	r2, [r3, #0]
}
 8007584:	bf00      	nop
 8007586:	372c      	adds	r7, #44	@ 0x2c
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <LL_GPIO_SetPinOutputType>:
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	43db      	mvns	r3, r3
 80075a4:	401a      	ands	r2, r3
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	6879      	ldr	r1, [r7, #4]
 80075aa:	fb01 f303 	mul.w	r3, r1, r3
 80075ae:	431a      	orrs	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	605a      	str	r2, [r3, #4]
}
 80075b4:	bf00      	nop
 80075b6:	3714      	adds	r7, #20
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <LL_GPIO_SetPinSpeed>:
{
 80075c0:	b480      	push	{r7}
 80075c2:	b08b      	sub	sp, #44	@ 0x2c
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	689a      	ldr	r2, [r3, #8]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	fa93 f3a3 	rbit	r3, r3
 80075da:	613b      	str	r3, [r7, #16]
  return result;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d101      	bne.n	80075ea <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80075e6:	2320      	movs	r3, #32
 80075e8:	e003      	b.n	80075f2 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	fab3 f383 	clz	r3, r3
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	005b      	lsls	r3, r3, #1
 80075f4:	2103      	movs	r1, #3
 80075f6:	fa01 f303 	lsl.w	r3, r1, r3
 80075fa:	43db      	mvns	r3, r3
 80075fc:	401a      	ands	r2, r3
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	fa93 f3a3 	rbit	r3, r3
 8007608:	61fb      	str	r3, [r7, #28]
  return result;
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800760e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8007614:	2320      	movs	r3, #32
 8007616:	e003      	b.n	8007620 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8007618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761a:	fab3 f383 	clz	r3, r3
 800761e:	b2db      	uxtb	r3, r3
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	6879      	ldr	r1, [r7, #4]
 8007624:	fa01 f303 	lsl.w	r3, r1, r3
 8007628:	431a      	orrs	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	609a      	str	r2, [r3, #8]
}
 800762e:	bf00      	nop
 8007630:	372c      	adds	r7, #44	@ 0x2c
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <LL_GPIO_SetPinPull>:
{
 800763a:	b480      	push	{r7}
 800763c:	b08b      	sub	sp, #44	@ 0x2c
 800763e:	af00      	add	r7, sp, #0
 8007640:	60f8      	str	r0, [r7, #12]
 8007642:	60b9      	str	r1, [r7, #8]
 8007644:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	68da      	ldr	r2, [r3, #12]
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	fa93 f3a3 	rbit	r3, r3
 8007654:	613b      	str	r3, [r7, #16]
  return result;
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8007660:	2320      	movs	r3, #32
 8007662:	e003      	b.n	800766c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	fab3 f383 	clz	r3, r3
 800766a:	b2db      	uxtb	r3, r3
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	2103      	movs	r1, #3
 8007670:	fa01 f303 	lsl.w	r3, r1, r3
 8007674:	43db      	mvns	r3, r3
 8007676:	401a      	ands	r2, r3
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	fa93 f3a3 	rbit	r3, r3
 8007682:	61fb      	str	r3, [r7, #28]
  return result;
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800768e:	2320      	movs	r3, #32
 8007690:	e003      	b.n	800769a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8007692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007694:	fab3 f383 	clz	r3, r3
 8007698:	b2db      	uxtb	r3, r3
 800769a:	005b      	lsls	r3, r3, #1
 800769c:	6879      	ldr	r1, [r7, #4]
 800769e:	fa01 f303 	lsl.w	r3, r1, r3
 80076a2:	431a      	orrs	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	60da      	str	r2, [r3, #12]
}
 80076a8:	bf00      	nop
 80076aa:	372c      	adds	r7, #44	@ 0x2c
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <LL_GPIO_SetAFPin_0_7>:
{
 80076b4:	b480      	push	{r7}
 80076b6:	b08b      	sub	sp, #44	@ 0x2c
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6a1a      	ldr	r2, [r3, #32]
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	fa93 f3a3 	rbit	r3, r3
 80076ce:	613b      	str	r3, [r7, #16]
  return result;
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80076da:	2320      	movs	r3, #32
 80076dc:	e003      	b.n	80076e6 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	fab3 f383 	clz	r3, r3
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	210f      	movs	r1, #15
 80076ea:	fa01 f303 	lsl.w	r3, r1, r3
 80076ee:	43db      	mvns	r3, r3
 80076f0:	401a      	ands	r2, r3
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	fa93 f3a3 	rbit	r3, r3
 80076fc:	61fb      	str	r3, [r7, #28]
  return result;
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007704:	2b00      	cmp	r3, #0
 8007706:	d101      	bne.n	800770c <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8007708:	2320      	movs	r3, #32
 800770a:	e003      	b.n	8007714 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800770c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770e:	fab3 f383 	clz	r3, r3
 8007712:	b2db      	uxtb	r3, r3
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	6879      	ldr	r1, [r7, #4]
 8007718:	fa01 f303 	lsl.w	r3, r1, r3
 800771c:	431a      	orrs	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	621a      	str	r2, [r3, #32]
}
 8007722:	bf00      	nop
 8007724:	372c      	adds	r7, #44	@ 0x2c
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <LL_GPIO_SetAFPin_8_15>:
{
 800772e:	b480      	push	{r7}
 8007730:	b08b      	sub	sp, #44	@ 0x2c
 8007732:	af00      	add	r7, sp, #0
 8007734:	60f8      	str	r0, [r7, #12]
 8007736:	60b9      	str	r1, [r7, #8]
 8007738:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	0a1b      	lsrs	r3, r3, #8
 8007742:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	fa93 f3a3 	rbit	r3, r3
 800774a:	613b      	str	r3, [r7, #16]
  return result;
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8007756:	2320      	movs	r3, #32
 8007758:	e003      	b.n	8007762 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	fab3 f383 	clz	r3, r3
 8007760:	b2db      	uxtb	r3, r3
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	210f      	movs	r1, #15
 8007766:	fa01 f303 	lsl.w	r3, r1, r3
 800776a:	43db      	mvns	r3, r3
 800776c:	401a      	ands	r2, r3
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	0a1b      	lsrs	r3, r3, #8
 8007772:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	fa93 f3a3 	rbit	r3, r3
 800777a:	61fb      	str	r3, [r7, #28]
  return result;
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8007786:	2320      	movs	r3, #32
 8007788:	e003      	b.n	8007792 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800778a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778c:	fab3 f383 	clz	r3, r3
 8007790:	b2db      	uxtb	r3, r3
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	6879      	ldr	r1, [r7, #4]
 8007796:	fa01 f303 	lsl.w	r3, r1, r3
 800779a:	431a      	orrs	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80077a0:	bf00      	nop
 80077a2:	372c      	adds	r7, #44	@ 0x2c
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b08a      	sub	sp, #40	@ 0x28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80077b6:	2300      	movs	r3, #0
 80077b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	fa93 f3a3 	rbit	r3, r3
 80077ca:	617b      	str	r3, [r7, #20]
  return result;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <LL_GPIO_Init+0x2e>
    return 32U;
 80077d6:	2320      	movs	r3, #32
 80077d8:	e003      	b.n	80077e2 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	fab3 f383 	clz	r3, r3
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80077e4:	e057      	b.n	8007896 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	2101      	movs	r1, #1
 80077ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ee:	fa01 f303 	lsl.w	r3, r1, r3
 80077f2:	4013      	ands	r3, r2
 80077f4:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d049      	beq.n	8007890 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d003      	beq.n	800780c <LL_GPIO_Init+0x60>
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	2b02      	cmp	r3, #2
 800780a:	d10d      	bne.n	8007828 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	461a      	mov	r2, r3
 8007812:	6a39      	ldr	r1, [r7, #32]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7ff fed3 	bl	80075c0 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	461a      	mov	r2, r3
 8007820:	6a39      	ldr	r1, [r7, #32]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f7ff feb4 	bl	8007590 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	461a      	mov	r2, r3
 800782e:	6a39      	ldr	r1, [r7, #32]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff ff02 	bl	800763a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	2b02      	cmp	r3, #2
 800783c:	d121      	bne.n	8007882 <LL_GPIO_Init+0xd6>
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	fa93 f3a3 	rbit	r3, r3
 8007848:	60bb      	str	r3, [r7, #8]
  return result;
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <LL_GPIO_Init+0xac>
    return 32U;
 8007854:	2320      	movs	r3, #32
 8007856:	e003      	b.n	8007860 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	fab3 f383 	clz	r3, r3
 800785e:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8007860:	2b07      	cmp	r3, #7
 8007862:	d807      	bhi.n	8007874 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	461a      	mov	r2, r3
 800786a:	6a39      	ldr	r1, [r7, #32]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7ff ff21 	bl	80076b4 <LL_GPIO_SetAFPin_0_7>
 8007872:	e006      	b.n	8007882 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	695b      	ldr	r3, [r3, #20]
 8007878:	461a      	mov	r2, r3
 800787a:	6a39      	ldr	r1, [r7, #32]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7ff ff56 	bl	800772e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	461a      	mov	r2, r3
 8007888:	6a39      	ldr	r1, [r7, #32]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7ff fe43 	bl	8007516 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007892:	3301      	adds	r3, #1
 8007894:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789c:	fa22 f303 	lsr.w	r3, r2, r3
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1a0      	bne.n	80077e6 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3728      	adds	r7, #40	@ 0x28
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
	...

080078b0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80078b0:	b480      	push	{r7}
 80078b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80078b4:	4b04      	ldr	r3, [pc, #16]	@ (80078c8 <LL_RCC_GetSysClkSource+0x18>)
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f003 030c 	and.w	r3, r3, #12
}
 80078bc:	4618      	mov	r0, r3
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	40023800 	.word	0x40023800

080078cc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80078cc:	b480      	push	{r7}
 80078ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80078d0:	4b04      	ldr	r3, [pc, #16]	@ (80078e4 <LL_RCC_GetAHBPrescaler+0x18>)
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	40023800 	.word	0x40023800

080078e8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80078e8:	b480      	push	{r7}
 80078ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80078ec:	4b04      	ldr	r3, [pc, #16]	@ (8007900 <LL_RCC_GetAPB1Prescaler+0x18>)
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	40023800 	.word	0x40023800

08007904 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8007904:	b480      	push	{r7}
 8007906:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007908:	4b04      	ldr	r3, [pc, #16]	@ (800791c <LL_RCC_GetAPB2Prescaler+0x18>)
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8007910:	4618      	mov	r0, r3
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	40023800 	.word	0x40023800

08007920 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007920:	b480      	push	{r7}
 8007922:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007924:	4b04      	ldr	r3, [pc, #16]	@ (8007938 <LL_RCC_PLL_GetMainSource+0x18>)
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800792c:	4618      	mov	r0, r3
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	40023800 	.word	0x40023800

0800793c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007940:	4b04      	ldr	r3, [pc, #16]	@ (8007954 <LL_RCC_PLL_GetN+0x18>)
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	099b      	lsrs	r3, r3, #6
 8007946:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800794a:	4618      	mov	r0, r3
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr
 8007954:	40023800 	.word	0x40023800

08007958 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800795c:	4b04      	ldr	r3, [pc, #16]	@ (8007970 <LL_RCC_PLL_GetP+0x18>)
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8007964:	4618      	mov	r0, r3
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	40023800 	.word	0x40023800

08007974 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007978:	4b04      	ldr	r3, [pc, #16]	@ (800798c <LL_RCC_PLL_GetDivider+0x18>)
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8007980:	4618      	mov	r0, r3
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	40023800 	.word	0x40023800

08007990 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8007998:	f000 f820 	bl	80079dc <RCC_GetSystemClockFreq>
 800799c:	4602      	mov	r2, r0
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 f83e 	bl	8007a28 <RCC_GetHCLKClockFreq>
 80079ac:	4602      	mov	r2, r0
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 f84c 	bl	8007a54 <RCC_GetPCLK1ClockFreq>
 80079bc:	4602      	mov	r2, r0
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 f858 	bl	8007a7c <RCC_GetPCLK2ClockFreq>
 80079cc:	4602      	mov	r2, r0
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	60da      	str	r2, [r3, #12]
}
 80079d2:	bf00      	nop
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
	...

080079dc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80079e6:	f7ff ff63 	bl	80078b0 <LL_RCC_GetSysClkSource>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b08      	cmp	r3, #8
 80079ee:	d00c      	beq.n	8007a0a <RCC_GetSystemClockFreq+0x2e>
 80079f0:	2b08      	cmp	r3, #8
 80079f2:	d80f      	bhi.n	8007a14 <RCC_GetSystemClockFreq+0x38>
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d002      	beq.n	80079fe <RCC_GetSystemClockFreq+0x22>
 80079f8:	2b04      	cmp	r3, #4
 80079fa:	d003      	beq.n	8007a04 <RCC_GetSystemClockFreq+0x28>
 80079fc:	e00a      	b.n	8007a14 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80079fe:	4b09      	ldr	r3, [pc, #36]	@ (8007a24 <RCC_GetSystemClockFreq+0x48>)
 8007a00:	607b      	str	r3, [r7, #4]
      break;
 8007a02:	e00a      	b.n	8007a1a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8007a04:	4b07      	ldr	r3, [pc, #28]	@ (8007a24 <RCC_GetSystemClockFreq+0x48>)
 8007a06:	607b      	str	r3, [r7, #4]
      break;
 8007a08:	e007      	b.n	8007a1a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8007a0a:	2008      	movs	r0, #8
 8007a0c:	f000 f84a 	bl	8007aa4 <RCC_PLL_GetFreqDomain_SYS>
 8007a10:	6078      	str	r0, [r7, #4]
      break;
 8007a12:	e002      	b.n	8007a1a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8007a14:	4b03      	ldr	r3, [pc, #12]	@ (8007a24 <RCC_GetSystemClockFreq+0x48>)
 8007a16:	607b      	str	r3, [r7, #4]
      break;
 8007a18:	bf00      	nop
  }

  return frequency;
 8007a1a:	687b      	ldr	r3, [r7, #4]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	00f42400 	.word	0x00f42400

08007a28 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8007a30:	f7ff ff4c 	bl	80078cc <LL_RCC_GetAHBPrescaler>
 8007a34:	4603      	mov	r3, r0
 8007a36:	091b      	lsrs	r3, r3, #4
 8007a38:	f003 030f 	and.w	r3, r3, #15
 8007a3c:	4a04      	ldr	r2, [pc, #16]	@ (8007a50 <RCC_GetHCLKClockFreq+0x28>)
 8007a3e:	5cd3      	ldrb	r3, [r2, r3]
 8007a40:	461a      	mov	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	40d3      	lsrs	r3, r2
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	0800f2ac 	.word	0x0800f2ac

08007a54 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8007a5c:	f7ff ff44 	bl	80078e8 <LL_RCC_GetAPB1Prescaler>
 8007a60:	4603      	mov	r3, r0
 8007a62:	0a9b      	lsrs	r3, r3, #10
 8007a64:	4a04      	ldr	r2, [pc, #16]	@ (8007a78 <RCC_GetPCLK1ClockFreq+0x24>)
 8007a66:	5cd3      	ldrb	r3, [r2, r3]
 8007a68:	461a      	mov	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	40d3      	lsrs	r3, r2
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	0800f2bc 	.word	0x0800f2bc

08007a7c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8007a84:	f7ff ff3e 	bl	8007904 <LL_RCC_GetAPB2Prescaler>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	0b5b      	lsrs	r3, r3, #13
 8007a8c:	4a04      	ldr	r2, [pc, #16]	@ (8007aa0 <RCC_GetPCLK2ClockFreq+0x24>)
 8007a8e:	5cd3      	ldrb	r3, [r2, r3]
 8007a90:	461a      	mov	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	40d3      	lsrs	r3, r2
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	0800f2bc 	.word	0x0800f2bc

08007aa4 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8007aa4:	b590      	push	{r4, r7, lr}
 8007aa6:	b087      	sub	sp, #28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007ab8:	f7ff ff32 	bl	8007920 <LL_RCC_PLL_GetMainSource>
 8007abc:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d004      	beq.n	8007ace <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007aca:	d003      	beq.n	8007ad4 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8007acc:	e005      	b.n	8007ada <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8007ace:	4b12      	ldr	r3, [pc, #72]	@ (8007b18 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007ad0:	617b      	str	r3, [r7, #20]
      break;
 8007ad2:	e005      	b.n	8007ae0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8007ad4:	4b10      	ldr	r3, [pc, #64]	@ (8007b18 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007ad6:	617b      	str	r3, [r7, #20]
      break;
 8007ad8:	e002      	b.n	8007ae0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8007ada:	4b0f      	ldr	r3, [pc, #60]	@ (8007b18 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007adc:	617b      	str	r3, [r7, #20]
      break;
 8007ade:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b08      	cmp	r3, #8
 8007ae4:	d113      	bne.n	8007b0e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007ae6:	f7ff ff45 	bl	8007974 <LL_RCC_PLL_GetDivider>
 8007aea:	4602      	mov	r2, r0
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	fbb3 f4f2 	udiv	r4, r3, r2
 8007af2:	f7ff ff23 	bl	800793c <LL_RCC_PLL_GetN>
 8007af6:	4603      	mov	r3, r0
 8007af8:	fb03 f404 	mul.w	r4, r3, r4
 8007afc:	f7ff ff2c 	bl	8007958 <LL_RCC_PLL_GetP>
 8007b00:	4603      	mov	r3, r0
 8007b02:	0c1b      	lsrs	r3, r3, #16
 8007b04:	3301      	adds	r3, #1
 8007b06:	005b      	lsls	r3, r3, #1
 8007b08:	fbb4 f3f3 	udiv	r3, r4, r3
 8007b0c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8007b0e:	693b      	ldr	r3, [r7, #16]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	371c      	adds	r7, #28
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd90      	pop	{r4, r7, pc}
 8007b18:	00f42400 	.word	0x00f42400

08007b1c <LL_SPI_IsEnabled>:
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b2c:	2b40      	cmp	r3, #64	@ 0x40
 8007b2e:	d101      	bne.n	8007b34 <LL_SPI_IsEnabled+0x18>
 8007b30:	2301      	movs	r3, #1
 8007b32:	e000      	b.n	8007b36 <LL_SPI_IsEnabled+0x1a>
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <LL_SPI_SetCRCPolynomial>:
{
 8007b42:	b480      	push	{r7}
 8007b44:	b083      	sub	sp, #12
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	461a      	mov	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	611a      	str	r2, [r3, #16]
}
 8007b56:	bf00      	nop
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f7ff ffd3 	bl	8007b1c <LL_SPI_IsEnabled>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d139      	bne.n	8007bf0 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b84:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	6811      	ldr	r1, [r2, #0]
 8007b8c:	683a      	ldr	r2, [r7, #0]
 8007b8e:	6852      	ldr	r2, [r2, #4]
 8007b90:	4311      	orrs	r1, r2
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	6892      	ldr	r2, [r2, #8]
 8007b96:	4311      	orrs	r1, r2
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	68d2      	ldr	r2, [r2, #12]
 8007b9c:	4311      	orrs	r1, r2
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	6912      	ldr	r2, [r2, #16]
 8007ba2:	4311      	orrs	r1, r2
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	6952      	ldr	r2, [r2, #20]
 8007ba8:	4311      	orrs	r1, r2
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	6992      	ldr	r2, [r2, #24]
 8007bae:	4311      	orrs	r1, r2
 8007bb0:	683a      	ldr	r2, [r7, #0]
 8007bb2:	69d2      	ldr	r2, [r2, #28]
 8007bb4:	4311      	orrs	r1, r2
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	6a12      	ldr	r2, [r2, #32]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	431a      	orrs	r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f023 0204 	bic.w	r2, r3, #4
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	0c1b      	lsrs	r3, r3, #16
 8007bd0:	431a      	orrs	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bde:	d105      	bne.n	8007bec <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be4:	4619      	mov	r1, r3
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7ff ffab 	bl	8007b42 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8007bec:	2300      	movs	r3, #0
 8007bee:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	61da      	str	r2, [r3, #28]
  return status;
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <LL_TIM_SetPrescaler>:
{
 8007c06:	b480      	push	{r7}
 8007c08:	b083      	sub	sp, #12
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007c16:	bf00      	nop
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <LL_TIM_SetAutoReload>:
{
 8007c22:	b480      	push	{r7}
 8007c24:	b083      	sub	sp, #12
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	683a      	ldr	r2, [r7, #0]
 8007c30:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007c32:	bf00      	nop
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <LL_TIM_SetRepetitionCounter>:
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b083      	sub	sp, #12
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007c4e:	bf00      	nop
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <LL_TIM_OC_SetCompareCH1>:
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b083      	sub	sp, #12
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8007c6a:	bf00      	nop
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <LL_TIM_OC_SetCompareCH2>:
{
 8007c76:	b480      	push	{r7}
 8007c78:	b083      	sub	sp, #12
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007c86:	bf00      	nop
 8007c88:	370c      	adds	r7, #12
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <LL_TIM_OC_SetCompareCH3>:
{
 8007c92:	b480      	push	{r7}
 8007c94:	b083      	sub	sp, #12
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8007ca2:	bf00      	nop
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <LL_TIM_OC_SetCompareCH4>:
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b083      	sub	sp, #12
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <LL_TIM_GenerateEvent_UPDATE>:
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b083      	sub	sp, #12
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	f043 0201 	orr.w	r2, r3, #1
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	615a      	str	r2, [r3, #20]
}
 8007cde:	bf00      	nop
 8007ce0:	370c      	adds	r7, #12
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
	...

08007cec <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a3d      	ldr	r2, [pc, #244]	@ (8007df4 <LL_TIM_Init+0x108>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d013      	beq.n	8007d2c <LL_TIM_Init+0x40>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d0a:	d00f      	beq.n	8007d2c <LL_TIM_Init+0x40>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a3a      	ldr	r2, [pc, #232]	@ (8007df8 <LL_TIM_Init+0x10c>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d00b      	beq.n	8007d2c <LL_TIM_Init+0x40>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a39      	ldr	r2, [pc, #228]	@ (8007dfc <LL_TIM_Init+0x110>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d007      	beq.n	8007d2c <LL_TIM_Init+0x40>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a38      	ldr	r2, [pc, #224]	@ (8007e00 <LL_TIM_Init+0x114>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d003      	beq.n	8007d2c <LL_TIM_Init+0x40>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a37      	ldr	r2, [pc, #220]	@ (8007e04 <LL_TIM_Init+0x118>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d106      	bne.n	8007d3a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a2d      	ldr	r2, [pc, #180]	@ (8007df4 <LL_TIM_Init+0x108>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d02b      	beq.n	8007d9a <LL_TIM_Init+0xae>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d48:	d027      	beq.n	8007d9a <LL_TIM_Init+0xae>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a2a      	ldr	r2, [pc, #168]	@ (8007df8 <LL_TIM_Init+0x10c>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d023      	beq.n	8007d9a <LL_TIM_Init+0xae>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a29      	ldr	r2, [pc, #164]	@ (8007dfc <LL_TIM_Init+0x110>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d01f      	beq.n	8007d9a <LL_TIM_Init+0xae>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a28      	ldr	r2, [pc, #160]	@ (8007e00 <LL_TIM_Init+0x114>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d01b      	beq.n	8007d9a <LL_TIM_Init+0xae>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a27      	ldr	r2, [pc, #156]	@ (8007e04 <LL_TIM_Init+0x118>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d017      	beq.n	8007d9a <LL_TIM_Init+0xae>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a26      	ldr	r2, [pc, #152]	@ (8007e08 <LL_TIM_Init+0x11c>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d013      	beq.n	8007d9a <LL_TIM_Init+0xae>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a25      	ldr	r2, [pc, #148]	@ (8007e0c <LL_TIM_Init+0x120>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d00f      	beq.n	8007d9a <LL_TIM_Init+0xae>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a24      	ldr	r2, [pc, #144]	@ (8007e10 <LL_TIM_Init+0x124>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d00b      	beq.n	8007d9a <LL_TIM_Init+0xae>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a23      	ldr	r2, [pc, #140]	@ (8007e14 <LL_TIM_Init+0x128>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d007      	beq.n	8007d9a <LL_TIM_Init+0xae>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a22      	ldr	r2, [pc, #136]	@ (8007e18 <LL_TIM_Init+0x12c>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d003      	beq.n	8007d9a <LL_TIM_Init+0xae>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a21      	ldr	r2, [pc, #132]	@ (8007e1c <LL_TIM_Init+0x130>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d106      	bne.n	8007da8 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	4619      	mov	r1, r3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f7ff ff34 	bl	8007c22 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f7ff ff20 	bl	8007c06 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8007df4 <LL_TIM_Init+0x108>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d003      	beq.n	8007dd6 <LL_TIM_Init+0xea>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8007e04 <LL_TIM_Init+0x118>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d105      	bne.n	8007de2 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f7ff ff2e 	bl	8007c3e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7ff ff71 	bl	8007cca <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	40010000 	.word	0x40010000
 8007df8:	40000400 	.word	0x40000400
 8007dfc:	40000800 	.word	0x40000800
 8007e00:	40000c00 	.word	0x40000c00
 8007e04:	40010400 	.word	0x40010400
 8007e08:	40014000 	.word	0x40014000
 8007e0c:	40014400 	.word	0x40014400
 8007e10:	40014800 	.word	0x40014800
 8007e14:	40001800 	.word	0x40001800
 8007e18:	40001c00 	.word	0x40001c00
 8007e1c:	40002000 	.word	0x40002000

08007e20 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e36:	d027      	beq.n	8007e88 <LL_TIM_OC_Init+0x68>
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e3e:	d82a      	bhi.n	8007e96 <LL_TIM_OC_Init+0x76>
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e46:	d018      	beq.n	8007e7a <LL_TIM_OC_Init+0x5a>
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e4e:	d822      	bhi.n	8007e96 <LL_TIM_OC_Init+0x76>
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d003      	beq.n	8007e5e <LL_TIM_OC_Init+0x3e>
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	2b10      	cmp	r3, #16
 8007e5a:	d007      	beq.n	8007e6c <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8007e5c:	e01b      	b.n	8007e96 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f000 f861 	bl	8007f28 <OC1Config>
 8007e66:	4603      	mov	r3, r0
 8007e68:	75fb      	strb	r3, [r7, #23]
      break;
 8007e6a:	e015      	b.n	8007e98 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8007e6c:	6879      	ldr	r1, [r7, #4]
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 f8c6 	bl	8008000 <OC2Config>
 8007e74:	4603      	mov	r3, r0
 8007e76:	75fb      	strb	r3, [r7, #23]
      break;
 8007e78:	e00e      	b.n	8007e98 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8007e7a:	6879      	ldr	r1, [r7, #4]
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 f92f 	bl	80080e0 <OC3Config>
 8007e82:	4603      	mov	r3, r0
 8007e84:	75fb      	strb	r3, [r7, #23]
      break;
 8007e86:	e007      	b.n	8007e98 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8007e88:	6879      	ldr	r1, [r7, #4]
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f000 f998 	bl	80081c0 <OC4Config>
 8007e90:	4603      	mov	r3, r0
 8007e92:	75fb      	strb	r3, [r7, #23]
      break;
 8007e94:	e000      	b.n	8007e98 <LL_TIM_OC_Init+0x78>
      break;
 8007e96:	bf00      	nop
  }

  return result;
 8007e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3718      	adds	r7, #24
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b085      	sub	sp, #20
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	7b12      	ldrb	r2, [r2, #12]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	89d2      	ldrh	r2, [r2, #14]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
	...

08007f28 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	f023 0201 	bic.w	r2, r3, #1
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f023 0303 	bic.w	r3, r3, #3
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f023 0202 	bic.w	r2, r3, #2
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f023 0201 	bic.w	r2, r3, #1
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a1c      	ldr	r2, [pc, #112]	@ (8007ff8 <OC1Config+0xd0>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d003      	beq.n	8007f92 <OC1Config+0x6a>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8007ffc <OC1Config+0xd4>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d11e      	bne.n	8007fd0 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	f023 0208 	bic.w	r2, r3, #8
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	695b      	ldr	r3, [r3, #20]
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f023 0204 	bic.w	r2, r3, #4
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	005b      	lsls	r3, r3, #1
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f7ff fe39 	bl	8007c5a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3718      	adds	r7, #24
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	40010000 	.word	0x40010000
 8007ffc:	40010400 	.word	0x40010400

08008000 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	f023 0210 	bic.w	r2, r3, #16
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800802e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	021b      	lsls	r3, r3, #8
 800803c:	4313      	orrs	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	f023 0220 	bic.w	r2, r3, #32
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	011b      	lsls	r3, r3, #4
 800804c:	4313      	orrs	r3, r2
 800804e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	f023 0210 	bic.w	r2, r3, #16
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	011b      	lsls	r3, r3, #4
 800805c:	4313      	orrs	r3, r2
 800805e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a1d      	ldr	r2, [pc, #116]	@ (80080d8 <OC2Config+0xd8>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d003      	beq.n	8008070 <OC2Config+0x70>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a1c      	ldr	r2, [pc, #112]	@ (80080dc <OC2Config+0xdc>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d11f      	bne.n	80080b0 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	019b      	lsls	r3, r3, #6
 800807c:	4313      	orrs	r3, r2
 800807e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	019b      	lsls	r3, r3, #6
 800808c:	4313      	orrs	r3, r2
 800808e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	4313      	orrs	r3, r2
 800809e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	00db      	lsls	r3, r3, #3
 80080ac:	4313      	orrs	r3, r2
 80080ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7ff fdd7 	bl	8007c76 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3718      	adds	r7, #24
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	40010000 	.word	0x40010000
 80080dc:	40010400 	.word	0x40010400

080080e0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f023 0303 	bic.w	r3, r3, #3
 800810e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4313      	orrs	r3, r2
 800811c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	021b      	lsls	r3, r3, #8
 800812a:	4313      	orrs	r3, r2
 800812c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	021b      	lsls	r3, r3, #8
 800813a:	4313      	orrs	r3, r2
 800813c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a1d      	ldr	r2, [pc, #116]	@ (80081b8 <OC3Config+0xd8>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d003      	beq.n	800814e <OC3Config+0x6e>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a1c      	ldr	r2, [pc, #112]	@ (80081bc <OC3Config+0xdc>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d11f      	bne.n	800818e <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	029b      	lsls	r3, r3, #10
 800815a:	4313      	orrs	r3, r2
 800815c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	029b      	lsls	r3, r3, #10
 800816a:	4313      	orrs	r3, r2
 800816c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	011b      	lsls	r3, r3, #4
 800817a:	4313      	orrs	r3, r2
 800817c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	69db      	ldr	r3, [r3, #28]
 8008188:	015b      	lsls	r3, r3, #5
 800818a:	4313      	orrs	r3, r2
 800818c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	4619      	mov	r1, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff fd76 	bl	8007c92 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3718      	adds	r7, #24
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	40010000 	.word	0x40010000
 80081bc:	40010400 	.word	0x40010400

080081c0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	69db      	ldr	r3, [r3, #28]
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	021b      	lsls	r3, r3, #8
 80081fc:	4313      	orrs	r3, r2
 80081fe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	031b      	lsls	r3, r3, #12
 800820c:	4313      	orrs	r3, r2
 800820e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	031b      	lsls	r3, r3, #12
 800821c:	4313      	orrs	r3, r2
 800821e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a11      	ldr	r2, [pc, #68]	@ (8008268 <OC4Config+0xa8>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d003      	beq.n	8008230 <OC4Config+0x70>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a10      	ldr	r2, [pc, #64]	@ (800826c <OC4Config+0xac>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d107      	bne.n	8008240 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	019b      	lsls	r3, r3, #6
 800823c:	4313      	orrs	r3, r2
 800823e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7ff fd2b 	bl	8007cae <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3718      	adds	r7, #24
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	40010000 	.word	0x40010000
 800826c:	40010400 	.word	0x40010400

08008270 <LL_USART_IsEnabled>:
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008280:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008284:	bf0c      	ite	eq
 8008286:	2301      	moveq	r3, #1
 8008288:	2300      	movne	r3, #0
 800828a:	b2db      	uxtb	r3, r3
}
 800828c:	4618      	mov	r0, r3
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <LL_USART_SetStopBitsLength>:
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	431a      	orrs	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	611a      	str	r2, [r3, #16]
}
 80082b2:	bf00      	nop
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <LL_USART_SetHWFlowCtrl>:
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	695b      	ldr	r3, [r3, #20]
 80082cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	431a      	orrs	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	615a      	str	r2, [r3, #20]
}
 80082d8:	bf00      	nop
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <LL_USART_SetBaudRate>:
{
 80082e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082e8:	b0c0      	sub	sp, #256	@ 0x100
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80082f0:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80082f4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80082f8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80082fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008300:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008304:	f040 810c 	bne.w	8008520 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8008308:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800830c:	2200      	movs	r2, #0
 800830e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008312:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008316:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800831a:	4622      	mov	r2, r4
 800831c:	462b      	mov	r3, r5
 800831e:	1891      	adds	r1, r2, r2
 8008320:	6639      	str	r1, [r7, #96]	@ 0x60
 8008322:	415b      	adcs	r3, r3
 8008324:	667b      	str	r3, [r7, #100]	@ 0x64
 8008326:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800832a:	4621      	mov	r1, r4
 800832c:	eb12 0801 	adds.w	r8, r2, r1
 8008330:	4629      	mov	r1, r5
 8008332:	eb43 0901 	adc.w	r9, r3, r1
 8008336:	f04f 0200 	mov.w	r2, #0
 800833a:	f04f 0300 	mov.w	r3, #0
 800833e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008342:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008346:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800834a:	4690      	mov	r8, r2
 800834c:	4699      	mov	r9, r3
 800834e:	4623      	mov	r3, r4
 8008350:	eb18 0303 	adds.w	r3, r8, r3
 8008354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008358:	462b      	mov	r3, r5
 800835a:	eb49 0303 	adc.w	r3, r9, r3
 800835e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008362:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008366:	2200      	movs	r2, #0
 8008368:	469a      	mov	sl, r3
 800836a:	4693      	mov	fp, r2
 800836c:	eb1a 030a 	adds.w	r3, sl, sl
 8008370:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008372:	eb4b 030b 	adc.w	r3, fp, fp
 8008376:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008378:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800837c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008380:	f7f8 fc32 	bl	8000be8 <__aeabi_uldivmod>
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	4b64      	ldr	r3, [pc, #400]	@ (800851c <LL_USART_SetBaudRate+0x238>)
 800838a:	fba3 2302 	umull	r2, r3, r3, r2
 800838e:	095b      	lsrs	r3, r3, #5
 8008390:	b29b      	uxth	r3, r3
 8008392:	011b      	lsls	r3, r3, #4
 8008394:	b29c      	uxth	r4, r3
 8008396:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800839a:	2200      	movs	r2, #0
 800839c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80083a0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80083a4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80083a8:	4642      	mov	r2, r8
 80083aa:	464b      	mov	r3, r9
 80083ac:	1891      	adds	r1, r2, r2
 80083ae:	6539      	str	r1, [r7, #80]	@ 0x50
 80083b0:	415b      	adcs	r3, r3
 80083b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80083b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80083b8:	4641      	mov	r1, r8
 80083ba:	1851      	adds	r1, r2, r1
 80083bc:	64b9      	str	r1, [r7, #72]	@ 0x48
 80083be:	4649      	mov	r1, r9
 80083c0:	414b      	adcs	r3, r1
 80083c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083c4:	f04f 0200 	mov.w	r2, #0
 80083c8:	f04f 0300 	mov.w	r3, #0
 80083cc:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 80083d0:	4659      	mov	r1, fp
 80083d2:	00cb      	lsls	r3, r1, #3
 80083d4:	4651      	mov	r1, sl
 80083d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083da:	4651      	mov	r1, sl
 80083dc:	00ca      	lsls	r2, r1, #3
 80083de:	4610      	mov	r0, r2
 80083e0:	4619      	mov	r1, r3
 80083e2:	4603      	mov	r3, r0
 80083e4:	4642      	mov	r2, r8
 80083e6:	189b      	adds	r3, r3, r2
 80083e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80083ec:	464b      	mov	r3, r9
 80083ee:	460a      	mov	r2, r1
 80083f0:	eb42 0303 	adc.w	r3, r2, r3
 80083f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80083f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80083fc:	2200      	movs	r2, #0
 80083fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008402:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8008406:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800840a:	460b      	mov	r3, r1
 800840c:	18db      	adds	r3, r3, r3
 800840e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008410:	4613      	mov	r3, r2
 8008412:	eb42 0303 	adc.w	r3, r2, r3
 8008416:	647b      	str	r3, [r7, #68]	@ 0x44
 8008418:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800841c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8008420:	f7f8 fbe2 	bl	8000be8 <__aeabi_uldivmod>
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	4611      	mov	r1, r2
 800842a:	4b3c      	ldr	r3, [pc, #240]	@ (800851c <LL_USART_SetBaudRate+0x238>)
 800842c:	fba3 2301 	umull	r2, r3, r3, r1
 8008430:	095b      	lsrs	r3, r3, #5
 8008432:	2264      	movs	r2, #100	@ 0x64
 8008434:	fb02 f303 	mul.w	r3, r2, r3
 8008438:	1acb      	subs	r3, r1, r3
 800843a:	00db      	lsls	r3, r3, #3
 800843c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008440:	4b36      	ldr	r3, [pc, #216]	@ (800851c <LL_USART_SetBaudRate+0x238>)
 8008442:	fba3 2302 	umull	r2, r3, r3, r2
 8008446:	095b      	lsrs	r3, r3, #5
 8008448:	b29b      	uxth	r3, r3
 800844a:	005b      	lsls	r3, r3, #1
 800844c:	b29b      	uxth	r3, r3
 800844e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008452:	b29b      	uxth	r3, r3
 8008454:	4423      	add	r3, r4
 8008456:	b29c      	uxth	r4, r3
 8008458:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800845c:	2200      	movs	r2, #0
 800845e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008462:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008466:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800846a:	4642      	mov	r2, r8
 800846c:	464b      	mov	r3, r9
 800846e:	1891      	adds	r1, r2, r2
 8008470:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008472:	415b      	adcs	r3, r3
 8008474:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008476:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800847a:	4641      	mov	r1, r8
 800847c:	1851      	adds	r1, r2, r1
 800847e:	6339      	str	r1, [r7, #48]	@ 0x30
 8008480:	4649      	mov	r1, r9
 8008482:	414b      	adcs	r3, r1
 8008484:	637b      	str	r3, [r7, #52]	@ 0x34
 8008486:	f04f 0200 	mov.w	r2, #0
 800848a:	f04f 0300 	mov.w	r3, #0
 800848e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008492:	4659      	mov	r1, fp
 8008494:	00cb      	lsls	r3, r1, #3
 8008496:	4651      	mov	r1, sl
 8008498:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800849c:	4651      	mov	r1, sl
 800849e:	00ca      	lsls	r2, r1, #3
 80084a0:	4610      	mov	r0, r2
 80084a2:	4619      	mov	r1, r3
 80084a4:	4603      	mov	r3, r0
 80084a6:	4642      	mov	r2, r8
 80084a8:	189b      	adds	r3, r3, r2
 80084aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80084ae:	464b      	mov	r3, r9
 80084b0:	460a      	mov	r2, r1
 80084b2:	eb42 0303 	adc.w	r3, r2, r3
 80084b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80084ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80084be:	2200      	movs	r2, #0
 80084c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80084c4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80084c8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80084cc:	460b      	mov	r3, r1
 80084ce:	18db      	adds	r3, r3, r3
 80084d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80084d2:	4613      	mov	r3, r2
 80084d4:	eb42 0303 	adc.w	r3, r2, r3
 80084d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80084de:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80084e2:	f7f8 fb81 	bl	8000be8 <__aeabi_uldivmod>
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	4b0c      	ldr	r3, [pc, #48]	@ (800851c <LL_USART_SetBaudRate+0x238>)
 80084ec:	fba3 1302 	umull	r1, r3, r3, r2
 80084f0:	095b      	lsrs	r3, r3, #5
 80084f2:	2164      	movs	r1, #100	@ 0x64
 80084f4:	fb01 f303 	mul.w	r3, r1, r3
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	00db      	lsls	r3, r3, #3
 80084fc:	3332      	adds	r3, #50	@ 0x32
 80084fe:	4a07      	ldr	r2, [pc, #28]	@ (800851c <LL_USART_SetBaudRate+0x238>)
 8008500:	fba2 2303 	umull	r2, r3, r2, r3
 8008504:	095b      	lsrs	r3, r3, #5
 8008506:	b29b      	uxth	r3, r3
 8008508:	f003 0307 	and.w	r3, r3, #7
 800850c:	b29b      	uxth	r3, r3
 800850e:	4423      	add	r3, r4
 8008510:	b29b      	uxth	r3, r3
 8008512:	461a      	mov	r2, r3
 8008514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008518:	609a      	str	r2, [r3, #8]
}
 800851a:	e108      	b.n	800872e <LL_USART_SetBaudRate+0x44a>
 800851c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8008520:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008524:	2200      	movs	r2, #0
 8008526:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800852a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800852e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8008532:	4642      	mov	r2, r8
 8008534:	464b      	mov	r3, r9
 8008536:	1891      	adds	r1, r2, r2
 8008538:	6239      	str	r1, [r7, #32]
 800853a:	415b      	adcs	r3, r3
 800853c:	627b      	str	r3, [r7, #36]	@ 0x24
 800853e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008542:	4641      	mov	r1, r8
 8008544:	1854      	adds	r4, r2, r1
 8008546:	4649      	mov	r1, r9
 8008548:	eb43 0501 	adc.w	r5, r3, r1
 800854c:	f04f 0200 	mov.w	r2, #0
 8008550:	f04f 0300 	mov.w	r3, #0
 8008554:	00eb      	lsls	r3, r5, #3
 8008556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800855a:	00e2      	lsls	r2, r4, #3
 800855c:	4614      	mov	r4, r2
 800855e:	461d      	mov	r5, r3
 8008560:	4643      	mov	r3, r8
 8008562:	18e3      	adds	r3, r4, r3
 8008564:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008568:	464b      	mov	r3, r9
 800856a:	eb45 0303 	adc.w	r3, r5, r3
 800856e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008572:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008576:	2200      	movs	r2, #0
 8008578:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800857c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8008580:	f04f 0200 	mov.w	r2, #0
 8008584:	f04f 0300 	mov.w	r3, #0
 8008588:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800858c:	4629      	mov	r1, r5
 800858e:	008b      	lsls	r3, r1, #2
 8008590:	4621      	mov	r1, r4
 8008592:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008596:	4621      	mov	r1, r4
 8008598:	008a      	lsls	r2, r1, #2
 800859a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800859e:	f7f8 fb23 	bl	8000be8 <__aeabi_uldivmod>
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	4b65      	ldr	r3, [pc, #404]	@ (800873c <LL_USART_SetBaudRate+0x458>)
 80085a8:	fba3 2302 	umull	r2, r3, r3, r2
 80085ac:	095b      	lsrs	r3, r3, #5
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	011b      	lsls	r3, r3, #4
 80085b2:	b29c      	uxth	r4, r3
 80085b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80085b8:	2200      	movs	r2, #0
 80085ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80085be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80085c2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80085c6:	4642      	mov	r2, r8
 80085c8:	464b      	mov	r3, r9
 80085ca:	1891      	adds	r1, r2, r2
 80085cc:	61b9      	str	r1, [r7, #24]
 80085ce:	415b      	adcs	r3, r3
 80085d0:	61fb      	str	r3, [r7, #28]
 80085d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085d6:	4641      	mov	r1, r8
 80085d8:	1851      	adds	r1, r2, r1
 80085da:	6139      	str	r1, [r7, #16]
 80085dc:	4649      	mov	r1, r9
 80085de:	414b      	adcs	r3, r1
 80085e0:	617b      	str	r3, [r7, #20]
 80085e2:	f04f 0200 	mov.w	r2, #0
 80085e6:	f04f 0300 	mov.w	r3, #0
 80085ea:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80085ee:	4659      	mov	r1, fp
 80085f0:	00cb      	lsls	r3, r1, #3
 80085f2:	4651      	mov	r1, sl
 80085f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085f8:	4651      	mov	r1, sl
 80085fa:	00ca      	lsls	r2, r1, #3
 80085fc:	4610      	mov	r0, r2
 80085fe:	4619      	mov	r1, r3
 8008600:	4603      	mov	r3, r0
 8008602:	4642      	mov	r2, r8
 8008604:	189b      	adds	r3, r3, r2
 8008606:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800860a:	464b      	mov	r3, r9
 800860c:	460a      	mov	r2, r1
 800860e:	eb42 0303 	adc.w	r3, r2, r3
 8008612:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008616:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800861a:	2200      	movs	r2, #0
 800861c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008620:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8008624:	f04f 0200 	mov.w	r2, #0
 8008628:	f04f 0300 	mov.w	r3, #0
 800862c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8008630:	4649      	mov	r1, r9
 8008632:	008b      	lsls	r3, r1, #2
 8008634:	4641      	mov	r1, r8
 8008636:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800863a:	4641      	mov	r1, r8
 800863c:	008a      	lsls	r2, r1, #2
 800863e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8008642:	f7f8 fad1 	bl	8000be8 <__aeabi_uldivmod>
 8008646:	4602      	mov	r2, r0
 8008648:	460b      	mov	r3, r1
 800864a:	4611      	mov	r1, r2
 800864c:	4b3b      	ldr	r3, [pc, #236]	@ (800873c <LL_USART_SetBaudRate+0x458>)
 800864e:	fba3 2301 	umull	r2, r3, r3, r1
 8008652:	095b      	lsrs	r3, r3, #5
 8008654:	2264      	movs	r2, #100	@ 0x64
 8008656:	fb02 f303 	mul.w	r3, r2, r3
 800865a:	1acb      	subs	r3, r1, r3
 800865c:	011b      	lsls	r3, r3, #4
 800865e:	3332      	adds	r3, #50	@ 0x32
 8008660:	4a36      	ldr	r2, [pc, #216]	@ (800873c <LL_USART_SetBaudRate+0x458>)
 8008662:	fba2 2303 	umull	r2, r3, r2, r3
 8008666:	095b      	lsrs	r3, r3, #5
 8008668:	b29b      	uxth	r3, r3
 800866a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800866e:	b29b      	uxth	r3, r3
 8008670:	4423      	add	r3, r4
 8008672:	b29c      	uxth	r4, r3
 8008674:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008678:	2200      	movs	r2, #0
 800867a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800867c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800867e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008682:	4642      	mov	r2, r8
 8008684:	464b      	mov	r3, r9
 8008686:	1891      	adds	r1, r2, r2
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	415b      	adcs	r3, r3
 800868c:	60fb      	str	r3, [r7, #12]
 800868e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008692:	4641      	mov	r1, r8
 8008694:	1851      	adds	r1, r2, r1
 8008696:	6039      	str	r1, [r7, #0]
 8008698:	4649      	mov	r1, r9
 800869a:	414b      	adcs	r3, r1
 800869c:	607b      	str	r3, [r7, #4]
 800869e:	f04f 0200 	mov.w	r2, #0
 80086a2:	f04f 0300 	mov.w	r3, #0
 80086a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80086aa:	4659      	mov	r1, fp
 80086ac:	00cb      	lsls	r3, r1, #3
 80086ae:	4651      	mov	r1, sl
 80086b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086b4:	4651      	mov	r1, sl
 80086b6:	00ca      	lsls	r2, r1, #3
 80086b8:	4610      	mov	r0, r2
 80086ba:	4619      	mov	r1, r3
 80086bc:	4603      	mov	r3, r0
 80086be:	4642      	mov	r2, r8
 80086c0:	189b      	adds	r3, r3, r2
 80086c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80086c4:	464b      	mov	r3, r9
 80086c6:	460a      	mov	r2, r1
 80086c8:	eb42 0303 	adc.w	r3, r2, r3
 80086cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80086ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80086d2:	2200      	movs	r2, #0
 80086d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80086d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80086d8:	f04f 0200 	mov.w	r2, #0
 80086dc:	f04f 0300 	mov.w	r3, #0
 80086e0:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80086e4:	4649      	mov	r1, r9
 80086e6:	008b      	lsls	r3, r1, #2
 80086e8:	4641      	mov	r1, r8
 80086ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086ee:	4641      	mov	r1, r8
 80086f0:	008a      	lsls	r2, r1, #2
 80086f2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80086f6:	f7f8 fa77 	bl	8000be8 <__aeabi_uldivmod>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	4b0f      	ldr	r3, [pc, #60]	@ (800873c <LL_USART_SetBaudRate+0x458>)
 8008700:	fba3 1302 	umull	r1, r3, r3, r2
 8008704:	095b      	lsrs	r3, r3, #5
 8008706:	2164      	movs	r1, #100	@ 0x64
 8008708:	fb01 f303 	mul.w	r3, r1, r3
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	011b      	lsls	r3, r3, #4
 8008710:	3332      	adds	r3, #50	@ 0x32
 8008712:	4a0a      	ldr	r2, [pc, #40]	@ (800873c <LL_USART_SetBaudRate+0x458>)
 8008714:	fba2 2303 	umull	r2, r3, r2, r3
 8008718:	095b      	lsrs	r3, r3, #5
 800871a:	b29b      	uxth	r3, r3
 800871c:	f003 030f 	and.w	r3, r3, #15
 8008720:	b29b      	uxth	r3, r3
 8008722:	4423      	add	r3, r4
 8008724:	b29b      	uxth	r3, r3
 8008726:	461a      	mov	r2, r3
 8008728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800872c:	609a      	str	r2, [r3, #8]
}
 800872e:	bf00      	nop
 8008730:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008734:	46bd      	mov	sp, r7
 8008736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800873a:	bf00      	nop
 800873c:	51eb851f 	.word	0x51eb851f

08008740 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b088      	sub	sp, #32
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800874e:	2300      	movs	r3, #0
 8008750:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7ff fd8c 	bl	8008270 <LL_USART_IsEnabled>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d15e      	bne.n	800881c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8008766:	f023 030c 	bic.w	r3, r3, #12
 800876a:	683a      	ldr	r2, [r7, #0]
 800876c:	6851      	ldr	r1, [r2, #4]
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	68d2      	ldr	r2, [r2, #12]
 8008772:	4311      	orrs	r1, r2
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	6912      	ldr	r2, [r2, #16]
 8008778:	4311      	orrs	r1, r2
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	6992      	ldr	r2, [r2, #24]
 800877e:	430a      	orrs	r2, r1
 8008780:	431a      	orrs	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7ff fd83 	bl	8008298 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	695b      	ldr	r3, [r3, #20]
 8008796:	4619      	mov	r1, r3
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7ff fd90 	bl	80082be <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800879e:	f107 0308 	add.w	r3, r7, #8
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7ff f8f4 	bl	8007990 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a1f      	ldr	r2, [pc, #124]	@ (8008828 <LL_USART_Init+0xe8>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d102      	bne.n	80087b6 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	61bb      	str	r3, [r7, #24]
 80087b4:	e021      	b.n	80087fa <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a1c      	ldr	r2, [pc, #112]	@ (800882c <LL_USART_Init+0xec>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d102      	bne.n	80087c4 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	61bb      	str	r3, [r7, #24]
 80087c2:	e01a      	b.n	80087fa <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a1a      	ldr	r2, [pc, #104]	@ (8008830 <LL_USART_Init+0xf0>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d102      	bne.n	80087d2 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	61bb      	str	r3, [r7, #24]
 80087d0:	e013      	b.n	80087fa <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a17      	ldr	r2, [pc, #92]	@ (8008834 <LL_USART_Init+0xf4>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d102      	bne.n	80087e0 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	61bb      	str	r3, [r7, #24]
 80087de:	e00c      	b.n	80087fa <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a15      	ldr	r2, [pc, #84]	@ (8008838 <LL_USART_Init+0xf8>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d102      	bne.n	80087ee <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	61bb      	str	r3, [r7, #24]
 80087ec:	e005      	b.n	80087fa <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a12      	ldr	r2, [pc, #72]	@ (800883c <LL_USART_Init+0xfc>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d101      	bne.n	80087fa <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00d      	beq.n	800881c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d009      	beq.n	800881c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8008808:	2300      	movs	r3, #0
 800880a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8008814:	69b9      	ldr	r1, [r7, #24]
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f7ff fd64 	bl	80082e4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800881c:	7ffb      	ldrb	r3, [r7, #31]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3720      	adds	r7, #32
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	40011000 	.word	0x40011000
 800882c:	40004400 	.word	0x40004400
 8008830:	40004800 	.word	0x40004800
 8008834:	40011400 	.word	0x40011400
 8008838:	40004c00 	.word	0x40004c00
 800883c:	40005000 	.word	0x40005000

08008840 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008840:	b084      	sub	sp, #16
 8008842:	b580      	push	{r7, lr}
 8008844:	b084      	sub	sp, #16
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	f107 001c 	add.w	r0, r7, #28
 800884e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008852:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008856:	2b01      	cmp	r3, #1
 8008858:	d123      	bne.n	80088a2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800885e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800886e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008882:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008886:	2b01      	cmp	r3, #1
 8008888:	d105      	bne.n	8008896 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f001 fae8 	bl	8009e6c <USB_CoreReset>
 800889c:	4603      	mov	r3, r0
 800889e:	73fb      	strb	r3, [r7, #15]
 80088a0:	e01b      	b.n	80088da <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f001 fadc 	bl	8009e6c <USB_CoreReset>
 80088b4:	4603      	mov	r3, r0
 80088b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80088b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d106      	bne.n	80088ce <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80088cc:	e005      	b.n	80088da <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80088da:	7fbb      	ldrb	r3, [r7, #30]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d10b      	bne.n	80088f8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f043 0206 	orr.w	r2, r3, #6
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	f043 0220 	orr.w	r2, r3, #32
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008904:	b004      	add	sp, #16
 8008906:	4770      	bx	lr

08008908 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008908:	b480      	push	{r7}
 800890a:	b087      	sub	sp, #28
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	4613      	mov	r3, r2
 8008914:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008916:	79fb      	ldrb	r3, [r7, #7]
 8008918:	2b02      	cmp	r3, #2
 800891a:	d165      	bne.n	80089e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	4a41      	ldr	r2, [pc, #260]	@ (8008a24 <USB_SetTurnaroundTime+0x11c>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d906      	bls.n	8008932 <USB_SetTurnaroundTime+0x2a>
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	4a40      	ldr	r2, [pc, #256]	@ (8008a28 <USB_SetTurnaroundTime+0x120>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d202      	bcs.n	8008932 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800892c:	230f      	movs	r3, #15
 800892e:	617b      	str	r3, [r7, #20]
 8008930:	e062      	b.n	80089f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	4a3c      	ldr	r2, [pc, #240]	@ (8008a28 <USB_SetTurnaroundTime+0x120>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d306      	bcc.n	8008948 <USB_SetTurnaroundTime+0x40>
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	4a3b      	ldr	r2, [pc, #236]	@ (8008a2c <USB_SetTurnaroundTime+0x124>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d202      	bcs.n	8008948 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008942:	230e      	movs	r3, #14
 8008944:	617b      	str	r3, [r7, #20]
 8008946:	e057      	b.n	80089f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	4a38      	ldr	r2, [pc, #224]	@ (8008a2c <USB_SetTurnaroundTime+0x124>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d306      	bcc.n	800895e <USB_SetTurnaroundTime+0x56>
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	4a37      	ldr	r2, [pc, #220]	@ (8008a30 <USB_SetTurnaroundTime+0x128>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d202      	bcs.n	800895e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008958:	230d      	movs	r3, #13
 800895a:	617b      	str	r3, [r7, #20]
 800895c:	e04c      	b.n	80089f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	4a33      	ldr	r2, [pc, #204]	@ (8008a30 <USB_SetTurnaroundTime+0x128>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d306      	bcc.n	8008974 <USB_SetTurnaroundTime+0x6c>
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	4a32      	ldr	r2, [pc, #200]	@ (8008a34 <USB_SetTurnaroundTime+0x12c>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d802      	bhi.n	8008974 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800896e:	230c      	movs	r3, #12
 8008970:	617b      	str	r3, [r7, #20]
 8008972:	e041      	b.n	80089f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	4a2f      	ldr	r2, [pc, #188]	@ (8008a34 <USB_SetTurnaroundTime+0x12c>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d906      	bls.n	800898a <USB_SetTurnaroundTime+0x82>
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	4a2e      	ldr	r2, [pc, #184]	@ (8008a38 <USB_SetTurnaroundTime+0x130>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d802      	bhi.n	800898a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008984:	230b      	movs	r3, #11
 8008986:	617b      	str	r3, [r7, #20]
 8008988:	e036      	b.n	80089f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	4a2a      	ldr	r2, [pc, #168]	@ (8008a38 <USB_SetTurnaroundTime+0x130>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d906      	bls.n	80089a0 <USB_SetTurnaroundTime+0x98>
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	4a29      	ldr	r2, [pc, #164]	@ (8008a3c <USB_SetTurnaroundTime+0x134>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d802      	bhi.n	80089a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800899a:	230a      	movs	r3, #10
 800899c:	617b      	str	r3, [r7, #20]
 800899e:	e02b      	b.n	80089f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	4a26      	ldr	r2, [pc, #152]	@ (8008a3c <USB_SetTurnaroundTime+0x134>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d906      	bls.n	80089b6 <USB_SetTurnaroundTime+0xae>
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	4a25      	ldr	r2, [pc, #148]	@ (8008a40 <USB_SetTurnaroundTime+0x138>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d202      	bcs.n	80089b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80089b0:	2309      	movs	r3, #9
 80089b2:	617b      	str	r3, [r7, #20]
 80089b4:	e020      	b.n	80089f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	4a21      	ldr	r2, [pc, #132]	@ (8008a40 <USB_SetTurnaroundTime+0x138>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d306      	bcc.n	80089cc <USB_SetTurnaroundTime+0xc4>
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	4a20      	ldr	r2, [pc, #128]	@ (8008a44 <USB_SetTurnaroundTime+0x13c>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d802      	bhi.n	80089cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80089c6:	2308      	movs	r3, #8
 80089c8:	617b      	str	r3, [r7, #20]
 80089ca:	e015      	b.n	80089f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	4a1d      	ldr	r2, [pc, #116]	@ (8008a44 <USB_SetTurnaroundTime+0x13c>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d906      	bls.n	80089e2 <USB_SetTurnaroundTime+0xda>
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	4a1c      	ldr	r2, [pc, #112]	@ (8008a48 <USB_SetTurnaroundTime+0x140>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d202      	bcs.n	80089e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80089dc:	2307      	movs	r3, #7
 80089de:	617b      	str	r3, [r7, #20]
 80089e0:	e00a      	b.n	80089f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80089e2:	2306      	movs	r3, #6
 80089e4:	617b      	str	r3, [r7, #20]
 80089e6:	e007      	b.n	80089f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80089e8:	79fb      	ldrb	r3, [r7, #7]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d102      	bne.n	80089f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80089ee:	2309      	movs	r3, #9
 80089f0:	617b      	str	r3, [r7, #20]
 80089f2:	e001      	b.n	80089f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80089f4:	2309      	movs	r3, #9
 80089f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	68da      	ldr	r2, [r3, #12]
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	029b      	lsls	r3, r3, #10
 8008a0c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008a10:	431a      	orrs	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	371c      	adds	r7, #28
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr
 8008a24:	00d8acbf 	.word	0x00d8acbf
 8008a28:	00e4e1c0 	.word	0x00e4e1c0
 8008a2c:	00f42400 	.word	0x00f42400
 8008a30:	01067380 	.word	0x01067380
 8008a34:	011a499f 	.word	0x011a499f
 8008a38:	01312cff 	.word	0x01312cff
 8008a3c:	014ca43f 	.word	0x014ca43f
 8008a40:	016e3600 	.word	0x016e3600
 8008a44:	01a6ab1f 	.word	0x01a6ab1f
 8008a48:	01e84800 	.word	0x01e84800

08008a4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	f043 0201 	orr.w	r2, r3, #1
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b083      	sub	sp, #12
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	f023 0201 	bic.w	r2, r3, #1
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	460b      	mov	r3, r1
 8008a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008aac:	78fb      	ldrb	r3, [r7, #3]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d115      	bne.n	8008ade <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008abe:	200a      	movs	r0, #10
 8008ac0:	f7fc f9a4 	bl	8004e0c <HAL_Delay>
      ms += 10U;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	330a      	adds	r3, #10
 8008ac8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f001 f93f 	bl	8009d4e <USB_GetMode>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d01e      	beq.n	8008b14 <USB_SetCurrentMode+0x84>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2bc7      	cmp	r3, #199	@ 0xc7
 8008ada:	d9f0      	bls.n	8008abe <USB_SetCurrentMode+0x2e>
 8008adc:	e01a      	b.n	8008b14 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008ade:	78fb      	ldrb	r3, [r7, #3]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d115      	bne.n	8008b10 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008af0:	200a      	movs	r0, #10
 8008af2:	f7fc f98b 	bl	8004e0c <HAL_Delay>
      ms += 10U;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	330a      	adds	r3, #10
 8008afa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f001 f926 	bl	8009d4e <USB_GetMode>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d005      	beq.n	8008b14 <USB_SetCurrentMode+0x84>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2bc7      	cmp	r3, #199	@ 0xc7
 8008b0c:	d9f0      	bls.n	8008af0 <USB_SetCurrentMode+0x60>
 8008b0e:	e001      	b.n	8008b14 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e005      	b.n	8008b20 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2bc8      	cmp	r3, #200	@ 0xc8
 8008b18:	d101      	bne.n	8008b1e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e000      	b.n	8008b20 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b28:	b084      	sub	sp, #16
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b086      	sub	sp, #24
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008b36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b42:	2300      	movs	r3, #0
 8008b44:	613b      	str	r3, [r7, #16]
 8008b46:	e009      	b.n	8008b5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	3340      	adds	r3, #64	@ 0x40
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4413      	add	r3, r2
 8008b52:	2200      	movs	r2, #0
 8008b54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	613b      	str	r3, [r7, #16]
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	2b0e      	cmp	r3, #14
 8008b60:	d9f2      	bls.n	8008b48 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b62:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d11c      	bne.n	8008ba4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b78:	f043 0302 	orr.w	r3, r3, #2
 8008b7c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b82:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b8e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b9a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	639a      	str	r2, [r3, #56]	@ 0x38
 8008ba2:	e00b      	b.n	8008bbc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008bc8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d10d      	bne.n	8008bec <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d104      	bne.n	8008be2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008bd8:	2100      	movs	r1, #0
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 f968 	bl	8008eb0 <USB_SetDevSpeed>
 8008be0:	e008      	b.n	8008bf4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008be2:	2101      	movs	r1, #1
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 f963 	bl	8008eb0 <USB_SetDevSpeed>
 8008bea:	e003      	b.n	8008bf4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008bec:	2103      	movs	r1, #3
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f95e 	bl	8008eb0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008bf4:	2110      	movs	r1, #16
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f8fa 	bl	8008df0 <USB_FlushTxFifo>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d001      	beq.n	8008c06 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f924 	bl	8008e54 <USB_FlushRxFifo>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d001      	beq.n	8008c16 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	2300      	movs	r3, #0
 8008c20:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c28:	461a      	mov	r2, r3
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c34:	461a      	mov	r2, r3
 8008c36:	2300      	movs	r3, #0
 8008c38:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	613b      	str	r3, [r7, #16]
 8008c3e:	e043      	b.n	8008cc8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	015a      	lsls	r2, r3, #5
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	4413      	add	r3, r2
 8008c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c56:	d118      	bne.n	8008c8a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10a      	bne.n	8008c74 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	015a      	lsls	r2, r3, #5
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	4413      	add	r3, r2
 8008c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008c70:	6013      	str	r3, [r2, #0]
 8008c72:	e013      	b.n	8008c9c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	015a      	lsls	r2, r3, #5
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c80:	461a      	mov	r2, r3
 8008c82:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008c86:	6013      	str	r3, [r2, #0]
 8008c88:	e008      	b.n	8008c9c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	015a      	lsls	r2, r3, #5
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	4413      	add	r3, r2
 8008c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c96:	461a      	mov	r2, r3
 8008c98:	2300      	movs	r3, #0
 8008c9a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ca8:	461a      	mov	r2, r3
 8008caa:	2300      	movs	r3, #0
 8008cac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	015a      	lsls	r2, r3, #5
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cba:	461a      	mov	r2, r3
 8008cbc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008cc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	613b      	str	r3, [r7, #16]
 8008cc8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008ccc:	461a      	mov	r2, r3
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d3b5      	bcc.n	8008c40 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	613b      	str	r3, [r7, #16]
 8008cd8:	e043      	b.n	8008d62 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	015a      	lsls	r2, r3, #5
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008cec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cf0:	d118      	bne.n	8008d24 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d10a      	bne.n	8008d0e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	015a      	lsls	r2, r3, #5
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d04:	461a      	mov	r2, r3
 8008d06:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008d0a:	6013      	str	r3, [r2, #0]
 8008d0c:	e013      	b.n	8008d36 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	015a      	lsls	r2, r3, #5
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	4413      	add	r3, r2
 8008d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008d20:	6013      	str	r3, [r2, #0]
 8008d22:	e008      	b.n	8008d36 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	015a      	lsls	r2, r3, #5
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d30:	461a      	mov	r2, r3
 8008d32:	2300      	movs	r3, #0
 8008d34:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	015a      	lsls	r2, r3, #5
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d42:	461a      	mov	r2, r3
 8008d44:	2300      	movs	r3, #0
 8008d46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	015a      	lsls	r2, r3, #5
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4413      	add	r3, r2
 8008d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d54:	461a      	mov	r2, r3
 8008d56:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008d5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	613b      	str	r3, [r7, #16]
 8008d62:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d66:	461a      	mov	r2, r3
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d3b5      	bcc.n	8008cda <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d80:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008d8e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d105      	bne.n	8008da4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	699b      	ldr	r3, [r3, #24]
 8008d9c:	f043 0210 	orr.w	r2, r3, #16
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	699a      	ldr	r2, [r3, #24]
 8008da8:	4b10      	ldr	r3, [pc, #64]	@ (8008dec <USB_DevInit+0x2c4>)
 8008daa:	4313      	orrs	r3, r2
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008db0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d005      	beq.n	8008dc4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	f043 0208 	orr.w	r2, r3, #8
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008dc4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d107      	bne.n	8008ddc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008dd4:	f043 0304 	orr.w	r3, r3, #4
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3718      	adds	r7, #24
 8008de2:	46bd      	mov	sp, r7
 8008de4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008de8:	b004      	add	sp, #16
 8008dea:	4770      	bx	lr
 8008dec:	803c3800 	.word	0x803c3800

08008df0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	3301      	adds	r3, #1
 8008e02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e0a:	d901      	bls.n	8008e10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	e01b      	b.n	8008e48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	daf2      	bge.n	8008dfe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	019b      	lsls	r3, r3, #6
 8008e20:	f043 0220 	orr.w	r2, r3, #32
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e34:	d901      	bls.n	8008e3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e006      	b.n	8008e48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	f003 0320 	and.w	r3, r3, #32
 8008e42:	2b20      	cmp	r3, #32
 8008e44:	d0f0      	beq.n	8008e28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3714      	adds	r7, #20
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	3301      	adds	r3, #1
 8008e64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e6c:	d901      	bls.n	8008e72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	e018      	b.n	8008ea4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	daf2      	bge.n	8008e60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2210      	movs	r2, #16
 8008e82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	3301      	adds	r3, #1
 8008e88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e90:	d901      	bls.n	8008e96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008e92:	2303      	movs	r3, #3
 8008e94:	e006      	b.n	8008ea4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	f003 0310 	and.w	r3, r3, #16
 8008e9e:	2b10      	cmp	r3, #16
 8008ea0:	d0f0      	beq.n	8008e84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3714      	adds	r7, #20
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	78fb      	ldrb	r3, [r7, #3]
 8008eca:	68f9      	ldr	r1, [r7, #12]
 8008ecc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b087      	sub	sp, #28
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	f003 0306 	and.w	r3, r3, #6
 8008efa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d102      	bne.n	8008f08 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008f02:	2300      	movs	r3, #0
 8008f04:	75fb      	strb	r3, [r7, #23]
 8008f06:	e00a      	b.n	8008f1e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d002      	beq.n	8008f14 <USB_GetDevSpeed+0x32>
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2b06      	cmp	r3, #6
 8008f12:	d102      	bne.n	8008f1a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008f14:	2302      	movs	r3, #2
 8008f16:	75fb      	strb	r3, [r7, #23]
 8008f18:	e001      	b.n	8008f1e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008f1a:	230f      	movs	r3, #15
 8008f1c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	371c      	adds	r7, #28
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	785b      	ldrb	r3, [r3, #1]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d13a      	bne.n	8008fbe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f4e:	69da      	ldr	r2, [r3, #28]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	f003 030f 	and.w	r3, r3, #15
 8008f58:	2101      	movs	r1, #1
 8008f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	68f9      	ldr	r1, [r7, #12]
 8008f62:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f66:	4313      	orrs	r3, r2
 8008f68:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	015a      	lsls	r2, r3, #5
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	4413      	add	r3, r2
 8008f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d155      	bne.n	800902c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	015a      	lsls	r2, r3, #5
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	4413      	add	r3, r2
 8008f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	791b      	ldrb	r3, [r3, #4]
 8008f9a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f9c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	059b      	lsls	r3, r3, #22
 8008fa2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	68ba      	ldr	r2, [r7, #8]
 8008fa8:	0151      	lsls	r1, r2, #5
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	440a      	add	r2, r1
 8008fae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	e036      	b.n	800902c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fc4:	69da      	ldr	r2, [r3, #28]
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	f003 030f 	and.w	r3, r3, #15
 8008fce:	2101      	movs	r1, #1
 8008fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8008fd4:	041b      	lsls	r3, r3, #16
 8008fd6:	68f9      	ldr	r1, [r7, #12]
 8008fd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	015a      	lsls	r2, r3, #5
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d11a      	bne.n	800902c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	791b      	ldrb	r3, [r3, #4]
 8009010:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009012:	430b      	orrs	r3, r1
 8009014:	4313      	orrs	r3, r2
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	0151      	lsls	r1, r2, #5
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	440a      	add	r2, r1
 800901e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009026:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800902a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
	...

0800903c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	785b      	ldrb	r3, [r3, #1]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d161      	bne.n	800911c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	015a      	lsls	r2, r3, #5
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	4413      	add	r3, r2
 8009060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800906a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800906e:	d11f      	bne.n	80090b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	015a      	lsls	r2, r3, #5
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	4413      	add	r3, r2
 8009078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	0151      	lsls	r1, r2, #5
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	440a      	add	r2, r1
 8009086:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800908a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800908e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	015a      	lsls	r2, r3, #5
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	4413      	add	r3, r2
 8009098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	0151      	lsls	r1, r2, #5
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	440a      	add	r2, r1
 80090a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80090ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	f003 030f 	and.w	r3, r3, #15
 80090c0:	2101      	movs	r1, #1
 80090c2:	fa01 f303 	lsl.w	r3, r1, r3
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	43db      	mvns	r3, r3
 80090ca:	68f9      	ldr	r1, [r7, #12]
 80090cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80090d0:	4013      	ands	r3, r2
 80090d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090da:	69da      	ldr	r2, [r3, #28]
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	f003 030f 	and.w	r3, r3, #15
 80090e4:	2101      	movs	r1, #1
 80090e6:	fa01 f303 	lsl.w	r3, r1, r3
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	43db      	mvns	r3, r3
 80090ee:	68f9      	ldr	r1, [r7, #12]
 80090f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80090f4:	4013      	ands	r3, r2
 80090f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	015a      	lsls	r2, r3, #5
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	4413      	add	r3, r2
 8009100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	0159      	lsls	r1, r3, #5
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	440b      	add	r3, r1
 800910e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009112:	4619      	mov	r1, r3
 8009114:	4b35      	ldr	r3, [pc, #212]	@ (80091ec <USB_DeactivateEndpoint+0x1b0>)
 8009116:	4013      	ands	r3, r2
 8009118:	600b      	str	r3, [r1, #0]
 800911a:	e060      	b.n	80091de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	015a      	lsls	r2, r3, #5
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	4413      	add	r3, r2
 8009124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800912e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009132:	d11f      	bne.n	8009174 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	015a      	lsls	r2, r3, #5
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	4413      	add	r3, r2
 800913c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68ba      	ldr	r2, [r7, #8]
 8009144:	0151      	lsls	r1, r2, #5
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	440a      	add	r2, r1
 800914a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800914e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009152:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	015a      	lsls	r2, r3, #5
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	4413      	add	r3, r2
 800915c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68ba      	ldr	r2, [r7, #8]
 8009164:	0151      	lsls	r1, r2, #5
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	440a      	add	r2, r1
 800916a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800916e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009172:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800917a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	f003 030f 	and.w	r3, r3, #15
 8009184:	2101      	movs	r1, #1
 8009186:	fa01 f303 	lsl.w	r3, r1, r3
 800918a:	041b      	lsls	r3, r3, #16
 800918c:	43db      	mvns	r3, r3
 800918e:	68f9      	ldr	r1, [r7, #12]
 8009190:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009194:	4013      	ands	r3, r2
 8009196:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800919e:	69da      	ldr	r2, [r3, #28]
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	f003 030f 	and.w	r3, r3, #15
 80091a8:	2101      	movs	r1, #1
 80091aa:	fa01 f303 	lsl.w	r3, r1, r3
 80091ae:	041b      	lsls	r3, r3, #16
 80091b0:	43db      	mvns	r3, r3
 80091b2:	68f9      	ldr	r1, [r7, #12]
 80091b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80091b8:	4013      	ands	r3, r2
 80091ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	015a      	lsls	r2, r3, #5
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	4413      	add	r3, r2
 80091c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	0159      	lsls	r1, r3, #5
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	440b      	add	r3, r1
 80091d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091d6:	4619      	mov	r1, r3
 80091d8:	4b05      	ldr	r3, [pc, #20]	@ (80091f0 <USB_DeactivateEndpoint+0x1b4>)
 80091da:	4013      	ands	r3, r2
 80091dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	ec337800 	.word	0xec337800
 80091f0:	eff37800 	.word	0xeff37800

080091f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b08a      	sub	sp, #40	@ 0x28
 80091f8:	af02      	add	r7, sp, #8
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	4613      	mov	r3, r2
 8009200:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	785b      	ldrb	r3, [r3, #1]
 8009210:	2b01      	cmp	r3, #1
 8009212:	f040 817f 	bne.w	8009514 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d132      	bne.n	8009284 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	4413      	add	r3, r2
 8009226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	69ba      	ldr	r2, [r7, #24]
 800922e:	0151      	lsls	r1, r2, #5
 8009230:	69fa      	ldr	r2, [r7, #28]
 8009232:	440a      	add	r2, r1
 8009234:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009238:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800923c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009240:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	015a      	lsls	r2, r3, #5
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	4413      	add	r3, r2
 800924a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	69ba      	ldr	r2, [r7, #24]
 8009252:	0151      	lsls	r1, r2, #5
 8009254:	69fa      	ldr	r2, [r7, #28]
 8009256:	440a      	add	r2, r1
 8009258:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800925c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009260:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	015a      	lsls	r2, r3, #5
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	4413      	add	r3, r2
 800926a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	69ba      	ldr	r2, [r7, #24]
 8009272:	0151      	lsls	r1, r2, #5
 8009274:	69fa      	ldr	r2, [r7, #28]
 8009276:	440a      	add	r2, r1
 8009278:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800927c:	0cdb      	lsrs	r3, r3, #19
 800927e:	04db      	lsls	r3, r3, #19
 8009280:	6113      	str	r3, [r2, #16]
 8009282:	e097      	b.n	80093b4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	015a      	lsls	r2, r3, #5
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	4413      	add	r3, r2
 800928c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	69ba      	ldr	r2, [r7, #24]
 8009294:	0151      	lsls	r1, r2, #5
 8009296:	69fa      	ldr	r2, [r7, #28]
 8009298:	440a      	add	r2, r1
 800929a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800929e:	0cdb      	lsrs	r3, r3, #19
 80092a0:	04db      	lsls	r3, r3, #19
 80092a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	015a      	lsls	r2, r3, #5
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	4413      	add	r3, r2
 80092ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	69ba      	ldr	r2, [r7, #24]
 80092b4:	0151      	lsls	r1, r2, #5
 80092b6:	69fa      	ldr	r2, [r7, #28]
 80092b8:	440a      	add	r2, r1
 80092ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092be:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80092c2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80092c6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d11a      	bne.n	8009304 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	691a      	ldr	r2, [r3, #16]
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d903      	bls.n	80092e2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	689a      	ldr	r2, [r3, #8]
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	015a      	lsls	r2, r3, #5
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	4413      	add	r3, r2
 80092ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	69ba      	ldr	r2, [r7, #24]
 80092f2:	0151      	lsls	r1, r2, #5
 80092f4:	69fa      	ldr	r2, [r7, #28]
 80092f6:	440a      	add	r2, r1
 80092f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009300:	6113      	str	r3, [r2, #16]
 8009302:	e044      	b.n	800938e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	691a      	ldr	r2, [r3, #16]
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	4413      	add	r3, r2
 800930e:	1e5a      	subs	r2, r3, #1
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	fbb2 f3f3 	udiv	r3, r2, r3
 8009318:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	015a      	lsls	r2, r3, #5
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	4413      	add	r3, r2
 8009322:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009326:	691a      	ldr	r2, [r3, #16]
 8009328:	8afb      	ldrh	r3, [r7, #22]
 800932a:	04d9      	lsls	r1, r3, #19
 800932c:	4ba4      	ldr	r3, [pc, #656]	@ (80095c0 <USB_EPStartXfer+0x3cc>)
 800932e:	400b      	ands	r3, r1
 8009330:	69b9      	ldr	r1, [r7, #24]
 8009332:	0148      	lsls	r0, r1, #5
 8009334:	69f9      	ldr	r1, [r7, #28]
 8009336:	4401      	add	r1, r0
 8009338:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800933c:	4313      	orrs	r3, r2
 800933e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	791b      	ldrb	r3, [r3, #4]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d122      	bne.n	800938e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	015a      	lsls	r2, r3, #5
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	4413      	add	r3, r2
 8009350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	69ba      	ldr	r2, [r7, #24]
 8009358:	0151      	lsls	r1, r2, #5
 800935a:	69fa      	ldr	r2, [r7, #28]
 800935c:	440a      	add	r2, r1
 800935e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009362:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009366:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	015a      	lsls	r2, r3, #5
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	4413      	add	r3, r2
 8009370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009374:	691a      	ldr	r2, [r3, #16]
 8009376:	8afb      	ldrh	r3, [r7, #22]
 8009378:	075b      	lsls	r3, r3, #29
 800937a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800937e:	69b9      	ldr	r1, [r7, #24]
 8009380:	0148      	lsls	r0, r1, #5
 8009382:	69f9      	ldr	r1, [r7, #28]
 8009384:	4401      	add	r1, r0
 8009386:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800938a:	4313      	orrs	r3, r2
 800938c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	015a      	lsls	r2, r3, #5
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	4413      	add	r3, r2
 8009396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800939a:	691a      	ldr	r2, [r3, #16]
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093a4:	69b9      	ldr	r1, [r7, #24]
 80093a6:	0148      	lsls	r0, r1, #5
 80093a8:	69f9      	ldr	r1, [r7, #28]
 80093aa:	4401      	add	r1, r0
 80093ac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80093b0:	4313      	orrs	r3, r2
 80093b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80093b4:	79fb      	ldrb	r3, [r7, #7]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d14b      	bne.n	8009452 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d009      	beq.n	80093d6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	015a      	lsls	r2, r3, #5
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	4413      	add	r3, r2
 80093ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093ce:	461a      	mov	r2, r3
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	69db      	ldr	r3, [r3, #28]
 80093d4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	791b      	ldrb	r3, [r3, #4]
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d128      	bne.n	8009430 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d110      	bne.n	8009410 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	015a      	lsls	r2, r3, #5
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	4413      	add	r3, r2
 80093f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	69ba      	ldr	r2, [r7, #24]
 80093fe:	0151      	lsls	r1, r2, #5
 8009400:	69fa      	ldr	r2, [r7, #28]
 8009402:	440a      	add	r2, r1
 8009404:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009408:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800940c:	6013      	str	r3, [r2, #0]
 800940e:	e00f      	b.n	8009430 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	015a      	lsls	r2, r3, #5
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	4413      	add	r3, r2
 8009418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	69ba      	ldr	r2, [r7, #24]
 8009420:	0151      	lsls	r1, r2, #5
 8009422:	69fa      	ldr	r2, [r7, #28]
 8009424:	440a      	add	r2, r1
 8009426:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800942a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800942e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	015a      	lsls	r2, r3, #5
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	4413      	add	r3, r2
 8009438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	69ba      	ldr	r2, [r7, #24]
 8009440:	0151      	lsls	r1, r2, #5
 8009442:	69fa      	ldr	r2, [r7, #28]
 8009444:	440a      	add	r2, r1
 8009446:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800944a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800944e:	6013      	str	r3, [r2, #0]
 8009450:	e166      	b.n	8009720 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	015a      	lsls	r2, r3, #5
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	4413      	add	r3, r2
 800945a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	69ba      	ldr	r2, [r7, #24]
 8009462:	0151      	lsls	r1, r2, #5
 8009464:	69fa      	ldr	r2, [r7, #28]
 8009466:	440a      	add	r2, r1
 8009468:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800946c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009470:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	791b      	ldrb	r3, [r3, #4]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d015      	beq.n	80094a6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	2b00      	cmp	r3, #0
 8009480:	f000 814e 	beq.w	8009720 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800948a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	f003 030f 	and.w	r3, r3, #15
 8009494:	2101      	movs	r1, #1
 8009496:	fa01 f303 	lsl.w	r3, r1, r3
 800949a:	69f9      	ldr	r1, [r7, #28]
 800949c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80094a0:	4313      	orrs	r3, r2
 80094a2:	634b      	str	r3, [r1, #52]	@ 0x34
 80094a4:	e13c      	b.n	8009720 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d110      	bne.n	80094d8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	015a      	lsls	r2, r3, #5
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	4413      	add	r3, r2
 80094be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	69ba      	ldr	r2, [r7, #24]
 80094c6:	0151      	lsls	r1, r2, #5
 80094c8:	69fa      	ldr	r2, [r7, #28]
 80094ca:	440a      	add	r2, r1
 80094cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80094d4:	6013      	str	r3, [r2, #0]
 80094d6:	e00f      	b.n	80094f8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	015a      	lsls	r2, r3, #5
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	4413      	add	r3, r2
 80094e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	69ba      	ldr	r2, [r7, #24]
 80094e8:	0151      	lsls	r1, r2, #5
 80094ea:	69fa      	ldr	r2, [r7, #28]
 80094ec:	440a      	add	r2, r1
 80094ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094f6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	68d9      	ldr	r1, [r3, #12]
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	781a      	ldrb	r2, [r3, #0]
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	b298      	uxth	r0, r3
 8009506:	79fb      	ldrb	r3, [r7, #7]
 8009508:	9300      	str	r3, [sp, #0]
 800950a:	4603      	mov	r3, r0
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f000 f9b9 	bl	8009884 <USB_WritePacket>
 8009512:	e105      	b.n	8009720 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	4413      	add	r3, r2
 800951c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	69ba      	ldr	r2, [r7, #24]
 8009524:	0151      	lsls	r1, r2, #5
 8009526:	69fa      	ldr	r2, [r7, #28]
 8009528:	440a      	add	r2, r1
 800952a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800952e:	0cdb      	lsrs	r3, r3, #19
 8009530:	04db      	lsls	r3, r3, #19
 8009532:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	015a      	lsls	r2, r3, #5
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	4413      	add	r3, r2
 800953c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	69ba      	ldr	r2, [r7, #24]
 8009544:	0151      	lsls	r1, r2, #5
 8009546:	69fa      	ldr	r2, [r7, #28]
 8009548:	440a      	add	r2, r1
 800954a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800954e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009552:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009556:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d132      	bne.n	80095c4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d003      	beq.n	800956e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	689a      	ldr	r2, [r3, #8]
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	689a      	ldr	r2, [r3, #8]
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	015a      	lsls	r2, r3, #5
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	4413      	add	r3, r2
 800957e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009582:	691a      	ldr	r2, [r3, #16]
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	6a1b      	ldr	r3, [r3, #32]
 8009588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800958c:	69b9      	ldr	r1, [r7, #24]
 800958e:	0148      	lsls	r0, r1, #5
 8009590:	69f9      	ldr	r1, [r7, #28]
 8009592:	4401      	add	r1, r0
 8009594:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009598:	4313      	orrs	r3, r2
 800959a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	015a      	lsls	r2, r3, #5
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	4413      	add	r3, r2
 80095a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	69ba      	ldr	r2, [r7, #24]
 80095ac:	0151      	lsls	r1, r2, #5
 80095ae:	69fa      	ldr	r2, [r7, #28]
 80095b0:	440a      	add	r2, r1
 80095b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80095ba:	6113      	str	r3, [r2, #16]
 80095bc:	e062      	b.n	8009684 <USB_EPStartXfer+0x490>
 80095be:	bf00      	nop
 80095c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d123      	bne.n	8009614 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	015a      	lsls	r2, r3, #5
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	4413      	add	r3, r2
 80095d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095d8:	691a      	ldr	r2, [r3, #16]
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095e2:	69b9      	ldr	r1, [r7, #24]
 80095e4:	0148      	lsls	r0, r1, #5
 80095e6:	69f9      	ldr	r1, [r7, #28]
 80095e8:	4401      	add	r1, r0
 80095ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80095ee:	4313      	orrs	r3, r2
 80095f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	015a      	lsls	r2, r3, #5
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	4413      	add	r3, r2
 80095fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	69ba      	ldr	r2, [r7, #24]
 8009602:	0151      	lsls	r1, r2, #5
 8009604:	69fa      	ldr	r2, [r7, #28]
 8009606:	440a      	add	r2, r1
 8009608:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800960c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009610:	6113      	str	r3, [r2, #16]
 8009612:	e037      	b.n	8009684 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	691a      	ldr	r2, [r3, #16]
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	4413      	add	r3, r2
 800961e:	1e5a      	subs	r2, r3, #1
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	fbb2 f3f3 	udiv	r3, r2, r3
 8009628:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	8afa      	ldrh	r2, [r7, #22]
 8009630:	fb03 f202 	mul.w	r2, r3, r2
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	015a      	lsls	r2, r3, #5
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	4413      	add	r3, r2
 8009640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009644:	691a      	ldr	r2, [r3, #16]
 8009646:	8afb      	ldrh	r3, [r7, #22]
 8009648:	04d9      	lsls	r1, r3, #19
 800964a:	4b38      	ldr	r3, [pc, #224]	@ (800972c <USB_EPStartXfer+0x538>)
 800964c:	400b      	ands	r3, r1
 800964e:	69b9      	ldr	r1, [r7, #24]
 8009650:	0148      	lsls	r0, r1, #5
 8009652:	69f9      	ldr	r1, [r7, #28]
 8009654:	4401      	add	r1, r0
 8009656:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800965a:	4313      	orrs	r3, r2
 800965c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	015a      	lsls	r2, r3, #5
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	4413      	add	r3, r2
 8009666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800966a:	691a      	ldr	r2, [r3, #16]
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	6a1b      	ldr	r3, [r3, #32]
 8009670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009674:	69b9      	ldr	r1, [r7, #24]
 8009676:	0148      	lsls	r0, r1, #5
 8009678:	69f9      	ldr	r1, [r7, #28]
 800967a:	4401      	add	r1, r0
 800967c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009680:	4313      	orrs	r3, r2
 8009682:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009684:	79fb      	ldrb	r3, [r7, #7]
 8009686:	2b01      	cmp	r3, #1
 8009688:	d10d      	bne.n	80096a6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d009      	beq.n	80096a6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	68d9      	ldr	r1, [r3, #12]
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	4413      	add	r3, r2
 800969e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096a2:	460a      	mov	r2, r1
 80096a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	791b      	ldrb	r3, [r3, #4]
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d128      	bne.n	8009700 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d110      	bne.n	80096e0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	015a      	lsls	r2, r3, #5
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	4413      	add	r3, r2
 80096c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	69ba      	ldr	r2, [r7, #24]
 80096ce:	0151      	lsls	r1, r2, #5
 80096d0:	69fa      	ldr	r2, [r7, #28]
 80096d2:	440a      	add	r2, r1
 80096d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80096dc:	6013      	str	r3, [r2, #0]
 80096de:	e00f      	b.n	8009700 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	015a      	lsls	r2, r3, #5
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	4413      	add	r3, r2
 80096e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	69ba      	ldr	r2, [r7, #24]
 80096f0:	0151      	lsls	r1, r2, #5
 80096f2:	69fa      	ldr	r2, [r7, #28]
 80096f4:	440a      	add	r2, r1
 80096f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	015a      	lsls	r2, r3, #5
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	4413      	add	r3, r2
 8009708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	69ba      	ldr	r2, [r7, #24]
 8009710:	0151      	lsls	r1, r2, #5
 8009712:	69fa      	ldr	r2, [r7, #28]
 8009714:	440a      	add	r2, r1
 8009716:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800971a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800971e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3720      	adds	r7, #32
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	1ff80000 	.word	0x1ff80000

08009730 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009730:	b480      	push	{r7}
 8009732:	b087      	sub	sp, #28
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800973a:	2300      	movs	r3, #0
 800973c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800973e:	2300      	movs	r3, #0
 8009740:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	785b      	ldrb	r3, [r3, #1]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d14a      	bne.n	80097e4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	015a      	lsls	r2, r3, #5
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	4413      	add	r3, r2
 8009758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009762:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009766:	f040 8086 	bne.w	8009876 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	015a      	lsls	r2, r3, #5
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	4413      	add	r3, r2
 8009774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	7812      	ldrb	r2, [r2, #0]
 800977e:	0151      	lsls	r1, r2, #5
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	440a      	add	r2, r1
 8009784:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009788:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800978c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	015a      	lsls	r2, r3, #5
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	4413      	add	r3, r2
 8009798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	683a      	ldr	r2, [r7, #0]
 80097a0:	7812      	ldrb	r2, [r2, #0]
 80097a2:	0151      	lsls	r1, r2, #5
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	440a      	add	r2, r1
 80097a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80097b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	3301      	adds	r3, #1
 80097b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80097be:	4293      	cmp	r3, r2
 80097c0:	d902      	bls.n	80097c8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	75fb      	strb	r3, [r7, #23]
          break;
 80097c6:	e056      	b.n	8009876 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	015a      	lsls	r2, r3, #5
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	4413      	add	r3, r2
 80097d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097e0:	d0e7      	beq.n	80097b2 <USB_EPStopXfer+0x82>
 80097e2:	e048      	b.n	8009876 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	015a      	lsls	r2, r3, #5
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	4413      	add	r3, r2
 80097ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097fc:	d13b      	bne.n	8009876 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	015a      	lsls	r2, r3, #5
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	4413      	add	r3, r2
 8009808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	7812      	ldrb	r2, [r2, #0]
 8009812:	0151      	lsls	r1, r2, #5
 8009814:	693a      	ldr	r2, [r7, #16]
 8009816:	440a      	add	r2, r1
 8009818:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800981c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009820:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	015a      	lsls	r2, r3, #5
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	4413      	add	r3, r2
 800982c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	683a      	ldr	r2, [r7, #0]
 8009834:	7812      	ldrb	r2, [r2, #0]
 8009836:	0151      	lsls	r1, r2, #5
 8009838:	693a      	ldr	r2, [r7, #16]
 800983a:	440a      	add	r2, r1
 800983c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009840:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009844:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3301      	adds	r3, #1
 800984a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009852:	4293      	cmp	r3, r2
 8009854:	d902      	bls.n	800985c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	75fb      	strb	r3, [r7, #23]
          break;
 800985a:	e00c      	b.n	8009876 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	015a      	lsls	r2, r3, #5
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	4413      	add	r3, r2
 8009866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009870:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009874:	d0e7      	beq.n	8009846 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009876:	7dfb      	ldrb	r3, [r7, #23]
}
 8009878:	4618      	mov	r0, r3
 800987a:	371c      	adds	r7, #28
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009884:	b480      	push	{r7}
 8009886:	b089      	sub	sp, #36	@ 0x24
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	4611      	mov	r1, r2
 8009890:	461a      	mov	r2, r3
 8009892:	460b      	mov	r3, r1
 8009894:	71fb      	strb	r3, [r7, #7]
 8009896:	4613      	mov	r3, r2
 8009898:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80098a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d123      	bne.n	80098f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80098aa:	88bb      	ldrh	r3, [r7, #4]
 80098ac:	3303      	adds	r3, #3
 80098ae:	089b      	lsrs	r3, r3, #2
 80098b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80098b2:	2300      	movs	r3, #0
 80098b4:	61bb      	str	r3, [r7, #24]
 80098b6:	e018      	b.n	80098ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80098b8:	79fb      	ldrb	r3, [r7, #7]
 80098ba:	031a      	lsls	r2, r3, #12
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	4413      	add	r3, r2
 80098c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098c4:	461a      	mov	r2, r3
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	3301      	adds	r3, #1
 80098d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	3301      	adds	r3, #1
 80098d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	3301      	adds	r3, #1
 80098dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	3301      	adds	r3, #1
 80098e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80098e4:	69bb      	ldr	r3, [r7, #24]
 80098e6:	3301      	adds	r3, #1
 80098e8:	61bb      	str	r3, [r7, #24]
 80098ea:	69ba      	ldr	r2, [r7, #24]
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d3e2      	bcc.n	80098b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3724      	adds	r7, #36	@ 0x24
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009900:	b480      	push	{r7}
 8009902:	b08b      	sub	sp, #44	@ 0x2c
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	4613      	mov	r3, r2
 800990c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009916:	88fb      	ldrh	r3, [r7, #6]
 8009918:	089b      	lsrs	r3, r3, #2
 800991a:	b29b      	uxth	r3, r3
 800991c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800991e:	88fb      	ldrh	r3, [r7, #6]
 8009920:	f003 0303 	and.w	r3, r3, #3
 8009924:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009926:	2300      	movs	r3, #0
 8009928:	623b      	str	r3, [r7, #32]
 800992a:	e014      	b.n	8009956 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009936:	601a      	str	r2, [r3, #0]
    pDest++;
 8009938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993a:	3301      	adds	r3, #1
 800993c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800993e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009940:	3301      	adds	r3, #1
 8009942:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009946:	3301      	adds	r3, #1
 8009948:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800994a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994c:	3301      	adds	r3, #1
 800994e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009950:	6a3b      	ldr	r3, [r7, #32]
 8009952:	3301      	adds	r3, #1
 8009954:	623b      	str	r3, [r7, #32]
 8009956:	6a3a      	ldr	r2, [r7, #32]
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	429a      	cmp	r2, r3
 800995c:	d3e6      	bcc.n	800992c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800995e:	8bfb      	ldrh	r3, [r7, #30]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d01e      	beq.n	80099a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009964:	2300      	movs	r3, #0
 8009966:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800996e:	461a      	mov	r2, r3
 8009970:	f107 0310 	add.w	r3, r7, #16
 8009974:	6812      	ldr	r2, [r2, #0]
 8009976:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009978:	693a      	ldr	r2, [r7, #16]
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	b2db      	uxtb	r3, r3
 800997e:	00db      	lsls	r3, r3, #3
 8009980:	fa22 f303 	lsr.w	r3, r2, r3
 8009984:	b2da      	uxtb	r2, r3
 8009986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009988:	701a      	strb	r2, [r3, #0]
      i++;
 800998a:	6a3b      	ldr	r3, [r7, #32]
 800998c:	3301      	adds	r3, #1
 800998e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009992:	3301      	adds	r3, #1
 8009994:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009996:	8bfb      	ldrh	r3, [r7, #30]
 8009998:	3b01      	subs	r3, #1
 800999a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800999c:	8bfb      	ldrh	r3, [r7, #30]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1ea      	bne.n	8009978 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80099a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	372c      	adds	r7, #44	@ 0x2c
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	785b      	ldrb	r3, [r3, #1]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d12c      	bne.n	8009a26 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	015a      	lsls	r2, r3, #5
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	4413      	add	r3, r2
 80099d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	db12      	blt.n	8009a04 <USB_EPSetStall+0x54>
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00f      	beq.n	8009a04 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	015a      	lsls	r2, r3, #5
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	4413      	add	r3, r2
 80099ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	0151      	lsls	r1, r2, #5
 80099f6:	68fa      	ldr	r2, [r7, #12]
 80099f8:	440a      	add	r2, r1
 80099fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009a02:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	015a      	lsls	r2, r3, #5
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	0151      	lsls	r1, r2, #5
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	440a      	add	r2, r1
 8009a1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009a22:	6013      	str	r3, [r2, #0]
 8009a24:	e02b      	b.n	8009a7e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	015a      	lsls	r2, r3, #5
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	db12      	blt.n	8009a5e <USB_EPSetStall+0xae>
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d00f      	beq.n	8009a5e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	015a      	lsls	r2, r3, #5
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	4413      	add	r3, r2
 8009a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68ba      	ldr	r2, [r7, #8]
 8009a4e:	0151      	lsls	r1, r2, #5
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	440a      	add	r2, r1
 8009a54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a58:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009a5c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	015a      	lsls	r2, r3, #5
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	4413      	add	r3, r2
 8009a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	68ba      	ldr	r2, [r7, #8]
 8009a6e:	0151      	lsls	r1, r2, #5
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	440a      	add	r2, r1
 8009a74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009a7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3714      	adds	r7, #20
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	785b      	ldrb	r3, [r3, #1]
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d128      	bne.n	8009afa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	015a      	lsls	r2, r3, #5
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	4413      	add	r3, r2
 8009ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	0151      	lsls	r1, r2, #5
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	440a      	add	r2, r1
 8009abe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ac2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009ac6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	791b      	ldrb	r3, [r3, #4]
 8009acc:	2b03      	cmp	r3, #3
 8009ace:	d003      	beq.n	8009ad8 <USB_EPClearStall+0x4c>
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	791b      	ldrb	r3, [r3, #4]
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d138      	bne.n	8009b4a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	015a      	lsls	r2, r3, #5
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	4413      	add	r3, r2
 8009ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	0151      	lsls	r1, r2, #5
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	440a      	add	r2, r1
 8009aee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009af2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009af6:	6013      	str	r3, [r2, #0]
 8009af8:	e027      	b.n	8009b4a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	015a      	lsls	r2, r3, #5
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	4413      	add	r3, r2
 8009b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68ba      	ldr	r2, [r7, #8]
 8009b0a:	0151      	lsls	r1, r2, #5
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	440a      	add	r2, r1
 8009b10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b14:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009b18:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	791b      	ldrb	r3, [r3, #4]
 8009b1e:	2b03      	cmp	r3, #3
 8009b20:	d003      	beq.n	8009b2a <USB_EPClearStall+0x9e>
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	791b      	ldrb	r3, [r3, #4]
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	d10f      	bne.n	8009b4a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	015a      	lsls	r2, r3, #5
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	4413      	add	r3, r2
 8009b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68ba      	ldr	r2, [r7, #8]
 8009b3a:	0151      	lsls	r1, r2, #5
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	440a      	add	r2, r1
 8009b40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b48:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3714      	adds	r7, #20
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	460b      	mov	r3, r1
 8009b62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b76:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009b7a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	78fb      	ldrb	r3, [r7, #3]
 8009b86:	011b      	lsls	r3, r3, #4
 8009b88:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009b8c:	68f9      	ldr	r1, [r7, #12]
 8009b8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b92:	4313      	orrs	r3, r2
 8009b94:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3714      	adds	r7, #20
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	68fa      	ldr	r2, [r7, #12]
 8009bba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009bbe:	f023 0303 	bic.w	r3, r3, #3
 8009bc2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009bd2:	f023 0302 	bic.w	r3, r3, #2
 8009bd6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009bd8:	2300      	movs	r3, #0
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3714      	adds	r7, #20
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr

08009be6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009be6:	b480      	push	{r7}
 8009be8:	b085      	sub	sp, #20
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009c00:	f023 0303 	bic.w	r3, r3, #3
 8009c04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c14:	f043 0302 	orr.w	r3, r3, #2
 8009c18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3714      	adds	r7, #20
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	695b      	ldr	r3, [r3, #20]
 8009c34:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009c40:	68fb      	ldr	r3, [r7, #12]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3714      	adds	r7, #20
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr

08009c4e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c4e:	b480      	push	{r7}
 8009c50:	b085      	sub	sp, #20
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c6a:	69db      	ldr	r3, [r3, #28]
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	4013      	ands	r3, r2
 8009c70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	0c1b      	lsrs	r3, r3, #16
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3714      	adds	r7, #20
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr

08009c82 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c82:	b480      	push	{r7}
 8009c84:	b085      	sub	sp, #20
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c94:	699b      	ldr	r3, [r3, #24]
 8009c96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c9e:	69db      	ldr	r3, [r3, #28]
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	4013      	ands	r3, r2
 8009ca4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	b29b      	uxth	r3, r3
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3714      	adds	r7, #20
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr

08009cb6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009cb6:	b480      	push	{r7}
 8009cb8:	b085      	sub	sp, #20
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009cc6:	78fb      	ldrb	r3, [r7, #3]
 8009cc8:	015a      	lsls	r2, r3, #5
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	4413      	add	r3, r2
 8009cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cdc:	695b      	ldr	r3, [r3, #20]
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3714      	adds	r7, #20
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr

08009cf2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009cf2:	b480      	push	{r7}
 8009cf4:	b087      	sub	sp, #28
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d14:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009d16:	78fb      	ldrb	r3, [r7, #3]
 8009d18:	f003 030f 	and.w	r3, r3, #15
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8009d22:	01db      	lsls	r3, r3, #7
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	693a      	ldr	r2, [r7, #16]
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009d2c:	78fb      	ldrb	r3, [r7, #3]
 8009d2e:	015a      	lsls	r2, r3, #5
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	4413      	add	r3, r2
 8009d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	693a      	ldr	r2, [r7, #16]
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009d40:	68bb      	ldr	r3, [r7, #8]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	371c      	adds	r7, #28
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr

08009d4e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009d4e:	b480      	push	{r7}
 8009d50:	b083      	sub	sp, #12
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	695b      	ldr	r3, [r3, #20]
 8009d5a:	f003 0301 	and.w	r3, r3, #1
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	370c      	adds	r7, #12
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr

08009d6a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009d6a:	b480      	push	{r7}
 8009d6c:	b085      	sub	sp, #20
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d84:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009d88:	f023 0307 	bic.w	r3, r3, #7
 8009d8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009da0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3714      	adds	r7, #20
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b087      	sub	sp, #28
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	460b      	mov	r3, r1
 8009dba:	607a      	str	r2, [r7, #4]
 8009dbc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	333c      	adds	r3, #60	@ 0x3c
 8009dc6:	3304      	adds	r3, #4
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	4a26      	ldr	r2, [pc, #152]	@ (8009e68 <USB_EP0_OutStart+0xb8>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d90a      	bls.n	8009dea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009de0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009de4:	d101      	bne.n	8009dea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	e037      	b.n	8009e5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009df0:	461a      	mov	r2, r3
 8009df2:	2300      	movs	r3, #0
 8009df4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	697a      	ldr	r2, [r7, #20]
 8009e00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	697a      	ldr	r2, [r7, #20]
 8009e14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e18:	f043 0318 	orr.w	r3, r3, #24
 8009e1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	697a      	ldr	r2, [r7, #20]
 8009e28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e2c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009e30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009e32:	7afb      	ldrb	r3, [r7, #11]
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d10f      	bne.n	8009e58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e3e:	461a      	mov	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	697a      	ldr	r2, [r7, #20]
 8009e4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e52:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009e56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	371c      	adds	r7, #28
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	4f54300a 	.word	0x4f54300a

08009e6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e74:	2300      	movs	r3, #0
 8009e76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e84:	d901      	bls.n	8009e8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009e86:	2303      	movs	r3, #3
 8009e88:	e01b      	b.n	8009ec2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	691b      	ldr	r3, [r3, #16]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	daf2      	bge.n	8009e78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009e92:	2300      	movs	r3, #0
 8009e94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	f043 0201 	orr.w	r2, r3, #1
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009eae:	d901      	bls.n	8009eb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e006      	b.n	8009ec2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	f003 0301 	and.w	r3, r3, #1
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d0f0      	beq.n	8009ea2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3714      	adds	r7, #20
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr
	...

08009ed0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	460b      	mov	r3, r1
 8009eda:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009edc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009ee0:	f002 fcac 	bl	800c83c <USBD_static_malloc>
 8009ee4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d109      	bne.n	8009f00 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	32b0      	adds	r2, #176	@ 0xb0
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009efc:	2302      	movs	r3, #2
 8009efe:	e0d4      	b.n	800a0aa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009f00:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009f04:	2100      	movs	r1, #0
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	f003 fb25 	bl	800d556 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	32b0      	adds	r2, #176	@ 0xb0
 8009f16:	68f9      	ldr	r1, [r7, #12]
 8009f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	32b0      	adds	r2, #176	@ 0xb0
 8009f26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	7c1b      	ldrb	r3, [r3, #16]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d138      	bne.n	8009faa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009f38:	4b5e      	ldr	r3, [pc, #376]	@ (800a0b4 <USBD_CDC_Init+0x1e4>)
 8009f3a:	7819      	ldrb	r1, [r3, #0]
 8009f3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f40:	2202      	movs	r2, #2
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f002 fb57 	bl	800c5f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009f48:	4b5a      	ldr	r3, [pc, #360]	@ (800a0b4 <USBD_CDC_Init+0x1e4>)
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	f003 020f 	and.w	r2, r3, #15
 8009f50:	6879      	ldr	r1, [r7, #4]
 8009f52:	4613      	mov	r3, r2
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	4413      	add	r3, r2
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	440b      	add	r3, r1
 8009f5c:	3324      	adds	r3, #36	@ 0x24
 8009f5e:	2201      	movs	r2, #1
 8009f60:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009f62:	4b55      	ldr	r3, [pc, #340]	@ (800a0b8 <USBD_CDC_Init+0x1e8>)
 8009f64:	7819      	ldrb	r1, [r3, #0]
 8009f66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f6a:	2202      	movs	r2, #2
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f002 fb42 	bl	800c5f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009f72:	4b51      	ldr	r3, [pc, #324]	@ (800a0b8 <USBD_CDC_Init+0x1e8>)
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	f003 020f 	and.w	r2, r3, #15
 8009f7a:	6879      	ldr	r1, [r7, #4]
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4413      	add	r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	440b      	add	r3, r1
 8009f86:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009f8e:	4b4b      	ldr	r3, [pc, #300]	@ (800a0bc <USBD_CDC_Init+0x1ec>)
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	f003 020f 	and.w	r2, r3, #15
 8009f96:	6879      	ldr	r1, [r7, #4]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4413      	add	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	440b      	add	r3, r1
 8009fa2:	3326      	adds	r3, #38	@ 0x26
 8009fa4:	2210      	movs	r2, #16
 8009fa6:	801a      	strh	r2, [r3, #0]
 8009fa8:	e035      	b.n	800a016 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009faa:	4b42      	ldr	r3, [pc, #264]	@ (800a0b4 <USBD_CDC_Init+0x1e4>)
 8009fac:	7819      	ldrb	r1, [r3, #0]
 8009fae:	2340      	movs	r3, #64	@ 0x40
 8009fb0:	2202      	movs	r2, #2
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f002 fb1f 	bl	800c5f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009fb8:	4b3e      	ldr	r3, [pc, #248]	@ (800a0b4 <USBD_CDC_Init+0x1e4>)
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	f003 020f 	and.w	r2, r3, #15
 8009fc0:	6879      	ldr	r1, [r7, #4]
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	4413      	add	r3, r2
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	440b      	add	r3, r1
 8009fcc:	3324      	adds	r3, #36	@ 0x24
 8009fce:	2201      	movs	r2, #1
 8009fd0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009fd2:	4b39      	ldr	r3, [pc, #228]	@ (800a0b8 <USBD_CDC_Init+0x1e8>)
 8009fd4:	7819      	ldrb	r1, [r3, #0]
 8009fd6:	2340      	movs	r3, #64	@ 0x40
 8009fd8:	2202      	movs	r2, #2
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f002 fb0b 	bl	800c5f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009fe0:	4b35      	ldr	r3, [pc, #212]	@ (800a0b8 <USBD_CDC_Init+0x1e8>)
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	f003 020f 	and.w	r2, r3, #15
 8009fe8:	6879      	ldr	r1, [r7, #4]
 8009fea:	4613      	mov	r3, r2
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	4413      	add	r3, r2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	440b      	add	r3, r1
 8009ff4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009ffc:	4b2f      	ldr	r3, [pc, #188]	@ (800a0bc <USBD_CDC_Init+0x1ec>)
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	f003 020f 	and.w	r2, r3, #15
 800a004:	6879      	ldr	r1, [r7, #4]
 800a006:	4613      	mov	r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4413      	add	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	440b      	add	r3, r1
 800a010:	3326      	adds	r3, #38	@ 0x26
 800a012:	2210      	movs	r2, #16
 800a014:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a016:	4b29      	ldr	r3, [pc, #164]	@ (800a0bc <USBD_CDC_Init+0x1ec>)
 800a018:	7819      	ldrb	r1, [r3, #0]
 800a01a:	2308      	movs	r3, #8
 800a01c:	2203      	movs	r2, #3
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f002 fae9 	bl	800c5f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a024:	4b25      	ldr	r3, [pc, #148]	@ (800a0bc <USBD_CDC_Init+0x1ec>)
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	f003 020f 	and.w	r2, r3, #15
 800a02c:	6879      	ldr	r1, [r7, #4]
 800a02e:	4613      	mov	r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	4413      	add	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	440b      	add	r3, r1
 800a038:	3324      	adds	r3, #36	@ 0x24
 800a03a:	2201      	movs	r2, #1
 800a03c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2200      	movs	r2, #0
 800a042:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	33b0      	adds	r3, #176	@ 0xb0
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	4413      	add	r3, r2
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a070:	2b00      	cmp	r3, #0
 800a072:	d101      	bne.n	800a078 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a074:	2302      	movs	r3, #2
 800a076:	e018      	b.n	800a0aa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	7c1b      	ldrb	r3, [r3, #16]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d10a      	bne.n	800a096 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a080:	4b0d      	ldr	r3, [pc, #52]	@ (800a0b8 <USBD_CDC_Init+0x1e8>)
 800a082:	7819      	ldrb	r1, [r3, #0]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a08a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f002 fba0 	bl	800c7d4 <USBD_LL_PrepareReceive>
 800a094:	e008      	b.n	800a0a8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a096:	4b08      	ldr	r3, [pc, #32]	@ (800a0b8 <USBD_CDC_Init+0x1e8>)
 800a098:	7819      	ldrb	r1, [r3, #0]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a0a0:	2340      	movs	r3, #64	@ 0x40
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f002 fb96 	bl	800c7d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	20000093 	.word	0x20000093
 800a0b8:	20000094 	.word	0x20000094
 800a0bc:	20000095 	.word	0x20000095

0800a0c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a0cc:	4b3a      	ldr	r3, [pc, #232]	@ (800a1b8 <USBD_CDC_DeInit+0xf8>)
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f002 fab5 	bl	800c642 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a0d8:	4b37      	ldr	r3, [pc, #220]	@ (800a1b8 <USBD_CDC_DeInit+0xf8>)
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	f003 020f 	and.w	r2, r3, #15
 800a0e0:	6879      	ldr	r1, [r7, #4]
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	4413      	add	r3, r2
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	440b      	add	r3, r1
 800a0ec:	3324      	adds	r3, #36	@ 0x24
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a0f2:	4b32      	ldr	r3, [pc, #200]	@ (800a1bc <USBD_CDC_DeInit+0xfc>)
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f002 faa2 	bl	800c642 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a0fe:	4b2f      	ldr	r3, [pc, #188]	@ (800a1bc <USBD_CDC_DeInit+0xfc>)
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	f003 020f 	and.w	r2, r3, #15
 800a106:	6879      	ldr	r1, [r7, #4]
 800a108:	4613      	mov	r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4413      	add	r3, r2
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	440b      	add	r3, r1
 800a112:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a116:	2200      	movs	r2, #0
 800a118:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a11a:	4b29      	ldr	r3, [pc, #164]	@ (800a1c0 <USBD_CDC_DeInit+0x100>)
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	4619      	mov	r1, r3
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f002 fa8e 	bl	800c642 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a126:	4b26      	ldr	r3, [pc, #152]	@ (800a1c0 <USBD_CDC_DeInit+0x100>)
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	f003 020f 	and.w	r2, r3, #15
 800a12e:	6879      	ldr	r1, [r7, #4]
 800a130:	4613      	mov	r3, r2
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	4413      	add	r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	440b      	add	r3, r1
 800a13a:	3324      	adds	r3, #36	@ 0x24
 800a13c:	2200      	movs	r2, #0
 800a13e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a140:	4b1f      	ldr	r3, [pc, #124]	@ (800a1c0 <USBD_CDC_DeInit+0x100>)
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	f003 020f 	and.w	r2, r3, #15
 800a148:	6879      	ldr	r1, [r7, #4]
 800a14a:	4613      	mov	r3, r2
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	4413      	add	r3, r2
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	440b      	add	r3, r1
 800a154:	3326      	adds	r3, #38	@ 0x26
 800a156:	2200      	movs	r2, #0
 800a158:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	32b0      	adds	r2, #176	@ 0xb0
 800a164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d01f      	beq.n	800a1ac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	33b0      	adds	r3, #176	@ 0xb0
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	4413      	add	r3, r2
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	32b0      	adds	r2, #176	@ 0xb0
 800a18a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a18e:	4618      	mov	r0, r3
 800a190:	f002 fb62 	bl	800c858 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	32b0      	adds	r2, #176	@ 0xb0
 800a19e:	2100      	movs	r1, #0
 800a1a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3708      	adds	r7, #8
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	20000093 	.word	0x20000093
 800a1bc:	20000094 	.word	0x20000094
 800a1c0:	20000095 	.word	0x20000095

0800a1c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b086      	sub	sp, #24
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	32b0      	adds	r2, #176	@ 0xb0
 800a1d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d101      	bne.n	800a1f4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	e0bf      	b.n	800a374 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d050      	beq.n	800a2a2 <USBD_CDC_Setup+0xde>
 800a200:	2b20      	cmp	r3, #32
 800a202:	f040 80af 	bne.w	800a364 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	88db      	ldrh	r3, [r3, #6]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d03a      	beq.n	800a284 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	b25b      	sxtb	r3, r3
 800a214:	2b00      	cmp	r3, #0
 800a216:	da1b      	bge.n	800a250 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	33b0      	adds	r3, #176	@ 0xb0
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	4413      	add	r3, r2
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	683a      	ldr	r2, [r7, #0]
 800a22c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a22e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a230:	683a      	ldr	r2, [r7, #0]
 800a232:	88d2      	ldrh	r2, [r2, #6]
 800a234:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	88db      	ldrh	r3, [r3, #6]
 800a23a:	2b07      	cmp	r3, #7
 800a23c:	bf28      	it	cs
 800a23e:	2307      	movcs	r3, #7
 800a240:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	89fa      	ldrh	r2, [r7, #14]
 800a246:	4619      	mov	r1, r3
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f001 fd93 	bl	800bd74 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a24e:	e090      	b.n	800a372 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	785a      	ldrb	r2, [r3, #1]
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	88db      	ldrh	r3, [r3, #6]
 800a25e:	2b3f      	cmp	r3, #63	@ 0x3f
 800a260:	d803      	bhi.n	800a26a <USBD_CDC_Setup+0xa6>
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	88db      	ldrh	r3, [r3, #6]
 800a266:	b2da      	uxtb	r2, r3
 800a268:	e000      	b.n	800a26c <USBD_CDC_Setup+0xa8>
 800a26a:	2240      	movs	r2, #64	@ 0x40
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a272:	6939      	ldr	r1, [r7, #16]
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a27a:	461a      	mov	r2, r3
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f001 fda5 	bl	800bdcc <USBD_CtlPrepareRx>
      break;
 800a282:	e076      	b.n	800a372 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	33b0      	adds	r3, #176	@ 0xb0
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	4413      	add	r3, r2
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	683a      	ldr	r2, [r7, #0]
 800a298:	7850      	ldrb	r0, [r2, #1]
 800a29a:	2200      	movs	r2, #0
 800a29c:	6839      	ldr	r1, [r7, #0]
 800a29e:	4798      	blx	r3
      break;
 800a2a0:	e067      	b.n	800a372 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	785b      	ldrb	r3, [r3, #1]
 800a2a6:	2b0b      	cmp	r3, #11
 800a2a8:	d851      	bhi.n	800a34e <USBD_CDC_Setup+0x18a>
 800a2aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a2b0 <USBD_CDC_Setup+0xec>)
 800a2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b0:	0800a2e1 	.word	0x0800a2e1
 800a2b4:	0800a35d 	.word	0x0800a35d
 800a2b8:	0800a34f 	.word	0x0800a34f
 800a2bc:	0800a34f 	.word	0x0800a34f
 800a2c0:	0800a34f 	.word	0x0800a34f
 800a2c4:	0800a34f 	.word	0x0800a34f
 800a2c8:	0800a34f 	.word	0x0800a34f
 800a2cc:	0800a34f 	.word	0x0800a34f
 800a2d0:	0800a34f 	.word	0x0800a34f
 800a2d4:	0800a34f 	.word	0x0800a34f
 800a2d8:	0800a30b 	.word	0x0800a30b
 800a2dc:	0800a335 	.word	0x0800a335
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	2b03      	cmp	r3, #3
 800a2ea:	d107      	bne.n	800a2fc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a2ec:	f107 030a 	add.w	r3, r7, #10
 800a2f0:	2202      	movs	r2, #2
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f001 fd3d 	bl	800bd74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a2fa:	e032      	b.n	800a362 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a2fc:	6839      	ldr	r1, [r7, #0]
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f001 fcbb 	bl	800bc7a <USBD_CtlError>
            ret = USBD_FAIL;
 800a304:	2303      	movs	r3, #3
 800a306:	75fb      	strb	r3, [r7, #23]
          break;
 800a308:	e02b      	b.n	800a362 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a310:	b2db      	uxtb	r3, r3
 800a312:	2b03      	cmp	r3, #3
 800a314:	d107      	bne.n	800a326 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a316:	f107 030d 	add.w	r3, r7, #13
 800a31a:	2201      	movs	r2, #1
 800a31c:	4619      	mov	r1, r3
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f001 fd28 	bl	800bd74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a324:	e01d      	b.n	800a362 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a326:	6839      	ldr	r1, [r7, #0]
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f001 fca6 	bl	800bc7a <USBD_CtlError>
            ret = USBD_FAIL;
 800a32e:	2303      	movs	r3, #3
 800a330:	75fb      	strb	r3, [r7, #23]
          break;
 800a332:	e016      	b.n	800a362 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	2b03      	cmp	r3, #3
 800a33e:	d00f      	beq.n	800a360 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f001 fc99 	bl	800bc7a <USBD_CtlError>
            ret = USBD_FAIL;
 800a348:	2303      	movs	r3, #3
 800a34a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a34c:	e008      	b.n	800a360 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a34e:	6839      	ldr	r1, [r7, #0]
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f001 fc92 	bl	800bc7a <USBD_CtlError>
          ret = USBD_FAIL;
 800a356:	2303      	movs	r3, #3
 800a358:	75fb      	strb	r3, [r7, #23]
          break;
 800a35a:	e002      	b.n	800a362 <USBD_CDC_Setup+0x19e>
          break;
 800a35c:	bf00      	nop
 800a35e:	e008      	b.n	800a372 <USBD_CDC_Setup+0x1ae>
          break;
 800a360:	bf00      	nop
      }
      break;
 800a362:	e006      	b.n	800a372 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f001 fc87 	bl	800bc7a <USBD_CtlError>
      ret = USBD_FAIL;
 800a36c:	2303      	movs	r3, #3
 800a36e:	75fb      	strb	r3, [r7, #23]
      break;
 800a370:	bf00      	nop
  }

  return (uint8_t)ret;
 800a372:	7dfb      	ldrb	r3, [r7, #23]
}
 800a374:	4618      	mov	r0, r3
 800a376:	3718      	adds	r7, #24
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	460b      	mov	r3, r1
 800a386:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a38e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	32b0      	adds	r2, #176	@ 0xb0
 800a39a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d101      	bne.n	800a3a6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	e065      	b.n	800a472 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	32b0      	adds	r2, #176	@ 0xb0
 800a3b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a3b6:	78fb      	ldrb	r3, [r7, #3]
 800a3b8:	f003 020f 	and.w	r2, r3, #15
 800a3bc:	6879      	ldr	r1, [r7, #4]
 800a3be:	4613      	mov	r3, r2
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	4413      	add	r3, r2
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	440b      	add	r3, r1
 800a3c8:	3318      	adds	r3, #24
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d02f      	beq.n	800a430 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a3d0:	78fb      	ldrb	r3, [r7, #3]
 800a3d2:	f003 020f 	and.w	r2, r3, #15
 800a3d6:	6879      	ldr	r1, [r7, #4]
 800a3d8:	4613      	mov	r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	4413      	add	r3, r2
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	440b      	add	r3, r1
 800a3e2:	3318      	adds	r3, #24
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	78fb      	ldrb	r3, [r7, #3]
 800a3e8:	f003 010f 	and.w	r1, r3, #15
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	00db      	lsls	r3, r3, #3
 800a3f2:	440b      	add	r3, r1
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	4403      	add	r3, r0
 800a3f8:	331c      	adds	r3, #28
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	fbb2 f1f3 	udiv	r1, r2, r3
 800a400:	fb01 f303 	mul.w	r3, r1, r3
 800a404:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a406:	2b00      	cmp	r3, #0
 800a408:	d112      	bne.n	800a430 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a40a:	78fb      	ldrb	r3, [r7, #3]
 800a40c:	f003 020f 	and.w	r2, r3, #15
 800a410:	6879      	ldr	r1, [r7, #4]
 800a412:	4613      	mov	r3, r2
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	4413      	add	r3, r2
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	440b      	add	r3, r1
 800a41c:	3318      	adds	r3, #24
 800a41e:	2200      	movs	r2, #0
 800a420:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a422:	78f9      	ldrb	r1, [r7, #3]
 800a424:	2300      	movs	r3, #0
 800a426:	2200      	movs	r2, #0
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f002 f9b2 	bl	800c792 <USBD_LL_Transmit>
 800a42e:	e01f      	b.n	800a470 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	2200      	movs	r2, #0
 800a434:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	33b0      	adds	r3, #176	@ 0xb0
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	4413      	add	r3, r2
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d010      	beq.n	800a470 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	33b0      	adds	r3, #176	@ 0xb0
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	4413      	add	r3, r2
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	68ba      	ldr	r2, [r7, #8]
 800a462:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a466:	68ba      	ldr	r2, [r7, #8]
 800a468:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a46c:	78fa      	ldrb	r2, [r7, #3]
 800a46e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b084      	sub	sp, #16
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	460b      	mov	r3, r1
 800a484:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	32b0      	adds	r2, #176	@ 0xb0
 800a490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a494:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	32b0      	adds	r2, #176	@ 0xb0
 800a4a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d101      	bne.n	800a4ac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a4a8:	2303      	movs	r3, #3
 800a4aa:	e01a      	b.n	800a4e2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a4ac:	78fb      	ldrb	r3, [r7, #3]
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f002 f9b0 	bl	800c816 <USBD_LL_GetRxDataSize>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	33b0      	adds	r3, #176	@ 0xb0
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	4413      	add	r3, r2
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a4dc:	4611      	mov	r1, r2
 800a4de:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b084      	sub	sp, #16
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	32b0      	adds	r2, #176	@ 0xb0
 800a4fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a500:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d101      	bne.n	800a50c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a508:	2303      	movs	r3, #3
 800a50a:	e024      	b.n	800a556 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	33b0      	adds	r3, #176	@ 0xb0
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	4413      	add	r3, r2
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d019      	beq.n	800a554 <USBD_CDC_EP0_RxReady+0x6a>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a526:	2bff      	cmp	r3, #255	@ 0xff
 800a528:	d014      	beq.n	800a554 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	33b0      	adds	r3, #176	@ 0xb0
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	4413      	add	r3, r2
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a542:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a54a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	22ff      	movs	r2, #255	@ 0xff
 800a550:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
	...

0800a560 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b086      	sub	sp, #24
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a568:	2182      	movs	r1, #130	@ 0x82
 800a56a:	4818      	ldr	r0, [pc, #96]	@ (800a5cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a56c:	f000 fd4f 	bl	800b00e <USBD_GetEpDesc>
 800a570:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a572:	2101      	movs	r1, #1
 800a574:	4815      	ldr	r0, [pc, #84]	@ (800a5cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a576:	f000 fd4a 	bl	800b00e <USBD_GetEpDesc>
 800a57a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a57c:	2181      	movs	r1, #129	@ 0x81
 800a57e:	4813      	ldr	r0, [pc, #76]	@ (800a5cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a580:	f000 fd45 	bl	800b00e <USBD_GetEpDesc>
 800a584:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d002      	beq.n	800a592 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	2210      	movs	r2, #16
 800a590:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d006      	beq.n	800a5a6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a5a0:	711a      	strb	r2, [r3, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d006      	beq.n	800a5ba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a5b4:	711a      	strb	r2, [r3, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2243      	movs	r2, #67	@ 0x43
 800a5be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a5c0:	4b02      	ldr	r3, [pc, #8]	@ (800a5cc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3718      	adds	r7, #24
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	20000050 	.word	0x20000050

0800a5d0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b086      	sub	sp, #24
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a5d8:	2182      	movs	r1, #130	@ 0x82
 800a5da:	4818      	ldr	r0, [pc, #96]	@ (800a63c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a5dc:	f000 fd17 	bl	800b00e <USBD_GetEpDesc>
 800a5e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a5e2:	2101      	movs	r1, #1
 800a5e4:	4815      	ldr	r0, [pc, #84]	@ (800a63c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a5e6:	f000 fd12 	bl	800b00e <USBD_GetEpDesc>
 800a5ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a5ec:	2181      	movs	r1, #129	@ 0x81
 800a5ee:	4813      	ldr	r0, [pc, #76]	@ (800a63c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a5f0:	f000 fd0d 	bl	800b00e <USBD_GetEpDesc>
 800a5f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d002      	beq.n	800a602 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	2210      	movs	r2, #16
 800a600:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d006      	beq.n	800a616 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	2200      	movs	r2, #0
 800a60c:	711a      	strb	r2, [r3, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	f042 0202 	orr.w	r2, r2, #2
 800a614:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d006      	beq.n	800a62a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2200      	movs	r2, #0
 800a620:	711a      	strb	r2, [r3, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	f042 0202 	orr.w	r2, r2, #2
 800a628:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2243      	movs	r2, #67	@ 0x43
 800a62e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a630:	4b02      	ldr	r3, [pc, #8]	@ (800a63c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a632:	4618      	mov	r0, r3
 800a634:	3718      	adds	r7, #24
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	20000050 	.word	0x20000050

0800a640 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a648:	2182      	movs	r1, #130	@ 0x82
 800a64a:	4818      	ldr	r0, [pc, #96]	@ (800a6ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a64c:	f000 fcdf 	bl	800b00e <USBD_GetEpDesc>
 800a650:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a652:	2101      	movs	r1, #1
 800a654:	4815      	ldr	r0, [pc, #84]	@ (800a6ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a656:	f000 fcda 	bl	800b00e <USBD_GetEpDesc>
 800a65a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a65c:	2181      	movs	r1, #129	@ 0x81
 800a65e:	4813      	ldr	r0, [pc, #76]	@ (800a6ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a660:	f000 fcd5 	bl	800b00e <USBD_GetEpDesc>
 800a664:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d002      	beq.n	800a672 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	2210      	movs	r2, #16
 800a670:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d006      	beq.n	800a686 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a680:	711a      	strb	r2, [r3, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d006      	beq.n	800a69a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2200      	movs	r2, #0
 800a690:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a694:	711a      	strb	r2, [r3, #4]
 800a696:	2200      	movs	r2, #0
 800a698:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2243      	movs	r2, #67	@ 0x43
 800a69e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a6a0:	4b02      	ldr	r3, [pc, #8]	@ (800a6ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3718      	adds	r7, #24
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	20000050 	.word	0x20000050

0800a6b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	220a      	movs	r2, #10
 800a6bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a6be:	4b03      	ldr	r3, [pc, #12]	@ (800a6cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr
 800a6cc:	2000000c 	.word	0x2000000c

0800a6d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d101      	bne.n	800a6e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a6e0:	2303      	movs	r3, #3
 800a6e2:	e009      	b.n	800a6f8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	33b0      	adds	r3, #176	@ 0xb0
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	4413      	add	r3, r2
 800a6f2:	683a      	ldr	r2, [r7, #0]
 800a6f4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a6f6:	2300      	movs	r3, #0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a704:	b480      	push	{r7}
 800a706:	b087      	sub	sp, #28
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	32b0      	adds	r2, #176	@ 0xb0
 800a71a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a71e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d101      	bne.n	800a72a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a726:	2303      	movs	r3, #3
 800a728:	e008      	b.n	800a73c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	68ba      	ldr	r2, [r7, #8]
 800a72e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a73a:	2300      	movs	r3, #0
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	371c      	adds	r7, #28
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	32b0      	adds	r2, #176	@ 0xb0
 800a75c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a760:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d101      	bne.n	800a76c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a768:	2303      	movs	r3, #3
 800a76a:	e004      	b.n	800a776 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	683a      	ldr	r2, [r7, #0]
 800a770:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3714      	adds	r7, #20
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr
	...

0800a784 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	32b0      	adds	r2, #176	@ 0xb0
 800a796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a79a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a79c:	2301      	movs	r3, #1
 800a79e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d101      	bne.n	800a7aa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a7a6:	2303      	movs	r3, #3
 800a7a8:	e025      	b.n	800a7f6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d11f      	bne.n	800a7f4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a7bc:	4b10      	ldr	r3, [pc, #64]	@ (800a800 <USBD_CDC_TransmitPacket+0x7c>)
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	f003 020f 	and.w	r2, r3, #15
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	4413      	add	r3, r2
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	4403      	add	r3, r0
 800a7d6:	3318      	adds	r3, #24
 800a7d8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a7da:	4b09      	ldr	r3, [pc, #36]	@ (800a800 <USBD_CDC_TransmitPacket+0x7c>)
 800a7dc:	7819      	ldrb	r1, [r3, #0]
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f001 ffd1 	bl	800c792 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	20000093 	.word	0x20000093

0800a804 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	32b0      	adds	r2, #176	@ 0xb0
 800a816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a81a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	32b0      	adds	r2, #176	@ 0xb0
 800a826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d101      	bne.n	800a832 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a82e:	2303      	movs	r3, #3
 800a830:	e018      	b.n	800a864 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	7c1b      	ldrb	r3, [r3, #16]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d10a      	bne.n	800a850 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a83a:	4b0c      	ldr	r3, [pc, #48]	@ (800a86c <USBD_CDC_ReceivePacket+0x68>)
 800a83c:	7819      	ldrb	r1, [r3, #0]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a844:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f001 ffc3 	bl	800c7d4 <USBD_LL_PrepareReceive>
 800a84e:	e008      	b.n	800a862 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a850:	4b06      	ldr	r3, [pc, #24]	@ (800a86c <USBD_CDC_ReceivePacket+0x68>)
 800a852:	7819      	ldrb	r1, [r3, #0]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a85a:	2340      	movs	r3, #64	@ 0x40
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f001 ffb9 	bl	800c7d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	20000094 	.word	0x20000094

0800a870 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	4613      	mov	r3, r2
 800a87c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d101      	bne.n	800a888 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a884:	2303      	movs	r3, #3
 800a886:	e01f      	b.n	800a8c8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2200      	movs	r2, #0
 800a894:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2200      	movs	r2, #0
 800a89c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d003      	beq.n	800a8ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	68ba      	ldr	r2, [r7, #8]
 800a8aa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	79fa      	ldrb	r2, [r7, #7]
 800a8ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a8bc:	68f8      	ldr	r0, [r7, #12]
 800a8be:	f001 fe33 	bl	800c528 <USBD_LL_Init>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a8c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3718      	adds	r7, #24
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d101      	bne.n	800a8e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	e025      	b.n	800a934 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	683a      	ldr	r2, [r7, #0]
 800a8ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	32ae      	adds	r2, #174	@ 0xae
 800a8fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00f      	beq.n	800a924 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	32ae      	adds	r2, #174	@ 0xae
 800a90e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a914:	f107 020e 	add.w	r2, r7, #14
 800a918:	4610      	mov	r0, r2
 800a91a:	4798      	blx	r3
 800a91c:	4602      	mov	r2, r0
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a92a:	1c5a      	adds	r2, r3, #1
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3710      	adds	r7, #16
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f001 fe3b 	bl	800c5c0 <USBD_LL_Start>
 800a94a:	4603      	mov	r3, r0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3708      	adds	r7, #8
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a95c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a95e:	4618      	mov	r0, r3
 800a960:	370c      	adds	r7, #12
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr

0800a96a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b084      	sub	sp, #16
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
 800a972:	460b      	mov	r3, r1
 800a974:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a976:	2300      	movs	r3, #0
 800a978:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a980:	2b00      	cmp	r3, #0
 800a982:	d009      	beq.n	800a998 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	78fa      	ldrb	r2, [r7, #3]
 800a98e:	4611      	mov	r1, r2
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	4798      	blx	r3
 800a994:	4603      	mov	r3, r0
 800a996:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a998:	7bfb      	ldrb	r3, [r7, #15]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3710      	adds	r7, #16
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b084      	sub	sp, #16
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	78fa      	ldrb	r2, [r7, #3]
 800a9bc:	4611      	mov	r1, r2
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	4798      	blx	r3
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d001      	beq.n	800a9cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a9c8:	2303      	movs	r3, #3
 800a9ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b084      	sub	sp, #16
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
 800a9de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a9e6:	6839      	ldr	r1, [r7, #0]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f001 f90c 	bl	800bc06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800aa0a:	f003 031f 	and.w	r3, r3, #31
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	d01a      	beq.n	800aa48 <USBD_LL_SetupStage+0x72>
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	d822      	bhi.n	800aa5c <USBD_LL_SetupStage+0x86>
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d002      	beq.n	800aa20 <USBD_LL_SetupStage+0x4a>
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d00a      	beq.n	800aa34 <USBD_LL_SetupStage+0x5e>
 800aa1e:	e01d      	b.n	800aa5c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800aa26:	4619      	mov	r1, r3
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 fb63 	bl	800b0f4 <USBD_StdDevReq>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	73fb      	strb	r3, [r7, #15]
      break;
 800aa32:	e020      	b.n	800aa76 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 fbcb 	bl	800b1d8 <USBD_StdItfReq>
 800aa42:	4603      	mov	r3, r0
 800aa44:	73fb      	strb	r3, [r7, #15]
      break;
 800aa46:	e016      	b.n	800aa76 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800aa4e:	4619      	mov	r1, r3
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 fc2d 	bl	800b2b0 <USBD_StdEPReq>
 800aa56:	4603      	mov	r3, r0
 800aa58:	73fb      	strb	r3, [r7, #15]
      break;
 800aa5a:	e00c      	b.n	800aa76 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800aa62:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	4619      	mov	r1, r3
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f001 fe08 	bl	800c680 <USBD_LL_StallEP>
 800aa70:	4603      	mov	r3, r0
 800aa72:	73fb      	strb	r3, [r7, #15]
      break;
 800aa74:	bf00      	nop
  }

  return ret;
 800aa76:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3710      	adds	r7, #16
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b086      	sub	sp, #24
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	460b      	mov	r3, r1
 800aa8a:	607a      	str	r2, [r7, #4]
 800aa8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800aa92:	7afb      	ldrb	r3, [r7, #11]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d16e      	bne.n	800ab76 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800aa9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800aaa6:	2b03      	cmp	r3, #3
 800aaa8:	f040 8098 	bne.w	800abdc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	689a      	ldr	r2, [r3, #8]
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d913      	bls.n	800aae0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	689a      	ldr	r2, [r3, #8]
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	1ad2      	subs	r2, r2, r3
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	68da      	ldr	r2, [r3, #12]
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	4293      	cmp	r3, r2
 800aad0:	bf28      	it	cs
 800aad2:	4613      	movcs	r3, r2
 800aad4:	461a      	mov	r2, r3
 800aad6:	6879      	ldr	r1, [r7, #4]
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f001 f994 	bl	800be06 <USBD_CtlContinueRx>
 800aade:	e07d      	b.n	800abdc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800aae6:	f003 031f 	and.w	r3, r3, #31
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d014      	beq.n	800ab18 <USBD_LL_DataOutStage+0x98>
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d81d      	bhi.n	800ab2e <USBD_LL_DataOutStage+0xae>
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d002      	beq.n	800aafc <USBD_LL_DataOutStage+0x7c>
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d003      	beq.n	800ab02 <USBD_LL_DataOutStage+0x82>
 800aafa:	e018      	b.n	800ab2e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800aafc:	2300      	movs	r3, #0
 800aafe:	75bb      	strb	r3, [r7, #22]
            break;
 800ab00:	e018      	b.n	800ab34 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f000 fa64 	bl	800afda <USBD_CoreFindIF>
 800ab12:	4603      	mov	r3, r0
 800ab14:	75bb      	strb	r3, [r7, #22]
            break;
 800ab16:	e00d      	b.n	800ab34 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	4619      	mov	r1, r3
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f000 fa66 	bl	800aff4 <USBD_CoreFindEP>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	75bb      	strb	r3, [r7, #22]
            break;
 800ab2c:	e002      	b.n	800ab34 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	75bb      	strb	r3, [r7, #22]
            break;
 800ab32:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ab34:	7dbb      	ldrb	r3, [r7, #22]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d119      	bne.n	800ab6e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	2b03      	cmp	r3, #3
 800ab44:	d113      	bne.n	800ab6e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ab46:	7dba      	ldrb	r2, [r7, #22]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	32ae      	adds	r2, #174	@ 0xae
 800ab4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d00b      	beq.n	800ab6e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ab56:	7dba      	ldrb	r2, [r7, #22]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ab5e:	7dba      	ldrb	r2, [r7, #22]
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	32ae      	adds	r2, #174	@ 0xae
 800ab64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ab6e:	68f8      	ldr	r0, [r7, #12]
 800ab70:	f001 f95a 	bl	800be28 <USBD_CtlSendStatus>
 800ab74:	e032      	b.n	800abdc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ab76:	7afb      	ldrb	r3, [r7, #11]
 800ab78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	4619      	mov	r1, r3
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f000 fa37 	bl	800aff4 <USBD_CoreFindEP>
 800ab86:	4603      	mov	r3, r0
 800ab88:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab8a:	7dbb      	ldrb	r3, [r7, #22]
 800ab8c:	2bff      	cmp	r3, #255	@ 0xff
 800ab8e:	d025      	beq.n	800abdc <USBD_LL_DataOutStage+0x15c>
 800ab90:	7dbb      	ldrb	r3, [r7, #22]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d122      	bne.n	800abdc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	2b03      	cmp	r3, #3
 800aba0:	d117      	bne.n	800abd2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800aba2:	7dba      	ldrb	r2, [r7, #22]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	32ae      	adds	r2, #174	@ 0xae
 800aba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abac:	699b      	ldr	r3, [r3, #24]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00f      	beq.n	800abd2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800abb2:	7dba      	ldrb	r2, [r7, #22]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800abba:	7dba      	ldrb	r2, [r7, #22]
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	32ae      	adds	r2, #174	@ 0xae
 800abc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc4:	699b      	ldr	r3, [r3, #24]
 800abc6:	7afa      	ldrb	r2, [r7, #11]
 800abc8:	4611      	mov	r1, r2
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	4798      	blx	r3
 800abce:	4603      	mov	r3, r0
 800abd0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800abd2:	7dfb      	ldrb	r3, [r7, #23]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d001      	beq.n	800abdc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800abd8:	7dfb      	ldrb	r3, [r7, #23]
 800abda:	e000      	b.n	800abde <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800abdc:	2300      	movs	r3, #0
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3718      	adds	r7, #24
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b086      	sub	sp, #24
 800abea:	af00      	add	r7, sp, #0
 800abec:	60f8      	str	r0, [r7, #12]
 800abee:	460b      	mov	r3, r1
 800abf0:	607a      	str	r2, [r7, #4]
 800abf2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800abf4:	7afb      	ldrb	r3, [r7, #11]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d16f      	bne.n	800acda <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	3314      	adds	r3, #20
 800abfe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	d15a      	bne.n	800acc0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	689a      	ldr	r2, [r3, #8]
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d914      	bls.n	800ac40 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	689a      	ldr	r2, [r3, #8]
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	1ad2      	subs	r2, r2, r3
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	461a      	mov	r2, r3
 800ac2a:	6879      	ldr	r1, [r7, #4]
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f001 f8bc 	bl	800bdaa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac32:	2300      	movs	r3, #0
 800ac34:	2200      	movs	r2, #0
 800ac36:	2100      	movs	r1, #0
 800ac38:	68f8      	ldr	r0, [r7, #12]
 800ac3a:	f001 fdcb 	bl	800c7d4 <USBD_LL_PrepareReceive>
 800ac3e:	e03f      	b.n	800acc0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	68da      	ldr	r2, [r3, #12]
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d11c      	bne.n	800ac86 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	685a      	ldr	r2, [r3, #4]
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d316      	bcc.n	800ac86 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	685a      	ldr	r2, [r3, #4]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d20f      	bcs.n	800ac86 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ac66:	2200      	movs	r2, #0
 800ac68:	2100      	movs	r1, #0
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	f001 f89d 	bl	800bdaa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2200      	movs	r2, #0
 800ac74:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac78:	2300      	movs	r3, #0
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	f001 fda8 	bl	800c7d4 <USBD_LL_PrepareReceive>
 800ac84:	e01c      	b.n	800acc0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	2b03      	cmp	r3, #3
 800ac90:	d10f      	bne.n	800acb2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d009      	beq.n	800acb2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acac:	68db      	ldr	r3, [r3, #12]
 800acae:	68f8      	ldr	r0, [r7, #12]
 800acb0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800acb2:	2180      	movs	r1, #128	@ 0x80
 800acb4:	68f8      	ldr	r0, [r7, #12]
 800acb6:	f001 fce3 	bl	800c680 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	f001 f8c7 	bl	800be4e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d03a      	beq.n	800ad40 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f7ff fe42 	bl	800a954 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2200      	movs	r2, #0
 800acd4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800acd8:	e032      	b.n	800ad40 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800acda:	7afb      	ldrb	r3, [r7, #11]
 800acdc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ace0:	b2db      	uxtb	r3, r3
 800ace2:	4619      	mov	r1, r3
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	f000 f985 	bl	800aff4 <USBD_CoreFindEP>
 800acea:	4603      	mov	r3, r0
 800acec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800acee:	7dfb      	ldrb	r3, [r7, #23]
 800acf0:	2bff      	cmp	r3, #255	@ 0xff
 800acf2:	d025      	beq.n	800ad40 <USBD_LL_DataInStage+0x15a>
 800acf4:	7dfb      	ldrb	r3, [r7, #23]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d122      	bne.n	800ad40 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	2b03      	cmp	r3, #3
 800ad04:	d11c      	bne.n	800ad40 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ad06:	7dfa      	ldrb	r2, [r7, #23]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	32ae      	adds	r2, #174	@ 0xae
 800ad0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad10:	695b      	ldr	r3, [r3, #20]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d014      	beq.n	800ad40 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ad16:	7dfa      	ldrb	r2, [r7, #23]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ad1e:	7dfa      	ldrb	r2, [r7, #23]
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	32ae      	adds	r2, #174	@ 0xae
 800ad24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad28:	695b      	ldr	r3, [r3, #20]
 800ad2a:	7afa      	ldrb	r2, [r7, #11]
 800ad2c:	4611      	mov	r1, r2
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	4798      	blx	r3
 800ad32:	4603      	mov	r3, r0
 800ad34:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ad36:	7dbb      	ldrb	r3, [r7, #22]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d001      	beq.n	800ad40 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ad3c:	7dbb      	ldrb	r3, [r7, #22]
 800ad3e:	e000      	b.n	800ad42 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3718      	adds	r7, #24
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b084      	sub	sp, #16
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad52:	2300      	movs	r3, #0
 800ad54:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d014      	beq.n	800adb0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00e      	beq.n	800adb0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	6852      	ldr	r2, [r2, #4]
 800ad9e:	b2d2      	uxtb	r2, r2
 800ada0:	4611      	mov	r1, r2
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	4798      	blx	r3
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d001      	beq.n	800adb0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800adac:	2303      	movs	r3, #3
 800adae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800adb0:	2340      	movs	r3, #64	@ 0x40
 800adb2:	2200      	movs	r2, #0
 800adb4:	2100      	movs	r1, #0
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f001 fc1d 	bl	800c5f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2240      	movs	r2, #64	@ 0x40
 800adc8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800adcc:	2340      	movs	r3, #64	@ 0x40
 800adce:	2200      	movs	r2, #0
 800add0:	2180      	movs	r1, #128	@ 0x80
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f001 fc0f 	bl	800c5f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2201      	movs	r2, #1
 800addc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2240      	movs	r2, #64	@ 0x40
 800ade2:	621a      	str	r2, [r3, #32]

  return ret;
 800ade4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800adee:	b480      	push	{r7}
 800adf0:	b083      	sub	sp, #12
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
 800adf6:	460b      	mov	r3, r1
 800adf8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	78fa      	ldrb	r2, [r7, #3]
 800adfe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	370c      	adds	r7, #12
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr

0800ae0e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ae0e:	b480      	push	{r7}
 800ae10:	b083      	sub	sp, #12
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	2b04      	cmp	r3, #4
 800ae20:	d006      	beq.n	800ae30 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae28:	b2da      	uxtb	r2, r3
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2204      	movs	r2, #4
 800ae34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	370c      	adds	r7, #12
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr

0800ae46 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ae46:	b480      	push	{r7}
 800ae48:	b083      	sub	sp, #12
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	2b04      	cmp	r3, #4
 800ae58:	d106      	bne.n	800ae68 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ae60:	b2da      	uxtb	r2, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ae68:	2300      	movs	r3, #0
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	370c      	adds	r7, #12
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr

0800ae76 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b082      	sub	sp, #8
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	2b03      	cmp	r3, #3
 800ae88:	d110      	bne.n	800aeac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00b      	beq.n	800aeac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae9a:	69db      	ldr	r3, [r3, #28]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d005      	beq.n	800aeac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aea6:	69db      	ldr	r3, [r3, #28]
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3708      	adds	r7, #8
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b082      	sub	sp, #8
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
 800aebe:	460b      	mov	r3, r1
 800aec0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	32ae      	adds	r2, #174	@ 0xae
 800aecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d101      	bne.n	800aed8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aed4:	2303      	movs	r3, #3
 800aed6:	e01c      	b.n	800af12 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	2b03      	cmp	r3, #3
 800aee2:	d115      	bne.n	800af10 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	32ae      	adds	r2, #174	@ 0xae
 800aeee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aef2:	6a1b      	ldr	r3, [r3, #32]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00b      	beq.n	800af10 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	32ae      	adds	r2, #174	@ 0xae
 800af02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af06:	6a1b      	ldr	r3, [r3, #32]
 800af08:	78fa      	ldrb	r2, [r7, #3]
 800af0a:	4611      	mov	r1, r2
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3708      	adds	r7, #8
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b082      	sub	sp, #8
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
 800af22:	460b      	mov	r3, r1
 800af24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	32ae      	adds	r2, #174	@ 0xae
 800af30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d101      	bne.n	800af3c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800af38:	2303      	movs	r3, #3
 800af3a:	e01c      	b.n	800af76 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af42:	b2db      	uxtb	r3, r3
 800af44:	2b03      	cmp	r3, #3
 800af46:	d115      	bne.n	800af74 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	32ae      	adds	r2, #174	@ 0xae
 800af52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d00b      	beq.n	800af74 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	32ae      	adds	r2, #174	@ 0xae
 800af66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af6c:	78fa      	ldrb	r2, [r7, #3]
 800af6e:	4611      	mov	r1, r2
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af74:	2300      	movs	r3, #0
}
 800af76:	4618      	mov	r0, r3
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800af7e:	b480      	push	{r7}
 800af80:	b083      	sub	sp, #12
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800af86:	2300      	movs	r3, #0
}
 800af88:	4618      	mov	r0, r3
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800af9c:	2300      	movs	r3, #0
 800af9e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00e      	beq.n	800afd0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	6852      	ldr	r2, [r2, #4]
 800afbe:	b2d2      	uxtb	r2, r2
 800afc0:	4611      	mov	r1, r2
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	4798      	blx	r3
 800afc6:	4603      	mov	r3, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d001      	beq.n	800afd0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800afcc:	2303      	movs	r3, #3
 800afce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800afd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800afda:	b480      	push	{r7}
 800afdc:	b083      	sub	sp, #12
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
 800afe2:	460b      	mov	r3, r1
 800afe4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800afe6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800afe8:	4618      	mov	r0, r3
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	460b      	mov	r3, r1
 800affe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b000:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b002:	4618      	mov	r0, r3
 800b004:	370c      	adds	r7, #12
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr

0800b00e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b086      	sub	sp, #24
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
 800b016:	460b      	mov	r3, r1
 800b018:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b022:	2300      	movs	r3, #0
 800b024:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	885b      	ldrh	r3, [r3, #2]
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	7812      	ldrb	r2, [r2, #0]
 800b030:	4293      	cmp	r3, r2
 800b032:	d91f      	bls.n	800b074 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b03a:	e013      	b.n	800b064 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b03c:	f107 030a 	add.w	r3, r7, #10
 800b040:	4619      	mov	r1, r3
 800b042:	6978      	ldr	r0, [r7, #20]
 800b044:	f000 f81b 	bl	800b07e <USBD_GetNextDesc>
 800b048:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	785b      	ldrb	r3, [r3, #1]
 800b04e:	2b05      	cmp	r3, #5
 800b050:	d108      	bne.n	800b064 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	789b      	ldrb	r3, [r3, #2]
 800b05a:	78fa      	ldrb	r2, [r7, #3]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d008      	beq.n	800b072 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b060:	2300      	movs	r3, #0
 800b062:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	885b      	ldrh	r3, [r3, #2]
 800b068:	b29a      	uxth	r2, r3
 800b06a:	897b      	ldrh	r3, [r7, #10]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d8e5      	bhi.n	800b03c <USBD_GetEpDesc+0x2e>
 800b070:	e000      	b.n	800b074 <USBD_GetEpDesc+0x66>
          break;
 800b072:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b074:	693b      	ldr	r3, [r7, #16]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3718      	adds	r7, #24
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b07e:	b480      	push	{r7}
 800b080:	b085      	sub	sp, #20
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
 800b086:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	881b      	ldrh	r3, [r3, #0]
 800b090:	68fa      	ldr	r2, [r7, #12]
 800b092:	7812      	ldrb	r2, [r2, #0]
 800b094:	4413      	add	r3, r2
 800b096:	b29a      	uxth	r2, r3
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3714      	adds	r7, #20
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr

0800b0b6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b0b6:	b480      	push	{r7}
 800b0b8:	b087      	sub	sp, #28
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b0d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b0d8:	021b      	lsls	r3, r3, #8
 800b0da:	b21a      	sxth	r2, r3
 800b0dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	b21b      	sxth	r3, r3
 800b0e4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b0e6:	89fb      	ldrh	r3, [r7, #14]
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	371c      	adds	r7, #28
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0fe:	2300      	movs	r3, #0
 800b100:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b10a:	2b40      	cmp	r3, #64	@ 0x40
 800b10c:	d005      	beq.n	800b11a <USBD_StdDevReq+0x26>
 800b10e:	2b40      	cmp	r3, #64	@ 0x40
 800b110:	d857      	bhi.n	800b1c2 <USBD_StdDevReq+0xce>
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00f      	beq.n	800b136 <USBD_StdDevReq+0x42>
 800b116:	2b20      	cmp	r3, #32
 800b118:	d153      	bne.n	800b1c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	32ae      	adds	r2, #174	@ 0xae
 800b124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b128:	689b      	ldr	r3, [r3, #8]
 800b12a:	6839      	ldr	r1, [r7, #0]
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	4798      	blx	r3
 800b130:	4603      	mov	r3, r0
 800b132:	73fb      	strb	r3, [r7, #15]
      break;
 800b134:	e04a      	b.n	800b1cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	785b      	ldrb	r3, [r3, #1]
 800b13a:	2b09      	cmp	r3, #9
 800b13c:	d83b      	bhi.n	800b1b6 <USBD_StdDevReq+0xc2>
 800b13e:	a201      	add	r2, pc, #4	@ (adr r2, 800b144 <USBD_StdDevReq+0x50>)
 800b140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b144:	0800b199 	.word	0x0800b199
 800b148:	0800b1ad 	.word	0x0800b1ad
 800b14c:	0800b1b7 	.word	0x0800b1b7
 800b150:	0800b1a3 	.word	0x0800b1a3
 800b154:	0800b1b7 	.word	0x0800b1b7
 800b158:	0800b177 	.word	0x0800b177
 800b15c:	0800b16d 	.word	0x0800b16d
 800b160:	0800b1b7 	.word	0x0800b1b7
 800b164:	0800b18f 	.word	0x0800b18f
 800b168:	0800b181 	.word	0x0800b181
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b16c:	6839      	ldr	r1, [r7, #0]
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 fa3c 	bl	800b5ec <USBD_GetDescriptor>
          break;
 800b174:	e024      	b.n	800b1c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b176:	6839      	ldr	r1, [r7, #0]
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 fba1 	bl	800b8c0 <USBD_SetAddress>
          break;
 800b17e:	e01f      	b.n	800b1c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b180:	6839      	ldr	r1, [r7, #0]
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 fbe0 	bl	800b948 <USBD_SetConfig>
 800b188:	4603      	mov	r3, r0
 800b18a:	73fb      	strb	r3, [r7, #15]
          break;
 800b18c:	e018      	b.n	800b1c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b18e:	6839      	ldr	r1, [r7, #0]
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 fc83 	bl	800ba9c <USBD_GetConfig>
          break;
 800b196:	e013      	b.n	800b1c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b198:	6839      	ldr	r1, [r7, #0]
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 fcb4 	bl	800bb08 <USBD_GetStatus>
          break;
 800b1a0:	e00e      	b.n	800b1c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b1a2:	6839      	ldr	r1, [r7, #0]
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 fce3 	bl	800bb70 <USBD_SetFeature>
          break;
 800b1aa:	e009      	b.n	800b1c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b1ac:	6839      	ldr	r1, [r7, #0]
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 fd07 	bl	800bbc2 <USBD_ClrFeature>
          break;
 800b1b4:	e004      	b.n	800b1c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b1b6:	6839      	ldr	r1, [r7, #0]
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f000 fd5e 	bl	800bc7a <USBD_CtlError>
          break;
 800b1be:	bf00      	nop
      }
      break;
 800b1c0:	e004      	b.n	800b1cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b1c2:	6839      	ldr	r1, [r7, #0]
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 fd58 	bl	800bc7a <USBD_CtlError>
      break;
 800b1ca:	bf00      	nop
  }

  return ret;
 800b1cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3710      	adds	r7, #16
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	bf00      	nop

0800b1d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b1ee:	2b40      	cmp	r3, #64	@ 0x40
 800b1f0:	d005      	beq.n	800b1fe <USBD_StdItfReq+0x26>
 800b1f2:	2b40      	cmp	r3, #64	@ 0x40
 800b1f4:	d852      	bhi.n	800b29c <USBD_StdItfReq+0xc4>
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d001      	beq.n	800b1fe <USBD_StdItfReq+0x26>
 800b1fa:	2b20      	cmp	r3, #32
 800b1fc:	d14e      	bne.n	800b29c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b204:	b2db      	uxtb	r3, r3
 800b206:	3b01      	subs	r3, #1
 800b208:	2b02      	cmp	r3, #2
 800b20a:	d840      	bhi.n	800b28e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	889b      	ldrh	r3, [r3, #4]
 800b210:	b2db      	uxtb	r3, r3
 800b212:	2b01      	cmp	r3, #1
 800b214:	d836      	bhi.n	800b284 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	889b      	ldrh	r3, [r3, #4]
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	4619      	mov	r1, r3
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f7ff fedb 	bl	800afda <USBD_CoreFindIF>
 800b224:	4603      	mov	r3, r0
 800b226:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b228:	7bbb      	ldrb	r3, [r7, #14]
 800b22a:	2bff      	cmp	r3, #255	@ 0xff
 800b22c:	d01d      	beq.n	800b26a <USBD_StdItfReq+0x92>
 800b22e:	7bbb      	ldrb	r3, [r7, #14]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d11a      	bne.n	800b26a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b234:	7bba      	ldrb	r2, [r7, #14]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	32ae      	adds	r2, #174	@ 0xae
 800b23a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d00f      	beq.n	800b264 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b244:	7bba      	ldrb	r2, [r7, #14]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b24c:	7bba      	ldrb	r2, [r7, #14]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	32ae      	adds	r2, #174	@ 0xae
 800b252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	6839      	ldr	r1, [r7, #0]
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	4798      	blx	r3
 800b25e:	4603      	mov	r3, r0
 800b260:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b262:	e004      	b.n	800b26e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b264:	2303      	movs	r3, #3
 800b266:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b268:	e001      	b.n	800b26e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b26a:	2303      	movs	r3, #3
 800b26c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	88db      	ldrh	r3, [r3, #6]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d110      	bne.n	800b298 <USBD_StdItfReq+0xc0>
 800b276:	7bfb      	ldrb	r3, [r7, #15]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d10d      	bne.n	800b298 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 fdd3 	bl	800be28 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b282:	e009      	b.n	800b298 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b284:	6839      	ldr	r1, [r7, #0]
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 fcf7 	bl	800bc7a <USBD_CtlError>
          break;
 800b28c:	e004      	b.n	800b298 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b28e:	6839      	ldr	r1, [r7, #0]
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 fcf2 	bl	800bc7a <USBD_CtlError>
          break;
 800b296:	e000      	b.n	800b29a <USBD_StdItfReq+0xc2>
          break;
 800b298:	bf00      	nop
      }
      break;
 800b29a:	e004      	b.n	800b2a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b29c:	6839      	ldr	r1, [r7, #0]
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 fceb 	bl	800bc7a <USBD_CtlError>
      break;
 800b2a4:	bf00      	nop
  }

  return ret;
 800b2a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3710      	adds	r7, #16
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	889b      	ldrh	r3, [r3, #4]
 800b2c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b2cc:	2b40      	cmp	r3, #64	@ 0x40
 800b2ce:	d007      	beq.n	800b2e0 <USBD_StdEPReq+0x30>
 800b2d0:	2b40      	cmp	r3, #64	@ 0x40
 800b2d2:	f200 817f 	bhi.w	800b5d4 <USBD_StdEPReq+0x324>
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d02a      	beq.n	800b330 <USBD_StdEPReq+0x80>
 800b2da:	2b20      	cmp	r3, #32
 800b2dc:	f040 817a 	bne.w	800b5d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b2e0:	7bbb      	ldrb	r3, [r7, #14]
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f7ff fe85 	bl	800aff4 <USBD_CoreFindEP>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b2ee:	7b7b      	ldrb	r3, [r7, #13]
 800b2f0:	2bff      	cmp	r3, #255	@ 0xff
 800b2f2:	f000 8174 	beq.w	800b5de <USBD_StdEPReq+0x32e>
 800b2f6:	7b7b      	ldrb	r3, [r7, #13]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	f040 8170 	bne.w	800b5de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b2fe:	7b7a      	ldrb	r2, [r7, #13]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b306:	7b7a      	ldrb	r2, [r7, #13]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	32ae      	adds	r2, #174	@ 0xae
 800b30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	2b00      	cmp	r3, #0
 800b314:	f000 8163 	beq.w	800b5de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b318:	7b7a      	ldrb	r2, [r7, #13]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	32ae      	adds	r2, #174	@ 0xae
 800b31e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	6839      	ldr	r1, [r7, #0]
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	4798      	blx	r3
 800b32a:	4603      	mov	r3, r0
 800b32c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b32e:	e156      	b.n	800b5de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	785b      	ldrb	r3, [r3, #1]
 800b334:	2b03      	cmp	r3, #3
 800b336:	d008      	beq.n	800b34a <USBD_StdEPReq+0x9a>
 800b338:	2b03      	cmp	r3, #3
 800b33a:	f300 8145 	bgt.w	800b5c8 <USBD_StdEPReq+0x318>
 800b33e:	2b00      	cmp	r3, #0
 800b340:	f000 809b 	beq.w	800b47a <USBD_StdEPReq+0x1ca>
 800b344:	2b01      	cmp	r3, #1
 800b346:	d03c      	beq.n	800b3c2 <USBD_StdEPReq+0x112>
 800b348:	e13e      	b.n	800b5c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b350:	b2db      	uxtb	r3, r3
 800b352:	2b02      	cmp	r3, #2
 800b354:	d002      	beq.n	800b35c <USBD_StdEPReq+0xac>
 800b356:	2b03      	cmp	r3, #3
 800b358:	d016      	beq.n	800b388 <USBD_StdEPReq+0xd8>
 800b35a:	e02c      	b.n	800b3b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b35c:	7bbb      	ldrb	r3, [r7, #14]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00d      	beq.n	800b37e <USBD_StdEPReq+0xce>
 800b362:	7bbb      	ldrb	r3, [r7, #14]
 800b364:	2b80      	cmp	r3, #128	@ 0x80
 800b366:	d00a      	beq.n	800b37e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b368:	7bbb      	ldrb	r3, [r7, #14]
 800b36a:	4619      	mov	r1, r3
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f001 f987 	bl	800c680 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b372:	2180      	movs	r1, #128	@ 0x80
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f001 f983 	bl	800c680 <USBD_LL_StallEP>
 800b37a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b37c:	e020      	b.n	800b3c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b37e:	6839      	ldr	r1, [r7, #0]
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 fc7a 	bl	800bc7a <USBD_CtlError>
              break;
 800b386:	e01b      	b.n	800b3c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	885b      	ldrh	r3, [r3, #2]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d10e      	bne.n	800b3ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b390:	7bbb      	ldrb	r3, [r7, #14]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00b      	beq.n	800b3ae <USBD_StdEPReq+0xfe>
 800b396:	7bbb      	ldrb	r3, [r7, #14]
 800b398:	2b80      	cmp	r3, #128	@ 0x80
 800b39a:	d008      	beq.n	800b3ae <USBD_StdEPReq+0xfe>
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	88db      	ldrh	r3, [r3, #6]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d104      	bne.n	800b3ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b3a4:	7bbb      	ldrb	r3, [r7, #14]
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f001 f969 	bl	800c680 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 fd3a 	bl	800be28 <USBD_CtlSendStatus>

              break;
 800b3b4:	e004      	b.n	800b3c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b3b6:	6839      	ldr	r1, [r7, #0]
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 fc5e 	bl	800bc7a <USBD_CtlError>
              break;
 800b3be:	bf00      	nop
          }
          break;
 800b3c0:	e107      	b.n	800b5d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3c8:	b2db      	uxtb	r3, r3
 800b3ca:	2b02      	cmp	r3, #2
 800b3cc:	d002      	beq.n	800b3d4 <USBD_StdEPReq+0x124>
 800b3ce:	2b03      	cmp	r3, #3
 800b3d0:	d016      	beq.n	800b400 <USBD_StdEPReq+0x150>
 800b3d2:	e04b      	b.n	800b46c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b3d4:	7bbb      	ldrb	r3, [r7, #14]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d00d      	beq.n	800b3f6 <USBD_StdEPReq+0x146>
 800b3da:	7bbb      	ldrb	r3, [r7, #14]
 800b3dc:	2b80      	cmp	r3, #128	@ 0x80
 800b3de:	d00a      	beq.n	800b3f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b3e0:	7bbb      	ldrb	r3, [r7, #14]
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f001 f94b 	bl	800c680 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3ea:	2180      	movs	r1, #128	@ 0x80
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f001 f947 	bl	800c680 <USBD_LL_StallEP>
 800b3f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b3f4:	e040      	b.n	800b478 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b3f6:	6839      	ldr	r1, [r7, #0]
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 fc3e 	bl	800bc7a <USBD_CtlError>
              break;
 800b3fe:	e03b      	b.n	800b478 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	885b      	ldrh	r3, [r3, #2]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d136      	bne.n	800b476 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b408:	7bbb      	ldrb	r3, [r7, #14]
 800b40a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d004      	beq.n	800b41c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b412:	7bbb      	ldrb	r3, [r7, #14]
 800b414:	4619      	mov	r1, r3
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f001 f951 	bl	800c6be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 fd03 	bl	800be28 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b422:	7bbb      	ldrb	r3, [r7, #14]
 800b424:	4619      	mov	r1, r3
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f7ff fde4 	bl	800aff4 <USBD_CoreFindEP>
 800b42c:	4603      	mov	r3, r0
 800b42e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b430:	7b7b      	ldrb	r3, [r7, #13]
 800b432:	2bff      	cmp	r3, #255	@ 0xff
 800b434:	d01f      	beq.n	800b476 <USBD_StdEPReq+0x1c6>
 800b436:	7b7b      	ldrb	r3, [r7, #13]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d11c      	bne.n	800b476 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b43c:	7b7a      	ldrb	r2, [r7, #13]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b444:	7b7a      	ldrb	r2, [r7, #13]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	32ae      	adds	r2, #174	@ 0xae
 800b44a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b44e:	689b      	ldr	r3, [r3, #8]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d010      	beq.n	800b476 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b454:	7b7a      	ldrb	r2, [r7, #13]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	32ae      	adds	r2, #174	@ 0xae
 800b45a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b45e:	689b      	ldr	r3, [r3, #8]
 800b460:	6839      	ldr	r1, [r7, #0]
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	4798      	blx	r3
 800b466:	4603      	mov	r3, r0
 800b468:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b46a:	e004      	b.n	800b476 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b46c:	6839      	ldr	r1, [r7, #0]
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 fc03 	bl	800bc7a <USBD_CtlError>
              break;
 800b474:	e000      	b.n	800b478 <USBD_StdEPReq+0x1c8>
              break;
 800b476:	bf00      	nop
          }
          break;
 800b478:	e0ab      	b.n	800b5d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b480:	b2db      	uxtb	r3, r3
 800b482:	2b02      	cmp	r3, #2
 800b484:	d002      	beq.n	800b48c <USBD_StdEPReq+0x1dc>
 800b486:	2b03      	cmp	r3, #3
 800b488:	d032      	beq.n	800b4f0 <USBD_StdEPReq+0x240>
 800b48a:	e097      	b.n	800b5bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b48c:	7bbb      	ldrb	r3, [r7, #14]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d007      	beq.n	800b4a2 <USBD_StdEPReq+0x1f2>
 800b492:	7bbb      	ldrb	r3, [r7, #14]
 800b494:	2b80      	cmp	r3, #128	@ 0x80
 800b496:	d004      	beq.n	800b4a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b498:	6839      	ldr	r1, [r7, #0]
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fbed 	bl	800bc7a <USBD_CtlError>
                break;
 800b4a0:	e091      	b.n	800b5c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b4a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	da0b      	bge.n	800b4c2 <USBD_StdEPReq+0x212>
 800b4aa:	7bbb      	ldrb	r3, [r7, #14]
 800b4ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	4413      	add	r3, r2
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	3310      	adds	r3, #16
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	4413      	add	r3, r2
 800b4be:	3304      	adds	r3, #4
 800b4c0:	e00b      	b.n	800b4da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b4c2:	7bbb      	ldrb	r3, [r7, #14]
 800b4c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	4413      	add	r3, r2
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	4413      	add	r3, r2
 800b4d8:	3304      	adds	r3, #4
 800b4da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	2202      	movs	r2, #2
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 fc43 	bl	800bd74 <USBD_CtlSendData>
              break;
 800b4ee:	e06a      	b.n	800b5c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b4f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	da11      	bge.n	800b51c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b4f8:	7bbb      	ldrb	r3, [r7, #14]
 800b4fa:	f003 020f 	and.w	r2, r3, #15
 800b4fe:	6879      	ldr	r1, [r7, #4]
 800b500:	4613      	mov	r3, r2
 800b502:	009b      	lsls	r3, r3, #2
 800b504:	4413      	add	r3, r2
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	440b      	add	r3, r1
 800b50a:	3324      	adds	r3, #36	@ 0x24
 800b50c:	881b      	ldrh	r3, [r3, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d117      	bne.n	800b542 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b512:	6839      	ldr	r1, [r7, #0]
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 fbb0 	bl	800bc7a <USBD_CtlError>
                  break;
 800b51a:	e054      	b.n	800b5c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b51c:	7bbb      	ldrb	r3, [r7, #14]
 800b51e:	f003 020f 	and.w	r2, r3, #15
 800b522:	6879      	ldr	r1, [r7, #4]
 800b524:	4613      	mov	r3, r2
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	4413      	add	r3, r2
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	440b      	add	r3, r1
 800b52e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b532:	881b      	ldrh	r3, [r3, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d104      	bne.n	800b542 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b538:	6839      	ldr	r1, [r7, #0]
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 fb9d 	bl	800bc7a <USBD_CtlError>
                  break;
 800b540:	e041      	b.n	800b5c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b542:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b546:	2b00      	cmp	r3, #0
 800b548:	da0b      	bge.n	800b562 <USBD_StdEPReq+0x2b2>
 800b54a:	7bbb      	ldrb	r3, [r7, #14]
 800b54c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b550:	4613      	mov	r3, r2
 800b552:	009b      	lsls	r3, r3, #2
 800b554:	4413      	add	r3, r2
 800b556:	009b      	lsls	r3, r3, #2
 800b558:	3310      	adds	r3, #16
 800b55a:	687a      	ldr	r2, [r7, #4]
 800b55c:	4413      	add	r3, r2
 800b55e:	3304      	adds	r3, #4
 800b560:	e00b      	b.n	800b57a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b562:	7bbb      	ldrb	r3, [r7, #14]
 800b564:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b568:	4613      	mov	r3, r2
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	4413      	add	r3, r2
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	4413      	add	r3, r2
 800b578:	3304      	adds	r3, #4
 800b57a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b57c:	7bbb      	ldrb	r3, [r7, #14]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d002      	beq.n	800b588 <USBD_StdEPReq+0x2d8>
 800b582:	7bbb      	ldrb	r3, [r7, #14]
 800b584:	2b80      	cmp	r3, #128	@ 0x80
 800b586:	d103      	bne.n	800b590 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	2200      	movs	r2, #0
 800b58c:	601a      	str	r2, [r3, #0]
 800b58e:	e00e      	b.n	800b5ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b590:	7bbb      	ldrb	r3, [r7, #14]
 800b592:	4619      	mov	r1, r3
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f001 f8b1 	bl	800c6fc <USBD_LL_IsStallEP>
 800b59a:	4603      	mov	r3, r0
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d003      	beq.n	800b5a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	601a      	str	r2, [r3, #0]
 800b5a6:	e002      	b.n	800b5ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	2202      	movs	r2, #2
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 fbdd 	bl	800bd74 <USBD_CtlSendData>
              break;
 800b5ba:	e004      	b.n	800b5c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b5bc:	6839      	ldr	r1, [r7, #0]
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 fb5b 	bl	800bc7a <USBD_CtlError>
              break;
 800b5c4:	bf00      	nop
          }
          break;
 800b5c6:	e004      	b.n	800b5d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b5c8:	6839      	ldr	r1, [r7, #0]
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 fb55 	bl	800bc7a <USBD_CtlError>
          break;
 800b5d0:	bf00      	nop
      }
      break;
 800b5d2:	e005      	b.n	800b5e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b5d4:	6839      	ldr	r1, [r7, #0]
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 fb4f 	bl	800bc7a <USBD_CtlError>
      break;
 800b5dc:	e000      	b.n	800b5e0 <USBD_StdEPReq+0x330>
      break;
 800b5de:	bf00      	nop
  }

  return ret;
 800b5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
	...

0800b5ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b5fe:	2300      	movs	r3, #0
 800b600:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	885b      	ldrh	r3, [r3, #2]
 800b606:	0a1b      	lsrs	r3, r3, #8
 800b608:	b29b      	uxth	r3, r3
 800b60a:	3b01      	subs	r3, #1
 800b60c:	2b06      	cmp	r3, #6
 800b60e:	f200 8128 	bhi.w	800b862 <USBD_GetDescriptor+0x276>
 800b612:	a201      	add	r2, pc, #4	@ (adr r2, 800b618 <USBD_GetDescriptor+0x2c>)
 800b614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b618:	0800b635 	.word	0x0800b635
 800b61c:	0800b64d 	.word	0x0800b64d
 800b620:	0800b68d 	.word	0x0800b68d
 800b624:	0800b863 	.word	0x0800b863
 800b628:	0800b863 	.word	0x0800b863
 800b62c:	0800b803 	.word	0x0800b803
 800b630:	0800b82f 	.word	0x0800b82f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	7c12      	ldrb	r2, [r2, #16]
 800b640:	f107 0108 	add.w	r1, r7, #8
 800b644:	4610      	mov	r0, r2
 800b646:	4798      	blx	r3
 800b648:	60f8      	str	r0, [r7, #12]
      break;
 800b64a:	e112      	b.n	800b872 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	7c1b      	ldrb	r3, [r3, #16]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10d      	bne.n	800b670 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b65a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b65c:	f107 0208 	add.w	r2, r7, #8
 800b660:	4610      	mov	r0, r2
 800b662:	4798      	blx	r3
 800b664:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	3301      	adds	r3, #1
 800b66a:	2202      	movs	r2, #2
 800b66c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b66e:	e100      	b.n	800b872 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b678:	f107 0208 	add.w	r2, r7, #8
 800b67c:	4610      	mov	r0, r2
 800b67e:	4798      	blx	r3
 800b680:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	3301      	adds	r3, #1
 800b686:	2202      	movs	r2, #2
 800b688:	701a      	strb	r2, [r3, #0]
      break;
 800b68a:	e0f2      	b.n	800b872 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	885b      	ldrh	r3, [r3, #2]
 800b690:	b2db      	uxtb	r3, r3
 800b692:	2b05      	cmp	r3, #5
 800b694:	f200 80ac 	bhi.w	800b7f0 <USBD_GetDescriptor+0x204>
 800b698:	a201      	add	r2, pc, #4	@ (adr r2, 800b6a0 <USBD_GetDescriptor+0xb4>)
 800b69a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b69e:	bf00      	nop
 800b6a0:	0800b6b9 	.word	0x0800b6b9
 800b6a4:	0800b6ed 	.word	0x0800b6ed
 800b6a8:	0800b721 	.word	0x0800b721
 800b6ac:	0800b755 	.word	0x0800b755
 800b6b0:	0800b789 	.word	0x0800b789
 800b6b4:	0800b7bd 	.word	0x0800b7bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d00b      	beq.n	800b6dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	687a      	ldr	r2, [r7, #4]
 800b6ce:	7c12      	ldrb	r2, [r2, #16]
 800b6d0:	f107 0108 	add.w	r1, r7, #8
 800b6d4:	4610      	mov	r0, r2
 800b6d6:	4798      	blx	r3
 800b6d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6da:	e091      	b.n	800b800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6dc:	6839      	ldr	r1, [r7, #0]
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 facb 	bl	800bc7a <USBD_CtlError>
            err++;
 800b6e4:	7afb      	ldrb	r3, [r7, #11]
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b6ea:	e089      	b.n	800b800 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d00b      	beq.n	800b710 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	7c12      	ldrb	r2, [r2, #16]
 800b704:	f107 0108 	add.w	r1, r7, #8
 800b708:	4610      	mov	r0, r2
 800b70a:	4798      	blx	r3
 800b70c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b70e:	e077      	b.n	800b800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b710:	6839      	ldr	r1, [r7, #0]
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 fab1 	bl	800bc7a <USBD_CtlError>
            err++;
 800b718:	7afb      	ldrb	r3, [r7, #11]
 800b71a:	3301      	adds	r3, #1
 800b71c:	72fb      	strb	r3, [r7, #11]
          break;
 800b71e:	e06f      	b.n	800b800 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d00b      	beq.n	800b744 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	7c12      	ldrb	r2, [r2, #16]
 800b738:	f107 0108 	add.w	r1, r7, #8
 800b73c:	4610      	mov	r0, r2
 800b73e:	4798      	blx	r3
 800b740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b742:	e05d      	b.n	800b800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b744:	6839      	ldr	r1, [r7, #0]
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 fa97 	bl	800bc7a <USBD_CtlError>
            err++;
 800b74c:	7afb      	ldrb	r3, [r7, #11]
 800b74e:	3301      	adds	r3, #1
 800b750:	72fb      	strb	r3, [r7, #11]
          break;
 800b752:	e055      	b.n	800b800 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b75a:	691b      	ldr	r3, [r3, #16]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00b      	beq.n	800b778 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b766:	691b      	ldr	r3, [r3, #16]
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	7c12      	ldrb	r2, [r2, #16]
 800b76c:	f107 0108 	add.w	r1, r7, #8
 800b770:	4610      	mov	r0, r2
 800b772:	4798      	blx	r3
 800b774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b776:	e043      	b.n	800b800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b778:	6839      	ldr	r1, [r7, #0]
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fa7d 	bl	800bc7a <USBD_CtlError>
            err++;
 800b780:	7afb      	ldrb	r3, [r7, #11]
 800b782:	3301      	adds	r3, #1
 800b784:	72fb      	strb	r3, [r7, #11]
          break;
 800b786:	e03b      	b.n	800b800 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b78e:	695b      	ldr	r3, [r3, #20]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d00b      	beq.n	800b7ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b79a:	695b      	ldr	r3, [r3, #20]
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	7c12      	ldrb	r2, [r2, #16]
 800b7a0:	f107 0108 	add.w	r1, r7, #8
 800b7a4:	4610      	mov	r0, r2
 800b7a6:	4798      	blx	r3
 800b7a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7aa:	e029      	b.n	800b800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7ac:	6839      	ldr	r1, [r7, #0]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fa63 	bl	800bc7a <USBD_CtlError>
            err++;
 800b7b4:	7afb      	ldrb	r3, [r7, #11]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b7ba:	e021      	b.n	800b800 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7c2:	699b      	ldr	r3, [r3, #24]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d00b      	beq.n	800b7e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7ce:	699b      	ldr	r3, [r3, #24]
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	7c12      	ldrb	r2, [r2, #16]
 800b7d4:	f107 0108 	add.w	r1, r7, #8
 800b7d8:	4610      	mov	r0, r2
 800b7da:	4798      	blx	r3
 800b7dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7de:	e00f      	b.n	800b800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7e0:	6839      	ldr	r1, [r7, #0]
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 fa49 	bl	800bc7a <USBD_CtlError>
            err++;
 800b7e8:	7afb      	ldrb	r3, [r7, #11]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	72fb      	strb	r3, [r7, #11]
          break;
 800b7ee:	e007      	b.n	800b800 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b7f0:	6839      	ldr	r1, [r7, #0]
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 fa41 	bl	800bc7a <USBD_CtlError>
          err++;
 800b7f8:	7afb      	ldrb	r3, [r7, #11]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b7fe:	bf00      	nop
      }
      break;
 800b800:	e037      	b.n	800b872 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	7c1b      	ldrb	r3, [r3, #16]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d109      	bne.n	800b81e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b812:	f107 0208 	add.w	r2, r7, #8
 800b816:	4610      	mov	r0, r2
 800b818:	4798      	blx	r3
 800b81a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b81c:	e029      	b.n	800b872 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b81e:	6839      	ldr	r1, [r7, #0]
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 fa2a 	bl	800bc7a <USBD_CtlError>
        err++;
 800b826:	7afb      	ldrb	r3, [r7, #11]
 800b828:	3301      	adds	r3, #1
 800b82a:	72fb      	strb	r3, [r7, #11]
      break;
 800b82c:	e021      	b.n	800b872 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	7c1b      	ldrb	r3, [r3, #16]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d10d      	bne.n	800b852 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b83c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b83e:	f107 0208 	add.w	r2, r7, #8
 800b842:	4610      	mov	r0, r2
 800b844:	4798      	blx	r3
 800b846:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	3301      	adds	r3, #1
 800b84c:	2207      	movs	r2, #7
 800b84e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b850:	e00f      	b.n	800b872 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b852:	6839      	ldr	r1, [r7, #0]
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 fa10 	bl	800bc7a <USBD_CtlError>
        err++;
 800b85a:	7afb      	ldrb	r3, [r7, #11]
 800b85c:	3301      	adds	r3, #1
 800b85e:	72fb      	strb	r3, [r7, #11]
      break;
 800b860:	e007      	b.n	800b872 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b862:	6839      	ldr	r1, [r7, #0]
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 fa08 	bl	800bc7a <USBD_CtlError>
      err++;
 800b86a:	7afb      	ldrb	r3, [r7, #11]
 800b86c:	3301      	adds	r3, #1
 800b86e:	72fb      	strb	r3, [r7, #11]
      break;
 800b870:	bf00      	nop
  }

  if (err != 0U)
 800b872:	7afb      	ldrb	r3, [r7, #11]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d11e      	bne.n	800b8b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	88db      	ldrh	r3, [r3, #6]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d016      	beq.n	800b8ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b880:	893b      	ldrh	r3, [r7, #8]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00e      	beq.n	800b8a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	88da      	ldrh	r2, [r3, #6]
 800b88a:	893b      	ldrh	r3, [r7, #8]
 800b88c:	4293      	cmp	r3, r2
 800b88e:	bf28      	it	cs
 800b890:	4613      	movcs	r3, r2
 800b892:	b29b      	uxth	r3, r3
 800b894:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b896:	893b      	ldrh	r3, [r7, #8]
 800b898:	461a      	mov	r2, r3
 800b89a:	68f9      	ldr	r1, [r7, #12]
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 fa69 	bl	800bd74 <USBD_CtlSendData>
 800b8a2:	e009      	b.n	800b8b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b8a4:	6839      	ldr	r1, [r7, #0]
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f000 f9e7 	bl	800bc7a <USBD_CtlError>
 800b8ac:	e004      	b.n	800b8b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 faba 	bl	800be28 <USBD_CtlSendStatus>
 800b8b4:	e000      	b.n	800b8b8 <USBD_GetDescriptor+0x2cc>
    return;
 800b8b6:	bf00      	nop
  }
}
 800b8b8:	3710      	adds	r7, #16
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop

0800b8c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	889b      	ldrh	r3, [r3, #4]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d131      	bne.n	800b936 <USBD_SetAddress+0x76>
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	88db      	ldrh	r3, [r3, #6]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d12d      	bne.n	800b936 <USBD_SetAddress+0x76>
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	885b      	ldrh	r3, [r3, #2]
 800b8de:	2b7f      	cmp	r3, #127	@ 0x7f
 800b8e0:	d829      	bhi.n	800b936 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	885b      	ldrh	r3, [r3, #2]
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	2b03      	cmp	r3, #3
 800b8f8:	d104      	bne.n	800b904 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b8fa:	6839      	ldr	r1, [r7, #0]
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 f9bc 	bl	800bc7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b902:	e01d      	b.n	800b940 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	7bfa      	ldrb	r2, [r7, #15]
 800b908:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b90c:	7bfb      	ldrb	r3, [r7, #15]
 800b90e:	4619      	mov	r1, r3
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 ff1f 	bl	800c754 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 fa86 	bl	800be28 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b91c:	7bfb      	ldrb	r3, [r7, #15]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d004      	beq.n	800b92c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2202      	movs	r2, #2
 800b926:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b92a:	e009      	b.n	800b940 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2201      	movs	r2, #1
 800b930:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b934:	e004      	b.n	800b940 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b936:	6839      	ldr	r1, [r7, #0]
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 f99e 	bl	800bc7a <USBD_CtlError>
  }
}
 800b93e:	bf00      	nop
 800b940:	bf00      	nop
 800b942:	3710      	adds	r7, #16
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b952:	2300      	movs	r3, #0
 800b954:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	885b      	ldrh	r3, [r3, #2]
 800b95a:	b2da      	uxtb	r2, r3
 800b95c:	4b4e      	ldr	r3, [pc, #312]	@ (800ba98 <USBD_SetConfig+0x150>)
 800b95e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b960:	4b4d      	ldr	r3, [pc, #308]	@ (800ba98 <USBD_SetConfig+0x150>)
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	2b01      	cmp	r3, #1
 800b966:	d905      	bls.n	800b974 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b968:	6839      	ldr	r1, [r7, #0]
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 f985 	bl	800bc7a <USBD_CtlError>
    return USBD_FAIL;
 800b970:	2303      	movs	r3, #3
 800b972:	e08c      	b.n	800ba8e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	2b02      	cmp	r3, #2
 800b97e:	d002      	beq.n	800b986 <USBD_SetConfig+0x3e>
 800b980:	2b03      	cmp	r3, #3
 800b982:	d029      	beq.n	800b9d8 <USBD_SetConfig+0x90>
 800b984:	e075      	b.n	800ba72 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b986:	4b44      	ldr	r3, [pc, #272]	@ (800ba98 <USBD_SetConfig+0x150>)
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d020      	beq.n	800b9d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b98e:	4b42      	ldr	r3, [pc, #264]	@ (800ba98 <USBD_SetConfig+0x150>)
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	461a      	mov	r2, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b998:	4b3f      	ldr	r3, [pc, #252]	@ (800ba98 <USBD_SetConfig+0x150>)
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	4619      	mov	r1, r3
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f7fe ffe3 	bl	800a96a <USBD_SetClassConfig>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b9a8:	7bfb      	ldrb	r3, [r7, #15]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d008      	beq.n	800b9c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b9ae:	6839      	ldr	r1, [r7, #0]
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 f962 	bl	800bc7a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2202      	movs	r2, #2
 800b9ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b9be:	e065      	b.n	800ba8c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 fa31 	bl	800be28 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2203      	movs	r2, #3
 800b9ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b9ce:	e05d      	b.n	800ba8c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 fa29 	bl	800be28 <USBD_CtlSendStatus>
      break;
 800b9d6:	e059      	b.n	800ba8c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b9d8:	4b2f      	ldr	r3, [pc, #188]	@ (800ba98 <USBD_SetConfig+0x150>)
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d112      	bne.n	800ba06 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2202      	movs	r2, #2
 800b9e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b9e8:	4b2b      	ldr	r3, [pc, #172]	@ (800ba98 <USBD_SetConfig+0x150>)
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b9f2:	4b29      	ldr	r3, [pc, #164]	@ (800ba98 <USBD_SetConfig+0x150>)
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f7fe ffd2 	bl	800a9a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 fa12 	bl	800be28 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ba04:	e042      	b.n	800ba8c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ba06:	4b24      	ldr	r3, [pc, #144]	@ (800ba98 <USBD_SetConfig+0x150>)
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d02a      	beq.n	800ba6a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f7fe ffc0 	bl	800a9a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ba22:	4b1d      	ldr	r3, [pc, #116]	@ (800ba98 <USBD_SetConfig+0x150>)
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	461a      	mov	r2, r3
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ba2c:	4b1a      	ldr	r3, [pc, #104]	@ (800ba98 <USBD_SetConfig+0x150>)
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	4619      	mov	r1, r3
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f7fe ff99 	bl	800a96a <USBD_SetClassConfig>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ba3c:	7bfb      	ldrb	r3, [r7, #15]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00f      	beq.n	800ba62 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ba42:	6839      	ldr	r1, [r7, #0]
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 f918 	bl	800bc7a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	4619      	mov	r1, r3
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f7fe ffa5 	bl	800a9a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2202      	movs	r2, #2
 800ba5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ba60:	e014      	b.n	800ba8c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 f9e0 	bl	800be28 <USBD_CtlSendStatus>
      break;
 800ba68:	e010      	b.n	800ba8c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 f9dc 	bl	800be28 <USBD_CtlSendStatus>
      break;
 800ba70:	e00c      	b.n	800ba8c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ba72:	6839      	ldr	r1, [r7, #0]
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 f900 	bl	800bc7a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ba7a:	4b07      	ldr	r3, [pc, #28]	@ (800ba98 <USBD_SetConfig+0x150>)
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	4619      	mov	r1, r3
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f7fe ff8e 	bl	800a9a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ba86:	2303      	movs	r3, #3
 800ba88:	73fb      	strb	r3, [r7, #15]
      break;
 800ba8a:	bf00      	nop
  }

  return ret;
 800ba8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3710      	adds	r7, #16
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	20000504 	.word	0x20000504

0800ba9c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	88db      	ldrh	r3, [r3, #6]
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d004      	beq.n	800bab8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800baae:	6839      	ldr	r1, [r7, #0]
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 f8e2 	bl	800bc7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bab6:	e023      	b.n	800bb00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	2b02      	cmp	r3, #2
 800bac2:	dc02      	bgt.n	800baca <USBD_GetConfig+0x2e>
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	dc03      	bgt.n	800bad0 <USBD_GetConfig+0x34>
 800bac8:	e015      	b.n	800baf6 <USBD_GetConfig+0x5a>
 800baca:	2b03      	cmp	r3, #3
 800bacc:	d00b      	beq.n	800bae6 <USBD_GetConfig+0x4a>
 800bace:	e012      	b.n	800baf6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2200      	movs	r2, #0
 800bad4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	3308      	adds	r3, #8
 800bada:	2201      	movs	r2, #1
 800badc:	4619      	mov	r1, r3
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 f948 	bl	800bd74 <USBD_CtlSendData>
        break;
 800bae4:	e00c      	b.n	800bb00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	3304      	adds	r3, #4
 800baea:	2201      	movs	r2, #1
 800baec:	4619      	mov	r1, r3
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f940 	bl	800bd74 <USBD_CtlSendData>
        break;
 800baf4:	e004      	b.n	800bb00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800baf6:	6839      	ldr	r1, [r7, #0]
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 f8be 	bl	800bc7a <USBD_CtlError>
        break;
 800bafe:	bf00      	nop
}
 800bb00:	bf00      	nop
 800bb02:	3708      	adds	r7, #8
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	2b02      	cmp	r3, #2
 800bb1e:	d81e      	bhi.n	800bb5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	88db      	ldrh	r3, [r3, #6]
 800bb24:	2b02      	cmp	r3, #2
 800bb26:	d004      	beq.n	800bb32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bb28:	6839      	ldr	r1, [r7, #0]
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 f8a5 	bl	800bc7a <USBD_CtlError>
        break;
 800bb30:	e01a      	b.n	800bb68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2201      	movs	r2, #1
 800bb36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d005      	beq.n	800bb4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	68db      	ldr	r3, [r3, #12]
 800bb46:	f043 0202 	orr.w	r2, r3, #2
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	330c      	adds	r3, #12
 800bb52:	2202      	movs	r2, #2
 800bb54:	4619      	mov	r1, r3
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 f90c 	bl	800bd74 <USBD_CtlSendData>
      break;
 800bb5c:	e004      	b.n	800bb68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bb5e:	6839      	ldr	r1, [r7, #0]
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 f88a 	bl	800bc7a <USBD_CtlError>
      break;
 800bb66:	bf00      	nop
  }
}
 800bb68:	bf00      	nop
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	885b      	ldrh	r3, [r3, #2]
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d107      	bne.n	800bb92 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2201      	movs	r2, #1
 800bb86:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 f94c 	bl	800be28 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bb90:	e013      	b.n	800bbba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	885b      	ldrh	r3, [r3, #2]
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	d10b      	bne.n	800bbb2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	889b      	ldrh	r3, [r3, #4]
 800bb9e:	0a1b      	lsrs	r3, r3, #8
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	b2da      	uxtb	r2, r3
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 f93c 	bl	800be28 <USBD_CtlSendStatus>
}
 800bbb0:	e003      	b.n	800bbba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bbb2:	6839      	ldr	r1, [r7, #0]
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 f860 	bl	800bc7a <USBD_CtlError>
}
 800bbba:	bf00      	nop
 800bbbc:	3708      	adds	r7, #8
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}

0800bbc2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbc2:	b580      	push	{r7, lr}
 800bbc4:	b082      	sub	sp, #8
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
 800bbca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	2b02      	cmp	r3, #2
 800bbd8:	d80b      	bhi.n	800bbf2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	885b      	ldrh	r3, [r3, #2]
 800bbde:	2b01      	cmp	r3, #1
 800bbe0:	d10c      	bne.n	800bbfc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f91c 	bl	800be28 <USBD_CtlSendStatus>
      }
      break;
 800bbf0:	e004      	b.n	800bbfc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bbf2:	6839      	ldr	r1, [r7, #0]
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 f840 	bl	800bc7a <USBD_CtlError>
      break;
 800bbfa:	e000      	b.n	800bbfe <USBD_ClrFeature+0x3c>
      break;
 800bbfc:	bf00      	nop
  }
}
 800bbfe:	bf00      	nop
 800bc00:	3708      	adds	r7, #8
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bc06:	b580      	push	{r7, lr}
 800bc08:	b084      	sub	sp, #16
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
 800bc0e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	781a      	ldrb	r2, [r3, #0]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	781a      	ldrb	r2, [r3, #0]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bc30:	68f8      	ldr	r0, [r7, #12]
 800bc32:	f7ff fa40 	bl	800b0b6 <SWAPBYTE>
 800bc36:	4603      	mov	r3, r0
 800bc38:	461a      	mov	r2, r3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	3301      	adds	r3, #1
 800bc42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	3301      	adds	r3, #1
 800bc48:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bc4a:	68f8      	ldr	r0, [r7, #12]
 800bc4c:	f7ff fa33 	bl	800b0b6 <SWAPBYTE>
 800bc50:	4603      	mov	r3, r0
 800bc52:	461a      	mov	r2, r3
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	3301      	adds	r3, #1
 800bc62:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	f7ff fa26 	bl	800b0b6 <SWAPBYTE>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	80da      	strh	r2, [r3, #6]
}
 800bc72:	bf00      	nop
 800bc74:	3710      	adds	r7, #16
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b082      	sub	sp, #8
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
 800bc82:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc84:	2180      	movs	r1, #128	@ 0x80
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 fcfa 	bl	800c680 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bc8c:	2100      	movs	r1, #0
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 fcf6 	bl	800c680 <USBD_LL_StallEP>
}
 800bc94:	bf00      	nop
 800bc96:	3708      	adds	r7, #8
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b086      	sub	sp, #24
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d042      	beq.n	800bd38 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800bcb6:	6938      	ldr	r0, [r7, #16]
 800bcb8:	f000 f842 	bl	800bd40 <USBD_GetLen>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	005b      	lsls	r3, r3, #1
 800bcc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bcc6:	d808      	bhi.n	800bcda <USBD_GetString+0x3e>
 800bcc8:	6938      	ldr	r0, [r7, #16]
 800bcca:	f000 f839 	bl	800bd40 <USBD_GetLen>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	005b      	lsls	r3, r3, #1
 800bcd6:	b29a      	uxth	r2, r3
 800bcd8:	e001      	b.n	800bcde <USBD_GetString+0x42>
 800bcda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bce2:	7dfb      	ldrb	r3, [r7, #23]
 800bce4:	68ba      	ldr	r2, [r7, #8]
 800bce6:	4413      	add	r3, r2
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	7812      	ldrb	r2, [r2, #0]
 800bcec:	701a      	strb	r2, [r3, #0]
  idx++;
 800bcee:	7dfb      	ldrb	r3, [r7, #23]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bcf4:	7dfb      	ldrb	r3, [r7, #23]
 800bcf6:	68ba      	ldr	r2, [r7, #8]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	2203      	movs	r2, #3
 800bcfc:	701a      	strb	r2, [r3, #0]
  idx++;
 800bcfe:	7dfb      	ldrb	r3, [r7, #23]
 800bd00:	3301      	adds	r3, #1
 800bd02:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bd04:	e013      	b.n	800bd2e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800bd06:	7dfb      	ldrb	r3, [r7, #23]
 800bd08:	68ba      	ldr	r2, [r7, #8]
 800bd0a:	4413      	add	r3, r2
 800bd0c:	693a      	ldr	r2, [r7, #16]
 800bd0e:	7812      	ldrb	r2, [r2, #0]
 800bd10:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	3301      	adds	r3, #1
 800bd16:	613b      	str	r3, [r7, #16]
    idx++;
 800bd18:	7dfb      	ldrb	r3, [r7, #23]
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bd1e:	7dfb      	ldrb	r3, [r7, #23]
 800bd20:	68ba      	ldr	r2, [r7, #8]
 800bd22:	4413      	add	r3, r2
 800bd24:	2200      	movs	r2, #0
 800bd26:	701a      	strb	r2, [r3, #0]
    idx++;
 800bd28:	7dfb      	ldrb	r3, [r7, #23]
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d1e7      	bne.n	800bd06 <USBD_GetString+0x6a>
 800bd36:	e000      	b.n	800bd3a <USBD_GetString+0x9e>
    return;
 800bd38:	bf00      	nop
  }
}
 800bd3a:	3718      	adds	r7, #24
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b085      	sub	sp, #20
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bd50:	e005      	b.n	800bd5e <USBD_GetLen+0x1e>
  {
    len++;
 800bd52:	7bfb      	ldrb	r3, [r7, #15]
 800bd54:	3301      	adds	r3, #1
 800bd56:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d1f5      	bne.n	800bd52 <USBD_GetLen+0x12>
  }

  return len;
 800bd66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3714      	adds	r7, #20
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr

0800bd74 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2202      	movs	r2, #2
 800bd84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	2100      	movs	r1, #0
 800bd9a:	68f8      	ldr	r0, [r7, #12]
 800bd9c:	f000 fcf9 	bl	800c792 <USBD_LL_Transmit>

  return USBD_OK;
 800bda0:	2300      	movs	r3, #0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3710      	adds	r7, #16
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b084      	sub	sp, #16
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	60f8      	str	r0, [r7, #12]
 800bdb2:	60b9      	str	r1, [r7, #8]
 800bdb4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	68ba      	ldr	r2, [r7, #8]
 800bdba:	2100      	movs	r1, #0
 800bdbc:	68f8      	ldr	r0, [r7, #12]
 800bdbe:	f000 fce8 	bl	800c792 <USBD_LL_Transmit>

  return USBD_OK;
 800bdc2:	2300      	movs	r3, #0
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3710      	adds	r7, #16
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b084      	sub	sp, #16
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2203      	movs	r2, #3
 800bddc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	68ba      	ldr	r2, [r7, #8]
 800bdf4:	2100      	movs	r1, #0
 800bdf6:	68f8      	ldr	r0, [r7, #12]
 800bdf8:	f000 fcec 	bl	800c7d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bdfc:	2300      	movs	r3, #0
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3710      	adds	r7, #16
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}

0800be06 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800be06:	b580      	push	{r7, lr}
 800be08:	b084      	sub	sp, #16
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	60f8      	str	r0, [r7, #12]
 800be0e:	60b9      	str	r1, [r7, #8]
 800be10:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	68ba      	ldr	r2, [r7, #8]
 800be16:	2100      	movs	r1, #0
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f000 fcdb 	bl	800c7d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be1e:	2300      	movs	r3, #0
}
 800be20:	4618      	mov	r0, r3
 800be22:	3710      	adds	r7, #16
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2204      	movs	r2, #4
 800be34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800be38:	2300      	movs	r3, #0
 800be3a:	2200      	movs	r2, #0
 800be3c:	2100      	movs	r1, #0
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 fca7 	bl	800c792 <USBD_LL_Transmit>

  return USBD_OK;
 800be44:	2300      	movs	r3, #0
}
 800be46:	4618      	mov	r0, r3
 800be48:	3708      	adds	r7, #8
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800be4e:	b580      	push	{r7, lr}
 800be50:	b082      	sub	sp, #8
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2205      	movs	r2, #5
 800be5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be5e:	2300      	movs	r3, #0
 800be60:	2200      	movs	r2, #0
 800be62:	2100      	movs	r1, #0
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 fcb5 	bl	800c7d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be6a:	2300      	movs	r3, #0
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3708      	adds	r7, #8
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800be78:	2200      	movs	r2, #0
 800be7a:	4912      	ldr	r1, [pc, #72]	@ (800bec4 <MX_USB_DEVICE_Init+0x50>)
 800be7c:	4812      	ldr	r0, [pc, #72]	@ (800bec8 <MX_USB_DEVICE_Init+0x54>)
 800be7e:	f7fe fcf7 	bl	800a870 <USBD_Init>
 800be82:	4603      	mov	r3, r0
 800be84:	2b00      	cmp	r3, #0
 800be86:	d001      	beq.n	800be8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800be88:	f7f8 fcb6 	bl	80047f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800be8c:	490f      	ldr	r1, [pc, #60]	@ (800becc <MX_USB_DEVICE_Init+0x58>)
 800be8e:	480e      	ldr	r0, [pc, #56]	@ (800bec8 <MX_USB_DEVICE_Init+0x54>)
 800be90:	f7fe fd1e 	bl	800a8d0 <USBD_RegisterClass>
 800be94:	4603      	mov	r3, r0
 800be96:	2b00      	cmp	r3, #0
 800be98:	d001      	beq.n	800be9e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800be9a:	f7f8 fcad 	bl	80047f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800be9e:	490c      	ldr	r1, [pc, #48]	@ (800bed0 <MX_USB_DEVICE_Init+0x5c>)
 800bea0:	4809      	ldr	r0, [pc, #36]	@ (800bec8 <MX_USB_DEVICE_Init+0x54>)
 800bea2:	f7fe fc15 	bl	800a6d0 <USBD_CDC_RegisterInterface>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d001      	beq.n	800beb0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800beac:	f7f8 fca4 	bl	80047f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800beb0:	4805      	ldr	r0, [pc, #20]	@ (800bec8 <MX_USB_DEVICE_Init+0x54>)
 800beb2:	f7fe fd43 	bl	800a93c <USBD_Start>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d001      	beq.n	800bec0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bebc:	f7f8 fc9c 	bl	80047f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bec0:	bf00      	nop
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	200000ac 	.word	0x200000ac
 800bec8:	20000508 	.word	0x20000508
 800becc:	20000018 	.word	0x20000018
 800bed0:	20000098 	.word	0x20000098

0800bed4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bed8:	2200      	movs	r2, #0
 800beda:	4905      	ldr	r1, [pc, #20]	@ (800bef0 <CDC_Init_FS+0x1c>)
 800bedc:	4805      	ldr	r0, [pc, #20]	@ (800bef4 <CDC_Init_FS+0x20>)
 800bede:	f7fe fc11 	bl	800a704 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bee2:	4905      	ldr	r1, [pc, #20]	@ (800bef8 <CDC_Init_FS+0x24>)
 800bee4:	4803      	ldr	r0, [pc, #12]	@ (800bef4 <CDC_Init_FS+0x20>)
 800bee6:	f7fe fc2f 	bl	800a748 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800beea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800beec:	4618      	mov	r0, r3
 800beee:	bd80      	pop	{r7, pc}
 800bef0:	20000fe4 	.word	0x20000fe4
 800bef4:	20000508 	.word	0x20000508
 800bef8:	200007e4 	.word	0x200007e4

0800befc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800befc:	b480      	push	{r7}
 800befe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bf00:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr

0800bf0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	4603      	mov	r3, r0
 800bf14:	6039      	str	r1, [r7, #0]
 800bf16:	71fb      	strb	r3, [r7, #7]
 800bf18:	4613      	mov	r3, r2
 800bf1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bf1c:	79fb      	ldrb	r3, [r7, #7]
 800bf1e:	2b23      	cmp	r3, #35	@ 0x23
 800bf20:	d84a      	bhi.n	800bfb8 <CDC_Control_FS+0xac>
 800bf22:	a201      	add	r2, pc, #4	@ (adr r2, 800bf28 <CDC_Control_FS+0x1c>)
 800bf24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf28:	0800bfb9 	.word	0x0800bfb9
 800bf2c:	0800bfb9 	.word	0x0800bfb9
 800bf30:	0800bfb9 	.word	0x0800bfb9
 800bf34:	0800bfb9 	.word	0x0800bfb9
 800bf38:	0800bfb9 	.word	0x0800bfb9
 800bf3c:	0800bfb9 	.word	0x0800bfb9
 800bf40:	0800bfb9 	.word	0x0800bfb9
 800bf44:	0800bfb9 	.word	0x0800bfb9
 800bf48:	0800bfb9 	.word	0x0800bfb9
 800bf4c:	0800bfb9 	.word	0x0800bfb9
 800bf50:	0800bfb9 	.word	0x0800bfb9
 800bf54:	0800bfb9 	.word	0x0800bfb9
 800bf58:	0800bfb9 	.word	0x0800bfb9
 800bf5c:	0800bfb9 	.word	0x0800bfb9
 800bf60:	0800bfb9 	.word	0x0800bfb9
 800bf64:	0800bfb9 	.word	0x0800bfb9
 800bf68:	0800bfb9 	.word	0x0800bfb9
 800bf6c:	0800bfb9 	.word	0x0800bfb9
 800bf70:	0800bfb9 	.word	0x0800bfb9
 800bf74:	0800bfb9 	.word	0x0800bfb9
 800bf78:	0800bfb9 	.word	0x0800bfb9
 800bf7c:	0800bfb9 	.word	0x0800bfb9
 800bf80:	0800bfb9 	.word	0x0800bfb9
 800bf84:	0800bfb9 	.word	0x0800bfb9
 800bf88:	0800bfb9 	.word	0x0800bfb9
 800bf8c:	0800bfb9 	.word	0x0800bfb9
 800bf90:	0800bfb9 	.word	0x0800bfb9
 800bf94:	0800bfb9 	.word	0x0800bfb9
 800bf98:	0800bfb9 	.word	0x0800bfb9
 800bf9c:	0800bfb9 	.word	0x0800bfb9
 800bfa0:	0800bfb9 	.word	0x0800bfb9
 800bfa4:	0800bfb9 	.word	0x0800bfb9
 800bfa8:	0800bfb9 	.word	0x0800bfb9
 800bfac:	0800bfb9 	.word	0x0800bfb9
 800bfb0:	0800bfb9 	.word	0x0800bfb9
 800bfb4:	0800bfb9 	.word	0x0800bfb9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bfb8:	bf00      	nop
  }

  return (USBD_OK);
 800bfba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	370c      	adds	r7, #12
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bfd2:	6879      	ldr	r1, [r7, #4]
 800bfd4:	480b      	ldr	r0, [pc, #44]	@ (800c004 <CDC_Receive_FS+0x3c>)
 800bfd6:	f7fe fbb7 	bl	800a748 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bfda:	480a      	ldr	r0, [pc, #40]	@ (800c004 <CDC_Receive_FS+0x3c>)
 800bfdc:	f7fe fc12 	bl	800a804 <USBD_CDC_ReceivePacket>

  USB_CDC_RxHandler(UserRxBufferFS, *Len);
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	4808      	ldr	r0, [pc, #32]	@ (800c008 <CDC_Receive_FS+0x40>)
 800bfe8:	f7f5 fcb8 	bl	800195c <USB_CDC_RxHandler>
  memset(UserRxBufferFS, '\0', *Len);
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	461a      	mov	r2, r3
 800bff2:	2100      	movs	r1, #0
 800bff4:	4804      	ldr	r0, [pc, #16]	@ (800c008 <CDC_Receive_FS+0x40>)
 800bff6:	f001 faae 	bl	800d556 <memset>

  return (USBD_OK);
 800bffa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3708      	adds	r7, #8
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	20000508 	.word	0x20000508
 800c008:	200007e4 	.word	0x200007e4

0800c00c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	460b      	mov	r3, r1
 800c016:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c018:	2300      	movs	r3, #0
 800c01a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c01c:	4b0d      	ldr	r3, [pc, #52]	@ (800c054 <CDC_Transmit_FS+0x48>)
 800c01e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c022:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d001      	beq.n	800c032 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c02e:	2301      	movs	r3, #1
 800c030:	e00b      	b.n	800c04a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c032:	887b      	ldrh	r3, [r7, #2]
 800c034:	461a      	mov	r2, r3
 800c036:	6879      	ldr	r1, [r7, #4]
 800c038:	4806      	ldr	r0, [pc, #24]	@ (800c054 <CDC_Transmit_FS+0x48>)
 800c03a:	f7fe fb63 	bl	800a704 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c03e:	4805      	ldr	r0, [pc, #20]	@ (800c054 <CDC_Transmit_FS+0x48>)
 800c040:	f7fe fba0 	bl	800a784 <USBD_CDC_TransmitPacket>
 800c044:	4603      	mov	r3, r0
 800c046:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c048:	7bfb      	ldrb	r3, [r7, #15]
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3710      	adds	r7, #16
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	20000508 	.word	0x20000508

0800c058 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c058:	b480      	push	{r7}
 800c05a:	b087      	sub	sp, #28
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	4613      	mov	r3, r2
 800c064:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c066:	2300      	movs	r3, #0
 800c068:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c06a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c06e:	4618      	mov	r0, r3
 800c070:	371c      	adds	r7, #28
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr
	...

0800c07c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b083      	sub	sp, #12
 800c080:	af00      	add	r7, sp, #0
 800c082:	4603      	mov	r3, r0
 800c084:	6039      	str	r1, [r7, #0]
 800c086:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	2212      	movs	r2, #18
 800c08c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c08e:	4b03      	ldr	r3, [pc, #12]	@ (800c09c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c090:	4618      	mov	r0, r3
 800c092:	370c      	adds	r7, #12
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr
 800c09c:	200000c8 	.word	0x200000c8

0800c0a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	6039      	str	r1, [r7, #0]
 800c0aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	2204      	movs	r2, #4
 800c0b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c0b2:	4b03      	ldr	r3, [pc, #12]	@ (800c0c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr
 800c0c0:	200000dc 	.word	0x200000dc

0800c0c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	6039      	str	r1, [r7, #0]
 800c0ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c0d0:	79fb      	ldrb	r3, [r7, #7]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d105      	bne.n	800c0e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c0d6:	683a      	ldr	r2, [r7, #0]
 800c0d8:	4907      	ldr	r1, [pc, #28]	@ (800c0f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c0da:	4808      	ldr	r0, [pc, #32]	@ (800c0fc <USBD_FS_ProductStrDescriptor+0x38>)
 800c0dc:	f7ff fdde 	bl	800bc9c <USBD_GetString>
 800c0e0:	e004      	b.n	800c0ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c0e2:	683a      	ldr	r2, [r7, #0]
 800c0e4:	4904      	ldr	r1, [pc, #16]	@ (800c0f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c0e6:	4805      	ldr	r0, [pc, #20]	@ (800c0fc <USBD_FS_ProductStrDescriptor+0x38>)
 800c0e8:	f7ff fdd8 	bl	800bc9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c0ec:	4b02      	ldr	r3, [pc, #8]	@ (800c0f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3708      	adds	r7, #8
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	200017e4 	.word	0x200017e4
 800c0fc:	0800f208 	.word	0x0800f208

0800c100 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	4603      	mov	r3, r0
 800c108:	6039      	str	r1, [r7, #0]
 800c10a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c10c:	683a      	ldr	r2, [r7, #0]
 800c10e:	4904      	ldr	r1, [pc, #16]	@ (800c120 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c110:	4804      	ldr	r0, [pc, #16]	@ (800c124 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c112:	f7ff fdc3 	bl	800bc9c <USBD_GetString>
  return USBD_StrDesc;
 800c116:	4b02      	ldr	r3, [pc, #8]	@ (800c120 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3708      	adds	r7, #8
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}
 800c120:	200017e4 	.word	0x200017e4
 800c124:	0800f220 	.word	0x0800f220

0800c128 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	4603      	mov	r3, r0
 800c130:	6039      	str	r1, [r7, #0]
 800c132:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	221a      	movs	r2, #26
 800c138:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c13a:	f000 f843 	bl	800c1c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c13e:	4b02      	ldr	r3, [pc, #8]	@ (800c148 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c140:	4618      	mov	r0, r3
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	200000e0 	.word	0x200000e0

0800c14c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	4603      	mov	r3, r0
 800c154:	6039      	str	r1, [r7, #0]
 800c156:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c158:	79fb      	ldrb	r3, [r7, #7]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d105      	bne.n	800c16a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c15e:	683a      	ldr	r2, [r7, #0]
 800c160:	4907      	ldr	r1, [pc, #28]	@ (800c180 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c162:	4808      	ldr	r0, [pc, #32]	@ (800c184 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c164:	f7ff fd9a 	bl	800bc9c <USBD_GetString>
 800c168:	e004      	b.n	800c174 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c16a:	683a      	ldr	r2, [r7, #0]
 800c16c:	4904      	ldr	r1, [pc, #16]	@ (800c180 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c16e:	4805      	ldr	r0, [pc, #20]	@ (800c184 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c170:	f7ff fd94 	bl	800bc9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c174:	4b02      	ldr	r3, [pc, #8]	@ (800c180 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c176:	4618      	mov	r0, r3
 800c178:	3708      	adds	r7, #8
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	200017e4 	.word	0x200017e4
 800c184:	0800f234 	.word	0x0800f234

0800c188 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	4603      	mov	r3, r0
 800c190:	6039      	str	r1, [r7, #0]
 800c192:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c194:	79fb      	ldrb	r3, [r7, #7]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d105      	bne.n	800c1a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c19a:	683a      	ldr	r2, [r7, #0]
 800c19c:	4907      	ldr	r1, [pc, #28]	@ (800c1bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c19e:	4808      	ldr	r0, [pc, #32]	@ (800c1c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c1a0:	f7ff fd7c 	bl	800bc9c <USBD_GetString>
 800c1a4:	e004      	b.n	800c1b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c1a6:	683a      	ldr	r2, [r7, #0]
 800c1a8:	4904      	ldr	r1, [pc, #16]	@ (800c1bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c1aa:	4805      	ldr	r0, [pc, #20]	@ (800c1c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c1ac:	f7ff fd76 	bl	800bc9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1b0:	4b02      	ldr	r3, [pc, #8]	@ (800c1bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3708      	adds	r7, #8
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	200017e4 	.word	0x200017e4
 800c1c0:	0800f240 	.word	0x0800f240

0800c1c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c1ca:	4b0f      	ldr	r3, [pc, #60]	@ (800c208 <Get_SerialNum+0x44>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c1d0:	4b0e      	ldr	r3, [pc, #56]	@ (800c20c <Get_SerialNum+0x48>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c1d6:	4b0e      	ldr	r3, [pc, #56]	@ (800c210 <Get_SerialNum+0x4c>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c1dc:	68fa      	ldr	r2, [r7, #12]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d009      	beq.n	800c1fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c1ea:	2208      	movs	r2, #8
 800c1ec:	4909      	ldr	r1, [pc, #36]	@ (800c214 <Get_SerialNum+0x50>)
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f000 f814 	bl	800c21c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c1f4:	2204      	movs	r2, #4
 800c1f6:	4908      	ldr	r1, [pc, #32]	@ (800c218 <Get_SerialNum+0x54>)
 800c1f8:	68b8      	ldr	r0, [r7, #8]
 800c1fa:	f000 f80f 	bl	800c21c <IntToUnicode>
  }
}
 800c1fe:	bf00      	nop
 800c200:	3710      	adds	r7, #16
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	1fff7a10 	.word	0x1fff7a10
 800c20c:	1fff7a14 	.word	0x1fff7a14
 800c210:	1fff7a18 	.word	0x1fff7a18
 800c214:	200000e2 	.word	0x200000e2
 800c218:	200000f2 	.word	0x200000f2

0800c21c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b087      	sub	sp, #28
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	4613      	mov	r3, r2
 800c228:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c22a:	2300      	movs	r3, #0
 800c22c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c22e:	2300      	movs	r3, #0
 800c230:	75fb      	strb	r3, [r7, #23]
 800c232:	e027      	b.n	800c284 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	0f1b      	lsrs	r3, r3, #28
 800c238:	2b09      	cmp	r3, #9
 800c23a:	d80b      	bhi.n	800c254 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	0f1b      	lsrs	r3, r3, #28
 800c240:	b2da      	uxtb	r2, r3
 800c242:	7dfb      	ldrb	r3, [r7, #23]
 800c244:	005b      	lsls	r3, r3, #1
 800c246:	4619      	mov	r1, r3
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	440b      	add	r3, r1
 800c24c:	3230      	adds	r2, #48	@ 0x30
 800c24e:	b2d2      	uxtb	r2, r2
 800c250:	701a      	strb	r2, [r3, #0]
 800c252:	e00a      	b.n	800c26a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	0f1b      	lsrs	r3, r3, #28
 800c258:	b2da      	uxtb	r2, r3
 800c25a:	7dfb      	ldrb	r3, [r7, #23]
 800c25c:	005b      	lsls	r3, r3, #1
 800c25e:	4619      	mov	r1, r3
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	440b      	add	r3, r1
 800c264:	3237      	adds	r2, #55	@ 0x37
 800c266:	b2d2      	uxtb	r2, r2
 800c268:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	011b      	lsls	r3, r3, #4
 800c26e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c270:	7dfb      	ldrb	r3, [r7, #23]
 800c272:	005b      	lsls	r3, r3, #1
 800c274:	3301      	adds	r3, #1
 800c276:	68ba      	ldr	r2, [r7, #8]
 800c278:	4413      	add	r3, r2
 800c27a:	2200      	movs	r2, #0
 800c27c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c27e:	7dfb      	ldrb	r3, [r7, #23]
 800c280:	3301      	adds	r3, #1
 800c282:	75fb      	strb	r3, [r7, #23]
 800c284:	7dfa      	ldrb	r2, [r7, #23]
 800c286:	79fb      	ldrb	r3, [r7, #7]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d3d3      	bcc.n	800c234 <IntToUnicode+0x18>
  }
}
 800c28c:	bf00      	nop
 800c28e:	bf00      	nop
 800c290:	371c      	adds	r7, #28
 800c292:	46bd      	mov	sp, r7
 800c294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c298:	4770      	bx	lr
	...

0800c29c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b08a      	sub	sp, #40	@ 0x28
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c2a4:	f107 0314 	add.w	r3, r7, #20
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	601a      	str	r2, [r3, #0]
 800c2ac:	605a      	str	r2, [r3, #4]
 800c2ae:	609a      	str	r2, [r3, #8]
 800c2b0:	60da      	str	r2, [r3, #12]
 800c2b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c2bc:	d13a      	bne.n	800c334 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c2be:	2300      	movs	r3, #0
 800c2c0:	613b      	str	r3, [r7, #16]
 800c2c2:	4b1e      	ldr	r3, [pc, #120]	@ (800c33c <HAL_PCD_MspInit+0xa0>)
 800c2c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2c6:	4a1d      	ldr	r2, [pc, #116]	@ (800c33c <HAL_PCD_MspInit+0xa0>)
 800c2c8:	f043 0301 	orr.w	r3, r3, #1
 800c2cc:	6313      	str	r3, [r2, #48]	@ 0x30
 800c2ce:	4b1b      	ldr	r3, [pc, #108]	@ (800c33c <HAL_PCD_MspInit+0xa0>)
 800c2d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2d2:	f003 0301 	and.w	r3, r3, #1
 800c2d6:	613b      	str	r3, [r7, #16]
 800c2d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c2da:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c2de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2e0:	2302      	movs	r3, #2
 800c2e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c2e8:	2303      	movs	r3, #3
 800c2ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c2ec:	230a      	movs	r3, #10
 800c2ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2f0:	f107 0314 	add.w	r3, r7, #20
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	4812      	ldr	r0, [pc, #72]	@ (800c340 <HAL_PCD_MspInit+0xa4>)
 800c2f8:	f7f8 febe 	bl	8005078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c2fc:	4b0f      	ldr	r3, [pc, #60]	@ (800c33c <HAL_PCD_MspInit+0xa0>)
 800c2fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c300:	4a0e      	ldr	r2, [pc, #56]	@ (800c33c <HAL_PCD_MspInit+0xa0>)
 800c302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c306:	6353      	str	r3, [r2, #52]	@ 0x34
 800c308:	2300      	movs	r3, #0
 800c30a:	60fb      	str	r3, [r7, #12]
 800c30c:	4b0b      	ldr	r3, [pc, #44]	@ (800c33c <HAL_PCD_MspInit+0xa0>)
 800c30e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c310:	4a0a      	ldr	r2, [pc, #40]	@ (800c33c <HAL_PCD_MspInit+0xa0>)
 800c312:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c316:	6453      	str	r3, [r2, #68]	@ 0x44
 800c318:	4b08      	ldr	r3, [pc, #32]	@ (800c33c <HAL_PCD_MspInit+0xa0>)
 800c31a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c31c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c320:	60fb      	str	r3, [r7, #12]
 800c322:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 800c324:	2200      	movs	r2, #0
 800c326:	2101      	movs	r1, #1
 800c328:	2043      	movs	r0, #67	@ 0x43
 800c32a:	f7f8 fe6e 	bl	800500a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c32e:	2043      	movs	r0, #67	@ 0x43
 800c330:	f7f8 fe87 	bl	8005042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c334:	bf00      	nop
 800c336:	3728      	adds	r7, #40	@ 0x28
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	40023800 	.word	0x40023800
 800c340:	40020000 	.word	0x40020000

0800c344 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c358:	4619      	mov	r1, r3
 800c35a:	4610      	mov	r0, r2
 800c35c:	f7fe fb3b 	bl	800a9d6 <USBD_LL_SetupStage>
}
 800c360:	bf00      	nop
 800c362:	3708      	adds	r7, #8
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	460b      	mov	r3, r1
 800c372:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c37a:	78fa      	ldrb	r2, [r7, #3]
 800c37c:	6879      	ldr	r1, [r7, #4]
 800c37e:	4613      	mov	r3, r2
 800c380:	00db      	lsls	r3, r3, #3
 800c382:	4413      	add	r3, r2
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	440b      	add	r3, r1
 800c388:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	78fb      	ldrb	r3, [r7, #3]
 800c390:	4619      	mov	r1, r3
 800c392:	f7fe fb75 	bl	800aa80 <USBD_LL_DataOutStage>
}
 800c396:	bf00      	nop
 800c398:	3708      	adds	r7, #8
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}

0800c39e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b082      	sub	sp, #8
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c3b0:	78fa      	ldrb	r2, [r7, #3]
 800c3b2:	6879      	ldr	r1, [r7, #4]
 800c3b4:	4613      	mov	r3, r2
 800c3b6:	00db      	lsls	r3, r3, #3
 800c3b8:	4413      	add	r3, r2
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	440b      	add	r3, r1
 800c3be:	3320      	adds	r3, #32
 800c3c0:	681a      	ldr	r2, [r3, #0]
 800c3c2:	78fb      	ldrb	r3, [r7, #3]
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	f7fe fc0e 	bl	800abe6 <USBD_LL_DataInStage>
}
 800c3ca:	bf00      	nop
 800c3cc:	3708      	adds	r7, #8
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}

0800c3d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b082      	sub	sp, #8
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7fe fd48 	bl	800ae76 <USBD_LL_SOF>
}
 800c3e6:	bf00      	nop
 800c3e8:	3708      	adds	r7, #8
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}

0800c3ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b084      	sub	sp, #16
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	79db      	ldrb	r3, [r3, #7]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d102      	bne.n	800c408 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c402:	2300      	movs	r3, #0
 800c404:	73fb      	strb	r3, [r7, #15]
 800c406:	e008      	b.n	800c41a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	79db      	ldrb	r3, [r3, #7]
 800c40c:	2b02      	cmp	r3, #2
 800c40e:	d102      	bne.n	800c416 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c410:	2301      	movs	r3, #1
 800c412:	73fb      	strb	r3, [r7, #15]
 800c414:	e001      	b.n	800c41a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c416:	f7f8 f9ef 	bl	80047f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c420:	7bfa      	ldrb	r2, [r7, #15]
 800c422:	4611      	mov	r1, r2
 800c424:	4618      	mov	r0, r3
 800c426:	f7fe fce2 	bl	800adee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c430:	4618      	mov	r0, r3
 800c432:	f7fe fc8a 	bl	800ad4a <USBD_LL_Reset>
}
 800c436:	bf00      	nop
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
	...

0800c440 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c44e:	4618      	mov	r0, r3
 800c450:	f7fe fcdd 	bl	800ae0e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	6812      	ldr	r2, [r2, #0]
 800c462:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c466:	f043 0301 	orr.w	r3, r3, #1
 800c46a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	7adb      	ldrb	r3, [r3, #11]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d005      	beq.n	800c480 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c474:	4b04      	ldr	r3, [pc, #16]	@ (800c488 <HAL_PCD_SuspendCallback+0x48>)
 800c476:	691b      	ldr	r3, [r3, #16]
 800c478:	4a03      	ldr	r2, [pc, #12]	@ (800c488 <HAL_PCD_SuspendCallback+0x48>)
 800c47a:	f043 0306 	orr.w	r3, r3, #6
 800c47e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c480:	bf00      	nop
 800c482:	3708      	adds	r7, #8
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	e000ed00 	.word	0xe000ed00

0800c48c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fe fcd3 	bl	800ae46 <USBD_LL_Resume>
}
 800c4a0:	bf00      	nop
 800c4a2:	3708      	adds	r7, #8
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c4ba:	78fa      	ldrb	r2, [r7, #3]
 800c4bc:	4611      	mov	r1, r2
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7fe fd2b 	bl	800af1a <USBD_LL_IsoOUTIncomplete>
}
 800c4c4:	bf00      	nop
 800c4c6:	3708      	adds	r7, #8
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c4de:	78fa      	ldrb	r2, [r7, #3]
 800c4e0:	4611      	mov	r1, r2
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f7fe fce7 	bl	800aeb6 <USBD_LL_IsoINIncomplete>
}
 800c4e8:	bf00      	nop
 800c4ea:	3708      	adds	r7, #8
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7fe fd3d 	bl	800af7e <USBD_LL_DevConnected>
}
 800c504:	bf00      	nop
 800c506:	3708      	adds	r7, #8
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7fe fd3a 	bl	800af94 <USBD_LL_DevDisconnected>
}
 800c520:	bf00      	nop
 800c522:	3708      	adds	r7, #8
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d13c      	bne.n	800c5b2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c538:	4a20      	ldr	r2, [pc, #128]	@ (800c5bc <USBD_LL_Init+0x94>)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	4a1e      	ldr	r2, [pc, #120]	@ (800c5bc <USBD_LL_Init+0x94>)
 800c544:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c548:	4b1c      	ldr	r3, [pc, #112]	@ (800c5bc <USBD_LL_Init+0x94>)
 800c54a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c54e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c550:	4b1a      	ldr	r3, [pc, #104]	@ (800c5bc <USBD_LL_Init+0x94>)
 800c552:	2204      	movs	r2, #4
 800c554:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c556:	4b19      	ldr	r3, [pc, #100]	@ (800c5bc <USBD_LL_Init+0x94>)
 800c558:	2202      	movs	r2, #2
 800c55a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c55c:	4b17      	ldr	r3, [pc, #92]	@ (800c5bc <USBD_LL_Init+0x94>)
 800c55e:	2200      	movs	r2, #0
 800c560:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c562:	4b16      	ldr	r3, [pc, #88]	@ (800c5bc <USBD_LL_Init+0x94>)
 800c564:	2202      	movs	r2, #2
 800c566:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c568:	4b14      	ldr	r3, [pc, #80]	@ (800c5bc <USBD_LL_Init+0x94>)
 800c56a:	2200      	movs	r2, #0
 800c56c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c56e:	4b13      	ldr	r3, [pc, #76]	@ (800c5bc <USBD_LL_Init+0x94>)
 800c570:	2200      	movs	r2, #0
 800c572:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c574:	4b11      	ldr	r3, [pc, #68]	@ (800c5bc <USBD_LL_Init+0x94>)
 800c576:	2200      	movs	r2, #0
 800c578:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c57a:	4b10      	ldr	r3, [pc, #64]	@ (800c5bc <USBD_LL_Init+0x94>)
 800c57c:	2200      	movs	r2, #0
 800c57e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c580:	4b0e      	ldr	r3, [pc, #56]	@ (800c5bc <USBD_LL_Init+0x94>)
 800c582:	2200      	movs	r2, #0
 800c584:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c586:	480d      	ldr	r0, [pc, #52]	@ (800c5bc <USBD_LL_Init+0x94>)
 800c588:	f7f8 ff12 	bl	80053b0 <HAL_PCD_Init>
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d001      	beq.n	800c596 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c592:	f7f8 f931 	bl	80047f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c596:	2180      	movs	r1, #128	@ 0x80
 800c598:	4808      	ldr	r0, [pc, #32]	@ (800c5bc <USBD_LL_Init+0x94>)
 800c59a:	f7fa f93e 	bl	800681a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c59e:	2240      	movs	r2, #64	@ 0x40
 800c5a0:	2100      	movs	r1, #0
 800c5a2:	4806      	ldr	r0, [pc, #24]	@ (800c5bc <USBD_LL_Init+0x94>)
 800c5a4:	f7fa f8f2 	bl	800678c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c5a8:	2280      	movs	r2, #128	@ 0x80
 800c5aa:	2101      	movs	r1, #1
 800c5ac:	4803      	ldr	r0, [pc, #12]	@ (800c5bc <USBD_LL_Init+0x94>)
 800c5ae:	f7fa f8ed 	bl	800678c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c5b2:	2300      	movs	r3, #0
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3708      	adds	r7, #8
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	200019e4 	.word	0x200019e4

0800c5c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7f8 fff9 	bl	80055ce <HAL_PCD_Start>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5e0:	7bfb      	ldrb	r3, [r7, #15]
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f000 f942 	bl	800c86c <USBD_Get_USB_Status>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3710      	adds	r7, #16
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}

0800c5f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c5f6:	b580      	push	{r7, lr}
 800c5f8:	b084      	sub	sp, #16
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
 800c5fe:	4608      	mov	r0, r1
 800c600:	4611      	mov	r1, r2
 800c602:	461a      	mov	r2, r3
 800c604:	4603      	mov	r3, r0
 800c606:	70fb      	strb	r3, [r7, #3]
 800c608:	460b      	mov	r3, r1
 800c60a:	70bb      	strb	r3, [r7, #2]
 800c60c:	4613      	mov	r3, r2
 800c60e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c610:	2300      	movs	r3, #0
 800c612:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c614:	2300      	movs	r3, #0
 800c616:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c61e:	78bb      	ldrb	r3, [r7, #2]
 800c620:	883a      	ldrh	r2, [r7, #0]
 800c622:	78f9      	ldrb	r1, [r7, #3]
 800c624:	f7f9 fccd 	bl	8005fc2 <HAL_PCD_EP_Open>
 800c628:	4603      	mov	r3, r0
 800c62a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c62c:	7bfb      	ldrb	r3, [r7, #15]
 800c62e:	4618      	mov	r0, r3
 800c630:	f000 f91c 	bl	800c86c <USBD_Get_USB_Status>
 800c634:	4603      	mov	r3, r0
 800c636:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c638:	7bbb      	ldrb	r3, [r7, #14]
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3710      	adds	r7, #16
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}

0800c642 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c642:	b580      	push	{r7, lr}
 800c644:	b084      	sub	sp, #16
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
 800c64a:	460b      	mov	r3, r1
 800c64c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c64e:	2300      	movs	r3, #0
 800c650:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c652:	2300      	movs	r3, #0
 800c654:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c65c:	78fa      	ldrb	r2, [r7, #3]
 800c65e:	4611      	mov	r1, r2
 800c660:	4618      	mov	r0, r3
 800c662:	f7f9 fd18 	bl	8006096 <HAL_PCD_EP_Close>
 800c666:	4603      	mov	r3, r0
 800c668:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c66a:	7bfb      	ldrb	r3, [r7, #15]
 800c66c:	4618      	mov	r0, r3
 800c66e:	f000 f8fd 	bl	800c86c <USBD_Get_USB_Status>
 800c672:	4603      	mov	r3, r0
 800c674:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c676:	7bbb      	ldrb	r3, [r7, #14]
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	460b      	mov	r3, r1
 800c68a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c68c:	2300      	movs	r3, #0
 800c68e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c690:	2300      	movs	r3, #0
 800c692:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c69a:	78fa      	ldrb	r2, [r7, #3]
 800c69c:	4611      	mov	r1, r2
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f7f9 fdd0 	bl	8006244 <HAL_PCD_EP_SetStall>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6a8:	7bfb      	ldrb	r3, [r7, #15]
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f000 f8de 	bl	800c86c <USBD_Get_USB_Status>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3710      	adds	r7, #16
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}

0800c6be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c6be:	b580      	push	{r7, lr}
 800c6c0:	b084      	sub	sp, #16
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c6d8:	78fa      	ldrb	r2, [r7, #3]
 800c6da:	4611      	mov	r1, r2
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7f9 fe14 	bl	800630a <HAL_PCD_EP_ClrStall>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6e6:	7bfb      	ldrb	r3, [r7, #15]
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f000 f8bf 	bl	800c86c <USBD_Get_USB_Status>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3710      	adds	r7, #16
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b085      	sub	sp, #20
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	460b      	mov	r3, r1
 800c706:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c70e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c710:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c714:	2b00      	cmp	r3, #0
 800c716:	da0b      	bge.n	800c730 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c718:	78fb      	ldrb	r3, [r7, #3]
 800c71a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c71e:	68f9      	ldr	r1, [r7, #12]
 800c720:	4613      	mov	r3, r2
 800c722:	00db      	lsls	r3, r3, #3
 800c724:	4413      	add	r3, r2
 800c726:	009b      	lsls	r3, r3, #2
 800c728:	440b      	add	r3, r1
 800c72a:	3316      	adds	r3, #22
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	e00b      	b.n	800c748 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c730:	78fb      	ldrb	r3, [r7, #3]
 800c732:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c736:	68f9      	ldr	r1, [r7, #12]
 800c738:	4613      	mov	r3, r2
 800c73a:	00db      	lsls	r3, r3, #3
 800c73c:	4413      	add	r3, r2
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	440b      	add	r3, r1
 800c742:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c746:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3714      	adds	r7, #20
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr

0800c754 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	460b      	mov	r3, r1
 800c75e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c760:	2300      	movs	r3, #0
 800c762:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c764:	2300      	movs	r3, #0
 800c766:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c76e:	78fa      	ldrb	r2, [r7, #3]
 800c770:	4611      	mov	r1, r2
 800c772:	4618      	mov	r0, r3
 800c774:	f7f9 fc01 	bl	8005f7a <HAL_PCD_SetAddress>
 800c778:	4603      	mov	r3, r0
 800c77a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c77c:	7bfb      	ldrb	r3, [r7, #15]
 800c77e:	4618      	mov	r0, r3
 800c780:	f000 f874 	bl	800c86c <USBD_Get_USB_Status>
 800c784:	4603      	mov	r3, r0
 800c786:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c788:	7bbb      	ldrb	r3, [r7, #14]
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c792:	b580      	push	{r7, lr}
 800c794:	b086      	sub	sp, #24
 800c796:	af00      	add	r7, sp, #0
 800c798:	60f8      	str	r0, [r7, #12]
 800c79a:	607a      	str	r2, [r7, #4]
 800c79c:	603b      	str	r3, [r7, #0]
 800c79e:	460b      	mov	r3, r1
 800c7a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c7b0:	7af9      	ldrb	r1, [r7, #11]
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	f7f9 fd0b 	bl	80061d0 <HAL_PCD_EP_Transmit>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7be:	7dfb      	ldrb	r3, [r7, #23]
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f000 f853 	bl	800c86c <USBD_Get_USB_Status>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c7ca:	7dbb      	ldrb	r3, [r7, #22]
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3718      	adds	r7, #24
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b086      	sub	sp, #24
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	607a      	str	r2, [r7, #4]
 800c7de:	603b      	str	r3, [r7, #0]
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c7f2:	7af9      	ldrb	r1, [r7, #11]
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	f7f9 fc97 	bl	800612a <HAL_PCD_EP_Receive>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c800:	7dfb      	ldrb	r3, [r7, #23]
 800c802:	4618      	mov	r0, r3
 800c804:	f000 f832 	bl	800c86c <USBD_Get_USB_Status>
 800c808:	4603      	mov	r3, r0
 800c80a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c80c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3718      	adds	r7, #24
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}

0800c816 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c816:	b580      	push	{r7, lr}
 800c818:	b082      	sub	sp, #8
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
 800c81e:	460b      	mov	r3, r1
 800c820:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c828:	78fa      	ldrb	r2, [r7, #3]
 800c82a:	4611      	mov	r1, r2
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7f9 fcb7 	bl	80061a0 <HAL_PCD_EP_GetRxCount>
 800c832:	4603      	mov	r3, r0
}
 800c834:	4618      	mov	r0, r3
 800c836:	3708      	adds	r7, #8
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b083      	sub	sp, #12
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c844:	4b03      	ldr	r3, [pc, #12]	@ (800c854 <USBD_static_malloc+0x18>)
}
 800c846:	4618      	mov	r0, r3
 800c848:	370c      	adds	r7, #12
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop
 800c854:	20001ec8 	.word	0x20001ec8

0800c858 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]

}
 800c860:	bf00      	nop
 800c862:	370c      	adds	r7, #12
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr

0800c86c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b085      	sub	sp, #20
 800c870:	af00      	add	r7, sp, #0
 800c872:	4603      	mov	r3, r0
 800c874:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c876:	2300      	movs	r3, #0
 800c878:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c87a:	79fb      	ldrb	r3, [r7, #7]
 800c87c:	2b03      	cmp	r3, #3
 800c87e:	d817      	bhi.n	800c8b0 <USBD_Get_USB_Status+0x44>
 800c880:	a201      	add	r2, pc, #4	@ (adr r2, 800c888 <USBD_Get_USB_Status+0x1c>)
 800c882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c886:	bf00      	nop
 800c888:	0800c899 	.word	0x0800c899
 800c88c:	0800c89f 	.word	0x0800c89f
 800c890:	0800c8a5 	.word	0x0800c8a5
 800c894:	0800c8ab 	.word	0x0800c8ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c898:	2300      	movs	r3, #0
 800c89a:	73fb      	strb	r3, [r7, #15]
    break;
 800c89c:	e00b      	b.n	800c8b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c89e:	2303      	movs	r3, #3
 800c8a0:	73fb      	strb	r3, [r7, #15]
    break;
 800c8a2:	e008      	b.n	800c8b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c8a8:	e005      	b.n	800c8b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c8aa:	2303      	movs	r3, #3
 800c8ac:	73fb      	strb	r3, [r7, #15]
    break;
 800c8ae:	e002      	b.n	800c8b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c8b0:	2303      	movs	r3, #3
 800c8b2:	73fb      	strb	r3, [r7, #15]
    break;
 800c8b4:	bf00      	nop
  }
  return usb_status;
 800c8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3714      	adds	r7, #20
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr

0800c8c4 <__assert_func>:
 800c8c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8c6:	4614      	mov	r4, r2
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	4b09      	ldr	r3, [pc, #36]	@ (800c8f0 <__assert_func+0x2c>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	4605      	mov	r5, r0
 800c8d0:	68d8      	ldr	r0, [r3, #12]
 800c8d2:	b14c      	cbz	r4, 800c8e8 <__assert_func+0x24>
 800c8d4:	4b07      	ldr	r3, [pc, #28]	@ (800c8f4 <__assert_func+0x30>)
 800c8d6:	9100      	str	r1, [sp, #0]
 800c8d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8dc:	4906      	ldr	r1, [pc, #24]	@ (800c8f8 <__assert_func+0x34>)
 800c8de:	462b      	mov	r3, r5
 800c8e0:	f000 fdc6 	bl	800d470 <fiprintf>
 800c8e4:	f000 fed5 	bl	800d692 <abort>
 800c8e8:	4b04      	ldr	r3, [pc, #16]	@ (800c8fc <__assert_func+0x38>)
 800c8ea:	461c      	mov	r4, r3
 800c8ec:	e7f3      	b.n	800c8d6 <__assert_func+0x12>
 800c8ee:	bf00      	nop
 800c8f0:	20000108 	.word	0x20000108
 800c8f4:	0800f2c4 	.word	0x0800f2c4
 800c8f8:	0800f2d1 	.word	0x0800f2d1
 800c8fc:	0800f2ff 	.word	0x0800f2ff

0800c900 <malloc>:
 800c900:	4b02      	ldr	r3, [pc, #8]	@ (800c90c <malloc+0xc>)
 800c902:	4601      	mov	r1, r0
 800c904:	6818      	ldr	r0, [r3, #0]
 800c906:	f000 b82d 	b.w	800c964 <_malloc_r>
 800c90a:	bf00      	nop
 800c90c:	20000108 	.word	0x20000108

0800c910 <free>:
 800c910:	4b02      	ldr	r3, [pc, #8]	@ (800c91c <free+0xc>)
 800c912:	4601      	mov	r1, r0
 800c914:	6818      	ldr	r0, [r3, #0]
 800c916:	f001 bd1b 	b.w	800e350 <_free_r>
 800c91a:	bf00      	nop
 800c91c:	20000108 	.word	0x20000108

0800c920 <sbrk_aligned>:
 800c920:	b570      	push	{r4, r5, r6, lr}
 800c922:	4e0f      	ldr	r6, [pc, #60]	@ (800c960 <sbrk_aligned+0x40>)
 800c924:	460c      	mov	r4, r1
 800c926:	6831      	ldr	r1, [r6, #0]
 800c928:	4605      	mov	r5, r0
 800c92a:	b911      	cbnz	r1, 800c932 <sbrk_aligned+0x12>
 800c92c:	f000 fe54 	bl	800d5d8 <_sbrk_r>
 800c930:	6030      	str	r0, [r6, #0]
 800c932:	4621      	mov	r1, r4
 800c934:	4628      	mov	r0, r5
 800c936:	f000 fe4f 	bl	800d5d8 <_sbrk_r>
 800c93a:	1c43      	adds	r3, r0, #1
 800c93c:	d103      	bne.n	800c946 <sbrk_aligned+0x26>
 800c93e:	f04f 34ff 	mov.w	r4, #4294967295
 800c942:	4620      	mov	r0, r4
 800c944:	bd70      	pop	{r4, r5, r6, pc}
 800c946:	1cc4      	adds	r4, r0, #3
 800c948:	f024 0403 	bic.w	r4, r4, #3
 800c94c:	42a0      	cmp	r0, r4
 800c94e:	d0f8      	beq.n	800c942 <sbrk_aligned+0x22>
 800c950:	1a21      	subs	r1, r4, r0
 800c952:	4628      	mov	r0, r5
 800c954:	f000 fe40 	bl	800d5d8 <_sbrk_r>
 800c958:	3001      	adds	r0, #1
 800c95a:	d1f2      	bne.n	800c942 <sbrk_aligned+0x22>
 800c95c:	e7ef      	b.n	800c93e <sbrk_aligned+0x1e>
 800c95e:	bf00      	nop
 800c960:	200020e8 	.word	0x200020e8

0800c964 <_malloc_r>:
 800c964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c968:	1ccd      	adds	r5, r1, #3
 800c96a:	f025 0503 	bic.w	r5, r5, #3
 800c96e:	3508      	adds	r5, #8
 800c970:	2d0c      	cmp	r5, #12
 800c972:	bf38      	it	cc
 800c974:	250c      	movcc	r5, #12
 800c976:	2d00      	cmp	r5, #0
 800c978:	4606      	mov	r6, r0
 800c97a:	db01      	blt.n	800c980 <_malloc_r+0x1c>
 800c97c:	42a9      	cmp	r1, r5
 800c97e:	d904      	bls.n	800c98a <_malloc_r+0x26>
 800c980:	230c      	movs	r3, #12
 800c982:	6033      	str	r3, [r6, #0]
 800c984:	2000      	movs	r0, #0
 800c986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c98a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ca60 <_malloc_r+0xfc>
 800c98e:	f000 f869 	bl	800ca64 <__malloc_lock>
 800c992:	f8d8 3000 	ldr.w	r3, [r8]
 800c996:	461c      	mov	r4, r3
 800c998:	bb44      	cbnz	r4, 800c9ec <_malloc_r+0x88>
 800c99a:	4629      	mov	r1, r5
 800c99c:	4630      	mov	r0, r6
 800c99e:	f7ff ffbf 	bl	800c920 <sbrk_aligned>
 800c9a2:	1c43      	adds	r3, r0, #1
 800c9a4:	4604      	mov	r4, r0
 800c9a6:	d158      	bne.n	800ca5a <_malloc_r+0xf6>
 800c9a8:	f8d8 4000 	ldr.w	r4, [r8]
 800c9ac:	4627      	mov	r7, r4
 800c9ae:	2f00      	cmp	r7, #0
 800c9b0:	d143      	bne.n	800ca3a <_malloc_r+0xd6>
 800c9b2:	2c00      	cmp	r4, #0
 800c9b4:	d04b      	beq.n	800ca4e <_malloc_r+0xea>
 800c9b6:	6823      	ldr	r3, [r4, #0]
 800c9b8:	4639      	mov	r1, r7
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	eb04 0903 	add.w	r9, r4, r3
 800c9c0:	f000 fe0a 	bl	800d5d8 <_sbrk_r>
 800c9c4:	4581      	cmp	r9, r0
 800c9c6:	d142      	bne.n	800ca4e <_malloc_r+0xea>
 800c9c8:	6821      	ldr	r1, [r4, #0]
 800c9ca:	1a6d      	subs	r5, r5, r1
 800c9cc:	4629      	mov	r1, r5
 800c9ce:	4630      	mov	r0, r6
 800c9d0:	f7ff ffa6 	bl	800c920 <sbrk_aligned>
 800c9d4:	3001      	adds	r0, #1
 800c9d6:	d03a      	beq.n	800ca4e <_malloc_r+0xea>
 800c9d8:	6823      	ldr	r3, [r4, #0]
 800c9da:	442b      	add	r3, r5
 800c9dc:	6023      	str	r3, [r4, #0]
 800c9de:	f8d8 3000 	ldr.w	r3, [r8]
 800c9e2:	685a      	ldr	r2, [r3, #4]
 800c9e4:	bb62      	cbnz	r2, 800ca40 <_malloc_r+0xdc>
 800c9e6:	f8c8 7000 	str.w	r7, [r8]
 800c9ea:	e00f      	b.n	800ca0c <_malloc_r+0xa8>
 800c9ec:	6822      	ldr	r2, [r4, #0]
 800c9ee:	1b52      	subs	r2, r2, r5
 800c9f0:	d420      	bmi.n	800ca34 <_malloc_r+0xd0>
 800c9f2:	2a0b      	cmp	r2, #11
 800c9f4:	d917      	bls.n	800ca26 <_malloc_r+0xc2>
 800c9f6:	1961      	adds	r1, r4, r5
 800c9f8:	42a3      	cmp	r3, r4
 800c9fa:	6025      	str	r5, [r4, #0]
 800c9fc:	bf18      	it	ne
 800c9fe:	6059      	strne	r1, [r3, #4]
 800ca00:	6863      	ldr	r3, [r4, #4]
 800ca02:	bf08      	it	eq
 800ca04:	f8c8 1000 	streq.w	r1, [r8]
 800ca08:	5162      	str	r2, [r4, r5]
 800ca0a:	604b      	str	r3, [r1, #4]
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	f000 f82f 	bl	800ca70 <__malloc_unlock>
 800ca12:	f104 000b 	add.w	r0, r4, #11
 800ca16:	1d23      	adds	r3, r4, #4
 800ca18:	f020 0007 	bic.w	r0, r0, #7
 800ca1c:	1ac2      	subs	r2, r0, r3
 800ca1e:	bf1c      	itt	ne
 800ca20:	1a1b      	subne	r3, r3, r0
 800ca22:	50a3      	strne	r3, [r4, r2]
 800ca24:	e7af      	b.n	800c986 <_malloc_r+0x22>
 800ca26:	6862      	ldr	r2, [r4, #4]
 800ca28:	42a3      	cmp	r3, r4
 800ca2a:	bf0c      	ite	eq
 800ca2c:	f8c8 2000 	streq.w	r2, [r8]
 800ca30:	605a      	strne	r2, [r3, #4]
 800ca32:	e7eb      	b.n	800ca0c <_malloc_r+0xa8>
 800ca34:	4623      	mov	r3, r4
 800ca36:	6864      	ldr	r4, [r4, #4]
 800ca38:	e7ae      	b.n	800c998 <_malloc_r+0x34>
 800ca3a:	463c      	mov	r4, r7
 800ca3c:	687f      	ldr	r7, [r7, #4]
 800ca3e:	e7b6      	b.n	800c9ae <_malloc_r+0x4a>
 800ca40:	461a      	mov	r2, r3
 800ca42:	685b      	ldr	r3, [r3, #4]
 800ca44:	42a3      	cmp	r3, r4
 800ca46:	d1fb      	bne.n	800ca40 <_malloc_r+0xdc>
 800ca48:	2300      	movs	r3, #0
 800ca4a:	6053      	str	r3, [r2, #4]
 800ca4c:	e7de      	b.n	800ca0c <_malloc_r+0xa8>
 800ca4e:	230c      	movs	r3, #12
 800ca50:	6033      	str	r3, [r6, #0]
 800ca52:	4630      	mov	r0, r6
 800ca54:	f000 f80c 	bl	800ca70 <__malloc_unlock>
 800ca58:	e794      	b.n	800c984 <_malloc_r+0x20>
 800ca5a:	6005      	str	r5, [r0, #0]
 800ca5c:	e7d6      	b.n	800ca0c <_malloc_r+0xa8>
 800ca5e:	bf00      	nop
 800ca60:	200020ec 	.word	0x200020ec

0800ca64 <__malloc_lock>:
 800ca64:	4801      	ldr	r0, [pc, #4]	@ (800ca6c <__malloc_lock+0x8>)
 800ca66:	f000 be04 	b.w	800d672 <__retarget_lock_acquire_recursive>
 800ca6a:	bf00      	nop
 800ca6c:	20002230 	.word	0x20002230

0800ca70 <__malloc_unlock>:
 800ca70:	4801      	ldr	r0, [pc, #4]	@ (800ca78 <__malloc_unlock+0x8>)
 800ca72:	f000 bdff 	b.w	800d674 <__retarget_lock_release_recursive>
 800ca76:	bf00      	nop
 800ca78:	20002230 	.word	0x20002230

0800ca7c <__cvt>:
 800ca7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca80:	ec57 6b10 	vmov	r6, r7, d0
 800ca84:	2f00      	cmp	r7, #0
 800ca86:	460c      	mov	r4, r1
 800ca88:	4619      	mov	r1, r3
 800ca8a:	463b      	mov	r3, r7
 800ca8c:	bfbb      	ittet	lt
 800ca8e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ca92:	461f      	movlt	r7, r3
 800ca94:	2300      	movge	r3, #0
 800ca96:	232d      	movlt	r3, #45	@ 0x2d
 800ca98:	700b      	strb	r3, [r1, #0]
 800ca9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca9c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800caa0:	4691      	mov	r9, r2
 800caa2:	f023 0820 	bic.w	r8, r3, #32
 800caa6:	bfbc      	itt	lt
 800caa8:	4632      	movlt	r2, r6
 800caaa:	4616      	movlt	r6, r2
 800caac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cab0:	d005      	beq.n	800cabe <__cvt+0x42>
 800cab2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cab6:	d100      	bne.n	800caba <__cvt+0x3e>
 800cab8:	3401      	adds	r4, #1
 800caba:	2102      	movs	r1, #2
 800cabc:	e000      	b.n	800cac0 <__cvt+0x44>
 800cabe:	2103      	movs	r1, #3
 800cac0:	ab03      	add	r3, sp, #12
 800cac2:	9301      	str	r3, [sp, #4]
 800cac4:	ab02      	add	r3, sp, #8
 800cac6:	9300      	str	r3, [sp, #0]
 800cac8:	ec47 6b10 	vmov	d0, r6, r7
 800cacc:	4653      	mov	r3, sl
 800cace:	4622      	mov	r2, r4
 800cad0:	f000 fe6e 	bl	800d7b0 <_dtoa_r>
 800cad4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cad8:	4605      	mov	r5, r0
 800cada:	d119      	bne.n	800cb10 <__cvt+0x94>
 800cadc:	f019 0f01 	tst.w	r9, #1
 800cae0:	d00e      	beq.n	800cb00 <__cvt+0x84>
 800cae2:	eb00 0904 	add.w	r9, r0, r4
 800cae6:	2200      	movs	r2, #0
 800cae8:	2300      	movs	r3, #0
 800caea:	4630      	mov	r0, r6
 800caec:	4639      	mov	r1, r7
 800caee:	f7f3 ffeb 	bl	8000ac8 <__aeabi_dcmpeq>
 800caf2:	b108      	cbz	r0, 800caf8 <__cvt+0x7c>
 800caf4:	f8cd 900c 	str.w	r9, [sp, #12]
 800caf8:	2230      	movs	r2, #48	@ 0x30
 800cafa:	9b03      	ldr	r3, [sp, #12]
 800cafc:	454b      	cmp	r3, r9
 800cafe:	d31e      	bcc.n	800cb3e <__cvt+0xc2>
 800cb00:	9b03      	ldr	r3, [sp, #12]
 800cb02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb04:	1b5b      	subs	r3, r3, r5
 800cb06:	4628      	mov	r0, r5
 800cb08:	6013      	str	r3, [r2, #0]
 800cb0a:	b004      	add	sp, #16
 800cb0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb10:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cb14:	eb00 0904 	add.w	r9, r0, r4
 800cb18:	d1e5      	bne.n	800cae6 <__cvt+0x6a>
 800cb1a:	7803      	ldrb	r3, [r0, #0]
 800cb1c:	2b30      	cmp	r3, #48	@ 0x30
 800cb1e:	d10a      	bne.n	800cb36 <__cvt+0xba>
 800cb20:	2200      	movs	r2, #0
 800cb22:	2300      	movs	r3, #0
 800cb24:	4630      	mov	r0, r6
 800cb26:	4639      	mov	r1, r7
 800cb28:	f7f3 ffce 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb2c:	b918      	cbnz	r0, 800cb36 <__cvt+0xba>
 800cb2e:	f1c4 0401 	rsb	r4, r4, #1
 800cb32:	f8ca 4000 	str.w	r4, [sl]
 800cb36:	f8da 3000 	ldr.w	r3, [sl]
 800cb3a:	4499      	add	r9, r3
 800cb3c:	e7d3      	b.n	800cae6 <__cvt+0x6a>
 800cb3e:	1c59      	adds	r1, r3, #1
 800cb40:	9103      	str	r1, [sp, #12]
 800cb42:	701a      	strb	r2, [r3, #0]
 800cb44:	e7d9      	b.n	800cafa <__cvt+0x7e>

0800cb46 <__exponent>:
 800cb46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb48:	2900      	cmp	r1, #0
 800cb4a:	bfba      	itte	lt
 800cb4c:	4249      	neglt	r1, r1
 800cb4e:	232d      	movlt	r3, #45	@ 0x2d
 800cb50:	232b      	movge	r3, #43	@ 0x2b
 800cb52:	2909      	cmp	r1, #9
 800cb54:	7002      	strb	r2, [r0, #0]
 800cb56:	7043      	strb	r3, [r0, #1]
 800cb58:	dd29      	ble.n	800cbae <__exponent+0x68>
 800cb5a:	f10d 0307 	add.w	r3, sp, #7
 800cb5e:	461d      	mov	r5, r3
 800cb60:	270a      	movs	r7, #10
 800cb62:	461a      	mov	r2, r3
 800cb64:	fbb1 f6f7 	udiv	r6, r1, r7
 800cb68:	fb07 1416 	mls	r4, r7, r6, r1
 800cb6c:	3430      	adds	r4, #48	@ 0x30
 800cb6e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cb72:	460c      	mov	r4, r1
 800cb74:	2c63      	cmp	r4, #99	@ 0x63
 800cb76:	f103 33ff 	add.w	r3, r3, #4294967295
 800cb7a:	4631      	mov	r1, r6
 800cb7c:	dcf1      	bgt.n	800cb62 <__exponent+0x1c>
 800cb7e:	3130      	adds	r1, #48	@ 0x30
 800cb80:	1e94      	subs	r4, r2, #2
 800cb82:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cb86:	1c41      	adds	r1, r0, #1
 800cb88:	4623      	mov	r3, r4
 800cb8a:	42ab      	cmp	r3, r5
 800cb8c:	d30a      	bcc.n	800cba4 <__exponent+0x5e>
 800cb8e:	f10d 0309 	add.w	r3, sp, #9
 800cb92:	1a9b      	subs	r3, r3, r2
 800cb94:	42ac      	cmp	r4, r5
 800cb96:	bf88      	it	hi
 800cb98:	2300      	movhi	r3, #0
 800cb9a:	3302      	adds	r3, #2
 800cb9c:	4403      	add	r3, r0
 800cb9e:	1a18      	subs	r0, r3, r0
 800cba0:	b003      	add	sp, #12
 800cba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cba4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cba8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cbac:	e7ed      	b.n	800cb8a <__exponent+0x44>
 800cbae:	2330      	movs	r3, #48	@ 0x30
 800cbb0:	3130      	adds	r1, #48	@ 0x30
 800cbb2:	7083      	strb	r3, [r0, #2]
 800cbb4:	70c1      	strb	r1, [r0, #3]
 800cbb6:	1d03      	adds	r3, r0, #4
 800cbb8:	e7f1      	b.n	800cb9e <__exponent+0x58>
	...

0800cbbc <_printf_float>:
 800cbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc0:	b08d      	sub	sp, #52	@ 0x34
 800cbc2:	460c      	mov	r4, r1
 800cbc4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cbc8:	4616      	mov	r6, r2
 800cbca:	461f      	mov	r7, r3
 800cbcc:	4605      	mov	r5, r0
 800cbce:	f000 fccb 	bl	800d568 <_localeconv_r>
 800cbd2:	6803      	ldr	r3, [r0, #0]
 800cbd4:	9304      	str	r3, [sp, #16]
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7f3 fb4a 	bl	8000270 <strlen>
 800cbdc:	2300      	movs	r3, #0
 800cbde:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbe0:	f8d8 3000 	ldr.w	r3, [r8]
 800cbe4:	9005      	str	r0, [sp, #20]
 800cbe6:	3307      	adds	r3, #7
 800cbe8:	f023 0307 	bic.w	r3, r3, #7
 800cbec:	f103 0208 	add.w	r2, r3, #8
 800cbf0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cbf4:	f8d4 b000 	ldr.w	fp, [r4]
 800cbf8:	f8c8 2000 	str.w	r2, [r8]
 800cbfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc00:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cc04:	9307      	str	r3, [sp, #28]
 800cc06:	f8cd 8018 	str.w	r8, [sp, #24]
 800cc0a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cc0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc12:	4b9c      	ldr	r3, [pc, #624]	@ (800ce84 <_printf_float+0x2c8>)
 800cc14:	f04f 32ff 	mov.w	r2, #4294967295
 800cc18:	f7f3 ff88 	bl	8000b2c <__aeabi_dcmpun>
 800cc1c:	bb70      	cbnz	r0, 800cc7c <_printf_float+0xc0>
 800cc1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc22:	4b98      	ldr	r3, [pc, #608]	@ (800ce84 <_printf_float+0x2c8>)
 800cc24:	f04f 32ff 	mov.w	r2, #4294967295
 800cc28:	f7f3 ff62 	bl	8000af0 <__aeabi_dcmple>
 800cc2c:	bb30      	cbnz	r0, 800cc7c <_printf_float+0xc0>
 800cc2e:	2200      	movs	r2, #0
 800cc30:	2300      	movs	r3, #0
 800cc32:	4640      	mov	r0, r8
 800cc34:	4649      	mov	r1, r9
 800cc36:	f7f3 ff51 	bl	8000adc <__aeabi_dcmplt>
 800cc3a:	b110      	cbz	r0, 800cc42 <_printf_float+0x86>
 800cc3c:	232d      	movs	r3, #45	@ 0x2d
 800cc3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc42:	4a91      	ldr	r2, [pc, #580]	@ (800ce88 <_printf_float+0x2cc>)
 800cc44:	4b91      	ldr	r3, [pc, #580]	@ (800ce8c <_printf_float+0x2d0>)
 800cc46:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cc4a:	bf8c      	ite	hi
 800cc4c:	4690      	movhi	r8, r2
 800cc4e:	4698      	movls	r8, r3
 800cc50:	2303      	movs	r3, #3
 800cc52:	6123      	str	r3, [r4, #16]
 800cc54:	f02b 0304 	bic.w	r3, fp, #4
 800cc58:	6023      	str	r3, [r4, #0]
 800cc5a:	f04f 0900 	mov.w	r9, #0
 800cc5e:	9700      	str	r7, [sp, #0]
 800cc60:	4633      	mov	r3, r6
 800cc62:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cc64:	4621      	mov	r1, r4
 800cc66:	4628      	mov	r0, r5
 800cc68:	f000 f9d2 	bl	800d010 <_printf_common>
 800cc6c:	3001      	adds	r0, #1
 800cc6e:	f040 808d 	bne.w	800cd8c <_printf_float+0x1d0>
 800cc72:	f04f 30ff 	mov.w	r0, #4294967295
 800cc76:	b00d      	add	sp, #52	@ 0x34
 800cc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc7c:	4642      	mov	r2, r8
 800cc7e:	464b      	mov	r3, r9
 800cc80:	4640      	mov	r0, r8
 800cc82:	4649      	mov	r1, r9
 800cc84:	f7f3 ff52 	bl	8000b2c <__aeabi_dcmpun>
 800cc88:	b140      	cbz	r0, 800cc9c <_printf_float+0xe0>
 800cc8a:	464b      	mov	r3, r9
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	bfbc      	itt	lt
 800cc90:	232d      	movlt	r3, #45	@ 0x2d
 800cc92:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cc96:	4a7e      	ldr	r2, [pc, #504]	@ (800ce90 <_printf_float+0x2d4>)
 800cc98:	4b7e      	ldr	r3, [pc, #504]	@ (800ce94 <_printf_float+0x2d8>)
 800cc9a:	e7d4      	b.n	800cc46 <_printf_float+0x8a>
 800cc9c:	6863      	ldr	r3, [r4, #4]
 800cc9e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cca2:	9206      	str	r2, [sp, #24]
 800cca4:	1c5a      	adds	r2, r3, #1
 800cca6:	d13b      	bne.n	800cd20 <_printf_float+0x164>
 800cca8:	2306      	movs	r3, #6
 800ccaa:	6063      	str	r3, [r4, #4]
 800ccac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	6022      	str	r2, [r4, #0]
 800ccb4:	9303      	str	r3, [sp, #12]
 800ccb6:	ab0a      	add	r3, sp, #40	@ 0x28
 800ccb8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ccbc:	ab09      	add	r3, sp, #36	@ 0x24
 800ccbe:	9300      	str	r3, [sp, #0]
 800ccc0:	6861      	ldr	r1, [r4, #4]
 800ccc2:	ec49 8b10 	vmov	d0, r8, r9
 800ccc6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ccca:	4628      	mov	r0, r5
 800cccc:	f7ff fed6 	bl	800ca7c <__cvt>
 800ccd0:	9b06      	ldr	r3, [sp, #24]
 800ccd2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ccd4:	2b47      	cmp	r3, #71	@ 0x47
 800ccd6:	4680      	mov	r8, r0
 800ccd8:	d129      	bne.n	800cd2e <_printf_float+0x172>
 800ccda:	1cc8      	adds	r0, r1, #3
 800ccdc:	db02      	blt.n	800cce4 <_printf_float+0x128>
 800ccde:	6863      	ldr	r3, [r4, #4]
 800cce0:	4299      	cmp	r1, r3
 800cce2:	dd41      	ble.n	800cd68 <_printf_float+0x1ac>
 800cce4:	f1aa 0a02 	sub.w	sl, sl, #2
 800cce8:	fa5f fa8a 	uxtb.w	sl, sl
 800ccec:	3901      	subs	r1, #1
 800ccee:	4652      	mov	r2, sl
 800ccf0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ccf4:	9109      	str	r1, [sp, #36]	@ 0x24
 800ccf6:	f7ff ff26 	bl	800cb46 <__exponent>
 800ccfa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ccfc:	1813      	adds	r3, r2, r0
 800ccfe:	2a01      	cmp	r2, #1
 800cd00:	4681      	mov	r9, r0
 800cd02:	6123      	str	r3, [r4, #16]
 800cd04:	dc02      	bgt.n	800cd0c <_printf_float+0x150>
 800cd06:	6822      	ldr	r2, [r4, #0]
 800cd08:	07d2      	lsls	r2, r2, #31
 800cd0a:	d501      	bpl.n	800cd10 <_printf_float+0x154>
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	6123      	str	r3, [r4, #16]
 800cd10:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d0a2      	beq.n	800cc5e <_printf_float+0xa2>
 800cd18:	232d      	movs	r3, #45	@ 0x2d
 800cd1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd1e:	e79e      	b.n	800cc5e <_printf_float+0xa2>
 800cd20:	9a06      	ldr	r2, [sp, #24]
 800cd22:	2a47      	cmp	r2, #71	@ 0x47
 800cd24:	d1c2      	bne.n	800ccac <_printf_float+0xf0>
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d1c0      	bne.n	800ccac <_printf_float+0xf0>
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e7bd      	b.n	800ccaa <_printf_float+0xee>
 800cd2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cd32:	d9db      	bls.n	800ccec <_printf_float+0x130>
 800cd34:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cd38:	d118      	bne.n	800cd6c <_printf_float+0x1b0>
 800cd3a:	2900      	cmp	r1, #0
 800cd3c:	6863      	ldr	r3, [r4, #4]
 800cd3e:	dd0b      	ble.n	800cd58 <_printf_float+0x19c>
 800cd40:	6121      	str	r1, [r4, #16]
 800cd42:	b913      	cbnz	r3, 800cd4a <_printf_float+0x18e>
 800cd44:	6822      	ldr	r2, [r4, #0]
 800cd46:	07d0      	lsls	r0, r2, #31
 800cd48:	d502      	bpl.n	800cd50 <_printf_float+0x194>
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	440b      	add	r3, r1
 800cd4e:	6123      	str	r3, [r4, #16]
 800cd50:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cd52:	f04f 0900 	mov.w	r9, #0
 800cd56:	e7db      	b.n	800cd10 <_printf_float+0x154>
 800cd58:	b913      	cbnz	r3, 800cd60 <_printf_float+0x1a4>
 800cd5a:	6822      	ldr	r2, [r4, #0]
 800cd5c:	07d2      	lsls	r2, r2, #31
 800cd5e:	d501      	bpl.n	800cd64 <_printf_float+0x1a8>
 800cd60:	3302      	adds	r3, #2
 800cd62:	e7f4      	b.n	800cd4e <_printf_float+0x192>
 800cd64:	2301      	movs	r3, #1
 800cd66:	e7f2      	b.n	800cd4e <_printf_float+0x192>
 800cd68:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cd6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd6e:	4299      	cmp	r1, r3
 800cd70:	db05      	blt.n	800cd7e <_printf_float+0x1c2>
 800cd72:	6823      	ldr	r3, [r4, #0]
 800cd74:	6121      	str	r1, [r4, #16]
 800cd76:	07d8      	lsls	r0, r3, #31
 800cd78:	d5ea      	bpl.n	800cd50 <_printf_float+0x194>
 800cd7a:	1c4b      	adds	r3, r1, #1
 800cd7c:	e7e7      	b.n	800cd4e <_printf_float+0x192>
 800cd7e:	2900      	cmp	r1, #0
 800cd80:	bfd4      	ite	le
 800cd82:	f1c1 0202 	rsble	r2, r1, #2
 800cd86:	2201      	movgt	r2, #1
 800cd88:	4413      	add	r3, r2
 800cd8a:	e7e0      	b.n	800cd4e <_printf_float+0x192>
 800cd8c:	6823      	ldr	r3, [r4, #0]
 800cd8e:	055a      	lsls	r2, r3, #21
 800cd90:	d407      	bmi.n	800cda2 <_printf_float+0x1e6>
 800cd92:	6923      	ldr	r3, [r4, #16]
 800cd94:	4642      	mov	r2, r8
 800cd96:	4631      	mov	r1, r6
 800cd98:	4628      	mov	r0, r5
 800cd9a:	47b8      	blx	r7
 800cd9c:	3001      	adds	r0, #1
 800cd9e:	d12b      	bne.n	800cdf8 <_printf_float+0x23c>
 800cda0:	e767      	b.n	800cc72 <_printf_float+0xb6>
 800cda2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cda6:	f240 80dd 	bls.w	800cf64 <_printf_float+0x3a8>
 800cdaa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cdae:	2200      	movs	r2, #0
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	f7f3 fe89 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdb6:	2800      	cmp	r0, #0
 800cdb8:	d033      	beq.n	800ce22 <_printf_float+0x266>
 800cdba:	4a37      	ldr	r2, [pc, #220]	@ (800ce98 <_printf_float+0x2dc>)
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	4631      	mov	r1, r6
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	47b8      	blx	r7
 800cdc4:	3001      	adds	r0, #1
 800cdc6:	f43f af54 	beq.w	800cc72 <_printf_float+0xb6>
 800cdca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cdce:	4543      	cmp	r3, r8
 800cdd0:	db02      	blt.n	800cdd8 <_printf_float+0x21c>
 800cdd2:	6823      	ldr	r3, [r4, #0]
 800cdd4:	07d8      	lsls	r0, r3, #31
 800cdd6:	d50f      	bpl.n	800cdf8 <_printf_float+0x23c>
 800cdd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cddc:	4631      	mov	r1, r6
 800cdde:	4628      	mov	r0, r5
 800cde0:	47b8      	blx	r7
 800cde2:	3001      	adds	r0, #1
 800cde4:	f43f af45 	beq.w	800cc72 <_printf_float+0xb6>
 800cde8:	f04f 0900 	mov.w	r9, #0
 800cdec:	f108 38ff 	add.w	r8, r8, #4294967295
 800cdf0:	f104 0a1a 	add.w	sl, r4, #26
 800cdf4:	45c8      	cmp	r8, r9
 800cdf6:	dc09      	bgt.n	800ce0c <_printf_float+0x250>
 800cdf8:	6823      	ldr	r3, [r4, #0]
 800cdfa:	079b      	lsls	r3, r3, #30
 800cdfc:	f100 8103 	bmi.w	800d006 <_printf_float+0x44a>
 800ce00:	68e0      	ldr	r0, [r4, #12]
 800ce02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce04:	4298      	cmp	r0, r3
 800ce06:	bfb8      	it	lt
 800ce08:	4618      	movlt	r0, r3
 800ce0a:	e734      	b.n	800cc76 <_printf_float+0xba>
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	4652      	mov	r2, sl
 800ce10:	4631      	mov	r1, r6
 800ce12:	4628      	mov	r0, r5
 800ce14:	47b8      	blx	r7
 800ce16:	3001      	adds	r0, #1
 800ce18:	f43f af2b 	beq.w	800cc72 <_printf_float+0xb6>
 800ce1c:	f109 0901 	add.w	r9, r9, #1
 800ce20:	e7e8      	b.n	800cdf4 <_printf_float+0x238>
 800ce22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	dc39      	bgt.n	800ce9c <_printf_float+0x2e0>
 800ce28:	4a1b      	ldr	r2, [pc, #108]	@ (800ce98 <_printf_float+0x2dc>)
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	4631      	mov	r1, r6
 800ce2e:	4628      	mov	r0, r5
 800ce30:	47b8      	blx	r7
 800ce32:	3001      	adds	r0, #1
 800ce34:	f43f af1d 	beq.w	800cc72 <_printf_float+0xb6>
 800ce38:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ce3c:	ea59 0303 	orrs.w	r3, r9, r3
 800ce40:	d102      	bne.n	800ce48 <_printf_float+0x28c>
 800ce42:	6823      	ldr	r3, [r4, #0]
 800ce44:	07d9      	lsls	r1, r3, #31
 800ce46:	d5d7      	bpl.n	800cdf8 <_printf_float+0x23c>
 800ce48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce4c:	4631      	mov	r1, r6
 800ce4e:	4628      	mov	r0, r5
 800ce50:	47b8      	blx	r7
 800ce52:	3001      	adds	r0, #1
 800ce54:	f43f af0d 	beq.w	800cc72 <_printf_float+0xb6>
 800ce58:	f04f 0a00 	mov.w	sl, #0
 800ce5c:	f104 0b1a 	add.w	fp, r4, #26
 800ce60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce62:	425b      	negs	r3, r3
 800ce64:	4553      	cmp	r3, sl
 800ce66:	dc01      	bgt.n	800ce6c <_printf_float+0x2b0>
 800ce68:	464b      	mov	r3, r9
 800ce6a:	e793      	b.n	800cd94 <_printf_float+0x1d8>
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	465a      	mov	r2, fp
 800ce70:	4631      	mov	r1, r6
 800ce72:	4628      	mov	r0, r5
 800ce74:	47b8      	blx	r7
 800ce76:	3001      	adds	r0, #1
 800ce78:	f43f aefb 	beq.w	800cc72 <_printf_float+0xb6>
 800ce7c:	f10a 0a01 	add.w	sl, sl, #1
 800ce80:	e7ee      	b.n	800ce60 <_printf_float+0x2a4>
 800ce82:	bf00      	nop
 800ce84:	7fefffff 	.word	0x7fefffff
 800ce88:	0800f304 	.word	0x0800f304
 800ce8c:	0800f300 	.word	0x0800f300
 800ce90:	0800f30c 	.word	0x0800f30c
 800ce94:	0800f308 	.word	0x0800f308
 800ce98:	0800f310 	.word	0x0800f310
 800ce9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ce9e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cea2:	4553      	cmp	r3, sl
 800cea4:	bfa8      	it	ge
 800cea6:	4653      	movge	r3, sl
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	4699      	mov	r9, r3
 800ceac:	dc36      	bgt.n	800cf1c <_printf_float+0x360>
 800ceae:	f04f 0b00 	mov.w	fp, #0
 800ceb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ceb6:	f104 021a 	add.w	r2, r4, #26
 800ceba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cebc:	9306      	str	r3, [sp, #24]
 800cebe:	eba3 0309 	sub.w	r3, r3, r9
 800cec2:	455b      	cmp	r3, fp
 800cec4:	dc31      	bgt.n	800cf2a <_printf_float+0x36e>
 800cec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cec8:	459a      	cmp	sl, r3
 800ceca:	dc3a      	bgt.n	800cf42 <_printf_float+0x386>
 800cecc:	6823      	ldr	r3, [r4, #0]
 800cece:	07da      	lsls	r2, r3, #31
 800ced0:	d437      	bmi.n	800cf42 <_printf_float+0x386>
 800ced2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ced4:	ebaa 0903 	sub.w	r9, sl, r3
 800ced8:	9b06      	ldr	r3, [sp, #24]
 800ceda:	ebaa 0303 	sub.w	r3, sl, r3
 800cede:	4599      	cmp	r9, r3
 800cee0:	bfa8      	it	ge
 800cee2:	4699      	movge	r9, r3
 800cee4:	f1b9 0f00 	cmp.w	r9, #0
 800cee8:	dc33      	bgt.n	800cf52 <_printf_float+0x396>
 800ceea:	f04f 0800 	mov.w	r8, #0
 800ceee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cef2:	f104 0b1a 	add.w	fp, r4, #26
 800cef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cef8:	ebaa 0303 	sub.w	r3, sl, r3
 800cefc:	eba3 0309 	sub.w	r3, r3, r9
 800cf00:	4543      	cmp	r3, r8
 800cf02:	f77f af79 	ble.w	800cdf8 <_printf_float+0x23c>
 800cf06:	2301      	movs	r3, #1
 800cf08:	465a      	mov	r2, fp
 800cf0a:	4631      	mov	r1, r6
 800cf0c:	4628      	mov	r0, r5
 800cf0e:	47b8      	blx	r7
 800cf10:	3001      	adds	r0, #1
 800cf12:	f43f aeae 	beq.w	800cc72 <_printf_float+0xb6>
 800cf16:	f108 0801 	add.w	r8, r8, #1
 800cf1a:	e7ec      	b.n	800cef6 <_printf_float+0x33a>
 800cf1c:	4642      	mov	r2, r8
 800cf1e:	4631      	mov	r1, r6
 800cf20:	4628      	mov	r0, r5
 800cf22:	47b8      	blx	r7
 800cf24:	3001      	adds	r0, #1
 800cf26:	d1c2      	bne.n	800ceae <_printf_float+0x2f2>
 800cf28:	e6a3      	b.n	800cc72 <_printf_float+0xb6>
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	4631      	mov	r1, r6
 800cf2e:	4628      	mov	r0, r5
 800cf30:	9206      	str	r2, [sp, #24]
 800cf32:	47b8      	blx	r7
 800cf34:	3001      	adds	r0, #1
 800cf36:	f43f ae9c 	beq.w	800cc72 <_printf_float+0xb6>
 800cf3a:	9a06      	ldr	r2, [sp, #24]
 800cf3c:	f10b 0b01 	add.w	fp, fp, #1
 800cf40:	e7bb      	b.n	800ceba <_printf_float+0x2fe>
 800cf42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf46:	4631      	mov	r1, r6
 800cf48:	4628      	mov	r0, r5
 800cf4a:	47b8      	blx	r7
 800cf4c:	3001      	adds	r0, #1
 800cf4e:	d1c0      	bne.n	800ced2 <_printf_float+0x316>
 800cf50:	e68f      	b.n	800cc72 <_printf_float+0xb6>
 800cf52:	9a06      	ldr	r2, [sp, #24]
 800cf54:	464b      	mov	r3, r9
 800cf56:	4442      	add	r2, r8
 800cf58:	4631      	mov	r1, r6
 800cf5a:	4628      	mov	r0, r5
 800cf5c:	47b8      	blx	r7
 800cf5e:	3001      	adds	r0, #1
 800cf60:	d1c3      	bne.n	800ceea <_printf_float+0x32e>
 800cf62:	e686      	b.n	800cc72 <_printf_float+0xb6>
 800cf64:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cf68:	f1ba 0f01 	cmp.w	sl, #1
 800cf6c:	dc01      	bgt.n	800cf72 <_printf_float+0x3b6>
 800cf6e:	07db      	lsls	r3, r3, #31
 800cf70:	d536      	bpl.n	800cfe0 <_printf_float+0x424>
 800cf72:	2301      	movs	r3, #1
 800cf74:	4642      	mov	r2, r8
 800cf76:	4631      	mov	r1, r6
 800cf78:	4628      	mov	r0, r5
 800cf7a:	47b8      	blx	r7
 800cf7c:	3001      	adds	r0, #1
 800cf7e:	f43f ae78 	beq.w	800cc72 <_printf_float+0xb6>
 800cf82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf86:	4631      	mov	r1, r6
 800cf88:	4628      	mov	r0, r5
 800cf8a:	47b8      	blx	r7
 800cf8c:	3001      	adds	r0, #1
 800cf8e:	f43f ae70 	beq.w	800cc72 <_printf_float+0xb6>
 800cf92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cf96:	2200      	movs	r2, #0
 800cf98:	2300      	movs	r3, #0
 800cf9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf9e:	f7f3 fd93 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfa2:	b9c0      	cbnz	r0, 800cfd6 <_printf_float+0x41a>
 800cfa4:	4653      	mov	r3, sl
 800cfa6:	f108 0201 	add.w	r2, r8, #1
 800cfaa:	4631      	mov	r1, r6
 800cfac:	4628      	mov	r0, r5
 800cfae:	47b8      	blx	r7
 800cfb0:	3001      	adds	r0, #1
 800cfb2:	d10c      	bne.n	800cfce <_printf_float+0x412>
 800cfb4:	e65d      	b.n	800cc72 <_printf_float+0xb6>
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	465a      	mov	r2, fp
 800cfba:	4631      	mov	r1, r6
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	47b8      	blx	r7
 800cfc0:	3001      	adds	r0, #1
 800cfc2:	f43f ae56 	beq.w	800cc72 <_printf_float+0xb6>
 800cfc6:	f108 0801 	add.w	r8, r8, #1
 800cfca:	45d0      	cmp	r8, sl
 800cfcc:	dbf3      	blt.n	800cfb6 <_printf_float+0x3fa>
 800cfce:	464b      	mov	r3, r9
 800cfd0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cfd4:	e6df      	b.n	800cd96 <_printf_float+0x1da>
 800cfd6:	f04f 0800 	mov.w	r8, #0
 800cfda:	f104 0b1a 	add.w	fp, r4, #26
 800cfde:	e7f4      	b.n	800cfca <_printf_float+0x40e>
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	4642      	mov	r2, r8
 800cfe4:	e7e1      	b.n	800cfaa <_printf_float+0x3ee>
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	464a      	mov	r2, r9
 800cfea:	4631      	mov	r1, r6
 800cfec:	4628      	mov	r0, r5
 800cfee:	47b8      	blx	r7
 800cff0:	3001      	adds	r0, #1
 800cff2:	f43f ae3e 	beq.w	800cc72 <_printf_float+0xb6>
 800cff6:	f108 0801 	add.w	r8, r8, #1
 800cffa:	68e3      	ldr	r3, [r4, #12]
 800cffc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cffe:	1a5b      	subs	r3, r3, r1
 800d000:	4543      	cmp	r3, r8
 800d002:	dcf0      	bgt.n	800cfe6 <_printf_float+0x42a>
 800d004:	e6fc      	b.n	800ce00 <_printf_float+0x244>
 800d006:	f04f 0800 	mov.w	r8, #0
 800d00a:	f104 0919 	add.w	r9, r4, #25
 800d00e:	e7f4      	b.n	800cffa <_printf_float+0x43e>

0800d010 <_printf_common>:
 800d010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d014:	4616      	mov	r6, r2
 800d016:	4698      	mov	r8, r3
 800d018:	688a      	ldr	r2, [r1, #8]
 800d01a:	690b      	ldr	r3, [r1, #16]
 800d01c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d020:	4293      	cmp	r3, r2
 800d022:	bfb8      	it	lt
 800d024:	4613      	movlt	r3, r2
 800d026:	6033      	str	r3, [r6, #0]
 800d028:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d02c:	4607      	mov	r7, r0
 800d02e:	460c      	mov	r4, r1
 800d030:	b10a      	cbz	r2, 800d036 <_printf_common+0x26>
 800d032:	3301      	adds	r3, #1
 800d034:	6033      	str	r3, [r6, #0]
 800d036:	6823      	ldr	r3, [r4, #0]
 800d038:	0699      	lsls	r1, r3, #26
 800d03a:	bf42      	ittt	mi
 800d03c:	6833      	ldrmi	r3, [r6, #0]
 800d03e:	3302      	addmi	r3, #2
 800d040:	6033      	strmi	r3, [r6, #0]
 800d042:	6825      	ldr	r5, [r4, #0]
 800d044:	f015 0506 	ands.w	r5, r5, #6
 800d048:	d106      	bne.n	800d058 <_printf_common+0x48>
 800d04a:	f104 0a19 	add.w	sl, r4, #25
 800d04e:	68e3      	ldr	r3, [r4, #12]
 800d050:	6832      	ldr	r2, [r6, #0]
 800d052:	1a9b      	subs	r3, r3, r2
 800d054:	42ab      	cmp	r3, r5
 800d056:	dc26      	bgt.n	800d0a6 <_printf_common+0x96>
 800d058:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d05c:	6822      	ldr	r2, [r4, #0]
 800d05e:	3b00      	subs	r3, #0
 800d060:	bf18      	it	ne
 800d062:	2301      	movne	r3, #1
 800d064:	0692      	lsls	r2, r2, #26
 800d066:	d42b      	bmi.n	800d0c0 <_printf_common+0xb0>
 800d068:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d06c:	4641      	mov	r1, r8
 800d06e:	4638      	mov	r0, r7
 800d070:	47c8      	blx	r9
 800d072:	3001      	adds	r0, #1
 800d074:	d01e      	beq.n	800d0b4 <_printf_common+0xa4>
 800d076:	6823      	ldr	r3, [r4, #0]
 800d078:	6922      	ldr	r2, [r4, #16]
 800d07a:	f003 0306 	and.w	r3, r3, #6
 800d07e:	2b04      	cmp	r3, #4
 800d080:	bf02      	ittt	eq
 800d082:	68e5      	ldreq	r5, [r4, #12]
 800d084:	6833      	ldreq	r3, [r6, #0]
 800d086:	1aed      	subeq	r5, r5, r3
 800d088:	68a3      	ldr	r3, [r4, #8]
 800d08a:	bf0c      	ite	eq
 800d08c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d090:	2500      	movne	r5, #0
 800d092:	4293      	cmp	r3, r2
 800d094:	bfc4      	itt	gt
 800d096:	1a9b      	subgt	r3, r3, r2
 800d098:	18ed      	addgt	r5, r5, r3
 800d09a:	2600      	movs	r6, #0
 800d09c:	341a      	adds	r4, #26
 800d09e:	42b5      	cmp	r5, r6
 800d0a0:	d11a      	bne.n	800d0d8 <_printf_common+0xc8>
 800d0a2:	2000      	movs	r0, #0
 800d0a4:	e008      	b.n	800d0b8 <_printf_common+0xa8>
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	4652      	mov	r2, sl
 800d0aa:	4641      	mov	r1, r8
 800d0ac:	4638      	mov	r0, r7
 800d0ae:	47c8      	blx	r9
 800d0b0:	3001      	adds	r0, #1
 800d0b2:	d103      	bne.n	800d0bc <_printf_common+0xac>
 800d0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0bc:	3501      	adds	r5, #1
 800d0be:	e7c6      	b.n	800d04e <_printf_common+0x3e>
 800d0c0:	18e1      	adds	r1, r4, r3
 800d0c2:	1c5a      	adds	r2, r3, #1
 800d0c4:	2030      	movs	r0, #48	@ 0x30
 800d0c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d0ca:	4422      	add	r2, r4
 800d0cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d0d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d0d4:	3302      	adds	r3, #2
 800d0d6:	e7c7      	b.n	800d068 <_printf_common+0x58>
 800d0d8:	2301      	movs	r3, #1
 800d0da:	4622      	mov	r2, r4
 800d0dc:	4641      	mov	r1, r8
 800d0de:	4638      	mov	r0, r7
 800d0e0:	47c8      	blx	r9
 800d0e2:	3001      	adds	r0, #1
 800d0e4:	d0e6      	beq.n	800d0b4 <_printf_common+0xa4>
 800d0e6:	3601      	adds	r6, #1
 800d0e8:	e7d9      	b.n	800d09e <_printf_common+0x8e>
	...

0800d0ec <_printf_i>:
 800d0ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0f0:	7e0f      	ldrb	r7, [r1, #24]
 800d0f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d0f4:	2f78      	cmp	r7, #120	@ 0x78
 800d0f6:	4691      	mov	r9, r2
 800d0f8:	4680      	mov	r8, r0
 800d0fa:	460c      	mov	r4, r1
 800d0fc:	469a      	mov	sl, r3
 800d0fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d102:	d807      	bhi.n	800d114 <_printf_i+0x28>
 800d104:	2f62      	cmp	r7, #98	@ 0x62
 800d106:	d80a      	bhi.n	800d11e <_printf_i+0x32>
 800d108:	2f00      	cmp	r7, #0
 800d10a:	f000 80d1 	beq.w	800d2b0 <_printf_i+0x1c4>
 800d10e:	2f58      	cmp	r7, #88	@ 0x58
 800d110:	f000 80b8 	beq.w	800d284 <_printf_i+0x198>
 800d114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d118:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d11c:	e03a      	b.n	800d194 <_printf_i+0xa8>
 800d11e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d122:	2b15      	cmp	r3, #21
 800d124:	d8f6      	bhi.n	800d114 <_printf_i+0x28>
 800d126:	a101      	add	r1, pc, #4	@ (adr r1, 800d12c <_printf_i+0x40>)
 800d128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d12c:	0800d185 	.word	0x0800d185
 800d130:	0800d199 	.word	0x0800d199
 800d134:	0800d115 	.word	0x0800d115
 800d138:	0800d115 	.word	0x0800d115
 800d13c:	0800d115 	.word	0x0800d115
 800d140:	0800d115 	.word	0x0800d115
 800d144:	0800d199 	.word	0x0800d199
 800d148:	0800d115 	.word	0x0800d115
 800d14c:	0800d115 	.word	0x0800d115
 800d150:	0800d115 	.word	0x0800d115
 800d154:	0800d115 	.word	0x0800d115
 800d158:	0800d297 	.word	0x0800d297
 800d15c:	0800d1c3 	.word	0x0800d1c3
 800d160:	0800d251 	.word	0x0800d251
 800d164:	0800d115 	.word	0x0800d115
 800d168:	0800d115 	.word	0x0800d115
 800d16c:	0800d2b9 	.word	0x0800d2b9
 800d170:	0800d115 	.word	0x0800d115
 800d174:	0800d1c3 	.word	0x0800d1c3
 800d178:	0800d115 	.word	0x0800d115
 800d17c:	0800d115 	.word	0x0800d115
 800d180:	0800d259 	.word	0x0800d259
 800d184:	6833      	ldr	r3, [r6, #0]
 800d186:	1d1a      	adds	r2, r3, #4
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	6032      	str	r2, [r6, #0]
 800d18c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d190:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d194:	2301      	movs	r3, #1
 800d196:	e09c      	b.n	800d2d2 <_printf_i+0x1e6>
 800d198:	6833      	ldr	r3, [r6, #0]
 800d19a:	6820      	ldr	r0, [r4, #0]
 800d19c:	1d19      	adds	r1, r3, #4
 800d19e:	6031      	str	r1, [r6, #0]
 800d1a0:	0606      	lsls	r6, r0, #24
 800d1a2:	d501      	bpl.n	800d1a8 <_printf_i+0xbc>
 800d1a4:	681d      	ldr	r5, [r3, #0]
 800d1a6:	e003      	b.n	800d1b0 <_printf_i+0xc4>
 800d1a8:	0645      	lsls	r5, r0, #25
 800d1aa:	d5fb      	bpl.n	800d1a4 <_printf_i+0xb8>
 800d1ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d1b0:	2d00      	cmp	r5, #0
 800d1b2:	da03      	bge.n	800d1bc <_printf_i+0xd0>
 800d1b4:	232d      	movs	r3, #45	@ 0x2d
 800d1b6:	426d      	negs	r5, r5
 800d1b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d1bc:	4858      	ldr	r0, [pc, #352]	@ (800d320 <_printf_i+0x234>)
 800d1be:	230a      	movs	r3, #10
 800d1c0:	e011      	b.n	800d1e6 <_printf_i+0xfa>
 800d1c2:	6821      	ldr	r1, [r4, #0]
 800d1c4:	6833      	ldr	r3, [r6, #0]
 800d1c6:	0608      	lsls	r0, r1, #24
 800d1c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800d1cc:	d402      	bmi.n	800d1d4 <_printf_i+0xe8>
 800d1ce:	0649      	lsls	r1, r1, #25
 800d1d0:	bf48      	it	mi
 800d1d2:	b2ad      	uxthmi	r5, r5
 800d1d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800d1d6:	4852      	ldr	r0, [pc, #328]	@ (800d320 <_printf_i+0x234>)
 800d1d8:	6033      	str	r3, [r6, #0]
 800d1da:	bf14      	ite	ne
 800d1dc:	230a      	movne	r3, #10
 800d1de:	2308      	moveq	r3, #8
 800d1e0:	2100      	movs	r1, #0
 800d1e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d1e6:	6866      	ldr	r6, [r4, #4]
 800d1e8:	60a6      	str	r6, [r4, #8]
 800d1ea:	2e00      	cmp	r6, #0
 800d1ec:	db05      	blt.n	800d1fa <_printf_i+0x10e>
 800d1ee:	6821      	ldr	r1, [r4, #0]
 800d1f0:	432e      	orrs	r6, r5
 800d1f2:	f021 0104 	bic.w	r1, r1, #4
 800d1f6:	6021      	str	r1, [r4, #0]
 800d1f8:	d04b      	beq.n	800d292 <_printf_i+0x1a6>
 800d1fa:	4616      	mov	r6, r2
 800d1fc:	fbb5 f1f3 	udiv	r1, r5, r3
 800d200:	fb03 5711 	mls	r7, r3, r1, r5
 800d204:	5dc7      	ldrb	r7, [r0, r7]
 800d206:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d20a:	462f      	mov	r7, r5
 800d20c:	42bb      	cmp	r3, r7
 800d20e:	460d      	mov	r5, r1
 800d210:	d9f4      	bls.n	800d1fc <_printf_i+0x110>
 800d212:	2b08      	cmp	r3, #8
 800d214:	d10b      	bne.n	800d22e <_printf_i+0x142>
 800d216:	6823      	ldr	r3, [r4, #0]
 800d218:	07df      	lsls	r7, r3, #31
 800d21a:	d508      	bpl.n	800d22e <_printf_i+0x142>
 800d21c:	6923      	ldr	r3, [r4, #16]
 800d21e:	6861      	ldr	r1, [r4, #4]
 800d220:	4299      	cmp	r1, r3
 800d222:	bfde      	ittt	le
 800d224:	2330      	movle	r3, #48	@ 0x30
 800d226:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d22a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d22e:	1b92      	subs	r2, r2, r6
 800d230:	6122      	str	r2, [r4, #16]
 800d232:	f8cd a000 	str.w	sl, [sp]
 800d236:	464b      	mov	r3, r9
 800d238:	aa03      	add	r2, sp, #12
 800d23a:	4621      	mov	r1, r4
 800d23c:	4640      	mov	r0, r8
 800d23e:	f7ff fee7 	bl	800d010 <_printf_common>
 800d242:	3001      	adds	r0, #1
 800d244:	d14a      	bne.n	800d2dc <_printf_i+0x1f0>
 800d246:	f04f 30ff 	mov.w	r0, #4294967295
 800d24a:	b004      	add	sp, #16
 800d24c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d250:	6823      	ldr	r3, [r4, #0]
 800d252:	f043 0320 	orr.w	r3, r3, #32
 800d256:	6023      	str	r3, [r4, #0]
 800d258:	4832      	ldr	r0, [pc, #200]	@ (800d324 <_printf_i+0x238>)
 800d25a:	2778      	movs	r7, #120	@ 0x78
 800d25c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d260:	6823      	ldr	r3, [r4, #0]
 800d262:	6831      	ldr	r1, [r6, #0]
 800d264:	061f      	lsls	r7, r3, #24
 800d266:	f851 5b04 	ldr.w	r5, [r1], #4
 800d26a:	d402      	bmi.n	800d272 <_printf_i+0x186>
 800d26c:	065f      	lsls	r7, r3, #25
 800d26e:	bf48      	it	mi
 800d270:	b2ad      	uxthmi	r5, r5
 800d272:	6031      	str	r1, [r6, #0]
 800d274:	07d9      	lsls	r1, r3, #31
 800d276:	bf44      	itt	mi
 800d278:	f043 0320 	orrmi.w	r3, r3, #32
 800d27c:	6023      	strmi	r3, [r4, #0]
 800d27e:	b11d      	cbz	r5, 800d288 <_printf_i+0x19c>
 800d280:	2310      	movs	r3, #16
 800d282:	e7ad      	b.n	800d1e0 <_printf_i+0xf4>
 800d284:	4826      	ldr	r0, [pc, #152]	@ (800d320 <_printf_i+0x234>)
 800d286:	e7e9      	b.n	800d25c <_printf_i+0x170>
 800d288:	6823      	ldr	r3, [r4, #0]
 800d28a:	f023 0320 	bic.w	r3, r3, #32
 800d28e:	6023      	str	r3, [r4, #0]
 800d290:	e7f6      	b.n	800d280 <_printf_i+0x194>
 800d292:	4616      	mov	r6, r2
 800d294:	e7bd      	b.n	800d212 <_printf_i+0x126>
 800d296:	6833      	ldr	r3, [r6, #0]
 800d298:	6825      	ldr	r5, [r4, #0]
 800d29a:	6961      	ldr	r1, [r4, #20]
 800d29c:	1d18      	adds	r0, r3, #4
 800d29e:	6030      	str	r0, [r6, #0]
 800d2a0:	062e      	lsls	r6, r5, #24
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	d501      	bpl.n	800d2aa <_printf_i+0x1be>
 800d2a6:	6019      	str	r1, [r3, #0]
 800d2a8:	e002      	b.n	800d2b0 <_printf_i+0x1c4>
 800d2aa:	0668      	lsls	r0, r5, #25
 800d2ac:	d5fb      	bpl.n	800d2a6 <_printf_i+0x1ba>
 800d2ae:	8019      	strh	r1, [r3, #0]
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	6123      	str	r3, [r4, #16]
 800d2b4:	4616      	mov	r6, r2
 800d2b6:	e7bc      	b.n	800d232 <_printf_i+0x146>
 800d2b8:	6833      	ldr	r3, [r6, #0]
 800d2ba:	1d1a      	adds	r2, r3, #4
 800d2bc:	6032      	str	r2, [r6, #0]
 800d2be:	681e      	ldr	r6, [r3, #0]
 800d2c0:	6862      	ldr	r2, [r4, #4]
 800d2c2:	2100      	movs	r1, #0
 800d2c4:	4630      	mov	r0, r6
 800d2c6:	f7f2 ff83 	bl	80001d0 <memchr>
 800d2ca:	b108      	cbz	r0, 800d2d0 <_printf_i+0x1e4>
 800d2cc:	1b80      	subs	r0, r0, r6
 800d2ce:	6060      	str	r0, [r4, #4]
 800d2d0:	6863      	ldr	r3, [r4, #4]
 800d2d2:	6123      	str	r3, [r4, #16]
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2da:	e7aa      	b.n	800d232 <_printf_i+0x146>
 800d2dc:	6923      	ldr	r3, [r4, #16]
 800d2de:	4632      	mov	r2, r6
 800d2e0:	4649      	mov	r1, r9
 800d2e2:	4640      	mov	r0, r8
 800d2e4:	47d0      	blx	sl
 800d2e6:	3001      	adds	r0, #1
 800d2e8:	d0ad      	beq.n	800d246 <_printf_i+0x15a>
 800d2ea:	6823      	ldr	r3, [r4, #0]
 800d2ec:	079b      	lsls	r3, r3, #30
 800d2ee:	d413      	bmi.n	800d318 <_printf_i+0x22c>
 800d2f0:	68e0      	ldr	r0, [r4, #12]
 800d2f2:	9b03      	ldr	r3, [sp, #12]
 800d2f4:	4298      	cmp	r0, r3
 800d2f6:	bfb8      	it	lt
 800d2f8:	4618      	movlt	r0, r3
 800d2fa:	e7a6      	b.n	800d24a <_printf_i+0x15e>
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	4632      	mov	r2, r6
 800d300:	4649      	mov	r1, r9
 800d302:	4640      	mov	r0, r8
 800d304:	47d0      	blx	sl
 800d306:	3001      	adds	r0, #1
 800d308:	d09d      	beq.n	800d246 <_printf_i+0x15a>
 800d30a:	3501      	adds	r5, #1
 800d30c:	68e3      	ldr	r3, [r4, #12]
 800d30e:	9903      	ldr	r1, [sp, #12]
 800d310:	1a5b      	subs	r3, r3, r1
 800d312:	42ab      	cmp	r3, r5
 800d314:	dcf2      	bgt.n	800d2fc <_printf_i+0x210>
 800d316:	e7eb      	b.n	800d2f0 <_printf_i+0x204>
 800d318:	2500      	movs	r5, #0
 800d31a:	f104 0619 	add.w	r6, r4, #25
 800d31e:	e7f5      	b.n	800d30c <_printf_i+0x220>
 800d320:	0800f312 	.word	0x0800f312
 800d324:	0800f323 	.word	0x0800f323

0800d328 <std>:
 800d328:	2300      	movs	r3, #0
 800d32a:	b510      	push	{r4, lr}
 800d32c:	4604      	mov	r4, r0
 800d32e:	e9c0 3300 	strd	r3, r3, [r0]
 800d332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d336:	6083      	str	r3, [r0, #8]
 800d338:	8181      	strh	r1, [r0, #12]
 800d33a:	6643      	str	r3, [r0, #100]	@ 0x64
 800d33c:	81c2      	strh	r2, [r0, #14]
 800d33e:	6183      	str	r3, [r0, #24]
 800d340:	4619      	mov	r1, r3
 800d342:	2208      	movs	r2, #8
 800d344:	305c      	adds	r0, #92	@ 0x5c
 800d346:	f000 f906 	bl	800d556 <memset>
 800d34a:	4b0d      	ldr	r3, [pc, #52]	@ (800d380 <std+0x58>)
 800d34c:	6263      	str	r3, [r4, #36]	@ 0x24
 800d34e:	4b0d      	ldr	r3, [pc, #52]	@ (800d384 <std+0x5c>)
 800d350:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d352:	4b0d      	ldr	r3, [pc, #52]	@ (800d388 <std+0x60>)
 800d354:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d356:	4b0d      	ldr	r3, [pc, #52]	@ (800d38c <std+0x64>)
 800d358:	6323      	str	r3, [r4, #48]	@ 0x30
 800d35a:	4b0d      	ldr	r3, [pc, #52]	@ (800d390 <std+0x68>)
 800d35c:	6224      	str	r4, [r4, #32]
 800d35e:	429c      	cmp	r4, r3
 800d360:	d006      	beq.n	800d370 <std+0x48>
 800d362:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d366:	4294      	cmp	r4, r2
 800d368:	d002      	beq.n	800d370 <std+0x48>
 800d36a:	33d0      	adds	r3, #208	@ 0xd0
 800d36c:	429c      	cmp	r4, r3
 800d36e:	d105      	bne.n	800d37c <std+0x54>
 800d370:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d378:	f000 b97a 	b.w	800d670 <__retarget_lock_init_recursive>
 800d37c:	bd10      	pop	{r4, pc}
 800d37e:	bf00      	nop
 800d380:	0800d4d1 	.word	0x0800d4d1
 800d384:	0800d4f3 	.word	0x0800d4f3
 800d388:	0800d52b 	.word	0x0800d52b
 800d38c:	0800d54f 	.word	0x0800d54f
 800d390:	200020f0 	.word	0x200020f0

0800d394 <stdio_exit_handler>:
 800d394:	4a02      	ldr	r2, [pc, #8]	@ (800d3a0 <stdio_exit_handler+0xc>)
 800d396:	4903      	ldr	r1, [pc, #12]	@ (800d3a4 <stdio_exit_handler+0x10>)
 800d398:	4803      	ldr	r0, [pc, #12]	@ (800d3a8 <stdio_exit_handler+0x14>)
 800d39a:	f000 b87b 	b.w	800d494 <_fwalk_sglue>
 800d39e:	bf00      	nop
 800d3a0:	200000fc 	.word	0x200000fc
 800d3a4:	0800ee65 	.word	0x0800ee65
 800d3a8:	2000010c 	.word	0x2000010c

0800d3ac <cleanup_stdio>:
 800d3ac:	6841      	ldr	r1, [r0, #4]
 800d3ae:	4b0c      	ldr	r3, [pc, #48]	@ (800d3e0 <cleanup_stdio+0x34>)
 800d3b0:	4299      	cmp	r1, r3
 800d3b2:	b510      	push	{r4, lr}
 800d3b4:	4604      	mov	r4, r0
 800d3b6:	d001      	beq.n	800d3bc <cleanup_stdio+0x10>
 800d3b8:	f001 fd54 	bl	800ee64 <_fflush_r>
 800d3bc:	68a1      	ldr	r1, [r4, #8]
 800d3be:	4b09      	ldr	r3, [pc, #36]	@ (800d3e4 <cleanup_stdio+0x38>)
 800d3c0:	4299      	cmp	r1, r3
 800d3c2:	d002      	beq.n	800d3ca <cleanup_stdio+0x1e>
 800d3c4:	4620      	mov	r0, r4
 800d3c6:	f001 fd4d 	bl	800ee64 <_fflush_r>
 800d3ca:	68e1      	ldr	r1, [r4, #12]
 800d3cc:	4b06      	ldr	r3, [pc, #24]	@ (800d3e8 <cleanup_stdio+0x3c>)
 800d3ce:	4299      	cmp	r1, r3
 800d3d0:	d004      	beq.n	800d3dc <cleanup_stdio+0x30>
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3d8:	f001 bd44 	b.w	800ee64 <_fflush_r>
 800d3dc:	bd10      	pop	{r4, pc}
 800d3de:	bf00      	nop
 800d3e0:	200020f0 	.word	0x200020f0
 800d3e4:	20002158 	.word	0x20002158
 800d3e8:	200021c0 	.word	0x200021c0

0800d3ec <global_stdio_init.part.0>:
 800d3ec:	b510      	push	{r4, lr}
 800d3ee:	4b0b      	ldr	r3, [pc, #44]	@ (800d41c <global_stdio_init.part.0+0x30>)
 800d3f0:	4c0b      	ldr	r4, [pc, #44]	@ (800d420 <global_stdio_init.part.0+0x34>)
 800d3f2:	4a0c      	ldr	r2, [pc, #48]	@ (800d424 <global_stdio_init.part.0+0x38>)
 800d3f4:	601a      	str	r2, [r3, #0]
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	2104      	movs	r1, #4
 800d3fc:	f7ff ff94 	bl	800d328 <std>
 800d400:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d404:	2201      	movs	r2, #1
 800d406:	2109      	movs	r1, #9
 800d408:	f7ff ff8e 	bl	800d328 <std>
 800d40c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d410:	2202      	movs	r2, #2
 800d412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d416:	2112      	movs	r1, #18
 800d418:	f7ff bf86 	b.w	800d328 <std>
 800d41c:	20002228 	.word	0x20002228
 800d420:	200020f0 	.word	0x200020f0
 800d424:	0800d395 	.word	0x0800d395

0800d428 <__sfp_lock_acquire>:
 800d428:	4801      	ldr	r0, [pc, #4]	@ (800d430 <__sfp_lock_acquire+0x8>)
 800d42a:	f000 b922 	b.w	800d672 <__retarget_lock_acquire_recursive>
 800d42e:	bf00      	nop
 800d430:	20002231 	.word	0x20002231

0800d434 <__sfp_lock_release>:
 800d434:	4801      	ldr	r0, [pc, #4]	@ (800d43c <__sfp_lock_release+0x8>)
 800d436:	f000 b91d 	b.w	800d674 <__retarget_lock_release_recursive>
 800d43a:	bf00      	nop
 800d43c:	20002231 	.word	0x20002231

0800d440 <__sinit>:
 800d440:	b510      	push	{r4, lr}
 800d442:	4604      	mov	r4, r0
 800d444:	f7ff fff0 	bl	800d428 <__sfp_lock_acquire>
 800d448:	6a23      	ldr	r3, [r4, #32]
 800d44a:	b11b      	cbz	r3, 800d454 <__sinit+0x14>
 800d44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d450:	f7ff bff0 	b.w	800d434 <__sfp_lock_release>
 800d454:	4b04      	ldr	r3, [pc, #16]	@ (800d468 <__sinit+0x28>)
 800d456:	6223      	str	r3, [r4, #32]
 800d458:	4b04      	ldr	r3, [pc, #16]	@ (800d46c <__sinit+0x2c>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d1f5      	bne.n	800d44c <__sinit+0xc>
 800d460:	f7ff ffc4 	bl	800d3ec <global_stdio_init.part.0>
 800d464:	e7f2      	b.n	800d44c <__sinit+0xc>
 800d466:	bf00      	nop
 800d468:	0800d3ad 	.word	0x0800d3ad
 800d46c:	20002228 	.word	0x20002228

0800d470 <fiprintf>:
 800d470:	b40e      	push	{r1, r2, r3}
 800d472:	b503      	push	{r0, r1, lr}
 800d474:	4601      	mov	r1, r0
 800d476:	ab03      	add	r3, sp, #12
 800d478:	4805      	ldr	r0, [pc, #20]	@ (800d490 <fiprintf+0x20>)
 800d47a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d47e:	6800      	ldr	r0, [r0, #0]
 800d480:	9301      	str	r3, [sp, #4]
 800d482:	f001 fb53 	bl	800eb2c <_vfiprintf_r>
 800d486:	b002      	add	sp, #8
 800d488:	f85d eb04 	ldr.w	lr, [sp], #4
 800d48c:	b003      	add	sp, #12
 800d48e:	4770      	bx	lr
 800d490:	20000108 	.word	0x20000108

0800d494 <_fwalk_sglue>:
 800d494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d498:	4607      	mov	r7, r0
 800d49a:	4688      	mov	r8, r1
 800d49c:	4614      	mov	r4, r2
 800d49e:	2600      	movs	r6, #0
 800d4a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d4a4:	f1b9 0901 	subs.w	r9, r9, #1
 800d4a8:	d505      	bpl.n	800d4b6 <_fwalk_sglue+0x22>
 800d4aa:	6824      	ldr	r4, [r4, #0]
 800d4ac:	2c00      	cmp	r4, #0
 800d4ae:	d1f7      	bne.n	800d4a0 <_fwalk_sglue+0xc>
 800d4b0:	4630      	mov	r0, r6
 800d4b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4b6:	89ab      	ldrh	r3, [r5, #12]
 800d4b8:	2b01      	cmp	r3, #1
 800d4ba:	d907      	bls.n	800d4cc <_fwalk_sglue+0x38>
 800d4bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	d003      	beq.n	800d4cc <_fwalk_sglue+0x38>
 800d4c4:	4629      	mov	r1, r5
 800d4c6:	4638      	mov	r0, r7
 800d4c8:	47c0      	blx	r8
 800d4ca:	4306      	orrs	r6, r0
 800d4cc:	3568      	adds	r5, #104	@ 0x68
 800d4ce:	e7e9      	b.n	800d4a4 <_fwalk_sglue+0x10>

0800d4d0 <__sread>:
 800d4d0:	b510      	push	{r4, lr}
 800d4d2:	460c      	mov	r4, r1
 800d4d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4d8:	f000 f86c 	bl	800d5b4 <_read_r>
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	bfab      	itete	ge
 800d4e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d4e2:	89a3      	ldrhlt	r3, [r4, #12]
 800d4e4:	181b      	addge	r3, r3, r0
 800d4e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d4ea:	bfac      	ite	ge
 800d4ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d4ee:	81a3      	strhlt	r3, [r4, #12]
 800d4f0:	bd10      	pop	{r4, pc}

0800d4f2 <__swrite>:
 800d4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f6:	461f      	mov	r7, r3
 800d4f8:	898b      	ldrh	r3, [r1, #12]
 800d4fa:	05db      	lsls	r3, r3, #23
 800d4fc:	4605      	mov	r5, r0
 800d4fe:	460c      	mov	r4, r1
 800d500:	4616      	mov	r6, r2
 800d502:	d505      	bpl.n	800d510 <__swrite+0x1e>
 800d504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d508:	2302      	movs	r3, #2
 800d50a:	2200      	movs	r2, #0
 800d50c:	f000 f840 	bl	800d590 <_lseek_r>
 800d510:	89a3      	ldrh	r3, [r4, #12]
 800d512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d516:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d51a:	81a3      	strh	r3, [r4, #12]
 800d51c:	4632      	mov	r2, r6
 800d51e:	463b      	mov	r3, r7
 800d520:	4628      	mov	r0, r5
 800d522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d526:	f000 b867 	b.w	800d5f8 <_write_r>

0800d52a <__sseek>:
 800d52a:	b510      	push	{r4, lr}
 800d52c:	460c      	mov	r4, r1
 800d52e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d532:	f000 f82d 	bl	800d590 <_lseek_r>
 800d536:	1c43      	adds	r3, r0, #1
 800d538:	89a3      	ldrh	r3, [r4, #12]
 800d53a:	bf15      	itete	ne
 800d53c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d53e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d542:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d546:	81a3      	strheq	r3, [r4, #12]
 800d548:	bf18      	it	ne
 800d54a:	81a3      	strhne	r3, [r4, #12]
 800d54c:	bd10      	pop	{r4, pc}

0800d54e <__sclose>:
 800d54e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d552:	f000 b80d 	b.w	800d570 <_close_r>

0800d556 <memset>:
 800d556:	4402      	add	r2, r0
 800d558:	4603      	mov	r3, r0
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d100      	bne.n	800d560 <memset+0xa>
 800d55e:	4770      	bx	lr
 800d560:	f803 1b01 	strb.w	r1, [r3], #1
 800d564:	e7f9      	b.n	800d55a <memset+0x4>
	...

0800d568 <_localeconv_r>:
 800d568:	4800      	ldr	r0, [pc, #0]	@ (800d56c <_localeconv_r+0x4>)
 800d56a:	4770      	bx	lr
 800d56c:	20000248 	.word	0x20000248

0800d570 <_close_r>:
 800d570:	b538      	push	{r3, r4, r5, lr}
 800d572:	4d06      	ldr	r5, [pc, #24]	@ (800d58c <_close_r+0x1c>)
 800d574:	2300      	movs	r3, #0
 800d576:	4604      	mov	r4, r0
 800d578:	4608      	mov	r0, r1
 800d57a:	602b      	str	r3, [r5, #0]
 800d57c:	f7f7 fb2e 	bl	8004bdc <_close>
 800d580:	1c43      	adds	r3, r0, #1
 800d582:	d102      	bne.n	800d58a <_close_r+0x1a>
 800d584:	682b      	ldr	r3, [r5, #0]
 800d586:	b103      	cbz	r3, 800d58a <_close_r+0x1a>
 800d588:	6023      	str	r3, [r4, #0]
 800d58a:	bd38      	pop	{r3, r4, r5, pc}
 800d58c:	2000222c 	.word	0x2000222c

0800d590 <_lseek_r>:
 800d590:	b538      	push	{r3, r4, r5, lr}
 800d592:	4d07      	ldr	r5, [pc, #28]	@ (800d5b0 <_lseek_r+0x20>)
 800d594:	4604      	mov	r4, r0
 800d596:	4608      	mov	r0, r1
 800d598:	4611      	mov	r1, r2
 800d59a:	2200      	movs	r2, #0
 800d59c:	602a      	str	r2, [r5, #0]
 800d59e:	461a      	mov	r2, r3
 800d5a0:	f7f7 fb43 	bl	8004c2a <_lseek>
 800d5a4:	1c43      	adds	r3, r0, #1
 800d5a6:	d102      	bne.n	800d5ae <_lseek_r+0x1e>
 800d5a8:	682b      	ldr	r3, [r5, #0]
 800d5aa:	b103      	cbz	r3, 800d5ae <_lseek_r+0x1e>
 800d5ac:	6023      	str	r3, [r4, #0]
 800d5ae:	bd38      	pop	{r3, r4, r5, pc}
 800d5b0:	2000222c 	.word	0x2000222c

0800d5b4 <_read_r>:
 800d5b4:	b538      	push	{r3, r4, r5, lr}
 800d5b6:	4d07      	ldr	r5, [pc, #28]	@ (800d5d4 <_read_r+0x20>)
 800d5b8:	4604      	mov	r4, r0
 800d5ba:	4608      	mov	r0, r1
 800d5bc:	4611      	mov	r1, r2
 800d5be:	2200      	movs	r2, #0
 800d5c0:	602a      	str	r2, [r5, #0]
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	f7f7 faed 	bl	8004ba2 <_read>
 800d5c8:	1c43      	adds	r3, r0, #1
 800d5ca:	d102      	bne.n	800d5d2 <_read_r+0x1e>
 800d5cc:	682b      	ldr	r3, [r5, #0]
 800d5ce:	b103      	cbz	r3, 800d5d2 <_read_r+0x1e>
 800d5d0:	6023      	str	r3, [r4, #0]
 800d5d2:	bd38      	pop	{r3, r4, r5, pc}
 800d5d4:	2000222c 	.word	0x2000222c

0800d5d8 <_sbrk_r>:
 800d5d8:	b538      	push	{r3, r4, r5, lr}
 800d5da:	4d06      	ldr	r5, [pc, #24]	@ (800d5f4 <_sbrk_r+0x1c>)
 800d5dc:	2300      	movs	r3, #0
 800d5de:	4604      	mov	r4, r0
 800d5e0:	4608      	mov	r0, r1
 800d5e2:	602b      	str	r3, [r5, #0]
 800d5e4:	f7f7 fb2e 	bl	8004c44 <_sbrk>
 800d5e8:	1c43      	adds	r3, r0, #1
 800d5ea:	d102      	bne.n	800d5f2 <_sbrk_r+0x1a>
 800d5ec:	682b      	ldr	r3, [r5, #0]
 800d5ee:	b103      	cbz	r3, 800d5f2 <_sbrk_r+0x1a>
 800d5f0:	6023      	str	r3, [r4, #0]
 800d5f2:	bd38      	pop	{r3, r4, r5, pc}
 800d5f4:	2000222c 	.word	0x2000222c

0800d5f8 <_write_r>:
 800d5f8:	b538      	push	{r3, r4, r5, lr}
 800d5fa:	4d07      	ldr	r5, [pc, #28]	@ (800d618 <_write_r+0x20>)
 800d5fc:	4604      	mov	r4, r0
 800d5fe:	4608      	mov	r0, r1
 800d600:	4611      	mov	r1, r2
 800d602:	2200      	movs	r2, #0
 800d604:	602a      	str	r2, [r5, #0]
 800d606:	461a      	mov	r2, r3
 800d608:	f7f6 f940 	bl	800388c <_write>
 800d60c:	1c43      	adds	r3, r0, #1
 800d60e:	d102      	bne.n	800d616 <_write_r+0x1e>
 800d610:	682b      	ldr	r3, [r5, #0]
 800d612:	b103      	cbz	r3, 800d616 <_write_r+0x1e>
 800d614:	6023      	str	r3, [r4, #0]
 800d616:	bd38      	pop	{r3, r4, r5, pc}
 800d618:	2000222c 	.word	0x2000222c

0800d61c <__errno>:
 800d61c:	4b01      	ldr	r3, [pc, #4]	@ (800d624 <__errno+0x8>)
 800d61e:	6818      	ldr	r0, [r3, #0]
 800d620:	4770      	bx	lr
 800d622:	bf00      	nop
 800d624:	20000108 	.word	0x20000108

0800d628 <__libc_init_array>:
 800d628:	b570      	push	{r4, r5, r6, lr}
 800d62a:	4d0d      	ldr	r5, [pc, #52]	@ (800d660 <__libc_init_array+0x38>)
 800d62c:	4c0d      	ldr	r4, [pc, #52]	@ (800d664 <__libc_init_array+0x3c>)
 800d62e:	1b64      	subs	r4, r4, r5
 800d630:	10a4      	asrs	r4, r4, #2
 800d632:	2600      	movs	r6, #0
 800d634:	42a6      	cmp	r6, r4
 800d636:	d109      	bne.n	800d64c <__libc_init_array+0x24>
 800d638:	4d0b      	ldr	r5, [pc, #44]	@ (800d668 <__libc_init_array+0x40>)
 800d63a:	4c0c      	ldr	r4, [pc, #48]	@ (800d66c <__libc_init_array+0x44>)
 800d63c:	f001 fdca 	bl	800f1d4 <_init>
 800d640:	1b64      	subs	r4, r4, r5
 800d642:	10a4      	asrs	r4, r4, #2
 800d644:	2600      	movs	r6, #0
 800d646:	42a6      	cmp	r6, r4
 800d648:	d105      	bne.n	800d656 <__libc_init_array+0x2e>
 800d64a:	bd70      	pop	{r4, r5, r6, pc}
 800d64c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d650:	4798      	blx	r3
 800d652:	3601      	adds	r6, #1
 800d654:	e7ee      	b.n	800d634 <__libc_init_array+0xc>
 800d656:	f855 3b04 	ldr.w	r3, [r5], #4
 800d65a:	4798      	blx	r3
 800d65c:	3601      	adds	r6, #1
 800d65e:	e7f2      	b.n	800d646 <__libc_init_array+0x1e>
 800d660:	0800f644 	.word	0x0800f644
 800d664:	0800f644 	.word	0x0800f644
 800d668:	0800f644 	.word	0x0800f644
 800d66c:	0800f648 	.word	0x0800f648

0800d670 <__retarget_lock_init_recursive>:
 800d670:	4770      	bx	lr

0800d672 <__retarget_lock_acquire_recursive>:
 800d672:	4770      	bx	lr

0800d674 <__retarget_lock_release_recursive>:
 800d674:	4770      	bx	lr

0800d676 <memcpy>:
 800d676:	440a      	add	r2, r1
 800d678:	4291      	cmp	r1, r2
 800d67a:	f100 33ff 	add.w	r3, r0, #4294967295
 800d67e:	d100      	bne.n	800d682 <memcpy+0xc>
 800d680:	4770      	bx	lr
 800d682:	b510      	push	{r4, lr}
 800d684:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d688:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d68c:	4291      	cmp	r1, r2
 800d68e:	d1f9      	bne.n	800d684 <memcpy+0xe>
 800d690:	bd10      	pop	{r4, pc}

0800d692 <abort>:
 800d692:	b508      	push	{r3, lr}
 800d694:	2006      	movs	r0, #6
 800d696:	f001 fcc9 	bl	800f02c <raise>
 800d69a:	2001      	movs	r0, #1
 800d69c:	f7f7 fa76 	bl	8004b8c <_exit>

0800d6a0 <quorem>:
 800d6a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6a4:	6903      	ldr	r3, [r0, #16]
 800d6a6:	690c      	ldr	r4, [r1, #16]
 800d6a8:	42a3      	cmp	r3, r4
 800d6aa:	4607      	mov	r7, r0
 800d6ac:	db7e      	blt.n	800d7ac <quorem+0x10c>
 800d6ae:	3c01      	subs	r4, #1
 800d6b0:	f101 0814 	add.w	r8, r1, #20
 800d6b4:	00a3      	lsls	r3, r4, #2
 800d6b6:	f100 0514 	add.w	r5, r0, #20
 800d6ba:	9300      	str	r3, [sp, #0]
 800d6bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d6c0:	9301      	str	r3, [sp, #4]
 800d6c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d6c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d6d2:	fbb2 f6f3 	udiv	r6, r2, r3
 800d6d6:	d32e      	bcc.n	800d736 <quorem+0x96>
 800d6d8:	f04f 0a00 	mov.w	sl, #0
 800d6dc:	46c4      	mov	ip, r8
 800d6de:	46ae      	mov	lr, r5
 800d6e0:	46d3      	mov	fp, sl
 800d6e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d6e6:	b298      	uxth	r0, r3
 800d6e8:	fb06 a000 	mla	r0, r6, r0, sl
 800d6ec:	0c02      	lsrs	r2, r0, #16
 800d6ee:	0c1b      	lsrs	r3, r3, #16
 800d6f0:	fb06 2303 	mla	r3, r6, r3, r2
 800d6f4:	f8de 2000 	ldr.w	r2, [lr]
 800d6f8:	b280      	uxth	r0, r0
 800d6fa:	b292      	uxth	r2, r2
 800d6fc:	1a12      	subs	r2, r2, r0
 800d6fe:	445a      	add	r2, fp
 800d700:	f8de 0000 	ldr.w	r0, [lr]
 800d704:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d708:	b29b      	uxth	r3, r3
 800d70a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d70e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d712:	b292      	uxth	r2, r2
 800d714:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d718:	45e1      	cmp	r9, ip
 800d71a:	f84e 2b04 	str.w	r2, [lr], #4
 800d71e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d722:	d2de      	bcs.n	800d6e2 <quorem+0x42>
 800d724:	9b00      	ldr	r3, [sp, #0]
 800d726:	58eb      	ldr	r3, [r5, r3]
 800d728:	b92b      	cbnz	r3, 800d736 <quorem+0x96>
 800d72a:	9b01      	ldr	r3, [sp, #4]
 800d72c:	3b04      	subs	r3, #4
 800d72e:	429d      	cmp	r5, r3
 800d730:	461a      	mov	r2, r3
 800d732:	d32f      	bcc.n	800d794 <quorem+0xf4>
 800d734:	613c      	str	r4, [r7, #16]
 800d736:	4638      	mov	r0, r7
 800d738:	f001 f8c6 	bl	800e8c8 <__mcmp>
 800d73c:	2800      	cmp	r0, #0
 800d73e:	db25      	blt.n	800d78c <quorem+0xec>
 800d740:	4629      	mov	r1, r5
 800d742:	2000      	movs	r0, #0
 800d744:	f858 2b04 	ldr.w	r2, [r8], #4
 800d748:	f8d1 c000 	ldr.w	ip, [r1]
 800d74c:	fa1f fe82 	uxth.w	lr, r2
 800d750:	fa1f f38c 	uxth.w	r3, ip
 800d754:	eba3 030e 	sub.w	r3, r3, lr
 800d758:	4403      	add	r3, r0
 800d75a:	0c12      	lsrs	r2, r2, #16
 800d75c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d760:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d764:	b29b      	uxth	r3, r3
 800d766:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d76a:	45c1      	cmp	r9, r8
 800d76c:	f841 3b04 	str.w	r3, [r1], #4
 800d770:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d774:	d2e6      	bcs.n	800d744 <quorem+0xa4>
 800d776:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d77a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d77e:	b922      	cbnz	r2, 800d78a <quorem+0xea>
 800d780:	3b04      	subs	r3, #4
 800d782:	429d      	cmp	r5, r3
 800d784:	461a      	mov	r2, r3
 800d786:	d30b      	bcc.n	800d7a0 <quorem+0x100>
 800d788:	613c      	str	r4, [r7, #16]
 800d78a:	3601      	adds	r6, #1
 800d78c:	4630      	mov	r0, r6
 800d78e:	b003      	add	sp, #12
 800d790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d794:	6812      	ldr	r2, [r2, #0]
 800d796:	3b04      	subs	r3, #4
 800d798:	2a00      	cmp	r2, #0
 800d79a:	d1cb      	bne.n	800d734 <quorem+0x94>
 800d79c:	3c01      	subs	r4, #1
 800d79e:	e7c6      	b.n	800d72e <quorem+0x8e>
 800d7a0:	6812      	ldr	r2, [r2, #0]
 800d7a2:	3b04      	subs	r3, #4
 800d7a4:	2a00      	cmp	r2, #0
 800d7a6:	d1ef      	bne.n	800d788 <quorem+0xe8>
 800d7a8:	3c01      	subs	r4, #1
 800d7aa:	e7ea      	b.n	800d782 <quorem+0xe2>
 800d7ac:	2000      	movs	r0, #0
 800d7ae:	e7ee      	b.n	800d78e <quorem+0xee>

0800d7b0 <_dtoa_r>:
 800d7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b4:	69c7      	ldr	r7, [r0, #28]
 800d7b6:	b097      	sub	sp, #92	@ 0x5c
 800d7b8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d7bc:	ec55 4b10 	vmov	r4, r5, d0
 800d7c0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d7c2:	9107      	str	r1, [sp, #28]
 800d7c4:	4681      	mov	r9, r0
 800d7c6:	920c      	str	r2, [sp, #48]	@ 0x30
 800d7c8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d7ca:	b97f      	cbnz	r7, 800d7ec <_dtoa_r+0x3c>
 800d7cc:	2010      	movs	r0, #16
 800d7ce:	f7ff f897 	bl	800c900 <malloc>
 800d7d2:	4602      	mov	r2, r0
 800d7d4:	f8c9 001c 	str.w	r0, [r9, #28]
 800d7d8:	b920      	cbnz	r0, 800d7e4 <_dtoa_r+0x34>
 800d7da:	4ba9      	ldr	r3, [pc, #676]	@ (800da80 <_dtoa_r+0x2d0>)
 800d7dc:	21ef      	movs	r1, #239	@ 0xef
 800d7de:	48a9      	ldr	r0, [pc, #676]	@ (800da84 <_dtoa_r+0x2d4>)
 800d7e0:	f7ff f870 	bl	800c8c4 <__assert_func>
 800d7e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d7e8:	6007      	str	r7, [r0, #0]
 800d7ea:	60c7      	str	r7, [r0, #12]
 800d7ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d7f0:	6819      	ldr	r1, [r3, #0]
 800d7f2:	b159      	cbz	r1, 800d80c <_dtoa_r+0x5c>
 800d7f4:	685a      	ldr	r2, [r3, #4]
 800d7f6:	604a      	str	r2, [r1, #4]
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	4093      	lsls	r3, r2
 800d7fc:	608b      	str	r3, [r1, #8]
 800d7fe:	4648      	mov	r0, r9
 800d800:	f000 fe30 	bl	800e464 <_Bfree>
 800d804:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d808:	2200      	movs	r2, #0
 800d80a:	601a      	str	r2, [r3, #0]
 800d80c:	1e2b      	subs	r3, r5, #0
 800d80e:	bfb9      	ittee	lt
 800d810:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d814:	9305      	strlt	r3, [sp, #20]
 800d816:	2300      	movge	r3, #0
 800d818:	6033      	strge	r3, [r6, #0]
 800d81a:	9f05      	ldr	r7, [sp, #20]
 800d81c:	4b9a      	ldr	r3, [pc, #616]	@ (800da88 <_dtoa_r+0x2d8>)
 800d81e:	bfbc      	itt	lt
 800d820:	2201      	movlt	r2, #1
 800d822:	6032      	strlt	r2, [r6, #0]
 800d824:	43bb      	bics	r3, r7
 800d826:	d112      	bne.n	800d84e <_dtoa_r+0x9e>
 800d828:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d82a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d82e:	6013      	str	r3, [r2, #0]
 800d830:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d834:	4323      	orrs	r3, r4
 800d836:	f000 855a 	beq.w	800e2ee <_dtoa_r+0xb3e>
 800d83a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d83c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800da9c <_dtoa_r+0x2ec>
 800d840:	2b00      	cmp	r3, #0
 800d842:	f000 855c 	beq.w	800e2fe <_dtoa_r+0xb4e>
 800d846:	f10a 0303 	add.w	r3, sl, #3
 800d84a:	f000 bd56 	b.w	800e2fa <_dtoa_r+0xb4a>
 800d84e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d852:	2200      	movs	r2, #0
 800d854:	ec51 0b17 	vmov	r0, r1, d7
 800d858:	2300      	movs	r3, #0
 800d85a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d85e:	f7f3 f933 	bl	8000ac8 <__aeabi_dcmpeq>
 800d862:	4680      	mov	r8, r0
 800d864:	b158      	cbz	r0, 800d87e <_dtoa_r+0xce>
 800d866:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d868:	2301      	movs	r3, #1
 800d86a:	6013      	str	r3, [r2, #0]
 800d86c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d86e:	b113      	cbz	r3, 800d876 <_dtoa_r+0xc6>
 800d870:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d872:	4b86      	ldr	r3, [pc, #536]	@ (800da8c <_dtoa_r+0x2dc>)
 800d874:	6013      	str	r3, [r2, #0]
 800d876:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800daa0 <_dtoa_r+0x2f0>
 800d87a:	f000 bd40 	b.w	800e2fe <_dtoa_r+0xb4e>
 800d87e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d882:	aa14      	add	r2, sp, #80	@ 0x50
 800d884:	a915      	add	r1, sp, #84	@ 0x54
 800d886:	4648      	mov	r0, r9
 800d888:	f001 f8ce 	bl	800ea28 <__d2b>
 800d88c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d890:	9002      	str	r0, [sp, #8]
 800d892:	2e00      	cmp	r6, #0
 800d894:	d078      	beq.n	800d988 <_dtoa_r+0x1d8>
 800d896:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d898:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d89c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d8a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d8a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d8a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d8ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	4b76      	ldr	r3, [pc, #472]	@ (800da90 <_dtoa_r+0x2e0>)
 800d8b6:	f7f2 fce7 	bl	8000288 <__aeabi_dsub>
 800d8ba:	a36b      	add	r3, pc, #428	@ (adr r3, 800da68 <_dtoa_r+0x2b8>)
 800d8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c0:	f7f2 fe9a 	bl	80005f8 <__aeabi_dmul>
 800d8c4:	a36a      	add	r3, pc, #424	@ (adr r3, 800da70 <_dtoa_r+0x2c0>)
 800d8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ca:	f7f2 fcdf 	bl	800028c <__adddf3>
 800d8ce:	4604      	mov	r4, r0
 800d8d0:	4630      	mov	r0, r6
 800d8d2:	460d      	mov	r5, r1
 800d8d4:	f7f2 fe26 	bl	8000524 <__aeabi_i2d>
 800d8d8:	a367      	add	r3, pc, #412	@ (adr r3, 800da78 <_dtoa_r+0x2c8>)
 800d8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8de:	f7f2 fe8b 	bl	80005f8 <__aeabi_dmul>
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	4629      	mov	r1, r5
 800d8ea:	f7f2 fccf 	bl	800028c <__adddf3>
 800d8ee:	4604      	mov	r4, r0
 800d8f0:	460d      	mov	r5, r1
 800d8f2:	f7f3 f931 	bl	8000b58 <__aeabi_d2iz>
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	4607      	mov	r7, r0
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	4620      	mov	r0, r4
 800d8fe:	4629      	mov	r1, r5
 800d900:	f7f3 f8ec 	bl	8000adc <__aeabi_dcmplt>
 800d904:	b140      	cbz	r0, 800d918 <_dtoa_r+0x168>
 800d906:	4638      	mov	r0, r7
 800d908:	f7f2 fe0c 	bl	8000524 <__aeabi_i2d>
 800d90c:	4622      	mov	r2, r4
 800d90e:	462b      	mov	r3, r5
 800d910:	f7f3 f8da 	bl	8000ac8 <__aeabi_dcmpeq>
 800d914:	b900      	cbnz	r0, 800d918 <_dtoa_r+0x168>
 800d916:	3f01      	subs	r7, #1
 800d918:	2f16      	cmp	r7, #22
 800d91a:	d852      	bhi.n	800d9c2 <_dtoa_r+0x212>
 800d91c:	4b5d      	ldr	r3, [pc, #372]	@ (800da94 <_dtoa_r+0x2e4>)
 800d91e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d926:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d92a:	f7f3 f8d7 	bl	8000adc <__aeabi_dcmplt>
 800d92e:	2800      	cmp	r0, #0
 800d930:	d049      	beq.n	800d9c6 <_dtoa_r+0x216>
 800d932:	3f01      	subs	r7, #1
 800d934:	2300      	movs	r3, #0
 800d936:	9310      	str	r3, [sp, #64]	@ 0x40
 800d938:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d93a:	1b9b      	subs	r3, r3, r6
 800d93c:	1e5a      	subs	r2, r3, #1
 800d93e:	bf45      	ittet	mi
 800d940:	f1c3 0301 	rsbmi	r3, r3, #1
 800d944:	9300      	strmi	r3, [sp, #0]
 800d946:	2300      	movpl	r3, #0
 800d948:	2300      	movmi	r3, #0
 800d94a:	9206      	str	r2, [sp, #24]
 800d94c:	bf54      	ite	pl
 800d94e:	9300      	strpl	r3, [sp, #0]
 800d950:	9306      	strmi	r3, [sp, #24]
 800d952:	2f00      	cmp	r7, #0
 800d954:	db39      	blt.n	800d9ca <_dtoa_r+0x21a>
 800d956:	9b06      	ldr	r3, [sp, #24]
 800d958:	970d      	str	r7, [sp, #52]	@ 0x34
 800d95a:	443b      	add	r3, r7
 800d95c:	9306      	str	r3, [sp, #24]
 800d95e:	2300      	movs	r3, #0
 800d960:	9308      	str	r3, [sp, #32]
 800d962:	9b07      	ldr	r3, [sp, #28]
 800d964:	2b09      	cmp	r3, #9
 800d966:	d863      	bhi.n	800da30 <_dtoa_r+0x280>
 800d968:	2b05      	cmp	r3, #5
 800d96a:	bfc4      	itt	gt
 800d96c:	3b04      	subgt	r3, #4
 800d96e:	9307      	strgt	r3, [sp, #28]
 800d970:	9b07      	ldr	r3, [sp, #28]
 800d972:	f1a3 0302 	sub.w	r3, r3, #2
 800d976:	bfcc      	ite	gt
 800d978:	2400      	movgt	r4, #0
 800d97a:	2401      	movle	r4, #1
 800d97c:	2b03      	cmp	r3, #3
 800d97e:	d863      	bhi.n	800da48 <_dtoa_r+0x298>
 800d980:	e8df f003 	tbb	[pc, r3]
 800d984:	2b375452 	.word	0x2b375452
 800d988:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d98c:	441e      	add	r6, r3
 800d98e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d992:	2b20      	cmp	r3, #32
 800d994:	bfc1      	itttt	gt
 800d996:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d99a:	409f      	lslgt	r7, r3
 800d99c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d9a0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d9a4:	bfd6      	itet	le
 800d9a6:	f1c3 0320 	rsble	r3, r3, #32
 800d9aa:	ea47 0003 	orrgt.w	r0, r7, r3
 800d9ae:	fa04 f003 	lslle.w	r0, r4, r3
 800d9b2:	f7f2 fda7 	bl	8000504 <__aeabi_ui2d>
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d9bc:	3e01      	subs	r6, #1
 800d9be:	9212      	str	r2, [sp, #72]	@ 0x48
 800d9c0:	e776      	b.n	800d8b0 <_dtoa_r+0x100>
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	e7b7      	b.n	800d936 <_dtoa_r+0x186>
 800d9c6:	9010      	str	r0, [sp, #64]	@ 0x40
 800d9c8:	e7b6      	b.n	800d938 <_dtoa_r+0x188>
 800d9ca:	9b00      	ldr	r3, [sp, #0]
 800d9cc:	1bdb      	subs	r3, r3, r7
 800d9ce:	9300      	str	r3, [sp, #0]
 800d9d0:	427b      	negs	r3, r7
 800d9d2:	9308      	str	r3, [sp, #32]
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	930d      	str	r3, [sp, #52]	@ 0x34
 800d9d8:	e7c3      	b.n	800d962 <_dtoa_r+0x1b2>
 800d9da:	2301      	movs	r3, #1
 800d9dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d9e0:	eb07 0b03 	add.w	fp, r7, r3
 800d9e4:	f10b 0301 	add.w	r3, fp, #1
 800d9e8:	2b01      	cmp	r3, #1
 800d9ea:	9303      	str	r3, [sp, #12]
 800d9ec:	bfb8      	it	lt
 800d9ee:	2301      	movlt	r3, #1
 800d9f0:	e006      	b.n	800da00 <_dtoa_r+0x250>
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	dd28      	ble.n	800da4e <_dtoa_r+0x29e>
 800d9fc:	469b      	mov	fp, r3
 800d9fe:	9303      	str	r3, [sp, #12]
 800da00:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800da04:	2100      	movs	r1, #0
 800da06:	2204      	movs	r2, #4
 800da08:	f102 0514 	add.w	r5, r2, #20
 800da0c:	429d      	cmp	r5, r3
 800da0e:	d926      	bls.n	800da5e <_dtoa_r+0x2ae>
 800da10:	6041      	str	r1, [r0, #4]
 800da12:	4648      	mov	r0, r9
 800da14:	f000 fce6 	bl	800e3e4 <_Balloc>
 800da18:	4682      	mov	sl, r0
 800da1a:	2800      	cmp	r0, #0
 800da1c:	d142      	bne.n	800daa4 <_dtoa_r+0x2f4>
 800da1e:	4b1e      	ldr	r3, [pc, #120]	@ (800da98 <_dtoa_r+0x2e8>)
 800da20:	4602      	mov	r2, r0
 800da22:	f240 11af 	movw	r1, #431	@ 0x1af
 800da26:	e6da      	b.n	800d7de <_dtoa_r+0x2e>
 800da28:	2300      	movs	r3, #0
 800da2a:	e7e3      	b.n	800d9f4 <_dtoa_r+0x244>
 800da2c:	2300      	movs	r3, #0
 800da2e:	e7d5      	b.n	800d9dc <_dtoa_r+0x22c>
 800da30:	2401      	movs	r4, #1
 800da32:	2300      	movs	r3, #0
 800da34:	9307      	str	r3, [sp, #28]
 800da36:	9409      	str	r4, [sp, #36]	@ 0x24
 800da38:	f04f 3bff 	mov.w	fp, #4294967295
 800da3c:	2200      	movs	r2, #0
 800da3e:	f8cd b00c 	str.w	fp, [sp, #12]
 800da42:	2312      	movs	r3, #18
 800da44:	920c      	str	r2, [sp, #48]	@ 0x30
 800da46:	e7db      	b.n	800da00 <_dtoa_r+0x250>
 800da48:	2301      	movs	r3, #1
 800da4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800da4c:	e7f4      	b.n	800da38 <_dtoa_r+0x288>
 800da4e:	f04f 0b01 	mov.w	fp, #1
 800da52:	f8cd b00c 	str.w	fp, [sp, #12]
 800da56:	465b      	mov	r3, fp
 800da58:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800da5c:	e7d0      	b.n	800da00 <_dtoa_r+0x250>
 800da5e:	3101      	adds	r1, #1
 800da60:	0052      	lsls	r2, r2, #1
 800da62:	e7d1      	b.n	800da08 <_dtoa_r+0x258>
 800da64:	f3af 8000 	nop.w
 800da68:	636f4361 	.word	0x636f4361
 800da6c:	3fd287a7 	.word	0x3fd287a7
 800da70:	8b60c8b3 	.word	0x8b60c8b3
 800da74:	3fc68a28 	.word	0x3fc68a28
 800da78:	509f79fb 	.word	0x509f79fb
 800da7c:	3fd34413 	.word	0x3fd34413
 800da80:	0800f341 	.word	0x0800f341
 800da84:	0800f358 	.word	0x0800f358
 800da88:	7ff00000 	.word	0x7ff00000
 800da8c:	0800f311 	.word	0x0800f311
 800da90:	3ff80000 	.word	0x3ff80000
 800da94:	0800f470 	.word	0x0800f470
 800da98:	0800f3b0 	.word	0x0800f3b0
 800da9c:	0800f33d 	.word	0x0800f33d
 800daa0:	0800f310 	.word	0x0800f310
 800daa4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800daa8:	6018      	str	r0, [r3, #0]
 800daaa:	9b03      	ldr	r3, [sp, #12]
 800daac:	2b0e      	cmp	r3, #14
 800daae:	f200 80a1 	bhi.w	800dbf4 <_dtoa_r+0x444>
 800dab2:	2c00      	cmp	r4, #0
 800dab4:	f000 809e 	beq.w	800dbf4 <_dtoa_r+0x444>
 800dab8:	2f00      	cmp	r7, #0
 800daba:	dd33      	ble.n	800db24 <_dtoa_r+0x374>
 800dabc:	4b9c      	ldr	r3, [pc, #624]	@ (800dd30 <_dtoa_r+0x580>)
 800dabe:	f007 020f 	and.w	r2, r7, #15
 800dac2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dac6:	ed93 7b00 	vldr	d7, [r3]
 800daca:	05f8      	lsls	r0, r7, #23
 800dacc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800dad0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800dad4:	d516      	bpl.n	800db04 <_dtoa_r+0x354>
 800dad6:	4b97      	ldr	r3, [pc, #604]	@ (800dd34 <_dtoa_r+0x584>)
 800dad8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dadc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dae0:	f7f2 feb4 	bl	800084c <__aeabi_ddiv>
 800dae4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dae8:	f004 040f 	and.w	r4, r4, #15
 800daec:	2603      	movs	r6, #3
 800daee:	4d91      	ldr	r5, [pc, #580]	@ (800dd34 <_dtoa_r+0x584>)
 800daf0:	b954      	cbnz	r4, 800db08 <_dtoa_r+0x358>
 800daf2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800daf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dafa:	f7f2 fea7 	bl	800084c <__aeabi_ddiv>
 800dafe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800db02:	e028      	b.n	800db56 <_dtoa_r+0x3a6>
 800db04:	2602      	movs	r6, #2
 800db06:	e7f2      	b.n	800daee <_dtoa_r+0x33e>
 800db08:	07e1      	lsls	r1, r4, #31
 800db0a:	d508      	bpl.n	800db1e <_dtoa_r+0x36e>
 800db0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800db10:	e9d5 2300 	ldrd	r2, r3, [r5]
 800db14:	f7f2 fd70 	bl	80005f8 <__aeabi_dmul>
 800db18:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800db1c:	3601      	adds	r6, #1
 800db1e:	1064      	asrs	r4, r4, #1
 800db20:	3508      	adds	r5, #8
 800db22:	e7e5      	b.n	800daf0 <_dtoa_r+0x340>
 800db24:	f000 80af 	beq.w	800dc86 <_dtoa_r+0x4d6>
 800db28:	427c      	negs	r4, r7
 800db2a:	4b81      	ldr	r3, [pc, #516]	@ (800dd30 <_dtoa_r+0x580>)
 800db2c:	4d81      	ldr	r5, [pc, #516]	@ (800dd34 <_dtoa_r+0x584>)
 800db2e:	f004 020f 	and.w	r2, r4, #15
 800db32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800db3e:	f7f2 fd5b 	bl	80005f8 <__aeabi_dmul>
 800db42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800db46:	1124      	asrs	r4, r4, #4
 800db48:	2300      	movs	r3, #0
 800db4a:	2602      	movs	r6, #2
 800db4c:	2c00      	cmp	r4, #0
 800db4e:	f040 808f 	bne.w	800dc70 <_dtoa_r+0x4c0>
 800db52:	2b00      	cmp	r3, #0
 800db54:	d1d3      	bne.n	800dafe <_dtoa_r+0x34e>
 800db56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800db58:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	f000 8094 	beq.w	800dc8a <_dtoa_r+0x4da>
 800db62:	4b75      	ldr	r3, [pc, #468]	@ (800dd38 <_dtoa_r+0x588>)
 800db64:	2200      	movs	r2, #0
 800db66:	4620      	mov	r0, r4
 800db68:	4629      	mov	r1, r5
 800db6a:	f7f2 ffb7 	bl	8000adc <__aeabi_dcmplt>
 800db6e:	2800      	cmp	r0, #0
 800db70:	f000 808b 	beq.w	800dc8a <_dtoa_r+0x4da>
 800db74:	9b03      	ldr	r3, [sp, #12]
 800db76:	2b00      	cmp	r3, #0
 800db78:	f000 8087 	beq.w	800dc8a <_dtoa_r+0x4da>
 800db7c:	f1bb 0f00 	cmp.w	fp, #0
 800db80:	dd34      	ble.n	800dbec <_dtoa_r+0x43c>
 800db82:	4620      	mov	r0, r4
 800db84:	4b6d      	ldr	r3, [pc, #436]	@ (800dd3c <_dtoa_r+0x58c>)
 800db86:	2200      	movs	r2, #0
 800db88:	4629      	mov	r1, r5
 800db8a:	f7f2 fd35 	bl	80005f8 <__aeabi_dmul>
 800db8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800db92:	f107 38ff 	add.w	r8, r7, #4294967295
 800db96:	3601      	adds	r6, #1
 800db98:	465c      	mov	r4, fp
 800db9a:	4630      	mov	r0, r6
 800db9c:	f7f2 fcc2 	bl	8000524 <__aeabi_i2d>
 800dba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dba4:	f7f2 fd28 	bl	80005f8 <__aeabi_dmul>
 800dba8:	4b65      	ldr	r3, [pc, #404]	@ (800dd40 <_dtoa_r+0x590>)
 800dbaa:	2200      	movs	r2, #0
 800dbac:	f7f2 fb6e 	bl	800028c <__adddf3>
 800dbb0:	4605      	mov	r5, r0
 800dbb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800dbb6:	2c00      	cmp	r4, #0
 800dbb8:	d16a      	bne.n	800dc90 <_dtoa_r+0x4e0>
 800dbba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dbbe:	4b61      	ldr	r3, [pc, #388]	@ (800dd44 <_dtoa_r+0x594>)
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	f7f2 fb61 	bl	8000288 <__aeabi_dsub>
 800dbc6:	4602      	mov	r2, r0
 800dbc8:	460b      	mov	r3, r1
 800dbca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dbce:	462a      	mov	r2, r5
 800dbd0:	4633      	mov	r3, r6
 800dbd2:	f7f2 ffa1 	bl	8000b18 <__aeabi_dcmpgt>
 800dbd6:	2800      	cmp	r0, #0
 800dbd8:	f040 8298 	bne.w	800e10c <_dtoa_r+0x95c>
 800dbdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dbe0:	462a      	mov	r2, r5
 800dbe2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800dbe6:	f7f2 ff79 	bl	8000adc <__aeabi_dcmplt>
 800dbea:	bb38      	cbnz	r0, 800dc3c <_dtoa_r+0x48c>
 800dbec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800dbf0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800dbf4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f2c0 8157 	blt.w	800deaa <_dtoa_r+0x6fa>
 800dbfc:	2f0e      	cmp	r7, #14
 800dbfe:	f300 8154 	bgt.w	800deaa <_dtoa_r+0x6fa>
 800dc02:	4b4b      	ldr	r3, [pc, #300]	@ (800dd30 <_dtoa_r+0x580>)
 800dc04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dc08:	ed93 7b00 	vldr	d7, [r3]
 800dc0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	ed8d 7b00 	vstr	d7, [sp]
 800dc14:	f280 80e5 	bge.w	800dde2 <_dtoa_r+0x632>
 800dc18:	9b03      	ldr	r3, [sp, #12]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	f300 80e1 	bgt.w	800dde2 <_dtoa_r+0x632>
 800dc20:	d10c      	bne.n	800dc3c <_dtoa_r+0x48c>
 800dc22:	4b48      	ldr	r3, [pc, #288]	@ (800dd44 <_dtoa_r+0x594>)
 800dc24:	2200      	movs	r2, #0
 800dc26:	ec51 0b17 	vmov	r0, r1, d7
 800dc2a:	f7f2 fce5 	bl	80005f8 <__aeabi_dmul>
 800dc2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc32:	f7f2 ff67 	bl	8000b04 <__aeabi_dcmpge>
 800dc36:	2800      	cmp	r0, #0
 800dc38:	f000 8266 	beq.w	800e108 <_dtoa_r+0x958>
 800dc3c:	2400      	movs	r4, #0
 800dc3e:	4625      	mov	r5, r4
 800dc40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dc42:	4656      	mov	r6, sl
 800dc44:	ea6f 0803 	mvn.w	r8, r3
 800dc48:	2700      	movs	r7, #0
 800dc4a:	4621      	mov	r1, r4
 800dc4c:	4648      	mov	r0, r9
 800dc4e:	f000 fc09 	bl	800e464 <_Bfree>
 800dc52:	2d00      	cmp	r5, #0
 800dc54:	f000 80bd 	beq.w	800ddd2 <_dtoa_r+0x622>
 800dc58:	b12f      	cbz	r7, 800dc66 <_dtoa_r+0x4b6>
 800dc5a:	42af      	cmp	r7, r5
 800dc5c:	d003      	beq.n	800dc66 <_dtoa_r+0x4b6>
 800dc5e:	4639      	mov	r1, r7
 800dc60:	4648      	mov	r0, r9
 800dc62:	f000 fbff 	bl	800e464 <_Bfree>
 800dc66:	4629      	mov	r1, r5
 800dc68:	4648      	mov	r0, r9
 800dc6a:	f000 fbfb 	bl	800e464 <_Bfree>
 800dc6e:	e0b0      	b.n	800ddd2 <_dtoa_r+0x622>
 800dc70:	07e2      	lsls	r2, r4, #31
 800dc72:	d505      	bpl.n	800dc80 <_dtoa_r+0x4d0>
 800dc74:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dc78:	f7f2 fcbe 	bl	80005f8 <__aeabi_dmul>
 800dc7c:	3601      	adds	r6, #1
 800dc7e:	2301      	movs	r3, #1
 800dc80:	1064      	asrs	r4, r4, #1
 800dc82:	3508      	adds	r5, #8
 800dc84:	e762      	b.n	800db4c <_dtoa_r+0x39c>
 800dc86:	2602      	movs	r6, #2
 800dc88:	e765      	b.n	800db56 <_dtoa_r+0x3a6>
 800dc8a:	9c03      	ldr	r4, [sp, #12]
 800dc8c:	46b8      	mov	r8, r7
 800dc8e:	e784      	b.n	800db9a <_dtoa_r+0x3ea>
 800dc90:	4b27      	ldr	r3, [pc, #156]	@ (800dd30 <_dtoa_r+0x580>)
 800dc92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dc94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dc9c:	4454      	add	r4, sl
 800dc9e:	2900      	cmp	r1, #0
 800dca0:	d054      	beq.n	800dd4c <_dtoa_r+0x59c>
 800dca2:	4929      	ldr	r1, [pc, #164]	@ (800dd48 <_dtoa_r+0x598>)
 800dca4:	2000      	movs	r0, #0
 800dca6:	f7f2 fdd1 	bl	800084c <__aeabi_ddiv>
 800dcaa:	4633      	mov	r3, r6
 800dcac:	462a      	mov	r2, r5
 800dcae:	f7f2 faeb 	bl	8000288 <__aeabi_dsub>
 800dcb2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dcb6:	4656      	mov	r6, sl
 800dcb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dcbc:	f7f2 ff4c 	bl	8000b58 <__aeabi_d2iz>
 800dcc0:	4605      	mov	r5, r0
 800dcc2:	f7f2 fc2f 	bl	8000524 <__aeabi_i2d>
 800dcc6:	4602      	mov	r2, r0
 800dcc8:	460b      	mov	r3, r1
 800dcca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dcce:	f7f2 fadb 	bl	8000288 <__aeabi_dsub>
 800dcd2:	3530      	adds	r5, #48	@ 0x30
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	460b      	mov	r3, r1
 800dcd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dcdc:	f806 5b01 	strb.w	r5, [r6], #1
 800dce0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dce4:	f7f2 fefa 	bl	8000adc <__aeabi_dcmplt>
 800dce8:	2800      	cmp	r0, #0
 800dcea:	d172      	bne.n	800ddd2 <_dtoa_r+0x622>
 800dcec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dcf0:	4911      	ldr	r1, [pc, #68]	@ (800dd38 <_dtoa_r+0x588>)
 800dcf2:	2000      	movs	r0, #0
 800dcf4:	f7f2 fac8 	bl	8000288 <__aeabi_dsub>
 800dcf8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dcfc:	f7f2 feee 	bl	8000adc <__aeabi_dcmplt>
 800dd00:	2800      	cmp	r0, #0
 800dd02:	f040 80b4 	bne.w	800de6e <_dtoa_r+0x6be>
 800dd06:	42a6      	cmp	r6, r4
 800dd08:	f43f af70 	beq.w	800dbec <_dtoa_r+0x43c>
 800dd0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dd10:	4b0a      	ldr	r3, [pc, #40]	@ (800dd3c <_dtoa_r+0x58c>)
 800dd12:	2200      	movs	r2, #0
 800dd14:	f7f2 fc70 	bl	80005f8 <__aeabi_dmul>
 800dd18:	4b08      	ldr	r3, [pc, #32]	@ (800dd3c <_dtoa_r+0x58c>)
 800dd1a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dd1e:	2200      	movs	r2, #0
 800dd20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd24:	f7f2 fc68 	bl	80005f8 <__aeabi_dmul>
 800dd28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd2c:	e7c4      	b.n	800dcb8 <_dtoa_r+0x508>
 800dd2e:	bf00      	nop
 800dd30:	0800f470 	.word	0x0800f470
 800dd34:	0800f448 	.word	0x0800f448
 800dd38:	3ff00000 	.word	0x3ff00000
 800dd3c:	40240000 	.word	0x40240000
 800dd40:	401c0000 	.word	0x401c0000
 800dd44:	40140000 	.word	0x40140000
 800dd48:	3fe00000 	.word	0x3fe00000
 800dd4c:	4631      	mov	r1, r6
 800dd4e:	4628      	mov	r0, r5
 800dd50:	f7f2 fc52 	bl	80005f8 <__aeabi_dmul>
 800dd54:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dd58:	9413      	str	r4, [sp, #76]	@ 0x4c
 800dd5a:	4656      	mov	r6, sl
 800dd5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd60:	f7f2 fefa 	bl	8000b58 <__aeabi_d2iz>
 800dd64:	4605      	mov	r5, r0
 800dd66:	f7f2 fbdd 	bl	8000524 <__aeabi_i2d>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd72:	f7f2 fa89 	bl	8000288 <__aeabi_dsub>
 800dd76:	3530      	adds	r5, #48	@ 0x30
 800dd78:	f806 5b01 	strb.w	r5, [r6], #1
 800dd7c:	4602      	mov	r2, r0
 800dd7e:	460b      	mov	r3, r1
 800dd80:	42a6      	cmp	r6, r4
 800dd82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dd86:	f04f 0200 	mov.w	r2, #0
 800dd8a:	d124      	bne.n	800ddd6 <_dtoa_r+0x626>
 800dd8c:	4baf      	ldr	r3, [pc, #700]	@ (800e04c <_dtoa_r+0x89c>)
 800dd8e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dd92:	f7f2 fa7b 	bl	800028c <__adddf3>
 800dd96:	4602      	mov	r2, r0
 800dd98:	460b      	mov	r3, r1
 800dd9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd9e:	f7f2 febb 	bl	8000b18 <__aeabi_dcmpgt>
 800dda2:	2800      	cmp	r0, #0
 800dda4:	d163      	bne.n	800de6e <_dtoa_r+0x6be>
 800dda6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ddaa:	49a8      	ldr	r1, [pc, #672]	@ (800e04c <_dtoa_r+0x89c>)
 800ddac:	2000      	movs	r0, #0
 800ddae:	f7f2 fa6b 	bl	8000288 <__aeabi_dsub>
 800ddb2:	4602      	mov	r2, r0
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ddba:	f7f2 fe8f 	bl	8000adc <__aeabi_dcmplt>
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	f43f af14 	beq.w	800dbec <_dtoa_r+0x43c>
 800ddc4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ddc6:	1e73      	subs	r3, r6, #1
 800ddc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ddca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ddce:	2b30      	cmp	r3, #48	@ 0x30
 800ddd0:	d0f8      	beq.n	800ddc4 <_dtoa_r+0x614>
 800ddd2:	4647      	mov	r7, r8
 800ddd4:	e03b      	b.n	800de4e <_dtoa_r+0x69e>
 800ddd6:	4b9e      	ldr	r3, [pc, #632]	@ (800e050 <_dtoa_r+0x8a0>)
 800ddd8:	f7f2 fc0e 	bl	80005f8 <__aeabi_dmul>
 800dddc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dde0:	e7bc      	b.n	800dd5c <_dtoa_r+0x5ac>
 800dde2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800dde6:	4656      	mov	r6, sl
 800dde8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ddec:	4620      	mov	r0, r4
 800ddee:	4629      	mov	r1, r5
 800ddf0:	f7f2 fd2c 	bl	800084c <__aeabi_ddiv>
 800ddf4:	f7f2 feb0 	bl	8000b58 <__aeabi_d2iz>
 800ddf8:	4680      	mov	r8, r0
 800ddfa:	f7f2 fb93 	bl	8000524 <__aeabi_i2d>
 800ddfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de02:	f7f2 fbf9 	bl	80005f8 <__aeabi_dmul>
 800de06:	4602      	mov	r2, r0
 800de08:	460b      	mov	r3, r1
 800de0a:	4620      	mov	r0, r4
 800de0c:	4629      	mov	r1, r5
 800de0e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800de12:	f7f2 fa39 	bl	8000288 <__aeabi_dsub>
 800de16:	f806 4b01 	strb.w	r4, [r6], #1
 800de1a:	9d03      	ldr	r5, [sp, #12]
 800de1c:	eba6 040a 	sub.w	r4, r6, sl
 800de20:	42a5      	cmp	r5, r4
 800de22:	4602      	mov	r2, r0
 800de24:	460b      	mov	r3, r1
 800de26:	d133      	bne.n	800de90 <_dtoa_r+0x6e0>
 800de28:	f7f2 fa30 	bl	800028c <__adddf3>
 800de2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de30:	4604      	mov	r4, r0
 800de32:	460d      	mov	r5, r1
 800de34:	f7f2 fe70 	bl	8000b18 <__aeabi_dcmpgt>
 800de38:	b9c0      	cbnz	r0, 800de6c <_dtoa_r+0x6bc>
 800de3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de3e:	4620      	mov	r0, r4
 800de40:	4629      	mov	r1, r5
 800de42:	f7f2 fe41 	bl	8000ac8 <__aeabi_dcmpeq>
 800de46:	b110      	cbz	r0, 800de4e <_dtoa_r+0x69e>
 800de48:	f018 0f01 	tst.w	r8, #1
 800de4c:	d10e      	bne.n	800de6c <_dtoa_r+0x6bc>
 800de4e:	9902      	ldr	r1, [sp, #8]
 800de50:	4648      	mov	r0, r9
 800de52:	f000 fb07 	bl	800e464 <_Bfree>
 800de56:	2300      	movs	r3, #0
 800de58:	7033      	strb	r3, [r6, #0]
 800de5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800de5c:	3701      	adds	r7, #1
 800de5e:	601f      	str	r7, [r3, #0]
 800de60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800de62:	2b00      	cmp	r3, #0
 800de64:	f000 824b 	beq.w	800e2fe <_dtoa_r+0xb4e>
 800de68:	601e      	str	r6, [r3, #0]
 800de6a:	e248      	b.n	800e2fe <_dtoa_r+0xb4e>
 800de6c:	46b8      	mov	r8, r7
 800de6e:	4633      	mov	r3, r6
 800de70:	461e      	mov	r6, r3
 800de72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de76:	2a39      	cmp	r2, #57	@ 0x39
 800de78:	d106      	bne.n	800de88 <_dtoa_r+0x6d8>
 800de7a:	459a      	cmp	sl, r3
 800de7c:	d1f8      	bne.n	800de70 <_dtoa_r+0x6c0>
 800de7e:	2230      	movs	r2, #48	@ 0x30
 800de80:	f108 0801 	add.w	r8, r8, #1
 800de84:	f88a 2000 	strb.w	r2, [sl]
 800de88:	781a      	ldrb	r2, [r3, #0]
 800de8a:	3201      	adds	r2, #1
 800de8c:	701a      	strb	r2, [r3, #0]
 800de8e:	e7a0      	b.n	800ddd2 <_dtoa_r+0x622>
 800de90:	4b6f      	ldr	r3, [pc, #444]	@ (800e050 <_dtoa_r+0x8a0>)
 800de92:	2200      	movs	r2, #0
 800de94:	f7f2 fbb0 	bl	80005f8 <__aeabi_dmul>
 800de98:	2200      	movs	r2, #0
 800de9a:	2300      	movs	r3, #0
 800de9c:	4604      	mov	r4, r0
 800de9e:	460d      	mov	r5, r1
 800dea0:	f7f2 fe12 	bl	8000ac8 <__aeabi_dcmpeq>
 800dea4:	2800      	cmp	r0, #0
 800dea6:	d09f      	beq.n	800dde8 <_dtoa_r+0x638>
 800dea8:	e7d1      	b.n	800de4e <_dtoa_r+0x69e>
 800deaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800deac:	2a00      	cmp	r2, #0
 800deae:	f000 80ea 	beq.w	800e086 <_dtoa_r+0x8d6>
 800deb2:	9a07      	ldr	r2, [sp, #28]
 800deb4:	2a01      	cmp	r2, #1
 800deb6:	f300 80cd 	bgt.w	800e054 <_dtoa_r+0x8a4>
 800deba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800debc:	2a00      	cmp	r2, #0
 800debe:	f000 80c1 	beq.w	800e044 <_dtoa_r+0x894>
 800dec2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800dec6:	9c08      	ldr	r4, [sp, #32]
 800dec8:	9e00      	ldr	r6, [sp, #0]
 800deca:	9a00      	ldr	r2, [sp, #0]
 800decc:	441a      	add	r2, r3
 800dece:	9200      	str	r2, [sp, #0]
 800ded0:	9a06      	ldr	r2, [sp, #24]
 800ded2:	2101      	movs	r1, #1
 800ded4:	441a      	add	r2, r3
 800ded6:	4648      	mov	r0, r9
 800ded8:	9206      	str	r2, [sp, #24]
 800deda:	f000 fb77 	bl	800e5cc <__i2b>
 800dede:	4605      	mov	r5, r0
 800dee0:	b166      	cbz	r6, 800defc <_dtoa_r+0x74c>
 800dee2:	9b06      	ldr	r3, [sp, #24]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	dd09      	ble.n	800defc <_dtoa_r+0x74c>
 800dee8:	42b3      	cmp	r3, r6
 800deea:	9a00      	ldr	r2, [sp, #0]
 800deec:	bfa8      	it	ge
 800deee:	4633      	movge	r3, r6
 800def0:	1ad2      	subs	r2, r2, r3
 800def2:	9200      	str	r2, [sp, #0]
 800def4:	9a06      	ldr	r2, [sp, #24]
 800def6:	1af6      	subs	r6, r6, r3
 800def8:	1ad3      	subs	r3, r2, r3
 800defa:	9306      	str	r3, [sp, #24]
 800defc:	9b08      	ldr	r3, [sp, #32]
 800defe:	b30b      	cbz	r3, 800df44 <_dtoa_r+0x794>
 800df00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df02:	2b00      	cmp	r3, #0
 800df04:	f000 80c6 	beq.w	800e094 <_dtoa_r+0x8e4>
 800df08:	2c00      	cmp	r4, #0
 800df0a:	f000 80c0 	beq.w	800e08e <_dtoa_r+0x8de>
 800df0e:	4629      	mov	r1, r5
 800df10:	4622      	mov	r2, r4
 800df12:	4648      	mov	r0, r9
 800df14:	f000 fc12 	bl	800e73c <__pow5mult>
 800df18:	9a02      	ldr	r2, [sp, #8]
 800df1a:	4601      	mov	r1, r0
 800df1c:	4605      	mov	r5, r0
 800df1e:	4648      	mov	r0, r9
 800df20:	f000 fb6a 	bl	800e5f8 <__multiply>
 800df24:	9902      	ldr	r1, [sp, #8]
 800df26:	4680      	mov	r8, r0
 800df28:	4648      	mov	r0, r9
 800df2a:	f000 fa9b 	bl	800e464 <_Bfree>
 800df2e:	9b08      	ldr	r3, [sp, #32]
 800df30:	1b1b      	subs	r3, r3, r4
 800df32:	9308      	str	r3, [sp, #32]
 800df34:	f000 80b1 	beq.w	800e09a <_dtoa_r+0x8ea>
 800df38:	9a08      	ldr	r2, [sp, #32]
 800df3a:	4641      	mov	r1, r8
 800df3c:	4648      	mov	r0, r9
 800df3e:	f000 fbfd 	bl	800e73c <__pow5mult>
 800df42:	9002      	str	r0, [sp, #8]
 800df44:	2101      	movs	r1, #1
 800df46:	4648      	mov	r0, r9
 800df48:	f000 fb40 	bl	800e5cc <__i2b>
 800df4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800df4e:	4604      	mov	r4, r0
 800df50:	2b00      	cmp	r3, #0
 800df52:	f000 81d8 	beq.w	800e306 <_dtoa_r+0xb56>
 800df56:	461a      	mov	r2, r3
 800df58:	4601      	mov	r1, r0
 800df5a:	4648      	mov	r0, r9
 800df5c:	f000 fbee 	bl	800e73c <__pow5mult>
 800df60:	9b07      	ldr	r3, [sp, #28]
 800df62:	2b01      	cmp	r3, #1
 800df64:	4604      	mov	r4, r0
 800df66:	f300 809f 	bgt.w	800e0a8 <_dtoa_r+0x8f8>
 800df6a:	9b04      	ldr	r3, [sp, #16]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	f040 8097 	bne.w	800e0a0 <_dtoa_r+0x8f0>
 800df72:	9b05      	ldr	r3, [sp, #20]
 800df74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df78:	2b00      	cmp	r3, #0
 800df7a:	f040 8093 	bne.w	800e0a4 <_dtoa_r+0x8f4>
 800df7e:	9b05      	ldr	r3, [sp, #20]
 800df80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800df84:	0d1b      	lsrs	r3, r3, #20
 800df86:	051b      	lsls	r3, r3, #20
 800df88:	b133      	cbz	r3, 800df98 <_dtoa_r+0x7e8>
 800df8a:	9b00      	ldr	r3, [sp, #0]
 800df8c:	3301      	adds	r3, #1
 800df8e:	9300      	str	r3, [sp, #0]
 800df90:	9b06      	ldr	r3, [sp, #24]
 800df92:	3301      	adds	r3, #1
 800df94:	9306      	str	r3, [sp, #24]
 800df96:	2301      	movs	r3, #1
 800df98:	9308      	str	r3, [sp, #32]
 800df9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	f000 81b8 	beq.w	800e312 <_dtoa_r+0xb62>
 800dfa2:	6923      	ldr	r3, [r4, #16]
 800dfa4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dfa8:	6918      	ldr	r0, [r3, #16]
 800dfaa:	f000 fac3 	bl	800e534 <__hi0bits>
 800dfae:	f1c0 0020 	rsb	r0, r0, #32
 800dfb2:	9b06      	ldr	r3, [sp, #24]
 800dfb4:	4418      	add	r0, r3
 800dfb6:	f010 001f 	ands.w	r0, r0, #31
 800dfba:	f000 8082 	beq.w	800e0c2 <_dtoa_r+0x912>
 800dfbe:	f1c0 0320 	rsb	r3, r0, #32
 800dfc2:	2b04      	cmp	r3, #4
 800dfc4:	dd73      	ble.n	800e0ae <_dtoa_r+0x8fe>
 800dfc6:	9b00      	ldr	r3, [sp, #0]
 800dfc8:	f1c0 001c 	rsb	r0, r0, #28
 800dfcc:	4403      	add	r3, r0
 800dfce:	9300      	str	r3, [sp, #0]
 800dfd0:	9b06      	ldr	r3, [sp, #24]
 800dfd2:	4403      	add	r3, r0
 800dfd4:	4406      	add	r6, r0
 800dfd6:	9306      	str	r3, [sp, #24]
 800dfd8:	9b00      	ldr	r3, [sp, #0]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	dd05      	ble.n	800dfea <_dtoa_r+0x83a>
 800dfde:	9902      	ldr	r1, [sp, #8]
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	4648      	mov	r0, r9
 800dfe4:	f000 fc04 	bl	800e7f0 <__lshift>
 800dfe8:	9002      	str	r0, [sp, #8]
 800dfea:	9b06      	ldr	r3, [sp, #24]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	dd05      	ble.n	800dffc <_dtoa_r+0x84c>
 800dff0:	4621      	mov	r1, r4
 800dff2:	461a      	mov	r2, r3
 800dff4:	4648      	mov	r0, r9
 800dff6:	f000 fbfb 	bl	800e7f0 <__lshift>
 800dffa:	4604      	mov	r4, r0
 800dffc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d061      	beq.n	800e0c6 <_dtoa_r+0x916>
 800e002:	9802      	ldr	r0, [sp, #8]
 800e004:	4621      	mov	r1, r4
 800e006:	f000 fc5f 	bl	800e8c8 <__mcmp>
 800e00a:	2800      	cmp	r0, #0
 800e00c:	da5b      	bge.n	800e0c6 <_dtoa_r+0x916>
 800e00e:	2300      	movs	r3, #0
 800e010:	9902      	ldr	r1, [sp, #8]
 800e012:	220a      	movs	r2, #10
 800e014:	4648      	mov	r0, r9
 800e016:	f000 fa47 	bl	800e4a8 <__multadd>
 800e01a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e01c:	9002      	str	r0, [sp, #8]
 800e01e:	f107 38ff 	add.w	r8, r7, #4294967295
 800e022:	2b00      	cmp	r3, #0
 800e024:	f000 8177 	beq.w	800e316 <_dtoa_r+0xb66>
 800e028:	4629      	mov	r1, r5
 800e02a:	2300      	movs	r3, #0
 800e02c:	220a      	movs	r2, #10
 800e02e:	4648      	mov	r0, r9
 800e030:	f000 fa3a 	bl	800e4a8 <__multadd>
 800e034:	f1bb 0f00 	cmp.w	fp, #0
 800e038:	4605      	mov	r5, r0
 800e03a:	dc6f      	bgt.n	800e11c <_dtoa_r+0x96c>
 800e03c:	9b07      	ldr	r3, [sp, #28]
 800e03e:	2b02      	cmp	r3, #2
 800e040:	dc49      	bgt.n	800e0d6 <_dtoa_r+0x926>
 800e042:	e06b      	b.n	800e11c <_dtoa_r+0x96c>
 800e044:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e046:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e04a:	e73c      	b.n	800dec6 <_dtoa_r+0x716>
 800e04c:	3fe00000 	.word	0x3fe00000
 800e050:	40240000 	.word	0x40240000
 800e054:	9b03      	ldr	r3, [sp, #12]
 800e056:	1e5c      	subs	r4, r3, #1
 800e058:	9b08      	ldr	r3, [sp, #32]
 800e05a:	42a3      	cmp	r3, r4
 800e05c:	db09      	blt.n	800e072 <_dtoa_r+0x8c2>
 800e05e:	1b1c      	subs	r4, r3, r4
 800e060:	9b03      	ldr	r3, [sp, #12]
 800e062:	2b00      	cmp	r3, #0
 800e064:	f6bf af30 	bge.w	800dec8 <_dtoa_r+0x718>
 800e068:	9b00      	ldr	r3, [sp, #0]
 800e06a:	9a03      	ldr	r2, [sp, #12]
 800e06c:	1a9e      	subs	r6, r3, r2
 800e06e:	2300      	movs	r3, #0
 800e070:	e72b      	b.n	800deca <_dtoa_r+0x71a>
 800e072:	9b08      	ldr	r3, [sp, #32]
 800e074:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e076:	9408      	str	r4, [sp, #32]
 800e078:	1ae3      	subs	r3, r4, r3
 800e07a:	441a      	add	r2, r3
 800e07c:	9e00      	ldr	r6, [sp, #0]
 800e07e:	9b03      	ldr	r3, [sp, #12]
 800e080:	920d      	str	r2, [sp, #52]	@ 0x34
 800e082:	2400      	movs	r4, #0
 800e084:	e721      	b.n	800deca <_dtoa_r+0x71a>
 800e086:	9c08      	ldr	r4, [sp, #32]
 800e088:	9e00      	ldr	r6, [sp, #0]
 800e08a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e08c:	e728      	b.n	800dee0 <_dtoa_r+0x730>
 800e08e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e092:	e751      	b.n	800df38 <_dtoa_r+0x788>
 800e094:	9a08      	ldr	r2, [sp, #32]
 800e096:	9902      	ldr	r1, [sp, #8]
 800e098:	e750      	b.n	800df3c <_dtoa_r+0x78c>
 800e09a:	f8cd 8008 	str.w	r8, [sp, #8]
 800e09e:	e751      	b.n	800df44 <_dtoa_r+0x794>
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	e779      	b.n	800df98 <_dtoa_r+0x7e8>
 800e0a4:	9b04      	ldr	r3, [sp, #16]
 800e0a6:	e777      	b.n	800df98 <_dtoa_r+0x7e8>
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	9308      	str	r3, [sp, #32]
 800e0ac:	e779      	b.n	800dfa2 <_dtoa_r+0x7f2>
 800e0ae:	d093      	beq.n	800dfd8 <_dtoa_r+0x828>
 800e0b0:	9a00      	ldr	r2, [sp, #0]
 800e0b2:	331c      	adds	r3, #28
 800e0b4:	441a      	add	r2, r3
 800e0b6:	9200      	str	r2, [sp, #0]
 800e0b8:	9a06      	ldr	r2, [sp, #24]
 800e0ba:	441a      	add	r2, r3
 800e0bc:	441e      	add	r6, r3
 800e0be:	9206      	str	r2, [sp, #24]
 800e0c0:	e78a      	b.n	800dfd8 <_dtoa_r+0x828>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	e7f4      	b.n	800e0b0 <_dtoa_r+0x900>
 800e0c6:	9b03      	ldr	r3, [sp, #12]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	46b8      	mov	r8, r7
 800e0cc:	dc20      	bgt.n	800e110 <_dtoa_r+0x960>
 800e0ce:	469b      	mov	fp, r3
 800e0d0:	9b07      	ldr	r3, [sp, #28]
 800e0d2:	2b02      	cmp	r3, #2
 800e0d4:	dd1e      	ble.n	800e114 <_dtoa_r+0x964>
 800e0d6:	f1bb 0f00 	cmp.w	fp, #0
 800e0da:	f47f adb1 	bne.w	800dc40 <_dtoa_r+0x490>
 800e0de:	4621      	mov	r1, r4
 800e0e0:	465b      	mov	r3, fp
 800e0e2:	2205      	movs	r2, #5
 800e0e4:	4648      	mov	r0, r9
 800e0e6:	f000 f9df 	bl	800e4a8 <__multadd>
 800e0ea:	4601      	mov	r1, r0
 800e0ec:	4604      	mov	r4, r0
 800e0ee:	9802      	ldr	r0, [sp, #8]
 800e0f0:	f000 fbea 	bl	800e8c8 <__mcmp>
 800e0f4:	2800      	cmp	r0, #0
 800e0f6:	f77f ada3 	ble.w	800dc40 <_dtoa_r+0x490>
 800e0fa:	4656      	mov	r6, sl
 800e0fc:	2331      	movs	r3, #49	@ 0x31
 800e0fe:	f806 3b01 	strb.w	r3, [r6], #1
 800e102:	f108 0801 	add.w	r8, r8, #1
 800e106:	e59f      	b.n	800dc48 <_dtoa_r+0x498>
 800e108:	9c03      	ldr	r4, [sp, #12]
 800e10a:	46b8      	mov	r8, r7
 800e10c:	4625      	mov	r5, r4
 800e10e:	e7f4      	b.n	800e0fa <_dtoa_r+0x94a>
 800e110:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e114:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e116:	2b00      	cmp	r3, #0
 800e118:	f000 8101 	beq.w	800e31e <_dtoa_r+0xb6e>
 800e11c:	2e00      	cmp	r6, #0
 800e11e:	dd05      	ble.n	800e12c <_dtoa_r+0x97c>
 800e120:	4629      	mov	r1, r5
 800e122:	4632      	mov	r2, r6
 800e124:	4648      	mov	r0, r9
 800e126:	f000 fb63 	bl	800e7f0 <__lshift>
 800e12a:	4605      	mov	r5, r0
 800e12c:	9b08      	ldr	r3, [sp, #32]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d05c      	beq.n	800e1ec <_dtoa_r+0xa3c>
 800e132:	6869      	ldr	r1, [r5, #4]
 800e134:	4648      	mov	r0, r9
 800e136:	f000 f955 	bl	800e3e4 <_Balloc>
 800e13a:	4606      	mov	r6, r0
 800e13c:	b928      	cbnz	r0, 800e14a <_dtoa_r+0x99a>
 800e13e:	4b82      	ldr	r3, [pc, #520]	@ (800e348 <_dtoa_r+0xb98>)
 800e140:	4602      	mov	r2, r0
 800e142:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e146:	f7ff bb4a 	b.w	800d7de <_dtoa_r+0x2e>
 800e14a:	692a      	ldr	r2, [r5, #16]
 800e14c:	3202      	adds	r2, #2
 800e14e:	0092      	lsls	r2, r2, #2
 800e150:	f105 010c 	add.w	r1, r5, #12
 800e154:	300c      	adds	r0, #12
 800e156:	f7ff fa8e 	bl	800d676 <memcpy>
 800e15a:	2201      	movs	r2, #1
 800e15c:	4631      	mov	r1, r6
 800e15e:	4648      	mov	r0, r9
 800e160:	f000 fb46 	bl	800e7f0 <__lshift>
 800e164:	f10a 0301 	add.w	r3, sl, #1
 800e168:	9300      	str	r3, [sp, #0]
 800e16a:	eb0a 030b 	add.w	r3, sl, fp
 800e16e:	9308      	str	r3, [sp, #32]
 800e170:	9b04      	ldr	r3, [sp, #16]
 800e172:	f003 0301 	and.w	r3, r3, #1
 800e176:	462f      	mov	r7, r5
 800e178:	9306      	str	r3, [sp, #24]
 800e17a:	4605      	mov	r5, r0
 800e17c:	9b00      	ldr	r3, [sp, #0]
 800e17e:	9802      	ldr	r0, [sp, #8]
 800e180:	4621      	mov	r1, r4
 800e182:	f103 3bff 	add.w	fp, r3, #4294967295
 800e186:	f7ff fa8b 	bl	800d6a0 <quorem>
 800e18a:	4603      	mov	r3, r0
 800e18c:	3330      	adds	r3, #48	@ 0x30
 800e18e:	9003      	str	r0, [sp, #12]
 800e190:	4639      	mov	r1, r7
 800e192:	9802      	ldr	r0, [sp, #8]
 800e194:	9309      	str	r3, [sp, #36]	@ 0x24
 800e196:	f000 fb97 	bl	800e8c8 <__mcmp>
 800e19a:	462a      	mov	r2, r5
 800e19c:	9004      	str	r0, [sp, #16]
 800e19e:	4621      	mov	r1, r4
 800e1a0:	4648      	mov	r0, r9
 800e1a2:	f000 fbad 	bl	800e900 <__mdiff>
 800e1a6:	68c2      	ldr	r2, [r0, #12]
 800e1a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1aa:	4606      	mov	r6, r0
 800e1ac:	bb02      	cbnz	r2, 800e1f0 <_dtoa_r+0xa40>
 800e1ae:	4601      	mov	r1, r0
 800e1b0:	9802      	ldr	r0, [sp, #8]
 800e1b2:	f000 fb89 	bl	800e8c8 <__mcmp>
 800e1b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1b8:	4602      	mov	r2, r0
 800e1ba:	4631      	mov	r1, r6
 800e1bc:	4648      	mov	r0, r9
 800e1be:	920c      	str	r2, [sp, #48]	@ 0x30
 800e1c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1c2:	f000 f94f 	bl	800e464 <_Bfree>
 800e1c6:	9b07      	ldr	r3, [sp, #28]
 800e1c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e1ca:	9e00      	ldr	r6, [sp, #0]
 800e1cc:	ea42 0103 	orr.w	r1, r2, r3
 800e1d0:	9b06      	ldr	r3, [sp, #24]
 800e1d2:	4319      	orrs	r1, r3
 800e1d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1d6:	d10d      	bne.n	800e1f4 <_dtoa_r+0xa44>
 800e1d8:	2b39      	cmp	r3, #57	@ 0x39
 800e1da:	d027      	beq.n	800e22c <_dtoa_r+0xa7c>
 800e1dc:	9a04      	ldr	r2, [sp, #16]
 800e1de:	2a00      	cmp	r2, #0
 800e1e0:	dd01      	ble.n	800e1e6 <_dtoa_r+0xa36>
 800e1e2:	9b03      	ldr	r3, [sp, #12]
 800e1e4:	3331      	adds	r3, #49	@ 0x31
 800e1e6:	f88b 3000 	strb.w	r3, [fp]
 800e1ea:	e52e      	b.n	800dc4a <_dtoa_r+0x49a>
 800e1ec:	4628      	mov	r0, r5
 800e1ee:	e7b9      	b.n	800e164 <_dtoa_r+0x9b4>
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	e7e2      	b.n	800e1ba <_dtoa_r+0xa0a>
 800e1f4:	9904      	ldr	r1, [sp, #16]
 800e1f6:	2900      	cmp	r1, #0
 800e1f8:	db04      	blt.n	800e204 <_dtoa_r+0xa54>
 800e1fa:	9807      	ldr	r0, [sp, #28]
 800e1fc:	4301      	orrs	r1, r0
 800e1fe:	9806      	ldr	r0, [sp, #24]
 800e200:	4301      	orrs	r1, r0
 800e202:	d120      	bne.n	800e246 <_dtoa_r+0xa96>
 800e204:	2a00      	cmp	r2, #0
 800e206:	ddee      	ble.n	800e1e6 <_dtoa_r+0xa36>
 800e208:	9902      	ldr	r1, [sp, #8]
 800e20a:	9300      	str	r3, [sp, #0]
 800e20c:	2201      	movs	r2, #1
 800e20e:	4648      	mov	r0, r9
 800e210:	f000 faee 	bl	800e7f0 <__lshift>
 800e214:	4621      	mov	r1, r4
 800e216:	9002      	str	r0, [sp, #8]
 800e218:	f000 fb56 	bl	800e8c8 <__mcmp>
 800e21c:	2800      	cmp	r0, #0
 800e21e:	9b00      	ldr	r3, [sp, #0]
 800e220:	dc02      	bgt.n	800e228 <_dtoa_r+0xa78>
 800e222:	d1e0      	bne.n	800e1e6 <_dtoa_r+0xa36>
 800e224:	07da      	lsls	r2, r3, #31
 800e226:	d5de      	bpl.n	800e1e6 <_dtoa_r+0xa36>
 800e228:	2b39      	cmp	r3, #57	@ 0x39
 800e22a:	d1da      	bne.n	800e1e2 <_dtoa_r+0xa32>
 800e22c:	2339      	movs	r3, #57	@ 0x39
 800e22e:	f88b 3000 	strb.w	r3, [fp]
 800e232:	4633      	mov	r3, r6
 800e234:	461e      	mov	r6, r3
 800e236:	3b01      	subs	r3, #1
 800e238:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e23c:	2a39      	cmp	r2, #57	@ 0x39
 800e23e:	d04e      	beq.n	800e2de <_dtoa_r+0xb2e>
 800e240:	3201      	adds	r2, #1
 800e242:	701a      	strb	r2, [r3, #0]
 800e244:	e501      	b.n	800dc4a <_dtoa_r+0x49a>
 800e246:	2a00      	cmp	r2, #0
 800e248:	dd03      	ble.n	800e252 <_dtoa_r+0xaa2>
 800e24a:	2b39      	cmp	r3, #57	@ 0x39
 800e24c:	d0ee      	beq.n	800e22c <_dtoa_r+0xa7c>
 800e24e:	3301      	adds	r3, #1
 800e250:	e7c9      	b.n	800e1e6 <_dtoa_r+0xa36>
 800e252:	9a00      	ldr	r2, [sp, #0]
 800e254:	9908      	ldr	r1, [sp, #32]
 800e256:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e25a:	428a      	cmp	r2, r1
 800e25c:	d028      	beq.n	800e2b0 <_dtoa_r+0xb00>
 800e25e:	9902      	ldr	r1, [sp, #8]
 800e260:	2300      	movs	r3, #0
 800e262:	220a      	movs	r2, #10
 800e264:	4648      	mov	r0, r9
 800e266:	f000 f91f 	bl	800e4a8 <__multadd>
 800e26a:	42af      	cmp	r7, r5
 800e26c:	9002      	str	r0, [sp, #8]
 800e26e:	f04f 0300 	mov.w	r3, #0
 800e272:	f04f 020a 	mov.w	r2, #10
 800e276:	4639      	mov	r1, r7
 800e278:	4648      	mov	r0, r9
 800e27a:	d107      	bne.n	800e28c <_dtoa_r+0xadc>
 800e27c:	f000 f914 	bl	800e4a8 <__multadd>
 800e280:	4607      	mov	r7, r0
 800e282:	4605      	mov	r5, r0
 800e284:	9b00      	ldr	r3, [sp, #0]
 800e286:	3301      	adds	r3, #1
 800e288:	9300      	str	r3, [sp, #0]
 800e28a:	e777      	b.n	800e17c <_dtoa_r+0x9cc>
 800e28c:	f000 f90c 	bl	800e4a8 <__multadd>
 800e290:	4629      	mov	r1, r5
 800e292:	4607      	mov	r7, r0
 800e294:	2300      	movs	r3, #0
 800e296:	220a      	movs	r2, #10
 800e298:	4648      	mov	r0, r9
 800e29a:	f000 f905 	bl	800e4a8 <__multadd>
 800e29e:	4605      	mov	r5, r0
 800e2a0:	e7f0      	b.n	800e284 <_dtoa_r+0xad4>
 800e2a2:	f1bb 0f00 	cmp.w	fp, #0
 800e2a6:	bfcc      	ite	gt
 800e2a8:	465e      	movgt	r6, fp
 800e2aa:	2601      	movle	r6, #1
 800e2ac:	4456      	add	r6, sl
 800e2ae:	2700      	movs	r7, #0
 800e2b0:	9902      	ldr	r1, [sp, #8]
 800e2b2:	9300      	str	r3, [sp, #0]
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	4648      	mov	r0, r9
 800e2b8:	f000 fa9a 	bl	800e7f0 <__lshift>
 800e2bc:	4621      	mov	r1, r4
 800e2be:	9002      	str	r0, [sp, #8]
 800e2c0:	f000 fb02 	bl	800e8c8 <__mcmp>
 800e2c4:	2800      	cmp	r0, #0
 800e2c6:	dcb4      	bgt.n	800e232 <_dtoa_r+0xa82>
 800e2c8:	d102      	bne.n	800e2d0 <_dtoa_r+0xb20>
 800e2ca:	9b00      	ldr	r3, [sp, #0]
 800e2cc:	07db      	lsls	r3, r3, #31
 800e2ce:	d4b0      	bmi.n	800e232 <_dtoa_r+0xa82>
 800e2d0:	4633      	mov	r3, r6
 800e2d2:	461e      	mov	r6, r3
 800e2d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2d8:	2a30      	cmp	r2, #48	@ 0x30
 800e2da:	d0fa      	beq.n	800e2d2 <_dtoa_r+0xb22>
 800e2dc:	e4b5      	b.n	800dc4a <_dtoa_r+0x49a>
 800e2de:	459a      	cmp	sl, r3
 800e2e0:	d1a8      	bne.n	800e234 <_dtoa_r+0xa84>
 800e2e2:	2331      	movs	r3, #49	@ 0x31
 800e2e4:	f108 0801 	add.w	r8, r8, #1
 800e2e8:	f88a 3000 	strb.w	r3, [sl]
 800e2ec:	e4ad      	b.n	800dc4a <_dtoa_r+0x49a>
 800e2ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e2f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e34c <_dtoa_r+0xb9c>
 800e2f4:	b11b      	cbz	r3, 800e2fe <_dtoa_r+0xb4e>
 800e2f6:	f10a 0308 	add.w	r3, sl, #8
 800e2fa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e2fc:	6013      	str	r3, [r2, #0]
 800e2fe:	4650      	mov	r0, sl
 800e300:	b017      	add	sp, #92	@ 0x5c
 800e302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e306:	9b07      	ldr	r3, [sp, #28]
 800e308:	2b01      	cmp	r3, #1
 800e30a:	f77f ae2e 	ble.w	800df6a <_dtoa_r+0x7ba>
 800e30e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e310:	9308      	str	r3, [sp, #32]
 800e312:	2001      	movs	r0, #1
 800e314:	e64d      	b.n	800dfb2 <_dtoa_r+0x802>
 800e316:	f1bb 0f00 	cmp.w	fp, #0
 800e31a:	f77f aed9 	ble.w	800e0d0 <_dtoa_r+0x920>
 800e31e:	4656      	mov	r6, sl
 800e320:	9802      	ldr	r0, [sp, #8]
 800e322:	4621      	mov	r1, r4
 800e324:	f7ff f9bc 	bl	800d6a0 <quorem>
 800e328:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e32c:	f806 3b01 	strb.w	r3, [r6], #1
 800e330:	eba6 020a 	sub.w	r2, r6, sl
 800e334:	4593      	cmp	fp, r2
 800e336:	ddb4      	ble.n	800e2a2 <_dtoa_r+0xaf2>
 800e338:	9902      	ldr	r1, [sp, #8]
 800e33a:	2300      	movs	r3, #0
 800e33c:	220a      	movs	r2, #10
 800e33e:	4648      	mov	r0, r9
 800e340:	f000 f8b2 	bl	800e4a8 <__multadd>
 800e344:	9002      	str	r0, [sp, #8]
 800e346:	e7eb      	b.n	800e320 <_dtoa_r+0xb70>
 800e348:	0800f3b0 	.word	0x0800f3b0
 800e34c:	0800f334 	.word	0x0800f334

0800e350 <_free_r>:
 800e350:	b538      	push	{r3, r4, r5, lr}
 800e352:	4605      	mov	r5, r0
 800e354:	2900      	cmp	r1, #0
 800e356:	d041      	beq.n	800e3dc <_free_r+0x8c>
 800e358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e35c:	1f0c      	subs	r4, r1, #4
 800e35e:	2b00      	cmp	r3, #0
 800e360:	bfb8      	it	lt
 800e362:	18e4      	addlt	r4, r4, r3
 800e364:	f7fe fb7e 	bl	800ca64 <__malloc_lock>
 800e368:	4a1d      	ldr	r2, [pc, #116]	@ (800e3e0 <_free_r+0x90>)
 800e36a:	6813      	ldr	r3, [r2, #0]
 800e36c:	b933      	cbnz	r3, 800e37c <_free_r+0x2c>
 800e36e:	6063      	str	r3, [r4, #4]
 800e370:	6014      	str	r4, [r2, #0]
 800e372:	4628      	mov	r0, r5
 800e374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e378:	f7fe bb7a 	b.w	800ca70 <__malloc_unlock>
 800e37c:	42a3      	cmp	r3, r4
 800e37e:	d908      	bls.n	800e392 <_free_r+0x42>
 800e380:	6820      	ldr	r0, [r4, #0]
 800e382:	1821      	adds	r1, r4, r0
 800e384:	428b      	cmp	r3, r1
 800e386:	bf01      	itttt	eq
 800e388:	6819      	ldreq	r1, [r3, #0]
 800e38a:	685b      	ldreq	r3, [r3, #4]
 800e38c:	1809      	addeq	r1, r1, r0
 800e38e:	6021      	streq	r1, [r4, #0]
 800e390:	e7ed      	b.n	800e36e <_free_r+0x1e>
 800e392:	461a      	mov	r2, r3
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	b10b      	cbz	r3, 800e39c <_free_r+0x4c>
 800e398:	42a3      	cmp	r3, r4
 800e39a:	d9fa      	bls.n	800e392 <_free_r+0x42>
 800e39c:	6811      	ldr	r1, [r2, #0]
 800e39e:	1850      	adds	r0, r2, r1
 800e3a0:	42a0      	cmp	r0, r4
 800e3a2:	d10b      	bne.n	800e3bc <_free_r+0x6c>
 800e3a4:	6820      	ldr	r0, [r4, #0]
 800e3a6:	4401      	add	r1, r0
 800e3a8:	1850      	adds	r0, r2, r1
 800e3aa:	4283      	cmp	r3, r0
 800e3ac:	6011      	str	r1, [r2, #0]
 800e3ae:	d1e0      	bne.n	800e372 <_free_r+0x22>
 800e3b0:	6818      	ldr	r0, [r3, #0]
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	6053      	str	r3, [r2, #4]
 800e3b6:	4408      	add	r0, r1
 800e3b8:	6010      	str	r0, [r2, #0]
 800e3ba:	e7da      	b.n	800e372 <_free_r+0x22>
 800e3bc:	d902      	bls.n	800e3c4 <_free_r+0x74>
 800e3be:	230c      	movs	r3, #12
 800e3c0:	602b      	str	r3, [r5, #0]
 800e3c2:	e7d6      	b.n	800e372 <_free_r+0x22>
 800e3c4:	6820      	ldr	r0, [r4, #0]
 800e3c6:	1821      	adds	r1, r4, r0
 800e3c8:	428b      	cmp	r3, r1
 800e3ca:	bf04      	itt	eq
 800e3cc:	6819      	ldreq	r1, [r3, #0]
 800e3ce:	685b      	ldreq	r3, [r3, #4]
 800e3d0:	6063      	str	r3, [r4, #4]
 800e3d2:	bf04      	itt	eq
 800e3d4:	1809      	addeq	r1, r1, r0
 800e3d6:	6021      	streq	r1, [r4, #0]
 800e3d8:	6054      	str	r4, [r2, #4]
 800e3da:	e7ca      	b.n	800e372 <_free_r+0x22>
 800e3dc:	bd38      	pop	{r3, r4, r5, pc}
 800e3de:	bf00      	nop
 800e3e0:	200020ec 	.word	0x200020ec

0800e3e4 <_Balloc>:
 800e3e4:	b570      	push	{r4, r5, r6, lr}
 800e3e6:	69c6      	ldr	r6, [r0, #28]
 800e3e8:	4604      	mov	r4, r0
 800e3ea:	460d      	mov	r5, r1
 800e3ec:	b976      	cbnz	r6, 800e40c <_Balloc+0x28>
 800e3ee:	2010      	movs	r0, #16
 800e3f0:	f7fe fa86 	bl	800c900 <malloc>
 800e3f4:	4602      	mov	r2, r0
 800e3f6:	61e0      	str	r0, [r4, #28]
 800e3f8:	b920      	cbnz	r0, 800e404 <_Balloc+0x20>
 800e3fa:	4b18      	ldr	r3, [pc, #96]	@ (800e45c <_Balloc+0x78>)
 800e3fc:	4818      	ldr	r0, [pc, #96]	@ (800e460 <_Balloc+0x7c>)
 800e3fe:	216b      	movs	r1, #107	@ 0x6b
 800e400:	f7fe fa60 	bl	800c8c4 <__assert_func>
 800e404:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e408:	6006      	str	r6, [r0, #0]
 800e40a:	60c6      	str	r6, [r0, #12]
 800e40c:	69e6      	ldr	r6, [r4, #28]
 800e40e:	68f3      	ldr	r3, [r6, #12]
 800e410:	b183      	cbz	r3, 800e434 <_Balloc+0x50>
 800e412:	69e3      	ldr	r3, [r4, #28]
 800e414:	68db      	ldr	r3, [r3, #12]
 800e416:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e41a:	b9b8      	cbnz	r0, 800e44c <_Balloc+0x68>
 800e41c:	2101      	movs	r1, #1
 800e41e:	fa01 f605 	lsl.w	r6, r1, r5
 800e422:	1d72      	adds	r2, r6, #5
 800e424:	0092      	lsls	r2, r2, #2
 800e426:	4620      	mov	r0, r4
 800e428:	f000 fe1c 	bl	800f064 <_calloc_r>
 800e42c:	b160      	cbz	r0, 800e448 <_Balloc+0x64>
 800e42e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e432:	e00e      	b.n	800e452 <_Balloc+0x6e>
 800e434:	2221      	movs	r2, #33	@ 0x21
 800e436:	2104      	movs	r1, #4
 800e438:	4620      	mov	r0, r4
 800e43a:	f000 fe13 	bl	800f064 <_calloc_r>
 800e43e:	69e3      	ldr	r3, [r4, #28]
 800e440:	60f0      	str	r0, [r6, #12]
 800e442:	68db      	ldr	r3, [r3, #12]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d1e4      	bne.n	800e412 <_Balloc+0x2e>
 800e448:	2000      	movs	r0, #0
 800e44a:	bd70      	pop	{r4, r5, r6, pc}
 800e44c:	6802      	ldr	r2, [r0, #0]
 800e44e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e452:	2300      	movs	r3, #0
 800e454:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e458:	e7f7      	b.n	800e44a <_Balloc+0x66>
 800e45a:	bf00      	nop
 800e45c:	0800f341 	.word	0x0800f341
 800e460:	0800f3c1 	.word	0x0800f3c1

0800e464 <_Bfree>:
 800e464:	b570      	push	{r4, r5, r6, lr}
 800e466:	69c6      	ldr	r6, [r0, #28]
 800e468:	4605      	mov	r5, r0
 800e46a:	460c      	mov	r4, r1
 800e46c:	b976      	cbnz	r6, 800e48c <_Bfree+0x28>
 800e46e:	2010      	movs	r0, #16
 800e470:	f7fe fa46 	bl	800c900 <malloc>
 800e474:	4602      	mov	r2, r0
 800e476:	61e8      	str	r0, [r5, #28]
 800e478:	b920      	cbnz	r0, 800e484 <_Bfree+0x20>
 800e47a:	4b09      	ldr	r3, [pc, #36]	@ (800e4a0 <_Bfree+0x3c>)
 800e47c:	4809      	ldr	r0, [pc, #36]	@ (800e4a4 <_Bfree+0x40>)
 800e47e:	218f      	movs	r1, #143	@ 0x8f
 800e480:	f7fe fa20 	bl	800c8c4 <__assert_func>
 800e484:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e488:	6006      	str	r6, [r0, #0]
 800e48a:	60c6      	str	r6, [r0, #12]
 800e48c:	b13c      	cbz	r4, 800e49e <_Bfree+0x3a>
 800e48e:	69eb      	ldr	r3, [r5, #28]
 800e490:	6862      	ldr	r2, [r4, #4]
 800e492:	68db      	ldr	r3, [r3, #12]
 800e494:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e498:	6021      	str	r1, [r4, #0]
 800e49a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e49e:	bd70      	pop	{r4, r5, r6, pc}
 800e4a0:	0800f341 	.word	0x0800f341
 800e4a4:	0800f3c1 	.word	0x0800f3c1

0800e4a8 <__multadd>:
 800e4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ac:	690d      	ldr	r5, [r1, #16]
 800e4ae:	4607      	mov	r7, r0
 800e4b0:	460c      	mov	r4, r1
 800e4b2:	461e      	mov	r6, r3
 800e4b4:	f101 0c14 	add.w	ip, r1, #20
 800e4b8:	2000      	movs	r0, #0
 800e4ba:	f8dc 3000 	ldr.w	r3, [ip]
 800e4be:	b299      	uxth	r1, r3
 800e4c0:	fb02 6101 	mla	r1, r2, r1, r6
 800e4c4:	0c1e      	lsrs	r6, r3, #16
 800e4c6:	0c0b      	lsrs	r3, r1, #16
 800e4c8:	fb02 3306 	mla	r3, r2, r6, r3
 800e4cc:	b289      	uxth	r1, r1
 800e4ce:	3001      	adds	r0, #1
 800e4d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e4d4:	4285      	cmp	r5, r0
 800e4d6:	f84c 1b04 	str.w	r1, [ip], #4
 800e4da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e4de:	dcec      	bgt.n	800e4ba <__multadd+0x12>
 800e4e0:	b30e      	cbz	r6, 800e526 <__multadd+0x7e>
 800e4e2:	68a3      	ldr	r3, [r4, #8]
 800e4e4:	42ab      	cmp	r3, r5
 800e4e6:	dc19      	bgt.n	800e51c <__multadd+0x74>
 800e4e8:	6861      	ldr	r1, [r4, #4]
 800e4ea:	4638      	mov	r0, r7
 800e4ec:	3101      	adds	r1, #1
 800e4ee:	f7ff ff79 	bl	800e3e4 <_Balloc>
 800e4f2:	4680      	mov	r8, r0
 800e4f4:	b928      	cbnz	r0, 800e502 <__multadd+0x5a>
 800e4f6:	4602      	mov	r2, r0
 800e4f8:	4b0c      	ldr	r3, [pc, #48]	@ (800e52c <__multadd+0x84>)
 800e4fa:	480d      	ldr	r0, [pc, #52]	@ (800e530 <__multadd+0x88>)
 800e4fc:	21ba      	movs	r1, #186	@ 0xba
 800e4fe:	f7fe f9e1 	bl	800c8c4 <__assert_func>
 800e502:	6922      	ldr	r2, [r4, #16]
 800e504:	3202      	adds	r2, #2
 800e506:	f104 010c 	add.w	r1, r4, #12
 800e50a:	0092      	lsls	r2, r2, #2
 800e50c:	300c      	adds	r0, #12
 800e50e:	f7ff f8b2 	bl	800d676 <memcpy>
 800e512:	4621      	mov	r1, r4
 800e514:	4638      	mov	r0, r7
 800e516:	f7ff ffa5 	bl	800e464 <_Bfree>
 800e51a:	4644      	mov	r4, r8
 800e51c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e520:	3501      	adds	r5, #1
 800e522:	615e      	str	r6, [r3, #20]
 800e524:	6125      	str	r5, [r4, #16]
 800e526:	4620      	mov	r0, r4
 800e528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e52c:	0800f3b0 	.word	0x0800f3b0
 800e530:	0800f3c1 	.word	0x0800f3c1

0800e534 <__hi0bits>:
 800e534:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e538:	4603      	mov	r3, r0
 800e53a:	bf36      	itet	cc
 800e53c:	0403      	lslcc	r3, r0, #16
 800e53e:	2000      	movcs	r0, #0
 800e540:	2010      	movcc	r0, #16
 800e542:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e546:	bf3c      	itt	cc
 800e548:	021b      	lslcc	r3, r3, #8
 800e54a:	3008      	addcc	r0, #8
 800e54c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e550:	bf3c      	itt	cc
 800e552:	011b      	lslcc	r3, r3, #4
 800e554:	3004      	addcc	r0, #4
 800e556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e55a:	bf3c      	itt	cc
 800e55c:	009b      	lslcc	r3, r3, #2
 800e55e:	3002      	addcc	r0, #2
 800e560:	2b00      	cmp	r3, #0
 800e562:	db05      	blt.n	800e570 <__hi0bits+0x3c>
 800e564:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e568:	f100 0001 	add.w	r0, r0, #1
 800e56c:	bf08      	it	eq
 800e56e:	2020      	moveq	r0, #32
 800e570:	4770      	bx	lr

0800e572 <__lo0bits>:
 800e572:	6803      	ldr	r3, [r0, #0]
 800e574:	4602      	mov	r2, r0
 800e576:	f013 0007 	ands.w	r0, r3, #7
 800e57a:	d00b      	beq.n	800e594 <__lo0bits+0x22>
 800e57c:	07d9      	lsls	r1, r3, #31
 800e57e:	d421      	bmi.n	800e5c4 <__lo0bits+0x52>
 800e580:	0798      	lsls	r0, r3, #30
 800e582:	bf49      	itett	mi
 800e584:	085b      	lsrmi	r3, r3, #1
 800e586:	089b      	lsrpl	r3, r3, #2
 800e588:	2001      	movmi	r0, #1
 800e58a:	6013      	strmi	r3, [r2, #0]
 800e58c:	bf5c      	itt	pl
 800e58e:	6013      	strpl	r3, [r2, #0]
 800e590:	2002      	movpl	r0, #2
 800e592:	4770      	bx	lr
 800e594:	b299      	uxth	r1, r3
 800e596:	b909      	cbnz	r1, 800e59c <__lo0bits+0x2a>
 800e598:	0c1b      	lsrs	r3, r3, #16
 800e59a:	2010      	movs	r0, #16
 800e59c:	b2d9      	uxtb	r1, r3
 800e59e:	b909      	cbnz	r1, 800e5a4 <__lo0bits+0x32>
 800e5a0:	3008      	adds	r0, #8
 800e5a2:	0a1b      	lsrs	r3, r3, #8
 800e5a4:	0719      	lsls	r1, r3, #28
 800e5a6:	bf04      	itt	eq
 800e5a8:	091b      	lsreq	r3, r3, #4
 800e5aa:	3004      	addeq	r0, #4
 800e5ac:	0799      	lsls	r1, r3, #30
 800e5ae:	bf04      	itt	eq
 800e5b0:	089b      	lsreq	r3, r3, #2
 800e5b2:	3002      	addeq	r0, #2
 800e5b4:	07d9      	lsls	r1, r3, #31
 800e5b6:	d403      	bmi.n	800e5c0 <__lo0bits+0x4e>
 800e5b8:	085b      	lsrs	r3, r3, #1
 800e5ba:	f100 0001 	add.w	r0, r0, #1
 800e5be:	d003      	beq.n	800e5c8 <__lo0bits+0x56>
 800e5c0:	6013      	str	r3, [r2, #0]
 800e5c2:	4770      	bx	lr
 800e5c4:	2000      	movs	r0, #0
 800e5c6:	4770      	bx	lr
 800e5c8:	2020      	movs	r0, #32
 800e5ca:	4770      	bx	lr

0800e5cc <__i2b>:
 800e5cc:	b510      	push	{r4, lr}
 800e5ce:	460c      	mov	r4, r1
 800e5d0:	2101      	movs	r1, #1
 800e5d2:	f7ff ff07 	bl	800e3e4 <_Balloc>
 800e5d6:	4602      	mov	r2, r0
 800e5d8:	b928      	cbnz	r0, 800e5e6 <__i2b+0x1a>
 800e5da:	4b05      	ldr	r3, [pc, #20]	@ (800e5f0 <__i2b+0x24>)
 800e5dc:	4805      	ldr	r0, [pc, #20]	@ (800e5f4 <__i2b+0x28>)
 800e5de:	f240 1145 	movw	r1, #325	@ 0x145
 800e5e2:	f7fe f96f 	bl	800c8c4 <__assert_func>
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	6144      	str	r4, [r0, #20]
 800e5ea:	6103      	str	r3, [r0, #16]
 800e5ec:	bd10      	pop	{r4, pc}
 800e5ee:	bf00      	nop
 800e5f0:	0800f3b0 	.word	0x0800f3b0
 800e5f4:	0800f3c1 	.word	0x0800f3c1

0800e5f8 <__multiply>:
 800e5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5fc:	4617      	mov	r7, r2
 800e5fe:	690a      	ldr	r2, [r1, #16]
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	429a      	cmp	r2, r3
 800e604:	bfa8      	it	ge
 800e606:	463b      	movge	r3, r7
 800e608:	4689      	mov	r9, r1
 800e60a:	bfa4      	itt	ge
 800e60c:	460f      	movge	r7, r1
 800e60e:	4699      	movge	r9, r3
 800e610:	693d      	ldr	r5, [r7, #16]
 800e612:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	6879      	ldr	r1, [r7, #4]
 800e61a:	eb05 060a 	add.w	r6, r5, sl
 800e61e:	42b3      	cmp	r3, r6
 800e620:	b085      	sub	sp, #20
 800e622:	bfb8      	it	lt
 800e624:	3101      	addlt	r1, #1
 800e626:	f7ff fedd 	bl	800e3e4 <_Balloc>
 800e62a:	b930      	cbnz	r0, 800e63a <__multiply+0x42>
 800e62c:	4602      	mov	r2, r0
 800e62e:	4b41      	ldr	r3, [pc, #260]	@ (800e734 <__multiply+0x13c>)
 800e630:	4841      	ldr	r0, [pc, #260]	@ (800e738 <__multiply+0x140>)
 800e632:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e636:	f7fe f945 	bl	800c8c4 <__assert_func>
 800e63a:	f100 0414 	add.w	r4, r0, #20
 800e63e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e642:	4623      	mov	r3, r4
 800e644:	2200      	movs	r2, #0
 800e646:	4573      	cmp	r3, lr
 800e648:	d320      	bcc.n	800e68c <__multiply+0x94>
 800e64a:	f107 0814 	add.w	r8, r7, #20
 800e64e:	f109 0114 	add.w	r1, r9, #20
 800e652:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e656:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e65a:	9302      	str	r3, [sp, #8]
 800e65c:	1beb      	subs	r3, r5, r7
 800e65e:	3b15      	subs	r3, #21
 800e660:	f023 0303 	bic.w	r3, r3, #3
 800e664:	3304      	adds	r3, #4
 800e666:	3715      	adds	r7, #21
 800e668:	42bd      	cmp	r5, r7
 800e66a:	bf38      	it	cc
 800e66c:	2304      	movcc	r3, #4
 800e66e:	9301      	str	r3, [sp, #4]
 800e670:	9b02      	ldr	r3, [sp, #8]
 800e672:	9103      	str	r1, [sp, #12]
 800e674:	428b      	cmp	r3, r1
 800e676:	d80c      	bhi.n	800e692 <__multiply+0x9a>
 800e678:	2e00      	cmp	r6, #0
 800e67a:	dd03      	ble.n	800e684 <__multiply+0x8c>
 800e67c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e680:	2b00      	cmp	r3, #0
 800e682:	d055      	beq.n	800e730 <__multiply+0x138>
 800e684:	6106      	str	r6, [r0, #16]
 800e686:	b005      	add	sp, #20
 800e688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e68c:	f843 2b04 	str.w	r2, [r3], #4
 800e690:	e7d9      	b.n	800e646 <__multiply+0x4e>
 800e692:	f8b1 a000 	ldrh.w	sl, [r1]
 800e696:	f1ba 0f00 	cmp.w	sl, #0
 800e69a:	d01f      	beq.n	800e6dc <__multiply+0xe4>
 800e69c:	46c4      	mov	ip, r8
 800e69e:	46a1      	mov	r9, r4
 800e6a0:	2700      	movs	r7, #0
 800e6a2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e6a6:	f8d9 3000 	ldr.w	r3, [r9]
 800e6aa:	fa1f fb82 	uxth.w	fp, r2
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	fb0a 330b 	mla	r3, sl, fp, r3
 800e6b4:	443b      	add	r3, r7
 800e6b6:	f8d9 7000 	ldr.w	r7, [r9]
 800e6ba:	0c12      	lsrs	r2, r2, #16
 800e6bc:	0c3f      	lsrs	r7, r7, #16
 800e6be:	fb0a 7202 	mla	r2, sl, r2, r7
 800e6c2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e6c6:	b29b      	uxth	r3, r3
 800e6c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e6cc:	4565      	cmp	r5, ip
 800e6ce:	f849 3b04 	str.w	r3, [r9], #4
 800e6d2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e6d6:	d8e4      	bhi.n	800e6a2 <__multiply+0xaa>
 800e6d8:	9b01      	ldr	r3, [sp, #4]
 800e6da:	50e7      	str	r7, [r4, r3]
 800e6dc:	9b03      	ldr	r3, [sp, #12]
 800e6de:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e6e2:	3104      	adds	r1, #4
 800e6e4:	f1b9 0f00 	cmp.w	r9, #0
 800e6e8:	d020      	beq.n	800e72c <__multiply+0x134>
 800e6ea:	6823      	ldr	r3, [r4, #0]
 800e6ec:	4647      	mov	r7, r8
 800e6ee:	46a4      	mov	ip, r4
 800e6f0:	f04f 0a00 	mov.w	sl, #0
 800e6f4:	f8b7 b000 	ldrh.w	fp, [r7]
 800e6f8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e6fc:	fb09 220b 	mla	r2, r9, fp, r2
 800e700:	4452      	add	r2, sl
 800e702:	b29b      	uxth	r3, r3
 800e704:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e708:	f84c 3b04 	str.w	r3, [ip], #4
 800e70c:	f857 3b04 	ldr.w	r3, [r7], #4
 800e710:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e714:	f8bc 3000 	ldrh.w	r3, [ip]
 800e718:	fb09 330a 	mla	r3, r9, sl, r3
 800e71c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e720:	42bd      	cmp	r5, r7
 800e722:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e726:	d8e5      	bhi.n	800e6f4 <__multiply+0xfc>
 800e728:	9a01      	ldr	r2, [sp, #4]
 800e72a:	50a3      	str	r3, [r4, r2]
 800e72c:	3404      	adds	r4, #4
 800e72e:	e79f      	b.n	800e670 <__multiply+0x78>
 800e730:	3e01      	subs	r6, #1
 800e732:	e7a1      	b.n	800e678 <__multiply+0x80>
 800e734:	0800f3b0 	.word	0x0800f3b0
 800e738:	0800f3c1 	.word	0x0800f3c1

0800e73c <__pow5mult>:
 800e73c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e740:	4615      	mov	r5, r2
 800e742:	f012 0203 	ands.w	r2, r2, #3
 800e746:	4607      	mov	r7, r0
 800e748:	460e      	mov	r6, r1
 800e74a:	d007      	beq.n	800e75c <__pow5mult+0x20>
 800e74c:	4c25      	ldr	r4, [pc, #148]	@ (800e7e4 <__pow5mult+0xa8>)
 800e74e:	3a01      	subs	r2, #1
 800e750:	2300      	movs	r3, #0
 800e752:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e756:	f7ff fea7 	bl	800e4a8 <__multadd>
 800e75a:	4606      	mov	r6, r0
 800e75c:	10ad      	asrs	r5, r5, #2
 800e75e:	d03d      	beq.n	800e7dc <__pow5mult+0xa0>
 800e760:	69fc      	ldr	r4, [r7, #28]
 800e762:	b97c      	cbnz	r4, 800e784 <__pow5mult+0x48>
 800e764:	2010      	movs	r0, #16
 800e766:	f7fe f8cb 	bl	800c900 <malloc>
 800e76a:	4602      	mov	r2, r0
 800e76c:	61f8      	str	r0, [r7, #28]
 800e76e:	b928      	cbnz	r0, 800e77c <__pow5mult+0x40>
 800e770:	4b1d      	ldr	r3, [pc, #116]	@ (800e7e8 <__pow5mult+0xac>)
 800e772:	481e      	ldr	r0, [pc, #120]	@ (800e7ec <__pow5mult+0xb0>)
 800e774:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e778:	f7fe f8a4 	bl	800c8c4 <__assert_func>
 800e77c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e780:	6004      	str	r4, [r0, #0]
 800e782:	60c4      	str	r4, [r0, #12]
 800e784:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e788:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e78c:	b94c      	cbnz	r4, 800e7a2 <__pow5mult+0x66>
 800e78e:	f240 2171 	movw	r1, #625	@ 0x271
 800e792:	4638      	mov	r0, r7
 800e794:	f7ff ff1a 	bl	800e5cc <__i2b>
 800e798:	2300      	movs	r3, #0
 800e79a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e79e:	4604      	mov	r4, r0
 800e7a0:	6003      	str	r3, [r0, #0]
 800e7a2:	f04f 0900 	mov.w	r9, #0
 800e7a6:	07eb      	lsls	r3, r5, #31
 800e7a8:	d50a      	bpl.n	800e7c0 <__pow5mult+0x84>
 800e7aa:	4631      	mov	r1, r6
 800e7ac:	4622      	mov	r2, r4
 800e7ae:	4638      	mov	r0, r7
 800e7b0:	f7ff ff22 	bl	800e5f8 <__multiply>
 800e7b4:	4631      	mov	r1, r6
 800e7b6:	4680      	mov	r8, r0
 800e7b8:	4638      	mov	r0, r7
 800e7ba:	f7ff fe53 	bl	800e464 <_Bfree>
 800e7be:	4646      	mov	r6, r8
 800e7c0:	106d      	asrs	r5, r5, #1
 800e7c2:	d00b      	beq.n	800e7dc <__pow5mult+0xa0>
 800e7c4:	6820      	ldr	r0, [r4, #0]
 800e7c6:	b938      	cbnz	r0, 800e7d8 <__pow5mult+0x9c>
 800e7c8:	4622      	mov	r2, r4
 800e7ca:	4621      	mov	r1, r4
 800e7cc:	4638      	mov	r0, r7
 800e7ce:	f7ff ff13 	bl	800e5f8 <__multiply>
 800e7d2:	6020      	str	r0, [r4, #0]
 800e7d4:	f8c0 9000 	str.w	r9, [r0]
 800e7d8:	4604      	mov	r4, r0
 800e7da:	e7e4      	b.n	800e7a6 <__pow5mult+0x6a>
 800e7dc:	4630      	mov	r0, r6
 800e7de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7e2:	bf00      	nop
 800e7e4:	0800f438 	.word	0x0800f438
 800e7e8:	0800f341 	.word	0x0800f341
 800e7ec:	0800f3c1 	.word	0x0800f3c1

0800e7f0 <__lshift>:
 800e7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7f4:	460c      	mov	r4, r1
 800e7f6:	6849      	ldr	r1, [r1, #4]
 800e7f8:	6923      	ldr	r3, [r4, #16]
 800e7fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e7fe:	68a3      	ldr	r3, [r4, #8]
 800e800:	4607      	mov	r7, r0
 800e802:	4691      	mov	r9, r2
 800e804:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e808:	f108 0601 	add.w	r6, r8, #1
 800e80c:	42b3      	cmp	r3, r6
 800e80e:	db0b      	blt.n	800e828 <__lshift+0x38>
 800e810:	4638      	mov	r0, r7
 800e812:	f7ff fde7 	bl	800e3e4 <_Balloc>
 800e816:	4605      	mov	r5, r0
 800e818:	b948      	cbnz	r0, 800e82e <__lshift+0x3e>
 800e81a:	4602      	mov	r2, r0
 800e81c:	4b28      	ldr	r3, [pc, #160]	@ (800e8c0 <__lshift+0xd0>)
 800e81e:	4829      	ldr	r0, [pc, #164]	@ (800e8c4 <__lshift+0xd4>)
 800e820:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e824:	f7fe f84e 	bl	800c8c4 <__assert_func>
 800e828:	3101      	adds	r1, #1
 800e82a:	005b      	lsls	r3, r3, #1
 800e82c:	e7ee      	b.n	800e80c <__lshift+0x1c>
 800e82e:	2300      	movs	r3, #0
 800e830:	f100 0114 	add.w	r1, r0, #20
 800e834:	f100 0210 	add.w	r2, r0, #16
 800e838:	4618      	mov	r0, r3
 800e83a:	4553      	cmp	r3, sl
 800e83c:	db33      	blt.n	800e8a6 <__lshift+0xb6>
 800e83e:	6920      	ldr	r0, [r4, #16]
 800e840:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e844:	f104 0314 	add.w	r3, r4, #20
 800e848:	f019 091f 	ands.w	r9, r9, #31
 800e84c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e850:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e854:	d02b      	beq.n	800e8ae <__lshift+0xbe>
 800e856:	f1c9 0e20 	rsb	lr, r9, #32
 800e85a:	468a      	mov	sl, r1
 800e85c:	2200      	movs	r2, #0
 800e85e:	6818      	ldr	r0, [r3, #0]
 800e860:	fa00 f009 	lsl.w	r0, r0, r9
 800e864:	4310      	orrs	r0, r2
 800e866:	f84a 0b04 	str.w	r0, [sl], #4
 800e86a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e86e:	459c      	cmp	ip, r3
 800e870:	fa22 f20e 	lsr.w	r2, r2, lr
 800e874:	d8f3      	bhi.n	800e85e <__lshift+0x6e>
 800e876:	ebac 0304 	sub.w	r3, ip, r4
 800e87a:	3b15      	subs	r3, #21
 800e87c:	f023 0303 	bic.w	r3, r3, #3
 800e880:	3304      	adds	r3, #4
 800e882:	f104 0015 	add.w	r0, r4, #21
 800e886:	4560      	cmp	r0, ip
 800e888:	bf88      	it	hi
 800e88a:	2304      	movhi	r3, #4
 800e88c:	50ca      	str	r2, [r1, r3]
 800e88e:	b10a      	cbz	r2, 800e894 <__lshift+0xa4>
 800e890:	f108 0602 	add.w	r6, r8, #2
 800e894:	3e01      	subs	r6, #1
 800e896:	4638      	mov	r0, r7
 800e898:	612e      	str	r6, [r5, #16]
 800e89a:	4621      	mov	r1, r4
 800e89c:	f7ff fde2 	bl	800e464 <_Bfree>
 800e8a0:	4628      	mov	r0, r5
 800e8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	e7c5      	b.n	800e83a <__lshift+0x4a>
 800e8ae:	3904      	subs	r1, #4
 800e8b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e8b8:	459c      	cmp	ip, r3
 800e8ba:	d8f9      	bhi.n	800e8b0 <__lshift+0xc0>
 800e8bc:	e7ea      	b.n	800e894 <__lshift+0xa4>
 800e8be:	bf00      	nop
 800e8c0:	0800f3b0 	.word	0x0800f3b0
 800e8c4:	0800f3c1 	.word	0x0800f3c1

0800e8c8 <__mcmp>:
 800e8c8:	690a      	ldr	r2, [r1, #16]
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	6900      	ldr	r0, [r0, #16]
 800e8ce:	1a80      	subs	r0, r0, r2
 800e8d0:	b530      	push	{r4, r5, lr}
 800e8d2:	d10e      	bne.n	800e8f2 <__mcmp+0x2a>
 800e8d4:	3314      	adds	r3, #20
 800e8d6:	3114      	adds	r1, #20
 800e8d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e8dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e8e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e8e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e8e8:	4295      	cmp	r5, r2
 800e8ea:	d003      	beq.n	800e8f4 <__mcmp+0x2c>
 800e8ec:	d205      	bcs.n	800e8fa <__mcmp+0x32>
 800e8ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e8f2:	bd30      	pop	{r4, r5, pc}
 800e8f4:	42a3      	cmp	r3, r4
 800e8f6:	d3f3      	bcc.n	800e8e0 <__mcmp+0x18>
 800e8f8:	e7fb      	b.n	800e8f2 <__mcmp+0x2a>
 800e8fa:	2001      	movs	r0, #1
 800e8fc:	e7f9      	b.n	800e8f2 <__mcmp+0x2a>
	...

0800e900 <__mdiff>:
 800e900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e904:	4689      	mov	r9, r1
 800e906:	4606      	mov	r6, r0
 800e908:	4611      	mov	r1, r2
 800e90a:	4648      	mov	r0, r9
 800e90c:	4614      	mov	r4, r2
 800e90e:	f7ff ffdb 	bl	800e8c8 <__mcmp>
 800e912:	1e05      	subs	r5, r0, #0
 800e914:	d112      	bne.n	800e93c <__mdiff+0x3c>
 800e916:	4629      	mov	r1, r5
 800e918:	4630      	mov	r0, r6
 800e91a:	f7ff fd63 	bl	800e3e4 <_Balloc>
 800e91e:	4602      	mov	r2, r0
 800e920:	b928      	cbnz	r0, 800e92e <__mdiff+0x2e>
 800e922:	4b3f      	ldr	r3, [pc, #252]	@ (800ea20 <__mdiff+0x120>)
 800e924:	f240 2137 	movw	r1, #567	@ 0x237
 800e928:	483e      	ldr	r0, [pc, #248]	@ (800ea24 <__mdiff+0x124>)
 800e92a:	f7fd ffcb 	bl	800c8c4 <__assert_func>
 800e92e:	2301      	movs	r3, #1
 800e930:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e934:	4610      	mov	r0, r2
 800e936:	b003      	add	sp, #12
 800e938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e93c:	bfbc      	itt	lt
 800e93e:	464b      	movlt	r3, r9
 800e940:	46a1      	movlt	r9, r4
 800e942:	4630      	mov	r0, r6
 800e944:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e948:	bfba      	itte	lt
 800e94a:	461c      	movlt	r4, r3
 800e94c:	2501      	movlt	r5, #1
 800e94e:	2500      	movge	r5, #0
 800e950:	f7ff fd48 	bl	800e3e4 <_Balloc>
 800e954:	4602      	mov	r2, r0
 800e956:	b918      	cbnz	r0, 800e960 <__mdiff+0x60>
 800e958:	4b31      	ldr	r3, [pc, #196]	@ (800ea20 <__mdiff+0x120>)
 800e95a:	f240 2145 	movw	r1, #581	@ 0x245
 800e95e:	e7e3      	b.n	800e928 <__mdiff+0x28>
 800e960:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e964:	6926      	ldr	r6, [r4, #16]
 800e966:	60c5      	str	r5, [r0, #12]
 800e968:	f109 0310 	add.w	r3, r9, #16
 800e96c:	f109 0514 	add.w	r5, r9, #20
 800e970:	f104 0e14 	add.w	lr, r4, #20
 800e974:	f100 0b14 	add.w	fp, r0, #20
 800e978:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e97c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e980:	9301      	str	r3, [sp, #4]
 800e982:	46d9      	mov	r9, fp
 800e984:	f04f 0c00 	mov.w	ip, #0
 800e988:	9b01      	ldr	r3, [sp, #4]
 800e98a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e98e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e992:	9301      	str	r3, [sp, #4]
 800e994:	fa1f f38a 	uxth.w	r3, sl
 800e998:	4619      	mov	r1, r3
 800e99a:	b283      	uxth	r3, r0
 800e99c:	1acb      	subs	r3, r1, r3
 800e99e:	0c00      	lsrs	r0, r0, #16
 800e9a0:	4463      	add	r3, ip
 800e9a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e9a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e9aa:	b29b      	uxth	r3, r3
 800e9ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e9b0:	4576      	cmp	r6, lr
 800e9b2:	f849 3b04 	str.w	r3, [r9], #4
 800e9b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e9ba:	d8e5      	bhi.n	800e988 <__mdiff+0x88>
 800e9bc:	1b33      	subs	r3, r6, r4
 800e9be:	3b15      	subs	r3, #21
 800e9c0:	f023 0303 	bic.w	r3, r3, #3
 800e9c4:	3415      	adds	r4, #21
 800e9c6:	3304      	adds	r3, #4
 800e9c8:	42a6      	cmp	r6, r4
 800e9ca:	bf38      	it	cc
 800e9cc:	2304      	movcc	r3, #4
 800e9ce:	441d      	add	r5, r3
 800e9d0:	445b      	add	r3, fp
 800e9d2:	461e      	mov	r6, r3
 800e9d4:	462c      	mov	r4, r5
 800e9d6:	4544      	cmp	r4, r8
 800e9d8:	d30e      	bcc.n	800e9f8 <__mdiff+0xf8>
 800e9da:	f108 0103 	add.w	r1, r8, #3
 800e9de:	1b49      	subs	r1, r1, r5
 800e9e0:	f021 0103 	bic.w	r1, r1, #3
 800e9e4:	3d03      	subs	r5, #3
 800e9e6:	45a8      	cmp	r8, r5
 800e9e8:	bf38      	it	cc
 800e9ea:	2100      	movcc	r1, #0
 800e9ec:	440b      	add	r3, r1
 800e9ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e9f2:	b191      	cbz	r1, 800ea1a <__mdiff+0x11a>
 800e9f4:	6117      	str	r7, [r2, #16]
 800e9f6:	e79d      	b.n	800e934 <__mdiff+0x34>
 800e9f8:	f854 1b04 	ldr.w	r1, [r4], #4
 800e9fc:	46e6      	mov	lr, ip
 800e9fe:	0c08      	lsrs	r0, r1, #16
 800ea00:	fa1c fc81 	uxtah	ip, ip, r1
 800ea04:	4471      	add	r1, lr
 800ea06:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ea0a:	b289      	uxth	r1, r1
 800ea0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ea10:	f846 1b04 	str.w	r1, [r6], #4
 800ea14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ea18:	e7dd      	b.n	800e9d6 <__mdiff+0xd6>
 800ea1a:	3f01      	subs	r7, #1
 800ea1c:	e7e7      	b.n	800e9ee <__mdiff+0xee>
 800ea1e:	bf00      	nop
 800ea20:	0800f3b0 	.word	0x0800f3b0
 800ea24:	0800f3c1 	.word	0x0800f3c1

0800ea28 <__d2b>:
 800ea28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea2c:	460f      	mov	r7, r1
 800ea2e:	2101      	movs	r1, #1
 800ea30:	ec59 8b10 	vmov	r8, r9, d0
 800ea34:	4616      	mov	r6, r2
 800ea36:	f7ff fcd5 	bl	800e3e4 <_Balloc>
 800ea3a:	4604      	mov	r4, r0
 800ea3c:	b930      	cbnz	r0, 800ea4c <__d2b+0x24>
 800ea3e:	4602      	mov	r2, r0
 800ea40:	4b23      	ldr	r3, [pc, #140]	@ (800ead0 <__d2b+0xa8>)
 800ea42:	4824      	ldr	r0, [pc, #144]	@ (800ead4 <__d2b+0xac>)
 800ea44:	f240 310f 	movw	r1, #783	@ 0x30f
 800ea48:	f7fd ff3c 	bl	800c8c4 <__assert_func>
 800ea4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ea50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea54:	b10d      	cbz	r5, 800ea5a <__d2b+0x32>
 800ea56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ea5a:	9301      	str	r3, [sp, #4]
 800ea5c:	f1b8 0300 	subs.w	r3, r8, #0
 800ea60:	d023      	beq.n	800eaaa <__d2b+0x82>
 800ea62:	4668      	mov	r0, sp
 800ea64:	9300      	str	r3, [sp, #0]
 800ea66:	f7ff fd84 	bl	800e572 <__lo0bits>
 800ea6a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ea6e:	b1d0      	cbz	r0, 800eaa6 <__d2b+0x7e>
 800ea70:	f1c0 0320 	rsb	r3, r0, #32
 800ea74:	fa02 f303 	lsl.w	r3, r2, r3
 800ea78:	430b      	orrs	r3, r1
 800ea7a:	40c2      	lsrs	r2, r0
 800ea7c:	6163      	str	r3, [r4, #20]
 800ea7e:	9201      	str	r2, [sp, #4]
 800ea80:	9b01      	ldr	r3, [sp, #4]
 800ea82:	61a3      	str	r3, [r4, #24]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	bf0c      	ite	eq
 800ea88:	2201      	moveq	r2, #1
 800ea8a:	2202      	movne	r2, #2
 800ea8c:	6122      	str	r2, [r4, #16]
 800ea8e:	b1a5      	cbz	r5, 800eaba <__d2b+0x92>
 800ea90:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ea94:	4405      	add	r5, r0
 800ea96:	603d      	str	r5, [r7, #0]
 800ea98:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ea9c:	6030      	str	r0, [r6, #0]
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	b003      	add	sp, #12
 800eaa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eaa6:	6161      	str	r1, [r4, #20]
 800eaa8:	e7ea      	b.n	800ea80 <__d2b+0x58>
 800eaaa:	a801      	add	r0, sp, #4
 800eaac:	f7ff fd61 	bl	800e572 <__lo0bits>
 800eab0:	9b01      	ldr	r3, [sp, #4]
 800eab2:	6163      	str	r3, [r4, #20]
 800eab4:	3020      	adds	r0, #32
 800eab6:	2201      	movs	r2, #1
 800eab8:	e7e8      	b.n	800ea8c <__d2b+0x64>
 800eaba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eabe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800eac2:	6038      	str	r0, [r7, #0]
 800eac4:	6918      	ldr	r0, [r3, #16]
 800eac6:	f7ff fd35 	bl	800e534 <__hi0bits>
 800eaca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eace:	e7e5      	b.n	800ea9c <__d2b+0x74>
 800ead0:	0800f3b0 	.word	0x0800f3b0
 800ead4:	0800f3c1 	.word	0x0800f3c1

0800ead8 <__sfputc_r>:
 800ead8:	6893      	ldr	r3, [r2, #8]
 800eada:	3b01      	subs	r3, #1
 800eadc:	2b00      	cmp	r3, #0
 800eade:	b410      	push	{r4}
 800eae0:	6093      	str	r3, [r2, #8]
 800eae2:	da08      	bge.n	800eaf6 <__sfputc_r+0x1e>
 800eae4:	6994      	ldr	r4, [r2, #24]
 800eae6:	42a3      	cmp	r3, r4
 800eae8:	db01      	blt.n	800eaee <__sfputc_r+0x16>
 800eaea:	290a      	cmp	r1, #10
 800eaec:	d103      	bne.n	800eaf6 <__sfputc_r+0x1e>
 800eaee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eaf2:	f000 b9df 	b.w	800eeb4 <__swbuf_r>
 800eaf6:	6813      	ldr	r3, [r2, #0]
 800eaf8:	1c58      	adds	r0, r3, #1
 800eafa:	6010      	str	r0, [r2, #0]
 800eafc:	7019      	strb	r1, [r3, #0]
 800eafe:	4608      	mov	r0, r1
 800eb00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb04:	4770      	bx	lr

0800eb06 <__sfputs_r>:
 800eb06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb08:	4606      	mov	r6, r0
 800eb0a:	460f      	mov	r7, r1
 800eb0c:	4614      	mov	r4, r2
 800eb0e:	18d5      	adds	r5, r2, r3
 800eb10:	42ac      	cmp	r4, r5
 800eb12:	d101      	bne.n	800eb18 <__sfputs_r+0x12>
 800eb14:	2000      	movs	r0, #0
 800eb16:	e007      	b.n	800eb28 <__sfputs_r+0x22>
 800eb18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb1c:	463a      	mov	r2, r7
 800eb1e:	4630      	mov	r0, r6
 800eb20:	f7ff ffda 	bl	800ead8 <__sfputc_r>
 800eb24:	1c43      	adds	r3, r0, #1
 800eb26:	d1f3      	bne.n	800eb10 <__sfputs_r+0xa>
 800eb28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb2c <_vfiprintf_r>:
 800eb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb30:	460d      	mov	r5, r1
 800eb32:	b09d      	sub	sp, #116	@ 0x74
 800eb34:	4614      	mov	r4, r2
 800eb36:	4698      	mov	r8, r3
 800eb38:	4606      	mov	r6, r0
 800eb3a:	b118      	cbz	r0, 800eb44 <_vfiprintf_r+0x18>
 800eb3c:	6a03      	ldr	r3, [r0, #32]
 800eb3e:	b90b      	cbnz	r3, 800eb44 <_vfiprintf_r+0x18>
 800eb40:	f7fe fc7e 	bl	800d440 <__sinit>
 800eb44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eb46:	07d9      	lsls	r1, r3, #31
 800eb48:	d405      	bmi.n	800eb56 <_vfiprintf_r+0x2a>
 800eb4a:	89ab      	ldrh	r3, [r5, #12]
 800eb4c:	059a      	lsls	r2, r3, #22
 800eb4e:	d402      	bmi.n	800eb56 <_vfiprintf_r+0x2a>
 800eb50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eb52:	f7fe fd8e 	bl	800d672 <__retarget_lock_acquire_recursive>
 800eb56:	89ab      	ldrh	r3, [r5, #12]
 800eb58:	071b      	lsls	r3, r3, #28
 800eb5a:	d501      	bpl.n	800eb60 <_vfiprintf_r+0x34>
 800eb5c:	692b      	ldr	r3, [r5, #16]
 800eb5e:	b99b      	cbnz	r3, 800eb88 <_vfiprintf_r+0x5c>
 800eb60:	4629      	mov	r1, r5
 800eb62:	4630      	mov	r0, r6
 800eb64:	f000 f9e4 	bl	800ef30 <__swsetup_r>
 800eb68:	b170      	cbz	r0, 800eb88 <_vfiprintf_r+0x5c>
 800eb6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eb6c:	07dc      	lsls	r4, r3, #31
 800eb6e:	d504      	bpl.n	800eb7a <_vfiprintf_r+0x4e>
 800eb70:	f04f 30ff 	mov.w	r0, #4294967295
 800eb74:	b01d      	add	sp, #116	@ 0x74
 800eb76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb7a:	89ab      	ldrh	r3, [r5, #12]
 800eb7c:	0598      	lsls	r0, r3, #22
 800eb7e:	d4f7      	bmi.n	800eb70 <_vfiprintf_r+0x44>
 800eb80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eb82:	f7fe fd77 	bl	800d674 <__retarget_lock_release_recursive>
 800eb86:	e7f3      	b.n	800eb70 <_vfiprintf_r+0x44>
 800eb88:	2300      	movs	r3, #0
 800eb8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb8c:	2320      	movs	r3, #32
 800eb8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eb92:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb96:	2330      	movs	r3, #48	@ 0x30
 800eb98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ed48 <_vfiprintf_r+0x21c>
 800eb9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eba0:	f04f 0901 	mov.w	r9, #1
 800eba4:	4623      	mov	r3, r4
 800eba6:	469a      	mov	sl, r3
 800eba8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebac:	b10a      	cbz	r2, 800ebb2 <_vfiprintf_r+0x86>
 800ebae:	2a25      	cmp	r2, #37	@ 0x25
 800ebb0:	d1f9      	bne.n	800eba6 <_vfiprintf_r+0x7a>
 800ebb2:	ebba 0b04 	subs.w	fp, sl, r4
 800ebb6:	d00b      	beq.n	800ebd0 <_vfiprintf_r+0xa4>
 800ebb8:	465b      	mov	r3, fp
 800ebba:	4622      	mov	r2, r4
 800ebbc:	4629      	mov	r1, r5
 800ebbe:	4630      	mov	r0, r6
 800ebc0:	f7ff ffa1 	bl	800eb06 <__sfputs_r>
 800ebc4:	3001      	adds	r0, #1
 800ebc6:	f000 80a7 	beq.w	800ed18 <_vfiprintf_r+0x1ec>
 800ebca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ebcc:	445a      	add	r2, fp
 800ebce:	9209      	str	r2, [sp, #36]	@ 0x24
 800ebd0:	f89a 3000 	ldrb.w	r3, [sl]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	f000 809f 	beq.w	800ed18 <_vfiprintf_r+0x1ec>
 800ebda:	2300      	movs	r3, #0
 800ebdc:	f04f 32ff 	mov.w	r2, #4294967295
 800ebe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebe4:	f10a 0a01 	add.w	sl, sl, #1
 800ebe8:	9304      	str	r3, [sp, #16]
 800ebea:	9307      	str	r3, [sp, #28]
 800ebec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ebf0:	931a      	str	r3, [sp, #104]	@ 0x68
 800ebf2:	4654      	mov	r4, sl
 800ebf4:	2205      	movs	r2, #5
 800ebf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebfa:	4853      	ldr	r0, [pc, #332]	@ (800ed48 <_vfiprintf_r+0x21c>)
 800ebfc:	f7f1 fae8 	bl	80001d0 <memchr>
 800ec00:	9a04      	ldr	r2, [sp, #16]
 800ec02:	b9d8      	cbnz	r0, 800ec3c <_vfiprintf_r+0x110>
 800ec04:	06d1      	lsls	r1, r2, #27
 800ec06:	bf44      	itt	mi
 800ec08:	2320      	movmi	r3, #32
 800ec0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec0e:	0713      	lsls	r3, r2, #28
 800ec10:	bf44      	itt	mi
 800ec12:	232b      	movmi	r3, #43	@ 0x2b
 800ec14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec18:	f89a 3000 	ldrb.w	r3, [sl]
 800ec1c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec1e:	d015      	beq.n	800ec4c <_vfiprintf_r+0x120>
 800ec20:	9a07      	ldr	r2, [sp, #28]
 800ec22:	4654      	mov	r4, sl
 800ec24:	2000      	movs	r0, #0
 800ec26:	f04f 0c0a 	mov.w	ip, #10
 800ec2a:	4621      	mov	r1, r4
 800ec2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec30:	3b30      	subs	r3, #48	@ 0x30
 800ec32:	2b09      	cmp	r3, #9
 800ec34:	d94b      	bls.n	800ecce <_vfiprintf_r+0x1a2>
 800ec36:	b1b0      	cbz	r0, 800ec66 <_vfiprintf_r+0x13a>
 800ec38:	9207      	str	r2, [sp, #28]
 800ec3a:	e014      	b.n	800ec66 <_vfiprintf_r+0x13a>
 800ec3c:	eba0 0308 	sub.w	r3, r0, r8
 800ec40:	fa09 f303 	lsl.w	r3, r9, r3
 800ec44:	4313      	orrs	r3, r2
 800ec46:	9304      	str	r3, [sp, #16]
 800ec48:	46a2      	mov	sl, r4
 800ec4a:	e7d2      	b.n	800ebf2 <_vfiprintf_r+0xc6>
 800ec4c:	9b03      	ldr	r3, [sp, #12]
 800ec4e:	1d19      	adds	r1, r3, #4
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	9103      	str	r1, [sp, #12]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	bfbb      	ittet	lt
 800ec58:	425b      	neglt	r3, r3
 800ec5a:	f042 0202 	orrlt.w	r2, r2, #2
 800ec5e:	9307      	strge	r3, [sp, #28]
 800ec60:	9307      	strlt	r3, [sp, #28]
 800ec62:	bfb8      	it	lt
 800ec64:	9204      	strlt	r2, [sp, #16]
 800ec66:	7823      	ldrb	r3, [r4, #0]
 800ec68:	2b2e      	cmp	r3, #46	@ 0x2e
 800ec6a:	d10a      	bne.n	800ec82 <_vfiprintf_r+0x156>
 800ec6c:	7863      	ldrb	r3, [r4, #1]
 800ec6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec70:	d132      	bne.n	800ecd8 <_vfiprintf_r+0x1ac>
 800ec72:	9b03      	ldr	r3, [sp, #12]
 800ec74:	1d1a      	adds	r2, r3, #4
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	9203      	str	r2, [sp, #12]
 800ec7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ec7e:	3402      	adds	r4, #2
 800ec80:	9305      	str	r3, [sp, #20]
 800ec82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ed58 <_vfiprintf_r+0x22c>
 800ec86:	7821      	ldrb	r1, [r4, #0]
 800ec88:	2203      	movs	r2, #3
 800ec8a:	4650      	mov	r0, sl
 800ec8c:	f7f1 faa0 	bl	80001d0 <memchr>
 800ec90:	b138      	cbz	r0, 800eca2 <_vfiprintf_r+0x176>
 800ec92:	9b04      	ldr	r3, [sp, #16]
 800ec94:	eba0 000a 	sub.w	r0, r0, sl
 800ec98:	2240      	movs	r2, #64	@ 0x40
 800ec9a:	4082      	lsls	r2, r0
 800ec9c:	4313      	orrs	r3, r2
 800ec9e:	3401      	adds	r4, #1
 800eca0:	9304      	str	r3, [sp, #16]
 800eca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eca6:	4829      	ldr	r0, [pc, #164]	@ (800ed4c <_vfiprintf_r+0x220>)
 800eca8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ecac:	2206      	movs	r2, #6
 800ecae:	f7f1 fa8f 	bl	80001d0 <memchr>
 800ecb2:	2800      	cmp	r0, #0
 800ecb4:	d03f      	beq.n	800ed36 <_vfiprintf_r+0x20a>
 800ecb6:	4b26      	ldr	r3, [pc, #152]	@ (800ed50 <_vfiprintf_r+0x224>)
 800ecb8:	bb1b      	cbnz	r3, 800ed02 <_vfiprintf_r+0x1d6>
 800ecba:	9b03      	ldr	r3, [sp, #12]
 800ecbc:	3307      	adds	r3, #7
 800ecbe:	f023 0307 	bic.w	r3, r3, #7
 800ecc2:	3308      	adds	r3, #8
 800ecc4:	9303      	str	r3, [sp, #12]
 800ecc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecc8:	443b      	add	r3, r7
 800ecca:	9309      	str	r3, [sp, #36]	@ 0x24
 800eccc:	e76a      	b.n	800eba4 <_vfiprintf_r+0x78>
 800ecce:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecd2:	460c      	mov	r4, r1
 800ecd4:	2001      	movs	r0, #1
 800ecd6:	e7a8      	b.n	800ec2a <_vfiprintf_r+0xfe>
 800ecd8:	2300      	movs	r3, #0
 800ecda:	3401      	adds	r4, #1
 800ecdc:	9305      	str	r3, [sp, #20]
 800ecde:	4619      	mov	r1, r3
 800ece0:	f04f 0c0a 	mov.w	ip, #10
 800ece4:	4620      	mov	r0, r4
 800ece6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ecea:	3a30      	subs	r2, #48	@ 0x30
 800ecec:	2a09      	cmp	r2, #9
 800ecee:	d903      	bls.n	800ecf8 <_vfiprintf_r+0x1cc>
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d0c6      	beq.n	800ec82 <_vfiprintf_r+0x156>
 800ecf4:	9105      	str	r1, [sp, #20]
 800ecf6:	e7c4      	b.n	800ec82 <_vfiprintf_r+0x156>
 800ecf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800ecfc:	4604      	mov	r4, r0
 800ecfe:	2301      	movs	r3, #1
 800ed00:	e7f0      	b.n	800ece4 <_vfiprintf_r+0x1b8>
 800ed02:	ab03      	add	r3, sp, #12
 800ed04:	9300      	str	r3, [sp, #0]
 800ed06:	462a      	mov	r2, r5
 800ed08:	4b12      	ldr	r3, [pc, #72]	@ (800ed54 <_vfiprintf_r+0x228>)
 800ed0a:	a904      	add	r1, sp, #16
 800ed0c:	4630      	mov	r0, r6
 800ed0e:	f7fd ff55 	bl	800cbbc <_printf_float>
 800ed12:	4607      	mov	r7, r0
 800ed14:	1c78      	adds	r0, r7, #1
 800ed16:	d1d6      	bne.n	800ecc6 <_vfiprintf_r+0x19a>
 800ed18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed1a:	07d9      	lsls	r1, r3, #31
 800ed1c:	d405      	bmi.n	800ed2a <_vfiprintf_r+0x1fe>
 800ed1e:	89ab      	ldrh	r3, [r5, #12]
 800ed20:	059a      	lsls	r2, r3, #22
 800ed22:	d402      	bmi.n	800ed2a <_vfiprintf_r+0x1fe>
 800ed24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed26:	f7fe fca5 	bl	800d674 <__retarget_lock_release_recursive>
 800ed2a:	89ab      	ldrh	r3, [r5, #12]
 800ed2c:	065b      	lsls	r3, r3, #25
 800ed2e:	f53f af1f 	bmi.w	800eb70 <_vfiprintf_r+0x44>
 800ed32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed34:	e71e      	b.n	800eb74 <_vfiprintf_r+0x48>
 800ed36:	ab03      	add	r3, sp, #12
 800ed38:	9300      	str	r3, [sp, #0]
 800ed3a:	462a      	mov	r2, r5
 800ed3c:	4b05      	ldr	r3, [pc, #20]	@ (800ed54 <_vfiprintf_r+0x228>)
 800ed3e:	a904      	add	r1, sp, #16
 800ed40:	4630      	mov	r0, r6
 800ed42:	f7fe f9d3 	bl	800d0ec <_printf_i>
 800ed46:	e7e4      	b.n	800ed12 <_vfiprintf_r+0x1e6>
 800ed48:	0800f41a 	.word	0x0800f41a
 800ed4c:	0800f424 	.word	0x0800f424
 800ed50:	0800cbbd 	.word	0x0800cbbd
 800ed54:	0800eb07 	.word	0x0800eb07
 800ed58:	0800f420 	.word	0x0800f420

0800ed5c <__sflush_r>:
 800ed5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ed60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed64:	0716      	lsls	r6, r2, #28
 800ed66:	4605      	mov	r5, r0
 800ed68:	460c      	mov	r4, r1
 800ed6a:	d454      	bmi.n	800ee16 <__sflush_r+0xba>
 800ed6c:	684b      	ldr	r3, [r1, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	dc02      	bgt.n	800ed78 <__sflush_r+0x1c>
 800ed72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	dd48      	ble.n	800ee0a <__sflush_r+0xae>
 800ed78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ed7a:	2e00      	cmp	r6, #0
 800ed7c:	d045      	beq.n	800ee0a <__sflush_r+0xae>
 800ed7e:	2300      	movs	r3, #0
 800ed80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ed84:	682f      	ldr	r7, [r5, #0]
 800ed86:	6a21      	ldr	r1, [r4, #32]
 800ed88:	602b      	str	r3, [r5, #0]
 800ed8a:	d030      	beq.n	800edee <__sflush_r+0x92>
 800ed8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ed8e:	89a3      	ldrh	r3, [r4, #12]
 800ed90:	0759      	lsls	r1, r3, #29
 800ed92:	d505      	bpl.n	800eda0 <__sflush_r+0x44>
 800ed94:	6863      	ldr	r3, [r4, #4]
 800ed96:	1ad2      	subs	r2, r2, r3
 800ed98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ed9a:	b10b      	cbz	r3, 800eda0 <__sflush_r+0x44>
 800ed9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ed9e:	1ad2      	subs	r2, r2, r3
 800eda0:	2300      	movs	r3, #0
 800eda2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eda4:	6a21      	ldr	r1, [r4, #32]
 800eda6:	4628      	mov	r0, r5
 800eda8:	47b0      	blx	r6
 800edaa:	1c43      	adds	r3, r0, #1
 800edac:	89a3      	ldrh	r3, [r4, #12]
 800edae:	d106      	bne.n	800edbe <__sflush_r+0x62>
 800edb0:	6829      	ldr	r1, [r5, #0]
 800edb2:	291d      	cmp	r1, #29
 800edb4:	d82b      	bhi.n	800ee0e <__sflush_r+0xb2>
 800edb6:	4a2a      	ldr	r2, [pc, #168]	@ (800ee60 <__sflush_r+0x104>)
 800edb8:	40ca      	lsrs	r2, r1
 800edba:	07d6      	lsls	r6, r2, #31
 800edbc:	d527      	bpl.n	800ee0e <__sflush_r+0xb2>
 800edbe:	2200      	movs	r2, #0
 800edc0:	6062      	str	r2, [r4, #4]
 800edc2:	04d9      	lsls	r1, r3, #19
 800edc4:	6922      	ldr	r2, [r4, #16]
 800edc6:	6022      	str	r2, [r4, #0]
 800edc8:	d504      	bpl.n	800edd4 <__sflush_r+0x78>
 800edca:	1c42      	adds	r2, r0, #1
 800edcc:	d101      	bne.n	800edd2 <__sflush_r+0x76>
 800edce:	682b      	ldr	r3, [r5, #0]
 800edd0:	b903      	cbnz	r3, 800edd4 <__sflush_r+0x78>
 800edd2:	6560      	str	r0, [r4, #84]	@ 0x54
 800edd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800edd6:	602f      	str	r7, [r5, #0]
 800edd8:	b1b9      	cbz	r1, 800ee0a <__sflush_r+0xae>
 800edda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800edde:	4299      	cmp	r1, r3
 800ede0:	d002      	beq.n	800ede8 <__sflush_r+0x8c>
 800ede2:	4628      	mov	r0, r5
 800ede4:	f7ff fab4 	bl	800e350 <_free_r>
 800ede8:	2300      	movs	r3, #0
 800edea:	6363      	str	r3, [r4, #52]	@ 0x34
 800edec:	e00d      	b.n	800ee0a <__sflush_r+0xae>
 800edee:	2301      	movs	r3, #1
 800edf0:	4628      	mov	r0, r5
 800edf2:	47b0      	blx	r6
 800edf4:	4602      	mov	r2, r0
 800edf6:	1c50      	adds	r0, r2, #1
 800edf8:	d1c9      	bne.n	800ed8e <__sflush_r+0x32>
 800edfa:	682b      	ldr	r3, [r5, #0]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d0c6      	beq.n	800ed8e <__sflush_r+0x32>
 800ee00:	2b1d      	cmp	r3, #29
 800ee02:	d001      	beq.n	800ee08 <__sflush_r+0xac>
 800ee04:	2b16      	cmp	r3, #22
 800ee06:	d11e      	bne.n	800ee46 <__sflush_r+0xea>
 800ee08:	602f      	str	r7, [r5, #0]
 800ee0a:	2000      	movs	r0, #0
 800ee0c:	e022      	b.n	800ee54 <__sflush_r+0xf8>
 800ee0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee12:	b21b      	sxth	r3, r3
 800ee14:	e01b      	b.n	800ee4e <__sflush_r+0xf2>
 800ee16:	690f      	ldr	r7, [r1, #16]
 800ee18:	2f00      	cmp	r7, #0
 800ee1a:	d0f6      	beq.n	800ee0a <__sflush_r+0xae>
 800ee1c:	0793      	lsls	r3, r2, #30
 800ee1e:	680e      	ldr	r6, [r1, #0]
 800ee20:	bf08      	it	eq
 800ee22:	694b      	ldreq	r3, [r1, #20]
 800ee24:	600f      	str	r7, [r1, #0]
 800ee26:	bf18      	it	ne
 800ee28:	2300      	movne	r3, #0
 800ee2a:	eba6 0807 	sub.w	r8, r6, r7
 800ee2e:	608b      	str	r3, [r1, #8]
 800ee30:	f1b8 0f00 	cmp.w	r8, #0
 800ee34:	dde9      	ble.n	800ee0a <__sflush_r+0xae>
 800ee36:	6a21      	ldr	r1, [r4, #32]
 800ee38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ee3a:	4643      	mov	r3, r8
 800ee3c:	463a      	mov	r2, r7
 800ee3e:	4628      	mov	r0, r5
 800ee40:	47b0      	blx	r6
 800ee42:	2800      	cmp	r0, #0
 800ee44:	dc08      	bgt.n	800ee58 <__sflush_r+0xfc>
 800ee46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee4e:	81a3      	strh	r3, [r4, #12]
 800ee50:	f04f 30ff 	mov.w	r0, #4294967295
 800ee54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee58:	4407      	add	r7, r0
 800ee5a:	eba8 0800 	sub.w	r8, r8, r0
 800ee5e:	e7e7      	b.n	800ee30 <__sflush_r+0xd4>
 800ee60:	20400001 	.word	0x20400001

0800ee64 <_fflush_r>:
 800ee64:	b538      	push	{r3, r4, r5, lr}
 800ee66:	690b      	ldr	r3, [r1, #16]
 800ee68:	4605      	mov	r5, r0
 800ee6a:	460c      	mov	r4, r1
 800ee6c:	b913      	cbnz	r3, 800ee74 <_fflush_r+0x10>
 800ee6e:	2500      	movs	r5, #0
 800ee70:	4628      	mov	r0, r5
 800ee72:	bd38      	pop	{r3, r4, r5, pc}
 800ee74:	b118      	cbz	r0, 800ee7e <_fflush_r+0x1a>
 800ee76:	6a03      	ldr	r3, [r0, #32]
 800ee78:	b90b      	cbnz	r3, 800ee7e <_fflush_r+0x1a>
 800ee7a:	f7fe fae1 	bl	800d440 <__sinit>
 800ee7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d0f3      	beq.n	800ee6e <_fflush_r+0xa>
 800ee86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ee88:	07d0      	lsls	r0, r2, #31
 800ee8a:	d404      	bmi.n	800ee96 <_fflush_r+0x32>
 800ee8c:	0599      	lsls	r1, r3, #22
 800ee8e:	d402      	bmi.n	800ee96 <_fflush_r+0x32>
 800ee90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee92:	f7fe fbee 	bl	800d672 <__retarget_lock_acquire_recursive>
 800ee96:	4628      	mov	r0, r5
 800ee98:	4621      	mov	r1, r4
 800ee9a:	f7ff ff5f 	bl	800ed5c <__sflush_r>
 800ee9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eea0:	07da      	lsls	r2, r3, #31
 800eea2:	4605      	mov	r5, r0
 800eea4:	d4e4      	bmi.n	800ee70 <_fflush_r+0xc>
 800eea6:	89a3      	ldrh	r3, [r4, #12]
 800eea8:	059b      	lsls	r3, r3, #22
 800eeaa:	d4e1      	bmi.n	800ee70 <_fflush_r+0xc>
 800eeac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eeae:	f7fe fbe1 	bl	800d674 <__retarget_lock_release_recursive>
 800eeb2:	e7dd      	b.n	800ee70 <_fflush_r+0xc>

0800eeb4 <__swbuf_r>:
 800eeb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeb6:	460e      	mov	r6, r1
 800eeb8:	4614      	mov	r4, r2
 800eeba:	4605      	mov	r5, r0
 800eebc:	b118      	cbz	r0, 800eec6 <__swbuf_r+0x12>
 800eebe:	6a03      	ldr	r3, [r0, #32]
 800eec0:	b90b      	cbnz	r3, 800eec6 <__swbuf_r+0x12>
 800eec2:	f7fe fabd 	bl	800d440 <__sinit>
 800eec6:	69a3      	ldr	r3, [r4, #24]
 800eec8:	60a3      	str	r3, [r4, #8]
 800eeca:	89a3      	ldrh	r3, [r4, #12]
 800eecc:	071a      	lsls	r2, r3, #28
 800eece:	d501      	bpl.n	800eed4 <__swbuf_r+0x20>
 800eed0:	6923      	ldr	r3, [r4, #16]
 800eed2:	b943      	cbnz	r3, 800eee6 <__swbuf_r+0x32>
 800eed4:	4621      	mov	r1, r4
 800eed6:	4628      	mov	r0, r5
 800eed8:	f000 f82a 	bl	800ef30 <__swsetup_r>
 800eedc:	b118      	cbz	r0, 800eee6 <__swbuf_r+0x32>
 800eede:	f04f 37ff 	mov.w	r7, #4294967295
 800eee2:	4638      	mov	r0, r7
 800eee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eee6:	6823      	ldr	r3, [r4, #0]
 800eee8:	6922      	ldr	r2, [r4, #16]
 800eeea:	1a98      	subs	r0, r3, r2
 800eeec:	6963      	ldr	r3, [r4, #20]
 800eeee:	b2f6      	uxtb	r6, r6
 800eef0:	4283      	cmp	r3, r0
 800eef2:	4637      	mov	r7, r6
 800eef4:	dc05      	bgt.n	800ef02 <__swbuf_r+0x4e>
 800eef6:	4621      	mov	r1, r4
 800eef8:	4628      	mov	r0, r5
 800eefa:	f7ff ffb3 	bl	800ee64 <_fflush_r>
 800eefe:	2800      	cmp	r0, #0
 800ef00:	d1ed      	bne.n	800eede <__swbuf_r+0x2a>
 800ef02:	68a3      	ldr	r3, [r4, #8]
 800ef04:	3b01      	subs	r3, #1
 800ef06:	60a3      	str	r3, [r4, #8]
 800ef08:	6823      	ldr	r3, [r4, #0]
 800ef0a:	1c5a      	adds	r2, r3, #1
 800ef0c:	6022      	str	r2, [r4, #0]
 800ef0e:	701e      	strb	r6, [r3, #0]
 800ef10:	6962      	ldr	r2, [r4, #20]
 800ef12:	1c43      	adds	r3, r0, #1
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d004      	beq.n	800ef22 <__swbuf_r+0x6e>
 800ef18:	89a3      	ldrh	r3, [r4, #12]
 800ef1a:	07db      	lsls	r3, r3, #31
 800ef1c:	d5e1      	bpl.n	800eee2 <__swbuf_r+0x2e>
 800ef1e:	2e0a      	cmp	r6, #10
 800ef20:	d1df      	bne.n	800eee2 <__swbuf_r+0x2e>
 800ef22:	4621      	mov	r1, r4
 800ef24:	4628      	mov	r0, r5
 800ef26:	f7ff ff9d 	bl	800ee64 <_fflush_r>
 800ef2a:	2800      	cmp	r0, #0
 800ef2c:	d0d9      	beq.n	800eee2 <__swbuf_r+0x2e>
 800ef2e:	e7d6      	b.n	800eede <__swbuf_r+0x2a>

0800ef30 <__swsetup_r>:
 800ef30:	b538      	push	{r3, r4, r5, lr}
 800ef32:	4b29      	ldr	r3, [pc, #164]	@ (800efd8 <__swsetup_r+0xa8>)
 800ef34:	4605      	mov	r5, r0
 800ef36:	6818      	ldr	r0, [r3, #0]
 800ef38:	460c      	mov	r4, r1
 800ef3a:	b118      	cbz	r0, 800ef44 <__swsetup_r+0x14>
 800ef3c:	6a03      	ldr	r3, [r0, #32]
 800ef3e:	b90b      	cbnz	r3, 800ef44 <__swsetup_r+0x14>
 800ef40:	f7fe fa7e 	bl	800d440 <__sinit>
 800ef44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef48:	0719      	lsls	r1, r3, #28
 800ef4a:	d422      	bmi.n	800ef92 <__swsetup_r+0x62>
 800ef4c:	06da      	lsls	r2, r3, #27
 800ef4e:	d407      	bmi.n	800ef60 <__swsetup_r+0x30>
 800ef50:	2209      	movs	r2, #9
 800ef52:	602a      	str	r2, [r5, #0]
 800ef54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef58:	81a3      	strh	r3, [r4, #12]
 800ef5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef5e:	e033      	b.n	800efc8 <__swsetup_r+0x98>
 800ef60:	0758      	lsls	r0, r3, #29
 800ef62:	d512      	bpl.n	800ef8a <__swsetup_r+0x5a>
 800ef64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef66:	b141      	cbz	r1, 800ef7a <__swsetup_r+0x4a>
 800ef68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef6c:	4299      	cmp	r1, r3
 800ef6e:	d002      	beq.n	800ef76 <__swsetup_r+0x46>
 800ef70:	4628      	mov	r0, r5
 800ef72:	f7ff f9ed 	bl	800e350 <_free_r>
 800ef76:	2300      	movs	r3, #0
 800ef78:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef7a:	89a3      	ldrh	r3, [r4, #12]
 800ef7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ef80:	81a3      	strh	r3, [r4, #12]
 800ef82:	2300      	movs	r3, #0
 800ef84:	6063      	str	r3, [r4, #4]
 800ef86:	6923      	ldr	r3, [r4, #16]
 800ef88:	6023      	str	r3, [r4, #0]
 800ef8a:	89a3      	ldrh	r3, [r4, #12]
 800ef8c:	f043 0308 	orr.w	r3, r3, #8
 800ef90:	81a3      	strh	r3, [r4, #12]
 800ef92:	6923      	ldr	r3, [r4, #16]
 800ef94:	b94b      	cbnz	r3, 800efaa <__swsetup_r+0x7a>
 800ef96:	89a3      	ldrh	r3, [r4, #12]
 800ef98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ef9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800efa0:	d003      	beq.n	800efaa <__swsetup_r+0x7a>
 800efa2:	4621      	mov	r1, r4
 800efa4:	4628      	mov	r0, r5
 800efa6:	f000 f8b6 	bl	800f116 <__smakebuf_r>
 800efaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efae:	f013 0201 	ands.w	r2, r3, #1
 800efb2:	d00a      	beq.n	800efca <__swsetup_r+0x9a>
 800efb4:	2200      	movs	r2, #0
 800efb6:	60a2      	str	r2, [r4, #8]
 800efb8:	6962      	ldr	r2, [r4, #20]
 800efba:	4252      	negs	r2, r2
 800efbc:	61a2      	str	r2, [r4, #24]
 800efbe:	6922      	ldr	r2, [r4, #16]
 800efc0:	b942      	cbnz	r2, 800efd4 <__swsetup_r+0xa4>
 800efc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800efc6:	d1c5      	bne.n	800ef54 <__swsetup_r+0x24>
 800efc8:	bd38      	pop	{r3, r4, r5, pc}
 800efca:	0799      	lsls	r1, r3, #30
 800efcc:	bf58      	it	pl
 800efce:	6962      	ldrpl	r2, [r4, #20]
 800efd0:	60a2      	str	r2, [r4, #8]
 800efd2:	e7f4      	b.n	800efbe <__swsetup_r+0x8e>
 800efd4:	2000      	movs	r0, #0
 800efd6:	e7f7      	b.n	800efc8 <__swsetup_r+0x98>
 800efd8:	20000108 	.word	0x20000108

0800efdc <_raise_r>:
 800efdc:	291f      	cmp	r1, #31
 800efde:	b538      	push	{r3, r4, r5, lr}
 800efe0:	4605      	mov	r5, r0
 800efe2:	460c      	mov	r4, r1
 800efe4:	d904      	bls.n	800eff0 <_raise_r+0x14>
 800efe6:	2316      	movs	r3, #22
 800efe8:	6003      	str	r3, [r0, #0]
 800efea:	f04f 30ff 	mov.w	r0, #4294967295
 800efee:	bd38      	pop	{r3, r4, r5, pc}
 800eff0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eff2:	b112      	cbz	r2, 800effa <_raise_r+0x1e>
 800eff4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eff8:	b94b      	cbnz	r3, 800f00e <_raise_r+0x32>
 800effa:	4628      	mov	r0, r5
 800effc:	f000 f830 	bl	800f060 <_getpid_r>
 800f000:	4622      	mov	r2, r4
 800f002:	4601      	mov	r1, r0
 800f004:	4628      	mov	r0, r5
 800f006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f00a:	f000 b817 	b.w	800f03c <_kill_r>
 800f00e:	2b01      	cmp	r3, #1
 800f010:	d00a      	beq.n	800f028 <_raise_r+0x4c>
 800f012:	1c59      	adds	r1, r3, #1
 800f014:	d103      	bne.n	800f01e <_raise_r+0x42>
 800f016:	2316      	movs	r3, #22
 800f018:	6003      	str	r3, [r0, #0]
 800f01a:	2001      	movs	r0, #1
 800f01c:	e7e7      	b.n	800efee <_raise_r+0x12>
 800f01e:	2100      	movs	r1, #0
 800f020:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f024:	4620      	mov	r0, r4
 800f026:	4798      	blx	r3
 800f028:	2000      	movs	r0, #0
 800f02a:	e7e0      	b.n	800efee <_raise_r+0x12>

0800f02c <raise>:
 800f02c:	4b02      	ldr	r3, [pc, #8]	@ (800f038 <raise+0xc>)
 800f02e:	4601      	mov	r1, r0
 800f030:	6818      	ldr	r0, [r3, #0]
 800f032:	f7ff bfd3 	b.w	800efdc <_raise_r>
 800f036:	bf00      	nop
 800f038:	20000108 	.word	0x20000108

0800f03c <_kill_r>:
 800f03c:	b538      	push	{r3, r4, r5, lr}
 800f03e:	4d07      	ldr	r5, [pc, #28]	@ (800f05c <_kill_r+0x20>)
 800f040:	2300      	movs	r3, #0
 800f042:	4604      	mov	r4, r0
 800f044:	4608      	mov	r0, r1
 800f046:	4611      	mov	r1, r2
 800f048:	602b      	str	r3, [r5, #0]
 800f04a:	f7f5 fd8f 	bl	8004b6c <_kill>
 800f04e:	1c43      	adds	r3, r0, #1
 800f050:	d102      	bne.n	800f058 <_kill_r+0x1c>
 800f052:	682b      	ldr	r3, [r5, #0]
 800f054:	b103      	cbz	r3, 800f058 <_kill_r+0x1c>
 800f056:	6023      	str	r3, [r4, #0]
 800f058:	bd38      	pop	{r3, r4, r5, pc}
 800f05a:	bf00      	nop
 800f05c:	2000222c 	.word	0x2000222c

0800f060 <_getpid_r>:
 800f060:	f7f5 bd7c 	b.w	8004b5c <_getpid>

0800f064 <_calloc_r>:
 800f064:	b570      	push	{r4, r5, r6, lr}
 800f066:	fba1 5402 	umull	r5, r4, r1, r2
 800f06a:	b934      	cbnz	r4, 800f07a <_calloc_r+0x16>
 800f06c:	4629      	mov	r1, r5
 800f06e:	f7fd fc79 	bl	800c964 <_malloc_r>
 800f072:	4606      	mov	r6, r0
 800f074:	b928      	cbnz	r0, 800f082 <_calloc_r+0x1e>
 800f076:	4630      	mov	r0, r6
 800f078:	bd70      	pop	{r4, r5, r6, pc}
 800f07a:	220c      	movs	r2, #12
 800f07c:	6002      	str	r2, [r0, #0]
 800f07e:	2600      	movs	r6, #0
 800f080:	e7f9      	b.n	800f076 <_calloc_r+0x12>
 800f082:	462a      	mov	r2, r5
 800f084:	4621      	mov	r1, r4
 800f086:	f7fe fa66 	bl	800d556 <memset>
 800f08a:	e7f4      	b.n	800f076 <_calloc_r+0x12>

0800f08c <__ascii_mbtowc>:
 800f08c:	b082      	sub	sp, #8
 800f08e:	b901      	cbnz	r1, 800f092 <__ascii_mbtowc+0x6>
 800f090:	a901      	add	r1, sp, #4
 800f092:	b142      	cbz	r2, 800f0a6 <__ascii_mbtowc+0x1a>
 800f094:	b14b      	cbz	r3, 800f0aa <__ascii_mbtowc+0x1e>
 800f096:	7813      	ldrb	r3, [r2, #0]
 800f098:	600b      	str	r3, [r1, #0]
 800f09a:	7812      	ldrb	r2, [r2, #0]
 800f09c:	1e10      	subs	r0, r2, #0
 800f09e:	bf18      	it	ne
 800f0a0:	2001      	movne	r0, #1
 800f0a2:	b002      	add	sp, #8
 800f0a4:	4770      	bx	lr
 800f0a6:	4610      	mov	r0, r2
 800f0a8:	e7fb      	b.n	800f0a2 <__ascii_mbtowc+0x16>
 800f0aa:	f06f 0001 	mvn.w	r0, #1
 800f0ae:	e7f8      	b.n	800f0a2 <__ascii_mbtowc+0x16>

0800f0b0 <__ascii_wctomb>:
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	4608      	mov	r0, r1
 800f0b4:	b141      	cbz	r1, 800f0c8 <__ascii_wctomb+0x18>
 800f0b6:	2aff      	cmp	r2, #255	@ 0xff
 800f0b8:	d904      	bls.n	800f0c4 <__ascii_wctomb+0x14>
 800f0ba:	228a      	movs	r2, #138	@ 0x8a
 800f0bc:	601a      	str	r2, [r3, #0]
 800f0be:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c2:	4770      	bx	lr
 800f0c4:	700a      	strb	r2, [r1, #0]
 800f0c6:	2001      	movs	r0, #1
 800f0c8:	4770      	bx	lr

0800f0ca <__swhatbuf_r>:
 800f0ca:	b570      	push	{r4, r5, r6, lr}
 800f0cc:	460c      	mov	r4, r1
 800f0ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0d2:	2900      	cmp	r1, #0
 800f0d4:	b096      	sub	sp, #88	@ 0x58
 800f0d6:	4615      	mov	r5, r2
 800f0d8:	461e      	mov	r6, r3
 800f0da:	da0d      	bge.n	800f0f8 <__swhatbuf_r+0x2e>
 800f0dc:	89a3      	ldrh	r3, [r4, #12]
 800f0de:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f0e2:	f04f 0100 	mov.w	r1, #0
 800f0e6:	bf14      	ite	ne
 800f0e8:	2340      	movne	r3, #64	@ 0x40
 800f0ea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f0ee:	2000      	movs	r0, #0
 800f0f0:	6031      	str	r1, [r6, #0]
 800f0f2:	602b      	str	r3, [r5, #0]
 800f0f4:	b016      	add	sp, #88	@ 0x58
 800f0f6:	bd70      	pop	{r4, r5, r6, pc}
 800f0f8:	466a      	mov	r2, sp
 800f0fa:	f000 f849 	bl	800f190 <_fstat_r>
 800f0fe:	2800      	cmp	r0, #0
 800f100:	dbec      	blt.n	800f0dc <__swhatbuf_r+0x12>
 800f102:	9901      	ldr	r1, [sp, #4]
 800f104:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f108:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f10c:	4259      	negs	r1, r3
 800f10e:	4159      	adcs	r1, r3
 800f110:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f114:	e7eb      	b.n	800f0ee <__swhatbuf_r+0x24>

0800f116 <__smakebuf_r>:
 800f116:	898b      	ldrh	r3, [r1, #12]
 800f118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f11a:	079d      	lsls	r5, r3, #30
 800f11c:	4606      	mov	r6, r0
 800f11e:	460c      	mov	r4, r1
 800f120:	d507      	bpl.n	800f132 <__smakebuf_r+0x1c>
 800f122:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f126:	6023      	str	r3, [r4, #0]
 800f128:	6123      	str	r3, [r4, #16]
 800f12a:	2301      	movs	r3, #1
 800f12c:	6163      	str	r3, [r4, #20]
 800f12e:	b003      	add	sp, #12
 800f130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f132:	ab01      	add	r3, sp, #4
 800f134:	466a      	mov	r2, sp
 800f136:	f7ff ffc8 	bl	800f0ca <__swhatbuf_r>
 800f13a:	9f00      	ldr	r7, [sp, #0]
 800f13c:	4605      	mov	r5, r0
 800f13e:	4639      	mov	r1, r7
 800f140:	4630      	mov	r0, r6
 800f142:	f7fd fc0f 	bl	800c964 <_malloc_r>
 800f146:	b948      	cbnz	r0, 800f15c <__smakebuf_r+0x46>
 800f148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f14c:	059a      	lsls	r2, r3, #22
 800f14e:	d4ee      	bmi.n	800f12e <__smakebuf_r+0x18>
 800f150:	f023 0303 	bic.w	r3, r3, #3
 800f154:	f043 0302 	orr.w	r3, r3, #2
 800f158:	81a3      	strh	r3, [r4, #12]
 800f15a:	e7e2      	b.n	800f122 <__smakebuf_r+0xc>
 800f15c:	89a3      	ldrh	r3, [r4, #12]
 800f15e:	6020      	str	r0, [r4, #0]
 800f160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f164:	81a3      	strh	r3, [r4, #12]
 800f166:	9b01      	ldr	r3, [sp, #4]
 800f168:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f16c:	b15b      	cbz	r3, 800f186 <__smakebuf_r+0x70>
 800f16e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f172:	4630      	mov	r0, r6
 800f174:	f000 f81e 	bl	800f1b4 <_isatty_r>
 800f178:	b128      	cbz	r0, 800f186 <__smakebuf_r+0x70>
 800f17a:	89a3      	ldrh	r3, [r4, #12]
 800f17c:	f023 0303 	bic.w	r3, r3, #3
 800f180:	f043 0301 	orr.w	r3, r3, #1
 800f184:	81a3      	strh	r3, [r4, #12]
 800f186:	89a3      	ldrh	r3, [r4, #12]
 800f188:	431d      	orrs	r5, r3
 800f18a:	81a5      	strh	r5, [r4, #12]
 800f18c:	e7cf      	b.n	800f12e <__smakebuf_r+0x18>
	...

0800f190 <_fstat_r>:
 800f190:	b538      	push	{r3, r4, r5, lr}
 800f192:	4d07      	ldr	r5, [pc, #28]	@ (800f1b0 <_fstat_r+0x20>)
 800f194:	2300      	movs	r3, #0
 800f196:	4604      	mov	r4, r0
 800f198:	4608      	mov	r0, r1
 800f19a:	4611      	mov	r1, r2
 800f19c:	602b      	str	r3, [r5, #0]
 800f19e:	f7f5 fd29 	bl	8004bf4 <_fstat>
 800f1a2:	1c43      	adds	r3, r0, #1
 800f1a4:	d102      	bne.n	800f1ac <_fstat_r+0x1c>
 800f1a6:	682b      	ldr	r3, [r5, #0]
 800f1a8:	b103      	cbz	r3, 800f1ac <_fstat_r+0x1c>
 800f1aa:	6023      	str	r3, [r4, #0]
 800f1ac:	bd38      	pop	{r3, r4, r5, pc}
 800f1ae:	bf00      	nop
 800f1b0:	2000222c 	.word	0x2000222c

0800f1b4 <_isatty_r>:
 800f1b4:	b538      	push	{r3, r4, r5, lr}
 800f1b6:	4d06      	ldr	r5, [pc, #24]	@ (800f1d0 <_isatty_r+0x1c>)
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	4604      	mov	r4, r0
 800f1bc:	4608      	mov	r0, r1
 800f1be:	602b      	str	r3, [r5, #0]
 800f1c0:	f7f5 fd28 	bl	8004c14 <_isatty>
 800f1c4:	1c43      	adds	r3, r0, #1
 800f1c6:	d102      	bne.n	800f1ce <_isatty_r+0x1a>
 800f1c8:	682b      	ldr	r3, [r5, #0]
 800f1ca:	b103      	cbz	r3, 800f1ce <_isatty_r+0x1a>
 800f1cc:	6023      	str	r3, [r4, #0]
 800f1ce:	bd38      	pop	{r3, r4, r5, pc}
 800f1d0:	2000222c 	.word	0x2000222c

0800f1d4 <_init>:
 800f1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1d6:	bf00      	nop
 800f1d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1da:	bc08      	pop	{r3}
 800f1dc:	469e      	mov	lr, r3
 800f1de:	4770      	bx	lr

0800f1e0 <_fini>:
 800f1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1e2:	bf00      	nop
 800f1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1e6:	bc08      	pop	{r3}
 800f1e8:	469e      	mov	lr, r3
 800f1ea:	4770      	bx	lr
