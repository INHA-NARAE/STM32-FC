
Plane.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f014  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800f1a8  0800f1a8  000101a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5f4  0800f5f4  000112c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f5f4  0800f5f4  000105f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f5fc  0800f5fc  000112c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5fc  0800f5fc  000105fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f600  0800f600  00010600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800f604  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000112c4  2**0
                  CONTENTS
 10 .bss          00001f60  200002c4  200002c4  000112c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002224  20002224  000112c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000112c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018ef4  00000000  00000000  000112f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005361  00000000  00000000  0002a1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c0  00000000  00000000  0002f550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010c2  00000000  00000000  00030c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b7d7  00000000  00000000  00031cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fd40  00000000  00000000  0005d4a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4011  00000000  00000000  0007d1e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001611fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a5c  00000000  00000000  00161240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00167c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f18c 	.word	0x0800f18c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800f18c 	.word	0x0800f18c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a1a      	ldr	r2, [r3, #32]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	431a      	orrs	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	621a      	str	r2, [r3, #32]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a1a      	ldr	r2, [r3, #32]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	401a      	ands	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	621a      	str	r2, [r3, #32]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <BuzzerPlayNote>:
#include <FC_Basic/Buzzer.h>
#include "main.h"


void BuzzerPlayNote(Note note, uint16_t time)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	460a      	mov	r2, r1
 8000f66:	71fb      	strb	r3, [r7, #7]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	80bb      	strh	r3, [r7, #4]
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8000f6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f70:	4818      	ldr	r0, [pc, #96]	@ (8000fd4 <BuzzerPlayNote+0x78>)
 8000f72:	f7ff ffcf 	bl	8000f14 <LL_TIM_CC_EnableChannel>
	TIM4->PSC = 4;
 8000f76:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <BuzzerPlayNote+0x78>)
 8000f78:	2204      	movs	r2, #4
 8000f7a:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = APB1_CLOCKS/TIM4->PSC/tones[note];
 8000f7c:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <BuzzerPlayNote+0x78>)
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f80:	4a15      	ldr	r2, [pc, #84]	@ (8000fd8 <BuzzerPlayNote+0x7c>)
 8000f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fabc 	bl	8000504 <__aeabi_ui2d>
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	4a13      	ldr	r2, [pc, #76]	@ (8000fdc <BuzzerPlayNote+0x80>)
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	4413      	add	r3, r2
 8000f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f98:	f7ff fc58 	bl	800084c <__aeabi_ddiv>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4c0c      	ldr	r4, [pc, #48]	@ (8000fd4 <BuzzerPlayNote+0x78>)
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f7ff fdff 	bl	8000ba8 <__aeabi_d2uiz>
 8000faa:	4603      	mov	r3, r0
 8000fac:	62e3      	str	r3, [r4, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 8000fae:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <BuzzerPlayNote+0x78>)
 8000fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fb2:	4a08      	ldr	r2, [pc, #32]	@ (8000fd4 <BuzzerPlayNote+0x78>)
 8000fb4:	085b      	lsrs	r3, r3, #1
 8000fb6:	63d3      	str	r3, [r2, #60]	@ 0x3c

	HAL_Delay(time);
 8000fb8:	88bb      	ldrh	r3, [r7, #4]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f003 ff00 	bl	8004dc0 <HAL_Delay>
	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8000fc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fc4:	4803      	ldr	r0, [pc, #12]	@ (8000fd4 <BuzzerPlayNote+0x78>)
 8000fc6:	f7ff ffb6 	bl	8000f36 <LL_TIM_CC_DisableChannel>
	return;
 8000fca:	bf00      	nop
}
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd90      	pop	{r4, r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40000800 	.word	0x40000800
 8000fd8:	0501bd00 	.word	0x0501bd00
 8000fdc:	0800f208 	.word	0x0800f208

08000fe0 <BuzzerPlayInit>:

void BuzzerPlayInit(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8000fe4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fe8:	4813      	ldr	r0, [pc, #76]	@ (8001038 <BuzzerPlayInit+0x58>)
 8000fea:	f7ff ff93 	bl	8000f14 <LL_TIM_CC_EnableChannel>
	TIM4->ARR = 21;
 8000fee:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <BuzzerPlayInit+0x58>)
 8000ff0:	2215      	movs	r2, #21
 8000ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 8000ff4:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <BuzzerPlayInit+0x58>)
 8000ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ff8:	4a0f      	ldr	r2, [pc, #60]	@ (8001038 <BuzzerPlayInit+0x58>)
 8000ffa:	085b      	lsrs	r3, r3, #1
 8000ffc:	63d3      	str	r3, [r2, #60]	@ 0x3c

	TIM4->PSC = 2000;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <BuzzerPlayInit+0x58>)
 8001000:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001004:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8001006:	2064      	movs	r0, #100	@ 0x64
 8001008:	f003 feda 	bl	8004dc0 <HAL_Delay>
	TIM4->PSC = 1500;
 800100c:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <BuzzerPlayInit+0x58>)
 800100e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001012:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8001014:	2064      	movs	r0, #100	@ 0x64
 8001016:	f003 fed3 	bl	8004dc0 <HAL_Delay>
	TIM4->PSC = 1000;
 800101a:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <BuzzerPlayInit+0x58>)
 800101c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001020:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8001022:	2064      	movs	r0, #100	@ 0x64
 8001024:	f003 fecc 	bl	8004dc0 <HAL_Delay>

	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8001028:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800102c:	4802      	ldr	r0, [pc, #8]	@ (8001038 <BuzzerPlayInit+0x58>)
 800102e:	f7ff ff82 	bl	8000f36 <LL_TIM_CC_DisableChannel>
	return;
 8001032:	bf00      	nop
}
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40000800 	.word	0x40000800

0800103c <BuzzerPlayOneCycle>:

void BuzzerPlayOneCycle(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
	for (int i=0; i<8; i++){
 8001042:	2300      	movs	r3, #0
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	e008      	b.n	800105a <BuzzerPlayOneCycle+0x1e>
		BuzzerPlayNote(i, 150);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2196      	movs	r1, #150	@ 0x96
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff84 	bl	8000f5c <BuzzerPlayNote>
	for (int i=0; i<8; i++){
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3301      	adds	r3, #1
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b07      	cmp	r3, #7
 800105e:	ddf3      	ble.n	8001048 <BuzzerPlayOneCycle+0xc>
	}
	return;
 8001060:	bf00      	nop
}
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <BuzzerEnableThrottleHigh>:


/* Functions (RC Alarm) ------------------------------------------------------*/
void BuzzerEnableThrottleHigh(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 800106c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001070:	4808      	ldr	r0, [pc, #32]	@ (8001094 <BuzzerEnableThrottleHigh+0x2c>)
 8001072:	f7ff ff4f 	bl	8000f14 <LL_TIM_CC_EnableChannel>
	TIM4->ARR = 21;
 8001076:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <BuzzerEnableThrottleHigh+0x2c>)
 8001078:	2215      	movs	r2, #21
 800107a:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 800107c:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <BuzzerEnableThrottleHigh+0x2c>)
 800107e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001080:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <BuzzerEnableThrottleHigh+0x2c>)
 8001082:	085b      	lsrs	r3, r3, #1
 8001084:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM4->PSC = 2000;
 8001086:	4b03      	ldr	r3, [pc, #12]	@ (8001094 <BuzzerEnableThrottleHigh+0x2c>)
 8001088:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800108c:	629a      	str	r2, [r3, #40]	@ 0x28

	return;
 800108e:	bf00      	nop
}
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40000800 	.word	0x40000800

08001098 <BuzzerDisableThrottleHigh>:

void BuzzerDisableThrottleHigh(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 800109c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010a0:	4802      	ldr	r0, [pc, #8]	@ (80010ac <BuzzerDisableThrottleHigh+0x14>)
 80010a2:	f7ff ff48 	bl	8000f36 <LL_TIM_CC_DisableChannel>
	return;
 80010a6:	bf00      	nop
}
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40000800 	.word	0x40000800

080010b0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	619a      	str	r2, [r3, #24]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <FS_mannualMode>:
#include <FC_Failsafe/Failsafe.h>

uint8_t fsFlag = 0;

void FS_mannualMode(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 80010d0:	2101      	movs	r1, #1
 80010d2:	4803      	ldr	r0, [pc, #12]	@ (80010e0 <FS_mannualMode+0x14>)
 80010d4:	f7ff ffec 	bl	80010b0 <LL_GPIO_SetOutputPin>
	// RTH가 있는지 확인

	// RTH가 없으면 쓰로틀 끄고 서보 중립
	// 추후 원주 비행 구현
	SERVO_setFailsafe();
 80010d8:	f001 fdc8 	bl	8002c6c <SERVO_setFailsafe>

	return;
 80010dc:	bf00      	nop
}
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40021000 	.word	0x40021000

080010e4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	601a      	str	r2, [r3, #0]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f023 0210 	bic.w	r2, r3, #16
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	431a      	orrs	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	605a      	str	r2, [r3, #4]
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b01      	cmp	r3, #1
 800113c:	d101      	bne.n	8001142 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b02      	cmp	r3, #2
 8001162:	d101      	bne.n	8001168 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	330c      	adds	r3, #12
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b2db      	uxtb	r3, r3
}
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001192:	b480      	push	{r7}
 8001194:	b085      	sub	sp, #20
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	460b      	mov	r3, r1
 800119c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	330c      	adds	r3, #12
 80011a2:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	78fa      	ldrb	r2, [r7, #3]
 80011a8:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <LL_GPIO_SetOutputPin>:
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	619a      	str	r2, [r3, #24]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	041a      	lsls	r2, r3, #16
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	619a      	str	r2, [r3, #24]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80011f8:	4b08      	ldr	r3, [pc, #32]	@ (800121c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011fc:	4907      	ldr	r1, [pc, #28]	@ (800121c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4313      	orrs	r3, r2
 8001202:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001206:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4013      	ands	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800120e:	68fb      	ldr	r3, [r7, #12]
}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	40023800 	.word	0x40023800

08001220 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001228:	4b08      	ldr	r3, [pc, #32]	@ (800124c <LL_APB2_GRP1_EnableClock+0x2c>)
 800122a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800122c:	4907      	ldr	r1, [pc, #28]	@ (800124c <LL_APB2_GRP1_EnableClock+0x2c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4313      	orrs	r3, r2
 8001232:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001234:	4b05      	ldr	r3, [pc, #20]	@ (800124c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001236:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4013      	ands	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	40023800 	.word	0x40023800

08001250 <ICM42688_Initialization>:
 * @detail SPI 연결 수행, 감도 설정, offset 제거
 * @retval 0 : 완료
 * @retval 1 : 센서 없음
 */
int ICM42688_Initialization(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
	uint8_t who_am_i = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001264:	463b      	mov	r3, r7
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	809a      	strh	r2, [r3, #4]

	ICM42688_GPIO_SPI_Initialization();
 800126c:	f000 f9c2 	bl	80015f4 <ICM42688_GPIO_SPI_Initialization>

	// Check
	who_am_i = ICM42688_Readbyte(WHO_AM_I);
 8001270:	2075      	movs	r0, #117	@ 0x75
 8001272:	f000 fa53 	bl	800171c <ICM42688_Readbyte>
 8001276:	4603      	mov	r3, r0
 8001278:	73fb      	strb	r3, [r7, #15]
	if(who_am_i != 0x47)
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	2b47      	cmp	r3, #71	@ 0x47
 800127e:	d001      	beq.n	8001284 <ICM42688_Initialization+0x34>
	{
		return 1;
 8001280:	2301      	movs	r3, #1
 8001282:	e02a      	b.n	80012da <ICM42688_Initialization+0x8a>
	}

	// PWR_MGMT0
	ICM42688_Writebyte(PWR_MGMT0, 0x0F); // Temp on, ACC, GYRO LPF Mode
 8001284:	210f      	movs	r1, #15
 8001286:	204e      	movs	r0, #78	@ 0x4e
 8001288:	f000 fa96 	bl	80017b8 <ICM42688_Writebyte>
	HAL_Delay(50);
 800128c:	2032      	movs	r0, #50	@ 0x32
 800128e:	f003 fd97 	bl	8004dc0 <HAL_Delay>

	// GYRO_CONFIG0
	ICM42688_Writebyte(GYRO_CONFIG0, 0x26); // Gyro sensitivity 1000 dps, 1kHz
 8001292:	2126      	movs	r1, #38	@ 0x26
 8001294:	204f      	movs	r0, #79	@ 0x4f
 8001296:	f000 fa8f 	bl	80017b8 <ICM42688_Writebyte>
	HAL_Delay(50);
 800129a:	2032      	movs	r0, #50	@ 0x32
 800129c:	f003 fd90 	bl	8004dc0 <HAL_Delay>
	ICM42688_Writebyte(GYRO_CONFIG1, 0x00); // Gyro temp DLPF 4kHz, UI Filter 1st, 	DEC2_M2 reserved
 80012a0:	2100      	movs	r1, #0
 80012a2:	2051      	movs	r0, #81	@ 0x51
 80012a4:	f000 fa88 	bl	80017b8 <ICM42688_Writebyte>
	HAL_Delay(50);
 80012a8:	2032      	movs	r0, #50	@ 0x32
 80012aa:	f003 fd89 	bl	8004dc0 <HAL_Delay>

	ICM42688_Writebyte(ACCEL_CONFIG0, 0x46); // Acc sensitivity 4g, 1kHz
 80012ae:	2146      	movs	r1, #70	@ 0x46
 80012b0:	2050      	movs	r0, #80	@ 0x50
 80012b2:	f000 fa81 	bl	80017b8 <ICM42688_Writebyte>
	HAL_Delay(50);
 80012b6:	2032      	movs	r0, #50	@ 0x32
 80012b8:	f003 fd82 	bl	8004dc0 <HAL_Delay>
	ICM42688_Writebyte(ACCEL_CONFIG1, 0x00); // Acc UI Filter 1st, 	DEC2_M2 reserved
 80012bc:	2100      	movs	r1, #0
 80012be:	2053      	movs	r0, #83	@ 0x53
 80012c0:	f000 fa7a 	bl	80017b8 <ICM42688_Writebyte>
	HAL_Delay(50);
 80012c4:	2032      	movs	r0, #50	@ 0x32
 80012c6:	f003 fd7b 	bl	8004dc0 <HAL_Delay>

	ICM42688_Writebyte(GYRO_ACCEL_CONFIG0, 0x11); // LPF default max(400Hz,ODR)/4
 80012ca:	2111      	movs	r1, #17
 80012cc:	2052      	movs	r0, #82	@ 0x52
 80012ce:	f000 fa73 	bl	80017b8 <ICM42688_Writebyte>
	HAL_Delay(50);
 80012d2:	2032      	movs	r0, #50	@ 0x32
 80012d4:	f003 fd74 	bl	8004dc0 <HAL_Delay>
//	ICM42688_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
//	HAL_Delay(50);


	// Remove Gyro X offset
	return 0; //OK
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <ICM42688_GetData>:
 * @brief 데이터 로드
 * @detail 자이로, 가속도 및 온도 데이터 로딩, 물리량 변환
 * @retval 0 : 완료
 */
int ICM42688_GetData(void)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
	Get6AxisRawData();
 80012e6:	f000 f807 	bl	80012f8 <Get6AxisRawData>

	ConvertGyroRaw2Dps();
 80012ea:	f000 f863 	bl	80013b4 <ConvertGyroRaw2Dps>
	ConvertAccRaw2G();
 80012ee:	f000 f903 	bl	80014f8 <ConvertAccRaw2G>

	return 0;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <Get6AxisRawData>:
/*
 * @brief 6축 데이터를 레지스터 레벨에서 로딩
 * @retval None
 */
void Get6AxisRawData()
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
	uint8_t data[14];

	ICM42688_Readbytes(TEMP_DATA1, 14, data);
 80012fe:	463b      	mov	r3, r7
 8001300:	461a      	mov	r2, r3
 8001302:	210e      	movs	r1, #14
 8001304:	201d      	movs	r0, #29
 8001306:	f000 fa29 	bl	800175c <ICM42688_Readbytes>

	raw_imu.time_usec = system_time.time_unix_usec;
 800130a:	4928      	ldr	r1, [pc, #160]	@ (80013ac <Get6AxisRawData+0xb4>)
 800130c:	680a      	ldr	r2, [r1, #0]
 800130e:	684b      	ldr	r3, [r1, #4]
 8001310:	4927      	ldr	r1, [pc, #156]	@ (80013b0 <Get6AxisRawData+0xb8>)
 8001312:	600a      	str	r2, [r1, #0]
 8001314:	604b      	str	r3, [r1, #4]
	raw_imu.temperature = (data[0] << 8) | data[1];
 8001316:	783b      	ldrb	r3, [r7, #0]
 8001318:	b21b      	sxth	r3, r3
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b21a      	sxth	r2, r3
 800131e:	787b      	ldrb	r3, [r7, #1]
 8001320:	b21b      	sxth	r3, r3
 8001322:	4313      	orrs	r3, r2
 8001324:	b21a      	sxth	r2, r3
 8001326:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <Get6AxisRawData+0xb8>)
 8001328:	f8a3 201b 	strh.w	r2, [r3, #27]
	raw_imu.xacc = (data[2] << 8) | data[3];
 800132c:	78bb      	ldrb	r3, [r7, #2]
 800132e:	b21b      	sxth	r3, r3
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	b21a      	sxth	r2, r3
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	b21b      	sxth	r3, r3
 8001338:	4313      	orrs	r3, r2
 800133a:	b21a      	sxth	r2, r3
 800133c:	4b1c      	ldr	r3, [pc, #112]	@ (80013b0 <Get6AxisRawData+0xb8>)
 800133e:	811a      	strh	r2, [r3, #8]
	raw_imu.yacc = (data[4] << 8) | data[5];
 8001340:	793b      	ldrb	r3, [r7, #4]
 8001342:	b21b      	sxth	r3, r3
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	b21a      	sxth	r2, r3
 8001348:	797b      	ldrb	r3, [r7, #5]
 800134a:	b21b      	sxth	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b21a      	sxth	r2, r3
 8001350:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <Get6AxisRawData+0xb8>)
 8001352:	815a      	strh	r2, [r3, #10]
	raw_imu.zacc = ((data[6] << 8) | data[7]);
 8001354:	79bb      	ldrb	r3, [r7, #6]
 8001356:	b21b      	sxth	r3, r3
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b21a      	sxth	r2, r3
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	b21b      	sxth	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b21a      	sxth	r2, r3
 8001364:	4b12      	ldr	r3, [pc, #72]	@ (80013b0 <Get6AxisRawData+0xb8>)
 8001366:	819a      	strh	r2, [r3, #12]
	raw_imu.xgyro = ((data[8] << 8) | data[9]);
 8001368:	7a3b      	ldrb	r3, [r7, #8]
 800136a:	b21b      	sxth	r3, r3
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	b21a      	sxth	r2, r3
 8001370:	7a7b      	ldrb	r3, [r7, #9]
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b21a      	sxth	r2, r3
 8001378:	4b0d      	ldr	r3, [pc, #52]	@ (80013b0 <Get6AxisRawData+0xb8>)
 800137a:	81da      	strh	r2, [r3, #14]
	raw_imu.ygyro = ((data[10] << 8) | data[11]);
 800137c:	7abb      	ldrb	r3, [r7, #10]
 800137e:	b21b      	sxth	r3, r3
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	b21a      	sxth	r2, r3
 8001384:	7afb      	ldrb	r3, [r7, #11]
 8001386:	b21b      	sxth	r3, r3
 8001388:	4313      	orrs	r3, r2
 800138a:	b21a      	sxth	r2, r3
 800138c:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <Get6AxisRawData+0xb8>)
 800138e:	821a      	strh	r2, [r3, #16]
	raw_imu.zgyro = ((data[12] << 8) | data[13]);
 8001390:	7b3b      	ldrb	r3, [r7, #12]
 8001392:	b21b      	sxth	r3, r3
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	b21a      	sxth	r2, r3
 8001398:	7b7b      	ldrb	r3, [r7, #13]
 800139a:	b21b      	sxth	r3, r3
 800139c:	4313      	orrs	r3, r2
 800139e:	b21a      	sxth	r2, r3
 80013a0:	4b03      	ldr	r3, [pc, #12]	@ (80013b0 <Get6AxisRawData+0xb8>)
 80013a2:	825a      	strh	r2, [r3, #18]

	return;
 80013a4:	bf00      	nop
}
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000454 	.word	0x20000454
 80013b0:	20000478 	.word	0x20000478

080013b4 <ConvertGyroRaw2Dps>:
 * 			m degree/s
 * @parm none
 * @retval none
 */
void ConvertGyroRaw2Dps(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
	uint8_t gyro_reg_val = ICM42688_Readbyte(GYRO_CONFIG0);
 80013ba:	204f      	movs	r0, #79	@ 0x4f
 80013bc:	f000 f9ae 	bl	800171c <ICM42688_Readbyte>
 80013c0:	4603      	mov	r3, r0
 80013c2:	70fb      	strb	r3, [r7, #3]
	uint8_t gyro_fs_sel = (gyro_reg_val >> 5) & 0x07;
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	70bb      	strb	r3, [r7, #2]

	float sensitivity;

	switch (gyro_fs_sel)
 80013ca:	78bb      	ldrb	r3, [r7, #2]
 80013cc:	2b07      	cmp	r3, #7
 80013ce:	d82b      	bhi.n	8001428 <ConvertGyroRaw2Dps+0x74>
 80013d0:	a201      	add	r2, pc, #4	@ (adr r2, 80013d8 <ConvertGyroRaw2Dps+0x24>)
 80013d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d6:	bf00      	nop
 80013d8:	080013f9 	.word	0x080013f9
 80013dc:	080013ff 	.word	0x080013ff
 80013e0:	08001405 	.word	0x08001405
 80013e4:	0800140b 	.word	0x0800140b
 80013e8:	08001411 	.word	0x08001411
 80013ec:	08001417 	.word	0x08001417
 80013f0:	0800141d 	.word	0x0800141d
 80013f4:	08001423 	.word	0x08001423
	{
	case 0: sensitivity = 16.4f; break;       // ±2000 dps
 80013f8:	4b33      	ldr	r3, [pc, #204]	@ (80014c8 <ConvertGyroRaw2Dps+0x114>)
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	e017      	b.n	800142e <ConvertGyroRaw2Dps+0x7a>
	case 1: sensitivity = 32.8f; break;       // ±1000 dps
 80013fe:	4b33      	ldr	r3, [pc, #204]	@ (80014cc <ConvertGyroRaw2Dps+0x118>)
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	e014      	b.n	800142e <ConvertGyroRaw2Dps+0x7a>
	case 2: sensitivity = 65.5f; break;       // ±500 dps
 8001404:	4b32      	ldr	r3, [pc, #200]	@ (80014d0 <ConvertGyroRaw2Dps+0x11c>)
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	e011      	b.n	800142e <ConvertGyroRaw2Dps+0x7a>
	case 3: sensitivity = 131.0f; break;      // ±250 dps
 800140a:	4b32      	ldr	r3, [pc, #200]	@ (80014d4 <ConvertGyroRaw2Dps+0x120>)
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	e00e      	b.n	800142e <ConvertGyroRaw2Dps+0x7a>
	case 4: sensitivity = 262.0f; break;      // ±125 dps
 8001410:	4b31      	ldr	r3, [pc, #196]	@ (80014d8 <ConvertGyroRaw2Dps+0x124>)
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	e00b      	b.n	800142e <ConvertGyroRaw2Dps+0x7a>
	case 5: sensitivity = 524.3f; break;      // ±62.5 dps
 8001416:	4b31      	ldr	r3, [pc, #196]	@ (80014dc <ConvertGyroRaw2Dps+0x128>)
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	e008      	b.n	800142e <ConvertGyroRaw2Dps+0x7a>
	case 6: sensitivity = 1048.6f; break;     // ±31.25 dps
 800141c:	4b30      	ldr	r3, [pc, #192]	@ (80014e0 <ConvertGyroRaw2Dps+0x12c>)
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	e005      	b.n	800142e <ConvertGyroRaw2Dps+0x7a>
	case 7: sensitivity = 2097.2f; break;     // ±15.625 dps
 8001422:	4b30      	ldr	r3, [pc, #192]	@ (80014e4 <ConvertGyroRaw2Dps+0x130>)
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	e002      	b.n	800142e <ConvertGyroRaw2Dps+0x7a>
	default: sensitivity = 16.4f; break;      // fallback: ±2000 dps
 8001428:	4b27      	ldr	r3, [pc, #156]	@ (80014c8 <ConvertGyroRaw2Dps+0x114>)
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	bf00      	nop
	}

	scaled_imu.time_boot_ms = system_time.time_boot_ms;
 800142e:	4b2e      	ldr	r3, [pc, #184]	@ (80014e8 <ConvertGyroRaw2Dps+0x134>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	4a2e      	ldr	r2, [pc, #184]	@ (80014ec <ConvertGyroRaw2Dps+0x138>)
 8001434:	6013      	str	r3, [r2, #0]

	// m degree
	scaled_imu.xgyro = (float)raw_imu.xgyro / sensitivity * 1000;
 8001436:	4b2e      	ldr	r3, [pc, #184]	@ (80014f0 <ConvertGyroRaw2Dps+0x13c>)
 8001438:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800143c:	b21b      	sxth	r3, r3
 800143e:	ee07 3a90 	vmov	s15, r3
 8001442:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001446:	ed97 7a01 	vldr	s14, [r7, #4]
 800144a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800144e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80014f4 <ConvertGyroRaw2Dps+0x140>
 8001452:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800145a:	ee17 3a90 	vmov	r3, s15
 800145e:	b21a      	sxth	r2, r3
 8001460:	4b22      	ldr	r3, [pc, #136]	@ (80014ec <ConvertGyroRaw2Dps+0x138>)
 8001462:	815a      	strh	r2, [r3, #10]
	scaled_imu.ygyro = (float)raw_imu.ygyro / sensitivity * 1000;
 8001464:	4b22      	ldr	r3, [pc, #136]	@ (80014f0 <ConvertGyroRaw2Dps+0x13c>)
 8001466:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800146a:	b21b      	sxth	r3, r3
 800146c:	ee07 3a90 	vmov	s15, r3
 8001470:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001474:	ed97 7a01 	vldr	s14, [r7, #4]
 8001478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800147c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80014f4 <ConvertGyroRaw2Dps+0x140>
 8001480:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001488:	ee17 3a90 	vmov	r3, s15
 800148c:	b21a      	sxth	r2, r3
 800148e:	4b17      	ldr	r3, [pc, #92]	@ (80014ec <ConvertGyroRaw2Dps+0x138>)
 8001490:	819a      	strh	r2, [r3, #12]
	scaled_imu.zgyro = (float)raw_imu.zgyro / sensitivity * 1000;
 8001492:	4b17      	ldr	r3, [pc, #92]	@ (80014f0 <ConvertGyroRaw2Dps+0x13c>)
 8001494:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001498:	b21b      	sxth	r3, r3
 800149a:	ee07 3a90 	vmov	s15, r3
 800149e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80014a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014aa:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80014f4 <ConvertGyroRaw2Dps+0x140>
 80014ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014b6:	ee17 3a90 	vmov	r3, s15
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <ConvertGyroRaw2Dps+0x138>)
 80014be:	81da      	strh	r2, [r3, #14]

	return;
 80014c0:	bf00      	nop
}
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	41833333 	.word	0x41833333
 80014cc:	42033333 	.word	0x42033333
 80014d0:	42830000 	.word	0x42830000
 80014d4:	43030000 	.word	0x43030000
 80014d8:	43830000 	.word	0x43830000
 80014dc:	44031333 	.word	0x44031333
 80014e0:	44831333 	.word	0x44831333
 80014e4:	45031333 	.word	0x45031333
 80014e8:	20000454 	.word	0x20000454
 80014ec:	20000460 	.word	0x20000460
 80014f0:	20000478 	.word	0x20000478
 80014f4:	447a0000 	.word	0x447a0000

080014f8 <ConvertAccRaw2G>:
 * 			mG (Gauss)
 * @parm none
 * @retval none
 */
void ConvertAccRaw2G(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
	uint8_t acc_reg_val = ICM42688_Readbyte(ACCEL_CONFIG0);
 80014fe:	2050      	movs	r0, #80	@ 0x50
 8001500:	f000 f90c 	bl	800171c <ICM42688_Readbyte>
 8001504:	4603      	mov	r3, r0
 8001506:	70fb      	strb	r3, [r7, #3]
	uint8_t acc_fs_sel = (acc_reg_val >> 5) & 0x07;
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	095b      	lsrs	r3, r3, #5
 800150c:	70bb      	strb	r3, [r7, #2]

	float sensitivity;

	switch (acc_fs_sel)
 800150e:	78bb      	ldrb	r3, [r7, #2]
 8001510:	2b03      	cmp	r3, #3
 8001512:	d81b      	bhi.n	800154c <ConvertAccRaw2G+0x54>
 8001514:	a201      	add	r2, pc, #4	@ (adr r2, 800151c <ConvertAccRaw2G+0x24>)
 8001516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151a:	bf00      	nop
 800151c:	0800152d 	.word	0x0800152d
 8001520:	08001535 	.word	0x08001535
 8001524:	0800153d 	.word	0x0800153d
 8001528:	08001545 	.word	0x08001545
	{
	case 0: sensitivity = 2048.0f; break;    // ±16g
 800152c:	f04f 438a 	mov.w	r3, #1157627904	@ 0x45000000
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	e00f      	b.n	8001554 <ConvertAccRaw2G+0x5c>
	case 1: sensitivity = 4096.0f; break;    // ±8g
 8001534:	f04f 438b 	mov.w	r3, #1166016512	@ 0x45800000
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	e00b      	b.n	8001554 <ConvertAccRaw2G+0x5c>
	case 2: sensitivity = 8192.0f; break;    // ±4g
 800153c:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	e007      	b.n	8001554 <ConvertAccRaw2G+0x5c>
	case 3: sensitivity = 16384.0f; break;   // ±2g
 8001544:	f04f 438d 	mov.w	r3, #1182793728	@ 0x46800000
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	e003      	b.n	8001554 <ConvertAccRaw2G+0x5c>
	default: sensitivity = 2048.0f; break;   // fallback: ±16g
 800154c:	f04f 438a 	mov.w	r3, #1157627904	@ 0x45000000
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	bf00      	nop
	}

	// mG
	scaled_imu.xacc = (float)raw_imu.xacc / sensitivity * 1000;
 8001554:	4b24      	ldr	r3, [pc, #144]	@ (80015e8 <ConvertAccRaw2G+0xf0>)
 8001556:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800155a:	b21b      	sxth	r3, r3
 800155c:	ee07 3a90 	vmov	s15, r3
 8001560:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001564:	ed97 7a01 	vldr	s14, [r7, #4]
 8001568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800156c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80015ec <ConvertAccRaw2G+0xf4>
 8001570:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001574:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001578:	ee17 3a90 	vmov	r3, s15
 800157c:	b21a      	sxth	r2, r3
 800157e:	4b1c      	ldr	r3, [pc, #112]	@ (80015f0 <ConvertAccRaw2G+0xf8>)
 8001580:	809a      	strh	r2, [r3, #4]
	scaled_imu.yacc = (float)raw_imu.yacc / sensitivity * 1000;
 8001582:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <ConvertAccRaw2G+0xf0>)
 8001584:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001588:	b21b      	sxth	r3, r3
 800158a:	ee07 3a90 	vmov	s15, r3
 800158e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001592:	ed97 7a01 	vldr	s14, [r7, #4]
 8001596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800159a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80015ec <ConvertAccRaw2G+0xf4>
 800159e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a6:	ee17 3a90 	vmov	r3, s15
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	4b10      	ldr	r3, [pc, #64]	@ (80015f0 <ConvertAccRaw2G+0xf8>)
 80015ae:	80da      	strh	r2, [r3, #6]
	scaled_imu.zacc = (float)raw_imu.zacc / sensitivity * 1000;
 80015b0:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <ConvertAccRaw2G+0xf0>)
 80015b2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	ee07 3a90 	vmov	s15, r3
 80015bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80015c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015c8:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80015ec <ConvertAccRaw2G+0xf4>
 80015cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015d4:	ee17 3a90 	vmov	r3, s15
 80015d8:	b21a      	sxth	r2, r3
 80015da:	4b05      	ldr	r3, [pc, #20]	@ (80015f0 <ConvertAccRaw2G+0xf8>)
 80015dc:	811a      	strh	r2, [r3, #8]

	return;
 80015de:	bf00      	nop
}
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000478 	.word	0x20000478
 80015ec:	447a0000 	.word	0x447a0000
 80015f0:	20000460 	.word	0x20000460

080015f4 <ICM42688_GPIO_SPI_Initialization>:


/* Functions 3 ---------------------------------------------------------------*/
void ICM42688_GPIO_SPI_Initialization(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b090      	sub	sp, #64	@ 0x40
 80015f8:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80015fa:	f107 0318 	add.w	r3, r7, #24
 80015fe:	2228      	movs	r2, #40	@ 0x28
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f00b ff81 	bl	800d50a <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	463b      	mov	r3, r7
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001618:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800161c:	f7ff fe00 	bl	8001220 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001620:	2001      	movs	r0, #1
 8001622:	f7ff fde5 	bl	80011f0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8001626:	2010      	movs	r0, #16
 8001628:	f7ff fde2 	bl	80011f0 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800162c:	23e0      	movs	r3, #224	@ 0xe0
 800162e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001630:	2302      	movs	r3, #2
 8001632:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001640:	2305      	movs	r3, #5
 8001642:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	463b      	mov	r3, r7
 8001646:	4619      	mov	r1, r3
 8001648:	4820      	ldr	r0, [pc, #128]	@ (80016cc <ICM42688_GPIO_SPI_Initialization+0xd8>)
 800164a:	f006 f889 	bl	8007760 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001652:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001656:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800165c:	2302      	movs	r3, #2
 800165e:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001660:	2301      	movs	r3, #1
 8001662:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001664:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001668:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-42688 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 800166a:	2310      	movs	r3, #16
 800166c:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800166e:	2300      	movs	r3, #0
 8001670:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001676:	230a      	movs	r3, #10
 8001678:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM42688_SPI_CHANNEL, &SPI_InitStruct);
 800167a:	f107 0318 	add.w	r3, r7, #24
 800167e:	4619      	mov	r1, r3
 8001680:	4813      	ldr	r0, [pc, #76]	@ (80016d0 <ICM42688_GPIO_SPI_Initialization+0xdc>)
 8001682:	f006 fa48 	bl	8007b16 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM42688_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001686:	2100      	movs	r1, #0
 8001688:	4811      	ldr	r0, [pc, #68]	@ (80016d0 <ICM42688_GPIO_SPI_Initialization+0xdc>)
 800168a:	f7ff fd3b 	bl	8001104 <LL_SPI_SetStandard>
	/**ICM42688 GPIO Control Configuration
	 * PC4  ------> ICM42688_SPI_CS_PIN (output)
	 * PC5  ------> ICM42688_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM42688_SPI_CS_PORT, ICM42688_SPI_CS_PIN);
 800168e:	2120      	movs	r1, #32
 8001690:	4810      	ldr	r0, [pc, #64]	@ (80016d4 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 8001692:	f7ff fd9e 	bl	80011d2 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM42688_SPI_CS_PIN;
 8001696:	2320      	movs	r3, #32
 8001698:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800169a:	2301      	movs	r3, #1
 800169c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM42688_SPI_CS_PORT, &GPIO_InitStruct);
 80016aa:	463b      	mov	r3, r7
 80016ac:	4619      	mov	r1, r3
 80016ae:	4809      	ldr	r0, [pc, #36]	@ (80016d4 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 80016b0:	f006 f856 	bl	8007760 <LL_GPIO_Init>
//	GPIO_InitStruct.Pin = ICM42688_INT_PIN;
//	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	LL_GPIO_Init(ICM42688_INT_PORT, &GPIO_InitStruct);

	LL_SPI_Enable(ICM42688_SPI_CHANNEL);
 80016b4:	4806      	ldr	r0, [pc, #24]	@ (80016d0 <ICM42688_GPIO_SPI_Initialization+0xdc>)
 80016b6:	f7ff fd15 	bl	80010e4 <LL_SPI_Enable>

	CHIP_DESELECT(ICM42688);
 80016ba:	2120      	movs	r1, #32
 80016bc:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 80016be:	f7ff fd7a 	bl	80011b6 <LL_GPIO_SetOutputPin>
}
 80016c2:	bf00      	nop
 80016c4:	3740      	adds	r7, #64	@ 0x40
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40020000 	.word	0x40020000
 80016d0:	40013000 	.word	0x40013000
 80016d4:	40021000 	.word	0x40021000

080016d8 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM42688_SPI_CHANNEL)==RESET);
 80016e2:	bf00      	nop
 80016e4:	480c      	ldr	r0, [pc, #48]	@ (8001718 <SPI1_SendByte+0x40>)
 80016e6:	f7ff fd33 	bl	8001150 <LL_SPI_IsActiveFlag_TXE>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f9      	beq.n	80016e4 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM42688_SPI_CHANNEL, data);
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	4619      	mov	r1, r3
 80016f4:	4808      	ldr	r0, [pc, #32]	@ (8001718 <SPI1_SendByte+0x40>)
 80016f6:	f7ff fd4c 	bl	8001192 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM42688_SPI_CHANNEL)==RESET);
 80016fa:	bf00      	nop
 80016fc:	4806      	ldr	r0, [pc, #24]	@ (8001718 <SPI1_SendByte+0x40>)
 80016fe:	f7ff fd14 	bl	800112a <LL_SPI_IsActiveFlag_RXNE>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f9      	beq.n	80016fc <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM42688_SPI_CHANNEL);
 8001708:	4803      	ldr	r0, [pc, #12]	@ (8001718 <SPI1_SendByte+0x40>)
 800170a:	f7ff fd34 	bl	8001176 <LL_SPI_ReceiveData8>
 800170e:	4603      	mov	r3, r0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40013000 	.word	0x40013000

0800171c <ICM42688_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM42688_Readbyte(uint8_t reg_addr)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM42688);
 8001726:	2120      	movs	r1, #32
 8001728:	480b      	ldr	r0, [pc, #44]	@ (8001758 <ICM42688_Readbyte+0x3c>)
 800172a:	f7ff fd52 	bl	80011d2 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001734:	b2db      	uxtb	r3, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff ffce 	bl	80016d8 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 800173c:	2000      	movs	r0, #0
 800173e:	f7ff ffcb 	bl	80016d8 <SPI1_SendByte>
 8001742:	4603      	mov	r3, r0
 8001744:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM42688);
 8001746:	2120      	movs	r1, #32
 8001748:	4803      	ldr	r0, [pc, #12]	@ (8001758 <ICM42688_Readbyte+0x3c>)
 800174a:	f7ff fd34 	bl	80011b6 <LL_GPIO_SetOutputPin>
	
	return val;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40021000 	.word	0x40021000

0800175c <ICM42688_Readbytes>:

void ICM42688_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	603a      	str	r2, [r7, #0]
 8001766:	71fb      	strb	r3, [r7, #7]
 8001768:	460b      	mov	r3, r1
 800176a:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM42688);
 8001770:	2120      	movs	r1, #32
 8001772:	4810      	ldr	r0, [pc, #64]	@ (80017b4 <ICM42688_Readbytes+0x58>)
 8001774:	f7ff fd2d 	bl	80011d2 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800177e:	b2db      	uxtb	r3, r3
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ffa9 	bl	80016d8 <SPI1_SendByte>
	while(i < len)
 8001786:	e009      	b.n	800179c <ICM42688_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	1c5a      	adds	r2, r3, #1
 800178c:	60fa      	str	r2, [r7, #12]
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	18d4      	adds	r4, r2, r3
 8001792:	2000      	movs	r0, #0
 8001794:	f7ff ffa0 	bl	80016d8 <SPI1_SendByte>
 8001798:	4603      	mov	r3, r0
 800179a:	7023      	strb	r3, [r4, #0]
	while(i < len)
 800179c:	79bb      	ldrb	r3, [r7, #6]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d3f1      	bcc.n	8001788 <ICM42688_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM42688);
 80017a4:	2120      	movs	r1, #32
 80017a6:	4803      	ldr	r0, [pc, #12]	@ (80017b4 <ICM42688_Readbytes+0x58>)
 80017a8:	f7ff fd05 	bl	80011b6 <LL_GPIO_SetOutputPin>
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd90      	pop	{r4, r7, pc}
 80017b4:	40021000 	.word	0x40021000

080017b8 <ICM42688_Writebyte>:

void ICM42688_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	460a      	mov	r2, r1
 80017c2:	71fb      	strb	r3, [r7, #7]
 80017c4:	4613      	mov	r3, r2
 80017c6:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM42688);
 80017c8:	2120      	movs	r1, #32
 80017ca:	480b      	ldr	r0, [pc, #44]	@ (80017f8 <ICM42688_Writebyte+0x40>)
 80017cc:	f7ff fd01 	bl	80011d2 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff7d 	bl	80016d8 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80017de:	79bb      	ldrb	r3, [r7, #6]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff79 	bl	80016d8 <SPI1_SendByte>
	CHIP_DESELECT(ICM42688);
 80017e6:	2120      	movs	r1, #32
 80017e8:	4803      	ldr	r0, [pc, #12]	@ (80017f8 <ICM42688_Writebyte+0x40>)
 80017ea:	f7ff fce4 	bl	80011b6 <LL_GPIO_SetOutputPin>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000

080017fc <IMU_Initialization>:
 * @detail IMU 1 - ICM42688P : GYRO, ACC, TEMP
 * @parm none
 * @retval 0
 */
int IMU_Initialization(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	ICM42688_Initialization();
 8001800:	f7ff fd26 	bl	8001250 <ICM42688_Initialization>
	return 0;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	bd80      	pop	{r7, pc}

0800180a <IMU_GetData>:
 * @detail SCALED_IMU(2,3)에 저장
 * @parm none
 * @retval none
 */
unsigned int IMU_GetData(void)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	af00      	add	r7, sp, #0

	// SCALED_IMU
	ICM42688_GetData();
 800180e:	f7ff fd68 	bl	80012e2 <ICM42688_GetData>
	// SCALED_IMU3

//	ComplementaryFilter();
//	KalmanFilter();

	return 0;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	bd80      	pop	{r7, pc}

08001818 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001828:	2b80      	cmp	r3, #128	@ 0x80
 800182a:	bf0c      	ite	eq
 800182c:	2301      	moveq	r3, #1
 800182e:	2300      	movne	r3, #0
 8001830:	b2db      	uxtb	r3, r3
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	460b      	mov	r3, r1
 8001848:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800184a:	78fa      	ldrb	r2, [r7, #3]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	605a      	str	r2, [r3, #4]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <Log_Send>:
const uint8_t code = 0xFD;
uint16_t logType = 0;

/* Functions -----------------------------------------------------------------*/
int Log_Send()
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
	static uint32_t previous_time = 0;

	// 10Hz 단위로 전송
	if(!(system_time.time_boot_ms - previous_time > 100)) return -1;
 8001860:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <Log_Send+0x70>)
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	4b1a      	ldr	r3, [pc, #104]	@ (80018d0 <Log_Send+0x74>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b64      	cmp	r3, #100	@ 0x64
 800186c:	d802      	bhi.n	8001874 <Log_Send+0x18>
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
 8001872:	e028      	b.n	80018c6 <Log_Send+0x6a>
	previous_time = system_time.time_boot_ms;
 8001874:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <Log_Send+0x70>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4a15      	ldr	r2, [pc, #84]	@ (80018d0 <Log_Send+0x74>)
 800187a:	6013      	str	r3, [r2, #0]

	switch(logType)
 800187c:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <Log_Send+0x78>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	2b41      	cmp	r3, #65	@ 0x41
 8001882:	d019      	beq.n	80018b8 <Log_Send+0x5c>
 8001884:	2b41      	cmp	r3, #65	@ 0x41
 8001886:	dc1c      	bgt.n	80018c2 <Log_Send+0x66>
 8001888:	2b24      	cmp	r3, #36	@ 0x24
 800188a:	d010      	beq.n	80018ae <Log_Send+0x52>
 800188c:	2b24      	cmp	r3, #36	@ 0x24
 800188e:	dc18      	bgt.n	80018c2 <Log_Send+0x66>
 8001890:	2b1a      	cmp	r3, #26
 8001892:	d002      	beq.n	800189a <Log_Send+0x3e>
 8001894:	2b1b      	cmp	r3, #27
 8001896:	d005      	beq.n	80018a4 <Log_Send+0x48>
		break;
	case 65:
		Log_transmit((uint8_t*)&RC_channels, sizeof(RC_channels));
		break;
	default:
		break;
 8001898:	e013      	b.n	80018c2 <Log_Send+0x66>
		Log_transmit((uint8_t*)&scaled_imu, sizeof(scaled_imu));
 800189a:	2118      	movs	r1, #24
 800189c:	480e      	ldr	r0, [pc, #56]	@ (80018d8 <Log_Send+0x7c>)
 800189e:	f000 f823 	bl	80018e8 <Log_transmit>
		break;
 80018a2:	e00f      	b.n	80018c4 <Log_Send+0x68>
		Log_transmit((uint8_t*)&raw_imu, sizeof(raw_imu));
 80018a4:	211d      	movs	r1, #29
 80018a6:	480d      	ldr	r0, [pc, #52]	@ (80018dc <Log_Send+0x80>)
 80018a8:	f000 f81e 	bl	80018e8 <Log_transmit>
		break;
 80018ac:	e00a      	b.n	80018c4 <Log_Send+0x68>
		Log_transmit((uint8_t*)&servo_output_raw, sizeof(servo_output_raw));
 80018ae:	2125      	movs	r1, #37	@ 0x25
 80018b0:	480b      	ldr	r0, [pc, #44]	@ (80018e0 <Log_Send+0x84>)
 80018b2:	f000 f819 	bl	80018e8 <Log_transmit>
		break;
 80018b6:	e005      	b.n	80018c4 <Log_Send+0x68>
		Log_transmit((uint8_t*)&RC_channels, sizeof(RC_channels));
 80018b8:	212a      	movs	r1, #42	@ 0x2a
 80018ba:	480a      	ldr	r0, [pc, #40]	@ (80018e4 <Log_Send+0x88>)
 80018bc:	f000 f814 	bl	80018e8 <Log_transmit>
		break;
 80018c0:	e000      	b.n	80018c4 <Log_Send+0x68>
		break;
 80018c2:	bf00      	nop
	}
	return 0;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000454 	.word	0x20000454
 80018d0:	200002e4 	.word	0x200002e4
 80018d4:	200002e2 	.word	0x200002e2
 80018d8:	20000460 	.word	0x20000460
 80018dc:	20000478 	.word	0x20000478
 80018e0:	20000498 	.word	0x20000498
 80018e4:	200004c0 	.word	0x200004c0

080018e8 <Log_transmit>:
 * SRXL2.c 코드 정리
 * 	- readByte 내에 cal crc 수행 후 타입에 따라 리턴
 */
extern uint16_t calculate_crc(const uint8_t *data, uint8_t len);
int Log_transmit(uint8_t* p, uint8_t len)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	70fb      	strb	r3, [r7, #3]

    uint8_t packetLen = len+sizeof(uint8_t)*3;
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	3303      	adds	r3, #3
 80018f8:	74fb      	strb	r3, [r7, #19]
    uint8_t* packet = malloc(packetLen);
 80018fa:	7cfb      	ldrb	r3, [r7, #19]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f00a ffd9 	bl	800c8b4 <malloc>
 8001902:	4603      	mov	r3, r0
 8001904:	60fb      	str	r3, [r7, #12]

    memcpy(packet, &code, sizeof(uint8_t));
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	22fd      	movs	r2, #253	@ 0xfd
 800190a:	701a      	strb	r2, [r3, #0]
    memcpy(packet + sizeof(uint8_t), p, len);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3301      	adds	r3, #1
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4618      	mov	r0, r3
 8001916:	f00b fe88 	bl	800d62a <memcpy>

    uint16_t crc = calculate_crc(packet, packetLen);
 800191a:	7cfb      	ldrb	r3, [r7, #19]
 800191c:	4619      	mov	r1, r3
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f000 fdb8 	bl	8002494 <calculate_crc>
 8001924:	4603      	mov	r3, r0
 8001926:	817b      	strh	r3, [r7, #10]

    memcpy(packet + sizeof(uint8_t) + len, &crc, sizeof(uint16_t));
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	3301      	adds	r3, #1
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	897a      	ldrh	r2, [r7, #10]
 8001932:	801a      	strh	r2, [r3, #0]

	CDC_Transmit_FS(packet, packetLen);
 8001934:	7cfb      	ldrb	r3, [r7, #19]
 8001936:	4619      	mov	r1, r3
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f00a fb41 	bl	800bfc0 <CDC_Transmit_FS>

	for(int i=0; i<packetLen; i++)
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	e011      	b.n	8001968 <Log_transmit+0x80>
	{
		while(!LL_USART_IsActiveFlag_TXE(USART2)){}
 8001944:	bf00      	nop
 8001946:	480e      	ldr	r0, [pc, #56]	@ (8001980 <Log_transmit+0x98>)
 8001948:	f7ff ff66 	bl	8001818 <LL_USART_IsActiveFlag_TXE>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f9      	beq.n	8001946 <Log_transmit+0x5e>
		LL_USART_TransmitData8(USART2, packet[i]);
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	4619      	mov	r1, r3
 800195c:	4808      	ldr	r0, [pc, #32]	@ (8001980 <Log_transmit+0x98>)
 800195e:	f7ff ff6e 	bl	800183e <LL_USART_TransmitData8>
	for(int i=0; i<packetLen; i++)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	7cfb      	ldrb	r3, [r7, #19]
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	429a      	cmp	r2, r3
 800196e:	dbe9      	blt.n	8001944 <Log_transmit+0x5c>
	}

    free(packet);
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f00a ffa7 	bl	800c8c4 <free>

	return packetLen;
 8001976:	7cfb      	ldrb	r3, [r7, #19]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40004400 	.word	0x40004400

08001984 <USB_CDC_RxHandler>:


void USB_CDC_RxHandler(uint8_t* Buf, uint32_t Len)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
	if(Len<3 || Len > 255) return;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d92a      	bls.n	80019ea <USB_CDC_RxHandler+0x66>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	2bff      	cmp	r3, #255	@ 0xff
 8001998:	d827      	bhi.n	80019ea <USB_CDC_RxHandler+0x66>
	if(Buf[0] != code) return;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	22fd      	movs	r2, #253	@ 0xfd
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d124      	bne.n	80019ee <USB_CDC_RxHandler+0x6a>

	uint16_t crc = ((uint16_t)Buf[Len -2] << 8 | Buf[Len -1]);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	3b02      	subs	r3, #2
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	4413      	add	r3, r2
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	b21a      	sxth	r2, r3
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	440b      	add	r3, r1
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	b21b      	sxth	r3, r3
 80019c0:	4313      	orrs	r3, r2
 80019c2:	b21b      	sxth	r3, r3
 80019c4:	81fb      	strh	r3, [r7, #14]
	if(crc != calculate_crc(&Buf[0], (uint8_t)Len)) return;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	4619      	mov	r1, r3
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 fd61 	bl	8002494 <calculate_crc>
 80019d2:	4603      	mov	r3, r0
 80019d4:	461a      	mov	r2, r3
 80019d6:	89fb      	ldrh	r3, [r7, #14]
 80019d8:	4293      	cmp	r3, r2
 80019da:	d10a      	bne.n	80019f2 <USB_CDC_RxHandler+0x6e>

	logType = Buf[1];
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3301      	adds	r3, #1
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <USB_CDC_RxHandler+0x78>)
 80019e6:	801a      	strh	r2, [r3, #0]

	return;
 80019e8:	e004      	b.n	80019f4 <USB_CDC_RxHandler+0x70>
	if(Len<3 || Len > 255) return;
 80019ea:	bf00      	nop
 80019ec:	e002      	b.n	80019f4 <USB_CDC_RxHandler+0x70>
	if(Buf[0] != code) return;
 80019ee:	bf00      	nop
 80019f0:	e000      	b.n	80019f4 <USB_CDC_RxHandler+0x70>
	if(crc != calculate_crc(&Buf[0], (uint8_t)Len)) return;
 80019f2:	bf00      	nop
}
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200002e2 	.word	0x200002e2

08001a00 <PARM_load>:

#include <FC_Param/Param.h>
#include <FC_RC/RadioControl.h>


int PARM_load(void){
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
	param.rc.OPTIONS = 0;
 8001a06:	4b7f      	ldr	r3, [pc, #508]	@ (8001c04 <PARM_load+0x204>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	param.rc.OVERRIDE_TIME = 0.0;
 8001a14:	4b7b      	ldr	r3, [pc, #492]	@ (8001c04 <PARM_load+0x204>)
 8001a16:	3377      	adds	r3, #119	@ 0x77
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
//	param.rc.PROTOCOLS = (0x00);			// 수신기 없이 테스트
	param.rc.PROTOCOLS = (0x1<<SRXL2);	// SRXL2
 8001a1e:	4b79      	ldr	r3, [pc, #484]	@ (8001c04 <PARM_load+0x204>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
 8001a26:	2200      	movs	r2, #0
 8001a28:	f042 0201 	orr.w	r2, r2, #1
 8001a2c:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
//	param.rc.PROTOCOLS = (0x1<<PPM);		// PPM (FS-iA6B)
	param.rc.FS_TIMEOUT = 1.0;
 8001a30:	4b74      	ldr	r3, [pc, #464]	@ (8001c04 <PARM_load+0x204>)
 8001a32:	337f      	adds	r3, #127	@ 0x7f
 8001a34:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a38:	601a      	str	r2, [r3, #0]
	param.rc.reversedMask = 0x00;
 8001a3a:	4b72      	ldr	r3, [pc, #456]	@ (8001c04 <PARM_load+0x204>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86

	for(int i=0; i<RC_CHANNEL_MAX; i++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	e03f      	b.n	8001ada <PARM_load+0xda>
	{
		param.rc.channel[i].MIN = 1000;
 8001a5a:	496a      	ldr	r1, [pc, #424]	@ (8001c04 <PARM_load+0x204>)
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4413      	add	r3, r2
 8001a64:	440b      	add	r3, r1
 8001a66:	3380      	adds	r3, #128	@ 0x80
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f062 0217 	orn	r2, r2, #23
 8001a6e:	71da      	strb	r2, [r3, #7]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f042 0203 	orr.w	r2, r2, #3
 8001a76:	721a      	strb	r2, [r3, #8]
		param.rc.channel[i].MAX = 2000;
 8001a78:	4962      	ldr	r1, [pc, #392]	@ (8001c04 <PARM_load+0x204>)
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4413      	add	r3, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	3380      	adds	r3, #128	@ 0x80
 8001a86:	2200      	movs	r2, #0
 8001a88:	f062 022f 	orn	r2, r2, #47	@ 0x2f
 8001a8c:	725a      	strb	r2, [r3, #9]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f042 0207 	orr.w	r2, r2, #7
 8001a94:	729a      	strb	r2, [r3, #10]
		param.rc.channel[i].TRIM = 0;
 8001a96:	495b      	ldr	r1, [pc, #364]	@ (8001c04 <PARM_load+0x204>)
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	3380      	adds	r3, #128	@ 0x80
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	72da      	strb	r2, [r3, #11]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	731a      	strb	r2, [r3, #12]
		param.rc.channel[i].DZ = 0;
 8001aac:	4955      	ldr	r1, [pc, #340]	@ (8001c04 <PARM_load+0x204>)
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	338d      	adds	r3, #141	@ 0x8d
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
		param.rc.channel[i].OPTION = 0;
 8001abe:	4951      	ldr	r1, [pc, #324]	@ (8001c04 <PARM_load+0x204>)
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	440b      	add	r3, r1
 8001aca:	3380      	adds	r3, #128	@ 0x80
 8001acc:	2200      	movs	r2, #0
 8001ace:	739a      	strb	r2, [r3, #14]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	73da      	strb	r2, [r3, #15]
	for(int i=0; i<RC_CHANNEL_MAX; i++)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b11      	cmp	r3, #17
 8001ade:	ddbc      	ble.n	8001a5a <PARM_load+0x5a>
	}
	param.rc.map.THR = 0;		// SRXL2 값
 8001ae0:	4b48      	ldr	r3, [pc, #288]	@ (8001c04 <PARM_load+0x204>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
	param.rc.map.ROL = 1;
 8001ae8:	4b46      	ldr	r3, [pc, #280]	@ (8001c04 <PARM_load+0x204>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
	param.rc.map.PIT = 2;
 8001af0:	4b44      	ldr	r3, [pc, #272]	@ (8001c04 <PARM_load+0x204>)
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
	param.rc.map.YAW = 3;
 8001af8:	4b42      	ldr	r3, [pc, #264]	@ (8001c04 <PARM_load+0x204>)
 8001afa:	2203      	movs	r2, #3
 8001afc:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
//	param.rc.map.THR = 2;		// FS-iA6B용 값들
//	param.rc.map.ROL = 3;
//	param.rc.map.PIT = 1;
//	param.rc.map.YAW = 0;

	param.servo.AUTO_TRIM = 0;
 8001b00:	4a40      	ldr	r2, [pc, #256]	@ (8001c04 <PARM_load+0x204>)
 8001b02:	7813      	ldrb	r3, [r2, #0]
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	7013      	strb	r3, [r2, #0]
	param.servo.DSHOT_ESC = 0;
 8001b0a:	4a3e      	ldr	r2, [pc, #248]	@ (8001c04 <PARM_load+0x204>)
 8001b0c:	78d3      	ldrb	r3, [r2, #3]
 8001b0e:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8001b12:	70d3      	strb	r3, [r2, #3]
	param.servo.DSHOT_RATE = 0;
 8001b14:	4a3b      	ldr	r2, [pc, #236]	@ (8001c04 <PARM_load+0x204>)
 8001b16:	78d3      	ldrb	r3, [r2, #3]
 8001b18:	f023 0307 	bic.w	r3, r3, #7
 8001b1c:	70d3      	strb	r3, [r2, #3]
	param.servo.RATE = 50;
 8001b1e:	4b39      	ldr	r3, [pc, #228]	@ (8001c04 <PARM_load+0x204>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 8001b26:	705a      	strb	r2, [r3, #1]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	709a      	strb	r2, [r3, #2]
	param.servo.GPIO_MASK = 0x0FFF;
 8001b2c:	4b35      	ldr	r3, [pc, #212]	@ (8001c04 <PARM_load+0x204>)
 8001b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b32:	711a      	strb	r2, [r3, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f042 020f 	orr.w	r2, r2, #15
 8001b3a:	715a      	strb	r2, [r3, #5]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	719a      	strb	r2, [r3, #6]
 8001b40:	2200      	movs	r2, #0
 8001b42:	71da      	strb	r2, [r3, #7]
	param.servo.RC_FS_MSK = 0xFF;
 8001b44:	4b2f      	ldr	r3, [pc, #188]	@ (8001c04 <PARM_load+0x204>)
 8001b46:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4a:	721a      	strb	r2, [r3, #8]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	725a      	strb	r2, [r3, #9]
	param.servo._32_ENABLE = 0;
 8001b50:	4a2c      	ldr	r2, [pc, #176]	@ (8001c04 <PARM_load+0x204>)
 8001b52:	7a93      	ldrb	r3, [r2, #10]
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	7293      	strb	r3, [r2, #10]

	for(int i=0; i<SERVO_CHANNEL_MAX; i++){
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	603b      	str	r3, [r7, #0]
 8001b5e:	e046      	b.n	8001bee <PARM_load+0x1ee>
		param.servo.channel[i].FUNCTION = 0;
 8001b60:	4928      	ldr	r1, [pc, #160]	@ (8001c04 <PARM_load+0x204>)
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	4613      	mov	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4413      	add	r3, r2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	3308      	adds	r3, #8
 8001b6e:	2200      	movs	r2, #0
 8001b70:	729a      	strb	r2, [r3, #10]
 8001b72:	2200      	movs	r2, #0
 8001b74:	72da      	strb	r2, [r3, #11]
		param.servo.channel[i].MAX = 2000;
 8001b76:	4923      	ldr	r1, [pc, #140]	@ (8001c04 <PARM_load+0x204>)
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4413      	add	r3, r2
 8001b80:	440b      	add	r3, r1
 8001b82:	3308      	adds	r3, #8
 8001b84:	2200      	movs	r2, #0
 8001b86:	f062 022f 	orn	r2, r2, #47	@ 0x2f
 8001b8a:	715a      	strb	r2, [r3, #5]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f042 0207 	orr.w	r2, r2, #7
 8001b92:	719a      	strb	r2, [r3, #6]
		param.servo.channel[i].MIN = 1000;
 8001b94:	491b      	ldr	r1, [pc, #108]	@ (8001c04 <PARM_load+0x204>)
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	3308      	adds	r3, #8
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f062 0217 	orn	r2, r2, #23
 8001ba8:	70da      	strb	r2, [r3, #3]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f042 0203 	orr.w	r2, r2, #3
 8001bb0:	711a      	strb	r2, [r3, #4]
		param.servo.channel[i].TRIM = 1500;
 8001bb2:	4914      	ldr	r1, [pc, #80]	@ (8001c04 <PARM_load+0x204>)
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4413      	add	r3, r2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3308      	adds	r3, #8
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f062 0223 	orn	r2, r2, #35	@ 0x23
 8001bc6:	71da      	strb	r2, [r3, #7]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f042 0205 	orr.w	r2, r2, #5
 8001bce:	721a      	strb	r2, [r3, #8]
		param.servo.channel[i].REVERSED = 0;
 8001bd0:	490c      	ldr	r1, [pc, #48]	@ (8001c04 <PARM_load+0x204>)
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4413      	add	r3, r2
 8001bda:	440b      	add	r3, r1
 8001bdc:	f103 0208 	add.w	r2, r3, #8
 8001be0:	7a53      	ldrb	r3, [r2, #9]
 8001be2:	f023 0301 	bic.w	r3, r3, #1
 8001be6:	7253      	strb	r3, [r2, #9]
	for(int i=0; i<SERVO_CHANNEL_MAX; i++){
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	3301      	adds	r3, #1
 8001bec:	603b      	str	r3, [r7, #0]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2b0b      	cmp	r3, #11
 8001bf2:	ddb5      	ble.n	8001b60 <PARM_load+0x160>
	}
	return 0;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	200002e8 	.word	0x200002e8

08001c08 <LL_TIM_EnableCounter>:
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f043 0201 	orr.w	r2, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	601a      	str	r2, [r3, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_TIM_CC_EnableChannel>:
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1a      	ldr	r2, [r3, #32]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	621a      	str	r2, [r3, #32]
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <PPM_init>:
 * @brief PPM 입력을 위한 타이머 설정
 * @detail RC_Initialization()에서 실행됨
 * @retval 0 : 정상 수신
 */
int PPM_init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
	/*
	 * TIM1은 168MHz이고 PPM은 일반적으로 20ms 이므로
	 */
	const int hz = 50;
 8001c52:	2332      	movs	r3, #50	@ 0x32
 8001c54:	607b      	str	r3, [r7, #4]
	TIM1->ARR = 1000000/hz-1;
 8001c56:	4a0d      	ldr	r2, [pc, #52]	@ (8001c8c <PPM_init+0x40>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c5e:	1e5a      	subs	r2, r3, #1
 8001c60:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <PPM_init+0x44>)
 8001c62:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->PSC = 168-1;
 8001c64:	4b0a      	ldr	r3, [pc, #40]	@ (8001c90 <PPM_init+0x44>)
 8001c66:	22a7      	movs	r2, #167	@ 0xa7
 8001c68:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->CCR4 = TIM1->ARR;
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <PPM_init+0x44>)
 8001c6c:	4a08      	ldr	r2, [pc, #32]	@ (8001c90 <PPM_init+0x44>)
 8001c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c70:	6413      	str	r3, [r2, #64]	@ 0x40

	LL_TIM_EnableCounter(TIM1);
 8001c72:	4807      	ldr	r0, [pc, #28]	@ (8001c90 <PPM_init+0x44>)
 8001c74:	f7ff ffc8 	bl	8001c08 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH4);
 8001c78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c7c:	4804      	ldr	r0, [pc, #16]	@ (8001c90 <PPM_init+0x44>)
 8001c7e:	f7ff ffd3 	bl	8001c28 <LL_TIM_CC_EnableChannel>
	return 0;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	000f4240 	.word	0x000f4240
 8001c90:	40010000 	.word	0x40010000

08001c94 <PPM_readData>:
 * @parm timer 데이터 (ms 단위)
 * @retval 0 : 정상 수신
 * @retval 1 : 이상 데이터
 */
int PPM_readData(uint16_t data)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	80fb      	strh	r3, [r7, #6]
	static uint16_t previous = 0;
    static uint8_t cnt = 0;
	uint16_t rx = system_time.time_unix_usec - previous;
 8001c9e:	491b      	ldr	r1, [pc, #108]	@ (8001d0c <PPM_readData+0x78>)
 8001ca0:	680a      	ldr	r2, [r1, #0]
 8001ca2:	684b      	ldr	r3, [r1, #4]
 8001ca4:	b292      	uxth	r2, r2
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d10 <PPM_readData+0x7c>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	81fb      	strh	r3, [r7, #14]

	previous = system_time.time_unix_usec;
 8001cae:	4917      	ldr	r1, [pc, #92]	@ (8001d0c <PPM_readData+0x78>)
 8001cb0:	680a      	ldr	r2, [r1, #0]
 8001cb2:	684b      	ldr	r3, [r1, #4]
 8001cb4:	b292      	uxth	r2, r2
 8001cb6:	4b16      	ldr	r3, [pc, #88]	@ (8001d10 <PPM_readData+0x7c>)
 8001cb8:	801a      	strh	r2, [r3, #0]

    if(rx>2500) cnt = 0;
 8001cba:	89fb      	ldrh	r3, [r7, #14]
 8001cbc:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d902      	bls.n	8001cca <PPM_readData+0x36>
 8001cc4:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <PPM_readData+0x80>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
	if(rx>2200 || rx<800) return 1;
 8001cca:	89fb      	ldrh	r3, [r7, #14]
 8001ccc:	f640 0298 	movw	r2, #2200	@ 0x898
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d803      	bhi.n	8001cdc <PPM_readData+0x48>
 8001cd4:	89fb      	ldrh	r3, [r7, #14]
 8001cd6:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001cda:	d201      	bcs.n	8001ce0 <PPM_readData+0x4c>
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e00e      	b.n	8001cfe <PPM_readData+0x6a>

	((uint16_t*)RC_Buffer)[cnt] = rx;
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8001d18 <PPM_readData+0x84>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d14 <PPM_readData+0x80>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	89fa      	ldrh	r2, [r7, #14]
 8001cee:	801a      	strh	r2, [r3, #0]
    cnt++;
 8001cf0:	4b08      	ldr	r3, [pc, #32]	@ (8001d14 <PPM_readData+0x80>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <PPM_readData+0x80>)
 8001cfa:	701a      	strb	r2, [r3, #0]

	return 0;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000454 	.word	0x20000454
 8001d10:	20000416 	.word	0x20000416
 8001d14:	20000418 	.word	0x20000418
 8001d18:	20000450 	.word	0x20000450

08001d1c <PPM_getControlData>:
 * @retval 0 : 정상 수신
 * @retval -1 : 수신 버퍼 없음
 * @retval 0xf2 : FailSafe
 */
int PPM_getControlData(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af02      	add	r7, sp, #8
	PARAM_RC_CH* paramCh = (PARAM_RC_CH*)&param.rc.channel[0];
 8001d22:	4b5b      	ldr	r3, [pc, #364]	@ (8001e90 <PPM_getControlData+0x174>)
 8001d24:	60bb      	str	r3, [r7, #8]
	RC_CHANNELS* rc = &RC_channels;
 8001d26:	4b5b      	ldr	r3, [pc, #364]	@ (8001e94 <PPM_getControlData+0x178>)
 8001d28:	607b      	str	r3, [r7, #4]

	if(RC_isBufferInit() != 0) return -1;
 8001d2a:	f000 fdcb 	bl	80028c4 <RC_isBufferInit>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <PPM_getControlData+0x1e>
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
 8001d38:	e0a6      	b.n	8001e88 <PPM_getControlData+0x16c>

	for(int i=0; i<PPM_MAX_CHANNEL; i++){
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	e09e      	b.n	8001e7e <PPM_getControlData+0x162>
		// Reverse 처리
		uint16_t value = ((uint16_t*)RC_Buffer)[i];
 8001d40:	4b55      	ldr	r3, [pc, #340]	@ (8001e98 <PPM_getControlData+0x17c>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	807b      	strh	r3, [r7, #2]
		if((param.rc.reversedMask>>i)&0x01)
 8001d4e:	4b53      	ldr	r3, [pc, #332]	@ (8001e9c <PPM_getControlData+0x180>)
 8001d50:	f8d3 2083 	ldr.w	r2, [r3, #131]	@ 0x83
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d02c      	beq.n	8001dbc <PPM_getControlData+0xa0>
		{
			rc->value[i] = map(value,
					1000, 2000,
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	4413      	add	r3, r2
			rc->value[i] = map(value,
 8001d6e:	885b      	ldrh	r3, [r3, #2]
 8001d70:	b299      	uxth	r1, r3
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4613      	mov	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	4413      	add	r3, r2
			rc->value[i] = map(value,
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	8878      	ldrh	r0, [r7, #2]
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	460b      	mov	r3, r1
 8001d88:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001d8c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d90:	f000 fe36 	bl	8002a00 <map>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4619      	mov	r1, r3
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4413      	add	r3, r2
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	4413      	add	r3, r2
 8001da4:	889b      	ldrh	r3, [r3, #4]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	440b      	add	r3, r1
 8001daa:	b299      	uxth	r1, r3
			rc->value[i] = map(value,
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	460a      	mov	r2, r1
 8001db6:	f8a3 2005 	strh.w	r2, [r3, #5]
 8001dba:	e02b      	b.n	8001e14 <PPM_getControlData+0xf8>
		}
		else{
			rc->value[i] = map(value,
					1000, 2000,
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	4413      	add	r3, r2
			rc->value[i] = map(value,
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	b299      	uxth	r1, r3
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	4413      	add	r3, r2
			rc->value[i] = map(value,
 8001dd8:	885b      	ldrh	r3, [r3, #2]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	8878      	ldrh	r0, [r7, #2]
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	460b      	mov	r3, r1
 8001de2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001de6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001dea:	f000 fe09 	bl	8002a00 <map>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4619      	mov	r1, r3
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	4613      	mov	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4413      	add	r3, r2
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	889b      	ldrh	r3, [r3, #4]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	440b      	add	r3, r1
 8001e04:	b299      	uxth	r1, r3
			rc->value[i] = map(value,
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	460a      	mov	r2, r1
 8001e10:	f8a3 2005 	strh.w	r2, [r3, #5]
		}

		// Dead-zone 처리
		if(rc->value[i]>(1500-paramCh[i].DZ) && rc->value[i]<(1500+paramCh[i].DZ)){
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	4619      	mov	r1, r3
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	4413      	add	r3, r2
 8001e30:	799b      	ldrb	r3, [r3, #6]
 8001e32:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8001e36:	3304      	adds	r3, #4
 8001e38:	4299      	cmp	r1, r3
 8001e3a:	dd1d      	ble.n	8001e78 <PPM_getControlData+0x15c>
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4413      	add	r3, r2
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	4413      	add	r3, r2
 8001e48:	799b      	ldrb	r3, [r3, #6]
 8001e4a:	f203 52db 	addw	r2, r3, #1499	@ 0x5db
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	440b      	add	r3, r1
 8001e56:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	db0b      	blt.n	8001e78 <PPM_getControlData+0x15c>
			rc->value[i] = 1500;
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f062 0223 	orn	r2, r2, #35	@ 0x23
 8001e6e:	715a      	strb	r2, [r3, #5]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f042 0205 	orr.w	r2, r2, #5
 8001e76:	719a      	strb	r2, [r3, #6]
	for(int i=0; i<PPM_MAX_CHANNEL; i++){
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2b07      	cmp	r3, #7
 8001e82:	f77f af5d 	ble.w	8001d40 <PPM_getControlData+0x24>
		}
	}

	return 0;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	2000036f 	.word	0x2000036f
 8001e94:	200004c0 	.word	0x200004c0
 8001e98:	20000450 	.word	0x20000450
 8001e9c:	200002e8 	.word	0x200002e8

08001ea0 <SRXL2_connect>:
 * @detail 수신기와 연결하기 위한 Handshake 절차 수행
 * @parm none
 * @retval 0 : 연결 완료
 * @retval 2 : 이미 연결됨
 */
int SRXL2_connect(void){
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
	SRXL2_Header *header = &packet.header;
 8001ea6:	4b28      	ldr	r3, [pc, #160]	@ (8001f48 <SRXL2_connect+0xa8>)
 8001ea8:	617b      	str	r3, [r7, #20]

	SRXL2_Handshake_Packet tx_packet;

	while(1)
	{
		if(SRXL2_isReceived()!=0) continue;
 8001eaa:	f000 fa95 	bl	80023d8 <SRXL2_isReceived>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d138      	bne.n	8001f26 <SRXL2_connect+0x86>

		switch(header->pType)
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	785b      	ldrb	r3, [r3, #1]
 8001eb8:	2b21      	cmp	r3, #33	@ 0x21
 8001eba:	d003      	beq.n	8001ec4 <SRXL2_connect+0x24>
 8001ebc:	2bcd      	cmp	r3, #205	@ 0xcd
 8001ebe:	d134      	bne.n	8001f2a <SRXL2_connect+0x8a>
		{
		case SRXL_CTRL_ID:
			//Bind 정보 요청 또는 unbind 후 재 연결하도록 작성
			return 2;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e03c      	b.n	8001f3e <SRXL2_connect+0x9e>
		case SRXL_HANDSHAKE_ID:
			rx = &(((SRXL2_Handshake_Packet *) RC_Buffer)->data);
 8001ec4:	4b21      	ldr	r3, [pc, #132]	@ (8001f4c <SRXL2_connect+0xac>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3303      	adds	r3, #3
 8001eca:	613b      	str	r3, [r7, #16]

			// 수신기의 ID를 가져옴
			if((rx->SrcID)>>4 == 0x1)
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d10e      	bne.n	8001ef6 <SRXL2_connect+0x56>
			{
				receiver_info.SrcID = rx->SrcID;
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	781a      	ldrb	r2, [r3, #0]
 8001edc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f50 <SRXL2_connect+0xb0>)
 8001ede:	701a      	strb	r2, [r3, #0]
				receiver_info.Info = rx->Info;
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	791a      	ldrb	r2, [r3, #4]
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f50 <SRXL2_connect+0xb0>)
 8001ee6:	711a      	strb	r2, [r3, #4]
				receiver_info.UID = rx->UID;
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8001eee:	4a18      	ldr	r2, [pc, #96]	@ (8001f50 <SRXL2_connect+0xb0>)
 8001ef0:	f8c2 3005 	str.w	r3, [r2, #5]
				break;
 8001ef4:	e000      	b.n	8001ef8 <SRXL2_connect+0x58>
			}
			break;
 8001ef6:	bf00      	nop
		default:
			continue;
		}

		break;
 8001ef8:	bf00      	nop
	}

	tx_packet.header.speckrum_id = SPEKTRUM_SRXL_ID;
 8001efa:	23a6      	movs	r3, #166	@ 0xa6
 8001efc:	703b      	strb	r3, [r7, #0]
	tx_packet.header.pType = SRXL_HANDSHAKE_ID;
 8001efe:	2321      	movs	r3, #33	@ 0x21
 8001f00:	707b      	strb	r3, [r7, #1]
	tx_packet.header.len = sizeof(SRXL2_Handshake_Packet);
 8001f02:	230e      	movs	r3, #14
 8001f04:	70bb      	strb	r3, [r7, #2]

	tx_packet.data.SrcID = SRXL_FC_DEVICE_ID;
 8001f06:	2330      	movs	r3, #48	@ 0x30
 8001f08:	70fb      	strb	r3, [r7, #3]
	tx_packet.data.DestID = receiver_info.SrcID;
 8001f0a:	4b11      	ldr	r3, [pc, #68]	@ (8001f50 <SRXL2_connect+0xb0>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	713b      	strb	r3, [r7, #4]
	tx_packet.data.Priority = 0x60;
 8001f10:	2360      	movs	r3, #96	@ 0x60
 8001f12:	717b      	strb	r3, [r7, #5]
	tx_packet.data.BaudRate = SRXL_BAUD_115200;
 8001f14:	2300      	movs	r3, #0
 8001f16:	71bb      	strb	r3, [r7, #6]
	tx_packet.data.Info = 0x01;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	71fb      	strb	r3, [r7, #7]
	tx_packet.data.UID = 0x12345678;
 8001f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f54 <SRXL2_connect+0xb4>)
 8001f1e:	60bb      	str	r3, [r7, #8]

	tx_packet.crc = 0x0000;
 8001f20:	2300      	movs	r3, #0
 8001f22:	81bb      	strh	r3, [r7, #12]

	while(SRXL2_doHandshake(&tx_packet));
 8001f24:	e003      	b.n	8001f2e <SRXL2_connect+0x8e>
		if(SRXL2_isReceived()!=0) continue;
 8001f26:	bf00      	nop
 8001f28:	e7bf      	b.n	8001eaa <SRXL2_connect+0xa>
			continue;
 8001f2a:	bf00      	nop
		if(SRXL2_isReceived()!=0) continue;
 8001f2c:	e7bd      	b.n	8001eaa <SRXL2_connect+0xa>
	while(SRXL2_doHandshake(&tx_packet));
 8001f2e:	463b      	mov	r3, r7
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 f96d 	bl	8002210 <SRXL2_doHandshake>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f8      	bne.n	8001f2e <SRXL2_connect+0x8e>

	return 0;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	2000041c 	.word	0x2000041c
 8001f4c:	20000450 	.word	0x20000450
 8001f50:	20000434 	.word	0x20000434
 8001f54:	12345678 	.word	0x12345678

08001f58 <SRXL2_getControlData>:
 * @retval 0 : 정상 수신
 * @retval -1 : 수신 버퍼 없음
 * @retval -2 : 조종 데이터가 아님
 * @retval 0xf2 : FailSafe
 */
int SRXL2_getControlData(void){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
	SRXL2_Header* header = &packet.header;
 8001f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc8 <SRXL2_getControlData+0x70>)
 8001f60:	607b      	str	r3, [r7, #4]
	SRXL2_Control_Packet* rx = (SRXL2_Control_Packet*)RC_Buffer;
 8001f62:	4b1a      	ldr	r3, [pc, #104]	@ (8001fcc <SRXL2_getControlData+0x74>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	603b      	str	r3, [r7, #0]

	if(SRXL2_isReceived()!=0) return -1;
 8001f68:	f000 fa36 	bl	80023d8 <SRXL2_isReceived>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <SRXL2_getControlData+0x20>
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
 8001f76:	e022      	b.n	8001fbe <SRXL2_getControlData+0x66>
	if(header->pType != SRXL_CTRL_ID) return -2;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	785b      	ldrb	r3, [r3, #1]
 8001f7c:	2bcd      	cmp	r3, #205	@ 0xcd
 8001f7e:	d002      	beq.n	8001f86 <SRXL2_getControlData+0x2e>
 8001f80:	f06f 0301 	mvn.w	r3, #1
 8001f84:	e01b      	b.n	8001fbe <SRXL2_getControlData+0x66>

	// rssi, frameLoss, Fail-safe 기능 등 구현

	switch(rx->Command){
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	78db      	ldrb	r3, [r3, #3]
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d816      	bhi.n	8001fbc <SRXL2_getControlData+0x64>
 8001f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f94 <SRXL2_getControlData+0x3c>)
 8001f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f94:	08001fa5 	.word	0x08001fa5
 8001f98:	08001fb1 	.word	0x08001fb1
 8001f9c:	08001fbd 	.word	0x08001fbd
 8001fa0:	08001fbd 	.word	0x08001fbd
	case SRXL_CTRL_CMD_CHANNEL:
		// SRXL2_SendTelemetryData();
		SRXL2_parseControlData((SRXL2_Control_Packet*)RC_Buffer);
 8001fa4:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <SRXL2_getControlData+0x74>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 f811 	bl	8001fd0 <SRXL2_parseControlData>
		break;
 8001fae:	e005      	b.n	8001fbc <SRXL2_getControlData+0x64>
	case SRXL_CTRL_CMD_CHANNEL_FS:
		return RC_setFailsafe(0x1<<SRXL2);
 8001fb0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001fb4:	f000 fcc4 	bl	8002940 <RC_setFailsafe>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	e000      	b.n	8001fbe <SRXL2_getControlData+0x66>
		break;
	case SRXL_CTRL_CMD_FWDPGM:
		break;
	}

	return 0;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	2000041c 	.word	0x2000041c
 8001fcc:	20000450 	.word	0x20000450

08001fd0 <SRXL2_parseControlData>:
 *		   data 범위 조정(1000us~2000us), 반전, 트림, Dead-zone 적용.
 * 		   RC_Channel[]에 저장
 * @parm SRXL_Control_Pack *rx : (SRXL2_Control_Packet*)packet
 */
int SRXL2_parseControlData(SRXL2_Control_Packet *rx)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	@ 0x28
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	6078      	str	r0, [r7, #4]
	RC_CHANNELS* rc = &RC_channels;
 8001fd8:	4b87      	ldr	r3, [pc, #540]	@ (80021f8 <SRXL2_parseControlData+0x228>)
 8001fda:	617b      	str	r3, [r7, #20]
	PARAM_RC_CH* paramCh = (PARAM_RC_CH*)&param.rc.channel[0];
 8001fdc:	4b87      	ldr	r3, [pc, #540]	@ (80021fc <SRXL2_parseControlData+0x22c>)
 8001fde:	613b      	str	r3, [r7, #16]

	uint8_t channelCnt = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	77fb      	strb	r3, [r7, #31]
	static uint32_t channelMask = 0;

	static uint32_t previousTime = 0;

	for(int i=0; i<SRXL_MAX_CHANNEL; i++)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61bb      	str	r3, [r7, #24]
 8001fe8:	e0c3      	b.n	8002172 <SRXL2_parseControlData+0x1a2>
	{
		if(!((rx->data.mask>>i)&0x01)) continue;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80b6 	beq.w	800216a <SRXL2_parseControlData+0x19a>
		if(i>=RC_CHANNEL_MAX) break;
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	2b11      	cmp	r3, #17
 8002002:	f300 80bb 	bgt.w	800217c <SRXL2_parseControlData+0x1ac>

		uint16_t value = rx->data.values[channelCnt];
 8002006:	7ff9      	ldrb	r1, [r7, #31]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	004b      	lsls	r3, r1, #1
 800200c:	4413      	add	r3, r2
 800200e:	7b18      	ldrb	r0, [r3, #12]
 8002010:	004b      	lsls	r3, r1, #1
 8002012:	4413      	add	r3, r2
 8002014:	7b5b      	ldrb	r3, [r3, #13]
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	4303      	orrs	r3, r0
 800201a:	81fb      	strh	r3, [r7, #14]
		channelCnt++;
 800201c:	7ffb      	ldrb	r3, [r7, #31]
 800201e:	3301      	adds	r3, #1
 8002020:	77fb      	strb	r3, [r7, #31]

		// RC 값 필터링 코드 작성
		value = value<SRXL_CTRL_VALUE_MIN?SRXL_CTRL_VALUE_MIN:value;
 8002022:	89fb      	ldrh	r3, [r7, #14]
 8002024:	f642 22a0 	movw	r2, #10912	@ 0x2aa0
 8002028:	4293      	cmp	r3, r2
 800202a:	bf38      	it	cc
 800202c:	4613      	movcc	r3, r2
 800202e:	81fb      	strh	r3, [r7, #14]
		value = value>SRXL_CTRL_VALUE_MAX?SRXL_CTRL_VALUE_MAX:value;
 8002030:	89fb      	ldrh	r3, [r7, #14]
 8002032:	f24d 5254 	movw	r2, #54612	@ 0xd554
 8002036:	4293      	cmp	r3, r2
 8002038:	bf28      	it	cs
 800203a:	4613      	movcs	r3, r2
 800203c:	81fb      	strh	r3, [r7, #14]

		// Reverse 처리
		if((param.rc.reversedMask>>i)&0x01)
 800203e:	4b70      	ldr	r3, [pc, #448]	@ (8002200 <SRXL2_parseControlData+0x230>)
 8002040:	f8d3 2083 	ldr.w	r2, [r3, #131]	@ 0x83
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fa22 f303 	lsr.w	r3, r2, r3
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d02c      	beq.n	80020ac <SRXL2_parseControlData+0xdc>
		{
			rc->value[i] = map(value,
					SRXL_CTRL_VALUE_MIN, SRXL_CTRL_VALUE_MAX,
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4413      	add	r3, r2
			rc->value[i] = map(value,
 800205e:	885b      	ldrh	r3, [r3, #2]
 8002060:	b299      	uxth	r1, r3
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4613      	mov	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4413      	add	r3, r2
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4413      	add	r3, r2
			rc->value[i] = map(value,
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	b29b      	uxth	r3, r3
 8002072:	89f8      	ldrh	r0, [r7, #14]
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	460b      	mov	r3, r1
 8002078:	f24d 5254 	movw	r2, #54612	@ 0xd554
 800207c:	f642 21a0 	movw	r1, #10912	@ 0x2aa0
 8002080:	f000 fcbe 	bl	8002a00 <map>
 8002084:	4603      	mov	r3, r0
 8002086:	4619      	mov	r1, r3
					paramCh[i].MAX, paramCh[i].MIN) + paramCh[i].TRIM;
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	889b      	ldrh	r3, [r3, #4]
 8002096:	b29b      	uxth	r3, r3
 8002098:	440b      	add	r3, r1
 800209a:	b299      	uxth	r1, r3
			rc->value[i] = map(value,
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	460a      	mov	r2, r1
 80020a6:	f8a3 2005 	strh.w	r2, [r3, #5]
 80020aa:	e02b      	b.n	8002104 <SRXL2_parseControlData+0x134>
		}
		else{
			rc->value[i] = map(value,
					SRXL_CTRL_VALUE_MIN, SRXL_CTRL_VALUE_MAX,
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4413      	add	r3, r2
			rc->value[i] = map(value,
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	b299      	uxth	r1, r3
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	4413      	add	r3, r2
			rc->value[i] = map(value,
 80020c8:	885b      	ldrh	r3, [r3, #2]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	89f8      	ldrh	r0, [r7, #14]
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	460b      	mov	r3, r1
 80020d2:	f24d 5254 	movw	r2, #54612	@ 0xd554
 80020d6:	f642 21a0 	movw	r1, #10912	@ 0x2aa0
 80020da:	f000 fc91 	bl	8002a00 <map>
 80020de:	4603      	mov	r3, r0
 80020e0:	4619      	mov	r1, r3
					paramCh[i].MIN, paramCh[i].MAX) + paramCh[i].TRIM;
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4413      	add	r3, r2
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4413      	add	r3, r2
 80020ee:	889b      	ldrh	r3, [r3, #4]
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	440b      	add	r3, r1
 80020f4:	b299      	uxth	r1, r3
			rc->value[i] = map(value,
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	460a      	mov	r2, r1
 8002100:	f8a3 2005 	strh.w	r2, [r3, #5]
		}

		// Dead-zone 처리
		if(rc->value[i]>(1500-paramCh[i].DZ) && rc->value[i]<(1500+paramCh[i].DZ)){
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002110:	b29b      	uxth	r3, r3
 8002112:	4619      	mov	r1, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4613      	mov	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4413      	add	r3, r2
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4413      	add	r3, r2
 8002120:	799b      	ldrb	r3, [r3, #6]
 8002122:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8002126:	3304      	adds	r3, #4
 8002128:	4299      	cmp	r1, r3
 800212a:	dd1f      	ble.n	800216c <SRXL2_parseControlData+0x19c>
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4413      	add	r3, r2
 8002138:	799b      	ldrb	r3, [r3, #6]
 800213a:	f203 52db 	addw	r2, r3, #1499	@ 0x5db
 800213e:	6979      	ldr	r1, [r7, #20]
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	440b      	add	r3, r1
 8002146:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800214a:	b29b      	uxth	r3, r3
 800214c:	429a      	cmp	r2, r3
 800214e:	db0d      	blt.n	800216c <SRXL2_parseControlData+0x19c>
			rc->value[i] = 1500;
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4413      	add	r3, r2
 8002158:	2200      	movs	r2, #0
 800215a:	f062 0223 	orn	r2, r2, #35	@ 0x23
 800215e:	715a      	strb	r2, [r3, #5]
 8002160:	2200      	movs	r2, #0
 8002162:	f042 0205 	orr.w	r2, r2, #5
 8002166:	719a      	strb	r2, [r3, #6]
 8002168:	e000      	b.n	800216c <SRXL2_parseControlData+0x19c>
		if(!((rx->data.mask>>i)&0x01)) continue;
 800216a:	bf00      	nop
	for(int i=0; i<SRXL_MAX_CHANNEL; i++)
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	3301      	adds	r3, #1
 8002170:	61bb      	str	r3, [r7, #24]
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	2b1f      	cmp	r3, #31
 8002176:	f77f af38 	ble.w	8001fea <SRXL2_parseControlData+0x1a>
 800217a:	e000      	b.n	800217e <SRXL2_parseControlData+0x1ae>
		if(i>=RC_CHANNEL_MAX) break;
 800217c:	bf00      	nop
		}
	}

	if(system_time.time_boot_ms - previousTime > 2000){
 800217e:	4b21      	ldr	r3, [pc, #132]	@ (8002204 <SRXL2_parseControlData+0x234>)
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	4b21      	ldr	r3, [pc, #132]	@ (8002208 <SRXL2_parseControlData+0x238>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800218c:	d906      	bls.n	800219c <SRXL2_parseControlData+0x1cc>
		previousTime = system_time.time_boot_ms;
 800218e:	4b1d      	ldr	r3, [pc, #116]	@ (8002204 <SRXL2_parseControlData+0x234>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	4a1d      	ldr	r2, [pc, #116]	@ (8002208 <SRXL2_parseControlData+0x238>)
 8002194:	6013      	str	r3, [r2, #0]
		channelMask = 0;
 8002196:	4b1d      	ldr	r3, [pc, #116]	@ (800220c <SRXL2_parseControlData+0x23c>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
	}

	channelMask |= rx->data.mask;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	4b1a      	ldr	r3, [pc, #104]	@ (800220c <SRXL2_parseControlData+0x23c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	4a19      	ldr	r2, [pc, #100]	@ (800220c <SRXL2_parseControlData+0x23c>)
 80021a8:	6013      	str	r3, [r2, #0]
	rc->chancount = countSetBits(channelMask);
 80021aa:	4b18      	ldr	r3, [pc, #96]	@ (800220c <SRXL2_parseControlData+0x23c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f9d3 	bl	800255a <countSetBits>
 80021b4:	4603      	mov	r3, r0
 80021b6:	461a      	mov	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	711a      	strb	r2, [r3, #4]
	rc->time_boot_ms = system_time.time_boot_ms;
 80021bc:	4b11      	ldr	r3, [pc, #68]	@ (8002204 <SRXL2_parseControlData+0x234>)
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	601a      	str	r2, [r3, #0]

	/*
	 * SRXL2에서 rssi가 양수면 %값, 음수면 dBm 값임.
	 * MAVLink는 %값을 0-254 범위로 표현함
	 */
	if(!(rx->data.rssi&0x80)){
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	db0f      	blt.n	80021ee <SRXL2_parseControlData+0x21e>
		rc->rssi = map(rx->data.rssi, 0, 100, 0, 254);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80021d4:	b298      	uxth	r0, r3
 80021d6:	23fe      	movs	r3, #254	@ 0xfe
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2300      	movs	r3, #0
 80021dc:	2264      	movs	r2, #100	@ 0x64
 80021de:	2100      	movs	r1, #0
 80021e0:	f000 fc0e 	bl	8002a00 <map>
 80021e4:	4603      	mov	r3, r0
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	}

	return 0;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3720      	adds	r7, #32
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	200004c0 	.word	0x200004c0
 80021fc:	2000036f 	.word	0x2000036f
 8002200:	200002e8 	.word	0x200002e8
 8002204:	20000454 	.word	0x20000454
 8002208:	20000440 	.word	0x20000440
 800220c:	20000444 	.word	0x20000444

08002210 <SRXL2_doHandshake>:
 * @retval 0 : 송신 완료
 * @retval -1 : 송신 실패
 * @retval -2 : 패킷 크기와 정보가 불일치
 */
int SRXL2_doHandshake(SRXL2_Handshake_Packet *tx_packet)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	SRXL2_Handshake_Data* rx;
	SRXL2_Handshake_Data* data = &tx_packet->data;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3303      	adds	r3, #3
 800221c:	617b      	str	r3, [r7, #20]

	uint8_t len = tx_packet->header.len;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	789b      	ldrb	r3, [r3, #2]
 8002222:	74fb      	strb	r3, [r7, #19]
	if(sizeof(*tx_packet) != len) return -2;
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	2b0e      	cmp	r3, #14
 8002228:	d002      	beq.n	8002230 <SRXL2_doHandshake+0x20>
 800222a:	f06f 0301 	mvn.w	r3, #1
 800222e:	e029      	b.n	8002284 <SRXL2_doHandshake+0x74>

	while(1)
	{
		if(SRXL2_isReceived()!=0) continue;
 8002230:	f000 f8d2 	bl	80023d8 <SRXL2_isReceived>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d114      	bne.n	8002264 <SRXL2_doHandshake+0x54>
		if(packet.header.pType != SRXL_HANDSHAKE_ID) continue;
 800223a:	4b14      	ldr	r3, [pc, #80]	@ (800228c <SRXL2_doHandshake+0x7c>)
 800223c:	785b      	ldrb	r3, [r3, #1]
 800223e:	2b21      	cmp	r3, #33	@ 0x21
 8002240:	d112      	bne.n	8002268 <SRXL2_doHandshake+0x58>

		rx = &(((SRXL2_Handshake_Packet *) RC_Buffer)->data);
 8002242:	4b13      	ldr	r3, [pc, #76]	@ (8002290 <SRXL2_doHandshake+0x80>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	3303      	adds	r3, #3
 8002248:	60fb      	str	r3, [r7, #12]

		if(rx->SrcID == data->DestID && rx->DestID == data->SrcID)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	781a      	ldrb	r2, [r3, #0]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	785b      	ldrb	r3, [r3, #1]
 8002252:	429a      	cmp	r2, r3
 8002254:	d1ec      	bne.n	8002230 <SRXL2_doHandshake+0x20>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	785a      	ldrb	r2, [r3, #1]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d004      	beq.n	800226c <SRXL2_doHandshake+0x5c>
 8002262:	e7e5      	b.n	8002230 <SRXL2_doHandshake+0x20>
		if(SRXL2_isReceived()!=0) continue;
 8002264:	bf00      	nop
 8002266:	e7e3      	b.n	8002230 <SRXL2_doHandshake+0x20>
		if(packet.header.pType != SRXL_HANDSHAKE_ID) continue;
 8002268:	bf00      	nop
		if(SRXL2_isReceived()!=0) continue;
 800226a:	e7e1      	b.n	8002230 <SRXL2_doHandshake+0x20>
		{
			break;
 800226c:	bf00      	nop
		}
	}

	insert_crc((uint8_t*)tx_packet, len);
 800226e:	7cfb      	ldrb	r3, [r7, #19]
 8002270:	4619      	mov	r1, r3
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f94f 	bl	8002516 <insert_crc>
	return RC_halfDuplex_Transmit((uint8_t*)tx_packet, len);
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	4619      	mov	r1, r3
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 fb7d 	bl	800297c <RC_halfDuplex_Transmit>
 8002282:	4603      	mov	r3, r0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	2000041c 	.word	0x2000041c
 8002290:	20000450 	.word	0x20000450

08002294 <SRXL2_readByteIRQ2>:
 * @retval 1 : 1byte 수신 완료
 * @retval -1 : 헤더 에러
 * @retval -2 : 버퍼 설정 안됨
 */
int SRXL2_readByteIRQ2(const uint8_t data)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
	static uint8_t cnt = 0;
	static uint8_t maxLen = 0;

	if(RC_isBufferInit()!=0) return -2;
 800229e:	f000 fb11 	bl	80028c4 <RC_isBufferInit>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <SRXL2_readByteIRQ2+0x1a>
 80022a8:	f06f 0301 	mvn.w	r3, #1
 80022ac:	e089      	b.n	80023c2 <SRXL2_readByteIRQ2+0x12e>
	if(cnt>=SRXL_MAX_BUFFER_SIZE) return -2;
 80022ae:	4b47      	ldr	r3, [pc, #284]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b4f      	cmp	r3, #79	@ 0x4f
 80022b4:	d902      	bls.n	80022bc <SRXL2_readByteIRQ2+0x28>
 80022b6:	f06f 0301 	mvn.w	r3, #1
 80022ba:	e082      	b.n	80023c2 <SRXL2_readByteIRQ2+0x12e>

	switch(cnt)
 80022bc:	4b43      	ldr	r3, [pc, #268]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <SRXL2_readByteIRQ2+0x36>
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d011      	beq.n	80022ec <SRXL2_readByteIRQ2+0x58>
 80022c8:	e052      	b.n	8002370 <SRXL2_readByteIRQ2+0xdc>
	{
	case 0:
		if(data == SPEKTRUM_SRXL_ID){
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	2ba6      	cmp	r3, #166	@ 0xa6
 80022ce:	d176      	bne.n	80023be <SRXL2_readByteIRQ2+0x12a>
			RC_Buffer[cnt] = data;
 80022d0:	4b3f      	ldr	r3, [pc, #252]	@ (80023d0 <SRXL2_readByteIRQ2+0x13c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a3d      	ldr	r2, [pc, #244]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 80022d6:	7812      	ldrb	r2, [r2, #0]
 80022d8:	4413      	add	r3, r2
 80022da:	79fa      	ldrb	r2, [r7, #7]
 80022dc:	701a      	strb	r2, [r3, #0]
			cnt++;
 80022de:	4b3b      	ldr	r3, [pc, #236]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	3301      	adds	r3, #1
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4b39      	ldr	r3, [pc, #228]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 80022e8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80022ea:	e068      	b.n	80023be <SRXL2_readByteIRQ2+0x12a>
	case 1:
		switch(data){
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	2bcd      	cmp	r3, #205	@ 0xcd
 80022f0:	d026      	beq.n	8002340 <SRXL2_readByteIRQ2+0xac>
 80022f2:	2bcd      	cmp	r3, #205	@ 0xcd
 80022f4:	dc28      	bgt.n	8002348 <SRXL2_readByteIRQ2+0xb4>
 80022f6:	2b80      	cmp	r3, #128	@ 0x80
 80022f8:	d01e      	beq.n	8002338 <SRXL2_readByteIRQ2+0xa4>
 80022fa:	2b80      	cmp	r3, #128	@ 0x80
 80022fc:	dc24      	bgt.n	8002348 <SRXL2_readByteIRQ2+0xb4>
 80022fe:	2b55      	cmp	r3, #85	@ 0x55
 8002300:	d016      	beq.n	8002330 <SRXL2_readByteIRQ2+0x9c>
 8002302:	2b55      	cmp	r3, #85	@ 0x55
 8002304:	dc20      	bgt.n	8002348 <SRXL2_readByteIRQ2+0xb4>
 8002306:	2b50      	cmp	r3, #80	@ 0x50
 8002308:	d00e      	beq.n	8002328 <SRXL2_readByteIRQ2+0x94>
 800230a:	2b50      	cmp	r3, #80	@ 0x50
 800230c:	dc1c      	bgt.n	8002348 <SRXL2_readByteIRQ2+0xb4>
 800230e:	2b21      	cmp	r3, #33	@ 0x21
 8002310:	d002      	beq.n	8002318 <SRXL2_readByteIRQ2+0x84>
 8002312:	2b41      	cmp	r3, #65	@ 0x41
 8002314:	d004      	beq.n	8002320 <SRXL2_readByteIRQ2+0x8c>
 8002316:	e017      	b.n	8002348 <SRXL2_readByteIRQ2+0xb4>
		case SRXL_HANDSHAKE_ID:
			maxLen = 14;
 8002318:	4b2e      	ldr	r3, [pc, #184]	@ (80023d4 <SRXL2_readByteIRQ2+0x140>)
 800231a:	220e      	movs	r2, #14
 800231c:	701a      	strb	r2, [r3, #0]
			break;
 800231e:	e019      	b.n	8002354 <SRXL2_readByteIRQ2+0xc0>
		case SRXL_BIND_ID:
			maxLen = 21;
 8002320:	4b2c      	ldr	r3, [pc, #176]	@ (80023d4 <SRXL2_readByteIRQ2+0x140>)
 8002322:	2215      	movs	r2, #21
 8002324:	701a      	strb	r2, [r3, #0]
			break;
 8002326:	e015      	b.n	8002354 <SRXL2_readByteIRQ2+0xc0>
		case SRXL_PARAM_ID:
			maxLen = 14;
 8002328:	4b2a      	ldr	r3, [pc, #168]	@ (80023d4 <SRXL2_readByteIRQ2+0x140>)
 800232a:	220e      	movs	r2, #14
 800232c:	701a      	strb	r2, [r3, #0]
			break;
 800232e:	e011      	b.n	8002354 <SRXL2_readByteIRQ2+0xc0>
		case SRXL_RSSI_ID:
			maxLen = 10;
 8002330:	4b28      	ldr	r3, [pc, #160]	@ (80023d4 <SRXL2_readByteIRQ2+0x140>)
 8002332:	220a      	movs	r2, #10
 8002334:	701a      	strb	r2, [r3, #0]
			break;
 8002336:	e00d      	b.n	8002354 <SRXL2_readByteIRQ2+0xc0>
		case SRXL_TELEM_ID:
			maxLen = 22;
 8002338:	4b26      	ldr	r3, [pc, #152]	@ (80023d4 <SRXL2_readByteIRQ2+0x140>)
 800233a:	2216      	movs	r2, #22
 800233c:	701a      	strb	r2, [r3, #0]
			break;
 800233e:	e009      	b.n	8002354 <SRXL2_readByteIRQ2+0xc0>
		case SRXL_CTRL_ID:
			maxLen = 80;
 8002340:	4b24      	ldr	r3, [pc, #144]	@ (80023d4 <SRXL2_readByteIRQ2+0x140>)
 8002342:	2250      	movs	r2, #80	@ 0x50
 8002344:	701a      	strb	r2, [r3, #0]
			break;
 8002346:	e005      	b.n	8002354 <SRXL2_readByteIRQ2+0xc0>
		default :
			cnt = 0;
 8002348:	4b20      	ldr	r3, [pc, #128]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
			return -1;
 800234e:	f04f 33ff 	mov.w	r3, #4294967295
 8002352:	e036      	b.n	80023c2 <SRXL2_readByteIRQ2+0x12e>
		}
		RC_Buffer[cnt] = data;
 8002354:	4b1e      	ldr	r3, [pc, #120]	@ (80023d0 <SRXL2_readByteIRQ2+0x13c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1c      	ldr	r2, [pc, #112]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 800235a:	7812      	ldrb	r2, [r2, #0]
 800235c:	4413      	add	r3, r2
 800235e:	79fa      	ldrb	r2, [r7, #7]
 8002360:	701a      	strb	r2, [r3, #0]
		cnt++;
 8002362:	4b1a      	ldr	r3, [pc, #104]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	3301      	adds	r3, #1
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4b18      	ldr	r3, [pc, #96]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 800236c:	701a      	strb	r2, [r3, #0]
		break;
 800236e:	e027      	b.n	80023c0 <SRXL2_readByteIRQ2+0x12c>
	default :
		RC_Buffer[cnt] = data;
 8002370:	4b17      	ldr	r3, [pc, #92]	@ (80023d0 <SRXL2_readByteIRQ2+0x13c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a15      	ldr	r2, [pc, #84]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 8002376:	7812      	ldrb	r2, [r2, #0]
 8002378:	4413      	add	r3, r2
 800237a:	79fa      	ldrb	r2, [r7, #7]
 800237c:	701a      	strb	r2, [r3, #0]

		/*
		 * Control Packet은 사이즈가 가변적임
		 * 3번째 바이트가 패킷의 크기를 결정함
		 */
		if(maxLen == 80) maxLen = RC_Buffer[cnt];
 800237e:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <SRXL2_readByteIRQ2+0x140>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b50      	cmp	r3, #80	@ 0x50
 8002384:	d107      	bne.n	8002396 <SRXL2_readByteIRQ2+0x102>
 8002386:	4b12      	ldr	r3, [pc, #72]	@ (80023d0 <SRXL2_readByteIRQ2+0x13c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a10      	ldr	r2, [pc, #64]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 800238c:	7812      	ldrb	r2, [r2, #0]
 800238e:	4413      	add	r3, r2
 8002390:	781a      	ldrb	r2, [r3, #0]
 8002392:	4b10      	ldr	r3, [pc, #64]	@ (80023d4 <SRXL2_readByteIRQ2+0x140>)
 8002394:	701a      	strb	r2, [r3, #0]

		if(cnt == maxLen-1){
 8002396:	4b0d      	ldr	r3, [pc, #52]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	4b0d      	ldr	r3, [pc, #52]	@ (80023d4 <SRXL2_readByteIRQ2+0x140>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d104      	bne.n	80023b0 <SRXL2_readByteIRQ2+0x11c>
			cnt=0;
 80023a6:	4b09      	ldr	r3, [pc, #36]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
			return 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	e008      	b.n	80023c2 <SRXL2_readByteIRQ2+0x12e>
		}
		else{
			cnt++;
 80023b0:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	3301      	adds	r3, #1
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	4b04      	ldr	r3, [pc, #16]	@ (80023cc <SRXL2_readByteIRQ2+0x138>)
 80023ba:	701a      	strb	r2, [r3, #0]
		}
		break;
 80023bc:	e000      	b.n	80023c0 <SRXL2_readByteIRQ2+0x12c>
		break;
 80023be:	bf00      	nop
	}
	return 1;
 80023c0:	2301      	movs	r3, #1
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000448 	.word	0x20000448
 80023d0:	20000450 	.word	0x20000450
 80023d4:	20000449 	.word	0x20000449

080023d8 <SRXL2_isReceived>:
 * @detail IRQ2가 실행되었는지 확인
 * @retval 0 : 수신 완료
 * @retval -1 : 수신 인터럽트 없음
 * @retval -2 : CRC 불일치
 */
int SRXL2_isReceived(void){
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
	SRXL2_Packet *rx = &packet;
 80023de:	4b2a      	ldr	r3, [pc, #168]	@ (8002488 <SRXL2_isReceived+0xb0>)
 80023e0:	607b      	str	r3, [r7, #4]
	SRXL2_Header *header = &rx->header;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	603b      	str	r3, [r7, #0]

	if(RC_rxFlag.uart == 0)
 80023e6:	4b29      	ldr	r3, [pc, #164]	@ (800248c <SRXL2_isReceived+0xb4>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d102      	bne.n	80023fa <SRXL2_isReceived+0x22>
	{
		return -1;
 80023f4:	f04f 33ff 	mov.w	r3, #4294967295
 80023f8:	e042      	b.n	8002480 <SRXL2_isReceived+0xa8>
	}

	// flag clear
	RC_rxFlag.uart = 0;
 80023fa:	4a24      	ldr	r2, [pc, #144]	@ (800248c <SRXL2_isReceived+0xb4>)
 80023fc:	7813      	ldrb	r3, [r2, #0]
 80023fe:	f023 0304 	bic.w	r3, r3, #4
 8002402:	7013      	strb	r3, [r2, #0]

	header->speckrum_id = SPEKTRUM_SRXL_ID;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	22a6      	movs	r2, #166	@ 0xa6
 8002408:	701a      	strb	r2, [r3, #0]
	header->pType = RC_Buffer[1];
 800240a:	4b21      	ldr	r3, [pc, #132]	@ (8002490 <SRXL2_isReceived+0xb8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	785a      	ldrb	r2, [r3, #1]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	705a      	strb	r2, [r3, #1]
	header->len = RC_Buffer[2];
 8002414:	4b1e      	ldr	r3, [pc, #120]	@ (8002490 <SRXL2_isReceived+0xb8>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	789a      	ldrb	r2, [r3, #2]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	709a      	strb	r2, [r3, #2]

	rx->Data = RC_Buffer;
 800241e:	4b1c      	ldr	r3, [pc, #112]	@ (8002490 <SRXL2_isReceived+0xb8>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f8c3 2003 	str.w	r2, [r3, #3]
	rx->crc = ((uint16_t)RC_Buffer[header->len -2] << 8 | RC_Buffer[header->len -1]);
 8002428:	4b19      	ldr	r3, [pc, #100]	@ (8002490 <SRXL2_isReceived+0xb8>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	789b      	ldrb	r3, [r3, #2]
 8002430:	3b02      	subs	r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	b21b      	sxth	r3, r3
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	b21a      	sxth	r2, r3
 800243c:	4b14      	ldr	r3, [pc, #80]	@ (8002490 <SRXL2_isReceived+0xb8>)
 800243e:	6819      	ldr	r1, [r3, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	789b      	ldrb	r3, [r3, #2]
 8002444:	3b01      	subs	r3, #1
 8002446:	440b      	add	r3, r1
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b21b      	sxth	r3, r3
 800244c:	4313      	orrs	r3, r2
 800244e:	b21b      	sxth	r3, r3
 8002450:	b29a      	uxth	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f8a3 2013 	strh.w	r2, [r3, #19]

	if(calculate_crc(RC_Buffer, header->len) != rx->crc){
 8002458:	4b0d      	ldr	r3, [pc, #52]	@ (8002490 <SRXL2_isReceived+0xb8>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	789b      	ldrb	r3, [r3, #2]
 8002460:	4619      	mov	r1, r3
 8002462:	4610      	mov	r0, r2
 8002464:	f000 f816 	bl	8002494 <calculate_crc>
 8002468:	4603      	mov	r3, r0
 800246a:	461a      	mov	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f8b3 3013 	ldrh.w	r3, [r3, #19]
 8002472:	b29b      	uxth	r3, r3
 8002474:	429a      	cmp	r2, r3
 8002476:	d002      	beq.n	800247e <SRXL2_isReceived+0xa6>
		return -2;
 8002478:	f06f 0301 	mvn.w	r3, #1
 800247c:	e000      	b.n	8002480 <SRXL2_isReceived+0xa8>
	}

	return 0;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	2000041c 	.word	0x2000041c
 800248c:	2000044c 	.word	0x2000044c
 8002490:	20000450 	.word	0x20000450

08002494 <calculate_crc>:
 * @parm const uint8_t* data : data address
 * @parm uint8_t len : sizeof(data)
 * @retval uint16_t crc
 */
uint16_t calculate_crc(const uint8_t *data, uint8_t len)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0x0000;
 80024a0:	2300      	movs	r3, #0
 80024a2:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len-2; i++) {
 80024a4:	2300      	movs	r3, #0
 80024a6:	737b      	strb	r3, [r7, #13]
 80024a8:	e029      	b.n	80024fe <calculate_crc+0x6a>
		crc ^= ((uint16_t)data[i] << 8);
 80024aa:	7b7b      	ldrb	r3, [r7, #13]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	4413      	add	r3, r2
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	b21b      	sxth	r3, r3
 80024b4:	021b      	lsls	r3, r3, #8
 80024b6:	b21a      	sxth	r2, r3
 80024b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024bc:	4053      	eors	r3, r2
 80024be:	b21b      	sxth	r3, r3
 80024c0:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 80024c2:	2300      	movs	r3, #0
 80024c4:	733b      	strb	r3, [r7, #12]
 80024c6:	e014      	b.n	80024f2 <calculate_crc+0x5e>
			if (crc & 0x8000)
 80024c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	da0a      	bge.n	80024e6 <calculate_crc+0x52>
				crc = (crc << 1) ^ 0x1021;
 80024d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	b21b      	sxth	r3, r3
 80024d8:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 80024dc:	f083 0301 	eor.w	r3, r3, #1
 80024e0:	b21b      	sxth	r3, r3
 80024e2:	81fb      	strh	r3, [r7, #14]
 80024e4:	e002      	b.n	80024ec <calculate_crc+0x58>
			else
				crc = (crc << 1);
 80024e6:	89fb      	ldrh	r3, [r7, #14]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 80024ec:	7b3b      	ldrb	r3, [r7, #12]
 80024ee:	3301      	adds	r3, #1
 80024f0:	733b      	strb	r3, [r7, #12]
 80024f2:	7b3b      	ldrb	r3, [r7, #12]
 80024f4:	2b07      	cmp	r3, #7
 80024f6:	d9e7      	bls.n	80024c8 <calculate_crc+0x34>
	for (uint8_t i = 0; i < len-2; i++) {
 80024f8:	7b7b      	ldrb	r3, [r7, #13]
 80024fa:	3301      	adds	r3, #1
 80024fc:	737b      	strb	r3, [r7, #13]
 80024fe:	7b7a      	ldrb	r2, [r7, #13]
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	3b02      	subs	r3, #2
 8002504:	429a      	cmp	r2, r3
 8002506:	dbd0      	blt.n	80024aa <calculate_crc+0x16>
		}
	}

	return crc;
 8002508:	89fb      	ldrh	r3, [r7, #14]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <insert_crc>:
 * @parm uint8_t* data : data address
 * @parm uint8_t len : sizeof(data)
 * @retval uint16_t crc
 */
uint16_t insert_crc(uint8_t *data, uint8_t len)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b084      	sub	sp, #16
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = calculate_crc(data, len);
 8002522:	78fb      	ldrb	r3, [r7, #3]
 8002524:	4619      	mov	r1, r3
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ffb4 	bl	8002494 <calculate_crc>
 800252c:	4603      	mov	r3, r0
 800252e:	81fb      	strh	r3, [r7, #14]

	data[len -2] = (uint8_t)(crc >> 8);
 8002530:	89fb      	ldrh	r3, [r7, #14]
 8002532:	0a1b      	lsrs	r3, r3, #8
 8002534:	b299      	uxth	r1, r3
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	3b02      	subs	r3, #2
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	b2ca      	uxtb	r2, r1
 8002540:	701a      	strb	r2, [r3, #0]
	data[len -1] = (uint8_t)(crc & 0xFF);
 8002542:	78fb      	ldrb	r3, [r7, #3]
 8002544:	3b01      	subs	r3, #1
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	89fa      	ldrh	r2, [r7, #14]
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	701a      	strb	r2, [r3, #0]

	return crc;
 8002550:	89fb      	ldrh	r3, [r7, #14]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <countSetBits>:
 *	Set bit(1)의 갯수를 세는 함수
 *	@parm uint32_t i : bits
 *	@retval uint8_t num of set bits
 */
uint8_t countSetBits(uint32_t i)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
     // C or C++: use uint32_t
     i = i - ((i >> 1) & 0x55555555);        // add pairs of bits
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	085b      	lsrs	r3, r3, #1
 8002566:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	607b      	str	r3, [r7, #4]
     i = (i & 0x33333333) + ((i >> 2) & 0x33333333);  // quads
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f003 3233 	and.w	r2, r3, #858993459	@ 0x33333333
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	089b      	lsrs	r3, r3, #2
 800257a:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 800257e:	4413      	add	r3, r2
 8002580:	607b      	str	r3, [r7, #4]
     i = (i + (i >> 4)) & 0x0F0F0F0F;        // groups of 8
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	091a      	lsrs	r2, r3, #4
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 800258e:	607b      	str	r3, [r7, #4]
     return (uint8_t)((i * 0x01010101) >> 24);          // horizontal sum of bytes
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	021b      	lsls	r3, r3, #8
 8002596:	4413      	add	r3, r2
 8002598:	041a      	lsls	r2, r3, #16
 800259a:	4413      	add	r3, r2
 800259c:	0e1b      	lsrs	r3, r3, #24
 800259e:	b2db      	uxtb	r3, r3
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_USART_IsActiveFlag_TXE>:
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025bc:	2b80      	cmp	r3, #128	@ 0x80
 80025be:	bf0c      	ite	eq
 80025c0:	2301      	moveq	r3, #1
 80025c2:	2300      	movne	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <LL_USART_TransmitData8>:
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	460b      	mov	r3, r1
 80025dc:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80025de:	78fa      	ldrb	r2, [r7, #3]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	605a      	str	r2, [r3, #4]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_GPIO_SetOutputPin>:
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	619a      	str	r2, [r3, #24]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <LL_GPIO_ResetOutputPin>:
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	041a      	lsls	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	619a      	str	r2, [r3, #24]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <RC_Initialization>:
 * @brief RC 초기 설정
 * @detail RC 종류에 따라 메모리 설정
 * 			쓰로틀 체크 및 ESC 캘리브레이션 수행
 */
int RC_Initialization(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 8002632:	2101      	movs	r1, #1
 8002634:	4838      	ldr	r0, [pc, #224]	@ (8002718 <RC_Initialization+0xec>)
 8002636:	f7ff ffdb 	bl	80025f0 <LL_GPIO_SetOutputPin>

	// 메모리 설정
	for(int i=0; i<8*sizeof(param.rc.PROTOCOLS); i++)
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	e033      	b.n	80026a8 <RC_Initialization+0x7c>
	{
		if(!(param.rc.PROTOCOLS&(0x1<<i))) continue;
 8002640:	4b36      	ldr	r3, [pc, #216]	@ (800271c <RC_Initialization+0xf0>)
 8002642:	f8b3 307d 	ldrh.w	r3, [r3, #125]	@ 0x7d
 8002646:	b29b      	uxth	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	fa42 f303 	asr.w	r3, r2, r3
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d023      	beq.n	80026a0 <RC_Initialization+0x74>

		switch(i){
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d003      	beq.n	8002666 <RC_Initialization+0x3a>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d00a      	beq.n	800267a <RC_Initialization+0x4e>
 8002664:	e013      	b.n	800268e <RC_Initialization+0x62>
		case PPM:
			RC_Buffer = malloc(PPM_MAX_BUFFER_SIZE*sizeof(uint16_t));
 8002666:	2010      	movs	r0, #16
 8002668:	f00a f924 	bl	800c8b4 <malloc>
 800266c:	4603      	mov	r3, r0
 800266e:	461a      	mov	r2, r3
 8002670:	4b2b      	ldr	r3, [pc, #172]	@ (8002720 <RC_Initialization+0xf4>)
 8002672:	601a      	str	r2, [r3, #0]
			PPM_init();
 8002674:	f7ff faea 	bl	8001c4c <PPM_init>
			break;
 8002678:	e009      	b.n	800268e <RC_Initialization+0x62>
		case SRXL2:
			RC_Buffer = malloc(SRXL_MAX_BUFFER_SIZE*sizeof(uint8_t));
 800267a:	2050      	movs	r0, #80	@ 0x50
 800267c:	f00a f91a 	bl	800c8b4 <malloc>
 8002680:	4603      	mov	r3, r0
 8002682:	461a      	mov	r2, r3
 8002684:	4b26      	ldr	r3, [pc, #152]	@ (8002720 <RC_Initialization+0xf4>)
 8002686:	601a      	str	r2, [r3, #0]
			SRXL2_connect();
 8002688:	f7ff fc0a 	bl	8001ea0 <SRXL2_connect>
			break;
 800268c:	bf00      	nop
		}

		/*
		 * Enable multiple receiver support
		 */
		if(param.rc.OPTIONS&(0x1<<10)) continue;
 800268e:	4b23      	ldr	r3, [pc, #140]	@ (800271c <RC_Initialization+0xf0>)
 8002690:	f8b3 307b 	ldrh.w	r3, [r3, #123]	@ 0x7b
 8002694:	b29b      	uxth	r3, r3
 8002696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800269a:	2b00      	cmp	r3, #0
 800269c:	d008      	beq.n	80026b0 <RC_Initialization+0x84>
 800269e:	e000      	b.n	80026a2 <RC_Initialization+0x76>
		if(!(param.rc.PROTOCOLS&(0x1<<i))) continue;
 80026a0:	bf00      	nop
	for(int i=0; i<8*sizeof(param.rc.PROTOCOLS); i++)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	3301      	adds	r3, #1
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b0f      	cmp	r3, #15
 80026ac:	d9c8      	bls.n	8002640 <RC_Initialization+0x14>
 80026ae:	e000      	b.n	80026b2 <RC_Initialization+0x86>
		else break;
 80026b0:	bf00      	nop
	}

	// 쓰로틀 체크 & ESC 캘리브레이션
	uint32_t previous_time = system_time.time_boot_ms;
 80026b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002724 <RC_Initialization+0xf8>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	60bb      	str	r3, [r7, #8]
	while(1){
		uint8_t flag_cali =  system_time.time_boot_ms - previous_time > 5000;
 80026b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002724 <RC_Initialization+0xf8>)
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c4:	4293      	cmp	r3, r2
 80026c6:	bf8c      	ite	hi
 80026c8:	2301      	movhi	r3, #1
 80026ca:	2300      	movls	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	71fb      	strb	r3, [r7, #7]
		uint8_t retVal = RC_checkThrottle();
 80026d0:	f000 f878 	bl	80027c4 <RC_checkThrottle>
 80026d4:	4603      	mov	r3, r0
 80026d6:	71bb      	strb	r3, [r7, #6]

		// 쓰로틀이 low 인 경우나 신호가 없는 경우
		if(0 == retVal && 0 == flag_cali) break;
 80026d8:	79bb      	ldrb	r3, [r7, #6]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d102      	bne.n	80026e4 <RC_Initialization+0xb8>
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00f      	beq.n	8002704 <RC_Initialization+0xd8>
		else if(-2 == retVal) return retVal;

		BuzzerEnableThrottleHigh();
 80026e4:	f7fe fcc0 	bl	8001068 <BuzzerEnableThrottleHigh>

		// calibration 조건(5s 동안 High)를 만족하지 못하면 while
		if(0 == flag_cali) continue;
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d007      	beq.n	80026fe <RC_Initialization+0xd2>

		// ESC Calibration
		BuzzerDisableThrottleHigh();
 80026ee:	f7fe fcd3 	bl	8001098 <BuzzerDisableThrottleHigh>
		if(RC_enterESCcalibration()==0) break;
 80026f2:	f000 f8f9 	bl	80028e8 <RC_enterESCcalibration>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <RC_Initialization+0xd6>
 80026fc:	e7dc      	b.n	80026b8 <RC_Initialization+0x8c>
		if(0 == flag_cali) continue;
 80026fe:	bf00      	nop
	while(1){
 8002700:	e7da      	b.n	80026b8 <RC_Initialization+0x8c>
		if(RC_enterESCcalibration()==0) break;
 8002702:	bf00      	nop
	}

	LL_GPIO_ResetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 8002704:	2101      	movs	r1, #1
 8002706:	4804      	ldr	r0, [pc, #16]	@ (8002718 <RC_Initialization+0xec>)
 8002708:	f7ff ff80 	bl	800260c <LL_GPIO_ResetOutputPin>

	return 0;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	200002e8 	.word	0x200002e8
 8002720:	20000450 	.word	0x20000450
 8002724:	20000454 	.word	0x20000454

08002728 <RC_GetData>:
 * @retval 0 : 정상 수신
 * @retval -1 : 수신 버퍼 없음
 * @retval -2 : 조종 데이터가 아님
 */
int RC_GetData(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
	int retVal = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	607b      	str	r3, [r7, #4]

	for(int i=0; i<8*sizeof(param.rc.PROTOCOLS); i++)
 8002732:	2300      	movs	r3, #0
 8002734:	603b      	str	r3, [r7, #0]
 8002736:	e027      	b.n	8002788 <RC_GetData+0x60>
	{
		// 모든 프로토콜에 대해 확인하되, 파마리터에서 설정된 것만 받아옴
		if(!(param.rc.PROTOCOLS&(0x1<<i))) continue;
 8002738:	4b20      	ldr	r3, [pc, #128]	@ (80027bc <RC_GetData+0x94>)
 800273a:	f8b3 307d 	ldrh.w	r3, [r3, #125]	@ 0x7d
 800273e:	b29b      	uxth	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	fa42 f303 	asr.w	r3, r2, r3
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d017      	beq.n	8002780 <RC_GetData+0x58>

		switch(i){
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d003      	beq.n	800275e <RC_GetData+0x36>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b08      	cmp	r3, #8
 800275a:	d004      	beq.n	8002766 <RC_GetData+0x3e>
 800275c:	e007      	b.n	800276e <RC_GetData+0x46>
		case PPM:
			retVal = PPM_getControlData();
 800275e:	f7ff fadd 	bl	8001d1c <PPM_getControlData>
 8002762:	6078      	str	r0, [r7, #4]
			break;
 8002764:	e003      	b.n	800276e <RC_GetData+0x46>
		case SRXL2:
			retVal = SRXL2_getControlData();
 8002766:	f7ff fbf7 	bl	8001f58 <SRXL2_getControlData>
 800276a:	6078      	str	r0, [r7, #4]
			break;
 800276c:	bf00      	nop
		}

		/*
		 * Enable multiple receiver support
		 */
		if(param.rc.OPTIONS&(0x1<<10)) continue;
 800276e:	4b13      	ldr	r3, [pc, #76]	@ (80027bc <RC_GetData+0x94>)
 8002770:	f8b3 307b 	ldrh.w	r3, [r3, #123]	@ 0x7b
 8002774:	b29b      	uxth	r3, r3
 8002776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800277a:	2b00      	cmp	r3, #0
 800277c:	d008      	beq.n	8002790 <RC_GetData+0x68>
 800277e:	e000      	b.n	8002782 <RC_GetData+0x5a>
		if(!(param.rc.PROTOCOLS&(0x1<<i))) continue;
 8002780:	bf00      	nop
	for(int i=0; i<8*sizeof(param.rc.PROTOCOLS); i++)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	3301      	adds	r3, #1
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	2b0f      	cmp	r3, #15
 800278c:	d9d4      	bls.n	8002738 <RC_GetData+0x10>
 800278e:	e000      	b.n	8002792 <RC_GetData+0x6a>
		else break;
 8002790:	bf00      	nop
	}

	if(retVal == -1 || retVal ==-2) return retVal;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002798:	d003      	beq.n	80027a2 <RC_GetData+0x7a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f113 0f02 	cmn.w	r3, #2
 80027a0:	d101      	bne.n	80027a6 <RC_GetData+0x7e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	e006      	b.n	80027b4 <RC_GetData+0x8c>
	if(retVal!=0xf2) fsFlag = 0;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2bf2      	cmp	r3, #242	@ 0xf2
 80027aa:	d002      	beq.n	80027b2 <RC_GetData+0x8a>
 80027ac:	4b04      	ldr	r3, [pc, #16]	@ (80027c0 <RC_GetData+0x98>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]

	return 0;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	200002e8 	.word	0x200002e8
 80027c0:	200002e0 	.word	0x200002e0

080027c4 <RC_checkThrottle>:
 * @retval 0 : 쓰로틀 정상
 * @retval -1 : 쓰로틀 비정상
 * @retval -2 : RC 신호 없음
 */
int RC_checkThrottle(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
	uint8_t num = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	71fb      	strb	r3, [r7, #7]
	while(RC_GetData()){
 80027ce:	e002      	b.n	80027d6 <RC_checkThrottle+0x12>
		if(num++ > 1000) return -2;
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	3301      	adds	r3, #1
 80027d4:	71fb      	strb	r3, [r7, #7]
	while(RC_GetData()){
 80027d6:	f7ff ffa7 	bl	8002728 <RC_GetData>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f7      	bne.n	80027d0 <RC_checkThrottle+0xc>
	}

	if(RC_channels.value[param.rc.map.THR]>1050) return -1;
 80027e0:	4b0a      	ldr	r3, [pc, #40]	@ (800280c <RC_checkThrottle+0x48>)
 80027e2:	f893 3129 	ldrb.w	r3, [r3, #297]	@ 0x129
 80027e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002810 <RC_checkThrottle+0x4c>)
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4413      	add	r3, r2
 80027ec:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	f240 421a 	movw	r2, #1050	@ 0x41a
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d902      	bls.n	8002800 <RC_checkThrottle+0x3c>
 80027fa:	f04f 33ff 	mov.w	r3, #4294967295
 80027fe:	e000      	b.n	8002802 <RC_checkThrottle+0x3e>

	return 0;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	200002e8 	.word	0x200002e8
 8002810:	200004c0 	.word	0x200004c0

08002814 <RC_receiveIRQ2>:
 * @parm uint8_t data : packet 1byte
 * @retval 0 : IRQ2 처리 완료
 * @retval 1 : (half_duplex) 송신 패킷임
 */
int RC_receiveIRQ2(const uint16_t data)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	80fb      	strh	r3, [r7, #6]

	for(int i=0; i<8*sizeof(param.rc.PROTOCOLS); i++)
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	e040      	b.n	80028a6 <RC_receiveIRQ2+0x92>
	{
		if(!(param.rc.PROTOCOLS&(0x1<<i))) continue;
 8002824:	4b25      	ldr	r3, [pc, #148]	@ (80028bc <RC_receiveIRQ2+0xa8>)
 8002826:	f8b3 307d 	ldrh.w	r3, [r3, #125]	@ 0x7d
 800282a:	b29b      	uxth	r3, r3
 800282c:	461a      	mov	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	fa42 f303 	asr.w	r3, r2, r3
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d030      	beq.n	800289e <RC_receiveIRQ2+0x8a>

		switch(i){
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d003      	beq.n	800284a <RC_receiveIRQ2+0x36>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2b08      	cmp	r3, #8
 8002846:	d005      	beq.n	8002854 <RC_receiveIRQ2+0x40>
 8002848:	e020      	b.n	800288c <RC_receiveIRQ2+0x78>
		case PPM:
			PPM_readData(data);
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fa21 	bl	8001c94 <PPM_readData>
			break;
 8002852:	e01b      	b.n	800288c <RC_receiveIRQ2+0x78>
		case SRXL2:
			// Half-Duplex에서 송신한 패킷을 무시
			if(RC_rxFlag.half_tx == 1) return 1;
 8002854:	4b1a      	ldr	r3, [pc, #104]	@ (80028c0 <RC_receiveIRQ2+0xac>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <RC_receiveIRQ2+0x52>
 8002862:	2301      	movs	r3, #1
 8002864:	e025      	b.n	80028b2 <RC_receiveIRQ2+0x9e>

			// 모든 바이트를 읽었는지 검사
			if(SRXL2_readByteIRQ2(data) == 0){
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff fd12 	bl	8002294 <SRXL2_readByteIRQ2>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <RC_receiveIRQ2+0x76>
				RC_rxFlag.uart = 1;
 8002876:	4a12      	ldr	r2, [pc, #72]	@ (80028c0 <RC_receiveIRQ2+0xac>)
 8002878:	7813      	ldrb	r3, [r2, #0]
 800287a:	f043 0304 	orr.w	r3, r3, #4
 800287e:	7013      	strb	r3, [r2, #0]
				RC_rxFlag.half_using = 0;
 8002880:	4a0f      	ldr	r2, [pc, #60]	@ (80028c0 <RC_receiveIRQ2+0xac>)
 8002882:	7813      	ldrb	r3, [r2, #0]
 8002884:	f023 0302 	bic.w	r3, r3, #2
 8002888:	7013      	strb	r3, [r2, #0]
			}
			break;
 800288a:	bf00      	nop
		}

		/*
		 * Enable multiple receiver support
		 */
		if(param.rc.OPTIONS&(0x1<<10)) continue;
 800288c:	4b0b      	ldr	r3, [pc, #44]	@ (80028bc <RC_receiveIRQ2+0xa8>)
 800288e:	f8b3 307b 	ldrh.w	r3, [r3, #123]	@ 0x7b
 8002892:	b29b      	uxth	r3, r3
 8002894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <RC_receiveIRQ2+0x9a>
 800289c:	e000      	b.n	80028a0 <RC_receiveIRQ2+0x8c>
		if(!(param.rc.PROTOCOLS&(0x1<<i))) continue;
 800289e:	bf00      	nop
	for(int i=0; i<8*sizeof(param.rc.PROTOCOLS); i++)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	3301      	adds	r3, #1
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b0f      	cmp	r3, #15
 80028aa:	d9bb      	bls.n	8002824 <RC_receiveIRQ2+0x10>
 80028ac:	e000      	b.n	80028b0 <RC_receiveIRQ2+0x9c>
		else break;
 80028ae:	bf00      	nop
	}

	return 0;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	200002e8 	.word	0x200002e8
 80028c0:	2000044c 	.word	0x2000044c

080028c4 <RC_isBufferInit>:
 *
 * @parm None
 * @retval 0 : 설정됨
 * @retval -1 : 설정되지 않음
 */
int RC_isBufferInit(void){
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
	if(RC_Buffer == 0) return -1;
 80028c8:	4b06      	ldr	r3, [pc, #24]	@ (80028e4 <RC_isBufferInit+0x20>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d102      	bne.n	80028d6 <RC_isBufferInit+0x12>
 80028d0:	f04f 33ff 	mov.w	r3, #4294967295
 80028d4:	e000      	b.n	80028d8 <RC_isBufferInit+0x14>
	return 0;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20000450 	.word	0x20000450

080028e8 <RC_enterESCcalibration>:
 *
 * @parm None
 * @retval -2 : 조종기 이상
 */
int RC_enterESCcalibration()
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
	while(1)
	{
		uint8_t num = 0;
 80028ee:	2300      	movs	r3, #0
 80028f0:	71fb      	strb	r3, [r7, #7]
		while(RC_GetData()){
 80028f2:	e002      	b.n	80028fa <RC_enterESCcalibration+0x12>
			if(num++ > 1000) return -2;
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	3301      	adds	r3, #1
 80028f8:	71fb      	strb	r3, [r7, #7]
		while(RC_GetData()){
 80028fa:	f7ff ff15 	bl	8002728 <RC_GetData>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f7      	bne.n	80028f4 <RC_enterESCcalibration+0xc>
		}

		if(RC_channels.value[param.rc.map.THR] > 1800){
 8002904:	4b0c      	ldr	r3, [pc, #48]	@ (8002938 <RC_enterESCcalibration+0x50>)
 8002906:	f893 3129 	ldrb.w	r3, [r3, #297]	@ 0x129
 800290a:	4a0c      	ldr	r2, [pc, #48]	@ (800293c <RC_enterESCcalibration+0x54>)
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	4413      	add	r3, r2
 8002910:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002914:	b29b      	uxth	r3, r3
 8002916:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 800291a:	d903      	bls.n	8002924 <RC_enterESCcalibration+0x3c>
			SERVO_doCalibrate(1);
 800291c:	2001      	movs	r0, #1
 800291e:	f000 f9bd 	bl	8002c9c <SERVO_doCalibrate>
			continue;
 8002922:	e003      	b.n	800292c <RC_enterESCcalibration+0x44>
		}
		SERVO_doCalibrate(0);
 8002924:	2000      	movs	r0, #0
 8002926:	f000 f9b9 	bl	8002c9c <SERVO_doCalibrate>
		break;
 800292a:	e000      	b.n	800292e <RC_enterESCcalibration+0x46>
	{
 800292c:	e7df      	b.n	80028ee <RC_enterESCcalibration+0x6>
	}
	return 0;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	200002e8 	.word	0x200002e8
 800293c:	200004c0 	.word	0x200004c0

08002940 <RC_setFailsafe>:
 * @brief Failsafe 모드로 진입
 *
 * @retval 0 : Failsafe 해제됨
 */
int RC_setFailsafe(uint16_t protocol)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	80fb      	strh	r3, [r7, #6]
	// 만약 수신기가 여러 개인 경우, fs를 발동하지 않음.
	if(param.rc.OPTIONS&(0x1<<10)){
 800294a:	4b0a      	ldr	r3, [pc, #40]	@ (8002974 <RC_setFailsafe+0x34>)
 800294c:	f8b3 307b 	ldrh.w	r3, [r3, #123]	@ 0x7b
 8002950:	b29b      	uxth	r3, r3
 8002952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <RC_setFailsafe+0x1e>
		// (추가) 수신기 하나에서 FS 임을 알림
		return 0;
 800295a:	2300      	movs	r3, #0
 800295c:	e003      	b.n	8002966 <RC_setFailsafe+0x26>
	}

	fsFlag = 1;
 800295e:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <RC_setFailsafe+0x38>)
 8002960:	2201      	movs	r2, #1
 8002962:	701a      	strb	r2, [r3, #0]

	return 0xf2;
 8002964:	23f2      	movs	r3, #242	@ 0xf2
}
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	200002e8 	.word	0x200002e8
 8002978:	200002e0 	.word	0x200002e0

0800297c <RC_halfDuplex_Transmit>:
 * @parm uint8_t len : sizeof(data)
 * @retval 0 : 송신 완료.
 * @retval -1 : 송신 실패.
 */
int RC_halfDuplex_Transmit(uint8_t *data, uint8_t len)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	70fb      	strb	r3, [r7, #3]
	if(RC_rxFlag.half_using == 1) return -1;
 8002988:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <RC_halfDuplex_Transmit+0x7c>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <RC_halfDuplex_Transmit+0x20>
 8002996:	f04f 33ff 	mov.w	r3, #4294967295
 800299a:	e028      	b.n	80029ee <RC_halfDuplex_Transmit+0x72>

	RC_rxFlag.half_using = 1;
 800299c:	4a16      	ldr	r2, [pc, #88]	@ (80029f8 <RC_halfDuplex_Transmit+0x7c>)
 800299e:	7813      	ldrb	r3, [r2, #0]
 80029a0:	f043 0302 	orr.w	r3, r3, #2
 80029a4:	7013      	strb	r3, [r2, #0]
	RC_rxFlag.half_tx = 1;
 80029a6:	4a14      	ldr	r2, [pc, #80]	@ (80029f8 <RC_halfDuplex_Transmit+0x7c>)
 80029a8:	7813      	ldrb	r3, [r2, #0]
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	7013      	strb	r3, [r2, #0]

	for(int i=0; i<len; i++){
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	e011      	b.n	80029da <RC_halfDuplex_Transmit+0x5e>
		while(!LL_USART_IsActiveFlag_TXE(USART1));
 80029b6:	bf00      	nop
 80029b8:	4810      	ldr	r0, [pc, #64]	@ (80029fc <RC_halfDuplex_Transmit+0x80>)
 80029ba:	f7ff fdf7 	bl	80025ac <LL_USART_IsActiveFlag_TXE>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f9      	beq.n	80029b8 <RC_halfDuplex_Transmit+0x3c>
		LL_USART_TransmitData8(USART1, data[i]);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	4619      	mov	r1, r3
 80029ce:	480b      	ldr	r0, [pc, #44]	@ (80029fc <RC_halfDuplex_Transmit+0x80>)
 80029d0:	f7ff fdff 	bl	80025d2 <LL_USART_TransmitData8>
	for(int i=0; i<len; i++){
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	3301      	adds	r3, #1
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	78fb      	ldrb	r3, [r7, #3]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	429a      	cmp	r2, r3
 80029e0:	dbe9      	blt.n	80029b6 <RC_halfDuplex_Transmit+0x3a>
	}

	RC_rxFlag.half_tx = 0;
 80029e2:	4a05      	ldr	r2, [pc, #20]	@ (80029f8 <RC_halfDuplex_Transmit+0x7c>)
 80029e4:	7813      	ldrb	r3, [r2, #0]
 80029e6:	f023 0301 	bic.w	r3, r3, #1
 80029ea:	7013      	strb	r3, [r2, #0]
	return 0;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	2000044c 	.word	0x2000044c
 80029fc:	40011000 	.word	0x40011000

08002a00 <map>:
 * @parm uint16_t in_max : x의 최댓값
 * @parm uint16_t out_min : x의 최솟값
 * @parm uint16_t out_max : x의 최댓값
 * @retVal uint16_t : 변환 값
 */
uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 8002a00:	b490      	push	{r4, r7}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4604      	mov	r4, r0
 8002a08:	4608      	mov	r0, r1
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4623      	mov	r3, r4
 8002a10:	80fb      	strh	r3, [r7, #6]
 8002a12:	4603      	mov	r3, r0
 8002a14:	80bb      	strh	r3, [r7, #4]
 8002a16:	460b      	mov	r3, r1
 8002a18:	807b      	strh	r3, [r7, #2]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	803b      	strh	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002a1e:	88fa      	ldrh	r2, [r7, #6]
 8002a20:	88bb      	ldrh	r3, [r7, #4]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	8a39      	ldrh	r1, [r7, #16]
 8002a26:	883a      	ldrh	r2, [r7, #0]
 8002a28:	1a8a      	subs	r2, r1, r2
 8002a2a:	fb03 f202 	mul.w	r2, r3, r2
 8002a2e:	8879      	ldrh	r1, [r7, #2]
 8002a30:	88bb      	ldrh	r3, [r7, #4]
 8002a32:	1acb      	subs	r3, r1, r3
 8002a34:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	883b      	ldrh	r3, [r7, #0]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	b29b      	uxth	r3, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc90      	pop	{r4, r7}
 8002a48:	4770      	bx	lr

08002a4a <LL_TIM_EnableCounter>:
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f043 0201 	orr.w	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	601a      	str	r2, [r3, #0]
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <LL_TIM_IsEnabledCounter>:
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <LL_TIM_IsEnabledCounter+0x18>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <LL_TIM_IsEnabledCounter+0x1a>
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <LL_TIM_SetPrescaler>:
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <LL_TIM_SetAutoReload>:
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_TIM_CC_EnableChannel>:
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1a      	ldr	r2, [r3, #32]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	621a      	str	r2, [r3, #32]
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <LL_TIM_CC_DisableChannel>:
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1a      	ldr	r2, [r3, #32]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	401a      	ands	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	621a      	str	r2, [r3, #32]
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	f043 0201 	orr.w	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	615a      	str	r2, [r3, #20]
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
	...

08002b30 <SERVO_Initialization>:
 * @detail 출력 프로토콜, 주기 변경
 * @parm none
 * @retval none
 */
int SERVO_Initialization(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
	// PARAM_SERVO* servo = &paramServo;

	LL_TIM_EnableCounter(TIM1);
 8002b34:	4814      	ldr	r0, [pc, #80]	@ (8002b88 <SERVO_Initialization+0x58>)
 8002b36:	f7ff ff88 	bl	8002a4a <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(TIM3);
 8002b3a:	4814      	ldr	r0, [pc, #80]	@ (8002b8c <SERVO_Initialization+0x5c>)
 8002b3c:	f7ff ff85 	bl	8002a4a <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(TIM5);
 8002b40:	4813      	ldr	r0, [pc, #76]	@ (8002b90 <SERVO_Initialization+0x60>)
 8002b42:	f7ff ff82 	bl	8002a4a <LL_TIM_EnableCounter>

	if(!(LL_TIM_IsEnabledCounter(TIM1) &&
 8002b46:	4810      	ldr	r0, [pc, #64]	@ (8002b88 <SERVO_Initialization+0x58>)
 8002b48:	f7ff ff8f 	bl	8002a6a <LL_TIM_IsEnabledCounter>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d011      	beq.n	8002b76 <SERVO_Initialization+0x46>
			LL_TIM_IsEnabledCounter(TIM3) &&
 8002b52:	480e      	ldr	r0, [pc, #56]	@ (8002b8c <SERVO_Initialization+0x5c>)
 8002b54:	f7ff ff89 	bl	8002a6a <LL_TIM_IsEnabledCounter>
 8002b58:	4603      	mov	r3, r0
	if(!(LL_TIM_IsEnabledCounter(TIM1) &&
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00b      	beq.n	8002b76 <SERVO_Initialization+0x46>
			LL_TIM_IsEnabledCounter(TIM4) &&
 8002b5e:	480d      	ldr	r0, [pc, #52]	@ (8002b94 <SERVO_Initialization+0x64>)
 8002b60:	f7ff ff83 	bl	8002a6a <LL_TIM_IsEnabledCounter>
 8002b64:	4603      	mov	r3, r0
			LL_TIM_IsEnabledCounter(TIM3) &&
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <SERVO_Initialization+0x46>
			LL_TIM_IsEnabledCounter(TIM5)
 8002b6a:	4809      	ldr	r0, [pc, #36]	@ (8002b90 <SERVO_Initialization+0x60>)
 8002b6c:	f7ff ff7d 	bl	8002a6a <LL_TIM_IsEnabledCounter>
 8002b70:	4603      	mov	r3, r0
	if(!(LL_TIM_IsEnabledCounter(TIM1) &&
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d102      	bne.n	8002b7c <SERVO_Initialization+0x4c>
			)) return -1;
 8002b76:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7a:	e002      	b.n	8002b82 <SERVO_Initialization+0x52>

	SERVO_doDisarm();
 8002b7c:	f000 f844 	bl	8002c08 <SERVO_doDisarm>

	return 0;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40010000 	.word	0x40010000
 8002b8c:	40000400 	.word	0x40000400
 8002b90:	40000c00 	.word	0x40000c00
 8002b94:	40000800 	.word	0x40000800

08002b98 <SERVO_doArm>:
 * @brief 모든 채널 출력 활성화
 * @parm none
 * @retval none
 */
void SERVO_doArm(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
	configurePWM(param.servo.RATE);
 8002b9e:	4b17      	ldr	r3, [pc, #92]	@ (8002bfc <SERVO_doArm+0x64>)
 8002ba0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 f93c 	bl	8002e24 <configurePWM>

	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002bac:	2300      	movs	r3, #0
 8002bae:	71fb      	strb	r3, [r7, #7]
 8002bb0:	e014      	b.n	8002bdc <SERVO_doArm+0x44>
	{
	    // 해당 서보 채널이 활성화되어 있지 않으면 다음으로 건너뜀.
		if(!((param.servo.GPIO_MASK >> i)&0x1)){
 8002bb2:	4b12      	ldr	r3, [pc, #72]	@ (8002bfc <SERVO_doArm+0x64>)
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d007      	beq.n	8002bd4 <SERVO_doArm+0x3c>
			continue;
		}

		doArm2Channel(i+1, 1);
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2101      	movs	r1, #1
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 f89b 	bl	8002d08 <doArm2Channel>
 8002bd2:	e000      	b.n	8002bd6 <SERVO_doArm+0x3e>
			continue;
 8002bd4:	bf00      	nop
	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	71fb      	strb	r3, [r7, #7]
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	2b0b      	cmp	r3, #11
 8002be0:	d9e7      	bls.n	8002bb2 <SERVO_doArm+0x1a>
	}

	TIM5->CNT = 0;
 8002be2:	4b07      	ldr	r3, [pc, #28]	@ (8002c00 <SERVO_doArm+0x68>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	625a      	str	r2, [r3, #36]	@ 0x24
	LL_TIM_GenerateEvent_UPDATE(TIM1);
 8002be8:	4806      	ldr	r0, [pc, #24]	@ (8002c04 <SERVO_doArm+0x6c>)
 8002bea:	f7ff ff90 	bl	8002b0e <LL_TIM_GenerateEvent_UPDATE>
	LL_TIM_GenerateEvent_UPDATE(TIM5);
 8002bee:	4804      	ldr	r0, [pc, #16]	@ (8002c00 <SERVO_doArm+0x68>)
 8002bf0:	f7ff ff8d 	bl	8002b0e <LL_TIM_GenerateEvent_UPDATE>
	return;
 8002bf4:	bf00      	nop
}
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	200002e8 	.word	0x200002e8
 8002c00:	40000c00 	.word	0x40000c00
 8002c04:	40010000 	.word	0x40010000

08002c08 <SERVO_doDisarm>:
 * @detail 출력 프로토콜 따라 수행
 * @parm none
 * @retval none
 */
void SERVO_doDisarm(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
	configurePWM(param.servo.RATE);
 8002c0e:	4b10      	ldr	r3, [pc, #64]	@ (8002c50 <SERVO_doDisarm+0x48>)
 8002c10:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 f904 	bl	8002e24 <configurePWM>

	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	71fb      	strb	r3, [r7, #7]
 8002c20:	e009      	b.n	8002c36 <SERVO_doDisarm+0x2e>
	{
		doArm2Channel(i+1, 0);
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	3301      	adds	r3, #1
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 f86c 	bl	8002d08 <doArm2Channel>
	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	3301      	adds	r3, #1
 8002c34:	71fb      	strb	r3, [r7, #7]
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	2b0b      	cmp	r3, #11
 8002c3a:	d9f2      	bls.n	8002c22 <SERVO_doDisarm+0x1a>
	}

	LL_TIM_GenerateEvent_UPDATE(TIM1);
 8002c3c:	4805      	ldr	r0, [pc, #20]	@ (8002c54 <SERVO_doDisarm+0x4c>)
 8002c3e:	f7ff ff66 	bl	8002b0e <LL_TIM_GenerateEvent_UPDATE>
	LL_TIM_GenerateEvent_UPDATE(TIM5);
 8002c42:	4805      	ldr	r0, [pc, #20]	@ (8002c58 <SERVO_doDisarm+0x50>)
 8002c44:	f7ff ff63 	bl	8002b0e <LL_TIM_GenerateEvent_UPDATE>
	return;
 8002c48:	bf00      	nop
}
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	200002e8 	.word	0x200002e8
 8002c54:	40010000 	.word	0x40010000
 8002c58:	40000c00 	.word	0x40000c00

08002c5c <SERVO_control>:
 * @detail 출력 프로토콜 따라 수행
 * @parm none
 * @retval none
 */
void SERVO_control(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
	calculateServoOutput();
 8002c60:	f000 f938 	bl	8002ed4 <calculateServoOutput>

	setPWM();
 8002c64:	f000 f96e 	bl	8002f44 <setPWM>
	return;
 8002c68:	bf00      	nop
}
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <SERVO_setFailsafe>:
/*
 * @brief Fail-Safe 동작
 * @retval none
 */
void SERVO_setFailsafe(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
	setPWM2Channel(1, 1000);
 8002c70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002c74:	2001      	movs	r0, #1
 8002c76:	f000 f993 	bl	8002fa0 <setPWM2Channel>
	setPWM2Channel(2, 1500);
 8002c7a:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8002c7e:	2002      	movs	r0, #2
 8002c80:	f000 f98e 	bl	8002fa0 <setPWM2Channel>
	setPWM2Channel(3, 1500);
 8002c84:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8002c88:	2003      	movs	r0, #3
 8002c8a:	f000 f989 	bl	8002fa0 <setPWM2Channel>
	setPWM2Channel(4, 1500);
 8002c8e:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8002c92:	2004      	movs	r0, #4
 8002c94:	f000 f984 	bl	8002fa0 <setPWM2Channel>
	return;
 8002c98:	bf00      	nop
}
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <SERVO_doCalibrate>:
 * 				0 : high 신호 입력
 * 				1 : low 신호 입력
 * @retval none
 */
void SERVO_doCalibrate(uint8_t mode)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	71fb      	strb	r3, [r7, #7]
	uint8_t channels[] = {1,2,3,4};
 8002ca6:	4b17      	ldr	r3, [pc, #92]	@ (8002d04 <SERVO_doCalibrate+0x68>)
 8002ca8:	60fb      	str	r3, [r7, #12]
	if(mode)
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d012      	beq.n	8002cd6 <SERVO_doCalibrate+0x3a>
	{
		configurePWM(50);
 8002cb0:	2032      	movs	r0, #50	@ 0x32
 8002cb2:	f000 f8b7 	bl	8002e24 <configurePWM>

		doArm2Channels(&channels[0], sizeof(channels), 1);
 8002cb6:	f107 030c 	add.w	r3, r7, #12
 8002cba:	2201      	movs	r2, #1
 8002cbc:	2104      	movs	r1, #4
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 f88e 	bl	8002de0 <doArm2Channels>
		setPWM2Channels(&channels[0], sizeof(channels), 2000);
 8002cc4:	f107 030c 	add.w	r3, r7, #12
 8002cc8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002ccc:	2104      	movs	r1, #4
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 f9c6 	bl	8003060 <setPWM2Channels>
	{
		setPWM2Channels(&channels[0], sizeof(channels), 1000);
		HAL_Delay(1000);
		doArm2Channels(&channels[0], sizeof(channels), 0);
	}
	return;
 8002cd4:	e013      	b.n	8002cfe <SERVO_doCalibrate+0x62>
		setPWM2Channels(&channels[0], sizeof(channels), 1000);
 8002cd6:	f107 030c 	add.w	r3, r7, #12
 8002cda:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002cde:	2104      	movs	r1, #4
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 f9bd 	bl	8003060 <setPWM2Channels>
		HAL_Delay(1000);
 8002ce6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cea:	f002 f869 	bl	8004dc0 <HAL_Delay>
		doArm2Channels(&channels[0], sizeof(channels), 0);
 8002cee:	f107 030c 	add.w	r3, r7, #12
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2104      	movs	r1, #4
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 f872 	bl	8002de0 <doArm2Channels>
	return;
 8002cfc:	bf00      	nop
}
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	04030201 	.word	0x04030201

08002d08 <doArm2Channel>:
 * 					1 : disable
 * @retval 0 : 설정됨
 * @retval -1 : ch 범위 오류
 */
int doArm2Channel(uint8_t servoCh, uint8_t state)
{
 8002d08:	b5b0      	push	{r4, r5, r7, lr}
 8002d0a:	b08a      	sub	sp, #40	@ 0x28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	460a      	mov	r2, r1
 8002d12:	71fb      	strb	r3, [r7, #7]
 8002d14:	4613      	mov	r3, r2
 8002d16:	71bb      	strb	r3, [r7, #6]
	if(servoCh<1 || servoCh>12) return -1;
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <doArm2Channel+0x1c>
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	2b0c      	cmp	r3, #12
 8002d22:	d902      	bls.n	8002d2a <doArm2Channel+0x22>
 8002d24:	f04f 33ff 	mov.w	r3, #4294967295
 8002d28:	e051      	b.n	8002dce <doArm2Channel+0xc6>
	const TIM_TypeDef* timerArr[] = {
 8002d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd8 <doArm2Channel+0xd0>)
 8002d2c:	f107 0408 	add.w	r4, r7, #8
 8002d30:	461d      	mov	r5, r3
 8002d32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d36:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002d3a:	e884 0003 	stmia.w	r4, {r0, r1}
			0, TIM1, 0, TIM3, TIM4, TIM5
	};

	// map에서 상위 비트로 타이머 선택
	TIM_TypeDef* timer = (TIM_TypeDef*)timerArr[SERVO_TIMER_MAP[servoCh-1]>>4];
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	4a26      	ldr	r2, [pc, #152]	@ (8002ddc <doArm2Channel+0xd4>)
 8002d44:	5cd3      	ldrb	r3, [r2, r3]
 8002d46:	091b      	lsrs	r3, r3, #4
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	3328      	adds	r3, #40	@ 0x28
 8002d4e:	443b      	add	r3, r7
 8002d50:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002d54:	623b      	str	r3, [r7, #32]

	// map에서 하위 비트로 채널 선택
	uint32_t ch;
	switch(SERVO_TIMER_MAP[servoCh-1]&0x0F){
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	4a20      	ldr	r2, [pc, #128]	@ (8002ddc <doArm2Channel+0xd4>)
 8002d5c:	5cd3      	ldrb	r3, [r2, r3]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	3b01      	subs	r3, #1
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d819      	bhi.n	8002d9c <doArm2Channel+0x94>
 8002d68:	a201      	add	r2, pc, #4	@ (adr r2, 8002d70 <doArm2Channel+0x68>)
 8002d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6e:	bf00      	nop
 8002d70:	08002d81 	.word	0x08002d81
 8002d74:	08002d87 	.word	0x08002d87
 8002d78:	08002d8d 	.word	0x08002d8d
 8002d7c:	08002d95 	.word	0x08002d95
	case 1: ch = LL_TIM_CHANNEL_CH1; break;
 8002d80:	2301      	movs	r3, #1
 8002d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d84:	e00d      	b.n	8002da2 <doArm2Channel+0x9a>
	case 2: ch = LL_TIM_CHANNEL_CH2; break;
 8002d86:	2310      	movs	r3, #16
 8002d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d8a:	e00a      	b.n	8002da2 <doArm2Channel+0x9a>
	case 3: ch = LL_TIM_CHANNEL_CH3; break;
 8002d8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d92:	e006      	b.n	8002da2 <doArm2Channel+0x9a>
	case 4: ch = LL_TIM_CHANNEL_CH4; break;
 8002d94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d9a:	e002      	b.n	8002da2 <doArm2Channel+0x9a>
	default: ch = 0; break;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da0:	bf00      	nop
	}

	if(timer&&ch){
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d011      	beq.n	8002dcc <doArm2Channel+0xc4>
 8002da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00e      	beq.n	8002dcc <doArm2Channel+0xc4>
		if(state == 1) LL_TIM_CC_EnableChannel(timer, ch);
 8002dae:	79bb      	ldrb	r3, [r7, #6]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d104      	bne.n	8002dbe <doArm2Channel+0xb6>
 8002db4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002db6:	6a38      	ldr	r0, [r7, #32]
 8002db8:	f7ff fe86 	bl	8002ac8 <LL_TIM_CC_EnableChannel>
 8002dbc:	e006      	b.n	8002dcc <doArm2Channel+0xc4>
		else if(state == 0) LL_TIM_CC_DisableChannel(timer, ch);
 8002dbe:	79bb      	ldrb	r3, [r7, #6]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d103      	bne.n	8002dcc <doArm2Channel+0xc4>
 8002dc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dc6:	6a38      	ldr	r0, [r7, #32]
 8002dc8:	f7ff fe8f 	bl	8002aea <LL_TIM_CC_DisableChannel>
	}
	return 0;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3728      	adds	r7, #40	@ 0x28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	0800f1a8 	.word	0x0800f1a8
 8002ddc:	0800f248 	.word	0x0800f248

08002de0 <doArm2Channels>:
 * 					0 : enable
 * 					1 : disable
 * @retval 0 : 설정됨
 */
int doArm2Channels(uint8_t *pCh, uint8_t len, uint8_t state)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	70fb      	strb	r3, [r7, #3]
 8002dec:	4613      	mov	r3, r2
 8002dee:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i=0; i<len; i++)
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]
 8002df4:	e00d      	b.n	8002e12 <doArm2Channels+0x32>
	{
		uint8_t ch = pCh[i];
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	73bb      	strb	r3, [r7, #14]
		doArm2Channel(ch, state);
 8002e00:	78ba      	ldrb	r2, [r7, #2]
 8002e02:	7bbb      	ldrb	r3, [r7, #14]
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff ff7e 	bl	8002d08 <doArm2Channel>
	for(uint8_t i=0; i<len; i++)
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]
 8002e12:	7bfa      	ldrb	r2, [r7, #15]
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d3ed      	bcc.n	8002df6 <doArm2Channels+0x16>
	}
	return 0;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <configurePWM>:
 * @parm uint16_t hz (in 50-490)
 * @retval 0 : 설정됨
 * @retval 1 : 주파수 범위 오설정
 */
uint8_t configurePWM(uint16_t hz)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	80fb      	strh	r3, [r7, #6]
	if(hz>490 || hz<50) return 1;
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	f5b3 7ff5 	cmp.w	r3, #490	@ 0x1ea
 8002e34:	d802      	bhi.n	8002e3c <configurePWM+0x18>
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	2b31      	cmp	r3, #49	@ 0x31
 8002e3a:	d801      	bhi.n	8002e40 <configurePWM+0x1c>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e03a      	b.n	8002eb6 <configurePWM+0x92>

	// (추가) PPM 입력이 활성화 되어 있으면 50Hz 고정하도록
	LL_TIM_SetAutoReload(TIM1, 1000000/hz-1);
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec0 <configurePWM+0x9c>)
 8002e44:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	481d      	ldr	r0, [pc, #116]	@ (8002ec4 <configurePWM+0xa0>)
 8002e4e:	f7ff fe2d 	bl	8002aac <LL_TIM_SetAutoReload>
	LL_TIM_SetAutoReload(TIM3, 1000000/hz-1);
 8002e52:	88fb      	ldrh	r3, [r7, #6]
 8002e54:	4a1a      	ldr	r2, [pc, #104]	@ (8002ec0 <configurePWM+0x9c>)
 8002e56:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	481a      	ldr	r0, [pc, #104]	@ (8002ec8 <configurePWM+0xa4>)
 8002e60:	f7ff fe24 	bl	8002aac <LL_TIM_SetAutoReload>
	LL_TIM_SetAutoReload(TIM4, 1000000/hz-1);
 8002e64:	88fb      	ldrh	r3, [r7, #6]
 8002e66:	4a16      	ldr	r2, [pc, #88]	@ (8002ec0 <configurePWM+0x9c>)
 8002e68:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4816      	ldr	r0, [pc, #88]	@ (8002ecc <configurePWM+0xa8>)
 8002e72:	f7ff fe1b 	bl	8002aac <LL_TIM_SetAutoReload>
	LL_TIM_SetAutoReload(TIM5, 1000000/hz-1);
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	4a11      	ldr	r2, [pc, #68]	@ (8002ec0 <configurePWM+0x9c>)
 8002e7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	4619      	mov	r1, r3
 8002e82:	4813      	ldr	r0, [pc, #76]	@ (8002ed0 <configurePWM+0xac>)
 8002e84:	f7ff fe12 	bl	8002aac <LL_TIM_SetAutoReload>

	LL_TIM_SetPrescaler(TIM1, 168-1);
 8002e88:	21a7      	movs	r1, #167	@ 0xa7
 8002e8a:	480e      	ldr	r0, [pc, #56]	@ (8002ec4 <configurePWM+0xa0>)
 8002e8c:	f7ff fe00 	bl	8002a90 <LL_TIM_SetPrescaler>
	LL_TIM_SetPrescaler(TIM3, 84-1);
 8002e90:	2153      	movs	r1, #83	@ 0x53
 8002e92:	480d      	ldr	r0, [pc, #52]	@ (8002ec8 <configurePWM+0xa4>)
 8002e94:	f7ff fdfc 	bl	8002a90 <LL_TIM_SetPrescaler>
	LL_TIM_SetPrescaler(TIM4, 84-1);
 8002e98:	2153      	movs	r1, #83	@ 0x53
 8002e9a:	480c      	ldr	r0, [pc, #48]	@ (8002ecc <configurePWM+0xa8>)
 8002e9c:	f7ff fdf8 	bl	8002a90 <LL_TIM_SetPrescaler>
	LL_TIM_SetPrescaler(TIM5, 84-1);
 8002ea0:	2153      	movs	r1, #83	@ 0x53
 8002ea2:	480b      	ldr	r0, [pc, #44]	@ (8002ed0 <configurePWM+0xac>)
 8002ea4:	f7ff fdf4 	bl	8002a90 <LL_TIM_SetPrescaler>

	LL_TIM_GenerateEvent_UPDATE(TIM1);
 8002ea8:	4806      	ldr	r0, [pc, #24]	@ (8002ec4 <configurePWM+0xa0>)
 8002eaa:	f7ff fe30 	bl	8002b0e <LL_TIM_GenerateEvent_UPDATE>
	LL_TIM_GenerateEvent_UPDATE(TIM5);
 8002eae:	4808      	ldr	r0, [pc, #32]	@ (8002ed0 <configurePWM+0xac>)
 8002eb0:	f7ff fe2d 	bl	8002b0e <LL_TIM_GenerateEvent_UPDATE>

	return 0;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	000f4240 	.word	0x000f4240
 8002ec4:	40010000 	.word	0x40010000
 8002ec8:	40000400 	.word	0x40000400
 8002ecc:	40000800 	.word	0x40000800
 8002ed0:	40000c00 	.word	0x40000c00

08002ed4 <calculateServoOutput>:
 * @detail
 * @parm none
 * @retval none
 */
void calculateServoOutput(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
	servo_output_raw.time_usec = system_time.time_boot_ms;
 8002eda:	4b16      	ldr	r3, [pc, #88]	@ (8002f34 <calculateServoOutput+0x60>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	4a16      	ldr	r2, [pc, #88]	@ (8002f38 <calculateServoOutput+0x64>)
 8002ee0:	6013      	str	r3, [r2, #0]

	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	71fb      	strb	r3, [r7, #7]
 8002ee6:	e01b      	b.n	8002f20 <calculateServoOutput+0x4c>
	{
		// 해당 서보 채널이 활성화되어 있지 않으면 다음으로 건너뜀.
		if(!((param.servo.GPIO_MASK >> i)&0x1)){
 8002ee8:	4b14      	ldr	r3, [pc, #80]	@ (8002f3c <calculateServoOutput+0x68>)
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00e      	beq.n	8002f18 <calculateServoOutput+0x44>
			continue;
		}

		servo_output_raw.servo_raw[i] = RC_channels.value[i];
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	79fa      	ldrb	r2, [r7, #7]
 8002efe:	4910      	ldr	r1, [pc, #64]	@ (8002f40 <calculateServoOutput+0x6c>)
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	440b      	add	r3, r1
 8002f04:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002f08:	b298      	uxth	r0, r3
 8002f0a:	490b      	ldr	r1, [pc, #44]	@ (8002f38 <calculateServoOutput+0x64>)
 8002f0c:	0053      	lsls	r3, r2, #1
 8002f0e:	440b      	add	r3, r1
 8002f10:	4602      	mov	r2, r0
 8002f12:	f8a3 2005 	strh.w	r2, [r3, #5]
 8002f16:	e000      	b.n	8002f1a <calculateServoOutput+0x46>
			continue;
 8002f18:	bf00      	nop
	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	71fb      	strb	r3, [r7, #7]
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	2b0b      	cmp	r3, #11
 8002f24:	d9e0      	bls.n	8002ee8 <calculateServoOutput+0x14>
		// servo_output_raw.servo_raw[i] = scaled_imu + RC_channels 를 기반으로 요리조리 계산해서 결정.
	}

	return;
 8002f26:	bf00      	nop
}
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	20000454 	.word	0x20000454
 8002f38:	20000498 	.word	0x20000498
 8002f3c:	200002e8 	.word	0x200002e8
 8002f40:	200004c0 	.word	0x200004c0

08002f44 <setPWM>:
 * @detail
 * @parm none
 * @retval none
 */
void setPWM(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	71fb      	strb	r3, [r7, #7]
 8002f4e:	e01b      	b.n	8002f88 <setPWM+0x44>
	{
		// 해당 서보 채널이 활성화되어 있지 않으면 다음으로 건너뜀.
		if(!((param.servo.GPIO_MASK >> i)&0x1)){
 8002f50:	4b11      	ldr	r3, [pc, #68]	@ (8002f98 <setPWM+0x54>)
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00e      	beq.n	8002f80 <setPWM+0x3c>
			continue;
		}
		setPWM2Channel(i+1, servo_output_raw.servo_raw[i]);
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	3301      	adds	r3, #1
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	490c      	ldr	r1, [pc, #48]	@ (8002f9c <setPWM+0x58>)
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	440b      	add	r3, r1
 8002f70:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	4619      	mov	r1, r3
 8002f78:	4610      	mov	r0, r2
 8002f7a:	f000 f811 	bl	8002fa0 <setPWM2Channel>
 8002f7e:	e000      	b.n	8002f82 <setPWM+0x3e>
			continue;
 8002f80:	bf00      	nop
	for(uint8_t i=0; i<SERVO_CHANNEL_MAX; i++)
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	3301      	adds	r3, #1
 8002f86:	71fb      	strb	r3, [r7, #7]
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	2b0b      	cmp	r3, #11
 8002f8c:	d9e0      	bls.n	8002f50 <setPWM+0xc>
	}
	return;
 8002f8e:	bf00      	nop
}
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	200002e8 	.word	0x200002e8
 8002f9c:	20000498 	.word	0x20000498

08002fa0 <setPWM2Channel>:
 * @parm uint8_t ch (in 1-12)
 * @parm uint16_t value (in 1000-2000)
 * @retval 0
 */
int setPWM2Channel(uint8_t ch, uint16_t value)
{
 8002fa0:	b4b0      	push	{r4, r5, r7}
 8002fa2:	b08b      	sub	sp, #44	@ 0x2c
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	460a      	mov	r2, r1
 8002faa:	71fb      	strb	r3, [r7, #7]
 8002fac:	4613      	mov	r3, r2
 8002fae:	80bb      	strh	r3, [r7, #4]
	if(ch<1 || ch>12) return -1;
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <setPWM2Channel+0x1c>
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	2b0c      	cmp	r3, #12
 8002fba:	d902      	bls.n	8002fc2 <setPWM2Channel+0x22>
 8002fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc0:	e045      	b.n	800304e <setPWM2Channel+0xae>
	if(value<800||value>2000) return -2;
 8002fc2:	88bb      	ldrh	r3, [r7, #4]
 8002fc4:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8002fc8:	d303      	bcc.n	8002fd2 <setPWM2Channel+0x32>
 8002fca:	88bb      	ldrh	r3, [r7, #4]
 8002fcc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002fd0:	d902      	bls.n	8002fd8 <setPWM2Channel+0x38>
 8002fd2:	f06f 0301 	mvn.w	r3, #1
 8002fd6:	e03a      	b.n	800304e <setPWM2Channel+0xae>

	const TIM_TypeDef* timerArr[] = {
 8002fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8003058 <setPWM2Channel+0xb8>)
 8002fda:	f107 040c 	add.w	r4, r7, #12
 8002fde:	461d      	mov	r5, r3
 8002fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fe4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002fe8:	e884 0003 	stmia.w	r4, {r0, r1}
		0, TIM1, 0, TIM3, TIM4, TIM5
	};

	// map에서 상위 비트로 타이머 선택
	TIM_TypeDef* timer = (TIM_TypeDef*)timerArr[SERVO_TIMER_MAP[ch-1]>>4];
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	4a1a      	ldr	r2, [pc, #104]	@ (800305c <setPWM2Channel+0xbc>)
 8002ff2:	5cd3      	ldrb	r3, [r2, r3]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	3328      	adds	r3, #40	@ 0x28
 8002ffc:	443b      	add	r3, r7
 8002ffe:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003002:	627b      	str	r3, [r7, #36]	@ 0x24

	// map에서 하위 비트로 채널 선택
	switch(SERVO_TIMER_MAP[ch-1]&0x0F){
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	3b01      	subs	r3, #1
 8003008:	4a14      	ldr	r2, [pc, #80]	@ (800305c <setPWM2Channel+0xbc>)
 800300a:	5cd3      	ldrb	r3, [r2, r3]
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	3b01      	subs	r3, #1
 8003012:	2b03      	cmp	r3, #3
 8003014:	d81a      	bhi.n	800304c <setPWM2Channel+0xac>
 8003016:	a201      	add	r2, pc, #4	@ (adr r2, 800301c <setPWM2Channel+0x7c>)
 8003018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301c:	0800302d 	.word	0x0800302d
 8003020:	08003035 	.word	0x08003035
 8003024:	0800303d 	.word	0x0800303d
 8003028:	08003045 	.word	0x08003045
	case 1: timer->CCR1 = value; break;
 800302c:	88ba      	ldrh	r2, [r7, #4]
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	635a      	str	r2, [r3, #52]	@ 0x34
 8003032:	e00b      	b.n	800304c <setPWM2Channel+0xac>
	case 2: timer->CCR2 = value; break;
 8003034:	88ba      	ldrh	r2, [r7, #4]
 8003036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003038:	639a      	str	r2, [r3, #56]	@ 0x38
 800303a:	e007      	b.n	800304c <setPWM2Channel+0xac>
	case 3: timer->CCR3 = value; break;
 800303c:	88ba      	ldrh	r2, [r7, #4]
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003040:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003042:	e003      	b.n	800304c <setPWM2Channel+0xac>
	case 4: timer->CCR4 = value; break;
 8003044:	88ba      	ldrh	r2, [r7, #4]
 8003046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003048:	641a      	str	r2, [r3, #64]	@ 0x40
 800304a:	bf00      	nop
	}

//	LL_TIM_GenerateEvent_UPDATE(TIM5);
	return 0;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	372c      	adds	r7, #44	@ 0x2c
 8003052:	46bd      	mov	sp, r7
 8003054:	bcb0      	pop	{r4, r5, r7}
 8003056:	4770      	bx	lr
 8003058:	0800f1a8 	.word	0x0800f1a8
 800305c:	0800f248 	.word	0x0800f248

08003060 <setPWM2Channels>:
 * @parm uint8_t len : array size
 * @parm uint16_t value (in 1000-2000)
 * @retval 0
 */
int setPWM2Channels(uint8_t *pCh, uint8_t len, uint16_t value)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	70fb      	strb	r3, [r7, #3]
 800306c:	4613      	mov	r3, r2
 800306e:	803b      	strh	r3, [r7, #0]
	for(uint8_t i=0; i<len; i++)
 8003070:	2300      	movs	r3, #0
 8003072:	73fb      	strb	r3, [r7, #15]
 8003074:	e00d      	b.n	8003092 <setPWM2Channels+0x32>
	{
		uint8_t ch = pCh[i];
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	4413      	add	r3, r2
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	73bb      	strb	r3, [r7, #14]
		setPWM2Channel(ch, value);
 8003080:	883a      	ldrh	r2, [r7, #0]
 8003082:	7bbb      	ldrb	r3, [r7, #14]
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff ff8a 	bl	8002fa0 <setPWM2Channel>
	for(uint8_t i=0; i<len; i++)
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	3301      	adds	r3, #1
 8003090:	73fb      	strb	r3, [r7, #15]
 8003092:	7bfa      	ldrb	r2, [r7, #15]
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	429a      	cmp	r2, r3
 8003098:	d3ed      	bcc.n	8003076 <setPWM2Channels+0x16>
	}
	return 0;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030a8:	4b04      	ldr	r3, [pc, #16]	@ (80030bc <__NVIC_GetPriorityGrouping+0x18>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	0a1b      	lsrs	r3, r3, #8
 80030ae:	f003 0307 	and.w	r3, r3, #7
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	e000ed00 	.word	0xe000ed00

080030c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	db0b      	blt.n	80030ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	f003 021f 	and.w	r2, r3, #31
 80030d8:	4907      	ldr	r1, [pc, #28]	@ (80030f8 <__NVIC_EnableIRQ+0x38>)
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	2001      	movs	r0, #1
 80030e2:	fa00 f202 	lsl.w	r2, r0, r2
 80030e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	e000e100 	.word	0xe000e100

080030fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	6039      	str	r1, [r7, #0]
 8003106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310c:	2b00      	cmp	r3, #0
 800310e:	db0a      	blt.n	8003126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	b2da      	uxtb	r2, r3
 8003114:	490c      	ldr	r1, [pc, #48]	@ (8003148 <__NVIC_SetPriority+0x4c>)
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	0112      	lsls	r2, r2, #4
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	440b      	add	r3, r1
 8003120:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003124:	e00a      	b.n	800313c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	b2da      	uxtb	r2, r3
 800312a:	4908      	ldr	r1, [pc, #32]	@ (800314c <__NVIC_SetPriority+0x50>)
 800312c:	79fb      	ldrb	r3, [r7, #7]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	3b04      	subs	r3, #4
 8003134:	0112      	lsls	r2, r2, #4
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	440b      	add	r3, r1
 800313a:	761a      	strb	r2, [r3, #24]
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	e000e100 	.word	0xe000e100
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003150:	b480      	push	{r7}
 8003152:	b089      	sub	sp, #36	@ 0x24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f1c3 0307 	rsb	r3, r3, #7
 800316a:	2b04      	cmp	r3, #4
 800316c:	bf28      	it	cs
 800316e:	2304      	movcs	r3, #4
 8003170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	3304      	adds	r3, #4
 8003176:	2b06      	cmp	r3, #6
 8003178:	d902      	bls.n	8003180 <NVIC_EncodePriority+0x30>
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	3b03      	subs	r3, #3
 800317e:	e000      	b.n	8003182 <NVIC_EncodePriority+0x32>
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003184:	f04f 32ff 	mov.w	r2, #4294967295
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43da      	mvns	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	401a      	ands	r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003198:	f04f 31ff 	mov.w	r1, #4294967295
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	fa01 f303 	lsl.w	r3, r1, r3
 80031a2:	43d9      	mvns	r1, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a8:	4313      	orrs	r3, r2
         );
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3724      	adds	r7, #36	@ 0x24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b089      	sub	sp, #36	@ 0x24
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	332c      	adds	r3, #44	@ 0x2c
 80031c6:	4619      	mov	r1, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ce:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80031d2:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	fa92 f2a2 	rbit	r2, r2
 80031da:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	61ba      	str	r2, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	2a00      	cmp	r2, #0
 80031e4:	d101      	bne.n	80031ea <LL_ADC_REG_SetSequencerRanks+0x34>
  {
    return 32U;
 80031e6:	2220      	movs	r2, #32
 80031e8:	e003      	b.n	80031f2 <LL_ADC_REG_SetSequencerRanks+0x3c>
  }
  return __builtin_clz(value);
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	fab2 f282 	clz	r2, r2
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	40d3      	lsrs	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	61fb      	str	r3, [r7, #28]

  MODIFY_REG(*preg,
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	211f      	movs	r1, #31
 8003206:	fa01 f303 	lsl.w	r3, r1, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	401a      	ands	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f003 011f 	and.w	r1, r3, #31
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f003 031f 	and.w	r3, r3, #31
 800321a:	fa01 f303 	lsl.w	r3, r1, r3
 800321e:	431a      	orrs	r2, r3
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003224:	bf00      	nop
 8003226:	3724      	adds	r7, #36	@ 0x24
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	609a      	str	r2, [r3, #8]
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003256:	b480      	push	{r7}
 8003258:	b08f      	sub	sp, #60	@ 0x3c
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	330c      	adds	r3, #12
 8003266:	4619      	mov	r1, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800326e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003272:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	fa92 f2a2 	rbit	r2, r2
 800327a:	613a      	str	r2, [r7, #16]
  return result;
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	2a00      	cmp	r2, #0
 8003284:	d101      	bne.n	800328a <LL_ADC_SetChannelSamplingTime+0x34>
    return 32U;
 8003286:	2220      	movs	r2, #32
 8003288:	e003      	b.n	8003292 <LL_ADC_SetChannelSamplingTime+0x3c>
  return __builtin_clz(value);
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	fab2 f282 	clz	r2, r2
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	40d3      	lsrs	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	637b      	str	r3, [r7, #52]	@ 0x34

  MODIFY_REG(*preg,
 800329a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80032a4:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80032a8:	6239      	str	r1, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	6a39      	ldr	r1, [r7, #32]
 80032ac:	fa91 f1a1 	rbit	r1, r1
 80032b0:	61f9      	str	r1, [r7, #28]
  return result;
 80032b2:	69f9      	ldr	r1, [r7, #28]
 80032b4:	6279      	str	r1, [r7, #36]	@ 0x24
  if (value == 0U)
 80032b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032b8:	2900      	cmp	r1, #0
 80032ba:	d101      	bne.n	80032c0 <LL_ADC_SetChannelSamplingTime+0x6a>
    return 32U;
 80032bc:	2120      	movs	r1, #32
 80032be:	e003      	b.n	80032c8 <LL_ADC_SetChannelSamplingTime+0x72>
  return __builtin_clz(value);
 80032c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032c2:	fab1 f181 	clz	r1, r1
 80032c6:	b2c9      	uxtb	r1, r1
 80032c8:	40cb      	lsrs	r3, r1
 80032ca:	2107      	movs	r1, #7
 80032cc:	fa01 f303 	lsl.w	r3, r1, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	401a      	ands	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80032da:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80032de:	62f9      	str	r1, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032e2:	fa91 f1a1 	rbit	r1, r1
 80032e6:	62b9      	str	r1, [r7, #40]	@ 0x28
  return result;
 80032e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032ea:	6339      	str	r1, [r7, #48]	@ 0x30
  if (value == 0U)
 80032ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032ee:	2900      	cmp	r1, #0
 80032f0:	d101      	bne.n	80032f6 <LL_ADC_SetChannelSamplingTime+0xa0>
    return 32U;
 80032f2:	2120      	movs	r1, #32
 80032f4:	e003      	b.n	80032fe <LL_ADC_SetChannelSamplingTime+0xa8>
  return __builtin_clz(value);
 80032f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032f8:	fab1 f181 	clz	r1, r1
 80032fc:	b2c9      	uxtb	r1, r1
 80032fe:	40cb      	lsrs	r3, r1
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	fa01 f303 	lsl.w	r3, r1, r3
 8003306:	431a      	orrs	r2, r3
 8003308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330a:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 800330c:	bf00      	nop
 800330e:	373c      	adds	r7, #60	@ 0x3c
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <LL_SPI_SetStandard>:
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f023 0210 	bic.w	r2, r3, #16
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	605a      	str	r2, [r3, #4]
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <LL_TIM_EnableCounter>:
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f043 0201 	orr.w	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	601a      	str	r2, [r3, #0]
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <LL_TIM_DisableARRPreload>:
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	601a      	str	r2, [r3, #0]
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
	...

08003380 <LL_TIM_OC_DisableFast>:
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d01c      	beq.n	80033ca <LL_TIM_OC_DisableFast+0x4a>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2b04      	cmp	r3, #4
 8003394:	d017      	beq.n	80033c6 <LL_TIM_OC_DisableFast+0x46>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b10      	cmp	r3, #16
 800339a:	d012      	beq.n	80033c2 <LL_TIM_OC_DisableFast+0x42>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	2b40      	cmp	r3, #64	@ 0x40
 80033a0:	d00d      	beq.n	80033be <LL_TIM_OC_DisableFast+0x3e>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033a8:	d007      	beq.n	80033ba <LL_TIM_OC_DisableFast+0x3a>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033b0:	d101      	bne.n	80033b6 <LL_TIM_OC_DisableFast+0x36>
 80033b2:	2305      	movs	r3, #5
 80033b4:	e00a      	b.n	80033cc <LL_TIM_OC_DisableFast+0x4c>
 80033b6:	2306      	movs	r3, #6
 80033b8:	e008      	b.n	80033cc <LL_TIM_OC_DisableFast+0x4c>
 80033ba:	2304      	movs	r3, #4
 80033bc:	e006      	b.n	80033cc <LL_TIM_OC_DisableFast+0x4c>
 80033be:	2303      	movs	r3, #3
 80033c0:	e004      	b.n	80033cc <LL_TIM_OC_DisableFast+0x4c>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e002      	b.n	80033cc <LL_TIM_OC_DisableFast+0x4c>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <LL_TIM_OC_DisableFast+0x4c>
 80033ca:	2300      	movs	r3, #0
 80033cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3318      	adds	r3, #24
 80033d2:	4619      	mov	r1, r3
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	4a0b      	ldr	r2, [pc, #44]	@ (8003404 <LL_TIM_OC_DisableFast+0x84>)
 80033d8:	5cd3      	ldrb	r3, [r2, r3]
 80033da:	440b      	add	r3, r1
 80033dc:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	4908      	ldr	r1, [pc, #32]	@ (8003408 <LL_TIM_OC_DisableFast+0x88>)
 80033e6:	5ccb      	ldrb	r3, [r1, r3]
 80033e8:	4619      	mov	r1, r3
 80033ea:	2304      	movs	r3, #4
 80033ec:	408b      	lsls	r3, r1
 80033ee:	43db      	mvns	r3, r3
 80033f0:	401a      	ands	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	601a      	str	r2, [r3, #0]
}
 80033f6:	bf00      	nop
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	0800f254 	.word	0x0800f254
 8003408:	0800f25c 	.word	0x0800f25c

0800340c <LL_TIM_OC_EnablePreload>:
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d01c      	beq.n	8003456 <LL_TIM_OC_EnablePreload+0x4a>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	2b04      	cmp	r3, #4
 8003420:	d017      	beq.n	8003452 <LL_TIM_OC_EnablePreload+0x46>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b10      	cmp	r3, #16
 8003426:	d012      	beq.n	800344e <LL_TIM_OC_EnablePreload+0x42>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	2b40      	cmp	r3, #64	@ 0x40
 800342c:	d00d      	beq.n	800344a <LL_TIM_OC_EnablePreload+0x3e>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003434:	d007      	beq.n	8003446 <LL_TIM_OC_EnablePreload+0x3a>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800343c:	d101      	bne.n	8003442 <LL_TIM_OC_EnablePreload+0x36>
 800343e:	2305      	movs	r3, #5
 8003440:	e00a      	b.n	8003458 <LL_TIM_OC_EnablePreload+0x4c>
 8003442:	2306      	movs	r3, #6
 8003444:	e008      	b.n	8003458 <LL_TIM_OC_EnablePreload+0x4c>
 8003446:	2304      	movs	r3, #4
 8003448:	e006      	b.n	8003458 <LL_TIM_OC_EnablePreload+0x4c>
 800344a:	2303      	movs	r3, #3
 800344c:	e004      	b.n	8003458 <LL_TIM_OC_EnablePreload+0x4c>
 800344e:	2302      	movs	r3, #2
 8003450:	e002      	b.n	8003458 <LL_TIM_OC_EnablePreload+0x4c>
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <LL_TIM_OC_EnablePreload+0x4c>
 8003456:	2300      	movs	r3, #0
 8003458:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3318      	adds	r3, #24
 800345e:	4619      	mov	r1, r3
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	4a0a      	ldr	r2, [pc, #40]	@ (800348c <LL_TIM_OC_EnablePreload+0x80>)
 8003464:	5cd3      	ldrb	r3, [r2, r3]
 8003466:	440b      	add	r3, r1
 8003468:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	4907      	ldr	r1, [pc, #28]	@ (8003490 <LL_TIM_OC_EnablePreload+0x84>)
 8003472:	5ccb      	ldrb	r3, [r1, r3]
 8003474:	4619      	mov	r1, r3
 8003476:	2308      	movs	r3, #8
 8003478:	408b      	lsls	r3, r1
 800347a:	431a      	orrs	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	601a      	str	r2, [r3, #0]
}
 8003480:	bf00      	nop
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	0800f254 	.word	0x0800f254
 8003490:	0800f25c 	.word	0x0800f25c

08003494 <LL_TIM_SetClockSource>:
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034a6:	f023 0307 	bic.w	r3, r3, #7
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	609a      	str	r2, [r3, #8]
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <LL_TIM_SetTriggerOutput>:
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	605a      	str	r2, [r3, #4]
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <LL_TIM_DisableMasterSlaveMode>:
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	609a      	str	r2, [r3, #8]
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <LL_TIM_EnableIT_UPDATE>:
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f043 0201 	orr.w	r2, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	60da      	str	r2, [r3, #12]
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <LL_USART_Enable>:
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	60da      	str	r2, [r3, #12]
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <LL_USART_ConfigAsyncMode>:
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	615a      	str	r2, [r3, #20]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <LL_USART_ConfigHalfDuplexMode>:
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f023 0222 	bic.w	r2, r3, #34	@ 0x22
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	615a      	str	r2, [r3, #20]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	f043 0208 	orr.w	r2, r3, #8
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	615a      	str	r2, [r3, #20]
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <LL_USART_EnableIT_RXNE>:
{
 80035a8:	b480      	push	{r7}
 80035aa:	b089      	sub	sp, #36	@ 0x24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	330c      	adds	r3, #12
 80035b4:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	e853 3f00 	ldrex	r3, [r3]
 80035bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f043 0320 	orr.w	r3, r3, #32
 80035c4:	61fb      	str	r3, [r7, #28]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	330c      	adds	r3, #12
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	61ba      	str	r2, [r7, #24]
 80035ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d0:	6979      	ldr	r1, [r7, #20]
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	e841 2300 	strex	r3, r2, [r1]
 80035d8:	613b      	str	r3, [r7, #16]
   return(result);
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e7      	bne.n	80035b0 <LL_USART_EnableIT_RXNE+0x8>
}
 80035e0:	bf00      	nop
 80035e2:	bf00      	nop
 80035e4:	3724      	adds	r7, #36	@ 0x24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80035fa:	4a17      	ldr	r2, [pc, #92]	@ (8003658 <LL_SYSCFG_SetEXTISource+0x68>)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	3302      	adds	r3, #2
 8003602:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	0c1b      	lsrs	r3, r3, #16
 800360a:	43db      	mvns	r3, r3
 800360c:	ea02 0103 	and.w	r1, r2, r3
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	0c1b      	lsrs	r3, r3, #16
 8003614:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	fa93 f3a3 	rbit	r3, r3
 800361c:	60fb      	str	r3, [r7, #12]
  return result;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <LL_SYSCFG_SetEXTISource+0x3c>
    return 32U;
 8003628:	2320      	movs	r3, #32
 800362a:	e003      	b.n	8003634 <LL_SYSCFG_SetEXTISource+0x44>
  return __builtin_clz(value);
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	fa03 f202 	lsl.w	r2, r3, r2
 800363c:	4806      	ldr	r0, [pc, #24]	@ (8003658 <LL_SYSCFG_SetEXTISource+0x68>)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	430a      	orrs	r2, r1
 8003644:	3302      	adds	r3, #2
 8003646:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800364a:	bf00      	nop
 800364c:	371c      	adds	r7, #28
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40013800 	.word	0x40013800

0800365c <LL_GPIO_SetPinMode>:
{
 800365c:	b480      	push	{r7}
 800365e:	b08b      	sub	sp, #44	@ 0x2c
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	fa93 f3a3 	rbit	r3, r3
 8003676:	613b      	str	r3, [r7, #16]
  return result;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8003682:	2320      	movs	r3, #32
 8003684:	e003      	b.n	800368e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	fab3 f383 	clz	r3, r3
 800368c:	b2db      	uxtb	r3, r3
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	2103      	movs	r1, #3
 8003692:	fa01 f303 	lsl.w	r3, r1, r3
 8003696:	43db      	mvns	r3, r3
 8003698:	401a      	ands	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	fa93 f3a3 	rbit	r3, r3
 80036a4:	61fb      	str	r3, [r7, #28]
  return result;
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80036b0:	2320      	movs	r3, #32
 80036b2:	e003      	b.n	80036bc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80036b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	fa01 f303 	lsl.w	r3, r1, r3
 80036c4:	431a      	orrs	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	601a      	str	r2, [r3, #0]
}
 80036ca:	bf00      	nop
 80036cc:	372c      	adds	r7, #44	@ 0x2c
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <LL_GPIO_SetPinPull>:
{
 80036d6:	b480      	push	{r7}
 80036d8:	b08b      	sub	sp, #44	@ 0x2c
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	fa93 f3a3 	rbit	r3, r3
 80036f0:	613b      	str	r3, [r7, #16]
  return result;
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80036fc:	2320      	movs	r3, #32
 80036fe:	e003      	b.n	8003708 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	2103      	movs	r1, #3
 800370c:	fa01 f303 	lsl.w	r3, r1, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	401a      	ands	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	61fb      	str	r3, [r7, #28]
  return result;
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800372a:	2320      	movs	r3, #32
 800372c:	e003      	b.n	8003736 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	fab3 f383 	clz	r3, r3
 8003734:	b2db      	uxtb	r3, r3
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	fa01 f303 	lsl.w	r3, r1, r3
 800373e:	431a      	orrs	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	60da      	str	r2, [r3, #12]
}
 8003744:	bf00      	nop
 8003746:	372c      	adds	r7, #44	@ 0x2c
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <LL_GPIO_ResetOutputPin>:
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	041a      	lsls	r2, r3, #16
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	619a      	str	r2, [r3, #24]
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8003778:	4b05      	ldr	r3, [pc, #20]	@ (8003790 <LL_EXTI_EnableIT_0_31+0x20>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	4904      	ldr	r1, [pc, #16]	@ (8003790 <LL_EXTI_EnableIT_0_31+0x20>)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4313      	orrs	r3, r2
 8003782:	600b      	str	r3, [r1, #0]
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	40013c00 	.word	0x40013c00

08003794 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800379c:	4b05      	ldr	r3, [pc, #20]	@ (80037b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	4904      	ldr	r1, [pc, #16]	@ (80037b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60cb      	str	r3, [r1, #12]
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	40013c00 	.word	0x40013c00

080037b8 <LL_AHB1_GRP1_EnableClock>:
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80037c0:	4b08      	ldr	r3, [pc, #32]	@ (80037e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80037c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037c4:	4907      	ldr	r1, [pc, #28]	@ (80037e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80037cc:	4b05      	ldr	r3, [pc, #20]	@ (80037e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80037ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4013      	ands	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037d6:	68fb      	ldr	r3, [r7, #12]
}
 80037d8:	bf00      	nop
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	40023800 	.word	0x40023800

080037e8 <LL_APB1_GRP1_EnableClock>:
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80037f0:	4b08      	ldr	r3, [pc, #32]	@ (8003814 <LL_APB1_GRP1_EnableClock+0x2c>)
 80037f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037f4:	4907      	ldr	r1, [pc, #28]	@ (8003814 <LL_APB1_GRP1_EnableClock+0x2c>)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80037fc:	4b05      	ldr	r3, [pc, #20]	@ (8003814 <LL_APB1_GRP1_EnableClock+0x2c>)
 80037fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4013      	ands	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003806:	68fb      	ldr	r3, [r7, #12]
}
 8003808:	bf00      	nop
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	40023800 	.word	0x40023800

08003818 <LL_APB2_GRP1_EnableClock>:
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003820:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003822:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003824:	4907      	ldr	r1, [pc, #28]	@ (8003844 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4313      	orrs	r3, r2
 800382a:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800382c:	4b05      	ldr	r3, [pc, #20]	@ (8003844 <LL_APB2_GRP1_EnableClock+0x2c>)
 800382e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4013      	ands	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003836:	68fb      	ldr	r3, [r7, #12]
}
 8003838:	bf00      	nop
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	40023800 	.word	0x40023800

08003848 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
	{
		while(!LL_USART_IsActiveFlag_TXE(USART2));
		LL_USART_TransmitData8(USART2, *(p+i));
	}
#else
	while(USBD_BUSY == CDC_Transmit_FS((uint8_t*)p, len)) {}
 8003854:	bf00      	nop
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	b29b      	uxth	r3, r3
 800385a:	4619      	mov	r1, r3
 800385c:	68b8      	ldr	r0, [r7, #8]
 800385e:	f008 fbaf 	bl	800bfc0 <CDC_Transmit_FS>
 8003862:	4603      	mov	r3, r0
 8003864:	2b01      	cmp	r3, #1
 8003866:	d0f6      	beq.n	8003856 <_write+0xe>
	return len;
 8003868:	687b      	ldr	r3, [r7, #4]
#endif
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003878:	f001 fa30 	bl	8004cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800387c:	f000 f862 	bl	8003944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003880:	f000 ff02 	bl	8004688 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003884:	f000 fde0 	bl	8004448 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8003888:	f000 f98e 	bl	8003ba8 <MX_TIM1_Init>
  MX_TIM3_Init();
 800388c:	f000 fa4a 	bl	8003d24 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003890:	f000 fb02 	bl	8003e98 <MX_TIM4_Init>
  MX_TIM5_Init();
 8003894:	f000 fbac 	bl	8003ff0 <MX_TIM5_Init>
  MX_TIM13_Init();
 8003898:	f000 fc62 	bl	8004160 <MX_TIM13_Init>
  MX_TIM14_Init();
 800389c:	f000 fcb4 	bl	8004208 <MX_TIM14_Init>
  MX_SPI1_Init();
 80038a0:	f000 f930 	bl	8003b04 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80038a4:	f000 fe2e 	bl	8004504 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80038a8:	f000 fe8c 	bl	80045c4 <MX_USART3_UART_Init>
  MX_UART4_Init();
 80038ac:	f000 fd02 	bl	80042b4 <MX_UART4_Init>
  MX_UART5_Init();
 80038b0:	f000 fd52 	bl	8004358 <MX_UART5_Init>
  MX_USB_DEVICE_Init();
 80038b4:	f008 fab8 	bl	800be28 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80038b8:	f000 f8ae 	bl	8003a18 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_EnableCounter(TIM4);
 80038bc:	4819      	ldr	r0, [pc, #100]	@ (8003924 <main+0xb0>)
 80038be:	f7ff fd3e 	bl	800333e <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM13);
 80038c2:	4819      	ldr	r0, [pc, #100]	@ (8003928 <main+0xb4>)
 80038c4:	f7ff fd3b 	bl	800333e <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM14);
 80038c8:	4818      	ldr	r0, [pc, #96]	@ (800392c <main+0xb8>)
 80038ca:	f7ff fd38 	bl	800333e <LL_TIM_EnableCounter>

  PARM_load();
 80038ce:	f7fe f897 	bl	8001a00 <PARM_load>

  BuzzerPlayInit();
 80038d2:	f7fd fb85 	bl	8000fe0 <BuzzerPlayInit>

  // interrupt when finished receiving
  LL_USART_EnableIT_RXNE(USART1);
 80038d6:	4816      	ldr	r0, [pc, #88]	@ (8003930 <main+0xbc>)
 80038d8:	f7ff fe66 	bl	80035a8 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART2);
 80038dc:	4815      	ldr	r0, [pc, #84]	@ (8003934 <main+0xc0>)
 80038de:	f7ff fe63 	bl	80035a8 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART3);
 80038e2:	4815      	ldr	r0, [pc, #84]	@ (8003938 <main+0xc4>)
 80038e4:	f7ff fe60 	bl	80035a8 <LL_USART_EnableIT_RXNE>

  // 필수 기기 점검
  SERVO_Initialization();
 80038e8:	f7ff f922 	bl	8002b30 <SERVO_Initialization>
  RC_Initialization();
 80038ec:	f7fe fe9e 	bl	800262c <RC_Initialization>
  IMU_Initialization();
 80038f0:	f7fd ff84 	bl	80017fc <IMU_Initialization>
  BuzzerPlayOneCycle();
 80038f4:	f7fd fba2 	bl	800103c <BuzzerPlayOneCycle>
  SERVO_doArm();
 80038f8:	f7ff f94e 	bl	8002b98 <SERVO_doArm>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RC_GetData();
 80038fc:	f7fe ff14 	bl	8002728 <RC_GetData>

	  IMU_GetData();
 8003900:	f7fd ff83 	bl	800180a <IMU_GetData>

	  if(fsFlag == 1){
 8003904:	4b0d      	ldr	r3, [pc, #52]	@ (800393c <main+0xc8>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d102      	bne.n	8003912 <main+0x9e>
		  FS_mannualMode();
 800390c:	f7fd fbde 	bl	80010cc <FS_mannualMode>
 8003910:	e005      	b.n	800391e <main+0xaa>
	  }
	  else{
		  LL_GPIO_ResetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 8003912:	2101      	movs	r1, #1
 8003914:	480a      	ldr	r0, [pc, #40]	@ (8003940 <main+0xcc>)
 8003916:	f7ff ff1b 	bl	8003750 <LL_GPIO_ResetOutputPin>
		  SERVO_control();
 800391a:	f7ff f99f 	bl	8002c5c <SERVO_control>
	  }

	  Log_Send();
 800391e:	f7fd ff9d 	bl	800185c <Log_Send>
	  RC_GetData();
 8003922:	e7eb      	b.n	80038fc <main+0x88>
 8003924:	40000800 	.word	0x40000800
 8003928:	40001c00 	.word	0x40001c00
 800392c:	40002000 	.word	0x40002000
 8003930:	40011000 	.word	0x40011000
 8003934:	40004400 	.word	0x40004400
 8003938:	40004800 	.word	0x40004800
 800393c:	200002e0 	.word	0x200002e0
 8003940:	40021000 	.word	0x40021000

08003944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b094      	sub	sp, #80	@ 0x50
 8003948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800394a:	f107 0320 	add.w	r3, r7, #32
 800394e:	2230      	movs	r2, #48	@ 0x30
 8003950:	2100      	movs	r1, #0
 8003952:	4618      	mov	r0, r3
 8003954:	f009 fdd9 	bl	800d50a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003958:	f107 030c 	add.w	r3, r7, #12
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003968:	2300      	movs	r3, #0
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	4b28      	ldr	r3, [pc, #160]	@ (8003a10 <SystemClock_Config+0xcc>)
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	4a27      	ldr	r2, [pc, #156]	@ (8003a10 <SystemClock_Config+0xcc>)
 8003972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003976:	6413      	str	r3, [r2, #64]	@ 0x40
 8003978:	4b25      	ldr	r3, [pc, #148]	@ (8003a10 <SystemClock_Config+0xcc>)
 800397a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003984:	2300      	movs	r3, #0
 8003986:	607b      	str	r3, [r7, #4]
 8003988:	4b22      	ldr	r3, [pc, #136]	@ (8003a14 <SystemClock_Config+0xd0>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a21      	ldr	r2, [pc, #132]	@ (8003a14 <SystemClock_Config+0xd0>)
 800398e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	4b1f      	ldr	r3, [pc, #124]	@ (8003a14 <SystemClock_Config+0xd0>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800399c:	607b      	str	r3, [r7, #4]
 800399e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039a0:	2301      	movs	r3, #1
 80039a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039aa:	2302      	movs	r3, #2
 80039ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80039b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80039b4:	2308      	movs	r3, #8
 80039b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80039b8:	23a8      	movs	r3, #168	@ 0xa8
 80039ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039bc:	2302      	movs	r3, #2
 80039be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80039c0:	2307      	movs	r3, #7
 80039c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039c4:	f107 0320 	add.w	r3, r7, #32
 80039c8:	4618      	mov	r0, r3
 80039ca:	f002 ff1d 	bl	8006808 <HAL_RCC_OscConfig>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80039d4:	f000 fee2 	bl	800479c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039d8:	230f      	movs	r3, #15
 80039da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039dc:	2302      	movs	r3, #2
 80039de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80039e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80039e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80039ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80039f0:	f107 030c 	add.w	r3, r7, #12
 80039f4:	2105      	movs	r1, #5
 80039f6:	4618      	mov	r0, r3
 80039f8:	f003 f97e 	bl	8006cf8 <HAL_RCC_ClockConfig>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003a02:	f000 fecb 	bl	800479c <Error_Handler>
  }
}
 8003a06:	bf00      	nop
 8003a08:	3750      	adds	r7, #80	@ 0x50
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40007000 	.word	0x40007000

08003a18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b092      	sub	sp, #72	@ 0x48
 8003a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8003a1e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	605a      	str	r2, [r3, #4]
 8003a28:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8003a2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	605a      	str	r2, [r3, #4]
 8003a34:	609a      	str	r2, [r3, #8]
 8003a36:	60da      	str	r2, [r3, #12]
 8003a38:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8003a3a:	f107 0318 	add.w	r3, r7, #24
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	605a      	str	r2, [r3, #4]
 8003a44:	609a      	str	r2, [r3, #8]
 8003a46:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a48:	463b      	mov	r3, r7
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	605a      	str	r2, [r3, #4]
 8003a50:	609a      	str	r2, [r3, #8]
 8003a52:	60da      	str	r2, [r3, #12]
 8003a54:	611a      	str	r2, [r3, #16]
 8003a56:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8003a58:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003a5c:	f7ff fedc 	bl	8003818 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003a60:	2004      	movs	r0, #4
 8003a62:	f7ff fea9 	bl	80037b8 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC1   ------> ADC1_IN11
  */
  GPIO_InitStruct.Pin = RSSI_Pin;
 8003a66:	2302      	movs	r3, #2
 8003a68:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(RSSI_GPIO_Port, &GPIO_InitStruct);
 8003a72:	463b      	mov	r3, r7
 8003a74:	4619      	mov	r1, r3
 8003a76:	481f      	ldr	r0, [pc, #124]	@ (8003af4 <MX_ADC1_Init+0xdc>)
 8003a78:	f003 fe72 	bl	8007760 <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8003a80:	2300      	movs	r3, #0
 8003a82:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8003a84:	2300      	movs	r3, #0
 8003a86:	647b      	str	r3, [r7, #68]	@ 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8003a88:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	481a      	ldr	r0, [pc, #104]	@ (8003af8 <MX_ADC1_Init+0xe0>)
 8003a90:	f003 fb96 	bl	80071c0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8003a94:	2300      	movs	r3, #0
 8003a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8003aa8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003aac:	4619      	mov	r1, r3
 8003aae:	4812      	ldr	r0, [pc, #72]	@ (8003af8 <MX_ADC1_Init+0xe0>)
 8003ab0:	f003 fbb2 	bl	8007218 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8003ab4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003ab8:	480f      	ldr	r0, [pc, #60]	@ (8003af8 <MX_ADC1_Init+0xe0>)
 8003aba:	f7ff fbb9 	bl	8003230 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8003abe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ac2:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8003ac8:	f107 0318 	add.w	r3, r7, #24
 8003acc:	4619      	mov	r1, r3
 8003ace:	480b      	ldr	r0, [pc, #44]	@ (8003afc <MX_ADC1_Init+0xe4>)
 8003ad0:	f003 fb2e 	bl	8007130 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_11);
 8003ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8003b00 <MX_ADC1_Init+0xe8>)
 8003ad6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ada:	4807      	ldr	r0, [pc, #28]	@ (8003af8 <MX_ADC1_Init+0xe0>)
 8003adc:	f7ff fb6b 	bl	80031b6 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	4907      	ldr	r1, [pc, #28]	@ (8003b00 <MX_ADC1_Init+0xe8>)
 8003ae4:	4804      	ldr	r0, [pc, #16]	@ (8003af8 <MX_ADC1_Init+0xe0>)
 8003ae6:	f7ff fbb6 	bl	8003256 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003aea:	bf00      	nop
 8003aec:	3748      	adds	r7, #72	@ 0x48
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40020800 	.word	0x40020800
 8003af8:	40012000 	.word	0x40012000
 8003afc:	40012300 	.word	0x40012300
 8003b00:	0030000b 	.word	0x0030000b

08003b04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b090      	sub	sp, #64	@ 0x40
 8003b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003b0a:	f107 0318 	add.w	r3, r7, #24
 8003b0e:	2228      	movs	r2, #40	@ 0x28
 8003b10:	2100      	movs	r1, #0
 8003b12:	4618      	mov	r0, r3
 8003b14:	f009 fcf9 	bl	800d50a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b18:	463b      	mov	r3, r7
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	605a      	str	r2, [r3, #4]
 8003b20:	609a      	str	r2, [r3, #8]
 8003b22:	60da      	str	r2, [r3, #12]
 8003b24:	611a      	str	r2, [r3, #16]
 8003b26:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003b28:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003b2c:	f7ff fe74 	bl	8003818 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003b30:	2001      	movs	r0, #1
 8003b32:	f7ff fe41 	bl	80037b8 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003b36:	23e0      	movs	r3, #224	@ 0xe0
 8003b38:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003b4a:	2305      	movs	r3, #5
 8003b4c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b4e:	463b      	mov	r3, r7
 8003b50:	4619      	mov	r1, r3
 8003b52:	4813      	ldr	r0, [pc, #76]	@ (8003ba0 <MX_SPI1_Init+0x9c>)
 8003b54:	f003 fe04 	bl	8007760 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003b5c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003b60:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003b62:	2300      	movs	r3, #0
 8003b64:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003b66:	2302      	movs	r3, #2
 8003b68:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003b6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8003b74:	2318      	movs	r3, #24
 8003b76:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003b80:	230a      	movs	r3, #10
 8003b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003b84:	f107 0318 	add.w	r3, r7, #24
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4806      	ldr	r0, [pc, #24]	@ (8003ba4 <MX_SPI1_Init+0xa0>)
 8003b8c:	f003 ffc3 	bl	8007b16 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8003b90:	2100      	movs	r1, #0
 8003b92:	4804      	ldr	r0, [pc, #16]	@ (8003ba4 <MX_SPI1_Init+0xa0>)
 8003b94:	f7ff fbc0 	bl	8003318 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b98:	bf00      	nop
 8003b9a:	3740      	adds	r7, #64	@ 0x40
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40020000 	.word	0x40020000
 8003ba4:	40013000 	.word	0x40013000

08003ba8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b09a      	sub	sp, #104	@ 0x68
 8003bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003bae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	605a      	str	r2, [r3, #4]
 8003bb8:	609a      	str	r2, [r3, #8]
 8003bba:	60da      	str	r2, [r3, #12]
 8003bbc:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003bbe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f009 fc9f 	bl	800d50a <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8003bcc:	f107 031c 	add.w	r3, r7, #28
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	605a      	str	r2, [r3, #4]
 8003bd6:	609a      	str	r2, [r3, #8]
 8003bd8:	60da      	str	r2, [r3, #12]
 8003bda:	611a      	str	r2, [r3, #16]
 8003bdc:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bde:	1d3b      	adds	r3, r7, #4
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	605a      	str	r2, [r3, #4]
 8003be6:	609a      	str	r2, [r3, #8]
 8003be8:	60da      	str	r2, [r3, #12]
 8003bea:	611a      	str	r2, [r3, #16]
 8003bec:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8003bee:	2001      	movs	r0, #1
 8003bf0:	f7ff fe12 	bl	8003818 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 8003bf4:	f7ff fa56 	bl	80030a4 <__NVIC_GetPriorityGrouping>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2103      	movs	r1, #3
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff faa6 	bl	8003150 <NVIC_EncodePriority>
 8003c04:	4603      	mov	r3, r0
 8003c06:	4619      	mov	r1, r3
 8003c08:	2019      	movs	r0, #25
 8003c0a:	f7ff fa77 	bl	80030fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003c0e:	2019      	movs	r0, #25
 8003c10:	f7ff fa56 	bl	80030c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_InitStruct.Autoreload = 65535;
 8003c1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c22:	65fb      	str	r3, [r7, #92]	@ 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003c24:	2300      	movs	r3, #0
 8003c26:	663b      	str	r3, [r7, #96]	@ 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	667b      	str	r3, [r7, #100]	@ 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8003c2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003c30:	4619      	mov	r1, r3
 8003c32:	483a      	ldr	r0, [pc, #232]	@ (8003d1c <MX_TIM1_Init+0x174>)
 8003c34:	f004 f834 	bl	8007ca0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8003c38:	4838      	ldr	r0, [pc, #224]	@ (8003d1c <MX_TIM1_Init+0x174>)
 8003c3a:	f7ff fb90 	bl	800335e <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4836      	ldr	r0, [pc, #216]	@ (8003d1c <MX_TIM1_Init+0x174>)
 8003c42:	f7ff fc27 	bl	8003494 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8003c46:	2110      	movs	r1, #16
 8003c48:	4834      	ldr	r0, [pc, #208]	@ (8003d1c <MX_TIM1_Init+0x174>)
 8003c4a:	f7ff fbdf 	bl	800340c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003c4e:	2360      	movs	r3, #96	@ 0x60
 8003c50:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003c52:	2300      	movs	r3, #0
 8003c54:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003c56:	2300      	movs	r3, #0
 8003c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003c62:	2300      	movs	r3, #0
 8003c64:	64bb      	str	r3, [r7, #72]	@ 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8003c66:	2300      	movs	r3, #0
 8003c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	653b      	str	r3, [r7, #80]	@ 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8003c6e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003c72:	461a      	mov	r2, r3
 8003c74:	2110      	movs	r1, #16
 8003c76:	4829      	ldr	r0, [pc, #164]	@ (8003d1c <MX_TIM1_Init+0x174>)
 8003c78:	f004 f8ac 	bl	8007dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8003c7c:	2110      	movs	r1, #16
 8003c7e:	4827      	ldr	r0, [pc, #156]	@ (8003d1c <MX_TIM1_Init+0x174>)
 8003c80:	f7ff fb7e 	bl	8003380 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8003c84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c88:	4824      	ldr	r0, [pc, #144]	@ (8003d1c <MX_TIM1_Init+0x174>)
 8003c8a:	f7ff fbbf 	bl	800340c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8003c8e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003c92:	461a      	mov	r2, r3
 8003c94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c98:	4820      	ldr	r0, [pc, #128]	@ (8003d1c <MX_TIM1_Init+0x174>)
 8003c9a:	f004 f89b 	bl	8007dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8003c9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ca2:	481e      	ldr	r0, [pc, #120]	@ (8003d1c <MX_TIM1_Init+0x174>)
 8003ca4:	f7ff fb6c 	bl	8003380 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8003ca8:	2100      	movs	r1, #0
 8003caa:	481c      	ldr	r0, [pc, #112]	@ (8003d1c <MX_TIM1_Init+0x174>)
 8003cac:	f7ff fc07 	bl	80034be <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8003cb0:	481a      	ldr	r0, [pc, #104]	@ (8003d1c <MX_TIM1_Init+0x174>)
 8003cb2:	f7ff fc17 	bl	80034e4 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	857b      	strh	r3, [r7, #42]	@ 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8003ccc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8003cd6:	f107 031c 	add.w	r3, r7, #28
 8003cda:	4619      	mov	r1, r3
 8003cdc:	480f      	ldr	r0, [pc, #60]	@ (8003d1c <MX_TIM1_Init+0x174>)
 8003cde:	f004 f8ba 	bl	8007e56 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM1);
 8003ce2:	480e      	ldr	r0, [pc, #56]	@ (8003d1c <MX_TIM1_Init+0x174>)
 8003ce4:	f7ff fc0e 	bl	8003504 <LL_TIM_EnableIT_UPDATE>

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8003ce8:	2010      	movs	r0, #16
 8003cea:	f7ff fd65 	bl	80037b8 <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PE11   ------> TIM1_CH2
  PE13   ------> TIM1_CH3
  */
  GPIO_InitStruct.Pin = MAIN_CH11_Pin|MAIN_CH12_Pin;
 8003cee:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003cf2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8003d04:	2301      	movs	r3, #1
 8003d06:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d08:	1d3b      	adds	r3, r7, #4
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4804      	ldr	r0, [pc, #16]	@ (8003d20 <MX_TIM1_Init+0x178>)
 8003d0e:	f003 fd27 	bl	8007760 <LL_GPIO_Init>

}
 8003d12:	bf00      	nop
 8003d14:	3768      	adds	r7, #104	@ 0x68
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40010000 	.word	0x40010000
 8003d20:	40021000 	.word	0x40021000

08003d24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b094      	sub	sp, #80	@ 0x50
 8003d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003d2a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	605a      	str	r2, [r3, #4]
 8003d34:	609a      	str	r2, [r3, #8]
 8003d36:	60da      	str	r2, [r3, #12]
 8003d38:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003d3a:	f107 031c 	add.w	r3, r7, #28
 8003d3e:	2220      	movs	r2, #32
 8003d40:	2100      	movs	r1, #0
 8003d42:	4618      	mov	r0, r3
 8003d44:	f009 fbe1 	bl	800d50a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d48:	1d3b      	adds	r3, r7, #4
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	605a      	str	r2, [r3, #4]
 8003d50:	609a      	str	r2, [r3, #8]
 8003d52:	60da      	str	r2, [r3, #12]
 8003d54:	611a      	str	r2, [r3, #16]
 8003d56:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8003d58:	2002      	movs	r0, #2
 8003d5a:	f7ff fd45 	bl	80037e8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 8003d5e:	2353      	movs	r3, #83	@ 0x53
 8003d60:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003d62:	2300      	movs	r3, #0
 8003d64:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 20000-LL_TIM_IC_FILTER_FDIV1_N2;
 8003d66:	4b48      	ldr	r3, [pc, #288]	@ (8003e88 <MX_TIM3_Init+0x164>)
 8003d68:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003d6e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003d72:	4619      	mov	r1, r3
 8003d74:	4845      	ldr	r0, [pc, #276]	@ (8003e8c <MX_TIM3_Init+0x168>)
 8003d76:	f003 ff93 	bl	8007ca0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8003d7a:	4844      	ldr	r0, [pc, #272]	@ (8003e8c <MX_TIM3_Init+0x168>)
 8003d7c:	f7ff faef 	bl	800335e <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003d80:	2100      	movs	r1, #0
 8003d82:	4842      	ldr	r0, [pc, #264]	@ (8003e8c <MX_TIM3_Init+0x168>)
 8003d84:	f7ff fb86 	bl	8003494 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8003d88:	2101      	movs	r1, #1
 8003d8a:	4840      	ldr	r0, [pc, #256]	@ (8003e8c <MX_TIM3_Init+0x168>)
 8003d8c:	f7ff fb3e 	bl	800340c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003d90:	2360      	movs	r3, #96	@ 0x60
 8003d92:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003da0:	2300      	movs	r3, #0
 8003da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003da4:	f107 031c 	add.w	r3, r7, #28
 8003da8:	461a      	mov	r2, r3
 8003daa:	2101      	movs	r1, #1
 8003dac:	4837      	ldr	r0, [pc, #220]	@ (8003e8c <MX_TIM3_Init+0x168>)
 8003dae:	f004 f811 	bl	8007dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8003db2:	2101      	movs	r1, #1
 8003db4:	4835      	ldr	r0, [pc, #212]	@ (8003e8c <MX_TIM3_Init+0x168>)
 8003db6:	f7ff fae3 	bl	8003380 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 8003dba:	2110      	movs	r1, #16
 8003dbc:	4833      	ldr	r0, [pc, #204]	@ (8003e8c <MX_TIM3_Init+0x168>)
 8003dbe:	f7ff fb25 	bl	800340c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8003dc2:	f107 031c 	add.w	r3, r7, #28
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	2110      	movs	r1, #16
 8003dca:	4830      	ldr	r0, [pc, #192]	@ (8003e8c <MX_TIM3_Init+0x168>)
 8003dcc:	f004 f802 	bl	8007dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8003dd0:	2110      	movs	r1, #16
 8003dd2:	482e      	ldr	r0, [pc, #184]	@ (8003e8c <MX_TIM3_Init+0x168>)
 8003dd4:	f7ff fad4 	bl	8003380 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
 8003dd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ddc:	482b      	ldr	r0, [pc, #172]	@ (8003e8c <MX_TIM3_Init+0x168>)
 8003dde:	f7ff fb15 	bl	800340c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8003de2:	f107 031c 	add.w	r3, r7, #28
 8003de6:	461a      	mov	r2, r3
 8003de8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003dec:	4827      	ldr	r0, [pc, #156]	@ (8003e8c <MX_TIM3_Init+0x168>)
 8003dee:	f003 fff1 	bl	8007dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
 8003df2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003df6:	4825      	ldr	r0, [pc, #148]	@ (8003e8c <MX_TIM3_Init+0x168>)
 8003df8:	f7ff fac2 	bl	8003380 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8003dfc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003e00:	4822      	ldr	r0, [pc, #136]	@ (8003e8c <MX_TIM3_Init+0x168>)
 8003e02:	f7ff fb03 	bl	800340c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003e06:	f107 031c 	add.w	r3, r7, #28
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003e10:	481e      	ldr	r0, [pc, #120]	@ (8003e8c <MX_TIM3_Init+0x168>)
 8003e12:	f003 ffdf 	bl	8007dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8003e16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003e1a:	481c      	ldr	r0, [pc, #112]	@ (8003e8c <MX_TIM3_Init+0x168>)
 8003e1c:	f7ff fab0 	bl	8003380 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8003e20:	2100      	movs	r1, #0
 8003e22:	481a      	ldr	r0, [pc, #104]	@ (8003e8c <MX_TIM3_Init+0x168>)
 8003e24:	f7ff fb4b 	bl	80034be <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8003e28:	4818      	ldr	r0, [pc, #96]	@ (8003e8c <MX_TIM3_Init+0x168>)
 8003e2a:	f7ff fb5b 	bl	80034e4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003e2e:	2002      	movs	r0, #2
 8003e30:	f7ff fcc2 	bl	80037b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003e34:	2004      	movs	r0, #4
 8003e36:	f7ff fcbf 	bl	80037b8 <LL_AHB1_GRP1_EnableClock>
  PB0   ------> TIM3_CH3
  PB1   ------> TIM3_CH4
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = MAIN_CH9_Pin|MAIN_CH10_Pin;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003e4e:	2302      	movs	r3, #2
 8003e50:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e52:	1d3b      	adds	r3, r7, #4
 8003e54:	4619      	mov	r1, r3
 8003e56:	480e      	ldr	r0, [pc, #56]	@ (8003e90 <MX_TIM3_Init+0x16c>)
 8003e58:	f003 fc82 	bl	8007760 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = MAIN_CH2_Pin|MAIN_CH3_Pin;
 8003e5c:	23c0      	movs	r3, #192	@ 0xc0
 8003e5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003e60:	2302      	movs	r3, #2
 8003e62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003e70:	2302      	movs	r3, #2
 8003e72:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e74:	1d3b      	adds	r3, r7, #4
 8003e76:	4619      	mov	r1, r3
 8003e78:	4806      	ldr	r0, [pc, #24]	@ (8003e94 <MX_TIM3_Init+0x170>)
 8003e7a:	f003 fc71 	bl	8007760 <LL_GPIO_Init>

}
 8003e7e:	bf00      	nop
 8003e80:	3750      	adds	r7, #80	@ 0x50
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	fff04e20 	.word	0xfff04e20
 8003e8c:	40000400 	.word	0x40000400
 8003e90:	40020400 	.word	0x40020400
 8003e94:	40020800 	.word	0x40020800

08003e98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b094      	sub	sp, #80	@ 0x50
 8003e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003e9e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	605a      	str	r2, [r3, #4]
 8003ea8:	609a      	str	r2, [r3, #8]
 8003eaa:	60da      	str	r2, [r3, #12]
 8003eac:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003eae:	f107 031c 	add.w	r3, r7, #28
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f009 fb27 	bl	800d50a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ebc:	1d3b      	adds	r3, r7, #4
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	605a      	str	r2, [r3, #4]
 8003ec4:	609a      	str	r2, [r3, #8]
 8003ec6:	60da      	str	r2, [r3, #12]
 8003ec8:	611a      	str	r2, [r3, #16]
 8003eca:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8003ecc:	2004      	movs	r0, #4
 8003ece:	f7ff fc8b 	bl	80037e8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 4;
 8003ed2:	2304      	movs	r3, #4
 8003ed4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 64220-LL_TIM_IC_FILTER_FDIV1_N2;
 8003eda:	4b41      	ldr	r3, [pc, #260]	@ (8003fe0 <MX_TIM4_Init+0x148>)
 8003edc:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8003ee2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	483e      	ldr	r0, [pc, #248]	@ (8003fe4 <MX_TIM4_Init+0x14c>)
 8003eea:	f003 fed9 	bl	8007ca0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8003eee:	483d      	ldr	r0, [pc, #244]	@ (8003fe4 <MX_TIM4_Init+0x14c>)
 8003ef0:	f7ff fa35 	bl	800335e <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	483b      	ldr	r0, [pc, #236]	@ (8003fe4 <MX_TIM4_Init+0x14c>)
 8003ef8:	f7ff facc 	bl	8003494 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH2);
 8003efc:	2110      	movs	r1, #16
 8003efe:	4839      	ldr	r0, [pc, #228]	@ (8003fe4 <MX_TIM4_Init+0x14c>)
 8003f00:	f7ff fa84 	bl	800340c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003f04:	2360      	movs	r3, #96	@ 0x60
 8003f06:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003f14:	2300      	movs	r3, #0
 8003f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8003f18:	f107 031c 	add.w	r3, r7, #28
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	2110      	movs	r1, #16
 8003f20:	4830      	ldr	r0, [pc, #192]	@ (8003fe4 <MX_TIM4_Init+0x14c>)
 8003f22:	f003 ff57 	bl	8007dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 8003f26:	2110      	movs	r1, #16
 8003f28:	482e      	ldr	r0, [pc, #184]	@ (8003fe4 <MX_TIM4_Init+0x14c>)
 8003f2a:	f7ff fa29 	bl	8003380 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH3);
 8003f2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f32:	482c      	ldr	r0, [pc, #176]	@ (8003fe4 <MX_TIM4_Init+0x14c>)
 8003f34:	f7ff fa6a 	bl	800340c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8003f38:	f107 031c 	add.w	r3, r7, #28
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f42:	4828      	ldr	r0, [pc, #160]	@ (8003fe4 <MX_TIM4_Init+0x14c>)
 8003f44:	f003 ff46 	bl	8007dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 8003f48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f4c:	4825      	ldr	r0, [pc, #148]	@ (8003fe4 <MX_TIM4_Init+0x14c>)
 8003f4e:	f7ff fa17 	bl	8003380 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH4);
 8003f52:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f56:	4823      	ldr	r0, [pc, #140]	@ (8003fe4 <MX_TIM4_Init+0x14c>)
 8003f58:	f7ff fa58 	bl	800340c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003f5c:	f107 031c 	add.w	r3, r7, #28
 8003f60:	461a      	mov	r2, r3
 8003f62:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f66:	481f      	ldr	r0, [pc, #124]	@ (8003fe4 <MX_TIM4_Init+0x14c>)
 8003f68:	f003 ff34 	bl	8007dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH4);
 8003f6c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f70:	481c      	ldr	r0, [pc, #112]	@ (8003fe4 <MX_TIM4_Init+0x14c>)
 8003f72:	f7ff fa05 	bl	8003380 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8003f76:	2100      	movs	r1, #0
 8003f78:	481a      	ldr	r0, [pc, #104]	@ (8003fe4 <MX_TIM4_Init+0x14c>)
 8003f7a:	f7ff faa0 	bl	80034be <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8003f7e:	4819      	ldr	r0, [pc, #100]	@ (8003fe4 <MX_TIM4_Init+0x14c>)
 8003f80:	f7ff fab0 	bl	80034e4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8003f84:	2008      	movs	r0, #8
 8003f86:	f7ff fc17 	bl	80037b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003f8a:	2002      	movs	r0, #2
 8003f8c:	f7ff fc14 	bl	80037b8 <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PD14   ------> TIM4_CH3
  PD15   ------> TIM4_CH4
  PB7   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = Buzzer_Pin|MAIN_CH4_Pin;
 8003f90:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003f94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003f96:	2302      	movs	r3, #2
 8003f98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003faa:	1d3b      	adds	r3, r7, #4
 8003fac:	4619      	mov	r1, r3
 8003fae:	480e      	ldr	r0, [pc, #56]	@ (8003fe8 <MX_TIM4_Init+0x150>)
 8003fb0:	f003 fbd6 	bl	8007760 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = MAIN_CH1_Pin;
 8003fb4:	2380      	movs	r3, #128	@ 0x80
 8003fb6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003fb8:	2302      	movs	r3, #2
 8003fba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(MAIN_CH1_GPIO_Port, &GPIO_InitStruct);
 8003fcc:	1d3b      	adds	r3, r7, #4
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4806      	ldr	r0, [pc, #24]	@ (8003fec <MX_TIM4_Init+0x154>)
 8003fd2:	f003 fbc5 	bl	8007760 <LL_GPIO_Init>

}
 8003fd6:	bf00      	nop
 8003fd8:	3750      	adds	r7, #80	@ 0x50
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	fff0fadc 	.word	0xfff0fadc
 8003fe4:	40000800 	.word	0x40000800
 8003fe8:	40020c00 	.word	0x40020c00
 8003fec:	40020400 	.word	0x40020400

08003ff0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b094      	sub	sp, #80	@ 0x50
 8003ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003ff6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	605a      	str	r2, [r3, #4]
 8004000:	609a      	str	r2, [r3, #8]
 8004002:	60da      	str	r2, [r3, #12]
 8004004:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004006:	f107 031c 	add.w	r3, r7, #28
 800400a:	2220      	movs	r2, #32
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f009 fa7b 	bl	800d50a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004014:	1d3b      	adds	r3, r7, #4
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	605a      	str	r2, [r3, #4]
 800401c:	609a      	str	r2, [r3, #8]
 800401e:	60da      	str	r2, [r3, #12]
 8004020:	611a      	str	r2, [r3, #16]
 8004022:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8004024:	2008      	movs	r0, #8
 8004026:	f7ff fbdf 	bl	80037e8 <LL_APB1_GRP1_EnableClock>

  /* TIM5 interrupt Init */
  NVIC_SetPriority(TIM5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 800402a:	f7ff f83b 	bl	80030a4 <__NVIC_GetPriorityGrouping>
 800402e:	4603      	mov	r3, r0
 8004030:	2200      	movs	r2, #0
 8004032:	2103      	movs	r1, #3
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff f88b 	bl	8003150 <NVIC_EncodePriority>
 800403a:	4603      	mov	r3, r0
 800403c:	4619      	mov	r1, r3
 800403e:	2032      	movs	r0, #50	@ 0x32
 8004040:	f7ff f85c 	bl	80030fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8004044:	2032      	movs	r0, #50	@ 0x32
 8004046:	f7ff f83b 	bl	80030c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 800404a:	2353      	movs	r3, #83	@ 0x53
 800404c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800404e:	2300      	movs	r3, #0
 8004050:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 20000-LL_TIM_IC_FILTER_FDIV1_N2;
 8004052:	4b3f      	ldr	r3, [pc, #252]	@ (8004150 <MX_TIM5_Init+0x160>)
 8004054:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004056:	2300      	movs	r3, #0
 8004058:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 800405a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800405e:	4619      	mov	r1, r3
 8004060:	483c      	ldr	r0, [pc, #240]	@ (8004154 <MX_TIM5_Init+0x164>)
 8004062:	f003 fe1d 	bl	8007ca0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8004066:	483b      	ldr	r0, [pc, #236]	@ (8004154 <MX_TIM5_Init+0x164>)
 8004068:	f7ff f979 	bl	800335e <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 800406c:	2100      	movs	r1, #0
 800406e:	4839      	ldr	r0, [pc, #228]	@ (8004154 <MX_TIM5_Init+0x164>)
 8004070:	f7ff fa10 	bl	8003494 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 8004074:	2101      	movs	r1, #1
 8004076:	4837      	ldr	r0, [pc, #220]	@ (8004154 <MX_TIM5_Init+0x164>)
 8004078:	f7ff f9c8 	bl	800340c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800407c:	2360      	movs	r3, #96	@ 0x60
 800407e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004080:	2300      	movs	r3, #0
 8004082:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004084:	2300      	movs	r3, #0
 8004086:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 8004088:	4b33      	ldr	r3, [pc, #204]	@ (8004158 <MX_TIM5_Init+0x168>)
 800408a:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800408c:	2300      	movs	r3, #0
 800408e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8004090:	f107 031c 	add.w	r3, r7, #28
 8004094:	461a      	mov	r2, r3
 8004096:	2101      	movs	r1, #1
 8004098:	482e      	ldr	r0, [pc, #184]	@ (8004154 <MX_TIM5_Init+0x164>)
 800409a:	f003 fe9b 	bl	8007dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH1);
 800409e:	2101      	movs	r1, #1
 80040a0:	482c      	ldr	r0, [pc, #176]	@ (8004154 <MX_TIM5_Init+0x164>)
 80040a2:	f7ff f96d 	bl	8003380 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 80040a6:	2110      	movs	r1, #16
 80040a8:	482a      	ldr	r0, [pc, #168]	@ (8004154 <MX_TIM5_Init+0x164>)
 80040aa:	f7ff f9af 	bl	800340c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80040ae:	f107 031c 	add.w	r3, r7, #28
 80040b2:	461a      	mov	r2, r3
 80040b4:	2110      	movs	r1, #16
 80040b6:	4827      	ldr	r0, [pc, #156]	@ (8004154 <MX_TIM5_Init+0x164>)
 80040b8:	f003 fe8c 	bl	8007dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH2);
 80040bc:	2110      	movs	r1, #16
 80040be:	4825      	ldr	r0, [pc, #148]	@ (8004154 <MX_TIM5_Init+0x164>)
 80040c0:	f7ff f95e 	bl	8003380 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 80040c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80040c8:	4822      	ldr	r0, [pc, #136]	@ (8004154 <MX_TIM5_Init+0x164>)
 80040ca:	f7ff f99f 	bl	800340c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80040ce:	f107 031c 	add.w	r3, r7, #28
 80040d2:	461a      	mov	r2, r3
 80040d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80040d8:	481e      	ldr	r0, [pc, #120]	@ (8004154 <MX_TIM5_Init+0x164>)
 80040da:	f003 fe7b 	bl	8007dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH3);
 80040de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80040e2:	481c      	ldr	r0, [pc, #112]	@ (8004154 <MX_TIM5_Init+0x164>)
 80040e4:	f7ff f94c 	bl	8003380 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 80040e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80040ec:	4819      	ldr	r0, [pc, #100]	@ (8004154 <MX_TIM5_Init+0x164>)
 80040ee:	f7ff f98d 	bl	800340c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80040f2:	f107 031c 	add.w	r3, r7, #28
 80040f6:	461a      	mov	r2, r3
 80040f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80040fc:	4815      	ldr	r0, [pc, #84]	@ (8004154 <MX_TIM5_Init+0x164>)
 80040fe:	f003 fe69 	bl	8007dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH4);
 8004102:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004106:	4813      	ldr	r0, [pc, #76]	@ (8004154 <MX_TIM5_Init+0x164>)
 8004108:	f7ff f93a 	bl	8003380 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 800410c:	2100      	movs	r1, #0
 800410e:	4811      	ldr	r0, [pc, #68]	@ (8004154 <MX_TIM5_Init+0x164>)
 8004110:	f7ff f9d5 	bl	80034be <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8004114:	480f      	ldr	r0, [pc, #60]	@ (8004154 <MX_TIM5_Init+0x164>)
 8004116:	f7ff f9e5 	bl	80034e4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM5);
 800411a:	480e      	ldr	r0, [pc, #56]	@ (8004154 <MX_TIM5_Init+0x164>)
 800411c:	f7ff f9f2 	bl	8003504 <LL_TIM_EnableIT_UPDATE>

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004120:	2001      	movs	r0, #1
 8004122:	f7ff fb49 	bl	80037b8 <LL_AHB1_GRP1_EnableClock>
  PA0-WKUP   ------> TIM5_CH1
  PA1   ------> TIM5_CH2
  PA2   ------> TIM5_CH3
  PA3   ------> TIM5_CH4
  */
  GPIO_InitStruct.Pin = MAIN_CH5_Pin|MAIN_CH6_Pin|MAIN_CH7_Pin|MAIN_CH8_Pin;
 8004126:	230f      	movs	r3, #15
 8004128:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800412a:	2302      	movs	r3, #2
 800412c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004132:	2300      	movs	r3, #0
 8004134:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800413a:	2302      	movs	r3, #2
 800413c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800413e:	1d3b      	adds	r3, r7, #4
 8004140:	4619      	mov	r1, r3
 8004142:	4806      	ldr	r0, [pc, #24]	@ (800415c <MX_TIM5_Init+0x16c>)
 8004144:	f003 fb0c 	bl	8007760 <LL_GPIO_Init>

}
 8004148:	bf00      	nop
 800414a:	3750      	adds	r7, #80	@ 0x50
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	fff04e20 	.word	0xfff04e20
 8004154:	40000c00 	.word	0x40000c00
 8004158:	fff003e8 	.word	0xfff003e8
 800415c:	40020000 	.word	0x40020000

08004160 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08e      	sub	sp, #56	@ 0x38
 8004164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004166:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	605a      	str	r2, [r3, #4]
 8004170:	609a      	str	r2, [r3, #8]
 8004172:	60da      	str	r2, [r3, #12]
 8004174:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004176:	1d3b      	adds	r3, r7, #4
 8004178:	2220      	movs	r2, #32
 800417a:	2100      	movs	r1, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f009 f9c4 	bl	800d50a <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM13);
 8004182:	2080      	movs	r0, #128	@ 0x80
 8004184:	f7ff fb30 	bl	80037e8 <LL_APB1_GRP1_EnableClock>

  /* TIM13 interrupt Init */
  NVIC_SetPriority(TIM8_UP_TIM13_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 8004188:	f7fe ff8c 	bl	80030a4 <__NVIC_GetPriorityGrouping>
 800418c:	4603      	mov	r3, r0
 800418e:	2200      	movs	r2, #0
 8004190:	2104      	movs	r1, #4
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe ffdc 	bl	8003150 <NVIC_EncodePriority>
 8004198:	4603      	mov	r3, r0
 800419a:	4619      	mov	r1, r3
 800419c:	202c      	movs	r0, #44	@ 0x2c
 800419e:	f7fe ffad 	bl	80030fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80041a2:	202c      	movs	r0, #44	@ 0x2c
 80041a4:	f7fe ff8c 	bl	80030c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  TIM_InitStruct.Prescaler = 1;
 80041a8:	2301      	movs	r3, #1
 80041aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80041ac:	2300      	movs	r3, #0
 80041ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_InitStruct.Autoreload = 42000-LL_TIM_IC_FILTER_FDIV1_N2;
 80041b0:	4b13      	ldr	r3, [pc, #76]	@ (8004200 <MX_TIM13_Init+0xa0>)
 80041b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80041b4:	2300      	movs	r3, #0
 80041b6:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_Init(TIM13, &TIM_InitStruct);
 80041b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041bc:	4619      	mov	r1, r3
 80041be:	4811      	ldr	r0, [pc, #68]	@ (8004204 <MX_TIM13_Init+0xa4>)
 80041c0:	f003 fd6e 	bl	8007ca0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM13);
 80041c4:	480f      	ldr	r0, [pc, #60]	@ (8004204 <MX_TIM13_Init+0xa4>)
 80041c6:	f7ff f8ca 	bl	800335e <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 80041ca:	2300      	movs	r3, #0
 80041cc:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM13, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80041de:	1d3b      	adds	r3, r7, #4
 80041e0:	461a      	mov	r2, r3
 80041e2:	2101      	movs	r1, #1
 80041e4:	4807      	ldr	r0, [pc, #28]	@ (8004204 <MX_TIM13_Init+0xa4>)
 80041e6:	f003 fdf5 	bl	8007dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM13, LL_TIM_CHANNEL_CH1);
 80041ea:	2101      	movs	r1, #1
 80041ec:	4805      	ldr	r0, [pc, #20]	@ (8004204 <MX_TIM13_Init+0xa4>)
 80041ee:	f7ff f8c7 	bl	8003380 <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM13_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM13);
 80041f2:	4804      	ldr	r0, [pc, #16]	@ (8004204 <MX_TIM13_Init+0xa4>)
 80041f4:	f7ff f986 	bl	8003504 <LL_TIM_EnableIT_UPDATE>

  /* USER CODE END TIM13_Init 2 */

}
 80041f8:	bf00      	nop
 80041fa:	3738      	adds	r7, #56	@ 0x38
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	fff0a410 	.word	0xfff0a410
 8004204:	40001c00 	.word	0x40001c00

08004208 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08e      	sub	sp, #56	@ 0x38
 800420c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800420e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	605a      	str	r2, [r3, #4]
 8004218:	609a      	str	r2, [r3, #8]
 800421a:	60da      	str	r2, [r3, #12]
 800421c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800421e:	1d3b      	adds	r3, r7, #4
 8004220:	2220      	movs	r2, #32
 8004222:	2100      	movs	r1, #0
 8004224:	4618      	mov	r0, r3
 8004226:	f009 f970 	bl	800d50a <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM14);
 800422a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800422e:	f7ff fadb 	bl	80037e8 <LL_APB1_GRP1_EnableClock>

  /* TIM14 interrupt Init */
  NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 8004232:	f7fe ff37 	bl	80030a4 <__NVIC_GetPriorityGrouping>
 8004236:	4603      	mov	r3, r0
 8004238:	2200      	movs	r2, #0
 800423a:	2104      	movs	r1, #4
 800423c:	4618      	mov	r0, r3
 800423e:	f7fe ff87 	bl	8003150 <NVIC_EncodePriority>
 8004242:	4603      	mov	r3, r0
 8004244:	4619      	mov	r1, r3
 8004246:	202d      	movs	r0, #45	@ 0x2d
 8004248:	f7fe ff58 	bl	80030fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800424c:	202d      	movs	r0, #45	@ 0x2d
 800424e:	f7fe ff37 	bl	80030c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8004252:	2300      	movs	r3, #0
 8004254:	84bb      	strh	r3, [r7, #36]	@ 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004256:	2300      	movs	r3, #0
 8004258:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_InitStruct.Autoreload = 84-LL_TIM_IC_FILTER_FDIV1_N2;
 800425a:	4b14      	ldr	r3, [pc, #80]	@ (80042ac <MX_TIM14_Init+0xa4>)
 800425c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800425e:	2300      	movs	r3, #0
 8004260:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_Init(TIM14, &TIM_InitStruct);
 8004262:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004266:	4619      	mov	r1, r3
 8004268:	4811      	ldr	r0, [pc, #68]	@ (80042b0 <MX_TIM14_Init+0xa8>)
 800426a:	f003 fd19 	bl	8007ca0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM14);
 800426e:	4810      	ldr	r0, [pc, #64]	@ (80042b0 <MX_TIM14_Init+0xa8>)
 8004270:	f7ff f875 	bl	800335e <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8004274:	2300      	movs	r3, #0
 8004276:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004278:	2300      	movs	r3, #0
 800427a:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8004280:	2300      	movs	r3, #0
 8004282:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM14, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8004288:	1d3b      	adds	r3, r7, #4
 800428a:	461a      	mov	r2, r3
 800428c:	2101      	movs	r1, #1
 800428e:	4808      	ldr	r0, [pc, #32]	@ (80042b0 <MX_TIM14_Init+0xa8>)
 8004290:	f003 fda0 	bl	8007dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM14, LL_TIM_CHANNEL_CH1);
 8004294:	2101      	movs	r1, #1
 8004296:	4806      	ldr	r0, [pc, #24]	@ (80042b0 <MX_TIM14_Init+0xa8>)
 8004298:	f7ff f872 	bl	8003380 <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM14_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM14);
 800429c:	4804      	ldr	r0, [pc, #16]	@ (80042b0 <MX_TIM14_Init+0xa8>)
 800429e:	f7ff f931 	bl	8003504 <LL_TIM_EnableIT_UPDATE>

  /* USER CODE END TIM14_Init 2 */

}
 80042a2:	bf00      	nop
 80042a4:	3738      	adds	r7, #56	@ 0x38
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	fff00054 	.word	0xfff00054
 80042b0:	40002000 	.word	0x40002000

080042b4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08e      	sub	sp, #56	@ 0x38
 80042b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80042ba:	f107 031c 	add.w	r3, r7, #28
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	605a      	str	r2, [r3, #4]
 80042c4:	609a      	str	r2, [r3, #8]
 80042c6:	60da      	str	r2, [r3, #12]
 80042c8:	611a      	str	r2, [r3, #16]
 80042ca:	615a      	str	r2, [r3, #20]
 80042cc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042ce:	1d3b      	adds	r3, r7, #4
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	605a      	str	r2, [r3, #4]
 80042d6:	609a      	str	r2, [r3, #8]
 80042d8:	60da      	str	r2, [r3, #12]
 80042da:	611a      	str	r2, [r3, #16]
 80042dc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80042de:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80042e2:	f7ff fa81 	bl	80037e8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80042e6:	2004      	movs	r0, #4
 80042e8:	f7ff fa66 	bl	80037b8 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = GPS1_TX_Pin|GPS2_RX_Pin;
 80042ec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80042f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80042f2:	2302      	movs	r3, #2
 80042f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80042f6:	2303      	movs	r3, #3
 80042f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8004302:	2308      	movs	r3, #8
 8004304:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004306:	1d3b      	adds	r3, r7, #4
 8004308:	4619      	mov	r1, r3
 800430a:	4811      	ldr	r0, [pc, #68]	@ (8004350 <MX_UART4_Init+0x9c>)
 800430c:	f003 fa28 	bl	8007760 <LL_GPIO_Init>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8004310:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8004314:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004316:	2300      	movs	r3, #0
 8004318:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800431a:	2300      	movs	r3, #0
 800431c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800431e:	2300      	movs	r3, #0
 8004320:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004322:	230c      	movs	r3, #12
 8004324:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004326:	2300      	movs	r3, #0
 8004328:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800432a:	2300      	movs	r3, #0
 800432c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 800432e:	f107 031c 	add.w	r3, r7, #28
 8004332:	4619      	mov	r1, r3
 8004334:	4807      	ldr	r0, [pc, #28]	@ (8004354 <MX_UART4_Init+0xa0>)
 8004336:	f004 f9dd 	bl	80086f4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 800433a:	4806      	ldr	r0, [pc, #24]	@ (8004354 <MX_UART4_Init+0xa0>)
 800433c:	f7ff f902 	bl	8003544 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8004340:	4804      	ldr	r0, [pc, #16]	@ (8004354 <MX_UART4_Init+0xa0>)
 8004342:	f7ff f8ef 	bl	8003524 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004346:	bf00      	nop
 8004348:	3738      	adds	r7, #56	@ 0x38
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40020800 	.word	0x40020800
 8004354:	40004c00 	.word	0x40004c00

08004358 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b08e      	sub	sp, #56	@ 0x38
 800435c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800435e:	f107 031c 	add.w	r3, r7, #28
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	605a      	str	r2, [r3, #4]
 8004368:	609a      	str	r2, [r3, #8]
 800436a:	60da      	str	r2, [r3, #12]
 800436c:	611a      	str	r2, [r3, #16]
 800436e:	615a      	str	r2, [r3, #20]
 8004370:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004372:	1d3b      	adds	r3, r7, #4
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	605a      	str	r2, [r3, #4]
 800437a:	609a      	str	r2, [r3, #8]
 800437c:	60da      	str	r2, [r3, #12]
 800437e:	611a      	str	r2, [r3, #16]
 8004380:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8004382:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8004386:	f7ff fa2f 	bl	80037e8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800438a:	2004      	movs	r0, #4
 800438c:	f7ff fa14 	bl	80037b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8004390:	2008      	movs	r0, #8
 8004392:	f7ff fa11 	bl	80037b8 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = GPS2_TX_Pin;
 8004396:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800439a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800439c:	2302      	movs	r3, #2
 800439e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80043a0:	2303      	movs	r3, #3
 80043a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80043ac:	2308      	movs	r3, #8
 80043ae:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPS2_TX_GPIO_Port, &GPIO_InitStruct);
 80043b0:	1d3b      	adds	r3, r7, #4
 80043b2:	4619      	mov	r1, r3
 80043b4:	4821      	ldr	r0, [pc, #132]	@ (800443c <MX_UART5_Init+0xe4>)
 80043b6:	f003 f9d3 	bl	8007760 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = GPS2_RXD2_Pin;
 80043ba:	2304      	movs	r3, #4
 80043bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80043be:	2302      	movs	r3, #2
 80043c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80043c2:	2303      	movs	r3, #3
 80043c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80043ce:	2308      	movs	r3, #8
 80043d0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPS2_RXD2_GPIO_Port, &GPIO_InitStruct);
 80043d2:	1d3b      	adds	r3, r7, #4
 80043d4:	4619      	mov	r1, r3
 80043d6:	481a      	ldr	r0, [pc, #104]	@ (8004440 <MX_UART5_Init+0xe8>)
 80043d8:	f003 f9c2 	bl	8007760 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 80043dc:	f7fe fe62 	bl	80030a4 <__NVIC_GetPriorityGrouping>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2200      	movs	r2, #0
 80043e4:	2102      	movs	r1, #2
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe feb2 	bl	8003150 <NVIC_EncodePriority>
 80043ec:	4603      	mov	r3, r0
 80043ee:	4619      	mov	r1, r3
 80043f0:	2035      	movs	r0, #53	@ 0x35
 80043f2:	f7fe fe83 	bl	80030fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 80043f6:	2035      	movs	r0, #53	@ 0x35
 80043f8:	f7fe fe62 	bl	80030c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80043fc:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8004400:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004402:	2300      	movs	r3, #0
 8004404:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004406:	2300      	movs	r3, #0
 8004408:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800440a:	2300      	movs	r3, #0
 800440c:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800440e:	230c      	movs	r3, #12
 8004410:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004412:	2300      	movs	r3, #0
 8004414:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004416:	2300      	movs	r3, #0
 8004418:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 800441a:	f107 031c 	add.w	r3, r7, #28
 800441e:	4619      	mov	r1, r3
 8004420:	4808      	ldr	r0, [pc, #32]	@ (8004444 <MX_UART5_Init+0xec>)
 8004422:	f004 f967 	bl	80086f4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8004426:	4807      	ldr	r0, [pc, #28]	@ (8004444 <MX_UART5_Init+0xec>)
 8004428:	f7ff f88c 	bl	8003544 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 800442c:	4805      	ldr	r0, [pc, #20]	@ (8004444 <MX_UART5_Init+0xec>)
 800442e:	f7ff f879 	bl	8003524 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004432:	bf00      	nop
 8004434:	3738      	adds	r7, #56	@ 0x38
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40020800 	.word	0x40020800
 8004440:	40020c00 	.word	0x40020c00
 8004444:	40005000 	.word	0x40005000

08004448 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08e      	sub	sp, #56	@ 0x38
 800444c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800444e:	f107 031c 	add.w	r3, r7, #28
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	605a      	str	r2, [r3, #4]
 8004458:	609a      	str	r2, [r3, #8]
 800445a:	60da      	str	r2, [r3, #12]
 800445c:	611a      	str	r2, [r3, #16]
 800445e:	615a      	str	r2, [r3, #20]
 8004460:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004462:	1d3b      	adds	r3, r7, #4
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	605a      	str	r2, [r3, #4]
 800446a:	609a      	str	r2, [r3, #8]
 800446c:	60da      	str	r2, [r3, #12]
 800446e:	611a      	str	r2, [r3, #16]
 8004470:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8004472:	2010      	movs	r0, #16
 8004474:	f7ff f9d0 	bl	8003818 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004478:	2001      	movs	r0, #1
 800447a:	f7ff f99d 	bl	80037b8 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = RC_SRXL2_Pin;
 800447e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004482:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004484:	2302      	movs	r3, #2
 8004486:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004488:	2303      	movs	r3, #3
 800448a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800448c:	2300      	movs	r3, #0
 800448e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8004490:	2301      	movs	r3, #1
 8004492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004494:	2307      	movs	r3, #7
 8004496:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(RC_SRXL2_GPIO_Port, &GPIO_InitStruct);
 8004498:	1d3b      	adds	r3, r7, #4
 800449a:	4619      	mov	r1, r3
 800449c:	4817      	ldr	r0, [pc, #92]	@ (80044fc <MX_USART1_UART_Init+0xb4>)
 800449e:	f003 f95f 	bl	8007760 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80044a2:	f7fe fdff 	bl	80030a4 <__NVIC_GetPriorityGrouping>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2200      	movs	r2, #0
 80044aa:	2100      	movs	r1, #0
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fe fe4f 	bl	8003150 <NVIC_EncodePriority>
 80044b2:	4603      	mov	r3, r0
 80044b4:	4619      	mov	r1, r3
 80044b6:	2025      	movs	r0, #37	@ 0x25
 80044b8:	f7fe fe20 	bl	80030fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80044bc:	2025      	movs	r0, #37	@ 0x25
 80044be:	f7fe fdff 	bl	80030c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80044c2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80044c6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80044c8:	2300      	movs	r3, #0
 80044ca:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80044cc:	2300      	movs	r3, #0
 80044ce:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80044d0:	2300      	movs	r3, #0
 80044d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80044d4:	230c      	movs	r3, #12
 80044d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80044d8:	2300      	movs	r3, #0
 80044da:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80044dc:	f107 031c 	add.w	r3, r7, #28
 80044e0:	4619      	mov	r1, r3
 80044e2:	4807      	ldr	r0, [pc, #28]	@ (8004500 <MX_USART1_UART_Init+0xb8>)
 80044e4:	f004 f906 	bl	80086f4 <LL_USART_Init>
  LL_USART_Enable(USART1);
 80044e8:	4805      	ldr	r0, [pc, #20]	@ (8004500 <MX_USART1_UART_Init+0xb8>)
 80044ea:	f7ff f81b 	bl	8003524 <LL_USART_Enable>
  LL_USART_ConfigHalfDuplexMode(USART1);
 80044ee:	4804      	ldr	r0, [pc, #16]	@ (8004500 <MX_USART1_UART_Init+0xb8>)
 80044f0:	f7ff f83e 	bl	8003570 <LL_USART_ConfigHalfDuplexMode>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80044f4:	bf00      	nop
 80044f6:	3738      	adds	r7, #56	@ 0x38
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40020000 	.word	0x40020000
 8004500:	40011000 	.word	0x40011000

08004504 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08e      	sub	sp, #56	@ 0x38
 8004508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800450a:	f107 031c 	add.w	r3, r7, #28
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	605a      	str	r2, [r3, #4]
 8004514:	609a      	str	r2, [r3, #8]
 8004516:	60da      	str	r2, [r3, #12]
 8004518:	611a      	str	r2, [r3, #16]
 800451a:	615a      	str	r2, [r3, #20]
 800451c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800451e:	1d3b      	adds	r3, r7, #4
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	605a      	str	r2, [r3, #4]
 8004526:	609a      	str	r2, [r3, #8]
 8004528:	60da      	str	r2, [r3, #12]
 800452a:	611a      	str	r2, [r3, #16]
 800452c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800452e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8004532:	f7ff f959 	bl	80037e8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8004536:	2008      	movs	r0, #8
 8004538:	f7ff f93e 	bl	80037b8 <LL_AHB1_GRP1_EnableClock>
  PD3   ------> USART2_CTS
  PD4   ------> USART2_RTS
  PD5   ------> USART2_TX
  PD6   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|Telm1_TX_Pin|Telm1_RX_Pin;
 800453c:	2378      	movs	r3, #120	@ 0x78
 800453e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004540:	2302      	movs	r3, #2
 8004542:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004544:	2303      	movs	r3, #3
 8004546:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004548:	2300      	movs	r3, #0
 800454a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004550:	2307      	movs	r3, #7
 8004552:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004554:	1d3b      	adds	r3, r7, #4
 8004556:	4619      	mov	r1, r3
 8004558:	4818      	ldr	r0, [pc, #96]	@ (80045bc <MX_USART2_UART_Init+0xb8>)
 800455a:	f003 f901 	bl	8007760 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 800455e:	f7fe fda1 	bl	80030a4 <__NVIC_GetPriorityGrouping>
 8004562:	4603      	mov	r3, r0
 8004564:	2200      	movs	r2, #0
 8004566:	2102      	movs	r1, #2
 8004568:	4618      	mov	r0, r3
 800456a:	f7fe fdf1 	bl	8003150 <NVIC_EncodePriority>
 800456e:	4603      	mov	r3, r0
 8004570:	4619      	mov	r1, r3
 8004572:	2026      	movs	r0, #38	@ 0x26
 8004574:	f7fe fdc2 	bl	80030fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8004578:	2026      	movs	r0, #38	@ 0x26
 800457a:	f7fe fda1 	bl	80030c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 57600;
 800457e:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8004582:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004584:	2300      	movs	r3, #0
 8004586:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004588:	2300      	movs	r3, #0
 800458a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800458c:	2300      	movs	r3, #0
 800458e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004590:	230c      	movs	r3, #12
 8004592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004594:	2300      	movs	r3, #0
 8004596:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004598:	2300      	movs	r3, #0
 800459a:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800459c:	f107 031c 	add.w	r3, r7, #28
 80045a0:	4619      	mov	r1, r3
 80045a2:	4807      	ldr	r0, [pc, #28]	@ (80045c0 <MX_USART2_UART_Init+0xbc>)
 80045a4:	f004 f8a6 	bl	80086f4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80045a8:	4805      	ldr	r0, [pc, #20]	@ (80045c0 <MX_USART2_UART_Init+0xbc>)
 80045aa:	f7fe ffcb 	bl	8003544 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80045ae:	4804      	ldr	r0, [pc, #16]	@ (80045c0 <MX_USART2_UART_Init+0xbc>)
 80045b0:	f7fe ffb8 	bl	8003524 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80045b4:	bf00      	nop
 80045b6:	3738      	adds	r7, #56	@ 0x38
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40020c00 	.word	0x40020c00
 80045c0:	40004400 	.word	0x40004400

080045c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08e      	sub	sp, #56	@ 0x38
 80045c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80045ca:	f107 031c 	add.w	r3, r7, #28
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	605a      	str	r2, [r3, #4]
 80045d4:	609a      	str	r2, [r3, #8]
 80045d6:	60da      	str	r2, [r3, #12]
 80045d8:	611a      	str	r2, [r3, #16]
 80045da:	615a      	str	r2, [r3, #20]
 80045dc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045de:	1d3b      	adds	r3, r7, #4
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	605a      	str	r2, [r3, #4]
 80045e6:	609a      	str	r2, [r3, #8]
 80045e8:	60da      	str	r2, [r3, #12]
 80045ea:	611a      	str	r2, [r3, #16]
 80045ec:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80045ee:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80045f2:	f7ff f8f9 	bl	80037e8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80045f6:	2008      	movs	r0, #8
 80045f8:	f7ff f8de 	bl	80037b8 <LL_AHB1_GRP1_EnableClock>
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  PD11   ------> USART3_CTS
  PD12   ------> USART3_RTS
  */
  GPIO_InitStruct.Pin = Telm2_TX_Pin|Telm2_RX_Pin|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 80045fc:	f44f 53d8 	mov.w	r3, #6912	@ 0x1b00
 8004600:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004602:	2302      	movs	r3, #2
 8004604:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004606:	2303      	movs	r3, #3
 8004608:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800460a:	2300      	movs	r3, #0
 800460c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004612:	2307      	movs	r3, #7
 8004614:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004616:	1d3b      	adds	r3, r7, #4
 8004618:	4619      	mov	r1, r3
 800461a:	4819      	ldr	r0, [pc, #100]	@ (8004680 <MX_USART3_UART_Init+0xbc>)
 800461c:	f003 f8a0 	bl	8007760 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8004620:	f7fe fd40 	bl	80030a4 <__NVIC_GetPriorityGrouping>
 8004624:	4603      	mov	r3, r0
 8004626:	2200      	movs	r2, #0
 8004628:	2102      	movs	r1, #2
 800462a:	4618      	mov	r0, r3
 800462c:	f7fe fd90 	bl	8003150 <NVIC_EncodePriority>
 8004630:	4603      	mov	r3, r0
 8004632:	4619      	mov	r1, r3
 8004634:	2027      	movs	r0, #39	@ 0x27
 8004636:	f7fe fd61 	bl	80030fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 800463a:	2027      	movs	r0, #39	@ 0x27
 800463c:	f7fe fd40 	bl	80030c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8004640:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8004644:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004646:	2300      	movs	r3, #0
 8004648:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800464a:	2300      	movs	r3, #0
 800464c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800464e:	2300      	movs	r3, #0
 8004650:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004652:	230c      	movs	r3, #12
 8004654:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004656:	2300      	movs	r3, #0
 8004658:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800465a:	2300      	movs	r3, #0
 800465c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 800465e:	f107 031c 	add.w	r3, r7, #28
 8004662:	4619      	mov	r1, r3
 8004664:	4807      	ldr	r0, [pc, #28]	@ (8004684 <MX_USART3_UART_Init+0xc0>)
 8004666:	f004 f845 	bl	80086f4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800466a:	4806      	ldr	r0, [pc, #24]	@ (8004684 <MX_USART3_UART_Init+0xc0>)
 800466c:	f7fe ff6a 	bl	8003544 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8004670:	4804      	ldr	r0, [pc, #16]	@ (8004684 <MX_USART3_UART_Init+0xc0>)
 8004672:	f7fe ff57 	bl	8003524 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004676:	bf00      	nop
 8004678:	3738      	adds	r7, #56	@ 0x38
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	40020c00 	.word	0x40020c00
 8004684:	40004800 	.word	0x40004800

08004688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800468e:	f107 0318 	add.w	r3, r7, #24
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004698:	463b      	mov	r3, r7
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	605a      	str	r2, [r3, #4]
 80046a0:	609a      	str	r2, [r3, #8]
 80046a2:	60da      	str	r2, [r3, #12]
 80046a4:	611a      	str	r2, [r3, #16]
 80046a6:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 80046a8:	2010      	movs	r0, #16
 80046aa:	f7ff f885 	bl	80037b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80046ae:	2080      	movs	r0, #128	@ 0x80
 80046b0:	f7ff f882 	bl	80037b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80046b4:	2004      	movs	r0, #4
 80046b6:	f7ff f87f 	bl	80037b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80046ba:	2001      	movs	r0, #1
 80046bc:	f7ff f87c 	bl	80037b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80046c0:	2002      	movs	r0, #2
 80046c2:	f7ff f879 	bl	80037b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80046c6:	2008      	movs	r0, #8
 80046c8:	f7ff f876 	bl	80037b8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LED_BLUE_Pin|GYRO1_NSS_Pin|LED_RED_Pin|LED_YELLOW_Pin);
 80046cc:	2127      	movs	r1, #39	@ 0x27
 80046ce:	4830      	ldr	r0, [pc, #192]	@ (8004790 <MX_GPIO_Init+0x108>)
 80046d0:	f7ff f83e 	bl	8003750 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPS1_SW_LED_GPIO_Port, GPS1_SW_LED_Pin);
 80046d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80046d8:	482e      	ldr	r0, [pc, #184]	@ (8004794 <MX_GPIO_Init+0x10c>)
 80046da:	f7ff f839 	bl	8003750 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_BLUE_Pin|GYRO1_NSS_Pin|LED_RED_Pin|LED_YELLOW_Pin;
 80046de:	2327      	movs	r3, #39	@ 0x27
 80046e0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80046e2:	2301      	movs	r3, #1
 80046e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80046ee:	2300      	movs	r3, #0
 80046f0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80046f2:	463b      	mov	r3, r7
 80046f4:	4619      	mov	r1, r3
 80046f6:	4826      	ldr	r0, [pc, #152]	@ (8004790 <MX_GPIO_Init+0x108>)
 80046f8:	f003 f832 	bl	8007760 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GPS1_SW_LED_Pin;
 80046fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004700:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004702:	2301      	movs	r3, #1
 8004704:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004706:	2300      	movs	r3, #0
 8004708:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800470a:	2300      	movs	r3, #0
 800470c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800470e:	2300      	movs	r3, #0
 8004710:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPS1_SW_LED_GPIO_Port, &GPIO_InitStruct);
 8004712:	463b      	mov	r3, r7
 8004714:	4619      	mov	r1, r3
 8004716:	481f      	ldr	r0, [pc, #124]	@ (8004794 <MX_GPIO_Init+0x10c>)
 8004718:	f003 f822 	bl	8007760 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE14);
 800471c:	491e      	ldr	r1, [pc, #120]	@ (8004798 <MX_GPIO_Init+0x110>)
 800471e:	2004      	movs	r0, #4
 8004720:	f7fe ff66 	bl	80035f0 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8004724:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004728:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800472a:	2301      	movs	r3, #1
 800472c:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800472e:	2300      	movs	r3, #0
 8004730:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8004732:	2302      	movs	r3, #2
 8004734:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8004736:	f107 0318 	add.w	r3, r7, #24
 800473a:	4618      	mov	r0, r3
 800473c:	f002 fe46 	bl	80073cc <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(PPM_IN_GPIO_Port, PPM_IN_Pin, LL_GPIO_PULL_NO);
 8004740:	2200      	movs	r2, #0
 8004742:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004746:	4812      	ldr	r0, [pc, #72]	@ (8004790 <MX_GPIO_Init+0x108>)
 8004748:	f7fe ffc5 	bl	80036d6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(PPM_IN_GPIO_Port, PPM_IN_Pin, LL_GPIO_MODE_INPUT);
 800474c:	2200      	movs	r2, #0
 800474e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004752:	480f      	ldr	r0, [pc, #60]	@ (8004790 <MX_GPIO_Init+0x108>)
 8004754:	f7fe ff82 	bl	800365c <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004758:	f7fe fca4 	bl	80030a4 <__NVIC_GetPriorityGrouping>
 800475c:	4603      	mov	r3, r0
 800475e:	2200      	movs	r2, #0
 8004760:	2100      	movs	r1, #0
 8004762:	4618      	mov	r0, r3
 8004764:	f7fe fcf4 	bl	8003150 <NVIC_EncodePriority>
 8004768:	4603      	mov	r3, r0
 800476a:	4619      	mov	r1, r3
 800476c:	2028      	movs	r0, #40	@ 0x28
 800476e:	f7fe fcc5 	bl	80030fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004772:	2028      	movs	r0, #40	@ 0x28
 8004774:	f7fe fca4 	bl	80030c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_14);
 8004778:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800477c:	f7fe fff8 	bl	8003770 <LL_EXTI_EnableIT_0_31>
  LL_EXTI_EnableFallingTrig_0_31(LL_EXTI_LINE_14);
 8004780:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004784:	f7ff f806 	bl	8003794 <LL_EXTI_EnableFallingTrig_0_31>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8004788:	bf00      	nop
 800478a:	3720      	adds	r7, #32
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40021000 	.word	0x40021000
 8004794:	40020c00 	.word	0x40020c00
 8004798:	0f000003 	.word	0x0f000003

0800479c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047a0:	b672      	cpsid	i
}
 80047a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80047a4:	bf00      	nop
 80047a6:	e7fd      	b.n	80047a4 <Error_Handler+0x8>

080047a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ae:	2300      	movs	r3, #0
 80047b0:	607b      	str	r3, [r7, #4]
 80047b2:	4b10      	ldr	r3, [pc, #64]	@ (80047f4 <HAL_MspInit+0x4c>)
 80047b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b6:	4a0f      	ldr	r2, [pc, #60]	@ (80047f4 <HAL_MspInit+0x4c>)
 80047b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80047be:	4b0d      	ldr	r3, [pc, #52]	@ (80047f4 <HAL_MspInit+0x4c>)
 80047c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047c6:	607b      	str	r3, [r7, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047ca:	2300      	movs	r3, #0
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	4b09      	ldr	r3, [pc, #36]	@ (80047f4 <HAL_MspInit+0x4c>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d2:	4a08      	ldr	r2, [pc, #32]	@ (80047f4 <HAL_MspInit+0x4c>)
 80047d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80047da:	4b06      	ldr	r3, [pc, #24]	@ (80047f4 <HAL_MspInit+0x4c>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	40023800 	.word	0x40023800

080047f8 <LL_TIM_SetCounter>:
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <LL_TIM_ClearFlag_UPDATE>:
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f06f 0201 	mvn.w	r2, #1
 8004822:	611a      	str	r2, [r3, #16]
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8004844:	2301      	movs	r3, #1
 8004846:	e000      	b.n	800484a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <LL_TIM_IsEnabledIT_UPDATE>:
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <LL_TIM_IsEnabledIT_UPDATE+0x18>
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <LL_TIM_IsEnabledIT_UPDATE+0x1a>
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <LL_USART_IsActiveFlag_RXNE>:
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b20      	cmp	r3, #32
 800488e:	bf0c      	ite	eq
 8004890:	2301      	moveq	r3, #1
 8004892:	2300      	movne	r3, #0
 8004894:	b2db      	uxtb	r3, r3
}
 8004896:	4618      	mov	r0, r3
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <LL_USART_ClearFlag_RXNE>:
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f06f 0220 	mvn.w	r2, #32
 80048b0:	601a      	str	r2, [r3, #0]
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <LL_USART_ReceiveData8>:
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	b2db      	uxtb	r3, r3
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80048e0:	4b07      	ldr	r3, [pc, #28]	@ (8004900 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80048e2:	695a      	ldr	r2, [r3, #20]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4013      	ands	r3, r2
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	bf0c      	ite	eq
 80048ee:	2301      	moveq	r3, #1
 80048f0:	2300      	movne	r3, #0
 80048f2:	b2db      	uxtb	r3, r3
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	40013c00 	.word	0x40013c00

08004904 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 800490c:	4a04      	ldr	r2, [pc, #16]	@ (8004920 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6153      	str	r3, [r2, #20]
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40013c00 	.word	0x40013c00

08004924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004928:	bf00      	nop
 800492a:	e7fd      	b.n	8004928 <NMI_Handler+0x4>

0800492c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004930:	bf00      	nop
 8004932:	e7fd      	b.n	8004930 <HardFault_Handler+0x4>

08004934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004938:	bf00      	nop
 800493a:	e7fd      	b.n	8004938 <MemManage_Handler+0x4>

0800493c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004940:	bf00      	nop
 8004942:	e7fd      	b.n	8004940 <BusFault_Handler+0x4>

08004944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004948:	bf00      	nop
 800494a:	e7fd      	b.n	8004948 <UsageFault_Handler+0x4>

0800494c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004950:	bf00      	nop
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800495a:	b480      	push	{r7}
 800495c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800495e:	bf00      	nop
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800496c:	bf00      	nop
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800497a:	f000 fa01 	bl	8004d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800497e:	bf00      	nop
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if(LL_TIM_IsEnabledIT_UPDATE(TIM1))
 8004988:	4807      	ldr	r0, [pc, #28]	@ (80049a8 <TIM1_UP_TIM10_IRQHandler+0x24>)
 800498a:	f7ff ff64 	bl	8004856 <LL_TIM_IsEnabledIT_UPDATE>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d006      	beq.n	80049a2 <TIM1_UP_TIM10_IRQHandler+0x1e>
	{
		LL_TIM_ClearFlag_UPDATE(TIM1);
 8004994:	4804      	ldr	r0, [pc, #16]	@ (80049a8 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8004996:	f7ff ff3d 	bl	8004814 <LL_TIM_ClearFlag_UPDATE>
		LL_TIM_SetCounter(TIM1, 0);
 800499a:	2100      	movs	r1, #0
 800499c:	4802      	ldr	r0, [pc, #8]	@ (80049a8 <TIM1_UP_TIM10_IRQHandler+0x24>)
 800499e:	f7ff ff2b 	bl	80047f8 <LL_TIM_SetCounter>

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80049a2:	bf00      	nop
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40010000 	.word	0x40010000

080049ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART1))
 80049b2:	480e      	ldr	r0, [pc, #56]	@ (80049ec <USART1_IRQHandler+0x40>)
 80049b4:	f7ff ff62 	bl	800487c <LL_USART_IsActiveFlag_RXNE>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d011      	beq.n	80049e2 <USART1_IRQHandler+0x36>
	{
		LL_USART_ClearFlag_RXNE(USART1);
 80049be:	480b      	ldr	r0, [pc, #44]	@ (80049ec <USART1_IRQHandler+0x40>)
 80049c0:	f7ff ff6f 	bl	80048a2 <LL_USART_ClearFlag_RXNE>
		uint8_t uart1_rx_data = LL_USART_ReceiveData8(USART1);
 80049c4:	4809      	ldr	r0, [pc, #36]	@ (80049ec <USART1_IRQHandler+0x40>)
 80049c6:	f7ff ff7a 	bl	80048be <LL_USART_ReceiveData8>
 80049ca:	4603      	mov	r3, r0
 80049cc:	71fb      	strb	r3, [r7, #7]

		RC_rxFlag.half_using = 1;
 80049ce:	4a08      	ldr	r2, [pc, #32]	@ (80049f0 <USART1_IRQHandler+0x44>)
 80049d0:	7813      	ldrb	r3, [r2, #0]
 80049d2:	f043 0302 	orr.w	r3, r3, #2
 80049d6:	7013      	strb	r3, [r2, #0]

		// IRQ2 수행
		RC_receiveIRQ2(uart1_rx_data);
 80049d8:	79fb      	ldrb	r3, [r7, #7]
 80049da:	b29b      	uxth	r3, r3
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fd ff19 	bl	8002814 <RC_receiveIRQ2>

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80049e2:	bf00      	nop
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40011000 	.word	0x40011000
 80049f0:	2000044c 	.word	0x2000044c

080049f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART2))
 80049f8:	480a      	ldr	r0, [pc, #40]	@ (8004a24 <USART2_IRQHandler+0x30>)
 80049fa:	f7ff ff3f 	bl	800487c <LL_USART_IsActiveFlag_RXNE>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00c      	beq.n	8004a1e <USART2_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART2);
 8004a04:	4807      	ldr	r0, [pc, #28]	@ (8004a24 <USART2_IRQHandler+0x30>)
 8004a06:	f7ff ff4c 	bl	80048a2 <LL_USART_ClearFlag_RXNE>

		uart2_rx_data = LL_USART_ReceiveData8(USART2);
 8004a0a:	4806      	ldr	r0, [pc, #24]	@ (8004a24 <USART2_IRQHandler+0x30>)
 8004a0c:	f7ff ff57 	bl	80048be <LL_USART_ReceiveData8>
 8004a10:	4603      	mov	r3, r0
 8004a12:	461a      	mov	r2, r3
 8004a14:	4b04      	ldr	r3, [pc, #16]	@ (8004a28 <USART2_IRQHandler+0x34>)
 8004a16:	701a      	strb	r2, [r3, #0]
		uart2_rx_flag = 1;
 8004a18:	4b04      	ldr	r3, [pc, #16]	@ (8004a2c <USART2_IRQHandler+0x38>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004a1e:	bf00      	nop
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40004400 	.word	0x40004400
 8004a28:	200004eb 	.word	0x200004eb
 8004a2c:	200004ea 	.word	0x200004ea

08004a30 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004a34:	bf00      	nop
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8004a42:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004a46:	f7ff ff47 	bl	80048d8 <LL_EXTI_IsActiveFlag_0_31>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d006      	beq.n	8004a5e <EXTI15_10_IRQHandler+0x20>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8004a50:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004a54:	f7ff ff56 	bl	8004904 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
		// IRQ2 수행
	RC_receiveIRQ2(0);
 8004a58:	2000      	movs	r0, #0
 8004a5a:	f7fd fedb 	bl	8002814 <RC_receiveIRQ2>
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004a5e:	bf00      	nop
 8004a60:	bd80      	pop	{r7, pc}
	...

08004a64 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM13))
 8004a68:	4807      	ldr	r0, [pc, #28]	@ (8004a88 <TIM8_UP_TIM13_IRQHandler+0x24>)
 8004a6a:	f7ff fee1 	bl	8004830 <LL_TIM_IsActiveFlag_UPDATE>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d007      	beq.n	8004a84 <TIM8_UP_TIM13_IRQHandler+0x20>
	{
		LL_TIM_ClearFlag_UPDATE(TIM13);
 8004a74:	4804      	ldr	r0, [pc, #16]	@ (8004a88 <TIM8_UP_TIM13_IRQHandler+0x24>)
 8004a76:	f7ff fecd 	bl	8004814 <LL_TIM_ClearFlag_UPDATE>
		system_time.time_boot_ms++;
 8004a7a:	4b04      	ldr	r3, [pc, #16]	@ (8004a8c <TIM8_UP_TIM13_IRQHandler+0x28>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	4a02      	ldr	r2, [pc, #8]	@ (8004a8c <TIM8_UP_TIM13_IRQHandler+0x28>)
 8004a82:	6093      	str	r3, [r2, #8]

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004a84:	bf00      	nop
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40001c00 	.word	0x40001c00
 8004a8c:	20000454 	.word	0x20000454

08004a90 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004a90:	b5b0      	push	{r4, r5, r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM14))
 8004a94:	4809      	ldr	r0, [pc, #36]	@ (8004abc <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 8004a96:	f7ff fecb 	bl	8004830 <LL_TIM_IsActiveFlag_UPDATE>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00b      	beq.n	8004ab8 <TIM8_TRG_COM_TIM14_IRQHandler+0x28>
	{
		LL_TIM_ClearFlag_UPDATE(TIM14);
 8004aa0:	4806      	ldr	r0, [pc, #24]	@ (8004abc <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 8004aa2:	f7ff feb7 	bl	8004814 <LL_TIM_ClearFlag_UPDATE>
		system_time.time_unix_usec++;
 8004aa6:	4906      	ldr	r1, [pc, #24]	@ (8004ac0 <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 8004aa8:	680a      	ldr	r2, [r1, #0]
 8004aaa:	684b      	ldr	r3, [r1, #4]
 8004aac:	1c54      	adds	r4, r2, #1
 8004aae:	f143 0500 	adc.w	r5, r3, #0
 8004ab2:	4b03      	ldr	r3, [pc, #12]	@ (8004ac0 <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 8004ab4:	601c      	str	r4, [r3, #0]
 8004ab6:	605d      	str	r5, [r3, #4]

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004ab8:	bf00      	nop
 8004aba:	bdb0      	pop	{r4, r5, r7, pc}
 8004abc:	40002000 	.word	0x40002000
 8004ac0:	20000454 	.word	0x20000454

08004ac4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	if(LL_TIM_IsEnabledIT_UPDATE(TIM5))
 8004ac8:	4807      	ldr	r0, [pc, #28]	@ (8004ae8 <TIM5_IRQHandler+0x24>)
 8004aca:	f7ff fec4 	bl	8004856 <LL_TIM_IsEnabledIT_UPDATE>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d006      	beq.n	8004ae2 <TIM5_IRQHandler+0x1e>
	{
		LL_TIM_ClearFlag_UPDATE(TIM5);
 8004ad4:	4804      	ldr	r0, [pc, #16]	@ (8004ae8 <TIM5_IRQHandler+0x24>)
 8004ad6:	f7ff fe9d 	bl	8004814 <LL_TIM_ClearFlag_UPDATE>
		LL_TIM_SetCounter(TIM5, 0);
 8004ada:	2100      	movs	r1, #0
 8004adc:	4802      	ldr	r0, [pc, #8]	@ (8004ae8 <TIM5_IRQHandler+0x24>)
 8004ade:	f7ff fe8b 	bl	80047f8 <LL_TIM_SetCounter>

  /* USER CODE END TIM5_IRQn 0 */
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004ae2:	bf00      	nop
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40000c00 	.word	0x40000c00

08004aec <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004af0:	bf00      	nop
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004b00:	4802      	ldr	r0, [pc, #8]	@ (8004b0c <OTG_FS_IRQHandler+0x10>)
 8004b02:	f000 fd73 	bl	80055ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004b06:	bf00      	nop
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	200019d4 	.word	0x200019d4

08004b10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
  return 1;
 8004b14:	2301      	movs	r3, #1
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <_kill>:

int _kill(int pid, int sig)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004b2a:	f008 fd51 	bl	800d5d0 <__errno>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2216      	movs	r2, #22
 8004b32:	601a      	str	r2, [r3, #0]
  return -1;
 8004b34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <_exit>:

void _exit (int status)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004b48:	f04f 31ff 	mov.w	r1, #4294967295
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff ffe7 	bl	8004b20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b52:	bf00      	nop
 8004b54:	e7fd      	b.n	8004b52 <_exit+0x12>

08004b56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b086      	sub	sp, #24
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	60f8      	str	r0, [r7, #12]
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	e00a      	b.n	8004b7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004b68:	f3af 8000 	nop.w
 8004b6c:	4601      	mov	r1, r0
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	1c5a      	adds	r2, r3, #1
 8004b72:	60ba      	str	r2, [r7, #8]
 8004b74:	b2ca      	uxtb	r2, r1
 8004b76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	dbf0      	blt.n	8004b68 <_read+0x12>
  }

  return len;
 8004b86:	687b      	ldr	r3, [r7, #4]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004bb8:	605a      	str	r2, [r3, #4]
  return 0;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <_isatty>:

int _isatty(int file)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004bd0:	2301      	movs	r3, #1
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b085      	sub	sp, #20
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c00:	4a14      	ldr	r2, [pc, #80]	@ (8004c54 <_sbrk+0x5c>)
 8004c02:	4b15      	ldr	r3, [pc, #84]	@ (8004c58 <_sbrk+0x60>)
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c0c:	4b13      	ldr	r3, [pc, #76]	@ (8004c5c <_sbrk+0x64>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c14:	4b11      	ldr	r3, [pc, #68]	@ (8004c5c <_sbrk+0x64>)
 8004c16:	4a12      	ldr	r2, [pc, #72]	@ (8004c60 <_sbrk+0x68>)
 8004c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c1a:	4b10      	ldr	r3, [pc, #64]	@ (8004c5c <_sbrk+0x64>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4413      	add	r3, r2
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d207      	bcs.n	8004c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c28:	f008 fcd2 	bl	800d5d0 <__errno>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	220c      	movs	r2, #12
 8004c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c32:	f04f 33ff 	mov.w	r3, #4294967295
 8004c36:	e009      	b.n	8004c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c38:	4b08      	ldr	r3, [pc, #32]	@ (8004c5c <_sbrk+0x64>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c3e:	4b07      	ldr	r3, [pc, #28]	@ (8004c5c <_sbrk+0x64>)
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4413      	add	r3, r2
 8004c46:	4a05      	ldr	r2, [pc, #20]	@ (8004c5c <_sbrk+0x64>)
 8004c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	20020000 	.word	0x20020000
 8004c58:	00000400 	.word	0x00000400
 8004c5c:	200004ec 	.word	0x200004ec
 8004c60:	20002228 	.word	0x20002228

08004c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c68:	4b06      	ldr	r3, [pc, #24]	@ (8004c84 <SystemInit+0x20>)
 8004c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c6e:	4a05      	ldr	r2, [pc, #20]	@ (8004c84 <SystemInit+0x20>)
 8004c70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c78:	bf00      	nop
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	e000ed00 	.word	0xe000ed00

08004c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004c88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004cc0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004c8c:	f7ff ffea 	bl	8004c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c90:	480c      	ldr	r0, [pc, #48]	@ (8004cc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004c92:	490d      	ldr	r1, [pc, #52]	@ (8004cc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004c94:	4a0d      	ldr	r2, [pc, #52]	@ (8004ccc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c98:	e002      	b.n	8004ca0 <LoopCopyDataInit>

08004c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c9e:	3304      	adds	r3, #4

08004ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ca4:	d3f9      	bcc.n	8004c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8004cd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004ca8:	4c0a      	ldr	r4, [pc, #40]	@ (8004cd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cac:	e001      	b.n	8004cb2 <LoopFillZerobss>

08004cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cb0:	3204      	adds	r2, #4

08004cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cb4:	d3fb      	bcc.n	8004cae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004cb6:	f008 fc91 	bl	800d5dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cba:	f7fe fddb 	bl	8003874 <main>
  bx  lr    
 8004cbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004cc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004cc8:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8004ccc:	0800f604 	.word	0x0800f604
  ldr r2, =_sbss
 8004cd0:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8004cd4:	20002224 	.word	0x20002224

08004cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004cd8:	e7fe      	b.n	8004cd8 <ADC_IRQHandler>
	...

08004cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8004d1c <HAL_Init+0x40>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8004d1c <HAL_Init+0x40>)
 8004ce6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004cea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004cec:	4b0b      	ldr	r3, [pc, #44]	@ (8004d1c <HAL_Init+0x40>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8004d1c <HAL_Init+0x40>)
 8004cf2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004cf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cf8:	4b08      	ldr	r3, [pc, #32]	@ (8004d1c <HAL_Init+0x40>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a07      	ldr	r2, [pc, #28]	@ (8004d1c <HAL_Init+0x40>)
 8004cfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d04:	2003      	movs	r0, #3
 8004d06:	f000 f94f 	bl	8004fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d0a:	200f      	movs	r0, #15
 8004d0c:	f000 f808 	bl	8004d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d10:	f7ff fd4a 	bl	80047a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40023c00 	.word	0x40023c00

08004d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d28:	4b12      	ldr	r3, [pc, #72]	@ (8004d74 <HAL_InitTick+0x54>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	4b12      	ldr	r3, [pc, #72]	@ (8004d78 <HAL_InitTick+0x58>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	4619      	mov	r1, r3
 8004d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 f967 	bl	8005012 <HAL_SYSTICK_Config>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e00e      	b.n	8004d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b0f      	cmp	r3, #15
 8004d52:	d80a      	bhi.n	8004d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d54:	2200      	movs	r2, #0
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5c:	f000 f92f 	bl	8004fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d60:	4a06      	ldr	r2, [pc, #24]	@ (8004d7c <HAL_InitTick+0x5c>)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	e000      	b.n	8004d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	20000000 	.word	0x20000000
 8004d78:	20000008 	.word	0x20000008
 8004d7c:	20000004 	.word	0x20000004

08004d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d84:	4b06      	ldr	r3, [pc, #24]	@ (8004da0 <HAL_IncTick+0x20>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	4b06      	ldr	r3, [pc, #24]	@ (8004da4 <HAL_IncTick+0x24>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4413      	add	r3, r2
 8004d90:	4a04      	ldr	r2, [pc, #16]	@ (8004da4 <HAL_IncTick+0x24>)
 8004d92:	6013      	str	r3, [r2, #0]
}
 8004d94:	bf00      	nop
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	20000008 	.word	0x20000008
 8004da4:	200004f0 	.word	0x200004f0

08004da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  return uwTick;
 8004dac:	4b03      	ldr	r3, [pc, #12]	@ (8004dbc <HAL_GetTick+0x14>)
 8004dae:	681b      	ldr	r3, [r3, #0]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	200004f0 	.word	0x200004f0

08004dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004dc8:	f7ff ffee 	bl	8004da8 <HAL_GetTick>
 8004dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd8:	d005      	beq.n	8004de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004dda:	4b0a      	ldr	r3, [pc, #40]	@ (8004e04 <HAL_Delay+0x44>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	461a      	mov	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4413      	add	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004de6:	bf00      	nop
 8004de8:	f7ff ffde 	bl	8004da8 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d8f7      	bhi.n	8004de8 <HAL_Delay+0x28>
  {
  }
}
 8004df8:	bf00      	nop
 8004dfa:	bf00      	nop
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20000008 	.word	0x20000008

08004e08 <__NVIC_SetPriorityGrouping>:
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e18:	4b0c      	ldr	r3, [pc, #48]	@ (8004e4c <__NVIC_SetPriorityGrouping+0x44>)
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e24:	4013      	ands	r3, r2
 8004e26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e3a:	4a04      	ldr	r2, [pc, #16]	@ (8004e4c <__NVIC_SetPriorityGrouping+0x44>)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	60d3      	str	r3, [r2, #12]
}
 8004e40:	bf00      	nop
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	e000ed00 	.word	0xe000ed00

08004e50 <__NVIC_GetPriorityGrouping>:
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e54:	4b04      	ldr	r3, [pc, #16]	@ (8004e68 <__NVIC_GetPriorityGrouping+0x18>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	0a1b      	lsrs	r3, r3, #8
 8004e5a:	f003 0307 	and.w	r3, r3, #7
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	e000ed00 	.word	0xe000ed00

08004e6c <__NVIC_EnableIRQ>:
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	4603      	mov	r3, r0
 8004e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	db0b      	blt.n	8004e96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e7e:	79fb      	ldrb	r3, [r7, #7]
 8004e80:	f003 021f 	and.w	r2, r3, #31
 8004e84:	4907      	ldr	r1, [pc, #28]	@ (8004ea4 <__NVIC_EnableIRQ+0x38>)
 8004e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	2001      	movs	r0, #1
 8004e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	e000e100 	.word	0xe000e100

08004ea8 <__NVIC_SetPriority>:
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	4603      	mov	r3, r0
 8004eb0:	6039      	str	r1, [r7, #0]
 8004eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	db0a      	blt.n	8004ed2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	490c      	ldr	r1, [pc, #48]	@ (8004ef4 <__NVIC_SetPriority+0x4c>)
 8004ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec6:	0112      	lsls	r2, r2, #4
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	440b      	add	r3, r1
 8004ecc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004ed0:	e00a      	b.n	8004ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	4908      	ldr	r1, [pc, #32]	@ (8004ef8 <__NVIC_SetPriority+0x50>)
 8004ed8:	79fb      	ldrb	r3, [r7, #7]
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	3b04      	subs	r3, #4
 8004ee0:	0112      	lsls	r2, r2, #4
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	761a      	strb	r2, [r3, #24]
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	e000e100 	.word	0xe000e100
 8004ef8:	e000ed00 	.word	0xe000ed00

08004efc <NVIC_EncodePriority>:
{
 8004efc:	b480      	push	{r7}
 8004efe:	b089      	sub	sp, #36	@ 0x24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	f1c3 0307 	rsb	r3, r3, #7
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	bf28      	it	cs
 8004f1a:	2304      	movcs	r3, #4
 8004f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	3304      	adds	r3, #4
 8004f22:	2b06      	cmp	r3, #6
 8004f24:	d902      	bls.n	8004f2c <NVIC_EncodePriority+0x30>
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	3b03      	subs	r3, #3
 8004f2a:	e000      	b.n	8004f2e <NVIC_EncodePriority+0x32>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f30:	f04f 32ff 	mov.w	r2, #4294967295
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3a:	43da      	mvns	r2, r3
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	401a      	ands	r2, r3
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f44:	f04f 31ff 	mov.w	r1, #4294967295
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4e:	43d9      	mvns	r1, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f54:	4313      	orrs	r3, r2
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3724      	adds	r7, #36	@ 0x24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
	...

08004f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f74:	d301      	bcc.n	8004f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f76:	2301      	movs	r3, #1
 8004f78:	e00f      	b.n	8004f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004fa4 <SysTick_Config+0x40>)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f82:	210f      	movs	r1, #15
 8004f84:	f04f 30ff 	mov.w	r0, #4294967295
 8004f88:	f7ff ff8e 	bl	8004ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f8c:	4b05      	ldr	r3, [pc, #20]	@ (8004fa4 <SysTick_Config+0x40>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f92:	4b04      	ldr	r3, [pc, #16]	@ (8004fa4 <SysTick_Config+0x40>)
 8004f94:	2207      	movs	r2, #7
 8004f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	e000e010 	.word	0xe000e010

08004fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7ff ff29 	bl	8004e08 <__NVIC_SetPriorityGrouping>
}
 8004fb6:	bf00      	nop
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b086      	sub	sp, #24
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	607a      	str	r2, [r7, #4]
 8004fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004fd0:	f7ff ff3e 	bl	8004e50 <__NVIC_GetPriorityGrouping>
 8004fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	68b9      	ldr	r1, [r7, #8]
 8004fda:	6978      	ldr	r0, [r7, #20]
 8004fdc:	f7ff ff8e 	bl	8004efc <NVIC_EncodePriority>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fe6:	4611      	mov	r1, r2
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7ff ff5d 	bl	8004ea8 <__NVIC_SetPriority>
}
 8004fee:	bf00      	nop
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b082      	sub	sp, #8
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff ff31 	bl	8004e6c <__NVIC_EnableIRQ>
}
 800500a:	bf00      	nop
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b082      	sub	sp, #8
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7ff ffa2 	bl	8004f64 <SysTick_Config>
 8005020:	4603      	mov	r3, r0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800502c:	b480      	push	{r7}
 800502e:	b089      	sub	sp, #36	@ 0x24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800503a:	2300      	movs	r3, #0
 800503c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800503e:	2300      	movs	r3, #0
 8005040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005042:	2300      	movs	r3, #0
 8005044:	61fb      	str	r3, [r7, #28]
 8005046:	e16b      	b.n	8005320 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005048:	2201      	movs	r2, #1
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4013      	ands	r3, r2
 800505a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	429a      	cmp	r2, r3
 8005062:	f040 815a 	bne.w	800531a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	2b01      	cmp	r3, #1
 8005070:	d005      	beq.n	800507e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800507a:	2b02      	cmp	r3, #2
 800507c:	d130      	bne.n	80050e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	2203      	movs	r2, #3
 800508a:	fa02 f303 	lsl.w	r3, r2, r3
 800508e:	43db      	mvns	r3, r3
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	4013      	ands	r3, r2
 8005094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050b4:	2201      	movs	r2, #1
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	43db      	mvns	r3, r3
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	4013      	ands	r3, r2
 80050c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	091b      	lsrs	r3, r3, #4
 80050ca:	f003 0201 	and.w	r2, r3, #1
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f003 0303 	and.w	r3, r3, #3
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d017      	beq.n	800511c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	2203      	movs	r2, #3
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	43db      	mvns	r3, r3
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	4013      	ands	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	4313      	orrs	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d123      	bne.n	8005170 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	08da      	lsrs	r2, r3, #3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3208      	adds	r2, #8
 8005130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005134:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	220f      	movs	r2, #15
 8005140:	fa02 f303 	lsl.w	r3, r2, r3
 8005144:	43db      	mvns	r3, r3
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	4013      	ands	r3, r2
 800514a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	691a      	ldr	r2, [r3, #16]
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4313      	orrs	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	08da      	lsrs	r2, r3, #3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3208      	adds	r2, #8
 800516a:	69b9      	ldr	r1, [r7, #24]
 800516c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	2203      	movs	r2, #3
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	43db      	mvns	r3, r3
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	4013      	ands	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f003 0203 	and.w	r2, r3, #3
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	4313      	orrs	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 80b4 	beq.w	800531a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	4b60      	ldr	r3, [pc, #384]	@ (8005338 <HAL_GPIO_Init+0x30c>)
 80051b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ba:	4a5f      	ldr	r2, [pc, #380]	@ (8005338 <HAL_GPIO_Init+0x30c>)
 80051bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80051c2:	4b5d      	ldr	r3, [pc, #372]	@ (8005338 <HAL_GPIO_Init+0x30c>)
 80051c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051ce:	4a5b      	ldr	r2, [pc, #364]	@ (800533c <HAL_GPIO_Init+0x310>)
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	089b      	lsrs	r3, r3, #2
 80051d4:	3302      	adds	r3, #2
 80051d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	220f      	movs	r2, #15
 80051e6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ea:	43db      	mvns	r3, r3
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	4013      	ands	r3, r2
 80051f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a52      	ldr	r2, [pc, #328]	@ (8005340 <HAL_GPIO_Init+0x314>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d02b      	beq.n	8005252 <HAL_GPIO_Init+0x226>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a51      	ldr	r2, [pc, #324]	@ (8005344 <HAL_GPIO_Init+0x318>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d025      	beq.n	800524e <HAL_GPIO_Init+0x222>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a50      	ldr	r2, [pc, #320]	@ (8005348 <HAL_GPIO_Init+0x31c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d01f      	beq.n	800524a <HAL_GPIO_Init+0x21e>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a4f      	ldr	r2, [pc, #316]	@ (800534c <HAL_GPIO_Init+0x320>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d019      	beq.n	8005246 <HAL_GPIO_Init+0x21a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a4e      	ldr	r2, [pc, #312]	@ (8005350 <HAL_GPIO_Init+0x324>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d013      	beq.n	8005242 <HAL_GPIO_Init+0x216>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a4d      	ldr	r2, [pc, #308]	@ (8005354 <HAL_GPIO_Init+0x328>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00d      	beq.n	800523e <HAL_GPIO_Init+0x212>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a4c      	ldr	r2, [pc, #304]	@ (8005358 <HAL_GPIO_Init+0x32c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d007      	beq.n	800523a <HAL_GPIO_Init+0x20e>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a4b      	ldr	r2, [pc, #300]	@ (800535c <HAL_GPIO_Init+0x330>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d101      	bne.n	8005236 <HAL_GPIO_Init+0x20a>
 8005232:	2307      	movs	r3, #7
 8005234:	e00e      	b.n	8005254 <HAL_GPIO_Init+0x228>
 8005236:	2308      	movs	r3, #8
 8005238:	e00c      	b.n	8005254 <HAL_GPIO_Init+0x228>
 800523a:	2306      	movs	r3, #6
 800523c:	e00a      	b.n	8005254 <HAL_GPIO_Init+0x228>
 800523e:	2305      	movs	r3, #5
 8005240:	e008      	b.n	8005254 <HAL_GPIO_Init+0x228>
 8005242:	2304      	movs	r3, #4
 8005244:	e006      	b.n	8005254 <HAL_GPIO_Init+0x228>
 8005246:	2303      	movs	r3, #3
 8005248:	e004      	b.n	8005254 <HAL_GPIO_Init+0x228>
 800524a:	2302      	movs	r3, #2
 800524c:	e002      	b.n	8005254 <HAL_GPIO_Init+0x228>
 800524e:	2301      	movs	r3, #1
 8005250:	e000      	b.n	8005254 <HAL_GPIO_Init+0x228>
 8005252:	2300      	movs	r3, #0
 8005254:	69fa      	ldr	r2, [r7, #28]
 8005256:	f002 0203 	and.w	r2, r2, #3
 800525a:	0092      	lsls	r2, r2, #2
 800525c:	4093      	lsls	r3, r2
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	4313      	orrs	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005264:	4935      	ldr	r1, [pc, #212]	@ (800533c <HAL_GPIO_Init+0x310>)
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	089b      	lsrs	r3, r3, #2
 800526a:	3302      	adds	r3, #2
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005272:	4b3b      	ldr	r3, [pc, #236]	@ (8005360 <HAL_GPIO_Init+0x334>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	43db      	mvns	r3, r3
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	4013      	ands	r3, r2
 8005280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005296:	4a32      	ldr	r2, [pc, #200]	@ (8005360 <HAL_GPIO_Init+0x334>)
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800529c:	4b30      	ldr	r3, [pc, #192]	@ (8005360 <HAL_GPIO_Init+0x334>)
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	43db      	mvns	r3, r3
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	4013      	ands	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052c0:	4a27      	ldr	r2, [pc, #156]	@ (8005360 <HAL_GPIO_Init+0x334>)
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80052c6:	4b26      	ldr	r3, [pc, #152]	@ (8005360 <HAL_GPIO_Init+0x334>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	43db      	mvns	r3, r3
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	4013      	ands	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005360 <HAL_GPIO_Init+0x334>)
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052f0:	4b1b      	ldr	r3, [pc, #108]	@ (8005360 <HAL_GPIO_Init+0x334>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	43db      	mvns	r3, r3
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	4013      	ands	r3, r2
 80052fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005314:	4a12      	ldr	r2, [pc, #72]	@ (8005360 <HAL_GPIO_Init+0x334>)
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	3301      	adds	r3, #1
 800531e:	61fb      	str	r3, [r7, #28]
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	2b0f      	cmp	r3, #15
 8005324:	f67f ae90 	bls.w	8005048 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005328:	bf00      	nop
 800532a:	bf00      	nop
 800532c:	3724      	adds	r7, #36	@ 0x24
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	40023800 	.word	0x40023800
 800533c:	40013800 	.word	0x40013800
 8005340:	40020000 	.word	0x40020000
 8005344:	40020400 	.word	0x40020400
 8005348:	40020800 	.word	0x40020800
 800534c:	40020c00 	.word	0x40020c00
 8005350:	40021000 	.word	0x40021000
 8005354:	40021400 	.word	0x40021400
 8005358:	40021800 	.word	0x40021800
 800535c:	40021c00 	.word	0x40021c00
 8005360:	40013c00 	.word	0x40013c00

08005364 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af02      	add	r7, sp, #8
 800536a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e101      	b.n	800557a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d106      	bne.n	8005396 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f006 ff5d 	bl	800c250 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2203      	movs	r2, #3
 800539a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053a4:	d102      	bne.n	80053ac <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f003 fb36 	bl	8008a22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6818      	ldr	r0, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	7c1a      	ldrb	r2, [r3, #16]
 80053be:	f88d 2000 	strb.w	r2, [sp]
 80053c2:	3304      	adds	r3, #4
 80053c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053c6:	f003 fa15 	bl	80087f4 <USB_CoreInit>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d005      	beq.n	80053dc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e0ce      	b.n	800557a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2100      	movs	r1, #0
 80053e2:	4618      	mov	r0, r3
 80053e4:	f003 fb2e 	bl	8008a44 <USB_SetCurrentMode>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d005      	beq.n	80053fa <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2202      	movs	r2, #2
 80053f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e0bf      	b.n	800557a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053fa:	2300      	movs	r3, #0
 80053fc:	73fb      	strb	r3, [r7, #15]
 80053fe:	e04a      	b.n	8005496 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005400:	7bfa      	ldrb	r2, [r7, #15]
 8005402:	6879      	ldr	r1, [r7, #4]
 8005404:	4613      	mov	r3, r2
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	4413      	add	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	440b      	add	r3, r1
 800540e:	3315      	adds	r3, #21
 8005410:	2201      	movs	r2, #1
 8005412:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005414:	7bfa      	ldrb	r2, [r7, #15]
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	4613      	mov	r3, r2
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	4413      	add	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	440b      	add	r3, r1
 8005422:	3314      	adds	r3, #20
 8005424:	7bfa      	ldrb	r2, [r7, #15]
 8005426:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005428:	7bfa      	ldrb	r2, [r7, #15]
 800542a:	7bfb      	ldrb	r3, [r7, #15]
 800542c:	b298      	uxth	r0, r3
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	4613      	mov	r3, r2
 8005432:	00db      	lsls	r3, r3, #3
 8005434:	4413      	add	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	332e      	adds	r3, #46	@ 0x2e
 800543c:	4602      	mov	r2, r0
 800543e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005440:	7bfa      	ldrb	r2, [r7, #15]
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	4613      	mov	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	4413      	add	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	440b      	add	r3, r1
 800544e:	3318      	adds	r3, #24
 8005450:	2200      	movs	r2, #0
 8005452:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005454:	7bfa      	ldrb	r2, [r7, #15]
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	4613      	mov	r3, r2
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	4413      	add	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	440b      	add	r3, r1
 8005462:	331c      	adds	r3, #28
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005468:	7bfa      	ldrb	r2, [r7, #15]
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	4613      	mov	r3, r2
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	3320      	adds	r3, #32
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800547c:	7bfa      	ldrb	r2, [r7, #15]
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	4613      	mov	r3, r2
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	4413      	add	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	3324      	adds	r3, #36	@ 0x24
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005490:	7bfb      	ldrb	r3, [r7, #15]
 8005492:	3301      	adds	r3, #1
 8005494:	73fb      	strb	r3, [r7, #15]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	791b      	ldrb	r3, [r3, #4]
 800549a:	7bfa      	ldrb	r2, [r7, #15]
 800549c:	429a      	cmp	r2, r3
 800549e:	d3af      	bcc.n	8005400 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054a0:	2300      	movs	r3, #0
 80054a2:	73fb      	strb	r3, [r7, #15]
 80054a4:	e044      	b.n	8005530 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80054a6:	7bfa      	ldrb	r2, [r7, #15]
 80054a8:	6879      	ldr	r1, [r7, #4]
 80054aa:	4613      	mov	r3, r2
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	4413      	add	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	440b      	add	r3, r1
 80054b4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80054b8:	2200      	movs	r2, #0
 80054ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80054bc:	7bfa      	ldrb	r2, [r7, #15]
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	4613      	mov	r3, r2
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	4413      	add	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	440b      	add	r3, r1
 80054ca:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80054ce:	7bfa      	ldrb	r2, [r7, #15]
 80054d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054d2:	7bfa      	ldrb	r2, [r7, #15]
 80054d4:	6879      	ldr	r1, [r7, #4]
 80054d6:	4613      	mov	r3, r2
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	4413      	add	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	440b      	add	r3, r1
 80054e0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80054e4:	2200      	movs	r2, #0
 80054e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80054e8:	7bfa      	ldrb	r2, [r7, #15]
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	4613      	mov	r3, r2
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80054fa:	2200      	movs	r2, #0
 80054fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80054fe:	7bfa      	ldrb	r2, [r7, #15]
 8005500:	6879      	ldr	r1, [r7, #4]
 8005502:	4613      	mov	r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	4413      	add	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	440b      	add	r3, r1
 800550c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005514:	7bfa      	ldrb	r2, [r7, #15]
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	4613      	mov	r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	4413      	add	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	440b      	add	r3, r1
 8005522:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005526:	2200      	movs	r2, #0
 8005528:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	3301      	adds	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	791b      	ldrb	r3, [r3, #4]
 8005534:	7bfa      	ldrb	r2, [r7, #15]
 8005536:	429a      	cmp	r2, r3
 8005538:	d3b5      	bcc.n	80054a6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	7c1a      	ldrb	r2, [r3, #16]
 8005542:	f88d 2000 	strb.w	r2, [sp]
 8005546:	3304      	adds	r3, #4
 8005548:	cb0e      	ldmia	r3, {r1, r2, r3}
 800554a:	f003 fac7 	bl	8008adc <USB_DevInit>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d005      	beq.n	8005560 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e00c      	b.n	800557a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f004 fb11 	bl	8009b9a <USB_DevDisconnect>

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b084      	sub	sp, #16
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <HAL_PCD_Start+0x1c>
 800559a:	2302      	movs	r3, #2
 800559c:	e022      	b.n	80055e4 <HAL_PCD_Start+0x62>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d009      	beq.n	80055c6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d105      	bne.n	80055c6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f003 fa18 	bl	8008a00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f004 fabf 	bl	8009b58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80055ec:	b590      	push	{r4, r7, lr}
 80055ee:	b08d      	sub	sp, #52	@ 0x34
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f004 fb7d 	bl	8009d02 <USB_GetMode>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	f040 848c 	bne.w	8005f28 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4618      	mov	r0, r3
 8005616:	f004 fae1 	bl	8009bdc <USB_ReadInterrupts>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 8482 	beq.w	8005f26 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	0a1b      	lsrs	r3, r3, #8
 800562c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4618      	mov	r0, r3
 800563c:	f004 face 	bl	8009bdc <USB_ReadInterrupts>
 8005640:	4603      	mov	r3, r0
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b02      	cmp	r3, #2
 8005648:	d107      	bne.n	800565a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	695a      	ldr	r2, [r3, #20]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f002 0202 	and.w	r2, r2, #2
 8005658:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4618      	mov	r0, r3
 8005660:	f004 fabc 	bl	8009bdc <USB_ReadInterrupts>
 8005664:	4603      	mov	r3, r0
 8005666:	f003 0310 	and.w	r3, r3, #16
 800566a:	2b10      	cmp	r3, #16
 800566c:	d161      	bne.n	8005732 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	699a      	ldr	r2, [r3, #24]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 0210 	bic.w	r2, r2, #16
 800567c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	f003 020f 	and.w	r2, r3, #15
 800568a:	4613      	mov	r3, r2
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	4413      	add	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	4413      	add	r3, r2
 800569a:	3304      	adds	r3, #4
 800569c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80056a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80056a8:	d124      	bne.n	80056f4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80056b0:	4013      	ands	r3, r2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d035      	beq.n	8005722 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	091b      	lsrs	r3, r3, #4
 80056be:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80056c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	461a      	mov	r2, r3
 80056c8:	6a38      	ldr	r0, [r7, #32]
 80056ca:	f004 f8f3 	bl	80098b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	68da      	ldr	r2, [r3, #12]
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	091b      	lsrs	r3, r3, #4
 80056d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056da:	441a      	add	r2, r3
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	695a      	ldr	r2, [r3, #20]
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	091b      	lsrs	r3, r3, #4
 80056e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056ec:	441a      	add	r2, r3
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	615a      	str	r2, [r3, #20]
 80056f2:	e016      	b.n	8005722 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80056fa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80056fe:	d110      	bne.n	8005722 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005706:	2208      	movs	r2, #8
 8005708:	4619      	mov	r1, r3
 800570a:	6a38      	ldr	r0, [r7, #32]
 800570c:	f004 f8d2 	bl	80098b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	695a      	ldr	r2, [r3, #20]
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	091b      	lsrs	r3, r3, #4
 8005718:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800571c:	441a      	add	r2, r3
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	699a      	ldr	r2, [r3, #24]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0210 	orr.w	r2, r2, #16
 8005730:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4618      	mov	r0, r3
 8005738:	f004 fa50 	bl	8009bdc <USB_ReadInterrupts>
 800573c:	4603      	mov	r3, r0
 800573e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005742:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005746:	f040 80a7 	bne.w	8005898 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f004 fa55 	bl	8009c02 <USB_ReadDevAllOutEpInterrupt>
 8005758:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800575a:	e099      	b.n	8005890 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800575c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	f000 808e 	beq.w	8005884 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	4611      	mov	r1, r2
 8005772:	4618      	mov	r0, r3
 8005774:	f004 fa79 	bl	8009c6a <USB_ReadDevOutEPInterrupt>
 8005778:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00c      	beq.n	800579e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005790:	461a      	mov	r2, r3
 8005792:	2301      	movs	r3, #1
 8005794:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005796:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fea3 	bl	80064e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f003 0308 	and.w	r3, r3, #8
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00c      	beq.n	80057c2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80057a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057b4:	461a      	mov	r2, r3
 80057b6:	2308      	movs	r3, #8
 80057b8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80057ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 ff79 	bl	80066b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f003 0310 	and.w	r3, r3, #16
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d008      	beq.n	80057de <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80057cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057d8:	461a      	mov	r2, r3
 80057da:	2310      	movs	r3, #16
 80057dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d030      	beq.n	800584a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057f0:	2b80      	cmp	r3, #128	@ 0x80
 80057f2:	d109      	bne.n	8005808 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	69fa      	ldr	r2, [r7, #28]
 80057fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005802:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005806:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800580a:	4613      	mov	r3, r2
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	4413      	add	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	4413      	add	r3, r2
 800581a:	3304      	adds	r3, #4
 800581c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	78db      	ldrb	r3, [r3, #3]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d108      	bne.n	8005838 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2200      	movs	r2, #0
 800582a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800582c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582e:	b2db      	uxtb	r3, r3
 8005830:	4619      	mov	r1, r3
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f006 fe12 	bl	800c45c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005844:	461a      	mov	r2, r3
 8005846:	2302      	movs	r3, #2
 8005848:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f003 0320 	and.w	r3, r3, #32
 8005850:	2b00      	cmp	r3, #0
 8005852:	d008      	beq.n	8005866 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005860:	461a      	mov	r2, r3
 8005862:	2320      	movs	r3, #32
 8005864:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d009      	beq.n	8005884 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800587c:	461a      	mov	r2, r3
 800587e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005882:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005886:	3301      	adds	r3, #1
 8005888:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800588a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588c:	085b      	lsrs	r3, r3, #1
 800588e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005892:	2b00      	cmp	r3, #0
 8005894:	f47f af62 	bne.w	800575c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4618      	mov	r0, r3
 800589e:	f004 f99d 	bl	8009bdc <USB_ReadInterrupts>
 80058a2:	4603      	mov	r3, r0
 80058a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058ac:	f040 80db 	bne.w	8005a66 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f004 f9be 	bl	8009c36 <USB_ReadDevAllInEpInterrupt>
 80058ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80058c0:	e0cd      	b.n	8005a5e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80058c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 80c2 	beq.w	8005a52 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058d4:	b2d2      	uxtb	r2, r2
 80058d6:	4611      	mov	r1, r2
 80058d8:	4618      	mov	r0, r3
 80058da:	f004 f9e4 	bl	8009ca6 <USB_ReadDevInEPInterrupt>
 80058de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d057      	beq.n	800599a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80058ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ec:	f003 030f 	and.w	r3, r3, #15
 80058f0:	2201      	movs	r2, #1
 80058f2:	fa02 f303 	lsl.w	r3, r2, r3
 80058f6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	43db      	mvns	r3, r3
 8005904:	69f9      	ldr	r1, [r7, #28]
 8005906:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800590a:	4013      	ands	r3, r2
 800590c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800590e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800591a:	461a      	mov	r2, r3
 800591c:	2301      	movs	r3, #1
 800591e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	799b      	ldrb	r3, [r3, #6]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d132      	bne.n	800598e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005928:	6879      	ldr	r1, [r7, #4]
 800592a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800592c:	4613      	mov	r3, r2
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	4413      	add	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	440b      	add	r3, r1
 8005936:	3320      	adds	r3, #32
 8005938:	6819      	ldr	r1, [r3, #0]
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800593e:	4613      	mov	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	4413      	add	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4403      	add	r3, r0
 8005948:	331c      	adds	r3, #28
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4419      	add	r1, r3
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005952:	4613      	mov	r3, r2
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4403      	add	r3, r0
 800595c:	3320      	adds	r3, #32
 800595e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005962:	2b00      	cmp	r3, #0
 8005964:	d113      	bne.n	800598e <HAL_PCD_IRQHandler+0x3a2>
 8005966:	6879      	ldr	r1, [r7, #4]
 8005968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800596a:	4613      	mov	r3, r2
 800596c:	00db      	lsls	r3, r3, #3
 800596e:	4413      	add	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	440b      	add	r3, r1
 8005974:	3324      	adds	r3, #36	@ 0x24
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d108      	bne.n	800598e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005986:	461a      	mov	r2, r3
 8005988:	2101      	movs	r1, #1
 800598a:	f004 f9eb 	bl	8009d64 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005990:	b2db      	uxtb	r3, r3
 8005992:	4619      	mov	r1, r3
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f006 fcdc 	bl	800c352 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	f003 0308 	and.w	r3, r3, #8
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d008      	beq.n	80059b6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80059a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059b0:	461a      	mov	r2, r3
 80059b2:	2308      	movs	r3, #8
 80059b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d008      	beq.n	80059d2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80059c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059cc:	461a      	mov	r2, r3
 80059ce:	2310      	movs	r3, #16
 80059d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d008      	beq.n	80059ee <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80059dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059e8:	461a      	mov	r2, r3
 80059ea:	2340      	movs	r3, #64	@ 0x40
 80059ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d023      	beq.n	8005a40 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80059f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059fa:	6a38      	ldr	r0, [r7, #32]
 80059fc:	f003 f9d2 	bl	8008da4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a02:	4613      	mov	r3, r2
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	3310      	adds	r3, #16
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	4413      	add	r3, r2
 8005a10:	3304      	adds	r3, #4
 8005a12:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	78db      	ldrb	r3, [r3, #3]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d108      	bne.n	8005a2e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	4619      	mov	r1, r3
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f006 fd29 	bl	800c480 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005a4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fcbd 	bl	80063cc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	3301      	adds	r3, #1
 8005a56:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5a:	085b      	lsrs	r3, r3, #1
 8005a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f47f af2e 	bne.w	80058c2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f004 f8b6 	bl	8009bdc <USB_ReadInterrupts>
 8005a70:	4603      	mov	r3, r0
 8005a72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a7a:	d122      	bne.n	8005ac2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a8a:	f023 0301 	bic.w	r3, r3, #1
 8005a8e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d108      	bne.n	8005aac <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fea3 	bl	80067f0 <HAL_PCDEx_LPM_Callback>
 8005aaa:	e002      	b.n	8005ab2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f006 fcc7 	bl	800c440 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	695a      	ldr	r2, [r3, #20]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005ac0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f004 f888 	bl	8009bdc <USB_ReadInterrupts>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ad2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ad6:	d112      	bne.n	8005afe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d102      	bne.n	8005aee <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f006 fc83 	bl	800c3f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	695a      	ldr	r2, [r3, #20]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005afc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f004 f86a 	bl	8009bdc <USB_ReadInterrupts>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b12:	f040 80b7 	bne.w	8005c84 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	69fa      	ldr	r2, [r7, #28]
 8005b20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b24:	f023 0301 	bic.w	r3, r3, #1
 8005b28:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2110      	movs	r1, #16
 8005b30:	4618      	mov	r0, r3
 8005b32:	f003 f937 	bl	8008da4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b36:	2300      	movs	r3, #0
 8005b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b3a:	e046      	b.n	8005bca <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b48:	461a      	mov	r2, r3
 8005b4a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b4e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b60:	0151      	lsls	r1, r2, #5
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	440a      	add	r2, r1
 8005b66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b6e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b82:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b94:	0151      	lsls	r1, r2, #5
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	440a      	add	r2, r1
 8005b9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ba2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bb4:	0151      	lsls	r1, r2, #5
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	440a      	add	r2, r1
 8005bba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bbe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005bc2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	791b      	ldrb	r3, [r3, #4]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d3b2      	bcc.n	8005b3c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	69fa      	ldr	r2, [r7, #28]
 8005be0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005be4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005be8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	7bdb      	ldrb	r3, [r3, #15]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d016      	beq.n	8005c20 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c02:	f043 030b 	orr.w	r3, r3, #11
 8005c06:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c12:	69fa      	ldr	r2, [r7, #28]
 8005c14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c18:	f043 030b 	orr.w	r3, r3, #11
 8005c1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005c1e:	e015      	b.n	8005c4c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c2e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005c32:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005c36:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	69fa      	ldr	r2, [r7, #28]
 8005c42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c46:	f043 030b 	orr.w	r3, r3, #11
 8005c4a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	69fa      	ldr	r2, [r7, #28]
 8005c56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c5a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005c5e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6818      	ldr	r0, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005c6e:	461a      	mov	r2, r3
 8005c70:	f004 f878 	bl	8009d64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	695a      	ldr	r2, [r3, #20]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005c82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f003 ffa7 	bl	8009bdc <USB_ReadInterrupts>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c98:	d123      	bne.n	8005ce2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f004 f83d 	bl	8009d1e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f003 f8f4 	bl	8008e96 <USB_GetDevSpeed>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681c      	ldr	r4, [r3, #0]
 8005cba:	f001 fa07 	bl	80070cc <HAL_RCC_GetHCLKFreq>
 8005cbe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	f002 fdf8 	bl	80088bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f006 fb68 	bl	800c3a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	695a      	ldr	r2, [r3, #20]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005ce0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f003 ff78 	bl	8009bdc <USB_ReadInterrupts>
 8005cec:	4603      	mov	r3, r0
 8005cee:	f003 0308 	and.w	r3, r3, #8
 8005cf2:	2b08      	cmp	r3, #8
 8005cf4:	d10a      	bne.n	8005d0c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f006 fb45 	bl	800c386 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	695a      	ldr	r2, [r3, #20]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f002 0208 	and.w	r2, r2, #8
 8005d0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f003 ff63 	bl	8009bdc <USB_ReadInterrupts>
 8005d16:	4603      	mov	r3, r0
 8005d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d1c:	2b80      	cmp	r3, #128	@ 0x80
 8005d1e:	d123      	bne.n	8005d68 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005d20:	6a3b      	ldr	r3, [r7, #32]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d30:	e014      	b.n	8005d5c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005d32:	6879      	ldr	r1, [r7, #4]
 8005d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d36:	4613      	mov	r3, r2
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	4413      	add	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	440b      	add	r3, r1
 8005d40:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d105      	bne.n	8005d56 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	4619      	mov	r1, r3
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 fb0a 	bl	800636a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d58:	3301      	adds	r3, #1
 8005d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	791b      	ldrb	r3, [r3, #4]
 8005d60:	461a      	mov	r2, r3
 8005d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d3e4      	bcc.n	8005d32 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f003 ff35 	bl	8009bdc <USB_ReadInterrupts>
 8005d72:	4603      	mov	r3, r0
 8005d74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d7c:	d13c      	bne.n	8005df8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d7e:	2301      	movs	r3, #1
 8005d80:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d82:	e02b      	b.n	8005ddc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d94:	6879      	ldr	r1, [r7, #4]
 8005d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d98:	4613      	mov	r3, r2
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	4413      	add	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	440b      	add	r3, r1
 8005da2:	3318      	adds	r3, #24
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d115      	bne.n	8005dd6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005daa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	da12      	bge.n	8005dd6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005db0:	6879      	ldr	r1, [r7, #4]
 8005db2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005db4:	4613      	mov	r3, r2
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	4413      	add	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	440b      	add	r3, r1
 8005dbe:	3317      	adds	r3, #23
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	4619      	mov	r1, r3
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 faca 	bl	800636a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd8:	3301      	adds	r3, #1
 8005dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	791b      	ldrb	r3, [r3, #4]
 8005de0:	461a      	mov	r2, r3
 8005de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d3cd      	bcc.n	8005d84 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695a      	ldr	r2, [r3, #20]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005df6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f003 feed 	bl	8009bdc <USB_ReadInterrupts>
 8005e02:	4603      	mov	r3, r0
 8005e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e0c:	d156      	bne.n	8005ebc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e0e:	2301      	movs	r3, #1
 8005e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e12:	e045      	b.n	8005ea0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e24:	6879      	ldr	r1, [r7, #4]
 8005e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e28:	4613      	mov	r3, r2
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	4413      	add	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	440b      	add	r3, r1
 8005e32:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d12e      	bne.n	8005e9a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005e3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	da2b      	bge.n	8005e9a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005e4e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d121      	bne.n	8005e9a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	4413      	add	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	440b      	add	r3, r1
 8005e64:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005e68:	2201      	movs	r2, #1
 8005e6a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005e6c:	6a3b      	ldr	r3, [r7, #32]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10a      	bne.n	8005e9a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	69fa      	ldr	r2, [r7, #28]
 8005e8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e96:	6053      	str	r3, [r2, #4]
            break;
 8005e98:	e008      	b.n	8005eac <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	791b      	ldrb	r3, [r3, #4]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d3b3      	bcc.n	8005e14 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	695a      	ldr	r2, [r3, #20]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005eba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f003 fe8b 	bl	8009bdc <USB_ReadInterrupts>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ed0:	d10a      	bne.n	8005ee8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f006 fae6 	bl	800c4a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695a      	ldr	r2, [r3, #20]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005ee6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f003 fe75 	bl	8009bdc <USB_ReadInterrupts>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	d115      	bne.n	8005f28 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	f003 0304 	and.w	r3, r3, #4
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d002      	beq.n	8005f14 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f006 fad6 	bl	800c4c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6859      	ldr	r1, [r3, #4]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69ba      	ldr	r2, [r7, #24]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	605a      	str	r2, [r3, #4]
 8005f24:	e000      	b.n	8005f28 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005f26:	bf00      	nop
    }
  }
}
 8005f28:	3734      	adds	r7, #52	@ 0x34
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd90      	pop	{r4, r7, pc}

08005f2e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b082      	sub	sp, #8
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	460b      	mov	r3, r1
 8005f38:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d101      	bne.n	8005f48 <HAL_PCD_SetAddress+0x1a>
 8005f44:	2302      	movs	r3, #2
 8005f46:	e012      	b.n	8005f6e <HAL_PCD_SetAddress+0x40>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	78fa      	ldrb	r2, [r7, #3]
 8005f54:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	78fa      	ldrb	r2, [r7, #3]
 8005f5c:	4611      	mov	r1, r2
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f003 fdd4 	bl	8009b0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b084      	sub	sp, #16
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	4608      	mov	r0, r1
 8005f80:	4611      	mov	r1, r2
 8005f82:	461a      	mov	r2, r3
 8005f84:	4603      	mov	r3, r0
 8005f86:	70fb      	strb	r3, [r7, #3]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	803b      	strh	r3, [r7, #0]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	da0f      	bge.n	8005fbc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f9c:	78fb      	ldrb	r3, [r7, #3]
 8005f9e:	f003 020f 	and.w	r2, r3, #15
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	00db      	lsls	r3, r3, #3
 8005fa6:	4413      	add	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	3310      	adds	r3, #16
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	4413      	add	r3, r2
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	705a      	strb	r2, [r3, #1]
 8005fba:	e00f      	b.n	8005fdc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fbc:	78fb      	ldrb	r3, [r7, #3]
 8005fbe:	f003 020f 	and.w	r2, r3, #15
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	00db      	lsls	r3, r3, #3
 8005fc6:	4413      	add	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005fdc:	78fb      	ldrb	r3, [r7, #3]
 8005fde:	f003 030f 	and.w	r3, r3, #15
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005fe8:	883b      	ldrh	r3, [r7, #0]
 8005fea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	78ba      	ldrb	r2, [r7, #2]
 8005ff6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	785b      	ldrb	r3, [r3, #1]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	461a      	mov	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800600a:	78bb      	ldrb	r3, [r7, #2]
 800600c:	2b02      	cmp	r3, #2
 800600e:	d102      	bne.n	8006016 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_PCD_EP_Open+0xae>
 8006020:	2302      	movs	r3, #2
 8006022:	e00e      	b.n	8006042 <HAL_PCD_EP_Open+0xcc>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68f9      	ldr	r1, [r7, #12]
 8006032:	4618      	mov	r0, r3
 8006034:	f002 ff54 	bl	8008ee0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006040:	7afb      	ldrb	r3, [r7, #11]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b084      	sub	sp, #16
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	460b      	mov	r3, r1
 8006054:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006056:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800605a:	2b00      	cmp	r3, #0
 800605c:	da0f      	bge.n	800607e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800605e:	78fb      	ldrb	r3, [r7, #3]
 8006060:	f003 020f 	and.w	r2, r3, #15
 8006064:	4613      	mov	r3, r2
 8006066:	00db      	lsls	r3, r3, #3
 8006068:	4413      	add	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	3310      	adds	r3, #16
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	4413      	add	r3, r2
 8006072:	3304      	adds	r3, #4
 8006074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	705a      	strb	r2, [r3, #1]
 800607c:	e00f      	b.n	800609e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800607e:	78fb      	ldrb	r3, [r7, #3]
 8006080:	f003 020f 	and.w	r2, r3, #15
 8006084:	4613      	mov	r3, r2
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	4413      	add	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	4413      	add	r3, r2
 8006094:	3304      	adds	r3, #4
 8006096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800609e:	78fb      	ldrb	r3, [r7, #3]
 80060a0:	f003 030f 	and.w	r3, r3, #15
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d101      	bne.n	80060b8 <HAL_PCD_EP_Close+0x6e>
 80060b4:	2302      	movs	r3, #2
 80060b6:	e00e      	b.n	80060d6 <HAL_PCD_EP_Close+0x8c>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68f9      	ldr	r1, [r7, #12]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f002 ff92 	bl	8008ff0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b086      	sub	sp, #24
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	60f8      	str	r0, [r7, #12]
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	603b      	str	r3, [r7, #0]
 80060ea:	460b      	mov	r3, r1
 80060ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060ee:	7afb      	ldrb	r3, [r7, #11]
 80060f0:	f003 020f 	and.w	r2, r3, #15
 80060f4:	4613      	mov	r3, r2
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	4413      	add	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	4413      	add	r3, r2
 8006104:	3304      	adds	r3, #4
 8006106:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	2200      	movs	r2, #0
 8006118:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2200      	movs	r2, #0
 800611e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006120:	7afb      	ldrb	r3, [r7, #11]
 8006122:	f003 030f 	and.w	r3, r3, #15
 8006126:	b2da      	uxtb	r2, r3
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	799b      	ldrb	r3, [r3, #6]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d102      	bne.n	800613a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6818      	ldr	r0, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	799b      	ldrb	r3, [r3, #6]
 8006142:	461a      	mov	r2, r3
 8006144:	6979      	ldr	r1, [r7, #20]
 8006146:	f003 f82f 	bl	80091a8 <USB_EPStartXfer>

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006160:	78fb      	ldrb	r3, [r7, #3]
 8006162:	f003 020f 	and.w	r2, r3, #15
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	4613      	mov	r3, r2
 800616a:	00db      	lsls	r3, r3, #3
 800616c:	4413      	add	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	440b      	add	r3, r1
 8006172:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006176:	681b      	ldr	r3, [r3, #0]
}
 8006178:	4618      	mov	r0, r3
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	607a      	str	r2, [r7, #4]
 800618e:	603b      	str	r3, [r7, #0]
 8006190:	460b      	mov	r3, r1
 8006192:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006194:	7afb      	ldrb	r3, [r7, #11]
 8006196:	f003 020f 	and.w	r2, r3, #15
 800619a:	4613      	mov	r3, r2
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	4413      	add	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	3310      	adds	r3, #16
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4413      	add	r3, r2
 80061a8:	3304      	adds	r3, #4
 80061aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2200      	movs	r2, #0
 80061bc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2201      	movs	r2, #1
 80061c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061c4:	7afb      	ldrb	r3, [r7, #11]
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	799b      	ldrb	r3, [r3, #6]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d102      	bne.n	80061de <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6818      	ldr	r0, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	799b      	ldrb	r3, [r3, #6]
 80061e6:	461a      	mov	r2, r3
 80061e8:	6979      	ldr	r1, [r7, #20]
 80061ea:	f002 ffdd 	bl	80091a8 <USB_EPStartXfer>

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	460b      	mov	r3, r1
 8006202:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006204:	78fb      	ldrb	r3, [r7, #3]
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	7912      	ldrb	r2, [r2, #4]
 800620e:	4293      	cmp	r3, r2
 8006210:	d901      	bls.n	8006216 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e04f      	b.n	80062b6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006216:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800621a:	2b00      	cmp	r3, #0
 800621c:	da0f      	bge.n	800623e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800621e:	78fb      	ldrb	r3, [r7, #3]
 8006220:	f003 020f 	and.w	r2, r3, #15
 8006224:	4613      	mov	r3, r2
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	4413      	add	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	3310      	adds	r3, #16
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	4413      	add	r3, r2
 8006232:	3304      	adds	r3, #4
 8006234:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2201      	movs	r2, #1
 800623a:	705a      	strb	r2, [r3, #1]
 800623c:	e00d      	b.n	800625a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800623e:	78fa      	ldrb	r2, [r7, #3]
 8006240:	4613      	mov	r3, r2
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	4413      	add	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	4413      	add	r3, r2
 8006250:	3304      	adds	r3, #4
 8006252:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006260:	78fb      	ldrb	r3, [r7, #3]
 8006262:	f003 030f 	and.w	r3, r3, #15
 8006266:	b2da      	uxtb	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006272:	2b01      	cmp	r3, #1
 8006274:	d101      	bne.n	800627a <HAL_PCD_EP_SetStall+0x82>
 8006276:	2302      	movs	r3, #2
 8006278:	e01d      	b.n	80062b6 <HAL_PCD_EP_SetStall+0xbe>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68f9      	ldr	r1, [r7, #12]
 8006288:	4618      	mov	r0, r3
 800628a:	f003 fb6b 	bl	8009964 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800628e:	78fb      	ldrb	r3, [r7, #3]
 8006290:	f003 030f 	and.w	r3, r3, #15
 8006294:	2b00      	cmp	r3, #0
 8006296:	d109      	bne.n	80062ac <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6818      	ldr	r0, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	7999      	ldrb	r1, [r3, #6]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80062a6:	461a      	mov	r2, r3
 80062a8:	f003 fd5c 	bl	8009d64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	460b      	mov	r3, r1
 80062c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80062ca:	78fb      	ldrb	r3, [r7, #3]
 80062cc:	f003 030f 	and.w	r3, r3, #15
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	7912      	ldrb	r2, [r2, #4]
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d901      	bls.n	80062dc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e042      	b.n	8006362 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80062dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	da0f      	bge.n	8006304 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062e4:	78fb      	ldrb	r3, [r7, #3]
 80062e6:	f003 020f 	and.w	r2, r3, #15
 80062ea:	4613      	mov	r3, r2
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	4413      	add	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	3310      	adds	r3, #16
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	4413      	add	r3, r2
 80062f8:	3304      	adds	r3, #4
 80062fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2201      	movs	r2, #1
 8006300:	705a      	strb	r2, [r3, #1]
 8006302:	e00f      	b.n	8006324 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006304:	78fb      	ldrb	r3, [r7, #3]
 8006306:	f003 020f 	and.w	r2, r3, #15
 800630a:	4613      	mov	r3, r2
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	4413      	add	r3, r2
 800631a:	3304      	adds	r3, #4
 800631c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800632a:	78fb      	ldrb	r3, [r7, #3]
 800632c:	f003 030f 	and.w	r3, r3, #15
 8006330:	b2da      	uxtb	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800633c:	2b01      	cmp	r3, #1
 800633e:	d101      	bne.n	8006344 <HAL_PCD_EP_ClrStall+0x86>
 8006340:	2302      	movs	r3, #2
 8006342:	e00e      	b.n	8006362 <HAL_PCD_EP_ClrStall+0xa4>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68f9      	ldr	r1, [r7, #12]
 8006352:	4618      	mov	r0, r3
 8006354:	f003 fb74 	bl	8009a40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b084      	sub	sp, #16
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	460b      	mov	r3, r1
 8006374:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006376:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800637a:	2b00      	cmp	r3, #0
 800637c:	da0c      	bge.n	8006398 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800637e:	78fb      	ldrb	r3, [r7, #3]
 8006380:	f003 020f 	and.w	r2, r3, #15
 8006384:	4613      	mov	r3, r2
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	4413      	add	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	3310      	adds	r3, #16
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	4413      	add	r3, r2
 8006392:	3304      	adds	r3, #4
 8006394:	60fb      	str	r3, [r7, #12]
 8006396:	e00c      	b.n	80063b2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006398:	78fb      	ldrb	r3, [r7, #3]
 800639a:	f003 020f 	and.w	r2, r3, #15
 800639e:	4613      	mov	r3, r2
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	4413      	add	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	4413      	add	r3, r2
 80063ae:	3304      	adds	r3, #4
 80063b0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68f9      	ldr	r1, [r7, #12]
 80063b8:	4618      	mov	r0, r3
 80063ba:	f003 f993 	bl	80096e4 <USB_EPStopXfer>
 80063be:	4603      	mov	r3, r0
 80063c0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80063c2:	7afb      	ldrb	r3, [r7, #11]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08a      	sub	sp, #40	@ 0x28
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	4613      	mov	r3, r2
 80063e4:	00db      	lsls	r3, r3, #3
 80063e6:	4413      	add	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	3310      	adds	r3, #16
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	4413      	add	r3, r2
 80063f0:	3304      	adds	r3, #4
 80063f2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	695a      	ldr	r2, [r3, #20]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d901      	bls.n	8006404 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e06b      	b.n	80064dc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	691a      	ldr	r2, [r3, #16]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	69fa      	ldr	r2, [r7, #28]
 8006416:	429a      	cmp	r2, r3
 8006418:	d902      	bls.n	8006420 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	3303      	adds	r3, #3
 8006424:	089b      	lsrs	r3, r3, #2
 8006426:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006428:	e02a      	b.n	8006480 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	691a      	ldr	r2, [r3, #16]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	69fa      	ldr	r2, [r7, #28]
 800643c:	429a      	cmp	r2, r3
 800643e:	d902      	bls.n	8006446 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	3303      	adds	r3, #3
 800644a:	089b      	lsrs	r3, r3, #2
 800644c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	68d9      	ldr	r1, [r3, #12]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	b2da      	uxtb	r2, r3
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	4603      	mov	r3, r0
 8006462:	6978      	ldr	r0, [r7, #20]
 8006464:	f003 f9e8 	bl	8009838 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	68da      	ldr	r2, [r3, #12]
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	441a      	add	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	695a      	ldr	r2, [r3, #20]
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	441a      	add	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	429a      	cmp	r2, r3
 8006494:	d809      	bhi.n	80064aa <PCD_WriteEmptyTxFifo+0xde>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	695a      	ldr	r2, [r3, #20]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800649e:	429a      	cmp	r2, r3
 80064a0:	d203      	bcs.n	80064aa <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1bf      	bne.n	800642a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	691a      	ldr	r2, [r3, #16]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d811      	bhi.n	80064da <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	f003 030f 	and.w	r3, r3, #15
 80064bc:	2201      	movs	r2, #1
 80064be:	fa02 f303 	lsl.w	r3, r2, r3
 80064c2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	43db      	mvns	r3, r3
 80064d0:	6939      	ldr	r1, [r7, #16]
 80064d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064d6:	4013      	ands	r3, r2
 80064d8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3720      	adds	r7, #32
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b088      	sub	sp, #32
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	333c      	adds	r3, #60	@ 0x3c
 80064fc:	3304      	adds	r3, #4
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	799b      	ldrb	r3, [r3, #6]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d17b      	bne.n	8006612 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	f003 0308 	and.w	r3, r3, #8
 8006520:	2b00      	cmp	r3, #0
 8006522:	d015      	beq.n	8006550 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	4a61      	ldr	r2, [pc, #388]	@ (80066ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	f240 80b9 	bls.w	80066a0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 80b3 	beq.w	80066a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	4413      	add	r3, r2
 8006542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006546:	461a      	mov	r2, r3
 8006548:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800654c:	6093      	str	r3, [r2, #8]
 800654e:	e0a7      	b.n	80066a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d009      	beq.n	800656e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006566:	461a      	mov	r2, r3
 8006568:	2320      	movs	r3, #32
 800656a:	6093      	str	r3, [r2, #8]
 800656c:	e098      	b.n	80066a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006574:	2b00      	cmp	r3, #0
 8006576:	f040 8093 	bne.w	80066a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	4a4b      	ldr	r2, [pc, #300]	@ (80066ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d90f      	bls.n	80065a2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	4413      	add	r3, r2
 8006594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006598:	461a      	mov	r2, r3
 800659a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800659e:	6093      	str	r3, [r2, #8]
 80065a0:	e07e      	b.n	80066a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	4613      	mov	r3, r2
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	4413      	add	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	4413      	add	r3, r2
 80065b4:	3304      	adds	r3, #4
 80065b6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6a1a      	ldr	r2, [r3, #32]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	0159      	lsls	r1, r3, #5
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	440b      	add	r3, r1
 80065c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ce:	1ad2      	subs	r2, r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d114      	bne.n	8006604 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d109      	bne.n	80065f6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6818      	ldr	r0, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80065ec:	461a      	mov	r2, r3
 80065ee:	2101      	movs	r1, #1
 80065f0:	f003 fbb8 	bl	8009d64 <USB_EP0_OutStart>
 80065f4:	e006      	b.n	8006604 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	441a      	add	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	b2db      	uxtb	r3, r3
 8006608:	4619      	mov	r1, r3
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f005 fe86 	bl	800c31c <HAL_PCD_DataOutStageCallback>
 8006610:	e046      	b.n	80066a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	4a26      	ldr	r2, [pc, #152]	@ (80066b0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d124      	bne.n	8006664 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00a      	beq.n	800663a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	4413      	add	r3, r2
 800662c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006630:	461a      	mov	r2, r3
 8006632:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006636:	6093      	str	r3, [r2, #8]
 8006638:	e032      	b.n	80066a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f003 0320 	and.w	r3, r3, #32
 8006640:	2b00      	cmp	r3, #0
 8006642:	d008      	beq.n	8006656 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006650:	461a      	mov	r2, r3
 8006652:	2320      	movs	r3, #32
 8006654:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	b2db      	uxtb	r3, r3
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f005 fe5d 	bl	800c31c <HAL_PCD_DataOutStageCallback>
 8006662:	e01d      	b.n	80066a0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d114      	bne.n	8006694 <PCD_EP_OutXfrComplete_int+0x1b0>
 800666a:	6879      	ldr	r1, [r7, #4]
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	4613      	mov	r3, r2
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	4413      	add	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	440b      	add	r3, r1
 8006678:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d108      	bne.n	8006694 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6818      	ldr	r0, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800668c:	461a      	mov	r2, r3
 800668e:	2100      	movs	r1, #0
 8006690:	f003 fb68 	bl	8009d64 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	b2db      	uxtb	r3, r3
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f005 fe3e 	bl	800c31c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3720      	adds	r7, #32
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	4f54300a 	.word	0x4f54300a
 80066b0:	4f54310a 	.word	0x4f54310a

080066b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	333c      	adds	r3, #60	@ 0x3c
 80066cc:	3304      	adds	r3, #4
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	4a15      	ldr	r2, [pc, #84]	@ (800673c <PCD_EP_OutSetupPacket_int+0x88>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d90e      	bls.n	8006708 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d009      	beq.n	8006708 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006700:	461a      	mov	r2, r3
 8006702:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006706:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f005 fdf5 	bl	800c2f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4a0a      	ldr	r2, [pc, #40]	@ (800673c <PCD_EP_OutSetupPacket_int+0x88>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d90c      	bls.n	8006730 <PCD_EP_OutSetupPacket_int+0x7c>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	799b      	ldrb	r3, [r3, #6]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d108      	bne.n	8006730 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6818      	ldr	r0, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006728:	461a      	mov	r2, r3
 800672a:	2101      	movs	r1, #1
 800672c:	f003 fb1a 	bl	8009d64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3718      	adds	r7, #24
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	4f54300a 	.word	0x4f54300a

08006740 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	460b      	mov	r3, r1
 800674a:	70fb      	strb	r3, [r7, #3]
 800674c:	4613      	mov	r3, r2
 800674e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006756:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006758:	78fb      	ldrb	r3, [r7, #3]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d107      	bne.n	800676e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800675e:	883b      	ldrh	r3, [r7, #0]
 8006760:	0419      	lsls	r1, r3, #16
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	430a      	orrs	r2, r1
 800676a:	629a      	str	r2, [r3, #40]	@ 0x28
 800676c:	e028      	b.n	80067c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006774:	0c1b      	lsrs	r3, r3, #16
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	4413      	add	r3, r2
 800677a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800677c:	2300      	movs	r3, #0
 800677e:	73fb      	strb	r3, [r7, #15]
 8006780:	e00d      	b.n	800679e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	7bfb      	ldrb	r3, [r7, #15]
 8006788:	3340      	adds	r3, #64	@ 0x40
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	0c1b      	lsrs	r3, r3, #16
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	4413      	add	r3, r2
 8006796:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	3301      	adds	r3, #1
 800679c:	73fb      	strb	r3, [r7, #15]
 800679e:	7bfa      	ldrb	r2, [r7, #15]
 80067a0:	78fb      	ldrb	r3, [r7, #3]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d3ec      	bcc.n	8006782 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80067a8:	883b      	ldrh	r3, [r7, #0]
 80067aa:	0418      	lsls	r0, r3, #16
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6819      	ldr	r1, [r3, #0]
 80067b0:	78fb      	ldrb	r3, [r7, #3]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	4302      	orrs	r2, r0
 80067b8:	3340      	adds	r3, #64	@ 0x40
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	440b      	add	r3, r1
 80067be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	460b      	mov	r3, r1
 80067d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	887a      	ldrh	r2, [r7, #2]
 80067e0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e267      	b.n	8006cea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d075      	beq.n	8006912 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006826:	4b88      	ldr	r3, [pc, #544]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f003 030c 	and.w	r3, r3, #12
 800682e:	2b04      	cmp	r3, #4
 8006830:	d00c      	beq.n	800684c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006832:	4b85      	ldr	r3, [pc, #532]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800683a:	2b08      	cmp	r3, #8
 800683c:	d112      	bne.n	8006864 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800683e:	4b82      	ldr	r3, [pc, #520]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006846:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800684a:	d10b      	bne.n	8006864 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800684c:	4b7e      	ldr	r3, [pc, #504]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d05b      	beq.n	8006910 <HAL_RCC_OscConfig+0x108>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d157      	bne.n	8006910 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e242      	b.n	8006cea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800686c:	d106      	bne.n	800687c <HAL_RCC_OscConfig+0x74>
 800686e:	4b76      	ldr	r3, [pc, #472]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a75      	ldr	r2, [pc, #468]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 8006874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	e01d      	b.n	80068b8 <HAL_RCC_OscConfig+0xb0>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006884:	d10c      	bne.n	80068a0 <HAL_RCC_OscConfig+0x98>
 8006886:	4b70      	ldr	r3, [pc, #448]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a6f      	ldr	r2, [pc, #444]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 800688c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006890:	6013      	str	r3, [r2, #0]
 8006892:	4b6d      	ldr	r3, [pc, #436]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a6c      	ldr	r2, [pc, #432]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 8006898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800689c:	6013      	str	r3, [r2, #0]
 800689e:	e00b      	b.n	80068b8 <HAL_RCC_OscConfig+0xb0>
 80068a0:	4b69      	ldr	r3, [pc, #420]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a68      	ldr	r2, [pc, #416]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 80068a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068aa:	6013      	str	r3, [r2, #0]
 80068ac:	4b66      	ldr	r3, [pc, #408]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a65      	ldr	r2, [pc, #404]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 80068b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d013      	beq.n	80068e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c0:	f7fe fa72 	bl	8004da8 <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068c8:	f7fe fa6e 	bl	8004da8 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b64      	cmp	r3, #100	@ 0x64
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e207      	b.n	8006cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068da:	4b5b      	ldr	r3, [pc, #364]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0f0      	beq.n	80068c8 <HAL_RCC_OscConfig+0xc0>
 80068e6:	e014      	b.n	8006912 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e8:	f7fe fa5e 	bl	8004da8 <HAL_GetTick>
 80068ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ee:	e008      	b.n	8006902 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068f0:	f7fe fa5a 	bl	8004da8 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	2b64      	cmp	r3, #100	@ 0x64
 80068fc:	d901      	bls.n	8006902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e1f3      	b.n	8006cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006902:	4b51      	ldr	r3, [pc, #324]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1f0      	bne.n	80068f0 <HAL_RCC_OscConfig+0xe8>
 800690e:	e000      	b.n	8006912 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d063      	beq.n	80069e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800691e:	4b4a      	ldr	r3, [pc, #296]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f003 030c 	and.w	r3, r3, #12
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00b      	beq.n	8006942 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800692a:	4b47      	ldr	r3, [pc, #284]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006932:	2b08      	cmp	r3, #8
 8006934:	d11c      	bne.n	8006970 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006936:	4b44      	ldr	r3, [pc, #272]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d116      	bne.n	8006970 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006942:	4b41      	ldr	r3, [pc, #260]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0302 	and.w	r3, r3, #2
 800694a:	2b00      	cmp	r3, #0
 800694c:	d005      	beq.n	800695a <HAL_RCC_OscConfig+0x152>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d001      	beq.n	800695a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e1c7      	b.n	8006cea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800695a:	4b3b      	ldr	r3, [pc, #236]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	4937      	ldr	r1, [pc, #220]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 800696a:	4313      	orrs	r3, r2
 800696c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800696e:	e03a      	b.n	80069e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d020      	beq.n	80069ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006978:	4b34      	ldr	r3, [pc, #208]	@ (8006a4c <HAL_RCC_OscConfig+0x244>)
 800697a:	2201      	movs	r2, #1
 800697c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697e:	f7fe fa13 	bl	8004da8 <HAL_GetTick>
 8006982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006984:	e008      	b.n	8006998 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006986:	f7fe fa0f 	bl	8004da8 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	2b02      	cmp	r3, #2
 8006992:	d901      	bls.n	8006998 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e1a8      	b.n	8006cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006998:	4b2b      	ldr	r3, [pc, #172]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0302 	and.w	r3, r3, #2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d0f0      	beq.n	8006986 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069a4:	4b28      	ldr	r3, [pc, #160]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	00db      	lsls	r3, r3, #3
 80069b2:	4925      	ldr	r1, [pc, #148]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	600b      	str	r3, [r1, #0]
 80069b8:	e015      	b.n	80069e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069ba:	4b24      	ldr	r3, [pc, #144]	@ (8006a4c <HAL_RCC_OscConfig+0x244>)
 80069bc:	2200      	movs	r2, #0
 80069be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c0:	f7fe f9f2 	bl	8004da8 <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069c8:	f7fe f9ee 	bl	8004da8 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e187      	b.n	8006cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069da:	4b1b      	ldr	r3, [pc, #108]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1f0      	bne.n	80069c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0308 	and.w	r3, r3, #8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d036      	beq.n	8006a60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d016      	beq.n	8006a28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069fa:	4b15      	ldr	r3, [pc, #84]	@ (8006a50 <HAL_RCC_OscConfig+0x248>)
 80069fc:	2201      	movs	r2, #1
 80069fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a00:	f7fe f9d2 	bl	8004da8 <HAL_GetTick>
 8006a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a06:	e008      	b.n	8006a1a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a08:	f7fe f9ce 	bl	8004da8 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d901      	bls.n	8006a1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e167      	b.n	8006cea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a48 <HAL_RCC_OscConfig+0x240>)
 8006a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0f0      	beq.n	8006a08 <HAL_RCC_OscConfig+0x200>
 8006a26:	e01b      	b.n	8006a60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a28:	4b09      	ldr	r3, [pc, #36]	@ (8006a50 <HAL_RCC_OscConfig+0x248>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a2e:	f7fe f9bb 	bl	8004da8 <HAL_GetTick>
 8006a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a34:	e00e      	b.n	8006a54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a36:	f7fe f9b7 	bl	8004da8 <HAL_GetTick>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d907      	bls.n	8006a54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e150      	b.n	8006cea <HAL_RCC_OscConfig+0x4e2>
 8006a48:	40023800 	.word	0x40023800
 8006a4c:	42470000 	.word	0x42470000
 8006a50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a54:	4b88      	ldr	r3, [pc, #544]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1ea      	bne.n	8006a36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 8097 	beq.w	8006b9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a72:	4b81      	ldr	r3, [pc, #516]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10f      	bne.n	8006a9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60bb      	str	r3, [r7, #8]
 8006a82:	4b7d      	ldr	r3, [pc, #500]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a86:	4a7c      	ldr	r2, [pc, #496]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a8e:	4b7a      	ldr	r3, [pc, #488]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a96:	60bb      	str	r3, [r7, #8]
 8006a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a9e:	4b77      	ldr	r3, [pc, #476]	@ (8006c7c <HAL_RCC_OscConfig+0x474>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d118      	bne.n	8006adc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006aaa:	4b74      	ldr	r3, [pc, #464]	@ (8006c7c <HAL_RCC_OscConfig+0x474>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a73      	ldr	r2, [pc, #460]	@ (8006c7c <HAL_RCC_OscConfig+0x474>)
 8006ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ab6:	f7fe f977 	bl	8004da8 <HAL_GetTick>
 8006aba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006abc:	e008      	b.n	8006ad0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006abe:	f7fe f973 	bl	8004da8 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d901      	bls.n	8006ad0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e10c      	b.n	8006cea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ad0:	4b6a      	ldr	r3, [pc, #424]	@ (8006c7c <HAL_RCC_OscConfig+0x474>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0f0      	beq.n	8006abe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d106      	bne.n	8006af2 <HAL_RCC_OscConfig+0x2ea>
 8006ae4:	4b64      	ldr	r3, [pc, #400]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ae8:	4a63      	ldr	r2, [pc, #396]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006aea:	f043 0301 	orr.w	r3, r3, #1
 8006aee:	6713      	str	r3, [r2, #112]	@ 0x70
 8006af0:	e01c      	b.n	8006b2c <HAL_RCC_OscConfig+0x324>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	2b05      	cmp	r3, #5
 8006af8:	d10c      	bne.n	8006b14 <HAL_RCC_OscConfig+0x30c>
 8006afa:	4b5f      	ldr	r3, [pc, #380]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006afe:	4a5e      	ldr	r2, [pc, #376]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006b00:	f043 0304 	orr.w	r3, r3, #4
 8006b04:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b06:	4b5c      	ldr	r3, [pc, #368]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b0a:	4a5b      	ldr	r2, [pc, #364]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006b0c:	f043 0301 	orr.w	r3, r3, #1
 8006b10:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b12:	e00b      	b.n	8006b2c <HAL_RCC_OscConfig+0x324>
 8006b14:	4b58      	ldr	r3, [pc, #352]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b18:	4a57      	ldr	r2, [pc, #348]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006b1a:	f023 0301 	bic.w	r3, r3, #1
 8006b1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b20:	4b55      	ldr	r3, [pc, #340]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b24:	4a54      	ldr	r2, [pc, #336]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006b26:	f023 0304 	bic.w	r3, r3, #4
 8006b2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d015      	beq.n	8006b60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b34:	f7fe f938 	bl	8004da8 <HAL_GetTick>
 8006b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b3a:	e00a      	b.n	8006b52 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b3c:	f7fe f934 	bl	8004da8 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e0cb      	b.n	8006cea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b52:	4b49      	ldr	r3, [pc, #292]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d0ee      	beq.n	8006b3c <HAL_RCC_OscConfig+0x334>
 8006b5e:	e014      	b.n	8006b8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b60:	f7fe f922 	bl	8004da8 <HAL_GetTick>
 8006b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b66:	e00a      	b.n	8006b7e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b68:	f7fe f91e 	bl	8004da8 <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e0b5      	b.n	8006cea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1ee      	bne.n	8006b68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b8a:	7dfb      	ldrb	r3, [r7, #23]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d105      	bne.n	8006b9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b90:	4b39      	ldr	r3, [pc, #228]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b94:	4a38      	ldr	r2, [pc, #224]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006b96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 80a1 	beq.w	8006ce8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ba6:	4b34      	ldr	r3, [pc, #208]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f003 030c 	and.w	r3, r3, #12
 8006bae:	2b08      	cmp	r3, #8
 8006bb0:	d05c      	beq.n	8006c6c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d141      	bne.n	8006c3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bba:	4b31      	ldr	r3, [pc, #196]	@ (8006c80 <HAL_RCC_OscConfig+0x478>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bc0:	f7fe f8f2 	bl	8004da8 <HAL_GetTick>
 8006bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bc6:	e008      	b.n	8006bda <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bc8:	f7fe f8ee 	bl	8004da8 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d901      	bls.n	8006bda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e087      	b.n	8006cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bda:	4b27      	ldr	r3, [pc, #156]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1f0      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	69da      	ldr	r2, [r3, #28]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf4:	019b      	lsls	r3, r3, #6
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bfc:	085b      	lsrs	r3, r3, #1
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	041b      	lsls	r3, r3, #16
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c08:	061b      	lsls	r3, r3, #24
 8006c0a:	491b      	ldr	r1, [pc, #108]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c10:	4b1b      	ldr	r3, [pc, #108]	@ (8006c80 <HAL_RCC_OscConfig+0x478>)
 8006c12:	2201      	movs	r2, #1
 8006c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c16:	f7fe f8c7 	bl	8004da8 <HAL_GetTick>
 8006c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c1c:	e008      	b.n	8006c30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c1e:	f7fe f8c3 	bl	8004da8 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d901      	bls.n	8006c30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e05c      	b.n	8006cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c30:	4b11      	ldr	r3, [pc, #68]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d0f0      	beq.n	8006c1e <HAL_RCC_OscConfig+0x416>
 8006c3c:	e054      	b.n	8006ce8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c3e:	4b10      	ldr	r3, [pc, #64]	@ (8006c80 <HAL_RCC_OscConfig+0x478>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c44:	f7fe f8b0 	bl	8004da8 <HAL_GetTick>
 8006c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c4a:	e008      	b.n	8006c5e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c4c:	f7fe f8ac 	bl	8004da8 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e045      	b.n	8006cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c5e:	4b06      	ldr	r3, [pc, #24]	@ (8006c78 <HAL_RCC_OscConfig+0x470>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1f0      	bne.n	8006c4c <HAL_RCC_OscConfig+0x444>
 8006c6a:	e03d      	b.n	8006ce8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d107      	bne.n	8006c84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e038      	b.n	8006cea <HAL_RCC_OscConfig+0x4e2>
 8006c78:	40023800 	.word	0x40023800
 8006c7c:	40007000 	.word	0x40007000
 8006c80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c84:	4b1b      	ldr	r3, [pc, #108]	@ (8006cf4 <HAL_RCC_OscConfig+0x4ec>)
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d028      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d121      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d11a      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006cba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d111      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cca:	085b      	lsrs	r3, r3, #1
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d107      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d001      	beq.n	8006ce8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e000      	b.n	8006cea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3718      	adds	r7, #24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	40023800 	.word	0x40023800

08006cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e0cc      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d0c:	4b68      	ldr	r3, [pc, #416]	@ (8006eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0307 	and.w	r3, r3, #7
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d90c      	bls.n	8006d34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d1a:	4b65      	ldr	r3, [pc, #404]	@ (8006eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	b2d2      	uxtb	r2, r2
 8006d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d22:	4b63      	ldr	r3, [pc, #396]	@ (8006eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d001      	beq.n	8006d34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e0b8      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d020      	beq.n	8006d82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d005      	beq.n	8006d58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d4c:	4b59      	ldr	r3, [pc, #356]	@ (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	4a58      	ldr	r2, [pc, #352]	@ (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006d56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0308 	and.w	r3, r3, #8
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d005      	beq.n	8006d70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d64:	4b53      	ldr	r3, [pc, #332]	@ (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	4a52      	ldr	r2, [pc, #328]	@ (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006d6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d70:	4b50      	ldr	r3, [pc, #320]	@ (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	494d      	ldr	r1, [pc, #308]	@ (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d044      	beq.n	8006e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d107      	bne.n	8006da6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d96:	4b47      	ldr	r3, [pc, #284]	@ (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d119      	bne.n	8006dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e07f      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d003      	beq.n	8006db6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006db2:	2b03      	cmp	r3, #3
 8006db4:	d107      	bne.n	8006dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006db6:	4b3f      	ldr	r3, [pc, #252]	@ (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d109      	bne.n	8006dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e06f      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e067      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dd6:	4b37      	ldr	r3, [pc, #220]	@ (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f023 0203 	bic.w	r2, r3, #3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	4934      	ldr	r1, [pc, #208]	@ (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006de8:	f7fd ffde 	bl	8004da8 <HAL_GetTick>
 8006dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dee:	e00a      	b.n	8006e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006df0:	f7fd ffda 	bl	8004da8 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e04f      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e06:	4b2b      	ldr	r3, [pc, #172]	@ (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f003 020c 	and.w	r2, r3, #12
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d1eb      	bne.n	8006df0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e18:	4b25      	ldr	r3, [pc, #148]	@ (8006eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0307 	and.w	r3, r3, #7
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d20c      	bcs.n	8006e40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e26:	4b22      	ldr	r3, [pc, #136]	@ (8006eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	b2d2      	uxtb	r2, r2
 8006e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e2e:	4b20      	ldr	r3, [pc, #128]	@ (8006eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0307 	and.w	r3, r3, #7
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d001      	beq.n	8006e40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e032      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0304 	and.w	r3, r3, #4
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d008      	beq.n	8006e5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e4c:	4b19      	ldr	r3, [pc, #100]	@ (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	4916      	ldr	r1, [pc, #88]	@ (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0308 	and.w	r3, r3, #8
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d009      	beq.n	8006e7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e6a:	4b12      	ldr	r3, [pc, #72]	@ (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	00db      	lsls	r3, r3, #3
 8006e78:	490e      	ldr	r1, [pc, #56]	@ (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e7e:	f000 f821 	bl	8006ec4 <HAL_RCC_GetSysClockFreq>
 8006e82:	4602      	mov	r2, r0
 8006e84:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	091b      	lsrs	r3, r3, #4
 8006e8a:	f003 030f 	and.w	r3, r3, #15
 8006e8e:	490a      	ldr	r1, [pc, #40]	@ (8006eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8006e90:	5ccb      	ldrb	r3, [r1, r3]
 8006e92:	fa22 f303 	lsr.w	r3, r2, r3
 8006e96:	4a09      	ldr	r2, [pc, #36]	@ (8006ebc <HAL_RCC_ClockConfig+0x1c4>)
 8006e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006e9a:	4b09      	ldr	r3, [pc, #36]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fd ff3e 	bl	8004d20 <HAL_InitTick>

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	40023c00 	.word	0x40023c00
 8006eb4:	40023800 	.word	0x40023800
 8006eb8:	0800f264 	.word	0x0800f264
 8006ebc:	20000000 	.word	0x20000000
 8006ec0:	20000004 	.word	0x20000004

08006ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ec8:	b094      	sub	sp, #80	@ 0x50
 8006eca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006edc:	4b79      	ldr	r3, [pc, #484]	@ (80070c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f003 030c 	and.w	r3, r3, #12
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d00d      	beq.n	8006f04 <HAL_RCC_GetSysClockFreq+0x40>
 8006ee8:	2b08      	cmp	r3, #8
 8006eea:	f200 80e1 	bhi.w	80070b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d002      	beq.n	8006ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8006ef2:	2b04      	cmp	r3, #4
 8006ef4:	d003      	beq.n	8006efe <HAL_RCC_GetSysClockFreq+0x3a>
 8006ef6:	e0db      	b.n	80070b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ef8:	4b73      	ldr	r3, [pc, #460]	@ (80070c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006efa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006efc:	e0db      	b.n	80070b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006efe:	4b72      	ldr	r3, [pc, #456]	@ (80070c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f02:	e0d8      	b.n	80070b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f04:	4b6f      	ldr	r3, [pc, #444]	@ (80070c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f0c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f0e:	4b6d      	ldr	r3, [pc, #436]	@ (80070c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d063      	beq.n	8006fe2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f1a:	4b6a      	ldr	r3, [pc, #424]	@ (80070c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	099b      	lsrs	r3, r3, #6
 8006f20:	2200      	movs	r2, #0
 8006f22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f2e:	2300      	movs	r3, #0
 8006f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006f36:	4622      	mov	r2, r4
 8006f38:	462b      	mov	r3, r5
 8006f3a:	f04f 0000 	mov.w	r0, #0
 8006f3e:	f04f 0100 	mov.w	r1, #0
 8006f42:	0159      	lsls	r1, r3, #5
 8006f44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f48:	0150      	lsls	r0, r2, #5
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4621      	mov	r1, r4
 8006f50:	1a51      	subs	r1, r2, r1
 8006f52:	6139      	str	r1, [r7, #16]
 8006f54:	4629      	mov	r1, r5
 8006f56:	eb63 0301 	sbc.w	r3, r3, r1
 8006f5a:	617b      	str	r3, [r7, #20]
 8006f5c:	f04f 0200 	mov.w	r2, #0
 8006f60:	f04f 0300 	mov.w	r3, #0
 8006f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f68:	4659      	mov	r1, fp
 8006f6a:	018b      	lsls	r3, r1, #6
 8006f6c:	4651      	mov	r1, sl
 8006f6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f72:	4651      	mov	r1, sl
 8006f74:	018a      	lsls	r2, r1, #6
 8006f76:	4651      	mov	r1, sl
 8006f78:	ebb2 0801 	subs.w	r8, r2, r1
 8006f7c:	4659      	mov	r1, fp
 8006f7e:	eb63 0901 	sbc.w	r9, r3, r1
 8006f82:	f04f 0200 	mov.w	r2, #0
 8006f86:	f04f 0300 	mov.w	r3, #0
 8006f8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f96:	4690      	mov	r8, r2
 8006f98:	4699      	mov	r9, r3
 8006f9a:	4623      	mov	r3, r4
 8006f9c:	eb18 0303 	adds.w	r3, r8, r3
 8006fa0:	60bb      	str	r3, [r7, #8]
 8006fa2:	462b      	mov	r3, r5
 8006fa4:	eb49 0303 	adc.w	r3, r9, r3
 8006fa8:	60fb      	str	r3, [r7, #12]
 8006faa:	f04f 0200 	mov.w	r2, #0
 8006fae:	f04f 0300 	mov.w	r3, #0
 8006fb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	028b      	lsls	r3, r1, #10
 8006fba:	4621      	mov	r1, r4
 8006fbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006fc0:	4621      	mov	r1, r4
 8006fc2:	028a      	lsls	r2, r1, #10
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fca:	2200      	movs	r2, #0
 8006fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006fd4:	f7f9 fe08 	bl	8000be8 <__aeabi_uldivmod>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4613      	mov	r3, r2
 8006fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fe0:	e058      	b.n	8007094 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fe2:	4b38      	ldr	r3, [pc, #224]	@ (80070c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	099b      	lsrs	r3, r3, #6
 8006fe8:	2200      	movs	r2, #0
 8006fea:	4618      	mov	r0, r3
 8006fec:	4611      	mov	r1, r2
 8006fee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ff2:	623b      	str	r3, [r7, #32]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ff8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ffc:	4642      	mov	r2, r8
 8006ffe:	464b      	mov	r3, r9
 8007000:	f04f 0000 	mov.w	r0, #0
 8007004:	f04f 0100 	mov.w	r1, #0
 8007008:	0159      	lsls	r1, r3, #5
 800700a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800700e:	0150      	lsls	r0, r2, #5
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	4641      	mov	r1, r8
 8007016:	ebb2 0a01 	subs.w	sl, r2, r1
 800701a:	4649      	mov	r1, r9
 800701c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007020:	f04f 0200 	mov.w	r2, #0
 8007024:	f04f 0300 	mov.w	r3, #0
 8007028:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800702c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007030:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007034:	ebb2 040a 	subs.w	r4, r2, sl
 8007038:	eb63 050b 	sbc.w	r5, r3, fp
 800703c:	f04f 0200 	mov.w	r2, #0
 8007040:	f04f 0300 	mov.w	r3, #0
 8007044:	00eb      	lsls	r3, r5, #3
 8007046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800704a:	00e2      	lsls	r2, r4, #3
 800704c:	4614      	mov	r4, r2
 800704e:	461d      	mov	r5, r3
 8007050:	4643      	mov	r3, r8
 8007052:	18e3      	adds	r3, r4, r3
 8007054:	603b      	str	r3, [r7, #0]
 8007056:	464b      	mov	r3, r9
 8007058:	eb45 0303 	adc.w	r3, r5, r3
 800705c:	607b      	str	r3, [r7, #4]
 800705e:	f04f 0200 	mov.w	r2, #0
 8007062:	f04f 0300 	mov.w	r3, #0
 8007066:	e9d7 4500 	ldrd	r4, r5, [r7]
 800706a:	4629      	mov	r1, r5
 800706c:	028b      	lsls	r3, r1, #10
 800706e:	4621      	mov	r1, r4
 8007070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007074:	4621      	mov	r1, r4
 8007076:	028a      	lsls	r2, r1, #10
 8007078:	4610      	mov	r0, r2
 800707a:	4619      	mov	r1, r3
 800707c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800707e:	2200      	movs	r2, #0
 8007080:	61bb      	str	r3, [r7, #24]
 8007082:	61fa      	str	r2, [r7, #28]
 8007084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007088:	f7f9 fdae 	bl	8000be8 <__aeabi_uldivmod>
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	4613      	mov	r3, r2
 8007092:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007094:	4b0b      	ldr	r3, [pc, #44]	@ (80070c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	0c1b      	lsrs	r3, r3, #16
 800709a:	f003 0303 	and.w	r3, r3, #3
 800709e:	3301      	adds	r3, #1
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80070a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80070ae:	e002      	b.n	80070b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070b0:	4b05      	ldr	r3, [pc, #20]	@ (80070c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80070b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80070b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3750      	adds	r7, #80	@ 0x50
 80070bc:	46bd      	mov	sp, r7
 80070be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070c2:	bf00      	nop
 80070c4:	40023800 	.word	0x40023800
 80070c8:	00f42400 	.word	0x00f42400

080070cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070cc:	b480      	push	{r7}
 80070ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070d0:	4b03      	ldr	r3, [pc, #12]	@ (80070e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80070d2:	681b      	ldr	r3, [r3, #0]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	20000000 	.word	0x20000000

080070e4 <LL_ADC_REG_SetSequencerLength>:
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	431a      	orrs	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80070fe:	bf00      	nop
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800710a:	b480      	push	{r7}
 800710c:	b083      	sub	sp, #12
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b01      	cmp	r3, #1
 800711c:	bf0c      	ite	eq
 800711e:	2301      	moveq	r3, #1
 8007120:	2300      	movne	r3, #0
 8007122:	b2db      	uxtb	r3, r3
}
 8007124:	4618      	mov	r0, r3
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8007130:	b590      	push	{r4, r7, lr}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800713a:	2300      	movs	r3, #0
 800713c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800713e:	481c      	ldr	r0, [pc, #112]	@ (80071b0 <LL_ADC_CommonInit+0x80>)
 8007140:	f7ff ffe3 	bl	800710a <LL_ADC_IsEnabled>
 8007144:	4604      	mov	r4, r0
 8007146:	481b      	ldr	r0, [pc, #108]	@ (80071b4 <LL_ADC_CommonInit+0x84>)
 8007148:	f7ff ffdf 	bl	800710a <LL_ADC_IsEnabled>
 800714c:	4603      	mov	r3, r0
 800714e:	431c      	orrs	r4, r3
 8007150:	4819      	ldr	r0, [pc, #100]	@ (80071b8 <LL_ADC_CommonInit+0x88>)
 8007152:	f7ff ffda 	bl	800710a <LL_ADC_IsEnabled>
 8007156:	4603      	mov	r3, r0
 8007158:	4323      	orrs	r3, r4
 800715a:	2b00      	cmp	r3, #0
 800715c:	d120      	bne.n	80071a0 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d012      	beq.n	800718c <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	4b14      	ldr	r3, [pc, #80]	@ (80071bc <LL_ADC_CommonInit+0x8c>)
 800716c:	4013      	ands	r3, r2
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	6811      	ldr	r1, [r2, #0]
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	6852      	ldr	r2, [r2, #4]
 8007176:	4311      	orrs	r1, r2
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	6892      	ldr	r2, [r2, #8]
 800717c:	4311      	orrs	r1, r2
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	68d2      	ldr	r2, [r2, #12]
 8007182:	430a      	orrs	r2, r1
 8007184:	431a      	orrs	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	605a      	str	r2, [r3, #4]
 800718a:	e00b      	b.n	80071a4 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	4b0a      	ldr	r3, [pc, #40]	@ (80071bc <LL_ADC_CommonInit+0x8c>)
 8007192:	4013      	ands	r3, r2
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	6812      	ldr	r2, [r2, #0]
 8007198:	431a      	orrs	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	605a      	str	r2, [r3, #4]
 800719e:	e001      	b.n	80071a4 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd90      	pop	{r4, r7, pc}
 80071ae:	bf00      	nop
 80071b0:	40012000 	.word	0x40012000
 80071b4:	40012100 	.word	0x40012100
 80071b8:	40012200 	.word	0x40012200
 80071bc:	fffc10e0 	.word	0xfffc10e0

080071c0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80071ca:	2300      	movs	r3, #0
 80071cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7ff ff9b 	bl	800710a <LL_ADC_IsEnabled>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d117      	bne.n	800720a <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80071e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	6811      	ldr	r1, [r2, #0]
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	6892      	ldr	r2, [r2, #8]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	431a      	orrs	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	605a      	str	r2, [r3, #4]
               ,
               ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );

    MODIFY_REG(ADCx->CR2,
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	431a      	orrs	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	609a      	str	r2, [r3, #8]
 8007208:	e001      	b.n	800720e <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800720e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8007222:	2300      	movs	r3, #0
 8007224:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7ff ff6f 	bl	800710a <LL_ADC_IsEnabled>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d12b      	bne.n	800728a <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d009      	beq.n	800724e <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	431a      	orrs	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	605a      	str	r2, [r3, #4]
 800724c:	e005      	b.n	800725a <LL_ADC_REG_Init+0x42>
                 ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	605a      	str	r2, [r3, #4]
                 ,
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	689a      	ldr	r2, [r3, #8]
 800725e:	4b0e      	ldr	r3, [pc, #56]	@ (8007298 <LL_ADC_REG_Init+0x80>)
 8007260:	4013      	ands	r3, r2
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	6812      	ldr	r2, [r2, #0]
 8007266:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	68d2      	ldr	r2, [r2, #12]
 800726e:	4311      	orrs	r1, r2
 8007270:	683a      	ldr	r2, [r7, #0]
 8007272:	6912      	ldr	r2, [r2, #16]
 8007274:	430a      	orrs	r2, r1
 8007276:	431a      	orrs	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	4619      	mov	r1, r3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7ff ff2e 	bl	80070e4 <LL_ADC_REG_SetSequencerLength>
 8007288:	e001      	b.n	800728e <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800728e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	c0fffcfd 	.word	0xc0fffcfd

0800729c <LL_EXTI_EnableIT_0_31>:
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80072a4:	4b05      	ldr	r3, [pc, #20]	@ (80072bc <LL_EXTI_EnableIT_0_31+0x20>)
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	4904      	ldr	r1, [pc, #16]	@ (80072bc <LL_EXTI_EnableIT_0_31+0x20>)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	600b      	str	r3, [r1, #0]
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	40013c00 	.word	0x40013c00

080072c0 <LL_EXTI_DisableIT_0_31>:
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80072c8:	4b06      	ldr	r3, [pc, #24]	@ (80072e4 <LL_EXTI_DisableIT_0_31+0x24>)
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	43db      	mvns	r3, r3
 80072d0:	4904      	ldr	r1, [pc, #16]	@ (80072e4 <LL_EXTI_DisableIT_0_31+0x24>)
 80072d2:	4013      	ands	r3, r2
 80072d4:	600b      	str	r3, [r1, #0]
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	40013c00 	.word	0x40013c00

080072e8 <LL_EXTI_EnableEvent_0_31>:
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80072f0:	4b05      	ldr	r3, [pc, #20]	@ (8007308 <LL_EXTI_EnableEvent_0_31+0x20>)
 80072f2:	685a      	ldr	r2, [r3, #4]
 80072f4:	4904      	ldr	r1, [pc, #16]	@ (8007308 <LL_EXTI_EnableEvent_0_31+0x20>)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	604b      	str	r3, [r1, #4]
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	40013c00 	.word	0x40013c00

0800730c <LL_EXTI_DisableEvent_0_31>:
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8007314:	4b06      	ldr	r3, [pc, #24]	@ (8007330 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	43db      	mvns	r3, r3
 800731c:	4904      	ldr	r1, [pc, #16]	@ (8007330 <LL_EXTI_DisableEvent_0_31+0x24>)
 800731e:	4013      	ands	r3, r2
 8007320:	604b      	str	r3, [r1, #4]
}
 8007322:	bf00      	nop
 8007324:	370c      	adds	r7, #12
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	40013c00 	.word	0x40013c00

08007334 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800733c:	4b05      	ldr	r3, [pc, #20]	@ (8007354 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800733e:	689a      	ldr	r2, [r3, #8]
 8007340:	4904      	ldr	r1, [pc, #16]	@ (8007354 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4313      	orrs	r3, r2
 8007346:	608b      	str	r3, [r1, #8]
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	40013c00 	.word	0x40013c00

08007358 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8007360:	4b06      	ldr	r3, [pc, #24]	@ (800737c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007362:	689a      	ldr	r2, [r3, #8]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	43db      	mvns	r3, r3
 8007368:	4904      	ldr	r1, [pc, #16]	@ (800737c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800736a:	4013      	ands	r3, r2
 800736c:	608b      	str	r3, [r1, #8]
}
 800736e:	bf00      	nop
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	40013c00 	.word	0x40013c00

08007380 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8007388:	4b05      	ldr	r3, [pc, #20]	@ (80073a0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800738a:	68da      	ldr	r2, [r3, #12]
 800738c:	4904      	ldr	r1, [pc, #16]	@ (80073a0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4313      	orrs	r3, r2
 8007392:	60cb      	str	r3, [r1, #12]
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	40013c00 	.word	0x40013c00

080073a4 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80073ac:	4b06      	ldr	r3, [pc, #24]	@ (80073c8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80073ae:	68da      	ldr	r2, [r3, #12]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	43db      	mvns	r3, r3
 80073b4:	4904      	ldr	r1, [pc, #16]	@ (80073c8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80073b6:	4013      	ands	r3, r2
 80073b8:	60cb      	str	r3, [r1, #12]
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	40013c00 	.word	0x40013c00

080073cc <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80073d4:	2300      	movs	r3, #0
 80073d6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	791b      	ldrb	r3, [r3, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d065      	beq.n	80074ac <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d06b      	beq.n	80074c0 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	795b      	ldrb	r3, [r3, #5]
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d01c      	beq.n	800742a <LL_EXTI_Init+0x5e>
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	dc25      	bgt.n	8007440 <LL_EXTI_Init+0x74>
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <LL_EXTI_Init+0x32>
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d00b      	beq.n	8007414 <LL_EXTI_Init+0x48>
 80073fc:	e020      	b.n	8007440 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4618      	mov	r0, r3
 8007404:	f7ff ff82 	bl	800730c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4618      	mov	r0, r3
 800740e:	f7ff ff45 	bl	800729c <LL_EXTI_EnableIT_0_31>
          break;
 8007412:	e018      	b.n	8007446 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4618      	mov	r0, r3
 800741a:	f7ff ff51 	bl	80072c0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4618      	mov	r0, r3
 8007424:	f7ff ff60 	bl	80072e8 <LL_EXTI_EnableEvent_0_31>
          break;
 8007428:	e00d      	b.n	8007446 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4618      	mov	r0, r3
 8007430:	f7ff ff34 	bl	800729c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4618      	mov	r0, r3
 800743a:	f7ff ff55 	bl	80072e8 <LL_EXTI_EnableEvent_0_31>
          break;
 800743e:	e002      	b.n	8007446 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	73fb      	strb	r3, [r7, #15]
          break;
 8007444:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	799b      	ldrb	r3, [r3, #6]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d038      	beq.n	80074c0 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	799b      	ldrb	r3, [r3, #6]
 8007452:	2b03      	cmp	r3, #3
 8007454:	d01c      	beq.n	8007490 <LL_EXTI_Init+0xc4>
 8007456:	2b03      	cmp	r3, #3
 8007458:	dc25      	bgt.n	80074a6 <LL_EXTI_Init+0xda>
 800745a:	2b01      	cmp	r3, #1
 800745c:	d002      	beq.n	8007464 <LL_EXTI_Init+0x98>
 800745e:	2b02      	cmp	r3, #2
 8007460:	d00b      	beq.n	800747a <LL_EXTI_Init+0xae>
 8007462:	e020      	b.n	80074a6 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4618      	mov	r0, r3
 800746a:	f7ff ff9b 	bl	80073a4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4618      	mov	r0, r3
 8007474:	f7ff ff5e 	bl	8007334 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8007478:	e022      	b.n	80074c0 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4618      	mov	r0, r3
 8007480:	f7ff ff6a 	bl	8007358 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4618      	mov	r0, r3
 800748a:	f7ff ff79 	bl	8007380 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800748e:	e017      	b.n	80074c0 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4618      	mov	r0, r3
 8007496:	f7ff ff4d 	bl	8007334 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4618      	mov	r0, r3
 80074a0:	f7ff ff6e 	bl	8007380 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80074a4:	e00c      	b.n	80074c0 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	73fb      	strb	r3, [r7, #15]
            break;
 80074aa:	e009      	b.n	80074c0 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7ff ff05 	bl	80072c0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7ff ff26 	bl	800730c <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 80074c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <LL_GPIO_SetPinMode>:
{
 80074ca:	b480      	push	{r7}
 80074cc:	b08b      	sub	sp, #44	@ 0x2c
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	fa93 f3a3 	rbit	r3, r3
 80074e4:	613b      	str	r3, [r7, #16]
  return result;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80074f0:	2320      	movs	r3, #32
 80074f2:	e003      	b.n	80074fc <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	fab3 f383 	clz	r3, r3
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	005b      	lsls	r3, r3, #1
 80074fe:	2103      	movs	r1, #3
 8007500:	fa01 f303 	lsl.w	r3, r1, r3
 8007504:	43db      	mvns	r3, r3
 8007506:	401a      	ands	r2, r3
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	fa93 f3a3 	rbit	r3, r3
 8007512:	61fb      	str	r3, [r7, #28]
  return result;
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800751e:	2320      	movs	r3, #32
 8007520:	e003      	b.n	800752a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8007522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007524:	fab3 f383 	clz	r3, r3
 8007528:	b2db      	uxtb	r3, r3
 800752a:	005b      	lsls	r3, r3, #1
 800752c:	6879      	ldr	r1, [r7, #4]
 800752e:	fa01 f303 	lsl.w	r3, r1, r3
 8007532:	431a      	orrs	r2, r3
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	601a      	str	r2, [r3, #0]
}
 8007538:	bf00      	nop
 800753a:	372c      	adds	r7, #44	@ 0x2c
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <LL_GPIO_SetPinOutputType>:
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	43db      	mvns	r3, r3
 8007558:	401a      	ands	r2, r3
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	6879      	ldr	r1, [r7, #4]
 800755e:	fb01 f303 	mul.w	r3, r1, r3
 8007562:	431a      	orrs	r2, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	605a      	str	r2, [r3, #4]
}
 8007568:	bf00      	nop
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <LL_GPIO_SetPinSpeed>:
{
 8007574:	b480      	push	{r7}
 8007576:	b08b      	sub	sp, #44	@ 0x2c
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	689a      	ldr	r2, [r3, #8]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	fa93 f3a3 	rbit	r3, r3
 800758e:	613b      	str	r3, [r7, #16]
  return result;
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800759a:	2320      	movs	r3, #32
 800759c:	e003      	b.n	80075a6 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	fab3 f383 	clz	r3, r3
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	005b      	lsls	r3, r3, #1
 80075a8:	2103      	movs	r1, #3
 80075aa:	fa01 f303 	lsl.w	r3, r1, r3
 80075ae:	43db      	mvns	r3, r3
 80075b0:	401a      	ands	r2, r3
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	fa93 f3a3 	rbit	r3, r3
 80075bc:	61fb      	str	r3, [r7, #28]
  return result;
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80075c8:	2320      	movs	r3, #32
 80075ca:	e003      	b.n	80075d4 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80075cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ce:	fab3 f383 	clz	r3, r3
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	005b      	lsls	r3, r3, #1
 80075d6:	6879      	ldr	r1, [r7, #4]
 80075d8:	fa01 f303 	lsl.w	r3, r1, r3
 80075dc:	431a      	orrs	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	609a      	str	r2, [r3, #8]
}
 80075e2:	bf00      	nop
 80075e4:	372c      	adds	r7, #44	@ 0x2c
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <LL_GPIO_SetPinPull>:
{
 80075ee:	b480      	push	{r7}
 80075f0:	b08b      	sub	sp, #44	@ 0x2c
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	60f8      	str	r0, [r7, #12]
 80075f6:	60b9      	str	r1, [r7, #8]
 80075f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	68da      	ldr	r2, [r3, #12]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	fa93 f3a3 	rbit	r3, r3
 8007608:	613b      	str	r3, [r7, #16]
  return result;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8007614:	2320      	movs	r3, #32
 8007616:	e003      	b.n	8007620 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	fab3 f383 	clz	r3, r3
 800761e:	b2db      	uxtb	r3, r3
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	2103      	movs	r1, #3
 8007624:	fa01 f303 	lsl.w	r3, r1, r3
 8007628:	43db      	mvns	r3, r3
 800762a:	401a      	ands	r2, r3
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007630:	6a3b      	ldr	r3, [r7, #32]
 8007632:	fa93 f3a3 	rbit	r3, r3
 8007636:	61fb      	str	r3, [r7, #28]
  return result;
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800763c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8007642:	2320      	movs	r3, #32
 8007644:	e003      	b.n	800764e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8007646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007648:	fab3 f383 	clz	r3, r3
 800764c:	b2db      	uxtb	r3, r3
 800764e:	005b      	lsls	r3, r3, #1
 8007650:	6879      	ldr	r1, [r7, #4]
 8007652:	fa01 f303 	lsl.w	r3, r1, r3
 8007656:	431a      	orrs	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	60da      	str	r2, [r3, #12]
}
 800765c:	bf00      	nop
 800765e:	372c      	adds	r7, #44	@ 0x2c
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <LL_GPIO_SetAFPin_0_7>:
{
 8007668:	b480      	push	{r7}
 800766a:	b08b      	sub	sp, #44	@ 0x2c
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6a1a      	ldr	r2, [r3, #32]
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	fa93 f3a3 	rbit	r3, r3
 8007682:	613b      	str	r3, [r7, #16]
  return result;
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800768e:	2320      	movs	r3, #32
 8007690:	e003      	b.n	800769a <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	fab3 f383 	clz	r3, r3
 8007698:	b2db      	uxtb	r3, r3
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	210f      	movs	r1, #15
 800769e:	fa01 f303 	lsl.w	r3, r1, r3
 80076a2:	43db      	mvns	r3, r3
 80076a4:	401a      	ands	r2, r3
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076aa:	6a3b      	ldr	r3, [r7, #32]
 80076ac:	fa93 f3a3 	rbit	r3, r3
 80076b0:	61fb      	str	r3, [r7, #28]
  return result;
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80076b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d101      	bne.n	80076c0 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80076bc:	2320      	movs	r3, #32
 80076be:	e003      	b.n	80076c8 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80076c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c2:	fab3 f383 	clz	r3, r3
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	6879      	ldr	r1, [r7, #4]
 80076cc:	fa01 f303 	lsl.w	r3, r1, r3
 80076d0:	431a      	orrs	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	621a      	str	r2, [r3, #32]
}
 80076d6:	bf00      	nop
 80076d8:	372c      	adds	r7, #44	@ 0x2c
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <LL_GPIO_SetAFPin_8_15>:
{
 80076e2:	b480      	push	{r7}
 80076e4:	b08b      	sub	sp, #44	@ 0x2c
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	60f8      	str	r0, [r7, #12]
 80076ea:	60b9      	str	r1, [r7, #8]
 80076ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	0a1b      	lsrs	r3, r3, #8
 80076f6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	fa93 f3a3 	rbit	r3, r3
 80076fe:	613b      	str	r3, [r7, #16]
  return result;
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800770a:	2320      	movs	r3, #32
 800770c:	e003      	b.n	8007716 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	fab3 f383 	clz	r3, r3
 8007714:	b2db      	uxtb	r3, r3
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	210f      	movs	r1, #15
 800771a:	fa01 f303 	lsl.w	r3, r1, r3
 800771e:	43db      	mvns	r3, r3
 8007720:	401a      	ands	r2, r3
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	0a1b      	lsrs	r3, r3, #8
 8007726:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	fa93 f3a3 	rbit	r3, r3
 800772e:	61fb      	str	r3, [r7, #28]
  return result;
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800773a:	2320      	movs	r3, #32
 800773c:	e003      	b.n	8007746 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800773e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007740:	fab3 f383 	clz	r3, r3
 8007744:	b2db      	uxtb	r3, r3
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	6879      	ldr	r1, [r7, #4]
 800774a:	fa01 f303 	lsl.w	r3, r1, r3
 800774e:	431a      	orrs	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8007754:	bf00      	nop
 8007756:	372c      	adds	r7, #44	@ 0x2c
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b08a      	sub	sp, #40	@ 0x28
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800776a:	2300      	movs	r3, #0
 800776c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 800776e:	2300      	movs	r3, #0
 8007770:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	fa93 f3a3 	rbit	r3, r3
 800777e:	617b      	str	r3, [r7, #20]
  return result;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <LL_GPIO_Init+0x2e>
    return 32U;
 800778a:	2320      	movs	r3, #32
 800778c:	e003      	b.n	8007796 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	fab3 f383 	clz	r3, r3
 8007794:	b2db      	uxtb	r3, r3
 8007796:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007798:	e057      	b.n	800784a <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	2101      	movs	r1, #1
 80077a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a2:	fa01 f303 	lsl.w	r3, r1, r3
 80077a6:	4013      	ands	r3, r2
 80077a8:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d049      	beq.n	8007844 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d003      	beq.n	80077c0 <LL_GPIO_Init+0x60>
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d10d      	bne.n	80077dc <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	461a      	mov	r2, r3
 80077c6:	6a39      	ldr	r1, [r7, #32]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f7ff fed3 	bl	8007574 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	461a      	mov	r2, r3
 80077d4:	6a39      	ldr	r1, [r7, #32]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7ff feb4 	bl	8007544 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	461a      	mov	r2, r3
 80077e2:	6a39      	ldr	r1, [r7, #32]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f7ff ff02 	bl	80075ee <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d121      	bne.n	8007836 <LL_GPIO_Init+0xd6>
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	fa93 f3a3 	rbit	r3, r3
 80077fc:	60bb      	str	r3, [r7, #8]
  return result;
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d101      	bne.n	800780c <LL_GPIO_Init+0xac>
    return 32U;
 8007808:	2320      	movs	r3, #32
 800780a:	e003      	b.n	8007814 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	fab3 f383 	clz	r3, r3
 8007812:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8007814:	2b07      	cmp	r3, #7
 8007816:	d807      	bhi.n	8007828 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	461a      	mov	r2, r3
 800781e:	6a39      	ldr	r1, [r7, #32]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f7ff ff21 	bl	8007668 <LL_GPIO_SetAFPin_0_7>
 8007826:	e006      	b.n	8007836 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	461a      	mov	r2, r3
 800782e:	6a39      	ldr	r1, [r7, #32]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff ff56 	bl	80076e2 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	461a      	mov	r2, r3
 800783c:	6a39      	ldr	r1, [r7, #32]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7ff fe43 	bl	80074ca <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007846:	3301      	adds	r3, #1
 8007848:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007850:	fa22 f303 	lsr.w	r3, r2, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1a0      	bne.n	800779a <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3728      	adds	r7, #40	@ 0x28
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
	...

08007864 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8007864:	b480      	push	{r7}
 8007866:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007868:	4b04      	ldr	r3, [pc, #16]	@ (800787c <LL_RCC_GetSysClkSource+0x18>)
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f003 030c 	and.w	r3, r3, #12
}
 8007870:	4618      	mov	r0, r3
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	40023800 	.word	0x40023800

08007880 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8007880:	b480      	push	{r7}
 8007882:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007884:	4b04      	ldr	r3, [pc, #16]	@ (8007898 <LL_RCC_GetAHBPrescaler+0x18>)
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800788c:	4618      	mov	r0, r3
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	40023800 	.word	0x40023800

0800789c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800789c:	b480      	push	{r7}
 800789e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80078a0:	4b04      	ldr	r3, [pc, #16]	@ (80078b4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	40023800 	.word	0x40023800

080078b8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80078b8:	b480      	push	{r7}
 80078ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80078bc:	4b04      	ldr	r3, [pc, #16]	@ (80078d0 <LL_RCC_GetAPB2Prescaler+0x18>)
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	40023800 	.word	0x40023800

080078d4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80078d4:	b480      	push	{r7}
 80078d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80078d8:	4b04      	ldr	r3, [pc, #16]	@ (80078ec <LL_RCC_PLL_GetMainSource+0x18>)
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	40023800 	.word	0x40023800

080078f0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80078f0:	b480      	push	{r7}
 80078f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80078f4:	4b04      	ldr	r3, [pc, #16]	@ (8007908 <LL_RCC_PLL_GetN+0x18>)
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	099b      	lsrs	r3, r3, #6
 80078fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80078fe:	4618      	mov	r0, r3
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	40023800 	.word	0x40023800

0800790c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800790c:	b480      	push	{r7}
 800790e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8007910:	4b04      	ldr	r3, [pc, #16]	@ (8007924 <LL_RCC_PLL_GetP+0x18>)
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8007918:	4618      	mov	r0, r3
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	40023800 	.word	0x40023800

08007928 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007928:	b480      	push	{r7}
 800792a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800792c:	4b04      	ldr	r3, [pc, #16]	@ (8007940 <LL_RCC_PLL_GetDivider+0x18>)
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8007934:	4618      	mov	r0, r3
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	40023800 	.word	0x40023800

08007944 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800794c:	f000 f820 	bl	8007990 <RCC_GetSystemClockFreq>
 8007950:	4602      	mov	r2, r0
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4618      	mov	r0, r3
 800795c:	f000 f83e 	bl	80079dc <RCC_GetHCLKClockFreq>
 8007960:	4602      	mov	r2, r0
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	4618      	mov	r0, r3
 800796c:	f000 f84c 	bl	8007a08 <RCC_GetPCLK1ClockFreq>
 8007970:	4602      	mov	r2, r0
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	4618      	mov	r0, r3
 800797c:	f000 f858 	bl	8007a30 <RCC_GetPCLK2ClockFreq>
 8007980:	4602      	mov	r2, r0
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	60da      	str	r2, [r3, #12]
}
 8007986:	bf00      	nop
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
	...

08007990 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800799a:	f7ff ff63 	bl	8007864 <LL_RCC_GetSysClkSource>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b08      	cmp	r3, #8
 80079a2:	d00c      	beq.n	80079be <RCC_GetSystemClockFreq+0x2e>
 80079a4:	2b08      	cmp	r3, #8
 80079a6:	d80f      	bhi.n	80079c8 <RCC_GetSystemClockFreq+0x38>
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <RCC_GetSystemClockFreq+0x22>
 80079ac:	2b04      	cmp	r3, #4
 80079ae:	d003      	beq.n	80079b8 <RCC_GetSystemClockFreq+0x28>
 80079b0:	e00a      	b.n	80079c8 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80079b2:	4b09      	ldr	r3, [pc, #36]	@ (80079d8 <RCC_GetSystemClockFreq+0x48>)
 80079b4:	607b      	str	r3, [r7, #4]
      break;
 80079b6:	e00a      	b.n	80079ce <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80079b8:	4b07      	ldr	r3, [pc, #28]	@ (80079d8 <RCC_GetSystemClockFreq+0x48>)
 80079ba:	607b      	str	r3, [r7, #4]
      break;
 80079bc:	e007      	b.n	80079ce <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80079be:	2008      	movs	r0, #8
 80079c0:	f000 f84a 	bl	8007a58 <RCC_PLL_GetFreqDomain_SYS>
 80079c4:	6078      	str	r0, [r7, #4]
      break;
 80079c6:	e002      	b.n	80079ce <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80079c8:	4b03      	ldr	r3, [pc, #12]	@ (80079d8 <RCC_GetSystemClockFreq+0x48>)
 80079ca:	607b      	str	r3, [r7, #4]
      break;
 80079cc:	bf00      	nop
  }

  return frequency;
 80079ce:	687b      	ldr	r3, [r7, #4]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	00f42400 	.word	0x00f42400

080079dc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80079e4:	f7ff ff4c 	bl	8007880 <LL_RCC_GetAHBPrescaler>
 80079e8:	4603      	mov	r3, r0
 80079ea:	091b      	lsrs	r3, r3, #4
 80079ec:	f003 030f 	and.w	r3, r3, #15
 80079f0:	4a04      	ldr	r2, [pc, #16]	@ (8007a04 <RCC_GetHCLKClockFreq+0x28>)
 80079f2:	5cd3      	ldrb	r3, [r2, r3]
 80079f4:	461a      	mov	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	40d3      	lsrs	r3, r2
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	0800f264 	.word	0x0800f264

08007a08 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8007a10:	f7ff ff44 	bl	800789c <LL_RCC_GetAPB1Prescaler>
 8007a14:	4603      	mov	r3, r0
 8007a16:	0a9b      	lsrs	r3, r3, #10
 8007a18:	4a04      	ldr	r2, [pc, #16]	@ (8007a2c <RCC_GetPCLK1ClockFreq+0x24>)
 8007a1a:	5cd3      	ldrb	r3, [r2, r3]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	40d3      	lsrs	r3, r2
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	0800f274 	.word	0x0800f274

08007a30 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8007a38:	f7ff ff3e 	bl	80078b8 <LL_RCC_GetAPB2Prescaler>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	0b5b      	lsrs	r3, r3, #13
 8007a40:	4a04      	ldr	r2, [pc, #16]	@ (8007a54 <RCC_GetPCLK2ClockFreq+0x24>)
 8007a42:	5cd3      	ldrb	r3, [r2, r3]
 8007a44:	461a      	mov	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	40d3      	lsrs	r3, r2
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	0800f274 	.word	0x0800f274

08007a58 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8007a58:	b590      	push	{r4, r7, lr}
 8007a5a:	b087      	sub	sp, #28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007a6c:	f7ff ff32 	bl	80078d4 <LL_RCC_PLL_GetMainSource>
 8007a70:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d004      	beq.n	8007a82 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a7e:	d003      	beq.n	8007a88 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8007a80:	e005      	b.n	8007a8e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8007a82:	4b12      	ldr	r3, [pc, #72]	@ (8007acc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007a84:	617b      	str	r3, [r7, #20]
      break;
 8007a86:	e005      	b.n	8007a94 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8007a88:	4b10      	ldr	r3, [pc, #64]	@ (8007acc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007a8a:	617b      	str	r3, [r7, #20]
      break;
 8007a8c:	e002      	b.n	8007a94 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8007a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8007acc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007a90:	617b      	str	r3, [r7, #20]
      break;
 8007a92:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b08      	cmp	r3, #8
 8007a98:	d113      	bne.n	8007ac2 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007a9a:	f7ff ff45 	bl	8007928 <LL_RCC_PLL_GetDivider>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	fbb3 f4f2 	udiv	r4, r3, r2
 8007aa6:	f7ff ff23 	bl	80078f0 <LL_RCC_PLL_GetN>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	fb03 f404 	mul.w	r4, r3, r4
 8007ab0:	f7ff ff2c 	bl	800790c <LL_RCC_PLL_GetP>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	0c1b      	lsrs	r3, r3, #16
 8007ab8:	3301      	adds	r3, #1
 8007aba:	005b      	lsls	r3, r3, #1
 8007abc:	fbb4 f3f3 	udiv	r3, r4, r3
 8007ac0:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8007ac2:	693b      	ldr	r3, [r7, #16]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	371c      	adds	r7, #28
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd90      	pop	{r4, r7, pc}
 8007acc:	00f42400 	.word	0x00f42400

08007ad0 <LL_SPI_IsEnabled>:
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ae0:	2b40      	cmp	r3, #64	@ 0x40
 8007ae2:	d101      	bne.n	8007ae8 <LL_SPI_IsEnabled+0x18>
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e000      	b.n	8007aea <LL_SPI_IsEnabled+0x1a>
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <LL_SPI_SetCRCPolynomial>:
{
 8007af6:	b480      	push	{r7}
 8007af8:	b083      	sub	sp, #12
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	461a      	mov	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	611a      	str	r2, [r3, #16]
}
 8007b0a:	bf00      	nop
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b084      	sub	sp, #16
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7ff ffd3 	bl	8007ad0 <LL_SPI_IsEnabled>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d139      	bne.n	8007ba4 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b38:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	6811      	ldr	r1, [r2, #0]
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	6852      	ldr	r2, [r2, #4]
 8007b44:	4311      	orrs	r1, r2
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	6892      	ldr	r2, [r2, #8]
 8007b4a:	4311      	orrs	r1, r2
 8007b4c:	683a      	ldr	r2, [r7, #0]
 8007b4e:	68d2      	ldr	r2, [r2, #12]
 8007b50:	4311      	orrs	r1, r2
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	6912      	ldr	r2, [r2, #16]
 8007b56:	4311      	orrs	r1, r2
 8007b58:	683a      	ldr	r2, [r7, #0]
 8007b5a:	6952      	ldr	r2, [r2, #20]
 8007b5c:	4311      	orrs	r1, r2
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	6992      	ldr	r2, [r2, #24]
 8007b62:	4311      	orrs	r1, r2
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	69d2      	ldr	r2, [r2, #28]
 8007b68:	4311      	orrs	r1, r2
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	6a12      	ldr	r2, [r2, #32]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	431a      	orrs	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f023 0204 	bic.w	r2, r3, #4
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	695b      	ldr	r3, [r3, #20]
 8007b82:	0c1b      	lsrs	r3, r3, #16
 8007b84:	431a      	orrs	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b92:	d105      	bne.n	8007ba0 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7ff ffab 	bl	8007af6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	69db      	ldr	r3, [r3, #28]
 8007ba8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	61da      	str	r2, [r3, #28]
  return status;
 8007bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <LL_TIM_SetPrescaler>:
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007bca:	bf00      	nop
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <LL_TIM_SetAutoReload>:
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b083      	sub	sp, #12
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007be6:	bf00      	nop
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <LL_TIM_SetRepetitionCounter>:
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b083      	sub	sp, #12
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007c02:	bf00      	nop
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <LL_TIM_OC_SetCompareCH1>:
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b083      	sub	sp, #12
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8007c1e:	bf00      	nop
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <LL_TIM_OC_SetCompareCH2>:
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007c3a:	bf00      	nop
 8007c3c:	370c      	adds	r7, #12
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <LL_TIM_OC_SetCompareCH3>:
{
 8007c46:	b480      	push	{r7}
 8007c48:	b083      	sub	sp, #12
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8007c56:	bf00      	nop
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <LL_TIM_OC_SetCompareCH4>:
{
 8007c62:	b480      	push	{r7}
 8007c64:	b083      	sub	sp, #12
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007c72:	bf00      	nop
 8007c74:	370c      	adds	r7, #12
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <LL_TIM_GenerateEvent_UPDATE>:
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b083      	sub	sp, #12
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	f043 0201 	orr.w	r2, r3, #1
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	615a      	str	r2, [r3, #20]
}
 8007c92:	bf00      	nop
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
	...

08007ca0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a3d      	ldr	r2, [pc, #244]	@ (8007da8 <LL_TIM_Init+0x108>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d013      	beq.n	8007ce0 <LL_TIM_Init+0x40>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cbe:	d00f      	beq.n	8007ce0 <LL_TIM_Init+0x40>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a3a      	ldr	r2, [pc, #232]	@ (8007dac <LL_TIM_Init+0x10c>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d00b      	beq.n	8007ce0 <LL_TIM_Init+0x40>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a39      	ldr	r2, [pc, #228]	@ (8007db0 <LL_TIM_Init+0x110>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d007      	beq.n	8007ce0 <LL_TIM_Init+0x40>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a38      	ldr	r2, [pc, #224]	@ (8007db4 <LL_TIM_Init+0x114>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d003      	beq.n	8007ce0 <LL_TIM_Init+0x40>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a37      	ldr	r2, [pc, #220]	@ (8007db8 <LL_TIM_Init+0x118>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d106      	bne.n	8007cee <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a2d      	ldr	r2, [pc, #180]	@ (8007da8 <LL_TIM_Init+0x108>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d02b      	beq.n	8007d4e <LL_TIM_Init+0xae>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cfc:	d027      	beq.n	8007d4e <LL_TIM_Init+0xae>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a2a      	ldr	r2, [pc, #168]	@ (8007dac <LL_TIM_Init+0x10c>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d023      	beq.n	8007d4e <LL_TIM_Init+0xae>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a29      	ldr	r2, [pc, #164]	@ (8007db0 <LL_TIM_Init+0x110>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d01f      	beq.n	8007d4e <LL_TIM_Init+0xae>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a28      	ldr	r2, [pc, #160]	@ (8007db4 <LL_TIM_Init+0x114>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d01b      	beq.n	8007d4e <LL_TIM_Init+0xae>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a27      	ldr	r2, [pc, #156]	@ (8007db8 <LL_TIM_Init+0x118>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d017      	beq.n	8007d4e <LL_TIM_Init+0xae>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a26      	ldr	r2, [pc, #152]	@ (8007dbc <LL_TIM_Init+0x11c>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d013      	beq.n	8007d4e <LL_TIM_Init+0xae>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a25      	ldr	r2, [pc, #148]	@ (8007dc0 <LL_TIM_Init+0x120>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d00f      	beq.n	8007d4e <LL_TIM_Init+0xae>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a24      	ldr	r2, [pc, #144]	@ (8007dc4 <LL_TIM_Init+0x124>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d00b      	beq.n	8007d4e <LL_TIM_Init+0xae>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a23      	ldr	r2, [pc, #140]	@ (8007dc8 <LL_TIM_Init+0x128>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d007      	beq.n	8007d4e <LL_TIM_Init+0xae>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a22      	ldr	r2, [pc, #136]	@ (8007dcc <LL_TIM_Init+0x12c>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d003      	beq.n	8007d4e <LL_TIM_Init+0xae>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a21      	ldr	r2, [pc, #132]	@ (8007dd0 <LL_TIM_Init+0x130>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d106      	bne.n	8007d5c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	4619      	mov	r1, r3
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f7ff ff34 	bl	8007bd6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	881b      	ldrh	r3, [r3, #0]
 8007d72:	4619      	mov	r1, r3
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f7ff ff20 	bl	8007bba <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8007da8 <LL_TIM_Init+0x108>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d003      	beq.n	8007d8a <LL_TIM_Init+0xea>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a0c      	ldr	r2, [pc, #48]	@ (8007db8 <LL_TIM_Init+0x118>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d105      	bne.n	8007d96 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff ff2e 	bl	8007bf2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f7ff ff71 	bl	8007c7e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	40010000 	.word	0x40010000
 8007dac:	40000400 	.word	0x40000400
 8007db0:	40000800 	.word	0x40000800
 8007db4:	40000c00 	.word	0x40000c00
 8007db8:	40010400 	.word	0x40010400
 8007dbc:	40014000 	.word	0x40014000
 8007dc0:	40014400 	.word	0x40014400
 8007dc4:	40014800 	.word	0x40014800
 8007dc8:	40001800 	.word	0x40001800
 8007dcc:	40001c00 	.word	0x40001c00
 8007dd0:	40002000 	.word	0x40002000

08007dd4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dea:	d027      	beq.n	8007e3c <LL_TIM_OC_Init+0x68>
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007df2:	d82a      	bhi.n	8007e4a <LL_TIM_OC_Init+0x76>
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dfa:	d018      	beq.n	8007e2e <LL_TIM_OC_Init+0x5a>
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e02:	d822      	bhi.n	8007e4a <LL_TIM_OC_Init+0x76>
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d003      	beq.n	8007e12 <LL_TIM_OC_Init+0x3e>
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	2b10      	cmp	r3, #16
 8007e0e:	d007      	beq.n	8007e20 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8007e10:	e01b      	b.n	8007e4a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8007e12:	6879      	ldr	r1, [r7, #4]
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 f861 	bl	8007edc <OC1Config>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e1e:	e015      	b.n	8007e4c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8007e20:	6879      	ldr	r1, [r7, #4]
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f000 f8c6 	bl	8007fb4 <OC2Config>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e2c:	e00e      	b.n	8007e4c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8007e2e:	6879      	ldr	r1, [r7, #4]
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f000 f92f 	bl	8008094 <OC3Config>
 8007e36:	4603      	mov	r3, r0
 8007e38:	75fb      	strb	r3, [r7, #23]
      break;
 8007e3a:	e007      	b.n	8007e4c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8007e3c:	6879      	ldr	r1, [r7, #4]
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f000 f998 	bl	8008174 <OC4Config>
 8007e44:	4603      	mov	r3, r0
 8007e46:	75fb      	strb	r3, [r7, #23]
      break;
 8007e48:	e000      	b.n	8007e4c <LL_TIM_OC_Init+0x78>
      break;
 8007e4a:	bf00      	nop
  }

  return result;
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3718      	adds	r7, #24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8007e56:	b480      	push	{r7}
 8007e58:	b085      	sub	sp, #20
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
 8007e5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8007e60:	2300      	movs	r3, #0
 8007e62:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	7b12      	ldrb	r2, [r2, #12]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ea2:	683a      	ldr	r2, [r7, #0]
 8007ea4:	89d2      	ldrh	r2, [r2, #14]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
	...

08007edc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	f023 0201 	bic.w	r2, r3, #1
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f023 0303 	bic.w	r3, r3, #3
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f023 0202 	bic.w	r2, r3, #2
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	f023 0201 	bic.w	r2, r3, #1
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a1c      	ldr	r2, [pc, #112]	@ (8007fac <OC1Config+0xd0>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d003      	beq.n	8007f46 <OC1Config+0x6a>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a1b      	ldr	r2, [pc, #108]	@ (8007fb0 <OC1Config+0xd4>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d11e      	bne.n	8007f84 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f023 0208 	bic.w	r2, r3, #8
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	695b      	ldr	r3, [r3, #20]
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4313      	orrs	r3, r2
 8007f54:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f023 0204 	bic.w	r2, r3, #4
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4313      	orrs	r3, r2
 8007f64:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	69db      	ldr	r3, [r3, #28]
 8007f7e:	005b      	lsls	r3, r3, #1
 8007f80:	4313      	orrs	r3, r2
 8007f82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	4619      	mov	r1, r3
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7ff fe39 	bl	8007c0e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3718      	adds	r7, #24
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	40010000 	.word	0x40010000
 8007fb0:	40010400 	.word	0x40010400

08007fb4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a1b      	ldr	r3, [r3, #32]
 8007fc2:	f023 0210 	bic.w	r2, r3, #16
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a1b      	ldr	r3, [r3, #32]
 8007fce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	699b      	ldr	r3, [r3, #24]
 8007fda:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	021b      	lsls	r3, r3, #8
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	f023 0220 	bic.w	r2, r3, #32
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	011b      	lsls	r3, r3, #4
 8008000:	4313      	orrs	r3, r2
 8008002:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f023 0210 	bic.w	r2, r3, #16
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	011b      	lsls	r3, r3, #4
 8008010:	4313      	orrs	r3, r2
 8008012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a1d      	ldr	r2, [pc, #116]	@ (800808c <OC2Config+0xd8>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d003      	beq.n	8008024 <OC2Config+0x70>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a1c      	ldr	r2, [pc, #112]	@ (8008090 <OC2Config+0xdc>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d11f      	bne.n	8008064 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	019b      	lsls	r3, r3, #6
 8008030:	4313      	orrs	r3, r2
 8008032:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	019b      	lsls	r3, r3, #6
 8008040:	4313      	orrs	r3, r2
 8008042:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4313      	orrs	r3, r2
 8008052:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	4313      	orrs	r3, r2
 8008062:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	4619      	mov	r1, r3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7ff fdd7 	bl	8007c2a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	40010000 	.word	0x40010000
 8008090:	40010400 	.word	0x40010400

08008094 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	69db      	ldr	r3, [r3, #28]
 80080ba:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f023 0303 	bic.w	r3, r3, #3
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	021b      	lsls	r3, r3, #8
 80080de:	4313      	orrs	r3, r2
 80080e0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	021b      	lsls	r3, r3, #8
 80080ee:	4313      	orrs	r3, r2
 80080f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a1d      	ldr	r2, [pc, #116]	@ (800816c <OC3Config+0xd8>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d003      	beq.n	8008102 <OC3Config+0x6e>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a1c      	ldr	r2, [pc, #112]	@ (8008170 <OC3Config+0xdc>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d11f      	bne.n	8008142 <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	695b      	ldr	r3, [r3, #20]
 800810c:	029b      	lsls	r3, r3, #10
 800810e:	4313      	orrs	r3, r2
 8008110:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	029b      	lsls	r3, r3, #10
 800811e:	4313      	orrs	r3, r2
 8008120:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	011b      	lsls	r3, r3, #4
 800812e:	4313      	orrs	r3, r2
 8008130:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	015b      	lsls	r3, r3, #5
 800813e:	4313      	orrs	r3, r2
 8008140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	4619      	mov	r1, r3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f7ff fd76 	bl	8007c46 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	697a      	ldr	r2, [r7, #20]
 800815e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	40010000 	.word	0x40010000
 8008170:	40010400 	.word	0x40010400

08008174 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a1b      	ldr	r3, [r3, #32]
 800818e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	69db      	ldr	r3, [r3, #28]
 800819a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	021b      	lsls	r3, r3, #8
 80081b0:	4313      	orrs	r3, r2
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	031b      	lsls	r3, r3, #12
 80081c0:	4313      	orrs	r3, r2
 80081c2:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	031b      	lsls	r3, r3, #12
 80081d0:	4313      	orrs	r3, r2
 80081d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a11      	ldr	r2, [pc, #68]	@ (800821c <OC4Config+0xa8>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d003      	beq.n	80081e4 <OC4Config+0x70>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a10      	ldr	r2, [pc, #64]	@ (8008220 <OC4Config+0xac>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d107      	bne.n	80081f4 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	019b      	lsls	r3, r3, #6
 80081f0:	4313      	orrs	r3, r2
 80081f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	4619      	mov	r1, r3
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f7ff fd2b 	bl	8007c62 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3718      	adds	r7, #24
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	40010000 	.word	0x40010000
 8008220:	40010400 	.word	0x40010400

08008224 <LL_USART_IsEnabled>:
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008234:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008238:	bf0c      	ite	eq
 800823a:	2301      	moveq	r3, #1
 800823c:	2300      	movne	r3, #0
 800823e:	b2db      	uxtb	r3, r3
}
 8008240:	4618      	mov	r0, r3
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <LL_USART_SetStopBitsLength>:
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	431a      	orrs	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	611a      	str	r2, [r3, #16]
}
 8008266:	bf00      	nop
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <LL_USART_SetHWFlowCtrl>:
{
 8008272:	b480      	push	{r7}
 8008274:	b083      	sub	sp, #12
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	695b      	ldr	r3, [r3, #20]
 8008280:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	431a      	orrs	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	615a      	str	r2, [r3, #20]
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <LL_USART_SetBaudRate>:
{
 8008298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800829c:	b0c0      	sub	sp, #256	@ 0x100
 800829e:	af00      	add	r7, sp, #0
 80082a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80082a4:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80082a8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80082ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80082b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082b8:	f040 810c 	bne.w	80084d4 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80082bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80082c0:	2200      	movs	r2, #0
 80082c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80082ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80082ce:	4622      	mov	r2, r4
 80082d0:	462b      	mov	r3, r5
 80082d2:	1891      	adds	r1, r2, r2
 80082d4:	6639      	str	r1, [r7, #96]	@ 0x60
 80082d6:	415b      	adcs	r3, r3
 80082d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80082da:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80082de:	4621      	mov	r1, r4
 80082e0:	eb12 0801 	adds.w	r8, r2, r1
 80082e4:	4629      	mov	r1, r5
 80082e6:	eb43 0901 	adc.w	r9, r3, r1
 80082ea:	f04f 0200 	mov.w	r2, #0
 80082ee:	f04f 0300 	mov.w	r3, #0
 80082f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082fe:	4690      	mov	r8, r2
 8008300:	4699      	mov	r9, r3
 8008302:	4623      	mov	r3, r4
 8008304:	eb18 0303 	adds.w	r3, r8, r3
 8008308:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800830c:	462b      	mov	r3, r5
 800830e:	eb49 0303 	adc.w	r3, r9, r3
 8008312:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008316:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800831a:	2200      	movs	r2, #0
 800831c:	469a      	mov	sl, r3
 800831e:	4693      	mov	fp, r2
 8008320:	eb1a 030a 	adds.w	r3, sl, sl
 8008324:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008326:	eb4b 030b 	adc.w	r3, fp, fp
 800832a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800832c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008330:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008334:	f7f8 fc58 	bl	8000be8 <__aeabi_uldivmod>
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	4b64      	ldr	r3, [pc, #400]	@ (80084d0 <LL_USART_SetBaudRate+0x238>)
 800833e:	fba3 2302 	umull	r2, r3, r3, r2
 8008342:	095b      	lsrs	r3, r3, #5
 8008344:	b29b      	uxth	r3, r3
 8008346:	011b      	lsls	r3, r3, #4
 8008348:	b29c      	uxth	r4, r3
 800834a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800834e:	2200      	movs	r2, #0
 8008350:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008354:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008358:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 800835c:	4642      	mov	r2, r8
 800835e:	464b      	mov	r3, r9
 8008360:	1891      	adds	r1, r2, r2
 8008362:	6539      	str	r1, [r7, #80]	@ 0x50
 8008364:	415b      	adcs	r3, r3
 8008366:	657b      	str	r3, [r7, #84]	@ 0x54
 8008368:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800836c:	4641      	mov	r1, r8
 800836e:	1851      	adds	r1, r2, r1
 8008370:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008372:	4649      	mov	r1, r9
 8008374:	414b      	adcs	r3, r1
 8008376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008378:	f04f 0200 	mov.w	r2, #0
 800837c:	f04f 0300 	mov.w	r3, #0
 8008380:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8008384:	4659      	mov	r1, fp
 8008386:	00cb      	lsls	r3, r1, #3
 8008388:	4651      	mov	r1, sl
 800838a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800838e:	4651      	mov	r1, sl
 8008390:	00ca      	lsls	r2, r1, #3
 8008392:	4610      	mov	r0, r2
 8008394:	4619      	mov	r1, r3
 8008396:	4603      	mov	r3, r0
 8008398:	4642      	mov	r2, r8
 800839a:	189b      	adds	r3, r3, r2
 800839c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80083a0:	464b      	mov	r3, r9
 80083a2:	460a      	mov	r2, r1
 80083a4:	eb42 0303 	adc.w	r3, r2, r3
 80083a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80083ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80083b0:	2200      	movs	r2, #0
 80083b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80083b6:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80083ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80083be:	460b      	mov	r3, r1
 80083c0:	18db      	adds	r3, r3, r3
 80083c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80083c4:	4613      	mov	r3, r2
 80083c6:	eb42 0303 	adc.w	r3, r2, r3
 80083ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80083cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80083d0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80083d4:	f7f8 fc08 	bl	8000be8 <__aeabi_uldivmod>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	4611      	mov	r1, r2
 80083de:	4b3c      	ldr	r3, [pc, #240]	@ (80084d0 <LL_USART_SetBaudRate+0x238>)
 80083e0:	fba3 2301 	umull	r2, r3, r3, r1
 80083e4:	095b      	lsrs	r3, r3, #5
 80083e6:	2264      	movs	r2, #100	@ 0x64
 80083e8:	fb02 f303 	mul.w	r3, r2, r3
 80083ec:	1acb      	subs	r3, r1, r3
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80083f4:	4b36      	ldr	r3, [pc, #216]	@ (80084d0 <LL_USART_SetBaudRate+0x238>)
 80083f6:	fba3 2302 	umull	r2, r3, r3, r2
 80083fa:	095b      	lsrs	r3, r3, #5
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	005b      	lsls	r3, r3, #1
 8008400:	b29b      	uxth	r3, r3
 8008402:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008406:	b29b      	uxth	r3, r3
 8008408:	4423      	add	r3, r4
 800840a:	b29c      	uxth	r4, r3
 800840c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008410:	2200      	movs	r2, #0
 8008412:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008416:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800841a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800841e:	4642      	mov	r2, r8
 8008420:	464b      	mov	r3, r9
 8008422:	1891      	adds	r1, r2, r2
 8008424:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008426:	415b      	adcs	r3, r3
 8008428:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800842a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800842e:	4641      	mov	r1, r8
 8008430:	1851      	adds	r1, r2, r1
 8008432:	6339      	str	r1, [r7, #48]	@ 0x30
 8008434:	4649      	mov	r1, r9
 8008436:	414b      	adcs	r3, r1
 8008438:	637b      	str	r3, [r7, #52]	@ 0x34
 800843a:	f04f 0200 	mov.w	r2, #0
 800843e:	f04f 0300 	mov.w	r3, #0
 8008442:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008446:	4659      	mov	r1, fp
 8008448:	00cb      	lsls	r3, r1, #3
 800844a:	4651      	mov	r1, sl
 800844c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008450:	4651      	mov	r1, sl
 8008452:	00ca      	lsls	r2, r1, #3
 8008454:	4610      	mov	r0, r2
 8008456:	4619      	mov	r1, r3
 8008458:	4603      	mov	r3, r0
 800845a:	4642      	mov	r2, r8
 800845c:	189b      	adds	r3, r3, r2
 800845e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008462:	464b      	mov	r3, r9
 8008464:	460a      	mov	r2, r1
 8008466:	eb42 0303 	adc.w	r3, r2, r3
 800846a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800846e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008472:	2200      	movs	r2, #0
 8008474:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008478:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800847c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008480:	460b      	mov	r3, r1
 8008482:	18db      	adds	r3, r3, r3
 8008484:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008486:	4613      	mov	r3, r2
 8008488:	eb42 0303 	adc.w	r3, r2, r3
 800848c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800848e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008492:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8008496:	f7f8 fba7 	bl	8000be8 <__aeabi_uldivmod>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	4b0c      	ldr	r3, [pc, #48]	@ (80084d0 <LL_USART_SetBaudRate+0x238>)
 80084a0:	fba3 1302 	umull	r1, r3, r3, r2
 80084a4:	095b      	lsrs	r3, r3, #5
 80084a6:	2164      	movs	r1, #100	@ 0x64
 80084a8:	fb01 f303 	mul.w	r3, r1, r3
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	00db      	lsls	r3, r3, #3
 80084b0:	3332      	adds	r3, #50	@ 0x32
 80084b2:	4a07      	ldr	r2, [pc, #28]	@ (80084d0 <LL_USART_SetBaudRate+0x238>)
 80084b4:	fba2 2303 	umull	r2, r3, r2, r3
 80084b8:	095b      	lsrs	r3, r3, #5
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	f003 0307 	and.w	r3, r3, #7
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	4423      	add	r3, r4
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	461a      	mov	r2, r3
 80084c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084cc:	609a      	str	r2, [r3, #8]
}
 80084ce:	e108      	b.n	80086e2 <LL_USART_SetBaudRate+0x44a>
 80084d0:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80084d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80084d8:	2200      	movs	r2, #0
 80084da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80084de:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80084e2:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80084e6:	4642      	mov	r2, r8
 80084e8:	464b      	mov	r3, r9
 80084ea:	1891      	adds	r1, r2, r2
 80084ec:	6239      	str	r1, [r7, #32]
 80084ee:	415b      	adcs	r3, r3
 80084f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80084f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084f6:	4641      	mov	r1, r8
 80084f8:	1854      	adds	r4, r2, r1
 80084fa:	4649      	mov	r1, r9
 80084fc:	eb43 0501 	adc.w	r5, r3, r1
 8008500:	f04f 0200 	mov.w	r2, #0
 8008504:	f04f 0300 	mov.w	r3, #0
 8008508:	00eb      	lsls	r3, r5, #3
 800850a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800850e:	00e2      	lsls	r2, r4, #3
 8008510:	4614      	mov	r4, r2
 8008512:	461d      	mov	r5, r3
 8008514:	4643      	mov	r3, r8
 8008516:	18e3      	adds	r3, r4, r3
 8008518:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800851c:	464b      	mov	r3, r9
 800851e:	eb45 0303 	adc.w	r3, r5, r3
 8008522:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008526:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800852a:	2200      	movs	r2, #0
 800852c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008530:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8008534:	f04f 0200 	mov.w	r2, #0
 8008538:	f04f 0300 	mov.w	r3, #0
 800853c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8008540:	4629      	mov	r1, r5
 8008542:	008b      	lsls	r3, r1, #2
 8008544:	4621      	mov	r1, r4
 8008546:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800854a:	4621      	mov	r1, r4
 800854c:	008a      	lsls	r2, r1, #2
 800854e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8008552:	f7f8 fb49 	bl	8000be8 <__aeabi_uldivmod>
 8008556:	4602      	mov	r2, r0
 8008558:	460b      	mov	r3, r1
 800855a:	4b65      	ldr	r3, [pc, #404]	@ (80086f0 <LL_USART_SetBaudRate+0x458>)
 800855c:	fba3 2302 	umull	r2, r3, r3, r2
 8008560:	095b      	lsrs	r3, r3, #5
 8008562:	b29b      	uxth	r3, r3
 8008564:	011b      	lsls	r3, r3, #4
 8008566:	b29c      	uxth	r4, r3
 8008568:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800856c:	2200      	movs	r2, #0
 800856e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008572:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008576:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800857a:	4642      	mov	r2, r8
 800857c:	464b      	mov	r3, r9
 800857e:	1891      	adds	r1, r2, r2
 8008580:	61b9      	str	r1, [r7, #24]
 8008582:	415b      	adcs	r3, r3
 8008584:	61fb      	str	r3, [r7, #28]
 8008586:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800858a:	4641      	mov	r1, r8
 800858c:	1851      	adds	r1, r2, r1
 800858e:	6139      	str	r1, [r7, #16]
 8008590:	4649      	mov	r1, r9
 8008592:	414b      	adcs	r3, r1
 8008594:	617b      	str	r3, [r7, #20]
 8008596:	f04f 0200 	mov.w	r2, #0
 800859a:	f04f 0300 	mov.w	r3, #0
 800859e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80085a2:	4659      	mov	r1, fp
 80085a4:	00cb      	lsls	r3, r1, #3
 80085a6:	4651      	mov	r1, sl
 80085a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085ac:	4651      	mov	r1, sl
 80085ae:	00ca      	lsls	r2, r1, #3
 80085b0:	4610      	mov	r0, r2
 80085b2:	4619      	mov	r1, r3
 80085b4:	4603      	mov	r3, r0
 80085b6:	4642      	mov	r2, r8
 80085b8:	189b      	adds	r3, r3, r2
 80085ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80085be:	464b      	mov	r3, r9
 80085c0:	460a      	mov	r2, r1
 80085c2:	eb42 0303 	adc.w	r3, r2, r3
 80085c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80085ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80085ce:	2200      	movs	r2, #0
 80085d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80085d4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80085d8:	f04f 0200 	mov.w	r2, #0
 80085dc:	f04f 0300 	mov.w	r3, #0
 80085e0:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80085e4:	4649      	mov	r1, r9
 80085e6:	008b      	lsls	r3, r1, #2
 80085e8:	4641      	mov	r1, r8
 80085ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085ee:	4641      	mov	r1, r8
 80085f0:	008a      	lsls	r2, r1, #2
 80085f2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80085f6:	f7f8 faf7 	bl	8000be8 <__aeabi_uldivmod>
 80085fa:	4602      	mov	r2, r0
 80085fc:	460b      	mov	r3, r1
 80085fe:	4611      	mov	r1, r2
 8008600:	4b3b      	ldr	r3, [pc, #236]	@ (80086f0 <LL_USART_SetBaudRate+0x458>)
 8008602:	fba3 2301 	umull	r2, r3, r3, r1
 8008606:	095b      	lsrs	r3, r3, #5
 8008608:	2264      	movs	r2, #100	@ 0x64
 800860a:	fb02 f303 	mul.w	r3, r2, r3
 800860e:	1acb      	subs	r3, r1, r3
 8008610:	011b      	lsls	r3, r3, #4
 8008612:	3332      	adds	r3, #50	@ 0x32
 8008614:	4a36      	ldr	r2, [pc, #216]	@ (80086f0 <LL_USART_SetBaudRate+0x458>)
 8008616:	fba2 2303 	umull	r2, r3, r2, r3
 800861a:	095b      	lsrs	r3, r3, #5
 800861c:	b29b      	uxth	r3, r3
 800861e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008622:	b29b      	uxth	r3, r3
 8008624:	4423      	add	r3, r4
 8008626:	b29c      	uxth	r4, r3
 8008628:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800862c:	2200      	movs	r2, #0
 800862e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008630:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008632:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008636:	4642      	mov	r2, r8
 8008638:	464b      	mov	r3, r9
 800863a:	1891      	adds	r1, r2, r2
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	415b      	adcs	r3, r3
 8008640:	60fb      	str	r3, [r7, #12]
 8008642:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008646:	4641      	mov	r1, r8
 8008648:	1851      	adds	r1, r2, r1
 800864a:	6039      	str	r1, [r7, #0]
 800864c:	4649      	mov	r1, r9
 800864e:	414b      	adcs	r3, r1
 8008650:	607b      	str	r3, [r7, #4]
 8008652:	f04f 0200 	mov.w	r2, #0
 8008656:	f04f 0300 	mov.w	r3, #0
 800865a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800865e:	4659      	mov	r1, fp
 8008660:	00cb      	lsls	r3, r1, #3
 8008662:	4651      	mov	r1, sl
 8008664:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008668:	4651      	mov	r1, sl
 800866a:	00ca      	lsls	r2, r1, #3
 800866c:	4610      	mov	r0, r2
 800866e:	4619      	mov	r1, r3
 8008670:	4603      	mov	r3, r0
 8008672:	4642      	mov	r2, r8
 8008674:	189b      	adds	r3, r3, r2
 8008676:	673b      	str	r3, [r7, #112]	@ 0x70
 8008678:	464b      	mov	r3, r9
 800867a:	460a      	mov	r2, r1
 800867c:	eb42 0303 	adc.w	r3, r2, r3
 8008680:	677b      	str	r3, [r7, #116]	@ 0x74
 8008682:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008686:	2200      	movs	r2, #0
 8008688:	66bb      	str	r3, [r7, #104]	@ 0x68
 800868a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800868c:	f04f 0200 	mov.w	r2, #0
 8008690:	f04f 0300 	mov.w	r3, #0
 8008694:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8008698:	4649      	mov	r1, r9
 800869a:	008b      	lsls	r3, r1, #2
 800869c:	4641      	mov	r1, r8
 800869e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086a2:	4641      	mov	r1, r8
 80086a4:	008a      	lsls	r2, r1, #2
 80086a6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80086aa:	f7f8 fa9d 	bl	8000be8 <__aeabi_uldivmod>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4b0f      	ldr	r3, [pc, #60]	@ (80086f0 <LL_USART_SetBaudRate+0x458>)
 80086b4:	fba3 1302 	umull	r1, r3, r3, r2
 80086b8:	095b      	lsrs	r3, r3, #5
 80086ba:	2164      	movs	r1, #100	@ 0x64
 80086bc:	fb01 f303 	mul.w	r3, r1, r3
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	011b      	lsls	r3, r3, #4
 80086c4:	3332      	adds	r3, #50	@ 0x32
 80086c6:	4a0a      	ldr	r2, [pc, #40]	@ (80086f0 <LL_USART_SetBaudRate+0x458>)
 80086c8:	fba2 2303 	umull	r2, r3, r2, r3
 80086cc:	095b      	lsrs	r3, r3, #5
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	f003 030f 	and.w	r3, r3, #15
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	4423      	add	r3, r4
 80086d8:	b29b      	uxth	r3, r3
 80086da:	461a      	mov	r2, r3
 80086dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086e0:	609a      	str	r2, [r3, #8]
}
 80086e2:	bf00      	nop
 80086e4:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80086e8:	46bd      	mov	sp, r7
 80086ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086ee:	bf00      	nop
 80086f0:	51eb851f 	.word	0x51eb851f

080086f4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b088      	sub	sp, #32
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8008702:	2300      	movs	r3, #0
 8008704:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7ff fd8c 	bl	8008224 <LL_USART_IsEnabled>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d15e      	bne.n	80087d0 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800871a:	f023 030c 	bic.w	r3, r3, #12
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	6851      	ldr	r1, [r2, #4]
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	68d2      	ldr	r2, [r2, #12]
 8008726:	4311      	orrs	r1, r2
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	6912      	ldr	r2, [r2, #16]
 800872c:	4311      	orrs	r1, r2
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	6992      	ldr	r2, [r2, #24]
 8008732:	430a      	orrs	r2, r1
 8008734:	431a      	orrs	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	4619      	mov	r1, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7ff fd83 	bl	800824c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	695b      	ldr	r3, [r3, #20]
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7ff fd90 	bl	8008272 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8008752:	f107 0308 	add.w	r3, r7, #8
 8008756:	4618      	mov	r0, r3
 8008758:	f7ff f8f4 	bl	8007944 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a1f      	ldr	r2, [pc, #124]	@ (80087dc <LL_USART_Init+0xe8>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d102      	bne.n	800876a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	61bb      	str	r3, [r7, #24]
 8008768:	e021      	b.n	80087ae <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a1c      	ldr	r2, [pc, #112]	@ (80087e0 <LL_USART_Init+0xec>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d102      	bne.n	8008778 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	61bb      	str	r3, [r7, #24]
 8008776:	e01a      	b.n	80087ae <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a1a      	ldr	r2, [pc, #104]	@ (80087e4 <LL_USART_Init+0xf0>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d102      	bne.n	8008786 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	61bb      	str	r3, [r7, #24]
 8008784:	e013      	b.n	80087ae <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a17      	ldr	r2, [pc, #92]	@ (80087e8 <LL_USART_Init+0xf4>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d102      	bne.n	8008794 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	61bb      	str	r3, [r7, #24]
 8008792:	e00c      	b.n	80087ae <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a15      	ldr	r2, [pc, #84]	@ (80087ec <LL_USART_Init+0xf8>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d102      	bne.n	80087a2 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	61bb      	str	r3, [r7, #24]
 80087a0:	e005      	b.n	80087ae <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a12      	ldr	r2, [pc, #72]	@ (80087f0 <LL_USART_Init+0xfc>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d101      	bne.n	80087ae <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00d      	beq.n	80087d0 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d009      	beq.n	80087d0 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80087bc:	2300      	movs	r3, #0
 80087be:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80087c8:	69b9      	ldr	r1, [r7, #24]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7ff fd64 	bl	8008298 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80087d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3720      	adds	r7, #32
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	40011000 	.word	0x40011000
 80087e0:	40004400 	.word	0x40004400
 80087e4:	40004800 	.word	0x40004800
 80087e8:	40011400 	.word	0x40011400
 80087ec:	40004c00 	.word	0x40004c00
 80087f0:	40005000 	.word	0x40005000

080087f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087f4:	b084      	sub	sp, #16
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
 80087fe:	f107 001c 	add.w	r0, r7, #28
 8008802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008806:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800880a:	2b01      	cmp	r3, #1
 800880c:	d123      	bne.n	8008856 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008812:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008822:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008836:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800883a:	2b01      	cmp	r3, #1
 800883c:	d105      	bne.n	800884a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f001 fae8 	bl	8009e20 <USB_CoreReset>
 8008850:	4603      	mov	r3, r0
 8008852:	73fb      	strb	r3, [r7, #15]
 8008854:	e01b      	b.n	800888e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f001 fadc 	bl	8009e20 <USB_CoreReset>
 8008868:	4603      	mov	r3, r0
 800886a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800886c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008870:	2b00      	cmp	r3, #0
 8008872:	d106      	bne.n	8008882 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008878:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008880:	e005      	b.n	800888e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008886:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800888e:	7fbb      	ldrb	r3, [r7, #30]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d10b      	bne.n	80088ac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	f043 0206 	orr.w	r2, r3, #6
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	f043 0220 	orr.w	r2, r3, #32
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088b8:	b004      	add	sp, #16
 80088ba:	4770      	bx	lr

080088bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80088bc:	b480      	push	{r7}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	4613      	mov	r3, r2
 80088c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80088ca:	79fb      	ldrb	r3, [r7, #7]
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d165      	bne.n	800899c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	4a41      	ldr	r2, [pc, #260]	@ (80089d8 <USB_SetTurnaroundTime+0x11c>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d906      	bls.n	80088e6 <USB_SetTurnaroundTime+0x2a>
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	4a40      	ldr	r2, [pc, #256]	@ (80089dc <USB_SetTurnaroundTime+0x120>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d202      	bcs.n	80088e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80088e0:	230f      	movs	r3, #15
 80088e2:	617b      	str	r3, [r7, #20]
 80088e4:	e062      	b.n	80089ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	4a3c      	ldr	r2, [pc, #240]	@ (80089dc <USB_SetTurnaroundTime+0x120>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d306      	bcc.n	80088fc <USB_SetTurnaroundTime+0x40>
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	4a3b      	ldr	r2, [pc, #236]	@ (80089e0 <USB_SetTurnaroundTime+0x124>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d202      	bcs.n	80088fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80088f6:	230e      	movs	r3, #14
 80088f8:	617b      	str	r3, [r7, #20]
 80088fa:	e057      	b.n	80089ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	4a38      	ldr	r2, [pc, #224]	@ (80089e0 <USB_SetTurnaroundTime+0x124>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d306      	bcc.n	8008912 <USB_SetTurnaroundTime+0x56>
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	4a37      	ldr	r2, [pc, #220]	@ (80089e4 <USB_SetTurnaroundTime+0x128>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d202      	bcs.n	8008912 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800890c:	230d      	movs	r3, #13
 800890e:	617b      	str	r3, [r7, #20]
 8008910:	e04c      	b.n	80089ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	4a33      	ldr	r2, [pc, #204]	@ (80089e4 <USB_SetTurnaroundTime+0x128>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d306      	bcc.n	8008928 <USB_SetTurnaroundTime+0x6c>
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	4a32      	ldr	r2, [pc, #200]	@ (80089e8 <USB_SetTurnaroundTime+0x12c>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d802      	bhi.n	8008928 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008922:	230c      	movs	r3, #12
 8008924:	617b      	str	r3, [r7, #20]
 8008926:	e041      	b.n	80089ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	4a2f      	ldr	r2, [pc, #188]	@ (80089e8 <USB_SetTurnaroundTime+0x12c>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d906      	bls.n	800893e <USB_SetTurnaroundTime+0x82>
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	4a2e      	ldr	r2, [pc, #184]	@ (80089ec <USB_SetTurnaroundTime+0x130>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d802      	bhi.n	800893e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008938:	230b      	movs	r3, #11
 800893a:	617b      	str	r3, [r7, #20]
 800893c:	e036      	b.n	80089ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	4a2a      	ldr	r2, [pc, #168]	@ (80089ec <USB_SetTurnaroundTime+0x130>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d906      	bls.n	8008954 <USB_SetTurnaroundTime+0x98>
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	4a29      	ldr	r2, [pc, #164]	@ (80089f0 <USB_SetTurnaroundTime+0x134>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d802      	bhi.n	8008954 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800894e:	230a      	movs	r3, #10
 8008950:	617b      	str	r3, [r7, #20]
 8008952:	e02b      	b.n	80089ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	4a26      	ldr	r2, [pc, #152]	@ (80089f0 <USB_SetTurnaroundTime+0x134>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d906      	bls.n	800896a <USB_SetTurnaroundTime+0xae>
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	4a25      	ldr	r2, [pc, #148]	@ (80089f4 <USB_SetTurnaroundTime+0x138>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d202      	bcs.n	800896a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008964:	2309      	movs	r3, #9
 8008966:	617b      	str	r3, [r7, #20]
 8008968:	e020      	b.n	80089ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	4a21      	ldr	r2, [pc, #132]	@ (80089f4 <USB_SetTurnaroundTime+0x138>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d306      	bcc.n	8008980 <USB_SetTurnaroundTime+0xc4>
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	4a20      	ldr	r2, [pc, #128]	@ (80089f8 <USB_SetTurnaroundTime+0x13c>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d802      	bhi.n	8008980 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800897a:	2308      	movs	r3, #8
 800897c:	617b      	str	r3, [r7, #20]
 800897e:	e015      	b.n	80089ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	4a1d      	ldr	r2, [pc, #116]	@ (80089f8 <USB_SetTurnaroundTime+0x13c>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d906      	bls.n	8008996 <USB_SetTurnaroundTime+0xda>
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	4a1c      	ldr	r2, [pc, #112]	@ (80089fc <USB_SetTurnaroundTime+0x140>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d202      	bcs.n	8008996 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008990:	2307      	movs	r3, #7
 8008992:	617b      	str	r3, [r7, #20]
 8008994:	e00a      	b.n	80089ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008996:	2306      	movs	r3, #6
 8008998:	617b      	str	r3, [r7, #20]
 800899a:	e007      	b.n	80089ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800899c:	79fb      	ldrb	r3, [r7, #7]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d102      	bne.n	80089a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80089a2:	2309      	movs	r3, #9
 80089a4:	617b      	str	r3, [r7, #20]
 80089a6:	e001      	b.n	80089ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80089a8:	2309      	movs	r3, #9
 80089aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	68da      	ldr	r2, [r3, #12]
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	029b      	lsls	r3, r3, #10
 80089c0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80089c4:	431a      	orrs	r2, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	371c      	adds	r7, #28
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr
 80089d8:	00d8acbf 	.word	0x00d8acbf
 80089dc:	00e4e1c0 	.word	0x00e4e1c0
 80089e0:	00f42400 	.word	0x00f42400
 80089e4:	01067380 	.word	0x01067380
 80089e8:	011a499f 	.word	0x011a499f
 80089ec:	01312cff 	.word	0x01312cff
 80089f0:	014ca43f 	.word	0x014ca43f
 80089f4:	016e3600 	.word	0x016e3600
 80089f8:	01a6ab1f 	.word	0x01a6ab1f
 80089fc:	01e84800 	.word	0x01e84800

08008a00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	f043 0201 	orr.w	r2, r3, #1
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	370c      	adds	r7, #12
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr

08008a22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a22:	b480      	push	{r7}
 8008a24:	b083      	sub	sp, #12
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	f023 0201 	bic.w	r2, r3, #1
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a50:	2300      	movs	r3, #0
 8008a52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a60:	78fb      	ldrb	r3, [r7, #3]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d115      	bne.n	8008a92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008a72:	200a      	movs	r0, #10
 8008a74:	f7fc f9a4 	bl	8004dc0 <HAL_Delay>
      ms += 10U;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	330a      	adds	r3, #10
 8008a7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f001 f93f 	bl	8009d02 <USB_GetMode>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d01e      	beq.n	8008ac8 <USB_SetCurrentMode+0x84>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2bc7      	cmp	r3, #199	@ 0xc7
 8008a8e:	d9f0      	bls.n	8008a72 <USB_SetCurrentMode+0x2e>
 8008a90:	e01a      	b.n	8008ac8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a92:	78fb      	ldrb	r3, [r7, #3]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d115      	bne.n	8008ac4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008aa4:	200a      	movs	r0, #10
 8008aa6:	f7fc f98b 	bl	8004dc0 <HAL_Delay>
      ms += 10U;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	330a      	adds	r3, #10
 8008aae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f001 f926 	bl	8009d02 <USB_GetMode>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d005      	beq.n	8008ac8 <USB_SetCurrentMode+0x84>
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2bc7      	cmp	r3, #199	@ 0xc7
 8008ac0:	d9f0      	bls.n	8008aa4 <USB_SetCurrentMode+0x60>
 8008ac2:	e001      	b.n	8008ac8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e005      	b.n	8008ad4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2bc8      	cmp	r3, #200	@ 0xc8
 8008acc:	d101      	bne.n	8008ad2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e000      	b.n	8008ad4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008adc:	b084      	sub	sp, #16
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b086      	sub	sp, #24
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
 8008ae6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008aea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008af6:	2300      	movs	r3, #0
 8008af8:	613b      	str	r3, [r7, #16]
 8008afa:	e009      	b.n	8008b10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	3340      	adds	r3, #64	@ 0x40
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	2200      	movs	r2, #0
 8008b08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	613b      	str	r3, [r7, #16]
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	2b0e      	cmp	r3, #14
 8008b14:	d9f2      	bls.n	8008afc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b16:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d11c      	bne.n	8008b58 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b2c:	f043 0302 	orr.w	r3, r3, #2
 8008b30:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b36:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b42:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b4e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	639a      	str	r2, [r3, #56]	@ 0x38
 8008b56:	e00b      	b.n	8008b70 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b5c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b68:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b76:	461a      	mov	r2, r3
 8008b78:	2300      	movs	r3, #0
 8008b7a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b7c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d10d      	bne.n	8008ba0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008b84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d104      	bne.n	8008b96 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 f968 	bl	8008e64 <USB_SetDevSpeed>
 8008b94:	e008      	b.n	8008ba8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008b96:	2101      	movs	r1, #1
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f963 	bl	8008e64 <USB_SetDevSpeed>
 8008b9e:	e003      	b.n	8008ba8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008ba0:	2103      	movs	r1, #3
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f95e 	bl	8008e64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ba8:	2110      	movs	r1, #16
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f8fa 	bl	8008da4 <USB_FlushTxFifo>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d001      	beq.n	8008bba <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f924 	bl	8008e08 <USB_FlushRxFifo>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bdc:	461a      	mov	r2, r3
 8008bde:	2300      	movs	r3, #0
 8008be0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008be8:	461a      	mov	r2, r3
 8008bea:	2300      	movs	r3, #0
 8008bec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bee:	2300      	movs	r3, #0
 8008bf0:	613b      	str	r3, [r7, #16]
 8008bf2:	e043      	b.n	8008c7c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	015a      	lsls	r2, r3, #5
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c0a:	d118      	bne.n	8008c3e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10a      	bne.n	8008c28 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c1e:	461a      	mov	r2, r3
 8008c20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008c24:	6013      	str	r3, [r2, #0]
 8008c26:	e013      	b.n	8008c50 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	015a      	lsls	r2, r3, #5
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	4413      	add	r3, r2
 8008c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c34:	461a      	mov	r2, r3
 8008c36:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	e008      	b.n	8008c50 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	015a      	lsls	r2, r3, #5
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	4413      	add	r3, r2
 8008c46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	015a      	lsls	r2, r3, #5
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	4413      	add	r3, r2
 8008c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	2300      	movs	r3, #0
 8008c60:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	015a      	lsls	r2, r3, #5
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	4413      	add	r3, r2
 8008c6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c6e:	461a      	mov	r2, r3
 8008c70:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008c74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	613b      	str	r3, [r7, #16]
 8008c7c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008c80:	461a      	mov	r2, r3
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d3b5      	bcc.n	8008bf4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c88:	2300      	movs	r3, #0
 8008c8a:	613b      	str	r3, [r7, #16]
 8008c8c:	e043      	b.n	8008d16 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	015a      	lsls	r2, r3, #5
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	4413      	add	r3, r2
 8008c96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ca0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ca4:	d118      	bne.n	8008cd8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d10a      	bne.n	8008cc2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	015a      	lsls	r2, r3, #5
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cb8:	461a      	mov	r2, r3
 8008cba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008cbe:	6013      	str	r3, [r2, #0]
 8008cc0:	e013      	b.n	8008cea <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	015a      	lsls	r2, r3, #5
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cce:	461a      	mov	r2, r3
 8008cd0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008cd4:	6013      	str	r3, [r2, #0]
 8008cd6:	e008      	b.n	8008cea <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	015a      	lsls	r2, r3, #5
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	4413      	add	r3, r2
 8008ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	015a      	lsls	r2, r3, #5
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	015a      	lsls	r2, r3, #5
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d08:	461a      	mov	r2, r3
 8008d0a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008d0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	3301      	adds	r3, #1
 8008d14:	613b      	str	r3, [r7, #16]
 8008d16:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d3b5      	bcc.n	8008c8e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d34:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008d42:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d105      	bne.n	8008d58 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	f043 0210 	orr.w	r2, r3, #16
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	699a      	ldr	r2, [r3, #24]
 8008d5c:	4b10      	ldr	r3, [pc, #64]	@ (8008da0 <USB_DevInit+0x2c4>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008d64:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d005      	beq.n	8008d78 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	699b      	ldr	r3, [r3, #24]
 8008d70:	f043 0208 	orr.w	r2, r3, #8
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008d78:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d107      	bne.n	8008d90 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d88:	f043 0304 	orr.w	r3, r3, #4
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3718      	adds	r7, #24
 8008d96:	46bd      	mov	sp, r7
 8008d98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d9c:	b004      	add	sp, #16
 8008d9e:	4770      	bx	lr
 8008da0:	803c3800 	.word	0x803c3800

08008da4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008dae:	2300      	movs	r3, #0
 8008db0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	3301      	adds	r3, #1
 8008db6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008dbe:	d901      	bls.n	8008dc4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	e01b      	b.n	8008dfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	daf2      	bge.n	8008db2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	019b      	lsls	r3, r3, #6
 8008dd4:	f043 0220 	orr.w	r2, r3, #32
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	3301      	adds	r3, #1
 8008de0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008de8:	d901      	bls.n	8008dee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008dea:	2303      	movs	r3, #3
 8008dec:	e006      	b.n	8008dfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	f003 0320 	and.w	r3, r3, #32
 8008df6:	2b20      	cmp	r3, #32
 8008df8:	d0f0      	beq.n	8008ddc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3714      	adds	r7, #20
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e10:	2300      	movs	r3, #0
 8008e12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	3301      	adds	r3, #1
 8008e18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e20:	d901      	bls.n	8008e26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	e018      	b.n	8008e58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	daf2      	bge.n	8008e14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2210      	movs	r2, #16
 8008e36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e44:	d901      	bls.n	8008e4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e006      	b.n	8008e58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	f003 0310 	and.w	r3, r3, #16
 8008e52:	2b10      	cmp	r3, #16
 8008e54:	d0f0      	beq.n	8008e38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3714      	adds	r7, #20
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	78fb      	ldrb	r3, [r7, #3]
 8008e7e:	68f9      	ldr	r1, [r7, #12]
 8008e80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e84:	4313      	orrs	r3, r2
 8008e86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3714      	adds	r7, #20
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008e96:	b480      	push	{r7}
 8008e98:	b087      	sub	sp, #28
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f003 0306 	and.w	r3, r3, #6
 8008eae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d102      	bne.n	8008ebc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	75fb      	strb	r3, [r7, #23]
 8008eba:	e00a      	b.n	8008ed2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d002      	beq.n	8008ec8 <USB_GetDevSpeed+0x32>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2b06      	cmp	r3, #6
 8008ec6:	d102      	bne.n	8008ece <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008ec8:	2302      	movs	r3, #2
 8008eca:	75fb      	strb	r3, [r7, #23]
 8008ecc:	e001      	b.n	8008ed2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008ece:	230f      	movs	r3, #15
 8008ed0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	371c      	adds	r7, #28
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	785b      	ldrb	r3, [r3, #1]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d13a      	bne.n	8008f72 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f02:	69da      	ldr	r2, [r3, #28]
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	f003 030f 	and.w	r3, r3, #15
 8008f0c:	2101      	movs	r1, #1
 8008f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	68f9      	ldr	r1, [r7, #12]
 8008f16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	015a      	lsls	r2, r3, #5
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	4413      	add	r3, r2
 8008f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d155      	bne.n	8008fe0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	015a      	lsls	r2, r3, #5
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	791b      	ldrb	r3, [r3, #4]
 8008f4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	059b      	lsls	r3, r3, #22
 8008f56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	0151      	lsls	r1, r2, #5
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	440a      	add	r2, r1
 8008f62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f6e:	6013      	str	r3, [r2, #0]
 8008f70:	e036      	b.n	8008fe0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f78:	69da      	ldr	r2, [r3, #28]
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	f003 030f 	and.w	r3, r3, #15
 8008f82:	2101      	movs	r1, #1
 8008f84:	fa01 f303 	lsl.w	r3, r1, r3
 8008f88:	041b      	lsls	r3, r3, #16
 8008f8a:	68f9      	ldr	r1, [r7, #12]
 8008f8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f90:	4313      	orrs	r3, r2
 8008f92:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	015a      	lsls	r2, r3, #5
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d11a      	bne.n	8008fe0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	015a      	lsls	r2, r3, #5
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	791b      	ldrb	r3, [r3, #4]
 8008fc4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008fc6:	430b      	orrs	r3, r1
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	0151      	lsls	r1, r2, #5
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	440a      	add	r2, r1
 8008fd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fde:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
	...

08008ff0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	785b      	ldrb	r3, [r3, #1]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d161      	bne.n	80090d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	015a      	lsls	r2, r3, #5
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	4413      	add	r3, r2
 8009014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800901e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009022:	d11f      	bne.n	8009064 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	015a      	lsls	r2, r3, #5
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	4413      	add	r3, r2
 800902c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	0151      	lsls	r1, r2, #5
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	440a      	add	r2, r1
 800903a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800903e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009042:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	015a      	lsls	r2, r3, #5
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	4413      	add	r3, r2
 800904c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	0151      	lsls	r1, r2, #5
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	440a      	add	r2, r1
 800905a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800905e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009062:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800906a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	f003 030f 	and.w	r3, r3, #15
 8009074:	2101      	movs	r1, #1
 8009076:	fa01 f303 	lsl.w	r3, r1, r3
 800907a:	b29b      	uxth	r3, r3
 800907c:	43db      	mvns	r3, r3
 800907e:	68f9      	ldr	r1, [r7, #12]
 8009080:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009084:	4013      	ands	r3, r2
 8009086:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800908e:	69da      	ldr	r2, [r3, #28]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	f003 030f 	and.w	r3, r3, #15
 8009098:	2101      	movs	r1, #1
 800909a:	fa01 f303 	lsl.w	r3, r1, r3
 800909e:	b29b      	uxth	r3, r3
 80090a0:	43db      	mvns	r3, r3
 80090a2:	68f9      	ldr	r1, [r7, #12]
 80090a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80090a8:	4013      	ands	r3, r2
 80090aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	015a      	lsls	r2, r3, #5
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	4413      	add	r3, r2
 80090b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	0159      	lsls	r1, r3, #5
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	440b      	add	r3, r1
 80090c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090c6:	4619      	mov	r1, r3
 80090c8:	4b35      	ldr	r3, [pc, #212]	@ (80091a0 <USB_DeactivateEndpoint+0x1b0>)
 80090ca:	4013      	ands	r3, r2
 80090cc:	600b      	str	r3, [r1, #0]
 80090ce:	e060      	b.n	8009192 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090e6:	d11f      	bne.n	8009128 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	015a      	lsls	r2, r3, #5
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	4413      	add	r3, r2
 80090f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	0151      	lsls	r1, r2, #5
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	440a      	add	r2, r1
 80090fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009102:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009106:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	015a      	lsls	r2, r3, #5
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	4413      	add	r3, r2
 8009110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	0151      	lsls	r1, r2, #5
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	440a      	add	r2, r1
 800911e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009122:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009126:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800912e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	f003 030f 	and.w	r3, r3, #15
 8009138:	2101      	movs	r1, #1
 800913a:	fa01 f303 	lsl.w	r3, r1, r3
 800913e:	041b      	lsls	r3, r3, #16
 8009140:	43db      	mvns	r3, r3
 8009142:	68f9      	ldr	r1, [r7, #12]
 8009144:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009148:	4013      	ands	r3, r2
 800914a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009152:	69da      	ldr	r2, [r3, #28]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	f003 030f 	and.w	r3, r3, #15
 800915c:	2101      	movs	r1, #1
 800915e:	fa01 f303 	lsl.w	r3, r1, r3
 8009162:	041b      	lsls	r3, r3, #16
 8009164:	43db      	mvns	r3, r3
 8009166:	68f9      	ldr	r1, [r7, #12]
 8009168:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800916c:	4013      	ands	r3, r2
 800916e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	015a      	lsls	r2, r3, #5
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	4413      	add	r3, r2
 8009178:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	0159      	lsls	r1, r3, #5
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	440b      	add	r3, r1
 8009186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800918a:	4619      	mov	r1, r3
 800918c:	4b05      	ldr	r3, [pc, #20]	@ (80091a4 <USB_DeactivateEndpoint+0x1b4>)
 800918e:	4013      	ands	r3, r2
 8009190:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009192:	2300      	movs	r3, #0
}
 8009194:	4618      	mov	r0, r3
 8009196:	3714      	adds	r7, #20
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	ec337800 	.word	0xec337800
 80091a4:	eff37800 	.word	0xeff37800

080091a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b08a      	sub	sp, #40	@ 0x28
 80091ac:	af02      	add	r7, sp, #8
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	4613      	mov	r3, r2
 80091b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	785b      	ldrb	r3, [r3, #1]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	f040 817f 	bne.w	80094c8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d132      	bne.n	8009238 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	015a      	lsls	r2, r3, #5
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	4413      	add	r3, r2
 80091da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	69ba      	ldr	r2, [r7, #24]
 80091e2:	0151      	lsls	r1, r2, #5
 80091e4:	69fa      	ldr	r2, [r7, #28]
 80091e6:	440a      	add	r2, r1
 80091e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091ec:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80091f0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80091f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	015a      	lsls	r2, r3, #5
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	4413      	add	r3, r2
 80091fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	69ba      	ldr	r2, [r7, #24]
 8009206:	0151      	lsls	r1, r2, #5
 8009208:	69fa      	ldr	r2, [r7, #28]
 800920a:	440a      	add	r2, r1
 800920c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009210:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009214:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	015a      	lsls	r2, r3, #5
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	4413      	add	r3, r2
 800921e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	69ba      	ldr	r2, [r7, #24]
 8009226:	0151      	lsls	r1, r2, #5
 8009228:	69fa      	ldr	r2, [r7, #28]
 800922a:	440a      	add	r2, r1
 800922c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009230:	0cdb      	lsrs	r3, r3, #19
 8009232:	04db      	lsls	r3, r3, #19
 8009234:	6113      	str	r3, [r2, #16]
 8009236:	e097      	b.n	8009368 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	4413      	add	r3, r2
 8009240:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	69ba      	ldr	r2, [r7, #24]
 8009248:	0151      	lsls	r1, r2, #5
 800924a:	69fa      	ldr	r2, [r7, #28]
 800924c:	440a      	add	r2, r1
 800924e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009252:	0cdb      	lsrs	r3, r3, #19
 8009254:	04db      	lsls	r3, r3, #19
 8009256:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	4413      	add	r3, r2
 8009260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	0151      	lsls	r1, r2, #5
 800926a:	69fa      	ldr	r2, [r7, #28]
 800926c:	440a      	add	r2, r1
 800926e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009272:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009276:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800927a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d11a      	bne.n	80092b8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	691a      	ldr	r2, [r3, #16]
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	429a      	cmp	r2, r3
 800928c:	d903      	bls.n	8009296 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	689a      	ldr	r2, [r3, #8]
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	4413      	add	r3, r2
 800929e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	69ba      	ldr	r2, [r7, #24]
 80092a6:	0151      	lsls	r1, r2, #5
 80092a8:	69fa      	ldr	r2, [r7, #28]
 80092aa:	440a      	add	r2, r1
 80092ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80092b4:	6113      	str	r3, [r2, #16]
 80092b6:	e044      	b.n	8009342 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	691a      	ldr	r2, [r3, #16]
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	4413      	add	r3, r2
 80092c2:	1e5a      	subs	r2, r3, #1
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80092cc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	015a      	lsls	r2, r3, #5
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	4413      	add	r3, r2
 80092d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092da:	691a      	ldr	r2, [r3, #16]
 80092dc:	8afb      	ldrh	r3, [r7, #22]
 80092de:	04d9      	lsls	r1, r3, #19
 80092e0:	4ba4      	ldr	r3, [pc, #656]	@ (8009574 <USB_EPStartXfer+0x3cc>)
 80092e2:	400b      	ands	r3, r1
 80092e4:	69b9      	ldr	r1, [r7, #24]
 80092e6:	0148      	lsls	r0, r1, #5
 80092e8:	69f9      	ldr	r1, [r7, #28]
 80092ea:	4401      	add	r1, r0
 80092ec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80092f0:	4313      	orrs	r3, r2
 80092f2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	791b      	ldrb	r3, [r3, #4]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d122      	bne.n	8009342 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	015a      	lsls	r2, r3, #5
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	4413      	add	r3, r2
 8009304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	69ba      	ldr	r2, [r7, #24]
 800930c:	0151      	lsls	r1, r2, #5
 800930e:	69fa      	ldr	r2, [r7, #28]
 8009310:	440a      	add	r2, r1
 8009312:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009316:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800931a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	015a      	lsls	r2, r3, #5
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	4413      	add	r3, r2
 8009324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009328:	691a      	ldr	r2, [r3, #16]
 800932a:	8afb      	ldrh	r3, [r7, #22]
 800932c:	075b      	lsls	r3, r3, #29
 800932e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009332:	69b9      	ldr	r1, [r7, #24]
 8009334:	0148      	lsls	r0, r1, #5
 8009336:	69f9      	ldr	r1, [r7, #28]
 8009338:	4401      	add	r1, r0
 800933a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800933e:	4313      	orrs	r3, r2
 8009340:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	015a      	lsls	r2, r3, #5
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	4413      	add	r3, r2
 800934a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800934e:	691a      	ldr	r2, [r3, #16]
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009358:	69b9      	ldr	r1, [r7, #24]
 800935a:	0148      	lsls	r0, r1, #5
 800935c:	69f9      	ldr	r1, [r7, #28]
 800935e:	4401      	add	r1, r0
 8009360:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009364:	4313      	orrs	r3, r2
 8009366:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009368:	79fb      	ldrb	r3, [r7, #7]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d14b      	bne.n	8009406 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	69db      	ldr	r3, [r3, #28]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d009      	beq.n	800938a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	015a      	lsls	r2, r3, #5
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	4413      	add	r3, r2
 800937e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009382:	461a      	mov	r2, r3
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	69db      	ldr	r3, [r3, #28]
 8009388:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	791b      	ldrb	r3, [r3, #4]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d128      	bne.n	80093e4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d110      	bne.n	80093c4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	015a      	lsls	r2, r3, #5
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	4413      	add	r3, r2
 80093aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	69ba      	ldr	r2, [r7, #24]
 80093b2:	0151      	lsls	r1, r2, #5
 80093b4:	69fa      	ldr	r2, [r7, #28]
 80093b6:	440a      	add	r2, r1
 80093b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80093c0:	6013      	str	r3, [r2, #0]
 80093c2:	e00f      	b.n	80093e4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	015a      	lsls	r2, r3, #5
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	4413      	add	r3, r2
 80093cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	69ba      	ldr	r2, [r7, #24]
 80093d4:	0151      	lsls	r1, r2, #5
 80093d6:	69fa      	ldr	r2, [r7, #28]
 80093d8:	440a      	add	r2, r1
 80093da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093e2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	015a      	lsls	r2, r3, #5
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	4413      	add	r3, r2
 80093ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	69ba      	ldr	r2, [r7, #24]
 80093f4:	0151      	lsls	r1, r2, #5
 80093f6:	69fa      	ldr	r2, [r7, #28]
 80093f8:	440a      	add	r2, r1
 80093fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093fe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009402:	6013      	str	r3, [r2, #0]
 8009404:	e166      	b.n	80096d4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	015a      	lsls	r2, r3, #5
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	4413      	add	r3, r2
 800940e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	69ba      	ldr	r2, [r7, #24]
 8009416:	0151      	lsls	r1, r2, #5
 8009418:	69fa      	ldr	r2, [r7, #28]
 800941a:	440a      	add	r2, r1
 800941c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009420:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009424:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	791b      	ldrb	r3, [r3, #4]
 800942a:	2b01      	cmp	r3, #1
 800942c:	d015      	beq.n	800945a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	2b00      	cmp	r3, #0
 8009434:	f000 814e 	beq.w	80096d4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800943e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	f003 030f 	and.w	r3, r3, #15
 8009448:	2101      	movs	r1, #1
 800944a:	fa01 f303 	lsl.w	r3, r1, r3
 800944e:	69f9      	ldr	r1, [r7, #28]
 8009450:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009454:	4313      	orrs	r3, r2
 8009456:	634b      	str	r3, [r1, #52]	@ 0x34
 8009458:	e13c      	b.n	80096d4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009466:	2b00      	cmp	r3, #0
 8009468:	d110      	bne.n	800948c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	015a      	lsls	r2, r3, #5
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	4413      	add	r3, r2
 8009472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	69ba      	ldr	r2, [r7, #24]
 800947a:	0151      	lsls	r1, r2, #5
 800947c:	69fa      	ldr	r2, [r7, #28]
 800947e:	440a      	add	r2, r1
 8009480:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009484:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009488:	6013      	str	r3, [r2, #0]
 800948a:	e00f      	b.n	80094ac <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	015a      	lsls	r2, r3, #5
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	4413      	add	r3, r2
 8009494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	69ba      	ldr	r2, [r7, #24]
 800949c:	0151      	lsls	r1, r2, #5
 800949e:	69fa      	ldr	r2, [r7, #28]
 80094a0:	440a      	add	r2, r1
 80094a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094aa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	68d9      	ldr	r1, [r3, #12]
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	781a      	ldrb	r2, [r3, #0]
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	b298      	uxth	r0, r3
 80094ba:	79fb      	ldrb	r3, [r7, #7]
 80094bc:	9300      	str	r3, [sp, #0]
 80094be:	4603      	mov	r3, r0
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f000 f9b9 	bl	8009838 <USB_WritePacket>
 80094c6:	e105      	b.n	80096d4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	015a      	lsls	r2, r3, #5
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	4413      	add	r3, r2
 80094d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	69ba      	ldr	r2, [r7, #24]
 80094d8:	0151      	lsls	r1, r2, #5
 80094da:	69fa      	ldr	r2, [r7, #28]
 80094dc:	440a      	add	r2, r1
 80094de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094e2:	0cdb      	lsrs	r3, r3, #19
 80094e4:	04db      	lsls	r3, r3, #19
 80094e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	015a      	lsls	r2, r3, #5
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	4413      	add	r3, r2
 80094f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	69ba      	ldr	r2, [r7, #24]
 80094f8:	0151      	lsls	r1, r2, #5
 80094fa:	69fa      	ldr	r2, [r7, #28]
 80094fc:	440a      	add	r2, r1
 80094fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009502:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009506:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800950a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d132      	bne.n	8009578 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d003      	beq.n	8009522 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	689a      	ldr	r2, [r3, #8]
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	689a      	ldr	r2, [r3, #8]
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	015a      	lsls	r2, r3, #5
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	4413      	add	r3, r2
 8009532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009536:	691a      	ldr	r2, [r3, #16]
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	6a1b      	ldr	r3, [r3, #32]
 800953c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009540:	69b9      	ldr	r1, [r7, #24]
 8009542:	0148      	lsls	r0, r1, #5
 8009544:	69f9      	ldr	r1, [r7, #28]
 8009546:	4401      	add	r1, r0
 8009548:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800954c:	4313      	orrs	r3, r2
 800954e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	015a      	lsls	r2, r3, #5
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	4413      	add	r3, r2
 8009558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	69ba      	ldr	r2, [r7, #24]
 8009560:	0151      	lsls	r1, r2, #5
 8009562:	69fa      	ldr	r2, [r7, #28]
 8009564:	440a      	add	r2, r1
 8009566:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800956a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800956e:	6113      	str	r3, [r2, #16]
 8009570:	e062      	b.n	8009638 <USB_EPStartXfer+0x490>
 8009572:	bf00      	nop
 8009574:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d123      	bne.n	80095c8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	015a      	lsls	r2, r3, #5
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	4413      	add	r3, r2
 8009588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800958c:	691a      	ldr	r2, [r3, #16]
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009596:	69b9      	ldr	r1, [r7, #24]
 8009598:	0148      	lsls	r0, r1, #5
 800959a:	69f9      	ldr	r1, [r7, #28]
 800959c:	4401      	add	r1, r0
 800959e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80095a2:	4313      	orrs	r3, r2
 80095a4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	015a      	lsls	r2, r3, #5
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	4413      	add	r3, r2
 80095ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	69ba      	ldr	r2, [r7, #24]
 80095b6:	0151      	lsls	r1, r2, #5
 80095b8:	69fa      	ldr	r2, [r7, #28]
 80095ba:	440a      	add	r2, r1
 80095bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80095c4:	6113      	str	r3, [r2, #16]
 80095c6:	e037      	b.n	8009638 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	691a      	ldr	r2, [r3, #16]
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	4413      	add	r3, r2
 80095d2:	1e5a      	subs	r2, r3, #1
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80095dc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	8afa      	ldrh	r2, [r7, #22]
 80095e4:	fb03 f202 	mul.w	r2, r3, r2
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095f8:	691a      	ldr	r2, [r3, #16]
 80095fa:	8afb      	ldrh	r3, [r7, #22]
 80095fc:	04d9      	lsls	r1, r3, #19
 80095fe:	4b38      	ldr	r3, [pc, #224]	@ (80096e0 <USB_EPStartXfer+0x538>)
 8009600:	400b      	ands	r3, r1
 8009602:	69b9      	ldr	r1, [r7, #24]
 8009604:	0148      	lsls	r0, r1, #5
 8009606:	69f9      	ldr	r1, [r7, #28]
 8009608:	4401      	add	r1, r0
 800960a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800960e:	4313      	orrs	r3, r2
 8009610:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	015a      	lsls	r2, r3, #5
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	4413      	add	r3, r2
 800961a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800961e:	691a      	ldr	r2, [r3, #16]
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	6a1b      	ldr	r3, [r3, #32]
 8009624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009628:	69b9      	ldr	r1, [r7, #24]
 800962a:	0148      	lsls	r0, r1, #5
 800962c:	69f9      	ldr	r1, [r7, #28]
 800962e:	4401      	add	r1, r0
 8009630:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009634:	4313      	orrs	r3, r2
 8009636:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009638:	79fb      	ldrb	r3, [r7, #7]
 800963a:	2b01      	cmp	r3, #1
 800963c:	d10d      	bne.n	800965a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d009      	beq.n	800965a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	68d9      	ldr	r1, [r3, #12]
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	015a      	lsls	r2, r3, #5
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	4413      	add	r3, r2
 8009652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009656:	460a      	mov	r2, r1
 8009658:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	791b      	ldrb	r3, [r3, #4]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d128      	bne.n	80096b4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800966e:	2b00      	cmp	r3, #0
 8009670:	d110      	bne.n	8009694 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	015a      	lsls	r2, r3, #5
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	4413      	add	r3, r2
 800967a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	69ba      	ldr	r2, [r7, #24]
 8009682:	0151      	lsls	r1, r2, #5
 8009684:	69fa      	ldr	r2, [r7, #28]
 8009686:	440a      	add	r2, r1
 8009688:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800968c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009690:	6013      	str	r3, [r2, #0]
 8009692:	e00f      	b.n	80096b4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	015a      	lsls	r2, r3, #5
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	4413      	add	r3, r2
 800969c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	69ba      	ldr	r2, [r7, #24]
 80096a4:	0151      	lsls	r1, r2, #5
 80096a6:	69fa      	ldr	r2, [r7, #28]
 80096a8:	440a      	add	r2, r1
 80096aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	015a      	lsls	r2, r3, #5
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	4413      	add	r3, r2
 80096bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	69ba      	ldr	r2, [r7, #24]
 80096c4:	0151      	lsls	r1, r2, #5
 80096c6:	69fa      	ldr	r2, [r7, #28]
 80096c8:	440a      	add	r2, r1
 80096ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096ce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80096d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3720      	adds	r7, #32
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	1ff80000 	.word	0x1ff80000

080096e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b087      	sub	sp, #28
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80096ee:	2300      	movs	r3, #0
 80096f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80096f2:	2300      	movs	r3, #0
 80096f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	785b      	ldrb	r3, [r3, #1]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d14a      	bne.n	8009798 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	015a      	lsls	r2, r3, #5
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	4413      	add	r3, r2
 800970c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009716:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800971a:	f040 8086 	bne.w	800982a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	015a      	lsls	r2, r3, #5
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	4413      	add	r3, r2
 8009728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	683a      	ldr	r2, [r7, #0]
 8009730:	7812      	ldrb	r2, [r2, #0]
 8009732:	0151      	lsls	r1, r2, #5
 8009734:	693a      	ldr	r2, [r7, #16]
 8009736:	440a      	add	r2, r1
 8009738:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800973c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009740:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	015a      	lsls	r2, r3, #5
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	4413      	add	r3, r2
 800974c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	683a      	ldr	r2, [r7, #0]
 8009754:	7812      	ldrb	r2, [r2, #0]
 8009756:	0151      	lsls	r1, r2, #5
 8009758:	693a      	ldr	r2, [r7, #16]
 800975a:	440a      	add	r2, r1
 800975c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009760:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009764:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	3301      	adds	r3, #1
 800976a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009772:	4293      	cmp	r3, r2
 8009774:	d902      	bls.n	800977c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	75fb      	strb	r3, [r7, #23]
          break;
 800977a:	e056      	b.n	800982a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	015a      	lsls	r2, r3, #5
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	4413      	add	r3, r2
 8009786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009790:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009794:	d0e7      	beq.n	8009766 <USB_EPStopXfer+0x82>
 8009796:	e048      	b.n	800982a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	015a      	lsls	r2, r3, #5
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	4413      	add	r3, r2
 80097a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097b0:	d13b      	bne.n	800982a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	683a      	ldr	r2, [r7, #0]
 80097c4:	7812      	ldrb	r2, [r2, #0]
 80097c6:	0151      	lsls	r1, r2, #5
 80097c8:	693a      	ldr	r2, [r7, #16]
 80097ca:	440a      	add	r2, r1
 80097cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80097d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	015a      	lsls	r2, r3, #5
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	4413      	add	r3, r2
 80097e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	683a      	ldr	r2, [r7, #0]
 80097e8:	7812      	ldrb	r2, [r2, #0]
 80097ea:	0151      	lsls	r1, r2, #5
 80097ec:	693a      	ldr	r2, [r7, #16]
 80097ee:	440a      	add	r2, r1
 80097f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80097f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	3301      	adds	r3, #1
 80097fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009806:	4293      	cmp	r3, r2
 8009808:	d902      	bls.n	8009810 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	75fb      	strb	r3, [r7, #23]
          break;
 800980e:	e00c      	b.n	800982a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	015a      	lsls	r2, r3, #5
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	4413      	add	r3, r2
 800981a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009824:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009828:	d0e7      	beq.n	80097fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800982a:	7dfb      	ldrb	r3, [r7, #23]
}
 800982c:	4618      	mov	r0, r3
 800982e:	371c      	adds	r7, #28
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009838:	b480      	push	{r7}
 800983a:	b089      	sub	sp, #36	@ 0x24
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	4611      	mov	r1, r2
 8009844:	461a      	mov	r2, r3
 8009846:	460b      	mov	r3, r1
 8009848:	71fb      	strb	r3, [r7, #7]
 800984a:	4613      	mov	r3, r2
 800984c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009856:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800985a:	2b00      	cmp	r3, #0
 800985c:	d123      	bne.n	80098a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800985e:	88bb      	ldrh	r3, [r7, #4]
 8009860:	3303      	adds	r3, #3
 8009862:	089b      	lsrs	r3, r3, #2
 8009864:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009866:	2300      	movs	r3, #0
 8009868:	61bb      	str	r3, [r7, #24]
 800986a:	e018      	b.n	800989e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800986c:	79fb      	ldrb	r3, [r7, #7]
 800986e:	031a      	lsls	r2, r3, #12
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	4413      	add	r3, r2
 8009874:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009878:	461a      	mov	r2, r3
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	3301      	adds	r3, #1
 8009884:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	3301      	adds	r3, #1
 800988a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	3301      	adds	r3, #1
 8009890:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	3301      	adds	r3, #1
 8009896:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	3301      	adds	r3, #1
 800989c:	61bb      	str	r3, [r7, #24]
 800989e:	69ba      	ldr	r2, [r7, #24]
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d3e2      	bcc.n	800986c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3724      	adds	r7, #36	@ 0x24
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b08b      	sub	sp, #44	@ 0x2c
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	4613      	mov	r3, r2
 80098c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80098ca:	88fb      	ldrh	r3, [r7, #6]
 80098cc:	089b      	lsrs	r3, r3, #2
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80098d2:	88fb      	ldrh	r3, [r7, #6]
 80098d4:	f003 0303 	and.w	r3, r3, #3
 80098d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80098da:	2300      	movs	r3, #0
 80098dc:	623b      	str	r3, [r7, #32]
 80098de:	e014      	b.n	800990a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80098ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ee:	3301      	adds	r3, #1
 80098f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80098f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f4:	3301      	adds	r3, #1
 80098f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80098f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098fa:	3301      	adds	r3, #1
 80098fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80098fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009900:	3301      	adds	r3, #1
 8009902:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	3301      	adds	r3, #1
 8009908:	623b      	str	r3, [r7, #32]
 800990a:	6a3a      	ldr	r2, [r7, #32]
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	429a      	cmp	r2, r3
 8009910:	d3e6      	bcc.n	80098e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009912:	8bfb      	ldrh	r3, [r7, #30]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d01e      	beq.n	8009956 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009918:	2300      	movs	r3, #0
 800991a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009922:	461a      	mov	r2, r3
 8009924:	f107 0310 	add.w	r3, r7, #16
 8009928:	6812      	ldr	r2, [r2, #0]
 800992a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	6a3b      	ldr	r3, [r7, #32]
 8009930:	b2db      	uxtb	r3, r3
 8009932:	00db      	lsls	r3, r3, #3
 8009934:	fa22 f303 	lsr.w	r3, r2, r3
 8009938:	b2da      	uxtb	r2, r3
 800993a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993c:	701a      	strb	r2, [r3, #0]
      i++;
 800993e:	6a3b      	ldr	r3, [r7, #32]
 8009940:	3301      	adds	r3, #1
 8009942:	623b      	str	r3, [r7, #32]
      pDest++;
 8009944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009946:	3301      	adds	r3, #1
 8009948:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800994a:	8bfb      	ldrh	r3, [r7, #30]
 800994c:	3b01      	subs	r3, #1
 800994e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009950:	8bfb      	ldrh	r3, [r7, #30]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1ea      	bne.n	800992c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009958:	4618      	mov	r0, r3
 800995a:	372c      	adds	r7, #44	@ 0x2c
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	785b      	ldrb	r3, [r3, #1]
 800997c:	2b01      	cmp	r3, #1
 800997e:	d12c      	bne.n	80099da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	015a      	lsls	r2, r3, #5
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	4413      	add	r3, r2
 8009988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	db12      	blt.n	80099b8 <USB_EPSetStall+0x54>
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00f      	beq.n	80099b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	015a      	lsls	r2, r3, #5
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	4413      	add	r3, r2
 80099a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	68ba      	ldr	r2, [r7, #8]
 80099a8:	0151      	lsls	r1, r2, #5
 80099aa:	68fa      	ldr	r2, [r7, #12]
 80099ac:	440a      	add	r2, r1
 80099ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80099b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	015a      	lsls	r2, r3, #5
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	4413      	add	r3, r2
 80099c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	0151      	lsls	r1, r2, #5
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	440a      	add	r2, r1
 80099ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80099d6:	6013      	str	r3, [r2, #0]
 80099d8:	e02b      	b.n	8009a32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	015a      	lsls	r2, r3, #5
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	4413      	add	r3, r2
 80099e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	db12      	blt.n	8009a12 <USB_EPSetStall+0xae>
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00f      	beq.n	8009a12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	015a      	lsls	r2, r3, #5
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	4413      	add	r3, r2
 80099fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	68ba      	ldr	r2, [r7, #8]
 8009a02:	0151      	lsls	r1, r2, #5
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	440a      	add	r2, r1
 8009a08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a0c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009a10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	015a      	lsls	r2, r3, #5
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	4413      	add	r3, r2
 8009a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	68ba      	ldr	r2, [r7, #8]
 8009a22:	0151      	lsls	r1, r2, #5
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	440a      	add	r2, r1
 8009a28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009a30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3714      	adds	r7, #20
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b085      	sub	sp, #20
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	785b      	ldrb	r3, [r3, #1]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d128      	bne.n	8009aae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	015a      	lsls	r2, r3, #5
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	4413      	add	r3, r2
 8009a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	0151      	lsls	r1, r2, #5
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	440a      	add	r2, r1
 8009a72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009a7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	791b      	ldrb	r3, [r3, #4]
 8009a80:	2b03      	cmp	r3, #3
 8009a82:	d003      	beq.n	8009a8c <USB_EPClearStall+0x4c>
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	791b      	ldrb	r3, [r3, #4]
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d138      	bne.n	8009afe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	015a      	lsls	r2, r3, #5
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	4413      	add	r3, r2
 8009a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68ba      	ldr	r2, [r7, #8]
 8009a9c:	0151      	lsls	r1, r2, #5
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	440a      	add	r2, r1
 8009aa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009aaa:	6013      	str	r3, [r2, #0]
 8009aac:	e027      	b.n	8009afe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	015a      	lsls	r2, r3, #5
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68ba      	ldr	r2, [r7, #8]
 8009abe:	0151      	lsls	r1, r2, #5
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	440a      	add	r2, r1
 8009ac4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ac8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009acc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	791b      	ldrb	r3, [r3, #4]
 8009ad2:	2b03      	cmp	r3, #3
 8009ad4:	d003      	beq.n	8009ade <USB_EPClearStall+0x9e>
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	791b      	ldrb	r3, [r3, #4]
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d10f      	bne.n	8009afe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	015a      	lsls	r2, r3, #5
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	0151      	lsls	r1, r2, #5
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	440a      	add	r2, r1
 8009af4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009afc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3714      	adds	r7, #20
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	460b      	mov	r3, r1
 8009b16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b2a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009b2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	78fb      	ldrb	r3, [r7, #3]
 8009b3a:	011b      	lsls	r3, r3, #4
 8009b3c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009b40:	68f9      	ldr	r1, [r7, #12]
 8009b42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b46:	4313      	orrs	r3, r2
 8009b48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3714      	adds	r7, #20
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009b72:	f023 0303 	bic.w	r3, r3, #3
 8009b76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b86:	f023 0302 	bic.w	r3, r3, #2
 8009b8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3714      	adds	r7, #20
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b9a:	b480      	push	{r7}
 8009b9c:	b085      	sub	sp, #20
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009bb4:	f023 0303 	bic.w	r3, r3, #3
 8009bb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009bc8:	f043 0302 	orr.w	r3, r3, #2
 8009bcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3714      	adds	r7, #20
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b085      	sub	sp, #20
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	695b      	ldr	r3, [r3, #20]
 8009be8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	699b      	ldr	r3, [r3, #24]
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	4013      	ands	r3, r2
 8009bf2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3714      	adds	r7, #20
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c02:	b480      	push	{r7}
 8009c04:	b085      	sub	sp, #20
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c1e:	69db      	ldr	r3, [r3, #28]
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	4013      	ands	r3, r2
 8009c24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	0c1b      	lsrs	r3, r3, #16
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c36:	b480      	push	{r7}
 8009c38:	b085      	sub	sp, #20
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c48:	699b      	ldr	r3, [r3, #24]
 8009c4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c52:	69db      	ldr	r3, [r3, #28]
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	4013      	ands	r3, r2
 8009c58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	b29b      	uxth	r3, r3
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3714      	adds	r7, #20
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr

08009c6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009c6a:	b480      	push	{r7}
 8009c6c:	b085      	sub	sp, #20
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
 8009c72:	460b      	mov	r3, r1
 8009c74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009c7a:	78fb      	ldrb	r3, [r7, #3]
 8009c7c:	015a      	lsls	r2, r3, #5
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	4413      	add	r3, r2
 8009c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c90:	695b      	ldr	r3, [r3, #20]
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	4013      	ands	r3, r2
 8009c96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009c98:	68bb      	ldr	r3, [r7, #8]
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3714      	adds	r7, #20
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr

08009ca6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ca6:	b480      	push	{r7}
 8009ca8:	b087      	sub	sp, #28
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	460b      	mov	r3, r1
 8009cb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cbc:	691b      	ldr	r3, [r3, #16]
 8009cbe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cc8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009cca:	78fb      	ldrb	r3, [r7, #3]
 8009ccc:	f003 030f 	and.w	r3, r3, #15
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8009cd6:	01db      	lsls	r3, r3, #7
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	693a      	ldr	r2, [r7, #16]
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009ce0:	78fb      	ldrb	r3, [r7, #3]
 8009ce2:	015a      	lsls	r2, r3, #5
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	693a      	ldr	r2, [r7, #16]
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009cf4:	68bb      	ldr	r3, [r7, #8]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	371c      	adds	r7, #28
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009d02:	b480      	push	{r7}
 8009d04:	b083      	sub	sp, #12
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	695b      	ldr	r3, [r3, #20]
 8009d0e:	f003 0301 	and.w	r3, r3, #1
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	370c      	adds	r7, #12
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr

08009d1e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b085      	sub	sp, #20
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d38:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009d3c:	f023 0307 	bic.w	r3, r3, #7
 8009d40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3714      	adds	r7, #20
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b087      	sub	sp, #28
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	607a      	str	r2, [r7, #4]
 8009d70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	333c      	adds	r3, #60	@ 0x3c
 8009d7a:	3304      	adds	r3, #4
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	4a26      	ldr	r2, [pc, #152]	@ (8009e1c <USB_EP0_OutStart+0xb8>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d90a      	bls.n	8009d9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d98:	d101      	bne.n	8009d9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	e037      	b.n	8009e0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009da4:	461a      	mov	r2, r3
 8009da6:	2300      	movs	r3, #0
 8009da8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	697a      	ldr	r2, [r7, #20]
 8009db4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009db8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009dbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dcc:	f043 0318 	orr.w	r3, r3, #24
 8009dd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	697a      	ldr	r2, [r7, #20]
 8009ddc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009de0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009de4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009de6:	7afb      	ldrb	r3, [r7, #11]
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d10f      	bne.n	8009e0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009df2:	461a      	mov	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	697a      	ldr	r2, [r7, #20]
 8009e02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e06:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009e0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	371c      	adds	r7, #28
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	4f54300a 	.word	0x4f54300a

08009e20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e38:	d901      	bls.n	8009e3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009e3a:	2303      	movs	r3, #3
 8009e3c:	e01b      	b.n	8009e76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	daf2      	bge.n	8009e2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009e46:	2300      	movs	r3, #0
 8009e48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	f043 0201 	orr.w	r2, r3, #1
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e62:	d901      	bls.n	8009e68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009e64:	2303      	movs	r3, #3
 8009e66:	e006      	b.n	8009e76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	f003 0301 	and.w	r3, r3, #1
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d0f0      	beq.n	8009e56 <USB_CoreReset+0x36>

  return HAL_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
	...

08009e84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009e90:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009e94:	f002 fcac 	bl	800c7f0 <USBD_static_malloc>
 8009e98:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d109      	bne.n	8009eb4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	32b0      	adds	r2, #176	@ 0xb0
 8009eaa:	2100      	movs	r1, #0
 8009eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009eb0:	2302      	movs	r3, #2
 8009eb2:	e0d4      	b.n	800a05e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009eb4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009eb8:	2100      	movs	r1, #0
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f003 fb25 	bl	800d50a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	32b0      	adds	r2, #176	@ 0xb0
 8009eca:	68f9      	ldr	r1, [r7, #12]
 8009ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	32b0      	adds	r2, #176	@ 0xb0
 8009eda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	7c1b      	ldrb	r3, [r3, #16]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d138      	bne.n	8009f5e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009eec:	4b5e      	ldr	r3, [pc, #376]	@ (800a068 <USBD_CDC_Init+0x1e4>)
 8009eee:	7819      	ldrb	r1, [r3, #0]
 8009ef0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ef4:	2202      	movs	r2, #2
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f002 fb57 	bl	800c5aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009efc:	4b5a      	ldr	r3, [pc, #360]	@ (800a068 <USBD_CDC_Init+0x1e4>)
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	f003 020f 	and.w	r2, r3, #15
 8009f04:	6879      	ldr	r1, [r7, #4]
 8009f06:	4613      	mov	r3, r2
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	4413      	add	r3, r2
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	440b      	add	r3, r1
 8009f10:	3324      	adds	r3, #36	@ 0x24
 8009f12:	2201      	movs	r2, #1
 8009f14:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009f16:	4b55      	ldr	r3, [pc, #340]	@ (800a06c <USBD_CDC_Init+0x1e8>)
 8009f18:	7819      	ldrb	r1, [r3, #0]
 8009f1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f1e:	2202      	movs	r2, #2
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f002 fb42 	bl	800c5aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009f26:	4b51      	ldr	r3, [pc, #324]	@ (800a06c <USBD_CDC_Init+0x1e8>)
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	f003 020f 	and.w	r2, r3, #15
 8009f2e:	6879      	ldr	r1, [r7, #4]
 8009f30:	4613      	mov	r3, r2
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	4413      	add	r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	440b      	add	r3, r1
 8009f3a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009f3e:	2201      	movs	r2, #1
 8009f40:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009f42:	4b4b      	ldr	r3, [pc, #300]	@ (800a070 <USBD_CDC_Init+0x1ec>)
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	f003 020f 	and.w	r2, r3, #15
 8009f4a:	6879      	ldr	r1, [r7, #4]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	4413      	add	r3, r2
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	440b      	add	r3, r1
 8009f56:	3326      	adds	r3, #38	@ 0x26
 8009f58:	2210      	movs	r2, #16
 8009f5a:	801a      	strh	r2, [r3, #0]
 8009f5c:	e035      	b.n	8009fca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009f5e:	4b42      	ldr	r3, [pc, #264]	@ (800a068 <USBD_CDC_Init+0x1e4>)
 8009f60:	7819      	ldrb	r1, [r3, #0]
 8009f62:	2340      	movs	r3, #64	@ 0x40
 8009f64:	2202      	movs	r2, #2
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f002 fb1f 	bl	800c5aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009f6c:	4b3e      	ldr	r3, [pc, #248]	@ (800a068 <USBD_CDC_Init+0x1e4>)
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	f003 020f 	and.w	r2, r3, #15
 8009f74:	6879      	ldr	r1, [r7, #4]
 8009f76:	4613      	mov	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	4413      	add	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	440b      	add	r3, r1
 8009f80:	3324      	adds	r3, #36	@ 0x24
 8009f82:	2201      	movs	r2, #1
 8009f84:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009f86:	4b39      	ldr	r3, [pc, #228]	@ (800a06c <USBD_CDC_Init+0x1e8>)
 8009f88:	7819      	ldrb	r1, [r3, #0]
 8009f8a:	2340      	movs	r3, #64	@ 0x40
 8009f8c:	2202      	movs	r2, #2
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f002 fb0b 	bl	800c5aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009f94:	4b35      	ldr	r3, [pc, #212]	@ (800a06c <USBD_CDC_Init+0x1e8>)
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	f003 020f 	and.w	r2, r3, #15
 8009f9c:	6879      	ldr	r1, [r7, #4]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	4413      	add	r3, r2
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	440b      	add	r3, r1
 8009fa8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009fac:	2201      	movs	r2, #1
 8009fae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009fb0:	4b2f      	ldr	r3, [pc, #188]	@ (800a070 <USBD_CDC_Init+0x1ec>)
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	f003 020f 	and.w	r2, r3, #15
 8009fb8:	6879      	ldr	r1, [r7, #4]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	4413      	add	r3, r2
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	440b      	add	r3, r1
 8009fc4:	3326      	adds	r3, #38	@ 0x26
 8009fc6:	2210      	movs	r2, #16
 8009fc8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009fca:	4b29      	ldr	r3, [pc, #164]	@ (800a070 <USBD_CDC_Init+0x1ec>)
 8009fcc:	7819      	ldrb	r1, [r3, #0]
 8009fce:	2308      	movs	r3, #8
 8009fd0:	2203      	movs	r2, #3
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f002 fae9 	bl	800c5aa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009fd8:	4b25      	ldr	r3, [pc, #148]	@ (800a070 <USBD_CDC_Init+0x1ec>)
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	f003 020f 	and.w	r2, r3, #15
 8009fe0:	6879      	ldr	r1, [r7, #4]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4413      	add	r3, r2
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	440b      	add	r3, r1
 8009fec:	3324      	adds	r3, #36	@ 0x24
 8009fee:	2201      	movs	r2, #1
 8009ff0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	33b0      	adds	r3, #176	@ 0xb0
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4413      	add	r3, r2
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2200      	movs	r2, #0
 800a012:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a024:	2b00      	cmp	r3, #0
 800a026:	d101      	bne.n	800a02c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a028:	2302      	movs	r3, #2
 800a02a:	e018      	b.n	800a05e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	7c1b      	ldrb	r3, [r3, #16]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d10a      	bne.n	800a04a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a034:	4b0d      	ldr	r3, [pc, #52]	@ (800a06c <USBD_CDC_Init+0x1e8>)
 800a036:	7819      	ldrb	r1, [r3, #0]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a03e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f002 fba0 	bl	800c788 <USBD_LL_PrepareReceive>
 800a048:	e008      	b.n	800a05c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a04a:	4b08      	ldr	r3, [pc, #32]	@ (800a06c <USBD_CDC_Init+0x1e8>)
 800a04c:	7819      	ldrb	r1, [r3, #0]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a054:	2340      	movs	r3, #64	@ 0x40
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f002 fb96 	bl	800c788 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	20000093 	.word	0x20000093
 800a06c:	20000094 	.word	0x20000094
 800a070:	20000095 	.word	0x20000095

0800a074 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	460b      	mov	r3, r1
 800a07e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a080:	4b3a      	ldr	r3, [pc, #232]	@ (800a16c <USBD_CDC_DeInit+0xf8>)
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	4619      	mov	r1, r3
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f002 fab5 	bl	800c5f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a08c:	4b37      	ldr	r3, [pc, #220]	@ (800a16c <USBD_CDC_DeInit+0xf8>)
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	f003 020f 	and.w	r2, r3, #15
 800a094:	6879      	ldr	r1, [r7, #4]
 800a096:	4613      	mov	r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	4413      	add	r3, r2
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	440b      	add	r3, r1
 800a0a0:	3324      	adds	r3, #36	@ 0x24
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a0a6:	4b32      	ldr	r3, [pc, #200]	@ (800a170 <USBD_CDC_DeInit+0xfc>)
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f002 faa2 	bl	800c5f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a0b2:	4b2f      	ldr	r3, [pc, #188]	@ (800a170 <USBD_CDC_DeInit+0xfc>)
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	f003 020f 	and.w	r2, r3, #15
 800a0ba:	6879      	ldr	r1, [r7, #4]
 800a0bc:	4613      	mov	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	4413      	add	r3, r2
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	440b      	add	r3, r1
 800a0c6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a0ce:	4b29      	ldr	r3, [pc, #164]	@ (800a174 <USBD_CDC_DeInit+0x100>)
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f002 fa8e 	bl	800c5f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a0da:	4b26      	ldr	r3, [pc, #152]	@ (800a174 <USBD_CDC_DeInit+0x100>)
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	f003 020f 	and.w	r2, r3, #15
 800a0e2:	6879      	ldr	r1, [r7, #4]
 800a0e4:	4613      	mov	r3, r2
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	4413      	add	r3, r2
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	440b      	add	r3, r1
 800a0ee:	3324      	adds	r3, #36	@ 0x24
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a0f4:	4b1f      	ldr	r3, [pc, #124]	@ (800a174 <USBD_CDC_DeInit+0x100>)
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	f003 020f 	and.w	r2, r3, #15
 800a0fc:	6879      	ldr	r1, [r7, #4]
 800a0fe:	4613      	mov	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	440b      	add	r3, r1
 800a108:	3326      	adds	r3, #38	@ 0x26
 800a10a:	2200      	movs	r2, #0
 800a10c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	32b0      	adds	r2, #176	@ 0xb0
 800a118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d01f      	beq.n	800a160 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	33b0      	adds	r3, #176	@ 0xb0
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	4413      	add	r3, r2
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	32b0      	adds	r2, #176	@ 0xb0
 800a13e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a142:	4618      	mov	r0, r3
 800a144:	f002 fb62 	bl	800c80c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	32b0      	adds	r2, #176	@ 0xb0
 800a152:	2100      	movs	r1, #0
 800a154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	3708      	adds	r7, #8
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	20000093 	.word	0x20000093
 800a170:	20000094 	.word	0x20000094
 800a174:	20000095 	.word	0x20000095

0800a178 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b086      	sub	sp, #24
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	32b0      	adds	r2, #176	@ 0xb0
 800a18c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a190:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a192:	2300      	movs	r3, #0
 800a194:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a196:	2300      	movs	r3, #0
 800a198:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a19a:	2300      	movs	r3, #0
 800a19c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e0bf      	b.n	800a328 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d050      	beq.n	800a256 <USBD_CDC_Setup+0xde>
 800a1b4:	2b20      	cmp	r3, #32
 800a1b6:	f040 80af 	bne.w	800a318 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	88db      	ldrh	r3, [r3, #6]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d03a      	beq.n	800a238 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	b25b      	sxtb	r3, r3
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	da1b      	bge.n	800a204 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	33b0      	adds	r3, #176	@ 0xb0
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	4413      	add	r3, r2
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	683a      	ldr	r2, [r7, #0]
 800a1e0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a1e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a1e4:	683a      	ldr	r2, [r7, #0]
 800a1e6:	88d2      	ldrh	r2, [r2, #6]
 800a1e8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	88db      	ldrh	r3, [r3, #6]
 800a1ee:	2b07      	cmp	r3, #7
 800a1f0:	bf28      	it	cs
 800a1f2:	2307      	movcs	r3, #7
 800a1f4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	89fa      	ldrh	r2, [r7, #14]
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f001 fd93 	bl	800bd28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a202:	e090      	b.n	800a326 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	785a      	ldrb	r2, [r3, #1]
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	88db      	ldrh	r3, [r3, #6]
 800a212:	2b3f      	cmp	r3, #63	@ 0x3f
 800a214:	d803      	bhi.n	800a21e <USBD_CDC_Setup+0xa6>
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	88db      	ldrh	r3, [r3, #6]
 800a21a:	b2da      	uxtb	r2, r3
 800a21c:	e000      	b.n	800a220 <USBD_CDC_Setup+0xa8>
 800a21e:	2240      	movs	r2, #64	@ 0x40
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a226:	6939      	ldr	r1, [r7, #16]
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a22e:	461a      	mov	r2, r3
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f001 fda5 	bl	800bd80 <USBD_CtlPrepareRx>
      break;
 800a236:	e076      	b.n	800a326 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	33b0      	adds	r3, #176	@ 0xb0
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	4413      	add	r3, r2
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	683a      	ldr	r2, [r7, #0]
 800a24c:	7850      	ldrb	r0, [r2, #1]
 800a24e:	2200      	movs	r2, #0
 800a250:	6839      	ldr	r1, [r7, #0]
 800a252:	4798      	blx	r3
      break;
 800a254:	e067      	b.n	800a326 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	785b      	ldrb	r3, [r3, #1]
 800a25a:	2b0b      	cmp	r3, #11
 800a25c:	d851      	bhi.n	800a302 <USBD_CDC_Setup+0x18a>
 800a25e:	a201      	add	r2, pc, #4	@ (adr r2, 800a264 <USBD_CDC_Setup+0xec>)
 800a260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a264:	0800a295 	.word	0x0800a295
 800a268:	0800a311 	.word	0x0800a311
 800a26c:	0800a303 	.word	0x0800a303
 800a270:	0800a303 	.word	0x0800a303
 800a274:	0800a303 	.word	0x0800a303
 800a278:	0800a303 	.word	0x0800a303
 800a27c:	0800a303 	.word	0x0800a303
 800a280:	0800a303 	.word	0x0800a303
 800a284:	0800a303 	.word	0x0800a303
 800a288:	0800a303 	.word	0x0800a303
 800a28c:	0800a2bf 	.word	0x0800a2bf
 800a290:	0800a2e9 	.word	0x0800a2e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	2b03      	cmp	r3, #3
 800a29e:	d107      	bne.n	800a2b0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a2a0:	f107 030a 	add.w	r3, r7, #10
 800a2a4:	2202      	movs	r2, #2
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f001 fd3d 	bl	800bd28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a2ae:	e032      	b.n	800a316 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a2b0:	6839      	ldr	r1, [r7, #0]
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f001 fcbb 	bl	800bc2e <USBD_CtlError>
            ret = USBD_FAIL;
 800a2b8:	2303      	movs	r3, #3
 800a2ba:	75fb      	strb	r3, [r7, #23]
          break;
 800a2bc:	e02b      	b.n	800a316 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	2b03      	cmp	r3, #3
 800a2c8:	d107      	bne.n	800a2da <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a2ca:	f107 030d 	add.w	r3, r7, #13
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f001 fd28 	bl	800bd28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a2d8:	e01d      	b.n	800a316 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a2da:	6839      	ldr	r1, [r7, #0]
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f001 fca6 	bl	800bc2e <USBD_CtlError>
            ret = USBD_FAIL;
 800a2e2:	2303      	movs	r3, #3
 800a2e4:	75fb      	strb	r3, [r7, #23]
          break;
 800a2e6:	e016      	b.n	800a316 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	2b03      	cmp	r3, #3
 800a2f2:	d00f      	beq.n	800a314 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a2f4:	6839      	ldr	r1, [r7, #0]
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f001 fc99 	bl	800bc2e <USBD_CtlError>
            ret = USBD_FAIL;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a300:	e008      	b.n	800a314 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a302:	6839      	ldr	r1, [r7, #0]
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f001 fc92 	bl	800bc2e <USBD_CtlError>
          ret = USBD_FAIL;
 800a30a:	2303      	movs	r3, #3
 800a30c:	75fb      	strb	r3, [r7, #23]
          break;
 800a30e:	e002      	b.n	800a316 <USBD_CDC_Setup+0x19e>
          break;
 800a310:	bf00      	nop
 800a312:	e008      	b.n	800a326 <USBD_CDC_Setup+0x1ae>
          break;
 800a314:	bf00      	nop
      }
      break;
 800a316:	e006      	b.n	800a326 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a318:	6839      	ldr	r1, [r7, #0]
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f001 fc87 	bl	800bc2e <USBD_CtlError>
      ret = USBD_FAIL;
 800a320:	2303      	movs	r3, #3
 800a322:	75fb      	strb	r3, [r7, #23]
      break;
 800a324:	bf00      	nop
  }

  return (uint8_t)ret;
 800a326:	7dfb      	ldrb	r3, [r7, #23]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3718      	adds	r7, #24
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	460b      	mov	r3, r1
 800a33a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a342:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	32b0      	adds	r2, #176	@ 0xb0
 800a34e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d101      	bne.n	800a35a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a356:	2303      	movs	r3, #3
 800a358:	e065      	b.n	800a426 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	32b0      	adds	r2, #176	@ 0xb0
 800a364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a368:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a36a:	78fb      	ldrb	r3, [r7, #3]
 800a36c:	f003 020f 	and.w	r2, r3, #15
 800a370:	6879      	ldr	r1, [r7, #4]
 800a372:	4613      	mov	r3, r2
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	4413      	add	r3, r2
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	440b      	add	r3, r1
 800a37c:	3318      	adds	r3, #24
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d02f      	beq.n	800a3e4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a384:	78fb      	ldrb	r3, [r7, #3]
 800a386:	f003 020f 	and.w	r2, r3, #15
 800a38a:	6879      	ldr	r1, [r7, #4]
 800a38c:	4613      	mov	r3, r2
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	4413      	add	r3, r2
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	440b      	add	r3, r1
 800a396:	3318      	adds	r3, #24
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	78fb      	ldrb	r3, [r7, #3]
 800a39c:	f003 010f 	and.w	r1, r3, #15
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	00db      	lsls	r3, r3, #3
 800a3a6:	440b      	add	r3, r1
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	4403      	add	r3, r0
 800a3ac:	331c      	adds	r3, #28
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	fbb2 f1f3 	udiv	r1, r2, r3
 800a3b4:	fb01 f303 	mul.w	r3, r1, r3
 800a3b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d112      	bne.n	800a3e4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a3be:	78fb      	ldrb	r3, [r7, #3]
 800a3c0:	f003 020f 	and.w	r2, r3, #15
 800a3c4:	6879      	ldr	r1, [r7, #4]
 800a3c6:	4613      	mov	r3, r2
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	4413      	add	r3, r2
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	440b      	add	r3, r1
 800a3d0:	3318      	adds	r3, #24
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a3d6:	78f9      	ldrb	r1, [r7, #3]
 800a3d8:	2300      	movs	r3, #0
 800a3da:	2200      	movs	r2, #0
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f002 f9b2 	bl	800c746 <USBD_LL_Transmit>
 800a3e2:	e01f      	b.n	800a424 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	33b0      	adds	r3, #176	@ 0xb0
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	4413      	add	r3, r2
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	691b      	ldr	r3, [r3, #16]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d010      	beq.n	800a424 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	33b0      	adds	r3, #176	@ 0xb0
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	4413      	add	r3, r2
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a41a:	68ba      	ldr	r2, [r7, #8]
 800a41c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a420:	78fa      	ldrb	r2, [r7, #3]
 800a422:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b084      	sub	sp, #16
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
 800a436:	460b      	mov	r3, r1
 800a438:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	32b0      	adds	r2, #176	@ 0xb0
 800a444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a448:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	32b0      	adds	r2, #176	@ 0xb0
 800a454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d101      	bne.n	800a460 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a45c:	2303      	movs	r3, #3
 800a45e:	e01a      	b.n	800a496 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a460:	78fb      	ldrb	r3, [r7, #3]
 800a462:	4619      	mov	r1, r3
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f002 f9b0 	bl	800c7ca <USBD_LL_GetRxDataSize>
 800a46a:	4602      	mov	r2, r0
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	33b0      	adds	r3, #176	@ 0xb0
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	4413      	add	r3, r2
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a48a:	68fa      	ldr	r2, [r7, #12]
 800a48c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a490:	4611      	mov	r1, r2
 800a492:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b084      	sub	sp, #16
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	32b0      	adds	r2, #176	@ 0xb0
 800a4b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d101      	bne.n	800a4c0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	e024      	b.n	800a50a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	33b0      	adds	r3, #176	@ 0xb0
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	4413      	add	r3, r2
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d019      	beq.n	800a508 <USBD_CDC_EP0_RxReady+0x6a>
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a4da:	2bff      	cmp	r3, #255	@ 0xff
 800a4dc:	d014      	beq.n	800a508 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	33b0      	adds	r3, #176	@ 0xb0
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	4413      	add	r3, r2
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a4f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a4fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	22ff      	movs	r2, #255	@ 0xff
 800a504:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
	...

0800a514 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b086      	sub	sp, #24
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a51c:	2182      	movs	r1, #130	@ 0x82
 800a51e:	4818      	ldr	r0, [pc, #96]	@ (800a580 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a520:	f000 fd4f 	bl	800afc2 <USBD_GetEpDesc>
 800a524:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a526:	2101      	movs	r1, #1
 800a528:	4815      	ldr	r0, [pc, #84]	@ (800a580 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a52a:	f000 fd4a 	bl	800afc2 <USBD_GetEpDesc>
 800a52e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a530:	2181      	movs	r1, #129	@ 0x81
 800a532:	4813      	ldr	r0, [pc, #76]	@ (800a580 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a534:	f000 fd45 	bl	800afc2 <USBD_GetEpDesc>
 800a538:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d002      	beq.n	800a546 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	2210      	movs	r2, #16
 800a544:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d006      	beq.n	800a55a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	2200      	movs	r2, #0
 800a550:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a554:	711a      	strb	r2, [r3, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d006      	beq.n	800a56e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2200      	movs	r2, #0
 800a564:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a568:	711a      	strb	r2, [r3, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2243      	movs	r2, #67	@ 0x43
 800a572:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a574:	4b02      	ldr	r3, [pc, #8]	@ (800a580 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a576:	4618      	mov	r0, r3
 800a578:	3718      	adds	r7, #24
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	20000050 	.word	0x20000050

0800a584 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b086      	sub	sp, #24
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a58c:	2182      	movs	r1, #130	@ 0x82
 800a58e:	4818      	ldr	r0, [pc, #96]	@ (800a5f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a590:	f000 fd17 	bl	800afc2 <USBD_GetEpDesc>
 800a594:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a596:	2101      	movs	r1, #1
 800a598:	4815      	ldr	r0, [pc, #84]	@ (800a5f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a59a:	f000 fd12 	bl	800afc2 <USBD_GetEpDesc>
 800a59e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a5a0:	2181      	movs	r1, #129	@ 0x81
 800a5a2:	4813      	ldr	r0, [pc, #76]	@ (800a5f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a5a4:	f000 fd0d 	bl	800afc2 <USBD_GetEpDesc>
 800a5a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d002      	beq.n	800a5b6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	2210      	movs	r2, #16
 800a5b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d006      	beq.n	800a5ca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	711a      	strb	r2, [r3, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f042 0202 	orr.w	r2, r2, #2
 800a5c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d006      	beq.n	800a5de <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	711a      	strb	r2, [r3, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f042 0202 	orr.w	r2, r2, #2
 800a5dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2243      	movs	r2, #67	@ 0x43
 800a5e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a5e4:	4b02      	ldr	r3, [pc, #8]	@ (800a5f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3718      	adds	r7, #24
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	20000050 	.word	0x20000050

0800a5f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b086      	sub	sp, #24
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a5fc:	2182      	movs	r1, #130	@ 0x82
 800a5fe:	4818      	ldr	r0, [pc, #96]	@ (800a660 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a600:	f000 fcdf 	bl	800afc2 <USBD_GetEpDesc>
 800a604:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a606:	2101      	movs	r1, #1
 800a608:	4815      	ldr	r0, [pc, #84]	@ (800a660 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a60a:	f000 fcda 	bl	800afc2 <USBD_GetEpDesc>
 800a60e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a610:	2181      	movs	r1, #129	@ 0x81
 800a612:	4813      	ldr	r0, [pc, #76]	@ (800a660 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a614:	f000 fcd5 	bl	800afc2 <USBD_GetEpDesc>
 800a618:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d002      	beq.n	800a626 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	2210      	movs	r2, #16
 800a624:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d006      	beq.n	800a63a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	2200      	movs	r2, #0
 800a630:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a634:	711a      	strb	r2, [r3, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d006      	beq.n	800a64e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a648:	711a      	strb	r2, [r3, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2243      	movs	r2, #67	@ 0x43
 800a652:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a654:	4b02      	ldr	r3, [pc, #8]	@ (800a660 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a656:	4618      	mov	r0, r3
 800a658:	3718      	adds	r7, #24
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	20000050 	.word	0x20000050

0800a664 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	220a      	movs	r2, #10
 800a670:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a672:	4b03      	ldr	r3, [pc, #12]	@ (800a680 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a674:	4618      	mov	r0, r3
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr
 800a680:	2000000c 	.word	0x2000000c

0800a684 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d101      	bne.n	800a698 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a694:	2303      	movs	r3, #3
 800a696:	e009      	b.n	800a6ac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	33b0      	adds	r3, #176	@ 0xb0
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	4413      	add	r3, r2
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a6aa:	2300      	movs	r3, #0
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b087      	sub	sp, #28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	32b0      	adds	r2, #176	@ 0xb0
 800a6ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6d2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d101      	bne.n	800a6de <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a6da:	2303      	movs	r3, #3
 800a6dc:	e008      	b.n	800a6f0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	68ba      	ldr	r2, [r7, #8]
 800a6e2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	371c      	adds	r7, #28
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b085      	sub	sp, #20
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	32b0      	adds	r2, #176	@ 0xb0
 800a710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a714:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d101      	bne.n	800a720 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a71c:	2303      	movs	r3, #3
 800a71e:	e004      	b.n	800a72a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	683a      	ldr	r2, [r7, #0]
 800a724:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3714      	adds	r7, #20
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr
	...

0800a738 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	32b0      	adds	r2, #176	@ 0xb0
 800a74a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a74e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a750:	2301      	movs	r3, #1
 800a752:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d101      	bne.n	800a75e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a75a:	2303      	movs	r3, #3
 800a75c:	e025      	b.n	800a7aa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a764:	2b00      	cmp	r3, #0
 800a766:	d11f      	bne.n	800a7a8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a770:	4b10      	ldr	r3, [pc, #64]	@ (800a7b4 <USBD_CDC_TransmitPacket+0x7c>)
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	f003 020f 	and.w	r2, r3, #15
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	4613      	mov	r3, r2
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	4413      	add	r3, r2
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	4403      	add	r3, r0
 800a78a:	3318      	adds	r3, #24
 800a78c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a78e:	4b09      	ldr	r3, [pc, #36]	@ (800a7b4 <USBD_CDC_TransmitPacket+0x7c>)
 800a790:	7819      	ldrb	r1, [r3, #0]
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f001 ffd1 	bl	800c746 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	20000093 	.word	0x20000093

0800a7b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	32b0      	adds	r2, #176	@ 0xb0
 800a7ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	32b0      	adds	r2, #176	@ 0xb0
 800a7da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d101      	bne.n	800a7e6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a7e2:	2303      	movs	r3, #3
 800a7e4:	e018      	b.n	800a818 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	7c1b      	ldrb	r3, [r3, #16]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d10a      	bne.n	800a804 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a7ee:	4b0c      	ldr	r3, [pc, #48]	@ (800a820 <USBD_CDC_ReceivePacket+0x68>)
 800a7f0:	7819      	ldrb	r1, [r3, #0]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a7f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f001 ffc3 	bl	800c788 <USBD_LL_PrepareReceive>
 800a802:	e008      	b.n	800a816 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a804:	4b06      	ldr	r3, [pc, #24]	@ (800a820 <USBD_CDC_ReceivePacket+0x68>)
 800a806:	7819      	ldrb	r1, [r3, #0]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a80e:	2340      	movs	r3, #64	@ 0x40
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f001 ffb9 	bl	800c788 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3710      	adds	r7, #16
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	20000094 	.word	0x20000094

0800a824 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b086      	sub	sp, #24
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	4613      	mov	r3, r2
 800a830:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d101      	bne.n	800a83c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a838:	2303      	movs	r3, #3
 800a83a:	e01f      	b.n	800a87c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2200      	movs	r2, #0
 800a840:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2200      	movs	r2, #0
 800a848:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2200      	movs	r2, #0
 800a850:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d003      	beq.n	800a862 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	68ba      	ldr	r2, [r7, #8]
 800a85e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2201      	movs	r2, #1
 800a866:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	79fa      	ldrb	r2, [r7, #7]
 800a86e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	f001 fe33 	bl	800c4dc <USBD_LL_Init>
 800a876:	4603      	mov	r3, r0
 800a878:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a87a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3718      	adds	r7, #24
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a88e:	2300      	movs	r3, #0
 800a890:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d101      	bne.n	800a89c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a898:	2303      	movs	r3, #3
 800a89a:	e025      	b.n	800a8e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	683a      	ldr	r2, [r7, #0]
 800a8a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	32ae      	adds	r2, #174	@ 0xae
 800a8ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d00f      	beq.n	800a8d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	32ae      	adds	r2, #174	@ 0xae
 800a8c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8c8:	f107 020e 	add.w	r2, r7, #14
 800a8cc:	4610      	mov	r0, r2
 800a8ce:	4798      	blx	r3
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a8de:	1c5a      	adds	r2, r3, #1
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a8e6:	2300      	movs	r3, #0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f001 fe3b 	bl	800c574 <USBD_LL_Start>
 800a8fe:	4603      	mov	r3, r0
}
 800a900:	4618      	mov	r0, r3
 800a902:	3708      	adds	r7, #8
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a910:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a912:	4618      	mov	r0, r3
 800a914:	370c      	adds	r7, #12
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr

0800a91e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b084      	sub	sp, #16
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
 800a926:	460b      	mov	r3, r1
 800a928:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a92a:	2300      	movs	r3, #0
 800a92c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a934:	2b00      	cmp	r3, #0
 800a936:	d009      	beq.n	800a94c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	78fa      	ldrb	r2, [r7, #3]
 800a942:	4611      	mov	r1, r2
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	4798      	blx	r3
 800a948:	4603      	mov	r3, r0
 800a94a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b084      	sub	sp, #16
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	460b      	mov	r3, r1
 800a960:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a962:	2300      	movs	r3, #0
 800a964:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	78fa      	ldrb	r2, [r7, #3]
 800a970:	4611      	mov	r1, r2
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	4798      	blx	r3
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d001      	beq.n	800a980 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a97c:	2303      	movs	r3, #3
 800a97e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a980:	7bfb      	ldrb	r3, [r7, #15]
}
 800a982:	4618      	mov	r0, r3
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b084      	sub	sp, #16
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
 800a992:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a99a:	6839      	ldr	r1, [r7, #0]
 800a99c:	4618      	mov	r0, r3
 800a99e:	f001 f90c 	bl	800bbba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a9be:	f003 031f 	and.w	r3, r3, #31
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d01a      	beq.n	800a9fc <USBD_LL_SetupStage+0x72>
 800a9c6:	2b02      	cmp	r3, #2
 800a9c8:	d822      	bhi.n	800aa10 <USBD_LL_SetupStage+0x86>
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d002      	beq.n	800a9d4 <USBD_LL_SetupStage+0x4a>
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d00a      	beq.n	800a9e8 <USBD_LL_SetupStage+0x5e>
 800a9d2:	e01d      	b.n	800aa10 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a9da:	4619      	mov	r1, r3
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fb63 	bl	800b0a8 <USBD_StdDevReq>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	73fb      	strb	r3, [r7, #15]
      break;
 800a9e6:	e020      	b.n	800aa2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 fbcb 	bl	800b18c <USBD_StdItfReq>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	73fb      	strb	r3, [r7, #15]
      break;
 800a9fa:	e016      	b.n	800aa2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800aa02:	4619      	mov	r1, r3
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 fc2d 	bl	800b264 <USBD_StdEPReq>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	73fb      	strb	r3, [r7, #15]
      break;
 800aa0e:	e00c      	b.n	800aa2a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800aa16:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f001 fe08 	bl	800c634 <USBD_LL_StallEP>
 800aa24:	4603      	mov	r3, r0
 800aa26:	73fb      	strb	r3, [r7, #15]
      break;
 800aa28:	bf00      	nop
  }

  return ret;
 800aa2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3710      	adds	r7, #16
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b086      	sub	sp, #24
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	607a      	str	r2, [r7, #4]
 800aa40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800aa42:	2300      	movs	r3, #0
 800aa44:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800aa46:	7afb      	ldrb	r3, [r7, #11]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d16e      	bne.n	800ab2a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800aa52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800aa5a:	2b03      	cmp	r3, #3
 800aa5c:	f040 8098 	bne.w	800ab90 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	689a      	ldr	r2, [r3, #8]
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d913      	bls.n	800aa94 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	689a      	ldr	r2, [r3, #8]
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	1ad2      	subs	r2, r2, r3
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	68da      	ldr	r2, [r3, #12]
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	4293      	cmp	r3, r2
 800aa84:	bf28      	it	cs
 800aa86:	4613      	movcs	r3, r2
 800aa88:	461a      	mov	r2, r3
 800aa8a:	6879      	ldr	r1, [r7, #4]
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	f001 f994 	bl	800bdba <USBD_CtlContinueRx>
 800aa92:	e07d      	b.n	800ab90 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800aa9a:	f003 031f 	and.w	r3, r3, #31
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d014      	beq.n	800aacc <USBD_LL_DataOutStage+0x98>
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	d81d      	bhi.n	800aae2 <USBD_LL_DataOutStage+0xae>
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d002      	beq.n	800aab0 <USBD_LL_DataOutStage+0x7c>
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d003      	beq.n	800aab6 <USBD_LL_DataOutStage+0x82>
 800aaae:	e018      	b.n	800aae2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800aab0:	2300      	movs	r3, #0
 800aab2:	75bb      	strb	r3, [r7, #22]
            break;
 800aab4:	e018      	b.n	800aae8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	4619      	mov	r1, r3
 800aac0:	68f8      	ldr	r0, [r7, #12]
 800aac2:	f000 fa64 	bl	800af8e <USBD_CoreFindIF>
 800aac6:	4603      	mov	r3, r0
 800aac8:	75bb      	strb	r3, [r7, #22]
            break;
 800aaca:	e00d      	b.n	800aae8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	4619      	mov	r1, r3
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f000 fa66 	bl	800afa8 <USBD_CoreFindEP>
 800aadc:	4603      	mov	r3, r0
 800aade:	75bb      	strb	r3, [r7, #22]
            break;
 800aae0:	e002      	b.n	800aae8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800aae2:	2300      	movs	r3, #0
 800aae4:	75bb      	strb	r3, [r7, #22]
            break;
 800aae6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800aae8:	7dbb      	ldrb	r3, [r7, #22]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d119      	bne.n	800ab22 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	2b03      	cmp	r3, #3
 800aaf8:	d113      	bne.n	800ab22 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800aafa:	7dba      	ldrb	r2, [r7, #22]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	32ae      	adds	r2, #174	@ 0xae
 800ab00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab04:	691b      	ldr	r3, [r3, #16]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00b      	beq.n	800ab22 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ab0a:	7dba      	ldrb	r2, [r7, #22]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ab12:	7dba      	ldrb	r2, [r7, #22]
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	32ae      	adds	r2, #174	@ 0xae
 800ab18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f001 f95a 	bl	800bddc <USBD_CtlSendStatus>
 800ab28:	e032      	b.n	800ab90 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ab2a:	7afb      	ldrb	r3, [r7, #11]
 800ab2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	4619      	mov	r1, r3
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f000 fa37 	bl	800afa8 <USBD_CoreFindEP>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab3e:	7dbb      	ldrb	r3, [r7, #22]
 800ab40:	2bff      	cmp	r3, #255	@ 0xff
 800ab42:	d025      	beq.n	800ab90 <USBD_LL_DataOutStage+0x15c>
 800ab44:	7dbb      	ldrb	r3, [r7, #22]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d122      	bne.n	800ab90 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	2b03      	cmp	r3, #3
 800ab54:	d117      	bne.n	800ab86 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ab56:	7dba      	ldrb	r2, [r7, #22]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	32ae      	adds	r2, #174	@ 0xae
 800ab5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00f      	beq.n	800ab86 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ab66:	7dba      	ldrb	r2, [r7, #22]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ab6e:	7dba      	ldrb	r2, [r7, #22]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	32ae      	adds	r2, #174	@ 0xae
 800ab74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab78:	699b      	ldr	r3, [r3, #24]
 800ab7a:	7afa      	ldrb	r2, [r7, #11]
 800ab7c:	4611      	mov	r1, r2
 800ab7e:	68f8      	ldr	r0, [r7, #12]
 800ab80:	4798      	blx	r3
 800ab82:	4603      	mov	r3, r0
 800ab84:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ab86:	7dfb      	ldrb	r3, [r7, #23]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d001      	beq.n	800ab90 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ab8c:	7dfb      	ldrb	r3, [r7, #23]
 800ab8e:	e000      	b.n	800ab92 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ab90:	2300      	movs	r3, #0
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3718      	adds	r7, #24
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	b086      	sub	sp, #24
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	60f8      	str	r0, [r7, #12]
 800aba2:	460b      	mov	r3, r1
 800aba4:	607a      	str	r2, [r7, #4]
 800aba6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800aba8:	7afb      	ldrb	r3, [r7, #11]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d16f      	bne.n	800ac8e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	3314      	adds	r3, #20
 800abb2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800abba:	2b02      	cmp	r3, #2
 800abbc:	d15a      	bne.n	800ac74 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	689a      	ldr	r2, [r3, #8]
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d914      	bls.n	800abf4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	689a      	ldr	r2, [r3, #8]
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	1ad2      	subs	r2, r2, r3
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	461a      	mov	r2, r3
 800abde:	6879      	ldr	r1, [r7, #4]
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f001 f8bc 	bl	800bd5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abe6:	2300      	movs	r3, #0
 800abe8:	2200      	movs	r2, #0
 800abea:	2100      	movs	r1, #0
 800abec:	68f8      	ldr	r0, [r7, #12]
 800abee:	f001 fdcb 	bl	800c788 <USBD_LL_PrepareReceive>
 800abf2:	e03f      	b.n	800ac74 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	68da      	ldr	r2, [r3, #12]
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d11c      	bne.n	800ac3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	685a      	ldr	r2, [r3, #4]
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d316      	bcc.n	800ac3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	685a      	ldr	r2, [r3, #4]
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d20f      	bcs.n	800ac3a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	2100      	movs	r1, #0
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	f001 f89d 	bl	800bd5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2200      	movs	r2, #0
 800ac28:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	2200      	movs	r2, #0
 800ac30:	2100      	movs	r1, #0
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	f001 fda8 	bl	800c788 <USBD_LL_PrepareReceive>
 800ac38:	e01c      	b.n	800ac74 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	2b03      	cmp	r3, #3
 800ac44:	d10f      	bne.n	800ac66 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac4c:	68db      	ldr	r3, [r3, #12]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d009      	beq.n	800ac66 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2200      	movs	r2, #0
 800ac56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	68f8      	ldr	r0, [r7, #12]
 800ac64:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac66:	2180      	movs	r1, #128	@ 0x80
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f001 fce3 	bl	800c634 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ac6e:	68f8      	ldr	r0, [r7, #12]
 800ac70:	f001 f8c7 	bl	800be02 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d03a      	beq.n	800acf4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	f7ff fe42 	bl	800a908 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ac8c:	e032      	b.n	800acf4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ac8e:	7afb      	ldrb	r3, [r7, #11]
 800ac90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	4619      	mov	r1, r3
 800ac98:	68f8      	ldr	r0, [r7, #12]
 800ac9a:	f000 f985 	bl	800afa8 <USBD_CoreFindEP>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aca2:	7dfb      	ldrb	r3, [r7, #23]
 800aca4:	2bff      	cmp	r3, #255	@ 0xff
 800aca6:	d025      	beq.n	800acf4 <USBD_LL_DataInStage+0x15a>
 800aca8:	7dfb      	ldrb	r3, [r7, #23]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d122      	bne.n	800acf4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	2b03      	cmp	r3, #3
 800acb8:	d11c      	bne.n	800acf4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800acba:	7dfa      	ldrb	r2, [r7, #23]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	32ae      	adds	r2, #174	@ 0xae
 800acc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc4:	695b      	ldr	r3, [r3, #20]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d014      	beq.n	800acf4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800acca:	7dfa      	ldrb	r2, [r7, #23]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800acd2:	7dfa      	ldrb	r2, [r7, #23]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	32ae      	adds	r2, #174	@ 0xae
 800acd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acdc:	695b      	ldr	r3, [r3, #20]
 800acde:	7afa      	ldrb	r2, [r7, #11]
 800ace0:	4611      	mov	r1, r2
 800ace2:	68f8      	ldr	r0, [r7, #12]
 800ace4:	4798      	blx	r3
 800ace6:	4603      	mov	r3, r0
 800ace8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800acea:	7dbb      	ldrb	r3, [r7, #22]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d001      	beq.n	800acf4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800acf0:	7dbb      	ldrb	r3, [r7, #22]
 800acf2:	e000      	b.n	800acf6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3718      	adds	r7, #24
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b084      	sub	sp, #16
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad06:	2300      	movs	r3, #0
 800ad08:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d014      	beq.n	800ad64 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00e      	beq.n	800ad64 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	6852      	ldr	r2, [r2, #4]
 800ad52:	b2d2      	uxtb	r2, r2
 800ad54:	4611      	mov	r1, r2
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	4798      	blx	r3
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d001      	beq.n	800ad64 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ad60:	2303      	movs	r3, #3
 800ad62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad64:	2340      	movs	r3, #64	@ 0x40
 800ad66:	2200      	movs	r2, #0
 800ad68:	2100      	movs	r1, #0
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f001 fc1d 	bl	800c5aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2201      	movs	r2, #1
 800ad74:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2240      	movs	r2, #64	@ 0x40
 800ad7c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad80:	2340      	movs	r3, #64	@ 0x40
 800ad82:	2200      	movs	r2, #0
 800ad84:	2180      	movs	r1, #128	@ 0x80
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f001 fc0f 	bl	800c5aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2240      	movs	r2, #64	@ 0x40
 800ad96:	621a      	str	r2, [r3, #32]

  return ret;
 800ad98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ada2:	b480      	push	{r7}
 800ada4:	b083      	sub	sp, #12
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
 800adaa:	460b      	mov	r3, r1
 800adac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	78fa      	ldrb	r2, [r7, #3]
 800adb2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	370c      	adds	r7, #12
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr

0800adc2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800adc2:	b480      	push	{r7}
 800adc4:	b083      	sub	sp, #12
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800add0:	b2db      	uxtb	r3, r3
 800add2:	2b04      	cmp	r3, #4
 800add4:	d006      	beq.n	800ade4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800addc:	b2da      	uxtb	r2, r3
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2204      	movs	r2, #4
 800ade8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	370c      	adds	r7, #12
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr

0800adfa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800adfa:	b480      	push	{r7}
 800adfc:	b083      	sub	sp, #12
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	2b04      	cmp	r3, #4
 800ae0c:	d106      	bne.n	800ae1c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ae14:	b2da      	uxtb	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ae1c:	2300      	movs	r3, #0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	370c      	adds	r7, #12
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr

0800ae2a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b082      	sub	sp, #8
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	2b03      	cmp	r3, #3
 800ae3c:	d110      	bne.n	800ae60 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00b      	beq.n	800ae60 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae4e:	69db      	ldr	r3, [r3, #28]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d005      	beq.n	800ae60 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae5a:	69db      	ldr	r3, [r3, #28]
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ae6a:	b580      	push	{r7, lr}
 800ae6c:	b082      	sub	sp, #8
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
 800ae72:	460b      	mov	r3, r1
 800ae74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	32ae      	adds	r2, #174	@ 0xae
 800ae80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d101      	bne.n	800ae8c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ae88:	2303      	movs	r3, #3
 800ae8a:	e01c      	b.n	800aec6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	2b03      	cmp	r3, #3
 800ae96:	d115      	bne.n	800aec4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	32ae      	adds	r2, #174	@ 0xae
 800aea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aea6:	6a1b      	ldr	r3, [r3, #32]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d00b      	beq.n	800aec4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	32ae      	adds	r2, #174	@ 0xae
 800aeb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeba:	6a1b      	ldr	r3, [r3, #32]
 800aebc:	78fa      	ldrb	r2, [r7, #3]
 800aebe:	4611      	mov	r1, r2
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aec4:	2300      	movs	r3, #0
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3708      	adds	r7, #8
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b082      	sub	sp, #8
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
 800aed6:	460b      	mov	r3, r1
 800aed8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	32ae      	adds	r2, #174	@ 0xae
 800aee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d101      	bne.n	800aef0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800aeec:	2303      	movs	r3, #3
 800aeee:	e01c      	b.n	800af2a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	2b03      	cmp	r3, #3
 800aefa:	d115      	bne.n	800af28 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	32ae      	adds	r2, #174	@ 0xae
 800af06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d00b      	beq.n	800af28 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	32ae      	adds	r2, #174	@ 0xae
 800af1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af20:	78fa      	ldrb	r2, [r7, #3]
 800af22:	4611      	mov	r1, r2
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af28:	2300      	movs	r3, #0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3708      	adds	r7, #8
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800af32:	b480      	push	{r7}
 800af34:	b083      	sub	sp, #12
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	370c      	adds	r7, #12
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800af50:	2300      	movs	r3, #0
 800af52:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2201      	movs	r2, #1
 800af58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00e      	beq.n	800af84 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	6852      	ldr	r2, [r2, #4]
 800af72:	b2d2      	uxtb	r2, r2
 800af74:	4611      	mov	r1, r2
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	4798      	blx	r3
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d001      	beq.n	800af84 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800af80:	2303      	movs	r3, #3
 800af82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800af84:	7bfb      	ldrb	r3, [r7, #15]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3710      	adds	r7, #16
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800af8e:	b480      	push	{r7}
 800af90:	b083      	sub	sp, #12
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
 800af96:	460b      	mov	r3, r1
 800af98:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800af9a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	370c      	adds	r7, #12
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr

0800afa8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	460b      	mov	r3, r1
 800afb2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800afb4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	370c      	adds	r7, #12
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr

0800afc2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b086      	sub	sp, #24
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
 800afca:	460b      	mov	r3, r1
 800afcc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800afd6:	2300      	movs	r3, #0
 800afd8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	885b      	ldrh	r3, [r3, #2]
 800afde:	b29b      	uxth	r3, r3
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	7812      	ldrb	r2, [r2, #0]
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d91f      	bls.n	800b028 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800afee:	e013      	b.n	800b018 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800aff0:	f107 030a 	add.w	r3, r7, #10
 800aff4:	4619      	mov	r1, r3
 800aff6:	6978      	ldr	r0, [r7, #20]
 800aff8:	f000 f81b 	bl	800b032 <USBD_GetNextDesc>
 800affc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	785b      	ldrb	r3, [r3, #1]
 800b002:	2b05      	cmp	r3, #5
 800b004:	d108      	bne.n	800b018 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	789b      	ldrb	r3, [r3, #2]
 800b00e:	78fa      	ldrb	r2, [r7, #3]
 800b010:	429a      	cmp	r2, r3
 800b012:	d008      	beq.n	800b026 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b014:	2300      	movs	r3, #0
 800b016:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	885b      	ldrh	r3, [r3, #2]
 800b01c:	b29a      	uxth	r2, r3
 800b01e:	897b      	ldrh	r3, [r7, #10]
 800b020:	429a      	cmp	r2, r3
 800b022:	d8e5      	bhi.n	800aff0 <USBD_GetEpDesc+0x2e>
 800b024:	e000      	b.n	800b028 <USBD_GetEpDesc+0x66>
          break;
 800b026:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b028:	693b      	ldr	r3, [r7, #16]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3718      	adds	r7, #24
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b032:	b480      	push	{r7}
 800b034:	b085      	sub	sp, #20
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
 800b03a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	881b      	ldrh	r3, [r3, #0]
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	7812      	ldrb	r2, [r2, #0]
 800b048:	4413      	add	r3, r2
 800b04a:	b29a      	uxth	r2, r3
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	461a      	mov	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	4413      	add	r3, r2
 800b05a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b05c:	68fb      	ldr	r3, [r7, #12]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3714      	adds	r7, #20
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr

0800b06a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b06a:	b480      	push	{r7}
 800b06c:	b087      	sub	sp, #28
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	3301      	adds	r3, #1
 800b080:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b088:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b08c:	021b      	lsls	r3, r3, #8
 800b08e:	b21a      	sxth	r2, r3
 800b090:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b094:	4313      	orrs	r3, r2
 800b096:	b21b      	sxth	r3, r3
 800b098:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b09a:	89fb      	ldrh	r3, [r7, #14]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	371c      	adds	r7, #28
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b0be:	2b40      	cmp	r3, #64	@ 0x40
 800b0c0:	d005      	beq.n	800b0ce <USBD_StdDevReq+0x26>
 800b0c2:	2b40      	cmp	r3, #64	@ 0x40
 800b0c4:	d857      	bhi.n	800b176 <USBD_StdDevReq+0xce>
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00f      	beq.n	800b0ea <USBD_StdDevReq+0x42>
 800b0ca:	2b20      	cmp	r3, #32
 800b0cc:	d153      	bne.n	800b176 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	32ae      	adds	r2, #174	@ 0xae
 800b0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	6839      	ldr	r1, [r7, #0]
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	4798      	blx	r3
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	73fb      	strb	r3, [r7, #15]
      break;
 800b0e8:	e04a      	b.n	800b180 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	785b      	ldrb	r3, [r3, #1]
 800b0ee:	2b09      	cmp	r3, #9
 800b0f0:	d83b      	bhi.n	800b16a <USBD_StdDevReq+0xc2>
 800b0f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b0f8 <USBD_StdDevReq+0x50>)
 800b0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f8:	0800b14d 	.word	0x0800b14d
 800b0fc:	0800b161 	.word	0x0800b161
 800b100:	0800b16b 	.word	0x0800b16b
 800b104:	0800b157 	.word	0x0800b157
 800b108:	0800b16b 	.word	0x0800b16b
 800b10c:	0800b12b 	.word	0x0800b12b
 800b110:	0800b121 	.word	0x0800b121
 800b114:	0800b16b 	.word	0x0800b16b
 800b118:	0800b143 	.word	0x0800b143
 800b11c:	0800b135 	.word	0x0800b135
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b120:	6839      	ldr	r1, [r7, #0]
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 fa3c 	bl	800b5a0 <USBD_GetDescriptor>
          break;
 800b128:	e024      	b.n	800b174 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b12a:	6839      	ldr	r1, [r7, #0]
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 fba1 	bl	800b874 <USBD_SetAddress>
          break;
 800b132:	e01f      	b.n	800b174 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b134:	6839      	ldr	r1, [r7, #0]
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 fbe0 	bl	800b8fc <USBD_SetConfig>
 800b13c:	4603      	mov	r3, r0
 800b13e:	73fb      	strb	r3, [r7, #15]
          break;
 800b140:	e018      	b.n	800b174 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b142:	6839      	ldr	r1, [r7, #0]
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 fc83 	bl	800ba50 <USBD_GetConfig>
          break;
 800b14a:	e013      	b.n	800b174 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b14c:	6839      	ldr	r1, [r7, #0]
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 fcb4 	bl	800babc <USBD_GetStatus>
          break;
 800b154:	e00e      	b.n	800b174 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b156:	6839      	ldr	r1, [r7, #0]
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 fce3 	bl	800bb24 <USBD_SetFeature>
          break;
 800b15e:	e009      	b.n	800b174 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b160:	6839      	ldr	r1, [r7, #0]
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 fd07 	bl	800bb76 <USBD_ClrFeature>
          break;
 800b168:	e004      	b.n	800b174 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b16a:	6839      	ldr	r1, [r7, #0]
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 fd5e 	bl	800bc2e <USBD_CtlError>
          break;
 800b172:	bf00      	nop
      }
      break;
 800b174:	e004      	b.n	800b180 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b176:	6839      	ldr	r1, [r7, #0]
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 fd58 	bl	800bc2e <USBD_CtlError>
      break;
 800b17e:	bf00      	nop
  }

  return ret;
 800b180:	7bfb      	ldrb	r3, [r7, #15]
}
 800b182:	4618      	mov	r0, r3
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop

0800b18c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b196:	2300      	movs	r3, #0
 800b198:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b1a2:	2b40      	cmp	r3, #64	@ 0x40
 800b1a4:	d005      	beq.n	800b1b2 <USBD_StdItfReq+0x26>
 800b1a6:	2b40      	cmp	r3, #64	@ 0x40
 800b1a8:	d852      	bhi.n	800b250 <USBD_StdItfReq+0xc4>
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d001      	beq.n	800b1b2 <USBD_StdItfReq+0x26>
 800b1ae:	2b20      	cmp	r3, #32
 800b1b0:	d14e      	bne.n	800b250 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1b8:	b2db      	uxtb	r3, r3
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	2b02      	cmp	r3, #2
 800b1be:	d840      	bhi.n	800b242 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	889b      	ldrh	r3, [r3, #4]
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d836      	bhi.n	800b238 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	889b      	ldrh	r3, [r3, #4]
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f7ff fedb 	bl	800af8e <USBD_CoreFindIF>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b1dc:	7bbb      	ldrb	r3, [r7, #14]
 800b1de:	2bff      	cmp	r3, #255	@ 0xff
 800b1e0:	d01d      	beq.n	800b21e <USBD_StdItfReq+0x92>
 800b1e2:	7bbb      	ldrb	r3, [r7, #14]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d11a      	bne.n	800b21e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b1e8:	7bba      	ldrb	r2, [r7, #14]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	32ae      	adds	r2, #174	@ 0xae
 800b1ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00f      	beq.n	800b218 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b1f8:	7bba      	ldrb	r2, [r7, #14]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b200:	7bba      	ldrb	r2, [r7, #14]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	32ae      	adds	r2, #174	@ 0xae
 800b206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	6839      	ldr	r1, [r7, #0]
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	4798      	blx	r3
 800b212:	4603      	mov	r3, r0
 800b214:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b216:	e004      	b.n	800b222 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b218:	2303      	movs	r3, #3
 800b21a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b21c:	e001      	b.n	800b222 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b21e:	2303      	movs	r3, #3
 800b220:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	88db      	ldrh	r3, [r3, #6]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d110      	bne.n	800b24c <USBD_StdItfReq+0xc0>
 800b22a:	7bfb      	ldrb	r3, [r7, #15]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d10d      	bne.n	800b24c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 fdd3 	bl	800bddc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b236:	e009      	b.n	800b24c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b238:	6839      	ldr	r1, [r7, #0]
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 fcf7 	bl	800bc2e <USBD_CtlError>
          break;
 800b240:	e004      	b.n	800b24c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b242:	6839      	ldr	r1, [r7, #0]
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 fcf2 	bl	800bc2e <USBD_CtlError>
          break;
 800b24a:	e000      	b.n	800b24e <USBD_StdItfReq+0xc2>
          break;
 800b24c:	bf00      	nop
      }
      break;
 800b24e:	e004      	b.n	800b25a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b250:	6839      	ldr	r1, [r7, #0]
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 fceb 	bl	800bc2e <USBD_CtlError>
      break;
 800b258:	bf00      	nop
  }

  return ret;
 800b25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3710      	adds	r7, #16
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b26e:	2300      	movs	r3, #0
 800b270:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	889b      	ldrh	r3, [r3, #4]
 800b276:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b280:	2b40      	cmp	r3, #64	@ 0x40
 800b282:	d007      	beq.n	800b294 <USBD_StdEPReq+0x30>
 800b284:	2b40      	cmp	r3, #64	@ 0x40
 800b286:	f200 817f 	bhi.w	800b588 <USBD_StdEPReq+0x324>
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d02a      	beq.n	800b2e4 <USBD_StdEPReq+0x80>
 800b28e:	2b20      	cmp	r3, #32
 800b290:	f040 817a 	bne.w	800b588 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b294:	7bbb      	ldrb	r3, [r7, #14]
 800b296:	4619      	mov	r1, r3
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f7ff fe85 	bl	800afa8 <USBD_CoreFindEP>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b2a2:	7b7b      	ldrb	r3, [r7, #13]
 800b2a4:	2bff      	cmp	r3, #255	@ 0xff
 800b2a6:	f000 8174 	beq.w	800b592 <USBD_StdEPReq+0x32e>
 800b2aa:	7b7b      	ldrb	r3, [r7, #13]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	f040 8170 	bne.w	800b592 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b2b2:	7b7a      	ldrb	r2, [r7, #13]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b2ba:	7b7a      	ldrb	r2, [r7, #13]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	32ae      	adds	r2, #174	@ 0xae
 800b2c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	f000 8163 	beq.w	800b592 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b2cc:	7b7a      	ldrb	r2, [r7, #13]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	32ae      	adds	r2, #174	@ 0xae
 800b2d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	6839      	ldr	r1, [r7, #0]
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	4798      	blx	r3
 800b2de:	4603      	mov	r3, r0
 800b2e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b2e2:	e156      	b.n	800b592 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	785b      	ldrb	r3, [r3, #1]
 800b2e8:	2b03      	cmp	r3, #3
 800b2ea:	d008      	beq.n	800b2fe <USBD_StdEPReq+0x9a>
 800b2ec:	2b03      	cmp	r3, #3
 800b2ee:	f300 8145 	bgt.w	800b57c <USBD_StdEPReq+0x318>
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	f000 809b 	beq.w	800b42e <USBD_StdEPReq+0x1ca>
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d03c      	beq.n	800b376 <USBD_StdEPReq+0x112>
 800b2fc:	e13e      	b.n	800b57c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b304:	b2db      	uxtb	r3, r3
 800b306:	2b02      	cmp	r3, #2
 800b308:	d002      	beq.n	800b310 <USBD_StdEPReq+0xac>
 800b30a:	2b03      	cmp	r3, #3
 800b30c:	d016      	beq.n	800b33c <USBD_StdEPReq+0xd8>
 800b30e:	e02c      	b.n	800b36a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b310:	7bbb      	ldrb	r3, [r7, #14]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d00d      	beq.n	800b332 <USBD_StdEPReq+0xce>
 800b316:	7bbb      	ldrb	r3, [r7, #14]
 800b318:	2b80      	cmp	r3, #128	@ 0x80
 800b31a:	d00a      	beq.n	800b332 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b31c:	7bbb      	ldrb	r3, [r7, #14]
 800b31e:	4619      	mov	r1, r3
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f001 f987 	bl	800c634 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b326:	2180      	movs	r1, #128	@ 0x80
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f001 f983 	bl	800c634 <USBD_LL_StallEP>
 800b32e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b330:	e020      	b.n	800b374 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b332:	6839      	ldr	r1, [r7, #0]
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 fc7a 	bl	800bc2e <USBD_CtlError>
              break;
 800b33a:	e01b      	b.n	800b374 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	885b      	ldrh	r3, [r3, #2]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d10e      	bne.n	800b362 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b344:	7bbb      	ldrb	r3, [r7, #14]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00b      	beq.n	800b362 <USBD_StdEPReq+0xfe>
 800b34a:	7bbb      	ldrb	r3, [r7, #14]
 800b34c:	2b80      	cmp	r3, #128	@ 0x80
 800b34e:	d008      	beq.n	800b362 <USBD_StdEPReq+0xfe>
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	88db      	ldrh	r3, [r3, #6]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d104      	bne.n	800b362 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b358:	7bbb      	ldrb	r3, [r7, #14]
 800b35a:	4619      	mov	r1, r3
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f001 f969 	bl	800c634 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 fd3a 	bl	800bddc <USBD_CtlSendStatus>

              break;
 800b368:	e004      	b.n	800b374 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b36a:	6839      	ldr	r1, [r7, #0]
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 fc5e 	bl	800bc2e <USBD_CtlError>
              break;
 800b372:	bf00      	nop
          }
          break;
 800b374:	e107      	b.n	800b586 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	2b02      	cmp	r3, #2
 800b380:	d002      	beq.n	800b388 <USBD_StdEPReq+0x124>
 800b382:	2b03      	cmp	r3, #3
 800b384:	d016      	beq.n	800b3b4 <USBD_StdEPReq+0x150>
 800b386:	e04b      	b.n	800b420 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b388:	7bbb      	ldrb	r3, [r7, #14]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00d      	beq.n	800b3aa <USBD_StdEPReq+0x146>
 800b38e:	7bbb      	ldrb	r3, [r7, #14]
 800b390:	2b80      	cmp	r3, #128	@ 0x80
 800b392:	d00a      	beq.n	800b3aa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b394:	7bbb      	ldrb	r3, [r7, #14]
 800b396:	4619      	mov	r1, r3
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f001 f94b 	bl	800c634 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b39e:	2180      	movs	r1, #128	@ 0x80
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f001 f947 	bl	800c634 <USBD_LL_StallEP>
 800b3a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b3a8:	e040      	b.n	800b42c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b3aa:	6839      	ldr	r1, [r7, #0]
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 fc3e 	bl	800bc2e <USBD_CtlError>
              break;
 800b3b2:	e03b      	b.n	800b42c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	885b      	ldrh	r3, [r3, #2]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d136      	bne.n	800b42a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b3bc:	7bbb      	ldrb	r3, [r7, #14]
 800b3be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d004      	beq.n	800b3d0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b3c6:	7bbb      	ldrb	r3, [r7, #14]
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f001 f951 	bl	800c672 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 fd03 	bl	800bddc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b3d6:	7bbb      	ldrb	r3, [r7, #14]
 800b3d8:	4619      	mov	r1, r3
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f7ff fde4 	bl	800afa8 <USBD_CoreFindEP>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3e4:	7b7b      	ldrb	r3, [r7, #13]
 800b3e6:	2bff      	cmp	r3, #255	@ 0xff
 800b3e8:	d01f      	beq.n	800b42a <USBD_StdEPReq+0x1c6>
 800b3ea:	7b7b      	ldrb	r3, [r7, #13]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d11c      	bne.n	800b42a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b3f0:	7b7a      	ldrb	r2, [r7, #13]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b3f8:	7b7a      	ldrb	r2, [r7, #13]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	32ae      	adds	r2, #174	@ 0xae
 800b3fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d010      	beq.n	800b42a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b408:	7b7a      	ldrb	r2, [r7, #13]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	32ae      	adds	r2, #174	@ 0xae
 800b40e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	6839      	ldr	r1, [r7, #0]
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	4798      	blx	r3
 800b41a:	4603      	mov	r3, r0
 800b41c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b41e:	e004      	b.n	800b42a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b420:	6839      	ldr	r1, [r7, #0]
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 fc03 	bl	800bc2e <USBD_CtlError>
              break;
 800b428:	e000      	b.n	800b42c <USBD_StdEPReq+0x1c8>
              break;
 800b42a:	bf00      	nop
          }
          break;
 800b42c:	e0ab      	b.n	800b586 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b434:	b2db      	uxtb	r3, r3
 800b436:	2b02      	cmp	r3, #2
 800b438:	d002      	beq.n	800b440 <USBD_StdEPReq+0x1dc>
 800b43a:	2b03      	cmp	r3, #3
 800b43c:	d032      	beq.n	800b4a4 <USBD_StdEPReq+0x240>
 800b43e:	e097      	b.n	800b570 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b440:	7bbb      	ldrb	r3, [r7, #14]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d007      	beq.n	800b456 <USBD_StdEPReq+0x1f2>
 800b446:	7bbb      	ldrb	r3, [r7, #14]
 800b448:	2b80      	cmp	r3, #128	@ 0x80
 800b44a:	d004      	beq.n	800b456 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b44c:	6839      	ldr	r1, [r7, #0]
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 fbed 	bl	800bc2e <USBD_CtlError>
                break;
 800b454:	e091      	b.n	800b57a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b456:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	da0b      	bge.n	800b476 <USBD_StdEPReq+0x212>
 800b45e:	7bbb      	ldrb	r3, [r7, #14]
 800b460:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b464:	4613      	mov	r3, r2
 800b466:	009b      	lsls	r3, r3, #2
 800b468:	4413      	add	r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	3310      	adds	r3, #16
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	4413      	add	r3, r2
 800b472:	3304      	adds	r3, #4
 800b474:	e00b      	b.n	800b48e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b476:	7bbb      	ldrb	r3, [r7, #14]
 800b478:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b47c:	4613      	mov	r3, r2
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	4413      	add	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	4413      	add	r3, r2
 800b48c:	3304      	adds	r3, #4
 800b48e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	2200      	movs	r2, #0
 800b494:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	2202      	movs	r2, #2
 800b49a:	4619      	mov	r1, r3
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 fc43 	bl	800bd28 <USBD_CtlSendData>
              break;
 800b4a2:	e06a      	b.n	800b57a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b4a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	da11      	bge.n	800b4d0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b4ac:	7bbb      	ldrb	r3, [r7, #14]
 800b4ae:	f003 020f 	and.w	r2, r3, #15
 800b4b2:	6879      	ldr	r1, [r7, #4]
 800b4b4:	4613      	mov	r3, r2
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	4413      	add	r3, r2
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	440b      	add	r3, r1
 800b4be:	3324      	adds	r3, #36	@ 0x24
 800b4c0:	881b      	ldrh	r3, [r3, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d117      	bne.n	800b4f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b4c6:	6839      	ldr	r1, [r7, #0]
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 fbb0 	bl	800bc2e <USBD_CtlError>
                  break;
 800b4ce:	e054      	b.n	800b57a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b4d0:	7bbb      	ldrb	r3, [r7, #14]
 800b4d2:	f003 020f 	and.w	r2, r3, #15
 800b4d6:	6879      	ldr	r1, [r7, #4]
 800b4d8:	4613      	mov	r3, r2
 800b4da:	009b      	lsls	r3, r3, #2
 800b4dc:	4413      	add	r3, r2
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	440b      	add	r3, r1
 800b4e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b4e6:	881b      	ldrh	r3, [r3, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d104      	bne.n	800b4f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b4ec:	6839      	ldr	r1, [r7, #0]
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 fb9d 	bl	800bc2e <USBD_CtlError>
                  break;
 800b4f4:	e041      	b.n	800b57a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b4f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	da0b      	bge.n	800b516 <USBD_StdEPReq+0x2b2>
 800b4fe:	7bbb      	ldrb	r3, [r7, #14]
 800b500:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b504:	4613      	mov	r3, r2
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	4413      	add	r3, r2
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	3310      	adds	r3, #16
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	4413      	add	r3, r2
 800b512:	3304      	adds	r3, #4
 800b514:	e00b      	b.n	800b52e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b516:	7bbb      	ldrb	r3, [r7, #14]
 800b518:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b51c:	4613      	mov	r3, r2
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	4413      	add	r3, r2
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	4413      	add	r3, r2
 800b52c:	3304      	adds	r3, #4
 800b52e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b530:	7bbb      	ldrb	r3, [r7, #14]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d002      	beq.n	800b53c <USBD_StdEPReq+0x2d8>
 800b536:	7bbb      	ldrb	r3, [r7, #14]
 800b538:	2b80      	cmp	r3, #128	@ 0x80
 800b53a:	d103      	bne.n	800b544 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	2200      	movs	r2, #0
 800b540:	601a      	str	r2, [r3, #0]
 800b542:	e00e      	b.n	800b562 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b544:	7bbb      	ldrb	r3, [r7, #14]
 800b546:	4619      	mov	r1, r3
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f001 f8b1 	bl	800c6b0 <USBD_LL_IsStallEP>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d003      	beq.n	800b55c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	2201      	movs	r2, #1
 800b558:	601a      	str	r2, [r3, #0]
 800b55a:	e002      	b.n	800b562 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	2202      	movs	r2, #2
 800b566:	4619      	mov	r1, r3
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 fbdd 	bl	800bd28 <USBD_CtlSendData>
              break;
 800b56e:	e004      	b.n	800b57a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b570:	6839      	ldr	r1, [r7, #0]
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 fb5b 	bl	800bc2e <USBD_CtlError>
              break;
 800b578:	bf00      	nop
          }
          break;
 800b57a:	e004      	b.n	800b586 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b57c:	6839      	ldr	r1, [r7, #0]
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 fb55 	bl	800bc2e <USBD_CtlError>
          break;
 800b584:	bf00      	nop
      }
      break;
 800b586:	e005      	b.n	800b594 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b588:	6839      	ldr	r1, [r7, #0]
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 fb4f 	bl	800bc2e <USBD_CtlError>
      break;
 800b590:	e000      	b.n	800b594 <USBD_StdEPReq+0x330>
      break;
 800b592:	bf00      	nop
  }

  return ret;
 800b594:	7bfb      	ldrb	r3, [r7, #15]
}
 800b596:	4618      	mov	r0, r3
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
	...

0800b5a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	885b      	ldrh	r3, [r3, #2]
 800b5ba:	0a1b      	lsrs	r3, r3, #8
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	2b06      	cmp	r3, #6
 800b5c2:	f200 8128 	bhi.w	800b816 <USBD_GetDescriptor+0x276>
 800b5c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b5cc <USBD_GetDescriptor+0x2c>)
 800b5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5cc:	0800b5e9 	.word	0x0800b5e9
 800b5d0:	0800b601 	.word	0x0800b601
 800b5d4:	0800b641 	.word	0x0800b641
 800b5d8:	0800b817 	.word	0x0800b817
 800b5dc:	0800b817 	.word	0x0800b817
 800b5e0:	0800b7b7 	.word	0x0800b7b7
 800b5e4:	0800b7e3 	.word	0x0800b7e3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	7c12      	ldrb	r2, [r2, #16]
 800b5f4:	f107 0108 	add.w	r1, r7, #8
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	4798      	blx	r3
 800b5fc:	60f8      	str	r0, [r7, #12]
      break;
 800b5fe:	e112      	b.n	800b826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	7c1b      	ldrb	r3, [r3, #16]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d10d      	bne.n	800b624 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b60e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b610:	f107 0208 	add.w	r2, r7, #8
 800b614:	4610      	mov	r0, r2
 800b616:	4798      	blx	r3
 800b618:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	3301      	adds	r3, #1
 800b61e:	2202      	movs	r2, #2
 800b620:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b622:	e100      	b.n	800b826 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b62a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b62c:	f107 0208 	add.w	r2, r7, #8
 800b630:	4610      	mov	r0, r2
 800b632:	4798      	blx	r3
 800b634:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	3301      	adds	r3, #1
 800b63a:	2202      	movs	r2, #2
 800b63c:	701a      	strb	r2, [r3, #0]
      break;
 800b63e:	e0f2      	b.n	800b826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	885b      	ldrh	r3, [r3, #2]
 800b644:	b2db      	uxtb	r3, r3
 800b646:	2b05      	cmp	r3, #5
 800b648:	f200 80ac 	bhi.w	800b7a4 <USBD_GetDescriptor+0x204>
 800b64c:	a201      	add	r2, pc, #4	@ (adr r2, 800b654 <USBD_GetDescriptor+0xb4>)
 800b64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b652:	bf00      	nop
 800b654:	0800b66d 	.word	0x0800b66d
 800b658:	0800b6a1 	.word	0x0800b6a1
 800b65c:	0800b6d5 	.word	0x0800b6d5
 800b660:	0800b709 	.word	0x0800b709
 800b664:	0800b73d 	.word	0x0800b73d
 800b668:	0800b771 	.word	0x0800b771
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d00b      	beq.n	800b690 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	7c12      	ldrb	r2, [r2, #16]
 800b684:	f107 0108 	add.w	r1, r7, #8
 800b688:	4610      	mov	r0, r2
 800b68a:	4798      	blx	r3
 800b68c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b68e:	e091      	b.n	800b7b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b690:	6839      	ldr	r1, [r7, #0]
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 facb 	bl	800bc2e <USBD_CtlError>
            err++;
 800b698:	7afb      	ldrb	r3, [r7, #11]
 800b69a:	3301      	adds	r3, #1
 800b69c:	72fb      	strb	r3, [r7, #11]
          break;
 800b69e:	e089      	b.n	800b7b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00b      	beq.n	800b6c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	7c12      	ldrb	r2, [r2, #16]
 800b6b8:	f107 0108 	add.w	r1, r7, #8
 800b6bc:	4610      	mov	r0, r2
 800b6be:	4798      	blx	r3
 800b6c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6c2:	e077      	b.n	800b7b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6c4:	6839      	ldr	r1, [r7, #0]
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 fab1 	bl	800bc2e <USBD_CtlError>
            err++;
 800b6cc:	7afb      	ldrb	r3, [r7, #11]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	72fb      	strb	r3, [r7, #11]
          break;
 800b6d2:	e06f      	b.n	800b7b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00b      	beq.n	800b6f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	7c12      	ldrb	r2, [r2, #16]
 800b6ec:	f107 0108 	add.w	r1, r7, #8
 800b6f0:	4610      	mov	r0, r2
 800b6f2:	4798      	blx	r3
 800b6f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6f6:	e05d      	b.n	800b7b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6f8:	6839      	ldr	r1, [r7, #0]
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 fa97 	bl	800bc2e <USBD_CtlError>
            err++;
 800b700:	7afb      	ldrb	r3, [r7, #11]
 800b702:	3301      	adds	r3, #1
 800b704:	72fb      	strb	r3, [r7, #11]
          break;
 800b706:	e055      	b.n	800b7b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b70e:	691b      	ldr	r3, [r3, #16]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d00b      	beq.n	800b72c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b71a:	691b      	ldr	r3, [r3, #16]
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	7c12      	ldrb	r2, [r2, #16]
 800b720:	f107 0108 	add.w	r1, r7, #8
 800b724:	4610      	mov	r0, r2
 800b726:	4798      	blx	r3
 800b728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b72a:	e043      	b.n	800b7b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b72c:	6839      	ldr	r1, [r7, #0]
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 fa7d 	bl	800bc2e <USBD_CtlError>
            err++;
 800b734:	7afb      	ldrb	r3, [r7, #11]
 800b736:	3301      	adds	r3, #1
 800b738:	72fb      	strb	r3, [r7, #11]
          break;
 800b73a:	e03b      	b.n	800b7b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b742:	695b      	ldr	r3, [r3, #20]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d00b      	beq.n	800b760 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b74e:	695b      	ldr	r3, [r3, #20]
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	7c12      	ldrb	r2, [r2, #16]
 800b754:	f107 0108 	add.w	r1, r7, #8
 800b758:	4610      	mov	r0, r2
 800b75a:	4798      	blx	r3
 800b75c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b75e:	e029      	b.n	800b7b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b760:	6839      	ldr	r1, [r7, #0]
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 fa63 	bl	800bc2e <USBD_CtlError>
            err++;
 800b768:	7afb      	ldrb	r3, [r7, #11]
 800b76a:	3301      	adds	r3, #1
 800b76c:	72fb      	strb	r3, [r7, #11]
          break;
 800b76e:	e021      	b.n	800b7b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b776:	699b      	ldr	r3, [r3, #24]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d00b      	beq.n	800b794 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b782:	699b      	ldr	r3, [r3, #24]
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	7c12      	ldrb	r2, [r2, #16]
 800b788:	f107 0108 	add.w	r1, r7, #8
 800b78c:	4610      	mov	r0, r2
 800b78e:	4798      	blx	r3
 800b790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b792:	e00f      	b.n	800b7b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b794:	6839      	ldr	r1, [r7, #0]
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 fa49 	bl	800bc2e <USBD_CtlError>
            err++;
 800b79c:	7afb      	ldrb	r3, [r7, #11]
 800b79e:	3301      	adds	r3, #1
 800b7a0:	72fb      	strb	r3, [r7, #11]
          break;
 800b7a2:	e007      	b.n	800b7b4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b7a4:	6839      	ldr	r1, [r7, #0]
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 fa41 	bl	800bc2e <USBD_CtlError>
          err++;
 800b7ac:	7afb      	ldrb	r3, [r7, #11]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b7b2:	bf00      	nop
      }
      break;
 800b7b4:	e037      	b.n	800b826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	7c1b      	ldrb	r3, [r3, #16]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d109      	bne.n	800b7d2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7c6:	f107 0208 	add.w	r2, r7, #8
 800b7ca:	4610      	mov	r0, r2
 800b7cc:	4798      	blx	r3
 800b7ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b7d0:	e029      	b.n	800b826 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b7d2:	6839      	ldr	r1, [r7, #0]
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 fa2a 	bl	800bc2e <USBD_CtlError>
        err++;
 800b7da:	7afb      	ldrb	r3, [r7, #11]
 800b7dc:	3301      	adds	r3, #1
 800b7de:	72fb      	strb	r3, [r7, #11]
      break;
 800b7e0:	e021      	b.n	800b826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	7c1b      	ldrb	r3, [r3, #16]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d10d      	bne.n	800b806 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7f2:	f107 0208 	add.w	r2, r7, #8
 800b7f6:	4610      	mov	r0, r2
 800b7f8:	4798      	blx	r3
 800b7fa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	3301      	adds	r3, #1
 800b800:	2207      	movs	r2, #7
 800b802:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b804:	e00f      	b.n	800b826 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fa10 	bl	800bc2e <USBD_CtlError>
        err++;
 800b80e:	7afb      	ldrb	r3, [r7, #11]
 800b810:	3301      	adds	r3, #1
 800b812:	72fb      	strb	r3, [r7, #11]
      break;
 800b814:	e007      	b.n	800b826 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b816:	6839      	ldr	r1, [r7, #0]
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 fa08 	bl	800bc2e <USBD_CtlError>
      err++;
 800b81e:	7afb      	ldrb	r3, [r7, #11]
 800b820:	3301      	adds	r3, #1
 800b822:	72fb      	strb	r3, [r7, #11]
      break;
 800b824:	bf00      	nop
  }

  if (err != 0U)
 800b826:	7afb      	ldrb	r3, [r7, #11]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d11e      	bne.n	800b86a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	88db      	ldrh	r3, [r3, #6]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d016      	beq.n	800b862 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b834:	893b      	ldrh	r3, [r7, #8]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d00e      	beq.n	800b858 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	88da      	ldrh	r2, [r3, #6]
 800b83e:	893b      	ldrh	r3, [r7, #8]
 800b840:	4293      	cmp	r3, r2
 800b842:	bf28      	it	cs
 800b844:	4613      	movcs	r3, r2
 800b846:	b29b      	uxth	r3, r3
 800b848:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b84a:	893b      	ldrh	r3, [r7, #8]
 800b84c:	461a      	mov	r2, r3
 800b84e:	68f9      	ldr	r1, [r7, #12]
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 fa69 	bl	800bd28 <USBD_CtlSendData>
 800b856:	e009      	b.n	800b86c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b858:	6839      	ldr	r1, [r7, #0]
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 f9e7 	bl	800bc2e <USBD_CtlError>
 800b860:	e004      	b.n	800b86c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 faba 	bl	800bddc <USBD_CtlSendStatus>
 800b868:	e000      	b.n	800b86c <USBD_GetDescriptor+0x2cc>
    return;
 800b86a:	bf00      	nop
  }
}
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop

0800b874 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	889b      	ldrh	r3, [r3, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d131      	bne.n	800b8ea <USBD_SetAddress+0x76>
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	88db      	ldrh	r3, [r3, #6]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d12d      	bne.n	800b8ea <USBD_SetAddress+0x76>
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	885b      	ldrh	r3, [r3, #2]
 800b892:	2b7f      	cmp	r3, #127	@ 0x7f
 800b894:	d829      	bhi.n	800b8ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	885b      	ldrh	r3, [r3, #2]
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	2b03      	cmp	r3, #3
 800b8ac:	d104      	bne.n	800b8b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b8ae:	6839      	ldr	r1, [r7, #0]
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 f9bc 	bl	800bc2e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8b6:	e01d      	b.n	800b8f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	7bfa      	ldrb	r2, [r7, #15]
 800b8bc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b8c0:	7bfb      	ldrb	r3, [r7, #15]
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 ff1f 	bl	800c708 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 fa86 	bl	800bddc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b8d0:	7bfb      	ldrb	r3, [r7, #15]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d004      	beq.n	800b8e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2202      	movs	r2, #2
 800b8da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8de:	e009      	b.n	800b8f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8e8:	e004      	b.n	800b8f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b8ea:	6839      	ldr	r1, [r7, #0]
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f000 f99e 	bl	800bc2e <USBD_CtlError>
  }
}
 800b8f2:	bf00      	nop
 800b8f4:	bf00      	nop
 800b8f6:	3710      	adds	r7, #16
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b906:	2300      	movs	r3, #0
 800b908:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	885b      	ldrh	r3, [r3, #2]
 800b90e:	b2da      	uxtb	r2, r3
 800b910:	4b4e      	ldr	r3, [pc, #312]	@ (800ba4c <USBD_SetConfig+0x150>)
 800b912:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b914:	4b4d      	ldr	r3, [pc, #308]	@ (800ba4c <USBD_SetConfig+0x150>)
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d905      	bls.n	800b928 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b91c:	6839      	ldr	r1, [r7, #0]
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 f985 	bl	800bc2e <USBD_CtlError>
    return USBD_FAIL;
 800b924:	2303      	movs	r3, #3
 800b926:	e08c      	b.n	800ba42 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	2b02      	cmp	r3, #2
 800b932:	d002      	beq.n	800b93a <USBD_SetConfig+0x3e>
 800b934:	2b03      	cmp	r3, #3
 800b936:	d029      	beq.n	800b98c <USBD_SetConfig+0x90>
 800b938:	e075      	b.n	800ba26 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b93a:	4b44      	ldr	r3, [pc, #272]	@ (800ba4c <USBD_SetConfig+0x150>)
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d020      	beq.n	800b984 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b942:	4b42      	ldr	r3, [pc, #264]	@ (800ba4c <USBD_SetConfig+0x150>)
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	461a      	mov	r2, r3
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b94c:	4b3f      	ldr	r3, [pc, #252]	@ (800ba4c <USBD_SetConfig+0x150>)
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	4619      	mov	r1, r3
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f7fe ffe3 	bl	800a91e <USBD_SetClassConfig>
 800b958:	4603      	mov	r3, r0
 800b95a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b95c:	7bfb      	ldrb	r3, [r7, #15]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d008      	beq.n	800b974 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b962:	6839      	ldr	r1, [r7, #0]
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 f962 	bl	800bc2e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2202      	movs	r2, #2
 800b96e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b972:	e065      	b.n	800ba40 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 fa31 	bl	800bddc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2203      	movs	r2, #3
 800b97e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b982:	e05d      	b.n	800ba40 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 fa29 	bl	800bddc <USBD_CtlSendStatus>
      break;
 800b98a:	e059      	b.n	800ba40 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b98c:	4b2f      	ldr	r3, [pc, #188]	@ (800ba4c <USBD_SetConfig+0x150>)
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d112      	bne.n	800b9ba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2202      	movs	r2, #2
 800b998:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b99c:	4b2b      	ldr	r3, [pc, #172]	@ (800ba4c <USBD_SetConfig+0x150>)
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b9a6:	4b29      	ldr	r3, [pc, #164]	@ (800ba4c <USBD_SetConfig+0x150>)
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f7fe ffd2 	bl	800a956 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 fa12 	bl	800bddc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b9b8:	e042      	b.n	800ba40 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b9ba:	4b24      	ldr	r3, [pc, #144]	@ (800ba4c <USBD_SetConfig+0x150>)
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d02a      	beq.n	800ba1e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f7fe ffc0 	bl	800a956 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b9d6:	4b1d      	ldr	r3, [pc, #116]	@ (800ba4c <USBD_SetConfig+0x150>)
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	461a      	mov	r2, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b9e0:	4b1a      	ldr	r3, [pc, #104]	@ (800ba4c <USBD_SetConfig+0x150>)
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f7fe ff99 	bl	800a91e <USBD_SetClassConfig>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b9f0:	7bfb      	ldrb	r3, [r7, #15]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00f      	beq.n	800ba16 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b9f6:	6839      	ldr	r1, [r7, #0]
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 f918 	bl	800bc2e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	4619      	mov	r1, r3
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7fe ffa5 	bl	800a956 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2202      	movs	r2, #2
 800ba10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ba14:	e014      	b.n	800ba40 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 f9e0 	bl	800bddc <USBD_CtlSendStatus>
      break;
 800ba1c:	e010      	b.n	800ba40 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 f9dc 	bl	800bddc <USBD_CtlSendStatus>
      break;
 800ba24:	e00c      	b.n	800ba40 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ba26:	6839      	ldr	r1, [r7, #0]
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 f900 	bl	800bc2e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ba2e:	4b07      	ldr	r3, [pc, #28]	@ (800ba4c <USBD_SetConfig+0x150>)
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	4619      	mov	r1, r3
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f7fe ff8e 	bl	800a956 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ba3a:	2303      	movs	r3, #3
 800ba3c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba3e:	bf00      	nop
  }

  return ret;
 800ba40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	200004f4 	.word	0x200004f4

0800ba50 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b082      	sub	sp, #8
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	88db      	ldrh	r3, [r3, #6]
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d004      	beq.n	800ba6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ba62:	6839      	ldr	r1, [r7, #0]
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 f8e2 	bl	800bc2e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ba6a:	e023      	b.n	800bab4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	2b02      	cmp	r3, #2
 800ba76:	dc02      	bgt.n	800ba7e <USBD_GetConfig+0x2e>
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	dc03      	bgt.n	800ba84 <USBD_GetConfig+0x34>
 800ba7c:	e015      	b.n	800baaa <USBD_GetConfig+0x5a>
 800ba7e:	2b03      	cmp	r3, #3
 800ba80:	d00b      	beq.n	800ba9a <USBD_GetConfig+0x4a>
 800ba82:	e012      	b.n	800baaa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2200      	movs	r2, #0
 800ba88:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	3308      	adds	r3, #8
 800ba8e:	2201      	movs	r2, #1
 800ba90:	4619      	mov	r1, r3
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f000 f948 	bl	800bd28 <USBD_CtlSendData>
        break;
 800ba98:	e00c      	b.n	800bab4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	3304      	adds	r3, #4
 800ba9e:	2201      	movs	r2, #1
 800baa0:	4619      	mov	r1, r3
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 f940 	bl	800bd28 <USBD_CtlSendData>
        break;
 800baa8:	e004      	b.n	800bab4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800baaa:	6839      	ldr	r1, [r7, #0]
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 f8be 	bl	800bc2e <USBD_CtlError>
        break;
 800bab2:	bf00      	nop
}
 800bab4:	bf00      	nop
 800bab6:	3708      	adds	r7, #8
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	3b01      	subs	r3, #1
 800bad0:	2b02      	cmp	r3, #2
 800bad2:	d81e      	bhi.n	800bb12 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	88db      	ldrh	r3, [r3, #6]
 800bad8:	2b02      	cmp	r3, #2
 800bada:	d004      	beq.n	800bae6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800badc:	6839      	ldr	r1, [r7, #0]
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 f8a5 	bl	800bc2e <USBD_CtlError>
        break;
 800bae4:	e01a      	b.n	800bb1c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2201      	movs	r2, #1
 800baea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d005      	beq.n	800bb02 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	68db      	ldr	r3, [r3, #12]
 800bafa:	f043 0202 	orr.w	r2, r3, #2
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	330c      	adds	r3, #12
 800bb06:	2202      	movs	r2, #2
 800bb08:	4619      	mov	r1, r3
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 f90c 	bl	800bd28 <USBD_CtlSendData>
      break;
 800bb10:	e004      	b.n	800bb1c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bb12:	6839      	ldr	r1, [r7, #0]
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 f88a 	bl	800bc2e <USBD_CtlError>
      break;
 800bb1a:	bf00      	nop
  }
}
 800bb1c:	bf00      	nop
 800bb1e:	3708      	adds	r7, #8
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	885b      	ldrh	r3, [r3, #2]
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d107      	bne.n	800bb46 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2201      	movs	r2, #1
 800bb3a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f94c 	bl	800bddc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bb44:	e013      	b.n	800bb6e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	885b      	ldrh	r3, [r3, #2]
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	d10b      	bne.n	800bb66 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	889b      	ldrh	r3, [r3, #4]
 800bb52:	0a1b      	lsrs	r3, r3, #8
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	b2da      	uxtb	r2, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 f93c 	bl	800bddc <USBD_CtlSendStatus>
}
 800bb64:	e003      	b.n	800bb6e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bb66:	6839      	ldr	r1, [r7, #0]
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 f860 	bl	800bc2e <USBD_CtlError>
}
 800bb6e:	bf00      	nop
 800bb70:	3708      	adds	r7, #8
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b082      	sub	sp, #8
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
 800bb7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	3b01      	subs	r3, #1
 800bb8a:	2b02      	cmp	r3, #2
 800bb8c:	d80b      	bhi.n	800bba6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	885b      	ldrh	r3, [r3, #2]
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d10c      	bne.n	800bbb0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 f91c 	bl	800bddc <USBD_CtlSendStatus>
      }
      break;
 800bba4:	e004      	b.n	800bbb0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bba6:	6839      	ldr	r1, [r7, #0]
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 f840 	bl	800bc2e <USBD_CtlError>
      break;
 800bbae:	e000      	b.n	800bbb2 <USBD_ClrFeature+0x3c>
      break;
 800bbb0:	bf00      	nop
  }
}
 800bbb2:	bf00      	nop
 800bbb4:	3708      	adds	r7, #8
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}

0800bbba <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bbba:	b580      	push	{r7, lr}
 800bbbc:	b084      	sub	sp, #16
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
 800bbc2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	781a      	ldrb	r2, [r3, #0]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	781a      	ldrb	r2, [r3, #0]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f7ff fa40 	bl	800b06a <SWAPBYTE>
 800bbea:	4603      	mov	r3, r0
 800bbec:	461a      	mov	r2, r3
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bbfe:	68f8      	ldr	r0, [r7, #12]
 800bc00:	f7ff fa33 	bl	800b06a <SWAPBYTE>
 800bc04:	4603      	mov	r3, r0
 800bc06:	461a      	mov	r2, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	3301      	adds	r3, #1
 800bc10:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	3301      	adds	r3, #1
 800bc16:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f7ff fa26 	bl	800b06a <SWAPBYTE>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	461a      	mov	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	80da      	strh	r2, [r3, #6]
}
 800bc26:	bf00      	nop
 800bc28:	3710      	adds	r7, #16
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}

0800bc2e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc2e:	b580      	push	{r7, lr}
 800bc30:	b082      	sub	sp, #8
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
 800bc36:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc38:	2180      	movs	r1, #128	@ 0x80
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 fcfa 	bl	800c634 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bc40:	2100      	movs	r1, #0
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 fcf6 	bl	800c634 <USBD_LL_StallEP>
}
 800bc48:	bf00      	nop
 800bc4a:	3708      	adds	r7, #8
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b086      	sub	sp, #24
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	60b9      	str	r1, [r7, #8]
 800bc5a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d042      	beq.n	800bcec <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800bc6a:	6938      	ldr	r0, [r7, #16]
 800bc6c:	f000 f842 	bl	800bcf4 <USBD_GetLen>
 800bc70:	4603      	mov	r3, r0
 800bc72:	3301      	adds	r3, #1
 800bc74:	005b      	lsls	r3, r3, #1
 800bc76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc7a:	d808      	bhi.n	800bc8e <USBD_GetString+0x3e>
 800bc7c:	6938      	ldr	r0, [r7, #16]
 800bc7e:	f000 f839 	bl	800bcf4 <USBD_GetLen>
 800bc82:	4603      	mov	r3, r0
 800bc84:	3301      	adds	r3, #1
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	005b      	lsls	r3, r3, #1
 800bc8a:	b29a      	uxth	r2, r3
 800bc8c:	e001      	b.n	800bc92 <USBD_GetString+0x42>
 800bc8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bc96:	7dfb      	ldrb	r3, [r7, #23]
 800bc98:	68ba      	ldr	r2, [r7, #8]
 800bc9a:	4413      	add	r3, r2
 800bc9c:	687a      	ldr	r2, [r7, #4]
 800bc9e:	7812      	ldrb	r2, [r2, #0]
 800bca0:	701a      	strb	r2, [r3, #0]
  idx++;
 800bca2:	7dfb      	ldrb	r3, [r7, #23]
 800bca4:	3301      	adds	r3, #1
 800bca6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bca8:	7dfb      	ldrb	r3, [r7, #23]
 800bcaa:	68ba      	ldr	r2, [r7, #8]
 800bcac:	4413      	add	r3, r2
 800bcae:	2203      	movs	r2, #3
 800bcb0:	701a      	strb	r2, [r3, #0]
  idx++;
 800bcb2:	7dfb      	ldrb	r3, [r7, #23]
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bcb8:	e013      	b.n	800bce2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800bcba:	7dfb      	ldrb	r3, [r7, #23]
 800bcbc:	68ba      	ldr	r2, [r7, #8]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	693a      	ldr	r2, [r7, #16]
 800bcc2:	7812      	ldrb	r2, [r2, #0]
 800bcc4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	3301      	adds	r3, #1
 800bcca:	613b      	str	r3, [r7, #16]
    idx++;
 800bccc:	7dfb      	ldrb	r3, [r7, #23]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bcd2:	7dfb      	ldrb	r3, [r7, #23]
 800bcd4:	68ba      	ldr	r2, [r7, #8]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	2200      	movs	r2, #0
 800bcda:	701a      	strb	r2, [r3, #0]
    idx++;
 800bcdc:	7dfb      	ldrb	r3, [r7, #23]
 800bcde:	3301      	adds	r3, #1
 800bce0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1e7      	bne.n	800bcba <USBD_GetString+0x6a>
 800bcea:	e000      	b.n	800bcee <USBD_GetString+0x9e>
    return;
 800bcec:	bf00      	nop
  }
}
 800bcee:	3718      	adds	r7, #24
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bd04:	e005      	b.n	800bd12 <USBD_GetLen+0x1e>
  {
    len++;
 800bd06:	7bfb      	ldrb	r3, [r7, #15]
 800bd08:	3301      	adds	r3, #1
 800bd0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	3301      	adds	r3, #1
 800bd10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	781b      	ldrb	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1f5      	bne.n	800bd06 <USBD_GetLen+0x12>
  }

  return len;
 800bd1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3714      	adds	r7, #20
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr

0800bd28 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2202      	movs	r2, #2
 800bd38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	687a      	ldr	r2, [r7, #4]
 800bd46:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	68ba      	ldr	r2, [r7, #8]
 800bd4c:	2100      	movs	r1, #0
 800bd4e:	68f8      	ldr	r0, [r7, #12]
 800bd50:	f000 fcf9 	bl	800c746 <USBD_LL_Transmit>

  return USBD_OK;
 800bd54:	2300      	movs	r3, #0
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3710      	adds	r7, #16
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}

0800bd5e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bd5e:	b580      	push	{r7, lr}
 800bd60:	b084      	sub	sp, #16
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	60f8      	str	r0, [r7, #12]
 800bd66:	60b9      	str	r1, [r7, #8]
 800bd68:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	68ba      	ldr	r2, [r7, #8]
 800bd6e:	2100      	movs	r1, #0
 800bd70:	68f8      	ldr	r0, [r7, #12]
 800bd72:	f000 fce8 	bl	800c746 <USBD_LL_Transmit>

  return USBD_OK;
 800bd76:	2300      	movs	r3, #0
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3710      	adds	r7, #16
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2203      	movs	r2, #3
 800bd90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	68ba      	ldr	r2, [r7, #8]
 800bda8:	2100      	movs	r1, #0
 800bdaa:	68f8      	ldr	r0, [r7, #12]
 800bdac:	f000 fcec 	bl	800c788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bdb0:	2300      	movs	r3, #0
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3710      	adds	r7, #16
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b084      	sub	sp, #16
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	60f8      	str	r0, [r7, #12]
 800bdc2:	60b9      	str	r1, [r7, #8]
 800bdc4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	68ba      	ldr	r2, [r7, #8]
 800bdca:	2100      	movs	r1, #0
 800bdcc:	68f8      	ldr	r0, [r7, #12]
 800bdce:	f000 fcdb 	bl	800c788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bdd2:	2300      	movs	r3, #0
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3710      	adds	r7, #16
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2204      	movs	r2, #4
 800bde8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bdec:	2300      	movs	r3, #0
 800bdee:	2200      	movs	r2, #0
 800bdf0:	2100      	movs	r1, #0
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 fca7 	bl	800c746 <USBD_LL_Transmit>

  return USBD_OK;
 800bdf8:	2300      	movs	r3, #0
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3708      	adds	r7, #8
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800be02:	b580      	push	{r7, lr}
 800be04:	b082      	sub	sp, #8
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2205      	movs	r2, #5
 800be0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be12:	2300      	movs	r3, #0
 800be14:	2200      	movs	r2, #0
 800be16:	2100      	movs	r1, #0
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 fcb5 	bl	800c788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be1e:	2300      	movs	r3, #0
}
 800be20:	4618      	mov	r0, r3
 800be22:	3708      	adds	r7, #8
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800be2c:	2200      	movs	r2, #0
 800be2e:	4912      	ldr	r1, [pc, #72]	@ (800be78 <MX_USB_DEVICE_Init+0x50>)
 800be30:	4812      	ldr	r0, [pc, #72]	@ (800be7c <MX_USB_DEVICE_Init+0x54>)
 800be32:	f7fe fcf7 	bl	800a824 <USBD_Init>
 800be36:	4603      	mov	r3, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d001      	beq.n	800be40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800be3c:	f7f8 fcae 	bl	800479c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800be40:	490f      	ldr	r1, [pc, #60]	@ (800be80 <MX_USB_DEVICE_Init+0x58>)
 800be42:	480e      	ldr	r0, [pc, #56]	@ (800be7c <MX_USB_DEVICE_Init+0x54>)
 800be44:	f7fe fd1e 	bl	800a884 <USBD_RegisterClass>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d001      	beq.n	800be52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800be4e:	f7f8 fca5 	bl	800479c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800be52:	490c      	ldr	r1, [pc, #48]	@ (800be84 <MX_USB_DEVICE_Init+0x5c>)
 800be54:	4809      	ldr	r0, [pc, #36]	@ (800be7c <MX_USB_DEVICE_Init+0x54>)
 800be56:	f7fe fc15 	bl	800a684 <USBD_CDC_RegisterInterface>
 800be5a:	4603      	mov	r3, r0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d001      	beq.n	800be64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800be60:	f7f8 fc9c 	bl	800479c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800be64:	4805      	ldr	r0, [pc, #20]	@ (800be7c <MX_USB_DEVICE_Init+0x54>)
 800be66:	f7fe fd43 	bl	800a8f0 <USBD_Start>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d001      	beq.n	800be74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800be70:	f7f8 fc94 	bl	800479c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800be74:	bf00      	nop
 800be76:	bd80      	pop	{r7, pc}
 800be78:	200000ac 	.word	0x200000ac
 800be7c:	200004f8 	.word	0x200004f8
 800be80:	20000018 	.word	0x20000018
 800be84:	20000098 	.word	0x20000098

0800be88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800be8c:	2200      	movs	r2, #0
 800be8e:	4905      	ldr	r1, [pc, #20]	@ (800bea4 <CDC_Init_FS+0x1c>)
 800be90:	4805      	ldr	r0, [pc, #20]	@ (800bea8 <CDC_Init_FS+0x20>)
 800be92:	f7fe fc11 	bl	800a6b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800be96:	4905      	ldr	r1, [pc, #20]	@ (800beac <CDC_Init_FS+0x24>)
 800be98:	4803      	ldr	r0, [pc, #12]	@ (800bea8 <CDC_Init_FS+0x20>)
 800be9a:	f7fe fc2f 	bl	800a6fc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800be9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	20000fd4 	.word	0x20000fd4
 800bea8:	200004f8 	.word	0x200004f8
 800beac:	200007d4 	.word	0x200007d4

0800beb0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800beb0:	b480      	push	{r7}
 800beb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800beb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b083      	sub	sp, #12
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	4603      	mov	r3, r0
 800bec8:	6039      	str	r1, [r7, #0]
 800beca:	71fb      	strb	r3, [r7, #7]
 800becc:	4613      	mov	r3, r2
 800bece:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bed0:	79fb      	ldrb	r3, [r7, #7]
 800bed2:	2b23      	cmp	r3, #35	@ 0x23
 800bed4:	d84a      	bhi.n	800bf6c <CDC_Control_FS+0xac>
 800bed6:	a201      	add	r2, pc, #4	@ (adr r2, 800bedc <CDC_Control_FS+0x1c>)
 800bed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bedc:	0800bf6d 	.word	0x0800bf6d
 800bee0:	0800bf6d 	.word	0x0800bf6d
 800bee4:	0800bf6d 	.word	0x0800bf6d
 800bee8:	0800bf6d 	.word	0x0800bf6d
 800beec:	0800bf6d 	.word	0x0800bf6d
 800bef0:	0800bf6d 	.word	0x0800bf6d
 800bef4:	0800bf6d 	.word	0x0800bf6d
 800bef8:	0800bf6d 	.word	0x0800bf6d
 800befc:	0800bf6d 	.word	0x0800bf6d
 800bf00:	0800bf6d 	.word	0x0800bf6d
 800bf04:	0800bf6d 	.word	0x0800bf6d
 800bf08:	0800bf6d 	.word	0x0800bf6d
 800bf0c:	0800bf6d 	.word	0x0800bf6d
 800bf10:	0800bf6d 	.word	0x0800bf6d
 800bf14:	0800bf6d 	.word	0x0800bf6d
 800bf18:	0800bf6d 	.word	0x0800bf6d
 800bf1c:	0800bf6d 	.word	0x0800bf6d
 800bf20:	0800bf6d 	.word	0x0800bf6d
 800bf24:	0800bf6d 	.word	0x0800bf6d
 800bf28:	0800bf6d 	.word	0x0800bf6d
 800bf2c:	0800bf6d 	.word	0x0800bf6d
 800bf30:	0800bf6d 	.word	0x0800bf6d
 800bf34:	0800bf6d 	.word	0x0800bf6d
 800bf38:	0800bf6d 	.word	0x0800bf6d
 800bf3c:	0800bf6d 	.word	0x0800bf6d
 800bf40:	0800bf6d 	.word	0x0800bf6d
 800bf44:	0800bf6d 	.word	0x0800bf6d
 800bf48:	0800bf6d 	.word	0x0800bf6d
 800bf4c:	0800bf6d 	.word	0x0800bf6d
 800bf50:	0800bf6d 	.word	0x0800bf6d
 800bf54:	0800bf6d 	.word	0x0800bf6d
 800bf58:	0800bf6d 	.word	0x0800bf6d
 800bf5c:	0800bf6d 	.word	0x0800bf6d
 800bf60:	0800bf6d 	.word	0x0800bf6d
 800bf64:	0800bf6d 	.word	0x0800bf6d
 800bf68:	0800bf6d 	.word	0x0800bf6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bf6c:	bf00      	nop
  }

  return (USBD_OK);
 800bf6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	370c      	adds	r7, #12
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr

0800bf7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bf86:	6879      	ldr	r1, [r7, #4]
 800bf88:	480b      	ldr	r0, [pc, #44]	@ (800bfb8 <CDC_Receive_FS+0x3c>)
 800bf8a:	f7fe fbb7 	bl	800a6fc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bf8e:	480a      	ldr	r0, [pc, #40]	@ (800bfb8 <CDC_Receive_FS+0x3c>)
 800bf90:	f7fe fc12 	bl	800a7b8 <USBD_CDC_ReceivePacket>

  USB_CDC_RxHandler(UserRxBufferFS, *Len);
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4619      	mov	r1, r3
 800bf9a:	4808      	ldr	r0, [pc, #32]	@ (800bfbc <CDC_Receive_FS+0x40>)
 800bf9c:	f7f5 fcf2 	bl	8001984 <USB_CDC_RxHandler>
  memset(UserRxBufferFS, '\0', *Len);
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	2100      	movs	r1, #0
 800bfa8:	4804      	ldr	r0, [pc, #16]	@ (800bfbc <CDC_Receive_FS+0x40>)
 800bfaa:	f001 faae 	bl	800d50a <memset>

  return (USBD_OK);
 800bfae:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3708      	adds	r7, #8
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	200004f8 	.word	0x200004f8
 800bfbc:	200007d4 	.word	0x200007d4

0800bfc0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	460b      	mov	r3, r1
 800bfca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bfd0:	4b0d      	ldr	r3, [pc, #52]	@ (800c008 <CDC_Transmit_FS+0x48>)
 800bfd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bfd6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d001      	beq.n	800bfe6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e00b      	b.n	800bffe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bfe6:	887b      	ldrh	r3, [r7, #2]
 800bfe8:	461a      	mov	r2, r3
 800bfea:	6879      	ldr	r1, [r7, #4]
 800bfec:	4806      	ldr	r0, [pc, #24]	@ (800c008 <CDC_Transmit_FS+0x48>)
 800bfee:	f7fe fb63 	bl	800a6b8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bff2:	4805      	ldr	r0, [pc, #20]	@ (800c008 <CDC_Transmit_FS+0x48>)
 800bff4:	f7fe fba0 	bl	800a738 <USBD_CDC_TransmitPacket>
 800bff8:	4603      	mov	r3, r0
 800bffa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bffc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3710      	adds	r7, #16
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	200004f8 	.word	0x200004f8

0800c00c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b087      	sub	sp, #28
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	4613      	mov	r3, r2
 800c018:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c01a:	2300      	movs	r3, #0
 800c01c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c01e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c022:	4618      	mov	r0, r3
 800c024:	371c      	adds	r7, #28
 800c026:	46bd      	mov	sp, r7
 800c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02c:	4770      	bx	lr
	...

0800c030 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
 800c036:	4603      	mov	r3, r0
 800c038:	6039      	str	r1, [r7, #0]
 800c03a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	2212      	movs	r2, #18
 800c040:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c042:	4b03      	ldr	r3, [pc, #12]	@ (800c050 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c044:	4618      	mov	r0, r3
 800c046:	370c      	adds	r7, #12
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr
 800c050:	200000c8 	.word	0x200000c8

0800c054 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c054:	b480      	push	{r7}
 800c056:	b083      	sub	sp, #12
 800c058:	af00      	add	r7, sp, #0
 800c05a:	4603      	mov	r3, r0
 800c05c:	6039      	str	r1, [r7, #0]
 800c05e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	2204      	movs	r2, #4
 800c064:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c066:	4b03      	ldr	r3, [pc, #12]	@ (800c074 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c068:	4618      	mov	r0, r3
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr
 800c074:	200000dc 	.word	0x200000dc

0800c078 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	4603      	mov	r3, r0
 800c080:	6039      	str	r1, [r7, #0]
 800c082:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c084:	79fb      	ldrb	r3, [r7, #7]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d105      	bne.n	800c096 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c08a:	683a      	ldr	r2, [r7, #0]
 800c08c:	4907      	ldr	r1, [pc, #28]	@ (800c0ac <USBD_FS_ProductStrDescriptor+0x34>)
 800c08e:	4808      	ldr	r0, [pc, #32]	@ (800c0b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c090:	f7ff fdde 	bl	800bc50 <USBD_GetString>
 800c094:	e004      	b.n	800c0a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c096:	683a      	ldr	r2, [r7, #0]
 800c098:	4904      	ldr	r1, [pc, #16]	@ (800c0ac <USBD_FS_ProductStrDescriptor+0x34>)
 800c09a:	4805      	ldr	r0, [pc, #20]	@ (800c0b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c09c:	f7ff fdd8 	bl	800bc50 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c0a0:	4b02      	ldr	r3, [pc, #8]	@ (800c0ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3708      	adds	r7, #8
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	200017d4 	.word	0x200017d4
 800c0b0:	0800f1c0 	.word	0x0800f1c0

0800c0b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b082      	sub	sp, #8
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	6039      	str	r1, [r7, #0]
 800c0be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c0c0:	683a      	ldr	r2, [r7, #0]
 800c0c2:	4904      	ldr	r1, [pc, #16]	@ (800c0d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c0c4:	4804      	ldr	r0, [pc, #16]	@ (800c0d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c0c6:	f7ff fdc3 	bl	800bc50 <USBD_GetString>
  return USBD_StrDesc;
 800c0ca:	4b02      	ldr	r3, [pc, #8]	@ (800c0d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3708      	adds	r7, #8
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	200017d4 	.word	0x200017d4
 800c0d8:	0800f1d8 	.word	0x0800f1d8

0800c0dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	6039      	str	r1, [r7, #0]
 800c0e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	221a      	movs	r2, #26
 800c0ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c0ee:	f000 f843 	bl	800c178 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c0f2:	4b02      	ldr	r3, [pc, #8]	@ (800c0fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3708      	adds	r7, #8
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	200000e0 	.word	0x200000e0

0800c100 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	4603      	mov	r3, r0
 800c108:	6039      	str	r1, [r7, #0]
 800c10a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c10c:	79fb      	ldrb	r3, [r7, #7]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d105      	bne.n	800c11e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c112:	683a      	ldr	r2, [r7, #0]
 800c114:	4907      	ldr	r1, [pc, #28]	@ (800c134 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c116:	4808      	ldr	r0, [pc, #32]	@ (800c138 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c118:	f7ff fd9a 	bl	800bc50 <USBD_GetString>
 800c11c:	e004      	b.n	800c128 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c11e:	683a      	ldr	r2, [r7, #0]
 800c120:	4904      	ldr	r1, [pc, #16]	@ (800c134 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c122:	4805      	ldr	r0, [pc, #20]	@ (800c138 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c124:	f7ff fd94 	bl	800bc50 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c128:	4b02      	ldr	r3, [pc, #8]	@ (800c134 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3708      	adds	r7, #8
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	200017d4 	.word	0x200017d4
 800c138:	0800f1ec 	.word	0x0800f1ec

0800c13c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	4603      	mov	r3, r0
 800c144:	6039      	str	r1, [r7, #0]
 800c146:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c148:	79fb      	ldrb	r3, [r7, #7]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d105      	bne.n	800c15a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c14e:	683a      	ldr	r2, [r7, #0]
 800c150:	4907      	ldr	r1, [pc, #28]	@ (800c170 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c152:	4808      	ldr	r0, [pc, #32]	@ (800c174 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c154:	f7ff fd7c 	bl	800bc50 <USBD_GetString>
 800c158:	e004      	b.n	800c164 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c15a:	683a      	ldr	r2, [r7, #0]
 800c15c:	4904      	ldr	r1, [pc, #16]	@ (800c170 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c15e:	4805      	ldr	r0, [pc, #20]	@ (800c174 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c160:	f7ff fd76 	bl	800bc50 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c164:	4b02      	ldr	r3, [pc, #8]	@ (800c170 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c166:	4618      	mov	r0, r3
 800c168:	3708      	adds	r7, #8
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	200017d4 	.word	0x200017d4
 800c174:	0800f1f8 	.word	0x0800f1f8

0800c178 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c17e:	4b0f      	ldr	r3, [pc, #60]	@ (800c1bc <Get_SerialNum+0x44>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c184:	4b0e      	ldr	r3, [pc, #56]	@ (800c1c0 <Get_SerialNum+0x48>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c18a:	4b0e      	ldr	r3, [pc, #56]	@ (800c1c4 <Get_SerialNum+0x4c>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c190:	68fa      	ldr	r2, [r7, #12]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4413      	add	r3, r2
 800c196:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d009      	beq.n	800c1b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c19e:	2208      	movs	r2, #8
 800c1a0:	4909      	ldr	r1, [pc, #36]	@ (800c1c8 <Get_SerialNum+0x50>)
 800c1a2:	68f8      	ldr	r0, [r7, #12]
 800c1a4:	f000 f814 	bl	800c1d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c1a8:	2204      	movs	r2, #4
 800c1aa:	4908      	ldr	r1, [pc, #32]	@ (800c1cc <Get_SerialNum+0x54>)
 800c1ac:	68b8      	ldr	r0, [r7, #8]
 800c1ae:	f000 f80f 	bl	800c1d0 <IntToUnicode>
  }
}
 800c1b2:	bf00      	nop
 800c1b4:	3710      	adds	r7, #16
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	1fff7a10 	.word	0x1fff7a10
 800c1c0:	1fff7a14 	.word	0x1fff7a14
 800c1c4:	1fff7a18 	.word	0x1fff7a18
 800c1c8:	200000e2 	.word	0x200000e2
 800c1cc:	200000f2 	.word	0x200000f2

0800c1d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b087      	sub	sp, #28
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	60f8      	str	r0, [r7, #12]
 800c1d8:	60b9      	str	r1, [r7, #8]
 800c1da:	4613      	mov	r3, r2
 800c1dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	75fb      	strb	r3, [r7, #23]
 800c1e6:	e027      	b.n	800c238 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	0f1b      	lsrs	r3, r3, #28
 800c1ec:	2b09      	cmp	r3, #9
 800c1ee:	d80b      	bhi.n	800c208 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	0f1b      	lsrs	r3, r3, #28
 800c1f4:	b2da      	uxtb	r2, r3
 800c1f6:	7dfb      	ldrb	r3, [r7, #23]
 800c1f8:	005b      	lsls	r3, r3, #1
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	440b      	add	r3, r1
 800c200:	3230      	adds	r2, #48	@ 0x30
 800c202:	b2d2      	uxtb	r2, r2
 800c204:	701a      	strb	r2, [r3, #0]
 800c206:	e00a      	b.n	800c21e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	0f1b      	lsrs	r3, r3, #28
 800c20c:	b2da      	uxtb	r2, r3
 800c20e:	7dfb      	ldrb	r3, [r7, #23]
 800c210:	005b      	lsls	r3, r3, #1
 800c212:	4619      	mov	r1, r3
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	440b      	add	r3, r1
 800c218:	3237      	adds	r2, #55	@ 0x37
 800c21a:	b2d2      	uxtb	r2, r2
 800c21c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	011b      	lsls	r3, r3, #4
 800c222:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c224:	7dfb      	ldrb	r3, [r7, #23]
 800c226:	005b      	lsls	r3, r3, #1
 800c228:	3301      	adds	r3, #1
 800c22a:	68ba      	ldr	r2, [r7, #8]
 800c22c:	4413      	add	r3, r2
 800c22e:	2200      	movs	r2, #0
 800c230:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c232:	7dfb      	ldrb	r3, [r7, #23]
 800c234:	3301      	adds	r3, #1
 800c236:	75fb      	strb	r3, [r7, #23]
 800c238:	7dfa      	ldrb	r2, [r7, #23]
 800c23a:	79fb      	ldrb	r3, [r7, #7]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d3d3      	bcc.n	800c1e8 <IntToUnicode+0x18>
  }
}
 800c240:	bf00      	nop
 800c242:	bf00      	nop
 800c244:	371c      	adds	r7, #28
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr
	...

0800c250 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b08a      	sub	sp, #40	@ 0x28
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c258:	f107 0314 	add.w	r3, r7, #20
 800c25c:	2200      	movs	r2, #0
 800c25e:	601a      	str	r2, [r3, #0]
 800c260:	605a      	str	r2, [r3, #4]
 800c262:	609a      	str	r2, [r3, #8]
 800c264:	60da      	str	r2, [r3, #12]
 800c266:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c270:	d13a      	bne.n	800c2e8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c272:	2300      	movs	r3, #0
 800c274:	613b      	str	r3, [r7, #16]
 800c276:	4b1e      	ldr	r3, [pc, #120]	@ (800c2f0 <HAL_PCD_MspInit+0xa0>)
 800c278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c27a:	4a1d      	ldr	r2, [pc, #116]	@ (800c2f0 <HAL_PCD_MspInit+0xa0>)
 800c27c:	f043 0301 	orr.w	r3, r3, #1
 800c280:	6313      	str	r3, [r2, #48]	@ 0x30
 800c282:	4b1b      	ldr	r3, [pc, #108]	@ (800c2f0 <HAL_PCD_MspInit+0xa0>)
 800c284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c286:	f003 0301 	and.w	r3, r3, #1
 800c28a:	613b      	str	r3, [r7, #16]
 800c28c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c28e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c294:	2302      	movs	r3, #2
 800c296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c298:	2300      	movs	r3, #0
 800c29a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c29c:	2303      	movs	r3, #3
 800c29e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c2a0:	230a      	movs	r3, #10
 800c2a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2a4:	f107 0314 	add.w	r3, r7, #20
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	4812      	ldr	r0, [pc, #72]	@ (800c2f4 <HAL_PCD_MspInit+0xa4>)
 800c2ac:	f7f8 febe 	bl	800502c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c2b0:	4b0f      	ldr	r3, [pc, #60]	@ (800c2f0 <HAL_PCD_MspInit+0xa0>)
 800c2b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2b4:	4a0e      	ldr	r2, [pc, #56]	@ (800c2f0 <HAL_PCD_MspInit+0xa0>)
 800c2b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2ba:	6353      	str	r3, [r2, #52]	@ 0x34
 800c2bc:	2300      	movs	r3, #0
 800c2be:	60fb      	str	r3, [r7, #12]
 800c2c0:	4b0b      	ldr	r3, [pc, #44]	@ (800c2f0 <HAL_PCD_MspInit+0xa0>)
 800c2c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2c4:	4a0a      	ldr	r2, [pc, #40]	@ (800c2f0 <HAL_PCD_MspInit+0xa0>)
 800c2c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c2ca:	6453      	str	r3, [r2, #68]	@ 0x44
 800c2cc:	4b08      	ldr	r3, [pc, #32]	@ (800c2f0 <HAL_PCD_MspInit+0xa0>)
 800c2ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c2d4:	60fb      	str	r3, [r7, #12]
 800c2d6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 800c2d8:	2200      	movs	r2, #0
 800c2da:	2101      	movs	r1, #1
 800c2dc:	2043      	movs	r0, #67	@ 0x43
 800c2de:	f7f8 fe6e 	bl	8004fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c2e2:	2043      	movs	r0, #67	@ 0x43
 800c2e4:	f7f8 fe87 	bl	8004ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c2e8:	bf00      	nop
 800c2ea:	3728      	adds	r7, #40	@ 0x28
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	40023800 	.word	0x40023800
 800c2f4:	40020000 	.word	0x40020000

0800c2f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c30c:	4619      	mov	r1, r3
 800c30e:	4610      	mov	r0, r2
 800c310:	f7fe fb3b 	bl	800a98a <USBD_LL_SetupStage>
}
 800c314:	bf00      	nop
 800c316:	3708      	adds	r7, #8
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b082      	sub	sp, #8
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	460b      	mov	r3, r1
 800c326:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c32e:	78fa      	ldrb	r2, [r7, #3]
 800c330:	6879      	ldr	r1, [r7, #4]
 800c332:	4613      	mov	r3, r2
 800c334:	00db      	lsls	r3, r3, #3
 800c336:	4413      	add	r3, r2
 800c338:	009b      	lsls	r3, r3, #2
 800c33a:	440b      	add	r3, r1
 800c33c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	78fb      	ldrb	r3, [r7, #3]
 800c344:	4619      	mov	r1, r3
 800c346:	f7fe fb75 	bl	800aa34 <USBD_LL_DataOutStage>
}
 800c34a:	bf00      	nop
 800c34c:	3708      	adds	r7, #8
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b082      	sub	sp, #8
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
 800c35a:	460b      	mov	r3, r1
 800c35c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c364:	78fa      	ldrb	r2, [r7, #3]
 800c366:	6879      	ldr	r1, [r7, #4]
 800c368:	4613      	mov	r3, r2
 800c36a:	00db      	lsls	r3, r3, #3
 800c36c:	4413      	add	r3, r2
 800c36e:	009b      	lsls	r3, r3, #2
 800c370:	440b      	add	r3, r1
 800c372:	3320      	adds	r3, #32
 800c374:	681a      	ldr	r2, [r3, #0]
 800c376:	78fb      	ldrb	r3, [r7, #3]
 800c378:	4619      	mov	r1, r3
 800c37a:	f7fe fc0e 	bl	800ab9a <USBD_LL_DataInStage>
}
 800c37e:	bf00      	nop
 800c380:	3708      	adds	r7, #8
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}

0800c386 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c386:	b580      	push	{r7, lr}
 800c388:	b082      	sub	sp, #8
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c394:	4618      	mov	r0, r3
 800c396:	f7fe fd48 	bl	800ae2a <USBD_LL_SOF>
}
 800c39a:	bf00      	nop
 800c39c:	3708      	adds	r7, #8
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}

0800c3a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3a2:	b580      	push	{r7, lr}
 800c3a4:	b084      	sub	sp, #16
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	79db      	ldrb	r3, [r3, #7]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d102      	bne.n	800c3bc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	73fb      	strb	r3, [r7, #15]
 800c3ba:	e008      	b.n	800c3ce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	79db      	ldrb	r3, [r3, #7]
 800c3c0:	2b02      	cmp	r3, #2
 800c3c2:	d102      	bne.n	800c3ca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	73fb      	strb	r3, [r7, #15]
 800c3c8:	e001      	b.n	800c3ce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c3ca:	f7f8 f9e7 	bl	800479c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c3d4:	7bfa      	ldrb	r2, [r7, #15]
 800c3d6:	4611      	mov	r1, r2
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7fe fce2 	bl	800ada2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7fe fc8a 	bl	800acfe <USBD_LL_Reset>
}
 800c3ea:	bf00      	nop
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
	...

0800c3f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c402:	4618      	mov	r0, r3
 800c404:	f7fe fcdd 	bl	800adc2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	6812      	ldr	r2, [r2, #0]
 800c416:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c41a:	f043 0301 	orr.w	r3, r3, #1
 800c41e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	7adb      	ldrb	r3, [r3, #11]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d005      	beq.n	800c434 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c428:	4b04      	ldr	r3, [pc, #16]	@ (800c43c <HAL_PCD_SuspendCallback+0x48>)
 800c42a:	691b      	ldr	r3, [r3, #16]
 800c42c:	4a03      	ldr	r2, [pc, #12]	@ (800c43c <HAL_PCD_SuspendCallback+0x48>)
 800c42e:	f043 0306 	orr.w	r3, r3, #6
 800c432:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c434:	bf00      	nop
 800c436:	3708      	adds	r7, #8
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	e000ed00 	.word	0xe000ed00

0800c440 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c44e:	4618      	mov	r0, r3
 800c450:	f7fe fcd3 	bl	800adfa <USBD_LL_Resume>
}
 800c454:	bf00      	nop
 800c456:	3708      	adds	r7, #8
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	460b      	mov	r3, r1
 800c466:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c46e:	78fa      	ldrb	r2, [r7, #3]
 800c470:	4611      	mov	r1, r2
 800c472:	4618      	mov	r0, r3
 800c474:	f7fe fd2b 	bl	800aece <USBD_LL_IsoOUTIncomplete>
}
 800c478:	bf00      	nop
 800c47a:	3708      	adds	r7, #8
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	460b      	mov	r3, r1
 800c48a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c492:	78fa      	ldrb	r2, [r7, #3]
 800c494:	4611      	mov	r1, r2
 800c496:	4618      	mov	r0, r3
 800c498:	f7fe fce7 	bl	800ae6a <USBD_LL_IsoINIncomplete>
}
 800c49c:	bf00      	nop
 800c49e:	3708      	adds	r7, #8
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7fe fd3d 	bl	800af32 <USBD_LL_DevConnected>
}
 800c4b8:	bf00      	nop
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7fe fd3a 	bl	800af48 <USBD_LL_DevDisconnected>
}
 800c4d4:	bf00      	nop
 800c4d6:	3708      	adds	r7, #8
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d13c      	bne.n	800c566 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c4ec:	4a20      	ldr	r2, [pc, #128]	@ (800c570 <USBD_LL_Init+0x94>)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	4a1e      	ldr	r2, [pc, #120]	@ (800c570 <USBD_LL_Init+0x94>)
 800c4f8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c4fc:	4b1c      	ldr	r3, [pc, #112]	@ (800c570 <USBD_LL_Init+0x94>)
 800c4fe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c502:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c504:	4b1a      	ldr	r3, [pc, #104]	@ (800c570 <USBD_LL_Init+0x94>)
 800c506:	2204      	movs	r2, #4
 800c508:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c50a:	4b19      	ldr	r3, [pc, #100]	@ (800c570 <USBD_LL_Init+0x94>)
 800c50c:	2202      	movs	r2, #2
 800c50e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c510:	4b17      	ldr	r3, [pc, #92]	@ (800c570 <USBD_LL_Init+0x94>)
 800c512:	2200      	movs	r2, #0
 800c514:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c516:	4b16      	ldr	r3, [pc, #88]	@ (800c570 <USBD_LL_Init+0x94>)
 800c518:	2202      	movs	r2, #2
 800c51a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c51c:	4b14      	ldr	r3, [pc, #80]	@ (800c570 <USBD_LL_Init+0x94>)
 800c51e:	2200      	movs	r2, #0
 800c520:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c522:	4b13      	ldr	r3, [pc, #76]	@ (800c570 <USBD_LL_Init+0x94>)
 800c524:	2200      	movs	r2, #0
 800c526:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c528:	4b11      	ldr	r3, [pc, #68]	@ (800c570 <USBD_LL_Init+0x94>)
 800c52a:	2200      	movs	r2, #0
 800c52c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c52e:	4b10      	ldr	r3, [pc, #64]	@ (800c570 <USBD_LL_Init+0x94>)
 800c530:	2200      	movs	r2, #0
 800c532:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c534:	4b0e      	ldr	r3, [pc, #56]	@ (800c570 <USBD_LL_Init+0x94>)
 800c536:	2200      	movs	r2, #0
 800c538:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c53a:	480d      	ldr	r0, [pc, #52]	@ (800c570 <USBD_LL_Init+0x94>)
 800c53c:	f7f8 ff12 	bl	8005364 <HAL_PCD_Init>
 800c540:	4603      	mov	r3, r0
 800c542:	2b00      	cmp	r3, #0
 800c544:	d001      	beq.n	800c54a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c546:	f7f8 f929 	bl	800479c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c54a:	2180      	movs	r1, #128	@ 0x80
 800c54c:	4808      	ldr	r0, [pc, #32]	@ (800c570 <USBD_LL_Init+0x94>)
 800c54e:	f7fa f93e 	bl	80067ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c552:	2240      	movs	r2, #64	@ 0x40
 800c554:	2100      	movs	r1, #0
 800c556:	4806      	ldr	r0, [pc, #24]	@ (800c570 <USBD_LL_Init+0x94>)
 800c558:	f7fa f8f2 	bl	8006740 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c55c:	2280      	movs	r2, #128	@ 0x80
 800c55e:	2101      	movs	r1, #1
 800c560:	4803      	ldr	r0, [pc, #12]	@ (800c570 <USBD_LL_Init+0x94>)
 800c562:	f7fa f8ed 	bl	8006740 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c566:	2300      	movs	r3, #0
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3708      	adds	r7, #8
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	200019d4 	.word	0x200019d4

0800c574 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c57c:	2300      	movs	r3, #0
 800c57e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c580:	2300      	movs	r3, #0
 800c582:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7f8 fff9 	bl	8005582 <HAL_PCD_Start>
 800c590:	4603      	mov	r3, r0
 800c592:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c594:	7bfb      	ldrb	r3, [r7, #15]
 800c596:	4618      	mov	r0, r3
 800c598:	f000 f942 	bl	800c820 <USBD_Get_USB_Status>
 800c59c:	4603      	mov	r3, r0
 800c59e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3710      	adds	r7, #16
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}

0800c5aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c5aa:	b580      	push	{r7, lr}
 800c5ac:	b084      	sub	sp, #16
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
 800c5b2:	4608      	mov	r0, r1
 800c5b4:	4611      	mov	r1, r2
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	70fb      	strb	r3, [r7, #3]
 800c5bc:	460b      	mov	r3, r1
 800c5be:	70bb      	strb	r3, [r7, #2]
 800c5c0:	4613      	mov	r3, r2
 800c5c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c5d2:	78bb      	ldrb	r3, [r7, #2]
 800c5d4:	883a      	ldrh	r2, [r7, #0]
 800c5d6:	78f9      	ldrb	r1, [r7, #3]
 800c5d8:	f7f9 fccd 	bl	8005f76 <HAL_PCD_EP_Open>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5e0:	7bfb      	ldrb	r3, [r7, #15]
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f000 f91c 	bl	800c820 <USBD_Get_USB_Status>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3710      	adds	r7, #16
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}

0800c5f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5f6:	b580      	push	{r7, lr}
 800c5f8:	b084      	sub	sp, #16
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
 800c5fe:	460b      	mov	r3, r1
 800c600:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c602:	2300      	movs	r3, #0
 800c604:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c606:	2300      	movs	r3, #0
 800c608:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c610:	78fa      	ldrb	r2, [r7, #3]
 800c612:	4611      	mov	r1, r2
 800c614:	4618      	mov	r0, r3
 800c616:	f7f9 fd18 	bl	800604a <HAL_PCD_EP_Close>
 800c61a:	4603      	mov	r3, r0
 800c61c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c61e:	7bfb      	ldrb	r3, [r7, #15]
 800c620:	4618      	mov	r0, r3
 800c622:	f000 f8fd 	bl	800c820 <USBD_Get_USB_Status>
 800c626:	4603      	mov	r3, r0
 800c628:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c62a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	460b      	mov	r3, r1
 800c63e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c640:	2300      	movs	r3, #0
 800c642:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c644:	2300      	movs	r3, #0
 800c646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c64e:	78fa      	ldrb	r2, [r7, #3]
 800c650:	4611      	mov	r1, r2
 800c652:	4618      	mov	r0, r3
 800c654:	f7f9 fdd0 	bl	80061f8 <HAL_PCD_EP_SetStall>
 800c658:	4603      	mov	r3, r0
 800c65a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c65c:	7bfb      	ldrb	r3, [r7, #15]
 800c65e:	4618      	mov	r0, r3
 800c660:	f000 f8de 	bl	800c820 <USBD_Get_USB_Status>
 800c664:	4603      	mov	r3, r0
 800c666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c668:	7bbb      	ldrb	r3, [r7, #14]
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3710      	adds	r7, #16
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}

0800c672 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c672:	b580      	push	{r7, lr}
 800c674:	b084      	sub	sp, #16
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
 800c67a:	460b      	mov	r3, r1
 800c67c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c67e:	2300      	movs	r3, #0
 800c680:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c682:	2300      	movs	r3, #0
 800c684:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c68c:	78fa      	ldrb	r2, [r7, #3]
 800c68e:	4611      	mov	r1, r2
 800c690:	4618      	mov	r0, r3
 800c692:	f7f9 fe14 	bl	80062be <HAL_PCD_EP_ClrStall>
 800c696:	4603      	mov	r3, r0
 800c698:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c69a:	7bfb      	ldrb	r3, [r7, #15]
 800c69c:	4618      	mov	r0, r3
 800c69e:	f000 f8bf 	bl	800c820 <USBD_Get_USB_Status>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3710      	adds	r7, #16
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c6c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c6c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	da0b      	bge.n	800c6e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c6cc:	78fb      	ldrb	r3, [r7, #3]
 800c6ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c6d2:	68f9      	ldr	r1, [r7, #12]
 800c6d4:	4613      	mov	r3, r2
 800c6d6:	00db      	lsls	r3, r3, #3
 800c6d8:	4413      	add	r3, r2
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	440b      	add	r3, r1
 800c6de:	3316      	adds	r3, #22
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	e00b      	b.n	800c6fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c6e4:	78fb      	ldrb	r3, [r7, #3]
 800c6e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c6ea:	68f9      	ldr	r1, [r7, #12]
 800c6ec:	4613      	mov	r3, r2
 800c6ee:	00db      	lsls	r3, r3, #3
 800c6f0:	4413      	add	r3, r2
 800c6f2:	009b      	lsls	r3, r3, #2
 800c6f4:	440b      	add	r3, r1
 800c6f6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c6fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3714      	adds	r7, #20
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr

0800c708 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	460b      	mov	r3, r1
 800c712:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c714:	2300      	movs	r3, #0
 800c716:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c718:	2300      	movs	r3, #0
 800c71a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c722:	78fa      	ldrb	r2, [r7, #3]
 800c724:	4611      	mov	r1, r2
 800c726:	4618      	mov	r0, r3
 800c728:	f7f9 fc01 	bl	8005f2e <HAL_PCD_SetAddress>
 800c72c:	4603      	mov	r3, r0
 800c72e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c730:	7bfb      	ldrb	r3, [r7, #15]
 800c732:	4618      	mov	r0, r3
 800c734:	f000 f874 	bl	800c820 <USBD_Get_USB_Status>
 800c738:	4603      	mov	r3, r0
 800c73a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c73c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c746:	b580      	push	{r7, lr}
 800c748:	b086      	sub	sp, #24
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	60f8      	str	r0, [r7, #12]
 800c74e:	607a      	str	r2, [r7, #4]
 800c750:	603b      	str	r3, [r7, #0]
 800c752:	460b      	mov	r3, r1
 800c754:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c756:	2300      	movs	r3, #0
 800c758:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c75a:	2300      	movs	r3, #0
 800c75c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c764:	7af9      	ldrb	r1, [r7, #11]
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	687a      	ldr	r2, [r7, #4]
 800c76a:	f7f9 fd0b 	bl	8006184 <HAL_PCD_EP_Transmit>
 800c76e:	4603      	mov	r3, r0
 800c770:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c772:	7dfb      	ldrb	r3, [r7, #23]
 800c774:	4618      	mov	r0, r3
 800c776:	f000 f853 	bl	800c820 <USBD_Get_USB_Status>
 800c77a:	4603      	mov	r3, r0
 800c77c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c77e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c780:	4618      	mov	r0, r3
 800c782:	3718      	adds	r7, #24
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b086      	sub	sp, #24
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	607a      	str	r2, [r7, #4]
 800c792:	603b      	str	r3, [r7, #0]
 800c794:	460b      	mov	r3, r1
 800c796:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c798:	2300      	movs	r3, #0
 800c79a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c79c:	2300      	movs	r3, #0
 800c79e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c7a6:	7af9      	ldrb	r1, [r7, #11]
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	f7f9 fc97 	bl	80060de <HAL_PCD_EP_Receive>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7b4:	7dfb      	ldrb	r3, [r7, #23]
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f000 f832 	bl	800c820 <USBD_Get_USB_Status>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c7c0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3718      	adds	r7, #24
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}

0800c7ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7ca:	b580      	push	{r7, lr}
 800c7cc:	b082      	sub	sp, #8
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
 800c7d2:	460b      	mov	r3, r1
 800c7d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c7dc:	78fa      	ldrb	r2, [r7, #3]
 800c7de:	4611      	mov	r1, r2
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7f9 fcb7 	bl	8006154 <HAL_PCD_EP_GetRxCount>
 800c7e6:	4603      	mov	r3, r0
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3708      	adds	r7, #8
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b083      	sub	sp, #12
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c7f8:	4b03      	ldr	r3, [pc, #12]	@ (800c808 <USBD_static_malloc+0x18>)
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	370c      	adds	r7, #12
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr
 800c806:	bf00      	nop
 800c808:	20001eb8 	.word	0x20001eb8

0800c80c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b083      	sub	sp, #12
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]

}
 800c814:	bf00      	nop
 800c816:	370c      	adds	r7, #12
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c820:	b480      	push	{r7}
 800c822:	b085      	sub	sp, #20
 800c824:	af00      	add	r7, sp, #0
 800c826:	4603      	mov	r3, r0
 800c828:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c82a:	2300      	movs	r3, #0
 800c82c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c82e:	79fb      	ldrb	r3, [r7, #7]
 800c830:	2b03      	cmp	r3, #3
 800c832:	d817      	bhi.n	800c864 <USBD_Get_USB_Status+0x44>
 800c834:	a201      	add	r2, pc, #4	@ (adr r2, 800c83c <USBD_Get_USB_Status+0x1c>)
 800c836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c83a:	bf00      	nop
 800c83c:	0800c84d 	.word	0x0800c84d
 800c840:	0800c853 	.word	0x0800c853
 800c844:	0800c859 	.word	0x0800c859
 800c848:	0800c85f 	.word	0x0800c85f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c84c:	2300      	movs	r3, #0
 800c84e:	73fb      	strb	r3, [r7, #15]
    break;
 800c850:	e00b      	b.n	800c86a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c852:	2303      	movs	r3, #3
 800c854:	73fb      	strb	r3, [r7, #15]
    break;
 800c856:	e008      	b.n	800c86a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c858:	2301      	movs	r3, #1
 800c85a:	73fb      	strb	r3, [r7, #15]
    break;
 800c85c:	e005      	b.n	800c86a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c85e:	2303      	movs	r3, #3
 800c860:	73fb      	strb	r3, [r7, #15]
    break;
 800c862:	e002      	b.n	800c86a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c864:	2303      	movs	r3, #3
 800c866:	73fb      	strb	r3, [r7, #15]
    break;
 800c868:	bf00      	nop
  }
  return usb_status;
 800c86a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3714      	adds	r7, #20
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr

0800c878 <__assert_func>:
 800c878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c87a:	4614      	mov	r4, r2
 800c87c:	461a      	mov	r2, r3
 800c87e:	4b09      	ldr	r3, [pc, #36]	@ (800c8a4 <__assert_func+0x2c>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	4605      	mov	r5, r0
 800c884:	68d8      	ldr	r0, [r3, #12]
 800c886:	b14c      	cbz	r4, 800c89c <__assert_func+0x24>
 800c888:	4b07      	ldr	r3, [pc, #28]	@ (800c8a8 <__assert_func+0x30>)
 800c88a:	9100      	str	r1, [sp, #0]
 800c88c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c890:	4906      	ldr	r1, [pc, #24]	@ (800c8ac <__assert_func+0x34>)
 800c892:	462b      	mov	r3, r5
 800c894:	f000 fdc6 	bl	800d424 <fiprintf>
 800c898:	f000 fed5 	bl	800d646 <abort>
 800c89c:	4b04      	ldr	r3, [pc, #16]	@ (800c8b0 <__assert_func+0x38>)
 800c89e:	461c      	mov	r4, r3
 800c8a0:	e7f3      	b.n	800c88a <__assert_func+0x12>
 800c8a2:	bf00      	nop
 800c8a4:	20000108 	.word	0x20000108
 800c8a8:	0800f27c 	.word	0x0800f27c
 800c8ac:	0800f289 	.word	0x0800f289
 800c8b0:	0800f2b7 	.word	0x0800f2b7

0800c8b4 <malloc>:
 800c8b4:	4b02      	ldr	r3, [pc, #8]	@ (800c8c0 <malloc+0xc>)
 800c8b6:	4601      	mov	r1, r0
 800c8b8:	6818      	ldr	r0, [r3, #0]
 800c8ba:	f000 b82d 	b.w	800c918 <_malloc_r>
 800c8be:	bf00      	nop
 800c8c0:	20000108 	.word	0x20000108

0800c8c4 <free>:
 800c8c4:	4b02      	ldr	r3, [pc, #8]	@ (800c8d0 <free+0xc>)
 800c8c6:	4601      	mov	r1, r0
 800c8c8:	6818      	ldr	r0, [r3, #0]
 800c8ca:	f001 bd1d 	b.w	800e308 <_free_r>
 800c8ce:	bf00      	nop
 800c8d0:	20000108 	.word	0x20000108

0800c8d4 <sbrk_aligned>:
 800c8d4:	b570      	push	{r4, r5, r6, lr}
 800c8d6:	4e0f      	ldr	r6, [pc, #60]	@ (800c914 <sbrk_aligned+0x40>)
 800c8d8:	460c      	mov	r4, r1
 800c8da:	6831      	ldr	r1, [r6, #0]
 800c8dc:	4605      	mov	r5, r0
 800c8de:	b911      	cbnz	r1, 800c8e6 <sbrk_aligned+0x12>
 800c8e0:	f000 fe54 	bl	800d58c <_sbrk_r>
 800c8e4:	6030      	str	r0, [r6, #0]
 800c8e6:	4621      	mov	r1, r4
 800c8e8:	4628      	mov	r0, r5
 800c8ea:	f000 fe4f 	bl	800d58c <_sbrk_r>
 800c8ee:	1c43      	adds	r3, r0, #1
 800c8f0:	d103      	bne.n	800c8fa <sbrk_aligned+0x26>
 800c8f2:	f04f 34ff 	mov.w	r4, #4294967295
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	bd70      	pop	{r4, r5, r6, pc}
 800c8fa:	1cc4      	adds	r4, r0, #3
 800c8fc:	f024 0403 	bic.w	r4, r4, #3
 800c900:	42a0      	cmp	r0, r4
 800c902:	d0f8      	beq.n	800c8f6 <sbrk_aligned+0x22>
 800c904:	1a21      	subs	r1, r4, r0
 800c906:	4628      	mov	r0, r5
 800c908:	f000 fe40 	bl	800d58c <_sbrk_r>
 800c90c:	3001      	adds	r0, #1
 800c90e:	d1f2      	bne.n	800c8f6 <sbrk_aligned+0x22>
 800c910:	e7ef      	b.n	800c8f2 <sbrk_aligned+0x1e>
 800c912:	bf00      	nop
 800c914:	200020d8 	.word	0x200020d8

0800c918 <_malloc_r>:
 800c918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c91c:	1ccd      	adds	r5, r1, #3
 800c91e:	f025 0503 	bic.w	r5, r5, #3
 800c922:	3508      	adds	r5, #8
 800c924:	2d0c      	cmp	r5, #12
 800c926:	bf38      	it	cc
 800c928:	250c      	movcc	r5, #12
 800c92a:	2d00      	cmp	r5, #0
 800c92c:	4606      	mov	r6, r0
 800c92e:	db01      	blt.n	800c934 <_malloc_r+0x1c>
 800c930:	42a9      	cmp	r1, r5
 800c932:	d904      	bls.n	800c93e <_malloc_r+0x26>
 800c934:	230c      	movs	r3, #12
 800c936:	6033      	str	r3, [r6, #0]
 800c938:	2000      	movs	r0, #0
 800c93a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c93e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ca14 <_malloc_r+0xfc>
 800c942:	f000 f869 	bl	800ca18 <__malloc_lock>
 800c946:	f8d8 3000 	ldr.w	r3, [r8]
 800c94a:	461c      	mov	r4, r3
 800c94c:	bb44      	cbnz	r4, 800c9a0 <_malloc_r+0x88>
 800c94e:	4629      	mov	r1, r5
 800c950:	4630      	mov	r0, r6
 800c952:	f7ff ffbf 	bl	800c8d4 <sbrk_aligned>
 800c956:	1c43      	adds	r3, r0, #1
 800c958:	4604      	mov	r4, r0
 800c95a:	d158      	bne.n	800ca0e <_malloc_r+0xf6>
 800c95c:	f8d8 4000 	ldr.w	r4, [r8]
 800c960:	4627      	mov	r7, r4
 800c962:	2f00      	cmp	r7, #0
 800c964:	d143      	bne.n	800c9ee <_malloc_r+0xd6>
 800c966:	2c00      	cmp	r4, #0
 800c968:	d04b      	beq.n	800ca02 <_malloc_r+0xea>
 800c96a:	6823      	ldr	r3, [r4, #0]
 800c96c:	4639      	mov	r1, r7
 800c96e:	4630      	mov	r0, r6
 800c970:	eb04 0903 	add.w	r9, r4, r3
 800c974:	f000 fe0a 	bl	800d58c <_sbrk_r>
 800c978:	4581      	cmp	r9, r0
 800c97a:	d142      	bne.n	800ca02 <_malloc_r+0xea>
 800c97c:	6821      	ldr	r1, [r4, #0]
 800c97e:	1a6d      	subs	r5, r5, r1
 800c980:	4629      	mov	r1, r5
 800c982:	4630      	mov	r0, r6
 800c984:	f7ff ffa6 	bl	800c8d4 <sbrk_aligned>
 800c988:	3001      	adds	r0, #1
 800c98a:	d03a      	beq.n	800ca02 <_malloc_r+0xea>
 800c98c:	6823      	ldr	r3, [r4, #0]
 800c98e:	442b      	add	r3, r5
 800c990:	6023      	str	r3, [r4, #0]
 800c992:	f8d8 3000 	ldr.w	r3, [r8]
 800c996:	685a      	ldr	r2, [r3, #4]
 800c998:	bb62      	cbnz	r2, 800c9f4 <_malloc_r+0xdc>
 800c99a:	f8c8 7000 	str.w	r7, [r8]
 800c99e:	e00f      	b.n	800c9c0 <_malloc_r+0xa8>
 800c9a0:	6822      	ldr	r2, [r4, #0]
 800c9a2:	1b52      	subs	r2, r2, r5
 800c9a4:	d420      	bmi.n	800c9e8 <_malloc_r+0xd0>
 800c9a6:	2a0b      	cmp	r2, #11
 800c9a8:	d917      	bls.n	800c9da <_malloc_r+0xc2>
 800c9aa:	1961      	adds	r1, r4, r5
 800c9ac:	42a3      	cmp	r3, r4
 800c9ae:	6025      	str	r5, [r4, #0]
 800c9b0:	bf18      	it	ne
 800c9b2:	6059      	strne	r1, [r3, #4]
 800c9b4:	6863      	ldr	r3, [r4, #4]
 800c9b6:	bf08      	it	eq
 800c9b8:	f8c8 1000 	streq.w	r1, [r8]
 800c9bc:	5162      	str	r2, [r4, r5]
 800c9be:	604b      	str	r3, [r1, #4]
 800c9c0:	4630      	mov	r0, r6
 800c9c2:	f000 f82f 	bl	800ca24 <__malloc_unlock>
 800c9c6:	f104 000b 	add.w	r0, r4, #11
 800c9ca:	1d23      	adds	r3, r4, #4
 800c9cc:	f020 0007 	bic.w	r0, r0, #7
 800c9d0:	1ac2      	subs	r2, r0, r3
 800c9d2:	bf1c      	itt	ne
 800c9d4:	1a1b      	subne	r3, r3, r0
 800c9d6:	50a3      	strne	r3, [r4, r2]
 800c9d8:	e7af      	b.n	800c93a <_malloc_r+0x22>
 800c9da:	6862      	ldr	r2, [r4, #4]
 800c9dc:	42a3      	cmp	r3, r4
 800c9de:	bf0c      	ite	eq
 800c9e0:	f8c8 2000 	streq.w	r2, [r8]
 800c9e4:	605a      	strne	r2, [r3, #4]
 800c9e6:	e7eb      	b.n	800c9c0 <_malloc_r+0xa8>
 800c9e8:	4623      	mov	r3, r4
 800c9ea:	6864      	ldr	r4, [r4, #4]
 800c9ec:	e7ae      	b.n	800c94c <_malloc_r+0x34>
 800c9ee:	463c      	mov	r4, r7
 800c9f0:	687f      	ldr	r7, [r7, #4]
 800c9f2:	e7b6      	b.n	800c962 <_malloc_r+0x4a>
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	42a3      	cmp	r3, r4
 800c9fa:	d1fb      	bne.n	800c9f4 <_malloc_r+0xdc>
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	6053      	str	r3, [r2, #4]
 800ca00:	e7de      	b.n	800c9c0 <_malloc_r+0xa8>
 800ca02:	230c      	movs	r3, #12
 800ca04:	6033      	str	r3, [r6, #0]
 800ca06:	4630      	mov	r0, r6
 800ca08:	f000 f80c 	bl	800ca24 <__malloc_unlock>
 800ca0c:	e794      	b.n	800c938 <_malloc_r+0x20>
 800ca0e:	6005      	str	r5, [r0, #0]
 800ca10:	e7d6      	b.n	800c9c0 <_malloc_r+0xa8>
 800ca12:	bf00      	nop
 800ca14:	200020dc 	.word	0x200020dc

0800ca18 <__malloc_lock>:
 800ca18:	4801      	ldr	r0, [pc, #4]	@ (800ca20 <__malloc_lock+0x8>)
 800ca1a:	f000 be04 	b.w	800d626 <__retarget_lock_acquire_recursive>
 800ca1e:	bf00      	nop
 800ca20:	20002220 	.word	0x20002220

0800ca24 <__malloc_unlock>:
 800ca24:	4801      	ldr	r0, [pc, #4]	@ (800ca2c <__malloc_unlock+0x8>)
 800ca26:	f000 bdff 	b.w	800d628 <__retarget_lock_release_recursive>
 800ca2a:	bf00      	nop
 800ca2c:	20002220 	.word	0x20002220

0800ca30 <__cvt>:
 800ca30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca34:	ec57 6b10 	vmov	r6, r7, d0
 800ca38:	2f00      	cmp	r7, #0
 800ca3a:	460c      	mov	r4, r1
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	463b      	mov	r3, r7
 800ca40:	bfbb      	ittet	lt
 800ca42:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ca46:	461f      	movlt	r7, r3
 800ca48:	2300      	movge	r3, #0
 800ca4a:	232d      	movlt	r3, #45	@ 0x2d
 800ca4c:	700b      	strb	r3, [r1, #0]
 800ca4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca50:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ca54:	4691      	mov	r9, r2
 800ca56:	f023 0820 	bic.w	r8, r3, #32
 800ca5a:	bfbc      	itt	lt
 800ca5c:	4632      	movlt	r2, r6
 800ca5e:	4616      	movlt	r6, r2
 800ca60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ca64:	d005      	beq.n	800ca72 <__cvt+0x42>
 800ca66:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ca6a:	d100      	bne.n	800ca6e <__cvt+0x3e>
 800ca6c:	3401      	adds	r4, #1
 800ca6e:	2102      	movs	r1, #2
 800ca70:	e000      	b.n	800ca74 <__cvt+0x44>
 800ca72:	2103      	movs	r1, #3
 800ca74:	ab03      	add	r3, sp, #12
 800ca76:	9301      	str	r3, [sp, #4]
 800ca78:	ab02      	add	r3, sp, #8
 800ca7a:	9300      	str	r3, [sp, #0]
 800ca7c:	ec47 6b10 	vmov	d0, r6, r7
 800ca80:	4653      	mov	r3, sl
 800ca82:	4622      	mov	r2, r4
 800ca84:	f000 fe70 	bl	800d768 <_dtoa_r>
 800ca88:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ca8c:	4605      	mov	r5, r0
 800ca8e:	d119      	bne.n	800cac4 <__cvt+0x94>
 800ca90:	f019 0f01 	tst.w	r9, #1
 800ca94:	d00e      	beq.n	800cab4 <__cvt+0x84>
 800ca96:	eb00 0904 	add.w	r9, r0, r4
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	4630      	mov	r0, r6
 800caa0:	4639      	mov	r1, r7
 800caa2:	f7f4 f811 	bl	8000ac8 <__aeabi_dcmpeq>
 800caa6:	b108      	cbz	r0, 800caac <__cvt+0x7c>
 800caa8:	f8cd 900c 	str.w	r9, [sp, #12]
 800caac:	2230      	movs	r2, #48	@ 0x30
 800caae:	9b03      	ldr	r3, [sp, #12]
 800cab0:	454b      	cmp	r3, r9
 800cab2:	d31e      	bcc.n	800caf2 <__cvt+0xc2>
 800cab4:	9b03      	ldr	r3, [sp, #12]
 800cab6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cab8:	1b5b      	subs	r3, r3, r5
 800caba:	4628      	mov	r0, r5
 800cabc:	6013      	str	r3, [r2, #0]
 800cabe:	b004      	add	sp, #16
 800cac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cac8:	eb00 0904 	add.w	r9, r0, r4
 800cacc:	d1e5      	bne.n	800ca9a <__cvt+0x6a>
 800cace:	7803      	ldrb	r3, [r0, #0]
 800cad0:	2b30      	cmp	r3, #48	@ 0x30
 800cad2:	d10a      	bne.n	800caea <__cvt+0xba>
 800cad4:	2200      	movs	r2, #0
 800cad6:	2300      	movs	r3, #0
 800cad8:	4630      	mov	r0, r6
 800cada:	4639      	mov	r1, r7
 800cadc:	f7f3 fff4 	bl	8000ac8 <__aeabi_dcmpeq>
 800cae0:	b918      	cbnz	r0, 800caea <__cvt+0xba>
 800cae2:	f1c4 0401 	rsb	r4, r4, #1
 800cae6:	f8ca 4000 	str.w	r4, [sl]
 800caea:	f8da 3000 	ldr.w	r3, [sl]
 800caee:	4499      	add	r9, r3
 800caf0:	e7d3      	b.n	800ca9a <__cvt+0x6a>
 800caf2:	1c59      	adds	r1, r3, #1
 800caf4:	9103      	str	r1, [sp, #12]
 800caf6:	701a      	strb	r2, [r3, #0]
 800caf8:	e7d9      	b.n	800caae <__cvt+0x7e>

0800cafa <__exponent>:
 800cafa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cafc:	2900      	cmp	r1, #0
 800cafe:	bfba      	itte	lt
 800cb00:	4249      	neglt	r1, r1
 800cb02:	232d      	movlt	r3, #45	@ 0x2d
 800cb04:	232b      	movge	r3, #43	@ 0x2b
 800cb06:	2909      	cmp	r1, #9
 800cb08:	7002      	strb	r2, [r0, #0]
 800cb0a:	7043      	strb	r3, [r0, #1]
 800cb0c:	dd29      	ble.n	800cb62 <__exponent+0x68>
 800cb0e:	f10d 0307 	add.w	r3, sp, #7
 800cb12:	461d      	mov	r5, r3
 800cb14:	270a      	movs	r7, #10
 800cb16:	461a      	mov	r2, r3
 800cb18:	fbb1 f6f7 	udiv	r6, r1, r7
 800cb1c:	fb07 1416 	mls	r4, r7, r6, r1
 800cb20:	3430      	adds	r4, #48	@ 0x30
 800cb22:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cb26:	460c      	mov	r4, r1
 800cb28:	2c63      	cmp	r4, #99	@ 0x63
 800cb2a:	f103 33ff 	add.w	r3, r3, #4294967295
 800cb2e:	4631      	mov	r1, r6
 800cb30:	dcf1      	bgt.n	800cb16 <__exponent+0x1c>
 800cb32:	3130      	adds	r1, #48	@ 0x30
 800cb34:	1e94      	subs	r4, r2, #2
 800cb36:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cb3a:	1c41      	adds	r1, r0, #1
 800cb3c:	4623      	mov	r3, r4
 800cb3e:	42ab      	cmp	r3, r5
 800cb40:	d30a      	bcc.n	800cb58 <__exponent+0x5e>
 800cb42:	f10d 0309 	add.w	r3, sp, #9
 800cb46:	1a9b      	subs	r3, r3, r2
 800cb48:	42ac      	cmp	r4, r5
 800cb4a:	bf88      	it	hi
 800cb4c:	2300      	movhi	r3, #0
 800cb4e:	3302      	adds	r3, #2
 800cb50:	4403      	add	r3, r0
 800cb52:	1a18      	subs	r0, r3, r0
 800cb54:	b003      	add	sp, #12
 800cb56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb58:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cb5c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cb60:	e7ed      	b.n	800cb3e <__exponent+0x44>
 800cb62:	2330      	movs	r3, #48	@ 0x30
 800cb64:	3130      	adds	r1, #48	@ 0x30
 800cb66:	7083      	strb	r3, [r0, #2]
 800cb68:	70c1      	strb	r1, [r0, #3]
 800cb6a:	1d03      	adds	r3, r0, #4
 800cb6c:	e7f1      	b.n	800cb52 <__exponent+0x58>
	...

0800cb70 <_printf_float>:
 800cb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb74:	b08d      	sub	sp, #52	@ 0x34
 800cb76:	460c      	mov	r4, r1
 800cb78:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cb7c:	4616      	mov	r6, r2
 800cb7e:	461f      	mov	r7, r3
 800cb80:	4605      	mov	r5, r0
 800cb82:	f000 fccb 	bl	800d51c <_localeconv_r>
 800cb86:	6803      	ldr	r3, [r0, #0]
 800cb88:	9304      	str	r3, [sp, #16]
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7f3 fb70 	bl	8000270 <strlen>
 800cb90:	2300      	movs	r3, #0
 800cb92:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb94:	f8d8 3000 	ldr.w	r3, [r8]
 800cb98:	9005      	str	r0, [sp, #20]
 800cb9a:	3307      	adds	r3, #7
 800cb9c:	f023 0307 	bic.w	r3, r3, #7
 800cba0:	f103 0208 	add.w	r2, r3, #8
 800cba4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cba8:	f8d4 b000 	ldr.w	fp, [r4]
 800cbac:	f8c8 2000 	str.w	r2, [r8]
 800cbb0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cbb4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cbb8:	9307      	str	r3, [sp, #28]
 800cbba:	f8cd 8018 	str.w	r8, [sp, #24]
 800cbbe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cbc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbc6:	4b9c      	ldr	r3, [pc, #624]	@ (800ce38 <_printf_float+0x2c8>)
 800cbc8:	f04f 32ff 	mov.w	r2, #4294967295
 800cbcc:	f7f3 ffae 	bl	8000b2c <__aeabi_dcmpun>
 800cbd0:	bb70      	cbnz	r0, 800cc30 <_printf_float+0xc0>
 800cbd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbd6:	4b98      	ldr	r3, [pc, #608]	@ (800ce38 <_printf_float+0x2c8>)
 800cbd8:	f04f 32ff 	mov.w	r2, #4294967295
 800cbdc:	f7f3 ff88 	bl	8000af0 <__aeabi_dcmple>
 800cbe0:	bb30      	cbnz	r0, 800cc30 <_printf_float+0xc0>
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	4640      	mov	r0, r8
 800cbe8:	4649      	mov	r1, r9
 800cbea:	f7f3 ff77 	bl	8000adc <__aeabi_dcmplt>
 800cbee:	b110      	cbz	r0, 800cbf6 <_printf_float+0x86>
 800cbf0:	232d      	movs	r3, #45	@ 0x2d
 800cbf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbf6:	4a91      	ldr	r2, [pc, #580]	@ (800ce3c <_printf_float+0x2cc>)
 800cbf8:	4b91      	ldr	r3, [pc, #580]	@ (800ce40 <_printf_float+0x2d0>)
 800cbfa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cbfe:	bf8c      	ite	hi
 800cc00:	4690      	movhi	r8, r2
 800cc02:	4698      	movls	r8, r3
 800cc04:	2303      	movs	r3, #3
 800cc06:	6123      	str	r3, [r4, #16]
 800cc08:	f02b 0304 	bic.w	r3, fp, #4
 800cc0c:	6023      	str	r3, [r4, #0]
 800cc0e:	f04f 0900 	mov.w	r9, #0
 800cc12:	9700      	str	r7, [sp, #0]
 800cc14:	4633      	mov	r3, r6
 800cc16:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cc18:	4621      	mov	r1, r4
 800cc1a:	4628      	mov	r0, r5
 800cc1c:	f000 f9d2 	bl	800cfc4 <_printf_common>
 800cc20:	3001      	adds	r0, #1
 800cc22:	f040 808d 	bne.w	800cd40 <_printf_float+0x1d0>
 800cc26:	f04f 30ff 	mov.w	r0, #4294967295
 800cc2a:	b00d      	add	sp, #52	@ 0x34
 800cc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc30:	4642      	mov	r2, r8
 800cc32:	464b      	mov	r3, r9
 800cc34:	4640      	mov	r0, r8
 800cc36:	4649      	mov	r1, r9
 800cc38:	f7f3 ff78 	bl	8000b2c <__aeabi_dcmpun>
 800cc3c:	b140      	cbz	r0, 800cc50 <_printf_float+0xe0>
 800cc3e:	464b      	mov	r3, r9
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	bfbc      	itt	lt
 800cc44:	232d      	movlt	r3, #45	@ 0x2d
 800cc46:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cc4a:	4a7e      	ldr	r2, [pc, #504]	@ (800ce44 <_printf_float+0x2d4>)
 800cc4c:	4b7e      	ldr	r3, [pc, #504]	@ (800ce48 <_printf_float+0x2d8>)
 800cc4e:	e7d4      	b.n	800cbfa <_printf_float+0x8a>
 800cc50:	6863      	ldr	r3, [r4, #4]
 800cc52:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cc56:	9206      	str	r2, [sp, #24]
 800cc58:	1c5a      	adds	r2, r3, #1
 800cc5a:	d13b      	bne.n	800ccd4 <_printf_float+0x164>
 800cc5c:	2306      	movs	r3, #6
 800cc5e:	6063      	str	r3, [r4, #4]
 800cc60:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cc64:	2300      	movs	r3, #0
 800cc66:	6022      	str	r2, [r4, #0]
 800cc68:	9303      	str	r3, [sp, #12]
 800cc6a:	ab0a      	add	r3, sp, #40	@ 0x28
 800cc6c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cc70:	ab09      	add	r3, sp, #36	@ 0x24
 800cc72:	9300      	str	r3, [sp, #0]
 800cc74:	6861      	ldr	r1, [r4, #4]
 800cc76:	ec49 8b10 	vmov	d0, r8, r9
 800cc7a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cc7e:	4628      	mov	r0, r5
 800cc80:	f7ff fed6 	bl	800ca30 <__cvt>
 800cc84:	9b06      	ldr	r3, [sp, #24]
 800cc86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cc88:	2b47      	cmp	r3, #71	@ 0x47
 800cc8a:	4680      	mov	r8, r0
 800cc8c:	d129      	bne.n	800cce2 <_printf_float+0x172>
 800cc8e:	1cc8      	adds	r0, r1, #3
 800cc90:	db02      	blt.n	800cc98 <_printf_float+0x128>
 800cc92:	6863      	ldr	r3, [r4, #4]
 800cc94:	4299      	cmp	r1, r3
 800cc96:	dd41      	ble.n	800cd1c <_printf_float+0x1ac>
 800cc98:	f1aa 0a02 	sub.w	sl, sl, #2
 800cc9c:	fa5f fa8a 	uxtb.w	sl, sl
 800cca0:	3901      	subs	r1, #1
 800cca2:	4652      	mov	r2, sl
 800cca4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cca8:	9109      	str	r1, [sp, #36]	@ 0x24
 800ccaa:	f7ff ff26 	bl	800cafa <__exponent>
 800ccae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ccb0:	1813      	adds	r3, r2, r0
 800ccb2:	2a01      	cmp	r2, #1
 800ccb4:	4681      	mov	r9, r0
 800ccb6:	6123      	str	r3, [r4, #16]
 800ccb8:	dc02      	bgt.n	800ccc0 <_printf_float+0x150>
 800ccba:	6822      	ldr	r2, [r4, #0]
 800ccbc:	07d2      	lsls	r2, r2, #31
 800ccbe:	d501      	bpl.n	800ccc4 <_printf_float+0x154>
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	6123      	str	r3, [r4, #16]
 800ccc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d0a2      	beq.n	800cc12 <_printf_float+0xa2>
 800cccc:	232d      	movs	r3, #45	@ 0x2d
 800ccce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccd2:	e79e      	b.n	800cc12 <_printf_float+0xa2>
 800ccd4:	9a06      	ldr	r2, [sp, #24]
 800ccd6:	2a47      	cmp	r2, #71	@ 0x47
 800ccd8:	d1c2      	bne.n	800cc60 <_printf_float+0xf0>
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d1c0      	bne.n	800cc60 <_printf_float+0xf0>
 800ccde:	2301      	movs	r3, #1
 800cce0:	e7bd      	b.n	800cc5e <_printf_float+0xee>
 800cce2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cce6:	d9db      	bls.n	800cca0 <_printf_float+0x130>
 800cce8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ccec:	d118      	bne.n	800cd20 <_printf_float+0x1b0>
 800ccee:	2900      	cmp	r1, #0
 800ccf0:	6863      	ldr	r3, [r4, #4]
 800ccf2:	dd0b      	ble.n	800cd0c <_printf_float+0x19c>
 800ccf4:	6121      	str	r1, [r4, #16]
 800ccf6:	b913      	cbnz	r3, 800ccfe <_printf_float+0x18e>
 800ccf8:	6822      	ldr	r2, [r4, #0]
 800ccfa:	07d0      	lsls	r0, r2, #31
 800ccfc:	d502      	bpl.n	800cd04 <_printf_float+0x194>
 800ccfe:	3301      	adds	r3, #1
 800cd00:	440b      	add	r3, r1
 800cd02:	6123      	str	r3, [r4, #16]
 800cd04:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cd06:	f04f 0900 	mov.w	r9, #0
 800cd0a:	e7db      	b.n	800ccc4 <_printf_float+0x154>
 800cd0c:	b913      	cbnz	r3, 800cd14 <_printf_float+0x1a4>
 800cd0e:	6822      	ldr	r2, [r4, #0]
 800cd10:	07d2      	lsls	r2, r2, #31
 800cd12:	d501      	bpl.n	800cd18 <_printf_float+0x1a8>
 800cd14:	3302      	adds	r3, #2
 800cd16:	e7f4      	b.n	800cd02 <_printf_float+0x192>
 800cd18:	2301      	movs	r3, #1
 800cd1a:	e7f2      	b.n	800cd02 <_printf_float+0x192>
 800cd1c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cd20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd22:	4299      	cmp	r1, r3
 800cd24:	db05      	blt.n	800cd32 <_printf_float+0x1c2>
 800cd26:	6823      	ldr	r3, [r4, #0]
 800cd28:	6121      	str	r1, [r4, #16]
 800cd2a:	07d8      	lsls	r0, r3, #31
 800cd2c:	d5ea      	bpl.n	800cd04 <_printf_float+0x194>
 800cd2e:	1c4b      	adds	r3, r1, #1
 800cd30:	e7e7      	b.n	800cd02 <_printf_float+0x192>
 800cd32:	2900      	cmp	r1, #0
 800cd34:	bfd4      	ite	le
 800cd36:	f1c1 0202 	rsble	r2, r1, #2
 800cd3a:	2201      	movgt	r2, #1
 800cd3c:	4413      	add	r3, r2
 800cd3e:	e7e0      	b.n	800cd02 <_printf_float+0x192>
 800cd40:	6823      	ldr	r3, [r4, #0]
 800cd42:	055a      	lsls	r2, r3, #21
 800cd44:	d407      	bmi.n	800cd56 <_printf_float+0x1e6>
 800cd46:	6923      	ldr	r3, [r4, #16]
 800cd48:	4642      	mov	r2, r8
 800cd4a:	4631      	mov	r1, r6
 800cd4c:	4628      	mov	r0, r5
 800cd4e:	47b8      	blx	r7
 800cd50:	3001      	adds	r0, #1
 800cd52:	d12b      	bne.n	800cdac <_printf_float+0x23c>
 800cd54:	e767      	b.n	800cc26 <_printf_float+0xb6>
 800cd56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cd5a:	f240 80dd 	bls.w	800cf18 <_printf_float+0x3a8>
 800cd5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cd62:	2200      	movs	r2, #0
 800cd64:	2300      	movs	r3, #0
 800cd66:	f7f3 feaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	d033      	beq.n	800cdd6 <_printf_float+0x266>
 800cd6e:	4a37      	ldr	r2, [pc, #220]	@ (800ce4c <_printf_float+0x2dc>)
 800cd70:	2301      	movs	r3, #1
 800cd72:	4631      	mov	r1, r6
 800cd74:	4628      	mov	r0, r5
 800cd76:	47b8      	blx	r7
 800cd78:	3001      	adds	r0, #1
 800cd7a:	f43f af54 	beq.w	800cc26 <_printf_float+0xb6>
 800cd7e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cd82:	4543      	cmp	r3, r8
 800cd84:	db02      	blt.n	800cd8c <_printf_float+0x21c>
 800cd86:	6823      	ldr	r3, [r4, #0]
 800cd88:	07d8      	lsls	r0, r3, #31
 800cd8a:	d50f      	bpl.n	800cdac <_printf_float+0x23c>
 800cd8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd90:	4631      	mov	r1, r6
 800cd92:	4628      	mov	r0, r5
 800cd94:	47b8      	blx	r7
 800cd96:	3001      	adds	r0, #1
 800cd98:	f43f af45 	beq.w	800cc26 <_printf_float+0xb6>
 800cd9c:	f04f 0900 	mov.w	r9, #0
 800cda0:	f108 38ff 	add.w	r8, r8, #4294967295
 800cda4:	f104 0a1a 	add.w	sl, r4, #26
 800cda8:	45c8      	cmp	r8, r9
 800cdaa:	dc09      	bgt.n	800cdc0 <_printf_float+0x250>
 800cdac:	6823      	ldr	r3, [r4, #0]
 800cdae:	079b      	lsls	r3, r3, #30
 800cdb0:	f100 8103 	bmi.w	800cfba <_printf_float+0x44a>
 800cdb4:	68e0      	ldr	r0, [r4, #12]
 800cdb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cdb8:	4298      	cmp	r0, r3
 800cdba:	bfb8      	it	lt
 800cdbc:	4618      	movlt	r0, r3
 800cdbe:	e734      	b.n	800cc2a <_printf_float+0xba>
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	4652      	mov	r2, sl
 800cdc4:	4631      	mov	r1, r6
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	47b8      	blx	r7
 800cdca:	3001      	adds	r0, #1
 800cdcc:	f43f af2b 	beq.w	800cc26 <_printf_float+0xb6>
 800cdd0:	f109 0901 	add.w	r9, r9, #1
 800cdd4:	e7e8      	b.n	800cda8 <_printf_float+0x238>
 800cdd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	dc39      	bgt.n	800ce50 <_printf_float+0x2e0>
 800cddc:	4a1b      	ldr	r2, [pc, #108]	@ (800ce4c <_printf_float+0x2dc>)
 800cdde:	2301      	movs	r3, #1
 800cde0:	4631      	mov	r1, r6
 800cde2:	4628      	mov	r0, r5
 800cde4:	47b8      	blx	r7
 800cde6:	3001      	adds	r0, #1
 800cde8:	f43f af1d 	beq.w	800cc26 <_printf_float+0xb6>
 800cdec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cdf0:	ea59 0303 	orrs.w	r3, r9, r3
 800cdf4:	d102      	bne.n	800cdfc <_printf_float+0x28c>
 800cdf6:	6823      	ldr	r3, [r4, #0]
 800cdf8:	07d9      	lsls	r1, r3, #31
 800cdfa:	d5d7      	bpl.n	800cdac <_printf_float+0x23c>
 800cdfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce00:	4631      	mov	r1, r6
 800ce02:	4628      	mov	r0, r5
 800ce04:	47b8      	blx	r7
 800ce06:	3001      	adds	r0, #1
 800ce08:	f43f af0d 	beq.w	800cc26 <_printf_float+0xb6>
 800ce0c:	f04f 0a00 	mov.w	sl, #0
 800ce10:	f104 0b1a 	add.w	fp, r4, #26
 800ce14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce16:	425b      	negs	r3, r3
 800ce18:	4553      	cmp	r3, sl
 800ce1a:	dc01      	bgt.n	800ce20 <_printf_float+0x2b0>
 800ce1c:	464b      	mov	r3, r9
 800ce1e:	e793      	b.n	800cd48 <_printf_float+0x1d8>
 800ce20:	2301      	movs	r3, #1
 800ce22:	465a      	mov	r2, fp
 800ce24:	4631      	mov	r1, r6
 800ce26:	4628      	mov	r0, r5
 800ce28:	47b8      	blx	r7
 800ce2a:	3001      	adds	r0, #1
 800ce2c:	f43f aefb 	beq.w	800cc26 <_printf_float+0xb6>
 800ce30:	f10a 0a01 	add.w	sl, sl, #1
 800ce34:	e7ee      	b.n	800ce14 <_printf_float+0x2a4>
 800ce36:	bf00      	nop
 800ce38:	7fefffff 	.word	0x7fefffff
 800ce3c:	0800f2bc 	.word	0x0800f2bc
 800ce40:	0800f2b8 	.word	0x0800f2b8
 800ce44:	0800f2c4 	.word	0x0800f2c4
 800ce48:	0800f2c0 	.word	0x0800f2c0
 800ce4c:	0800f2c8 	.word	0x0800f2c8
 800ce50:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ce52:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ce56:	4553      	cmp	r3, sl
 800ce58:	bfa8      	it	ge
 800ce5a:	4653      	movge	r3, sl
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	4699      	mov	r9, r3
 800ce60:	dc36      	bgt.n	800ced0 <_printf_float+0x360>
 800ce62:	f04f 0b00 	mov.w	fp, #0
 800ce66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce6a:	f104 021a 	add.w	r2, r4, #26
 800ce6e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ce70:	9306      	str	r3, [sp, #24]
 800ce72:	eba3 0309 	sub.w	r3, r3, r9
 800ce76:	455b      	cmp	r3, fp
 800ce78:	dc31      	bgt.n	800cede <_printf_float+0x36e>
 800ce7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce7c:	459a      	cmp	sl, r3
 800ce7e:	dc3a      	bgt.n	800cef6 <_printf_float+0x386>
 800ce80:	6823      	ldr	r3, [r4, #0]
 800ce82:	07da      	lsls	r2, r3, #31
 800ce84:	d437      	bmi.n	800cef6 <_printf_float+0x386>
 800ce86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce88:	ebaa 0903 	sub.w	r9, sl, r3
 800ce8c:	9b06      	ldr	r3, [sp, #24]
 800ce8e:	ebaa 0303 	sub.w	r3, sl, r3
 800ce92:	4599      	cmp	r9, r3
 800ce94:	bfa8      	it	ge
 800ce96:	4699      	movge	r9, r3
 800ce98:	f1b9 0f00 	cmp.w	r9, #0
 800ce9c:	dc33      	bgt.n	800cf06 <_printf_float+0x396>
 800ce9e:	f04f 0800 	mov.w	r8, #0
 800cea2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cea6:	f104 0b1a 	add.w	fp, r4, #26
 800ceaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceac:	ebaa 0303 	sub.w	r3, sl, r3
 800ceb0:	eba3 0309 	sub.w	r3, r3, r9
 800ceb4:	4543      	cmp	r3, r8
 800ceb6:	f77f af79 	ble.w	800cdac <_printf_float+0x23c>
 800ceba:	2301      	movs	r3, #1
 800cebc:	465a      	mov	r2, fp
 800cebe:	4631      	mov	r1, r6
 800cec0:	4628      	mov	r0, r5
 800cec2:	47b8      	blx	r7
 800cec4:	3001      	adds	r0, #1
 800cec6:	f43f aeae 	beq.w	800cc26 <_printf_float+0xb6>
 800ceca:	f108 0801 	add.w	r8, r8, #1
 800cece:	e7ec      	b.n	800ceaa <_printf_float+0x33a>
 800ced0:	4642      	mov	r2, r8
 800ced2:	4631      	mov	r1, r6
 800ced4:	4628      	mov	r0, r5
 800ced6:	47b8      	blx	r7
 800ced8:	3001      	adds	r0, #1
 800ceda:	d1c2      	bne.n	800ce62 <_printf_float+0x2f2>
 800cedc:	e6a3      	b.n	800cc26 <_printf_float+0xb6>
 800cede:	2301      	movs	r3, #1
 800cee0:	4631      	mov	r1, r6
 800cee2:	4628      	mov	r0, r5
 800cee4:	9206      	str	r2, [sp, #24]
 800cee6:	47b8      	blx	r7
 800cee8:	3001      	adds	r0, #1
 800ceea:	f43f ae9c 	beq.w	800cc26 <_printf_float+0xb6>
 800ceee:	9a06      	ldr	r2, [sp, #24]
 800cef0:	f10b 0b01 	add.w	fp, fp, #1
 800cef4:	e7bb      	b.n	800ce6e <_printf_float+0x2fe>
 800cef6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cefa:	4631      	mov	r1, r6
 800cefc:	4628      	mov	r0, r5
 800cefe:	47b8      	blx	r7
 800cf00:	3001      	adds	r0, #1
 800cf02:	d1c0      	bne.n	800ce86 <_printf_float+0x316>
 800cf04:	e68f      	b.n	800cc26 <_printf_float+0xb6>
 800cf06:	9a06      	ldr	r2, [sp, #24]
 800cf08:	464b      	mov	r3, r9
 800cf0a:	4442      	add	r2, r8
 800cf0c:	4631      	mov	r1, r6
 800cf0e:	4628      	mov	r0, r5
 800cf10:	47b8      	blx	r7
 800cf12:	3001      	adds	r0, #1
 800cf14:	d1c3      	bne.n	800ce9e <_printf_float+0x32e>
 800cf16:	e686      	b.n	800cc26 <_printf_float+0xb6>
 800cf18:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cf1c:	f1ba 0f01 	cmp.w	sl, #1
 800cf20:	dc01      	bgt.n	800cf26 <_printf_float+0x3b6>
 800cf22:	07db      	lsls	r3, r3, #31
 800cf24:	d536      	bpl.n	800cf94 <_printf_float+0x424>
 800cf26:	2301      	movs	r3, #1
 800cf28:	4642      	mov	r2, r8
 800cf2a:	4631      	mov	r1, r6
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	47b8      	blx	r7
 800cf30:	3001      	adds	r0, #1
 800cf32:	f43f ae78 	beq.w	800cc26 <_printf_float+0xb6>
 800cf36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf3a:	4631      	mov	r1, r6
 800cf3c:	4628      	mov	r0, r5
 800cf3e:	47b8      	blx	r7
 800cf40:	3001      	adds	r0, #1
 800cf42:	f43f ae70 	beq.w	800cc26 <_printf_float+0xb6>
 800cf46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf52:	f7f3 fdb9 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf56:	b9c0      	cbnz	r0, 800cf8a <_printf_float+0x41a>
 800cf58:	4653      	mov	r3, sl
 800cf5a:	f108 0201 	add.w	r2, r8, #1
 800cf5e:	4631      	mov	r1, r6
 800cf60:	4628      	mov	r0, r5
 800cf62:	47b8      	blx	r7
 800cf64:	3001      	adds	r0, #1
 800cf66:	d10c      	bne.n	800cf82 <_printf_float+0x412>
 800cf68:	e65d      	b.n	800cc26 <_printf_float+0xb6>
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	465a      	mov	r2, fp
 800cf6e:	4631      	mov	r1, r6
 800cf70:	4628      	mov	r0, r5
 800cf72:	47b8      	blx	r7
 800cf74:	3001      	adds	r0, #1
 800cf76:	f43f ae56 	beq.w	800cc26 <_printf_float+0xb6>
 800cf7a:	f108 0801 	add.w	r8, r8, #1
 800cf7e:	45d0      	cmp	r8, sl
 800cf80:	dbf3      	blt.n	800cf6a <_printf_float+0x3fa>
 800cf82:	464b      	mov	r3, r9
 800cf84:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cf88:	e6df      	b.n	800cd4a <_printf_float+0x1da>
 800cf8a:	f04f 0800 	mov.w	r8, #0
 800cf8e:	f104 0b1a 	add.w	fp, r4, #26
 800cf92:	e7f4      	b.n	800cf7e <_printf_float+0x40e>
 800cf94:	2301      	movs	r3, #1
 800cf96:	4642      	mov	r2, r8
 800cf98:	e7e1      	b.n	800cf5e <_printf_float+0x3ee>
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	464a      	mov	r2, r9
 800cf9e:	4631      	mov	r1, r6
 800cfa0:	4628      	mov	r0, r5
 800cfa2:	47b8      	blx	r7
 800cfa4:	3001      	adds	r0, #1
 800cfa6:	f43f ae3e 	beq.w	800cc26 <_printf_float+0xb6>
 800cfaa:	f108 0801 	add.w	r8, r8, #1
 800cfae:	68e3      	ldr	r3, [r4, #12]
 800cfb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cfb2:	1a5b      	subs	r3, r3, r1
 800cfb4:	4543      	cmp	r3, r8
 800cfb6:	dcf0      	bgt.n	800cf9a <_printf_float+0x42a>
 800cfb8:	e6fc      	b.n	800cdb4 <_printf_float+0x244>
 800cfba:	f04f 0800 	mov.w	r8, #0
 800cfbe:	f104 0919 	add.w	r9, r4, #25
 800cfc2:	e7f4      	b.n	800cfae <_printf_float+0x43e>

0800cfc4 <_printf_common>:
 800cfc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfc8:	4616      	mov	r6, r2
 800cfca:	4698      	mov	r8, r3
 800cfcc:	688a      	ldr	r2, [r1, #8]
 800cfce:	690b      	ldr	r3, [r1, #16]
 800cfd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	bfb8      	it	lt
 800cfd8:	4613      	movlt	r3, r2
 800cfda:	6033      	str	r3, [r6, #0]
 800cfdc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cfe0:	4607      	mov	r7, r0
 800cfe2:	460c      	mov	r4, r1
 800cfe4:	b10a      	cbz	r2, 800cfea <_printf_common+0x26>
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	6033      	str	r3, [r6, #0]
 800cfea:	6823      	ldr	r3, [r4, #0]
 800cfec:	0699      	lsls	r1, r3, #26
 800cfee:	bf42      	ittt	mi
 800cff0:	6833      	ldrmi	r3, [r6, #0]
 800cff2:	3302      	addmi	r3, #2
 800cff4:	6033      	strmi	r3, [r6, #0]
 800cff6:	6825      	ldr	r5, [r4, #0]
 800cff8:	f015 0506 	ands.w	r5, r5, #6
 800cffc:	d106      	bne.n	800d00c <_printf_common+0x48>
 800cffe:	f104 0a19 	add.w	sl, r4, #25
 800d002:	68e3      	ldr	r3, [r4, #12]
 800d004:	6832      	ldr	r2, [r6, #0]
 800d006:	1a9b      	subs	r3, r3, r2
 800d008:	42ab      	cmp	r3, r5
 800d00a:	dc26      	bgt.n	800d05a <_printf_common+0x96>
 800d00c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d010:	6822      	ldr	r2, [r4, #0]
 800d012:	3b00      	subs	r3, #0
 800d014:	bf18      	it	ne
 800d016:	2301      	movne	r3, #1
 800d018:	0692      	lsls	r2, r2, #26
 800d01a:	d42b      	bmi.n	800d074 <_printf_common+0xb0>
 800d01c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d020:	4641      	mov	r1, r8
 800d022:	4638      	mov	r0, r7
 800d024:	47c8      	blx	r9
 800d026:	3001      	adds	r0, #1
 800d028:	d01e      	beq.n	800d068 <_printf_common+0xa4>
 800d02a:	6823      	ldr	r3, [r4, #0]
 800d02c:	6922      	ldr	r2, [r4, #16]
 800d02e:	f003 0306 	and.w	r3, r3, #6
 800d032:	2b04      	cmp	r3, #4
 800d034:	bf02      	ittt	eq
 800d036:	68e5      	ldreq	r5, [r4, #12]
 800d038:	6833      	ldreq	r3, [r6, #0]
 800d03a:	1aed      	subeq	r5, r5, r3
 800d03c:	68a3      	ldr	r3, [r4, #8]
 800d03e:	bf0c      	ite	eq
 800d040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d044:	2500      	movne	r5, #0
 800d046:	4293      	cmp	r3, r2
 800d048:	bfc4      	itt	gt
 800d04a:	1a9b      	subgt	r3, r3, r2
 800d04c:	18ed      	addgt	r5, r5, r3
 800d04e:	2600      	movs	r6, #0
 800d050:	341a      	adds	r4, #26
 800d052:	42b5      	cmp	r5, r6
 800d054:	d11a      	bne.n	800d08c <_printf_common+0xc8>
 800d056:	2000      	movs	r0, #0
 800d058:	e008      	b.n	800d06c <_printf_common+0xa8>
 800d05a:	2301      	movs	r3, #1
 800d05c:	4652      	mov	r2, sl
 800d05e:	4641      	mov	r1, r8
 800d060:	4638      	mov	r0, r7
 800d062:	47c8      	blx	r9
 800d064:	3001      	adds	r0, #1
 800d066:	d103      	bne.n	800d070 <_printf_common+0xac>
 800d068:	f04f 30ff 	mov.w	r0, #4294967295
 800d06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d070:	3501      	adds	r5, #1
 800d072:	e7c6      	b.n	800d002 <_printf_common+0x3e>
 800d074:	18e1      	adds	r1, r4, r3
 800d076:	1c5a      	adds	r2, r3, #1
 800d078:	2030      	movs	r0, #48	@ 0x30
 800d07a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d07e:	4422      	add	r2, r4
 800d080:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d084:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d088:	3302      	adds	r3, #2
 800d08a:	e7c7      	b.n	800d01c <_printf_common+0x58>
 800d08c:	2301      	movs	r3, #1
 800d08e:	4622      	mov	r2, r4
 800d090:	4641      	mov	r1, r8
 800d092:	4638      	mov	r0, r7
 800d094:	47c8      	blx	r9
 800d096:	3001      	adds	r0, #1
 800d098:	d0e6      	beq.n	800d068 <_printf_common+0xa4>
 800d09a:	3601      	adds	r6, #1
 800d09c:	e7d9      	b.n	800d052 <_printf_common+0x8e>
	...

0800d0a0 <_printf_i>:
 800d0a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0a4:	7e0f      	ldrb	r7, [r1, #24]
 800d0a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d0a8:	2f78      	cmp	r7, #120	@ 0x78
 800d0aa:	4691      	mov	r9, r2
 800d0ac:	4680      	mov	r8, r0
 800d0ae:	460c      	mov	r4, r1
 800d0b0:	469a      	mov	sl, r3
 800d0b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d0b6:	d807      	bhi.n	800d0c8 <_printf_i+0x28>
 800d0b8:	2f62      	cmp	r7, #98	@ 0x62
 800d0ba:	d80a      	bhi.n	800d0d2 <_printf_i+0x32>
 800d0bc:	2f00      	cmp	r7, #0
 800d0be:	f000 80d1 	beq.w	800d264 <_printf_i+0x1c4>
 800d0c2:	2f58      	cmp	r7, #88	@ 0x58
 800d0c4:	f000 80b8 	beq.w	800d238 <_printf_i+0x198>
 800d0c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d0cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d0d0:	e03a      	b.n	800d148 <_printf_i+0xa8>
 800d0d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d0d6:	2b15      	cmp	r3, #21
 800d0d8:	d8f6      	bhi.n	800d0c8 <_printf_i+0x28>
 800d0da:	a101      	add	r1, pc, #4	@ (adr r1, 800d0e0 <_printf_i+0x40>)
 800d0dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d0e0:	0800d139 	.word	0x0800d139
 800d0e4:	0800d14d 	.word	0x0800d14d
 800d0e8:	0800d0c9 	.word	0x0800d0c9
 800d0ec:	0800d0c9 	.word	0x0800d0c9
 800d0f0:	0800d0c9 	.word	0x0800d0c9
 800d0f4:	0800d0c9 	.word	0x0800d0c9
 800d0f8:	0800d14d 	.word	0x0800d14d
 800d0fc:	0800d0c9 	.word	0x0800d0c9
 800d100:	0800d0c9 	.word	0x0800d0c9
 800d104:	0800d0c9 	.word	0x0800d0c9
 800d108:	0800d0c9 	.word	0x0800d0c9
 800d10c:	0800d24b 	.word	0x0800d24b
 800d110:	0800d177 	.word	0x0800d177
 800d114:	0800d205 	.word	0x0800d205
 800d118:	0800d0c9 	.word	0x0800d0c9
 800d11c:	0800d0c9 	.word	0x0800d0c9
 800d120:	0800d26d 	.word	0x0800d26d
 800d124:	0800d0c9 	.word	0x0800d0c9
 800d128:	0800d177 	.word	0x0800d177
 800d12c:	0800d0c9 	.word	0x0800d0c9
 800d130:	0800d0c9 	.word	0x0800d0c9
 800d134:	0800d20d 	.word	0x0800d20d
 800d138:	6833      	ldr	r3, [r6, #0]
 800d13a:	1d1a      	adds	r2, r3, #4
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	6032      	str	r2, [r6, #0]
 800d140:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d144:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d148:	2301      	movs	r3, #1
 800d14a:	e09c      	b.n	800d286 <_printf_i+0x1e6>
 800d14c:	6833      	ldr	r3, [r6, #0]
 800d14e:	6820      	ldr	r0, [r4, #0]
 800d150:	1d19      	adds	r1, r3, #4
 800d152:	6031      	str	r1, [r6, #0]
 800d154:	0606      	lsls	r6, r0, #24
 800d156:	d501      	bpl.n	800d15c <_printf_i+0xbc>
 800d158:	681d      	ldr	r5, [r3, #0]
 800d15a:	e003      	b.n	800d164 <_printf_i+0xc4>
 800d15c:	0645      	lsls	r5, r0, #25
 800d15e:	d5fb      	bpl.n	800d158 <_printf_i+0xb8>
 800d160:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d164:	2d00      	cmp	r5, #0
 800d166:	da03      	bge.n	800d170 <_printf_i+0xd0>
 800d168:	232d      	movs	r3, #45	@ 0x2d
 800d16a:	426d      	negs	r5, r5
 800d16c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d170:	4858      	ldr	r0, [pc, #352]	@ (800d2d4 <_printf_i+0x234>)
 800d172:	230a      	movs	r3, #10
 800d174:	e011      	b.n	800d19a <_printf_i+0xfa>
 800d176:	6821      	ldr	r1, [r4, #0]
 800d178:	6833      	ldr	r3, [r6, #0]
 800d17a:	0608      	lsls	r0, r1, #24
 800d17c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d180:	d402      	bmi.n	800d188 <_printf_i+0xe8>
 800d182:	0649      	lsls	r1, r1, #25
 800d184:	bf48      	it	mi
 800d186:	b2ad      	uxthmi	r5, r5
 800d188:	2f6f      	cmp	r7, #111	@ 0x6f
 800d18a:	4852      	ldr	r0, [pc, #328]	@ (800d2d4 <_printf_i+0x234>)
 800d18c:	6033      	str	r3, [r6, #0]
 800d18e:	bf14      	ite	ne
 800d190:	230a      	movne	r3, #10
 800d192:	2308      	moveq	r3, #8
 800d194:	2100      	movs	r1, #0
 800d196:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d19a:	6866      	ldr	r6, [r4, #4]
 800d19c:	60a6      	str	r6, [r4, #8]
 800d19e:	2e00      	cmp	r6, #0
 800d1a0:	db05      	blt.n	800d1ae <_printf_i+0x10e>
 800d1a2:	6821      	ldr	r1, [r4, #0]
 800d1a4:	432e      	orrs	r6, r5
 800d1a6:	f021 0104 	bic.w	r1, r1, #4
 800d1aa:	6021      	str	r1, [r4, #0]
 800d1ac:	d04b      	beq.n	800d246 <_printf_i+0x1a6>
 800d1ae:	4616      	mov	r6, r2
 800d1b0:	fbb5 f1f3 	udiv	r1, r5, r3
 800d1b4:	fb03 5711 	mls	r7, r3, r1, r5
 800d1b8:	5dc7      	ldrb	r7, [r0, r7]
 800d1ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d1be:	462f      	mov	r7, r5
 800d1c0:	42bb      	cmp	r3, r7
 800d1c2:	460d      	mov	r5, r1
 800d1c4:	d9f4      	bls.n	800d1b0 <_printf_i+0x110>
 800d1c6:	2b08      	cmp	r3, #8
 800d1c8:	d10b      	bne.n	800d1e2 <_printf_i+0x142>
 800d1ca:	6823      	ldr	r3, [r4, #0]
 800d1cc:	07df      	lsls	r7, r3, #31
 800d1ce:	d508      	bpl.n	800d1e2 <_printf_i+0x142>
 800d1d0:	6923      	ldr	r3, [r4, #16]
 800d1d2:	6861      	ldr	r1, [r4, #4]
 800d1d4:	4299      	cmp	r1, r3
 800d1d6:	bfde      	ittt	le
 800d1d8:	2330      	movle	r3, #48	@ 0x30
 800d1da:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d1de:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d1e2:	1b92      	subs	r2, r2, r6
 800d1e4:	6122      	str	r2, [r4, #16]
 800d1e6:	f8cd a000 	str.w	sl, [sp]
 800d1ea:	464b      	mov	r3, r9
 800d1ec:	aa03      	add	r2, sp, #12
 800d1ee:	4621      	mov	r1, r4
 800d1f0:	4640      	mov	r0, r8
 800d1f2:	f7ff fee7 	bl	800cfc4 <_printf_common>
 800d1f6:	3001      	adds	r0, #1
 800d1f8:	d14a      	bne.n	800d290 <_printf_i+0x1f0>
 800d1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d1fe:	b004      	add	sp, #16
 800d200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d204:	6823      	ldr	r3, [r4, #0]
 800d206:	f043 0320 	orr.w	r3, r3, #32
 800d20a:	6023      	str	r3, [r4, #0]
 800d20c:	4832      	ldr	r0, [pc, #200]	@ (800d2d8 <_printf_i+0x238>)
 800d20e:	2778      	movs	r7, #120	@ 0x78
 800d210:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d214:	6823      	ldr	r3, [r4, #0]
 800d216:	6831      	ldr	r1, [r6, #0]
 800d218:	061f      	lsls	r7, r3, #24
 800d21a:	f851 5b04 	ldr.w	r5, [r1], #4
 800d21e:	d402      	bmi.n	800d226 <_printf_i+0x186>
 800d220:	065f      	lsls	r7, r3, #25
 800d222:	bf48      	it	mi
 800d224:	b2ad      	uxthmi	r5, r5
 800d226:	6031      	str	r1, [r6, #0]
 800d228:	07d9      	lsls	r1, r3, #31
 800d22a:	bf44      	itt	mi
 800d22c:	f043 0320 	orrmi.w	r3, r3, #32
 800d230:	6023      	strmi	r3, [r4, #0]
 800d232:	b11d      	cbz	r5, 800d23c <_printf_i+0x19c>
 800d234:	2310      	movs	r3, #16
 800d236:	e7ad      	b.n	800d194 <_printf_i+0xf4>
 800d238:	4826      	ldr	r0, [pc, #152]	@ (800d2d4 <_printf_i+0x234>)
 800d23a:	e7e9      	b.n	800d210 <_printf_i+0x170>
 800d23c:	6823      	ldr	r3, [r4, #0]
 800d23e:	f023 0320 	bic.w	r3, r3, #32
 800d242:	6023      	str	r3, [r4, #0]
 800d244:	e7f6      	b.n	800d234 <_printf_i+0x194>
 800d246:	4616      	mov	r6, r2
 800d248:	e7bd      	b.n	800d1c6 <_printf_i+0x126>
 800d24a:	6833      	ldr	r3, [r6, #0]
 800d24c:	6825      	ldr	r5, [r4, #0]
 800d24e:	6961      	ldr	r1, [r4, #20]
 800d250:	1d18      	adds	r0, r3, #4
 800d252:	6030      	str	r0, [r6, #0]
 800d254:	062e      	lsls	r6, r5, #24
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	d501      	bpl.n	800d25e <_printf_i+0x1be>
 800d25a:	6019      	str	r1, [r3, #0]
 800d25c:	e002      	b.n	800d264 <_printf_i+0x1c4>
 800d25e:	0668      	lsls	r0, r5, #25
 800d260:	d5fb      	bpl.n	800d25a <_printf_i+0x1ba>
 800d262:	8019      	strh	r1, [r3, #0]
 800d264:	2300      	movs	r3, #0
 800d266:	6123      	str	r3, [r4, #16]
 800d268:	4616      	mov	r6, r2
 800d26a:	e7bc      	b.n	800d1e6 <_printf_i+0x146>
 800d26c:	6833      	ldr	r3, [r6, #0]
 800d26e:	1d1a      	adds	r2, r3, #4
 800d270:	6032      	str	r2, [r6, #0]
 800d272:	681e      	ldr	r6, [r3, #0]
 800d274:	6862      	ldr	r2, [r4, #4]
 800d276:	2100      	movs	r1, #0
 800d278:	4630      	mov	r0, r6
 800d27a:	f7f2 ffa9 	bl	80001d0 <memchr>
 800d27e:	b108      	cbz	r0, 800d284 <_printf_i+0x1e4>
 800d280:	1b80      	subs	r0, r0, r6
 800d282:	6060      	str	r0, [r4, #4]
 800d284:	6863      	ldr	r3, [r4, #4]
 800d286:	6123      	str	r3, [r4, #16]
 800d288:	2300      	movs	r3, #0
 800d28a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d28e:	e7aa      	b.n	800d1e6 <_printf_i+0x146>
 800d290:	6923      	ldr	r3, [r4, #16]
 800d292:	4632      	mov	r2, r6
 800d294:	4649      	mov	r1, r9
 800d296:	4640      	mov	r0, r8
 800d298:	47d0      	blx	sl
 800d29a:	3001      	adds	r0, #1
 800d29c:	d0ad      	beq.n	800d1fa <_printf_i+0x15a>
 800d29e:	6823      	ldr	r3, [r4, #0]
 800d2a0:	079b      	lsls	r3, r3, #30
 800d2a2:	d413      	bmi.n	800d2cc <_printf_i+0x22c>
 800d2a4:	68e0      	ldr	r0, [r4, #12]
 800d2a6:	9b03      	ldr	r3, [sp, #12]
 800d2a8:	4298      	cmp	r0, r3
 800d2aa:	bfb8      	it	lt
 800d2ac:	4618      	movlt	r0, r3
 800d2ae:	e7a6      	b.n	800d1fe <_printf_i+0x15e>
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	4632      	mov	r2, r6
 800d2b4:	4649      	mov	r1, r9
 800d2b6:	4640      	mov	r0, r8
 800d2b8:	47d0      	blx	sl
 800d2ba:	3001      	adds	r0, #1
 800d2bc:	d09d      	beq.n	800d1fa <_printf_i+0x15a>
 800d2be:	3501      	adds	r5, #1
 800d2c0:	68e3      	ldr	r3, [r4, #12]
 800d2c2:	9903      	ldr	r1, [sp, #12]
 800d2c4:	1a5b      	subs	r3, r3, r1
 800d2c6:	42ab      	cmp	r3, r5
 800d2c8:	dcf2      	bgt.n	800d2b0 <_printf_i+0x210>
 800d2ca:	e7eb      	b.n	800d2a4 <_printf_i+0x204>
 800d2cc:	2500      	movs	r5, #0
 800d2ce:	f104 0619 	add.w	r6, r4, #25
 800d2d2:	e7f5      	b.n	800d2c0 <_printf_i+0x220>
 800d2d4:	0800f2ca 	.word	0x0800f2ca
 800d2d8:	0800f2db 	.word	0x0800f2db

0800d2dc <std>:
 800d2dc:	2300      	movs	r3, #0
 800d2de:	b510      	push	{r4, lr}
 800d2e0:	4604      	mov	r4, r0
 800d2e2:	e9c0 3300 	strd	r3, r3, [r0]
 800d2e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d2ea:	6083      	str	r3, [r0, #8]
 800d2ec:	8181      	strh	r1, [r0, #12]
 800d2ee:	6643      	str	r3, [r0, #100]	@ 0x64
 800d2f0:	81c2      	strh	r2, [r0, #14]
 800d2f2:	6183      	str	r3, [r0, #24]
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	2208      	movs	r2, #8
 800d2f8:	305c      	adds	r0, #92	@ 0x5c
 800d2fa:	f000 f906 	bl	800d50a <memset>
 800d2fe:	4b0d      	ldr	r3, [pc, #52]	@ (800d334 <std+0x58>)
 800d300:	6263      	str	r3, [r4, #36]	@ 0x24
 800d302:	4b0d      	ldr	r3, [pc, #52]	@ (800d338 <std+0x5c>)
 800d304:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d306:	4b0d      	ldr	r3, [pc, #52]	@ (800d33c <std+0x60>)
 800d308:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d30a:	4b0d      	ldr	r3, [pc, #52]	@ (800d340 <std+0x64>)
 800d30c:	6323      	str	r3, [r4, #48]	@ 0x30
 800d30e:	4b0d      	ldr	r3, [pc, #52]	@ (800d344 <std+0x68>)
 800d310:	6224      	str	r4, [r4, #32]
 800d312:	429c      	cmp	r4, r3
 800d314:	d006      	beq.n	800d324 <std+0x48>
 800d316:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d31a:	4294      	cmp	r4, r2
 800d31c:	d002      	beq.n	800d324 <std+0x48>
 800d31e:	33d0      	adds	r3, #208	@ 0xd0
 800d320:	429c      	cmp	r4, r3
 800d322:	d105      	bne.n	800d330 <std+0x54>
 800d324:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d32c:	f000 b97a 	b.w	800d624 <__retarget_lock_init_recursive>
 800d330:	bd10      	pop	{r4, pc}
 800d332:	bf00      	nop
 800d334:	0800d485 	.word	0x0800d485
 800d338:	0800d4a7 	.word	0x0800d4a7
 800d33c:	0800d4df 	.word	0x0800d4df
 800d340:	0800d503 	.word	0x0800d503
 800d344:	200020e0 	.word	0x200020e0

0800d348 <stdio_exit_handler>:
 800d348:	4a02      	ldr	r2, [pc, #8]	@ (800d354 <stdio_exit_handler+0xc>)
 800d34a:	4903      	ldr	r1, [pc, #12]	@ (800d358 <stdio_exit_handler+0x10>)
 800d34c:	4803      	ldr	r0, [pc, #12]	@ (800d35c <stdio_exit_handler+0x14>)
 800d34e:	f000 b87b 	b.w	800d448 <_fwalk_sglue>
 800d352:	bf00      	nop
 800d354:	200000fc 	.word	0x200000fc
 800d358:	0800ee1d 	.word	0x0800ee1d
 800d35c:	2000010c 	.word	0x2000010c

0800d360 <cleanup_stdio>:
 800d360:	6841      	ldr	r1, [r0, #4]
 800d362:	4b0c      	ldr	r3, [pc, #48]	@ (800d394 <cleanup_stdio+0x34>)
 800d364:	4299      	cmp	r1, r3
 800d366:	b510      	push	{r4, lr}
 800d368:	4604      	mov	r4, r0
 800d36a:	d001      	beq.n	800d370 <cleanup_stdio+0x10>
 800d36c:	f001 fd56 	bl	800ee1c <_fflush_r>
 800d370:	68a1      	ldr	r1, [r4, #8]
 800d372:	4b09      	ldr	r3, [pc, #36]	@ (800d398 <cleanup_stdio+0x38>)
 800d374:	4299      	cmp	r1, r3
 800d376:	d002      	beq.n	800d37e <cleanup_stdio+0x1e>
 800d378:	4620      	mov	r0, r4
 800d37a:	f001 fd4f 	bl	800ee1c <_fflush_r>
 800d37e:	68e1      	ldr	r1, [r4, #12]
 800d380:	4b06      	ldr	r3, [pc, #24]	@ (800d39c <cleanup_stdio+0x3c>)
 800d382:	4299      	cmp	r1, r3
 800d384:	d004      	beq.n	800d390 <cleanup_stdio+0x30>
 800d386:	4620      	mov	r0, r4
 800d388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d38c:	f001 bd46 	b.w	800ee1c <_fflush_r>
 800d390:	bd10      	pop	{r4, pc}
 800d392:	bf00      	nop
 800d394:	200020e0 	.word	0x200020e0
 800d398:	20002148 	.word	0x20002148
 800d39c:	200021b0 	.word	0x200021b0

0800d3a0 <global_stdio_init.part.0>:
 800d3a0:	b510      	push	{r4, lr}
 800d3a2:	4b0b      	ldr	r3, [pc, #44]	@ (800d3d0 <global_stdio_init.part.0+0x30>)
 800d3a4:	4c0b      	ldr	r4, [pc, #44]	@ (800d3d4 <global_stdio_init.part.0+0x34>)
 800d3a6:	4a0c      	ldr	r2, [pc, #48]	@ (800d3d8 <global_stdio_init.part.0+0x38>)
 800d3a8:	601a      	str	r2, [r3, #0]
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	2104      	movs	r1, #4
 800d3b0:	f7ff ff94 	bl	800d2dc <std>
 800d3b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	2109      	movs	r1, #9
 800d3bc:	f7ff ff8e 	bl	800d2dc <std>
 800d3c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d3c4:	2202      	movs	r2, #2
 800d3c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3ca:	2112      	movs	r1, #18
 800d3cc:	f7ff bf86 	b.w	800d2dc <std>
 800d3d0:	20002218 	.word	0x20002218
 800d3d4:	200020e0 	.word	0x200020e0
 800d3d8:	0800d349 	.word	0x0800d349

0800d3dc <__sfp_lock_acquire>:
 800d3dc:	4801      	ldr	r0, [pc, #4]	@ (800d3e4 <__sfp_lock_acquire+0x8>)
 800d3de:	f000 b922 	b.w	800d626 <__retarget_lock_acquire_recursive>
 800d3e2:	bf00      	nop
 800d3e4:	20002221 	.word	0x20002221

0800d3e8 <__sfp_lock_release>:
 800d3e8:	4801      	ldr	r0, [pc, #4]	@ (800d3f0 <__sfp_lock_release+0x8>)
 800d3ea:	f000 b91d 	b.w	800d628 <__retarget_lock_release_recursive>
 800d3ee:	bf00      	nop
 800d3f0:	20002221 	.word	0x20002221

0800d3f4 <__sinit>:
 800d3f4:	b510      	push	{r4, lr}
 800d3f6:	4604      	mov	r4, r0
 800d3f8:	f7ff fff0 	bl	800d3dc <__sfp_lock_acquire>
 800d3fc:	6a23      	ldr	r3, [r4, #32]
 800d3fe:	b11b      	cbz	r3, 800d408 <__sinit+0x14>
 800d400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d404:	f7ff bff0 	b.w	800d3e8 <__sfp_lock_release>
 800d408:	4b04      	ldr	r3, [pc, #16]	@ (800d41c <__sinit+0x28>)
 800d40a:	6223      	str	r3, [r4, #32]
 800d40c:	4b04      	ldr	r3, [pc, #16]	@ (800d420 <__sinit+0x2c>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d1f5      	bne.n	800d400 <__sinit+0xc>
 800d414:	f7ff ffc4 	bl	800d3a0 <global_stdio_init.part.0>
 800d418:	e7f2      	b.n	800d400 <__sinit+0xc>
 800d41a:	bf00      	nop
 800d41c:	0800d361 	.word	0x0800d361
 800d420:	20002218 	.word	0x20002218

0800d424 <fiprintf>:
 800d424:	b40e      	push	{r1, r2, r3}
 800d426:	b503      	push	{r0, r1, lr}
 800d428:	4601      	mov	r1, r0
 800d42a:	ab03      	add	r3, sp, #12
 800d42c:	4805      	ldr	r0, [pc, #20]	@ (800d444 <fiprintf+0x20>)
 800d42e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d432:	6800      	ldr	r0, [r0, #0]
 800d434:	9301      	str	r3, [sp, #4]
 800d436:	f001 fb55 	bl	800eae4 <_vfiprintf_r>
 800d43a:	b002      	add	sp, #8
 800d43c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d440:	b003      	add	sp, #12
 800d442:	4770      	bx	lr
 800d444:	20000108 	.word	0x20000108

0800d448 <_fwalk_sglue>:
 800d448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d44c:	4607      	mov	r7, r0
 800d44e:	4688      	mov	r8, r1
 800d450:	4614      	mov	r4, r2
 800d452:	2600      	movs	r6, #0
 800d454:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d458:	f1b9 0901 	subs.w	r9, r9, #1
 800d45c:	d505      	bpl.n	800d46a <_fwalk_sglue+0x22>
 800d45e:	6824      	ldr	r4, [r4, #0]
 800d460:	2c00      	cmp	r4, #0
 800d462:	d1f7      	bne.n	800d454 <_fwalk_sglue+0xc>
 800d464:	4630      	mov	r0, r6
 800d466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d46a:	89ab      	ldrh	r3, [r5, #12]
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d907      	bls.n	800d480 <_fwalk_sglue+0x38>
 800d470:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d474:	3301      	adds	r3, #1
 800d476:	d003      	beq.n	800d480 <_fwalk_sglue+0x38>
 800d478:	4629      	mov	r1, r5
 800d47a:	4638      	mov	r0, r7
 800d47c:	47c0      	blx	r8
 800d47e:	4306      	orrs	r6, r0
 800d480:	3568      	adds	r5, #104	@ 0x68
 800d482:	e7e9      	b.n	800d458 <_fwalk_sglue+0x10>

0800d484 <__sread>:
 800d484:	b510      	push	{r4, lr}
 800d486:	460c      	mov	r4, r1
 800d488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d48c:	f000 f86c 	bl	800d568 <_read_r>
 800d490:	2800      	cmp	r0, #0
 800d492:	bfab      	itete	ge
 800d494:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d496:	89a3      	ldrhlt	r3, [r4, #12]
 800d498:	181b      	addge	r3, r3, r0
 800d49a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d49e:	bfac      	ite	ge
 800d4a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d4a2:	81a3      	strhlt	r3, [r4, #12]
 800d4a4:	bd10      	pop	{r4, pc}

0800d4a6 <__swrite>:
 800d4a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4aa:	461f      	mov	r7, r3
 800d4ac:	898b      	ldrh	r3, [r1, #12]
 800d4ae:	05db      	lsls	r3, r3, #23
 800d4b0:	4605      	mov	r5, r0
 800d4b2:	460c      	mov	r4, r1
 800d4b4:	4616      	mov	r6, r2
 800d4b6:	d505      	bpl.n	800d4c4 <__swrite+0x1e>
 800d4b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4bc:	2302      	movs	r3, #2
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f000 f840 	bl	800d544 <_lseek_r>
 800d4c4:	89a3      	ldrh	r3, [r4, #12]
 800d4c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d4ce:	81a3      	strh	r3, [r4, #12]
 800d4d0:	4632      	mov	r2, r6
 800d4d2:	463b      	mov	r3, r7
 800d4d4:	4628      	mov	r0, r5
 800d4d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4da:	f000 b867 	b.w	800d5ac <_write_r>

0800d4de <__sseek>:
 800d4de:	b510      	push	{r4, lr}
 800d4e0:	460c      	mov	r4, r1
 800d4e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4e6:	f000 f82d 	bl	800d544 <_lseek_r>
 800d4ea:	1c43      	adds	r3, r0, #1
 800d4ec:	89a3      	ldrh	r3, [r4, #12]
 800d4ee:	bf15      	itete	ne
 800d4f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d4f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d4f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d4fa:	81a3      	strheq	r3, [r4, #12]
 800d4fc:	bf18      	it	ne
 800d4fe:	81a3      	strhne	r3, [r4, #12]
 800d500:	bd10      	pop	{r4, pc}

0800d502 <__sclose>:
 800d502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d506:	f000 b80d 	b.w	800d524 <_close_r>

0800d50a <memset>:
 800d50a:	4402      	add	r2, r0
 800d50c:	4603      	mov	r3, r0
 800d50e:	4293      	cmp	r3, r2
 800d510:	d100      	bne.n	800d514 <memset+0xa>
 800d512:	4770      	bx	lr
 800d514:	f803 1b01 	strb.w	r1, [r3], #1
 800d518:	e7f9      	b.n	800d50e <memset+0x4>
	...

0800d51c <_localeconv_r>:
 800d51c:	4800      	ldr	r0, [pc, #0]	@ (800d520 <_localeconv_r+0x4>)
 800d51e:	4770      	bx	lr
 800d520:	20000248 	.word	0x20000248

0800d524 <_close_r>:
 800d524:	b538      	push	{r3, r4, r5, lr}
 800d526:	4d06      	ldr	r5, [pc, #24]	@ (800d540 <_close_r+0x1c>)
 800d528:	2300      	movs	r3, #0
 800d52a:	4604      	mov	r4, r0
 800d52c:	4608      	mov	r0, r1
 800d52e:	602b      	str	r3, [r5, #0]
 800d530:	f7f7 fb2e 	bl	8004b90 <_close>
 800d534:	1c43      	adds	r3, r0, #1
 800d536:	d102      	bne.n	800d53e <_close_r+0x1a>
 800d538:	682b      	ldr	r3, [r5, #0]
 800d53a:	b103      	cbz	r3, 800d53e <_close_r+0x1a>
 800d53c:	6023      	str	r3, [r4, #0]
 800d53e:	bd38      	pop	{r3, r4, r5, pc}
 800d540:	2000221c 	.word	0x2000221c

0800d544 <_lseek_r>:
 800d544:	b538      	push	{r3, r4, r5, lr}
 800d546:	4d07      	ldr	r5, [pc, #28]	@ (800d564 <_lseek_r+0x20>)
 800d548:	4604      	mov	r4, r0
 800d54a:	4608      	mov	r0, r1
 800d54c:	4611      	mov	r1, r2
 800d54e:	2200      	movs	r2, #0
 800d550:	602a      	str	r2, [r5, #0]
 800d552:	461a      	mov	r2, r3
 800d554:	f7f7 fb43 	bl	8004bde <_lseek>
 800d558:	1c43      	adds	r3, r0, #1
 800d55a:	d102      	bne.n	800d562 <_lseek_r+0x1e>
 800d55c:	682b      	ldr	r3, [r5, #0]
 800d55e:	b103      	cbz	r3, 800d562 <_lseek_r+0x1e>
 800d560:	6023      	str	r3, [r4, #0]
 800d562:	bd38      	pop	{r3, r4, r5, pc}
 800d564:	2000221c 	.word	0x2000221c

0800d568 <_read_r>:
 800d568:	b538      	push	{r3, r4, r5, lr}
 800d56a:	4d07      	ldr	r5, [pc, #28]	@ (800d588 <_read_r+0x20>)
 800d56c:	4604      	mov	r4, r0
 800d56e:	4608      	mov	r0, r1
 800d570:	4611      	mov	r1, r2
 800d572:	2200      	movs	r2, #0
 800d574:	602a      	str	r2, [r5, #0]
 800d576:	461a      	mov	r2, r3
 800d578:	f7f7 faed 	bl	8004b56 <_read>
 800d57c:	1c43      	adds	r3, r0, #1
 800d57e:	d102      	bne.n	800d586 <_read_r+0x1e>
 800d580:	682b      	ldr	r3, [r5, #0]
 800d582:	b103      	cbz	r3, 800d586 <_read_r+0x1e>
 800d584:	6023      	str	r3, [r4, #0]
 800d586:	bd38      	pop	{r3, r4, r5, pc}
 800d588:	2000221c 	.word	0x2000221c

0800d58c <_sbrk_r>:
 800d58c:	b538      	push	{r3, r4, r5, lr}
 800d58e:	4d06      	ldr	r5, [pc, #24]	@ (800d5a8 <_sbrk_r+0x1c>)
 800d590:	2300      	movs	r3, #0
 800d592:	4604      	mov	r4, r0
 800d594:	4608      	mov	r0, r1
 800d596:	602b      	str	r3, [r5, #0]
 800d598:	f7f7 fb2e 	bl	8004bf8 <_sbrk>
 800d59c:	1c43      	adds	r3, r0, #1
 800d59e:	d102      	bne.n	800d5a6 <_sbrk_r+0x1a>
 800d5a0:	682b      	ldr	r3, [r5, #0]
 800d5a2:	b103      	cbz	r3, 800d5a6 <_sbrk_r+0x1a>
 800d5a4:	6023      	str	r3, [r4, #0]
 800d5a6:	bd38      	pop	{r3, r4, r5, pc}
 800d5a8:	2000221c 	.word	0x2000221c

0800d5ac <_write_r>:
 800d5ac:	b538      	push	{r3, r4, r5, lr}
 800d5ae:	4d07      	ldr	r5, [pc, #28]	@ (800d5cc <_write_r+0x20>)
 800d5b0:	4604      	mov	r4, r0
 800d5b2:	4608      	mov	r0, r1
 800d5b4:	4611      	mov	r1, r2
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	602a      	str	r2, [r5, #0]
 800d5ba:	461a      	mov	r2, r3
 800d5bc:	f7f6 f944 	bl	8003848 <_write>
 800d5c0:	1c43      	adds	r3, r0, #1
 800d5c2:	d102      	bne.n	800d5ca <_write_r+0x1e>
 800d5c4:	682b      	ldr	r3, [r5, #0]
 800d5c6:	b103      	cbz	r3, 800d5ca <_write_r+0x1e>
 800d5c8:	6023      	str	r3, [r4, #0]
 800d5ca:	bd38      	pop	{r3, r4, r5, pc}
 800d5cc:	2000221c 	.word	0x2000221c

0800d5d0 <__errno>:
 800d5d0:	4b01      	ldr	r3, [pc, #4]	@ (800d5d8 <__errno+0x8>)
 800d5d2:	6818      	ldr	r0, [r3, #0]
 800d5d4:	4770      	bx	lr
 800d5d6:	bf00      	nop
 800d5d8:	20000108 	.word	0x20000108

0800d5dc <__libc_init_array>:
 800d5dc:	b570      	push	{r4, r5, r6, lr}
 800d5de:	4d0d      	ldr	r5, [pc, #52]	@ (800d614 <__libc_init_array+0x38>)
 800d5e0:	4c0d      	ldr	r4, [pc, #52]	@ (800d618 <__libc_init_array+0x3c>)
 800d5e2:	1b64      	subs	r4, r4, r5
 800d5e4:	10a4      	asrs	r4, r4, #2
 800d5e6:	2600      	movs	r6, #0
 800d5e8:	42a6      	cmp	r6, r4
 800d5ea:	d109      	bne.n	800d600 <__libc_init_array+0x24>
 800d5ec:	4d0b      	ldr	r5, [pc, #44]	@ (800d61c <__libc_init_array+0x40>)
 800d5ee:	4c0c      	ldr	r4, [pc, #48]	@ (800d620 <__libc_init_array+0x44>)
 800d5f0:	f001 fdcc 	bl	800f18c <_init>
 800d5f4:	1b64      	subs	r4, r4, r5
 800d5f6:	10a4      	asrs	r4, r4, #2
 800d5f8:	2600      	movs	r6, #0
 800d5fa:	42a6      	cmp	r6, r4
 800d5fc:	d105      	bne.n	800d60a <__libc_init_array+0x2e>
 800d5fe:	bd70      	pop	{r4, r5, r6, pc}
 800d600:	f855 3b04 	ldr.w	r3, [r5], #4
 800d604:	4798      	blx	r3
 800d606:	3601      	adds	r6, #1
 800d608:	e7ee      	b.n	800d5e8 <__libc_init_array+0xc>
 800d60a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d60e:	4798      	blx	r3
 800d610:	3601      	adds	r6, #1
 800d612:	e7f2      	b.n	800d5fa <__libc_init_array+0x1e>
 800d614:	0800f5fc 	.word	0x0800f5fc
 800d618:	0800f5fc 	.word	0x0800f5fc
 800d61c:	0800f5fc 	.word	0x0800f5fc
 800d620:	0800f600 	.word	0x0800f600

0800d624 <__retarget_lock_init_recursive>:
 800d624:	4770      	bx	lr

0800d626 <__retarget_lock_acquire_recursive>:
 800d626:	4770      	bx	lr

0800d628 <__retarget_lock_release_recursive>:
 800d628:	4770      	bx	lr

0800d62a <memcpy>:
 800d62a:	440a      	add	r2, r1
 800d62c:	4291      	cmp	r1, r2
 800d62e:	f100 33ff 	add.w	r3, r0, #4294967295
 800d632:	d100      	bne.n	800d636 <memcpy+0xc>
 800d634:	4770      	bx	lr
 800d636:	b510      	push	{r4, lr}
 800d638:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d63c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d640:	4291      	cmp	r1, r2
 800d642:	d1f9      	bne.n	800d638 <memcpy+0xe>
 800d644:	bd10      	pop	{r4, pc}

0800d646 <abort>:
 800d646:	b508      	push	{r3, lr}
 800d648:	2006      	movs	r0, #6
 800d64a:	f001 fccb 	bl	800efe4 <raise>
 800d64e:	2001      	movs	r0, #1
 800d650:	f7f7 fa76 	bl	8004b40 <_exit>

0800d654 <quorem>:
 800d654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d658:	6903      	ldr	r3, [r0, #16]
 800d65a:	690c      	ldr	r4, [r1, #16]
 800d65c:	42a3      	cmp	r3, r4
 800d65e:	4607      	mov	r7, r0
 800d660:	db7e      	blt.n	800d760 <quorem+0x10c>
 800d662:	3c01      	subs	r4, #1
 800d664:	f101 0814 	add.w	r8, r1, #20
 800d668:	00a3      	lsls	r3, r4, #2
 800d66a:	f100 0514 	add.w	r5, r0, #20
 800d66e:	9300      	str	r3, [sp, #0]
 800d670:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d674:	9301      	str	r3, [sp, #4]
 800d676:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d67a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d67e:	3301      	adds	r3, #1
 800d680:	429a      	cmp	r2, r3
 800d682:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d686:	fbb2 f6f3 	udiv	r6, r2, r3
 800d68a:	d32e      	bcc.n	800d6ea <quorem+0x96>
 800d68c:	f04f 0a00 	mov.w	sl, #0
 800d690:	46c4      	mov	ip, r8
 800d692:	46ae      	mov	lr, r5
 800d694:	46d3      	mov	fp, sl
 800d696:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d69a:	b298      	uxth	r0, r3
 800d69c:	fb06 a000 	mla	r0, r6, r0, sl
 800d6a0:	0c02      	lsrs	r2, r0, #16
 800d6a2:	0c1b      	lsrs	r3, r3, #16
 800d6a4:	fb06 2303 	mla	r3, r6, r3, r2
 800d6a8:	f8de 2000 	ldr.w	r2, [lr]
 800d6ac:	b280      	uxth	r0, r0
 800d6ae:	b292      	uxth	r2, r2
 800d6b0:	1a12      	subs	r2, r2, r0
 800d6b2:	445a      	add	r2, fp
 800d6b4:	f8de 0000 	ldr.w	r0, [lr]
 800d6b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d6bc:	b29b      	uxth	r3, r3
 800d6be:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d6c2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d6c6:	b292      	uxth	r2, r2
 800d6c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d6cc:	45e1      	cmp	r9, ip
 800d6ce:	f84e 2b04 	str.w	r2, [lr], #4
 800d6d2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d6d6:	d2de      	bcs.n	800d696 <quorem+0x42>
 800d6d8:	9b00      	ldr	r3, [sp, #0]
 800d6da:	58eb      	ldr	r3, [r5, r3]
 800d6dc:	b92b      	cbnz	r3, 800d6ea <quorem+0x96>
 800d6de:	9b01      	ldr	r3, [sp, #4]
 800d6e0:	3b04      	subs	r3, #4
 800d6e2:	429d      	cmp	r5, r3
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	d32f      	bcc.n	800d748 <quorem+0xf4>
 800d6e8:	613c      	str	r4, [r7, #16]
 800d6ea:	4638      	mov	r0, r7
 800d6ec:	f001 f8c8 	bl	800e880 <__mcmp>
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	db25      	blt.n	800d740 <quorem+0xec>
 800d6f4:	4629      	mov	r1, r5
 800d6f6:	2000      	movs	r0, #0
 800d6f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800d6fc:	f8d1 c000 	ldr.w	ip, [r1]
 800d700:	fa1f fe82 	uxth.w	lr, r2
 800d704:	fa1f f38c 	uxth.w	r3, ip
 800d708:	eba3 030e 	sub.w	r3, r3, lr
 800d70c:	4403      	add	r3, r0
 800d70e:	0c12      	lsrs	r2, r2, #16
 800d710:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d714:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d718:	b29b      	uxth	r3, r3
 800d71a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d71e:	45c1      	cmp	r9, r8
 800d720:	f841 3b04 	str.w	r3, [r1], #4
 800d724:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d728:	d2e6      	bcs.n	800d6f8 <quorem+0xa4>
 800d72a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d72e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d732:	b922      	cbnz	r2, 800d73e <quorem+0xea>
 800d734:	3b04      	subs	r3, #4
 800d736:	429d      	cmp	r5, r3
 800d738:	461a      	mov	r2, r3
 800d73a:	d30b      	bcc.n	800d754 <quorem+0x100>
 800d73c:	613c      	str	r4, [r7, #16]
 800d73e:	3601      	adds	r6, #1
 800d740:	4630      	mov	r0, r6
 800d742:	b003      	add	sp, #12
 800d744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d748:	6812      	ldr	r2, [r2, #0]
 800d74a:	3b04      	subs	r3, #4
 800d74c:	2a00      	cmp	r2, #0
 800d74e:	d1cb      	bne.n	800d6e8 <quorem+0x94>
 800d750:	3c01      	subs	r4, #1
 800d752:	e7c6      	b.n	800d6e2 <quorem+0x8e>
 800d754:	6812      	ldr	r2, [r2, #0]
 800d756:	3b04      	subs	r3, #4
 800d758:	2a00      	cmp	r2, #0
 800d75a:	d1ef      	bne.n	800d73c <quorem+0xe8>
 800d75c:	3c01      	subs	r4, #1
 800d75e:	e7ea      	b.n	800d736 <quorem+0xe2>
 800d760:	2000      	movs	r0, #0
 800d762:	e7ee      	b.n	800d742 <quorem+0xee>
 800d764:	0000      	movs	r0, r0
	...

0800d768 <_dtoa_r>:
 800d768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d76c:	69c7      	ldr	r7, [r0, #28]
 800d76e:	b097      	sub	sp, #92	@ 0x5c
 800d770:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d774:	ec55 4b10 	vmov	r4, r5, d0
 800d778:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d77a:	9107      	str	r1, [sp, #28]
 800d77c:	4681      	mov	r9, r0
 800d77e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d780:	9311      	str	r3, [sp, #68]	@ 0x44
 800d782:	b97f      	cbnz	r7, 800d7a4 <_dtoa_r+0x3c>
 800d784:	2010      	movs	r0, #16
 800d786:	f7ff f895 	bl	800c8b4 <malloc>
 800d78a:	4602      	mov	r2, r0
 800d78c:	f8c9 001c 	str.w	r0, [r9, #28]
 800d790:	b920      	cbnz	r0, 800d79c <_dtoa_r+0x34>
 800d792:	4ba9      	ldr	r3, [pc, #676]	@ (800da38 <_dtoa_r+0x2d0>)
 800d794:	21ef      	movs	r1, #239	@ 0xef
 800d796:	48a9      	ldr	r0, [pc, #676]	@ (800da3c <_dtoa_r+0x2d4>)
 800d798:	f7ff f86e 	bl	800c878 <__assert_func>
 800d79c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d7a0:	6007      	str	r7, [r0, #0]
 800d7a2:	60c7      	str	r7, [r0, #12]
 800d7a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d7a8:	6819      	ldr	r1, [r3, #0]
 800d7aa:	b159      	cbz	r1, 800d7c4 <_dtoa_r+0x5c>
 800d7ac:	685a      	ldr	r2, [r3, #4]
 800d7ae:	604a      	str	r2, [r1, #4]
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	4093      	lsls	r3, r2
 800d7b4:	608b      	str	r3, [r1, #8]
 800d7b6:	4648      	mov	r0, r9
 800d7b8:	f000 fe30 	bl	800e41c <_Bfree>
 800d7bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	601a      	str	r2, [r3, #0]
 800d7c4:	1e2b      	subs	r3, r5, #0
 800d7c6:	bfb9      	ittee	lt
 800d7c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d7cc:	9305      	strlt	r3, [sp, #20]
 800d7ce:	2300      	movge	r3, #0
 800d7d0:	6033      	strge	r3, [r6, #0]
 800d7d2:	9f05      	ldr	r7, [sp, #20]
 800d7d4:	4b9a      	ldr	r3, [pc, #616]	@ (800da40 <_dtoa_r+0x2d8>)
 800d7d6:	bfbc      	itt	lt
 800d7d8:	2201      	movlt	r2, #1
 800d7da:	6032      	strlt	r2, [r6, #0]
 800d7dc:	43bb      	bics	r3, r7
 800d7de:	d112      	bne.n	800d806 <_dtoa_r+0x9e>
 800d7e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d7e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d7e6:	6013      	str	r3, [r2, #0]
 800d7e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d7ec:	4323      	orrs	r3, r4
 800d7ee:	f000 855a 	beq.w	800e2a6 <_dtoa_r+0xb3e>
 800d7f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d7f4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800da54 <_dtoa_r+0x2ec>
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	f000 855c 	beq.w	800e2b6 <_dtoa_r+0xb4e>
 800d7fe:	f10a 0303 	add.w	r3, sl, #3
 800d802:	f000 bd56 	b.w	800e2b2 <_dtoa_r+0xb4a>
 800d806:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d80a:	2200      	movs	r2, #0
 800d80c:	ec51 0b17 	vmov	r0, r1, d7
 800d810:	2300      	movs	r3, #0
 800d812:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d816:	f7f3 f957 	bl	8000ac8 <__aeabi_dcmpeq>
 800d81a:	4680      	mov	r8, r0
 800d81c:	b158      	cbz	r0, 800d836 <_dtoa_r+0xce>
 800d81e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d820:	2301      	movs	r3, #1
 800d822:	6013      	str	r3, [r2, #0]
 800d824:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d826:	b113      	cbz	r3, 800d82e <_dtoa_r+0xc6>
 800d828:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d82a:	4b86      	ldr	r3, [pc, #536]	@ (800da44 <_dtoa_r+0x2dc>)
 800d82c:	6013      	str	r3, [r2, #0]
 800d82e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800da58 <_dtoa_r+0x2f0>
 800d832:	f000 bd40 	b.w	800e2b6 <_dtoa_r+0xb4e>
 800d836:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d83a:	aa14      	add	r2, sp, #80	@ 0x50
 800d83c:	a915      	add	r1, sp, #84	@ 0x54
 800d83e:	4648      	mov	r0, r9
 800d840:	f001 f8ce 	bl	800e9e0 <__d2b>
 800d844:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d848:	9002      	str	r0, [sp, #8]
 800d84a:	2e00      	cmp	r6, #0
 800d84c:	d078      	beq.n	800d940 <_dtoa_r+0x1d8>
 800d84e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d850:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d858:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d85c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d860:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d864:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d868:	4619      	mov	r1, r3
 800d86a:	2200      	movs	r2, #0
 800d86c:	4b76      	ldr	r3, [pc, #472]	@ (800da48 <_dtoa_r+0x2e0>)
 800d86e:	f7f2 fd0b 	bl	8000288 <__aeabi_dsub>
 800d872:	a36b      	add	r3, pc, #428	@ (adr r3, 800da20 <_dtoa_r+0x2b8>)
 800d874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d878:	f7f2 febe 	bl	80005f8 <__aeabi_dmul>
 800d87c:	a36a      	add	r3, pc, #424	@ (adr r3, 800da28 <_dtoa_r+0x2c0>)
 800d87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d882:	f7f2 fd03 	bl	800028c <__adddf3>
 800d886:	4604      	mov	r4, r0
 800d888:	4630      	mov	r0, r6
 800d88a:	460d      	mov	r5, r1
 800d88c:	f7f2 fe4a 	bl	8000524 <__aeabi_i2d>
 800d890:	a367      	add	r3, pc, #412	@ (adr r3, 800da30 <_dtoa_r+0x2c8>)
 800d892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d896:	f7f2 feaf 	bl	80005f8 <__aeabi_dmul>
 800d89a:	4602      	mov	r2, r0
 800d89c:	460b      	mov	r3, r1
 800d89e:	4620      	mov	r0, r4
 800d8a0:	4629      	mov	r1, r5
 800d8a2:	f7f2 fcf3 	bl	800028c <__adddf3>
 800d8a6:	4604      	mov	r4, r0
 800d8a8:	460d      	mov	r5, r1
 800d8aa:	f7f3 f955 	bl	8000b58 <__aeabi_d2iz>
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	4607      	mov	r7, r0
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	4629      	mov	r1, r5
 800d8b8:	f7f3 f910 	bl	8000adc <__aeabi_dcmplt>
 800d8bc:	b140      	cbz	r0, 800d8d0 <_dtoa_r+0x168>
 800d8be:	4638      	mov	r0, r7
 800d8c0:	f7f2 fe30 	bl	8000524 <__aeabi_i2d>
 800d8c4:	4622      	mov	r2, r4
 800d8c6:	462b      	mov	r3, r5
 800d8c8:	f7f3 f8fe 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8cc:	b900      	cbnz	r0, 800d8d0 <_dtoa_r+0x168>
 800d8ce:	3f01      	subs	r7, #1
 800d8d0:	2f16      	cmp	r7, #22
 800d8d2:	d852      	bhi.n	800d97a <_dtoa_r+0x212>
 800d8d4:	4b5d      	ldr	r3, [pc, #372]	@ (800da4c <_dtoa_r+0x2e4>)
 800d8d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d8e2:	f7f3 f8fb 	bl	8000adc <__aeabi_dcmplt>
 800d8e6:	2800      	cmp	r0, #0
 800d8e8:	d049      	beq.n	800d97e <_dtoa_r+0x216>
 800d8ea:	3f01      	subs	r7, #1
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	9310      	str	r3, [sp, #64]	@ 0x40
 800d8f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d8f2:	1b9b      	subs	r3, r3, r6
 800d8f4:	1e5a      	subs	r2, r3, #1
 800d8f6:	bf45      	ittet	mi
 800d8f8:	f1c3 0301 	rsbmi	r3, r3, #1
 800d8fc:	9300      	strmi	r3, [sp, #0]
 800d8fe:	2300      	movpl	r3, #0
 800d900:	2300      	movmi	r3, #0
 800d902:	9206      	str	r2, [sp, #24]
 800d904:	bf54      	ite	pl
 800d906:	9300      	strpl	r3, [sp, #0]
 800d908:	9306      	strmi	r3, [sp, #24]
 800d90a:	2f00      	cmp	r7, #0
 800d90c:	db39      	blt.n	800d982 <_dtoa_r+0x21a>
 800d90e:	9b06      	ldr	r3, [sp, #24]
 800d910:	970d      	str	r7, [sp, #52]	@ 0x34
 800d912:	443b      	add	r3, r7
 800d914:	9306      	str	r3, [sp, #24]
 800d916:	2300      	movs	r3, #0
 800d918:	9308      	str	r3, [sp, #32]
 800d91a:	9b07      	ldr	r3, [sp, #28]
 800d91c:	2b09      	cmp	r3, #9
 800d91e:	d863      	bhi.n	800d9e8 <_dtoa_r+0x280>
 800d920:	2b05      	cmp	r3, #5
 800d922:	bfc4      	itt	gt
 800d924:	3b04      	subgt	r3, #4
 800d926:	9307      	strgt	r3, [sp, #28]
 800d928:	9b07      	ldr	r3, [sp, #28]
 800d92a:	f1a3 0302 	sub.w	r3, r3, #2
 800d92e:	bfcc      	ite	gt
 800d930:	2400      	movgt	r4, #0
 800d932:	2401      	movle	r4, #1
 800d934:	2b03      	cmp	r3, #3
 800d936:	d863      	bhi.n	800da00 <_dtoa_r+0x298>
 800d938:	e8df f003 	tbb	[pc, r3]
 800d93c:	2b375452 	.word	0x2b375452
 800d940:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d944:	441e      	add	r6, r3
 800d946:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d94a:	2b20      	cmp	r3, #32
 800d94c:	bfc1      	itttt	gt
 800d94e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d952:	409f      	lslgt	r7, r3
 800d954:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d958:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d95c:	bfd6      	itet	le
 800d95e:	f1c3 0320 	rsble	r3, r3, #32
 800d962:	ea47 0003 	orrgt.w	r0, r7, r3
 800d966:	fa04 f003 	lslle.w	r0, r4, r3
 800d96a:	f7f2 fdcb 	bl	8000504 <__aeabi_ui2d>
 800d96e:	2201      	movs	r2, #1
 800d970:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d974:	3e01      	subs	r6, #1
 800d976:	9212      	str	r2, [sp, #72]	@ 0x48
 800d978:	e776      	b.n	800d868 <_dtoa_r+0x100>
 800d97a:	2301      	movs	r3, #1
 800d97c:	e7b7      	b.n	800d8ee <_dtoa_r+0x186>
 800d97e:	9010      	str	r0, [sp, #64]	@ 0x40
 800d980:	e7b6      	b.n	800d8f0 <_dtoa_r+0x188>
 800d982:	9b00      	ldr	r3, [sp, #0]
 800d984:	1bdb      	subs	r3, r3, r7
 800d986:	9300      	str	r3, [sp, #0]
 800d988:	427b      	negs	r3, r7
 800d98a:	9308      	str	r3, [sp, #32]
 800d98c:	2300      	movs	r3, #0
 800d98e:	930d      	str	r3, [sp, #52]	@ 0x34
 800d990:	e7c3      	b.n	800d91a <_dtoa_r+0x1b2>
 800d992:	2301      	movs	r3, #1
 800d994:	9309      	str	r3, [sp, #36]	@ 0x24
 800d996:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d998:	eb07 0b03 	add.w	fp, r7, r3
 800d99c:	f10b 0301 	add.w	r3, fp, #1
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	9303      	str	r3, [sp, #12]
 800d9a4:	bfb8      	it	lt
 800d9a6:	2301      	movlt	r3, #1
 800d9a8:	e006      	b.n	800d9b8 <_dtoa_r+0x250>
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	dd28      	ble.n	800da06 <_dtoa_r+0x29e>
 800d9b4:	469b      	mov	fp, r3
 800d9b6:	9303      	str	r3, [sp, #12]
 800d9b8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d9bc:	2100      	movs	r1, #0
 800d9be:	2204      	movs	r2, #4
 800d9c0:	f102 0514 	add.w	r5, r2, #20
 800d9c4:	429d      	cmp	r5, r3
 800d9c6:	d926      	bls.n	800da16 <_dtoa_r+0x2ae>
 800d9c8:	6041      	str	r1, [r0, #4]
 800d9ca:	4648      	mov	r0, r9
 800d9cc:	f000 fce6 	bl	800e39c <_Balloc>
 800d9d0:	4682      	mov	sl, r0
 800d9d2:	2800      	cmp	r0, #0
 800d9d4:	d142      	bne.n	800da5c <_dtoa_r+0x2f4>
 800d9d6:	4b1e      	ldr	r3, [pc, #120]	@ (800da50 <_dtoa_r+0x2e8>)
 800d9d8:	4602      	mov	r2, r0
 800d9da:	f240 11af 	movw	r1, #431	@ 0x1af
 800d9de:	e6da      	b.n	800d796 <_dtoa_r+0x2e>
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	e7e3      	b.n	800d9ac <_dtoa_r+0x244>
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	e7d5      	b.n	800d994 <_dtoa_r+0x22c>
 800d9e8:	2401      	movs	r4, #1
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	9307      	str	r3, [sp, #28]
 800d9ee:	9409      	str	r4, [sp, #36]	@ 0x24
 800d9f0:	f04f 3bff 	mov.w	fp, #4294967295
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	f8cd b00c 	str.w	fp, [sp, #12]
 800d9fa:	2312      	movs	r3, #18
 800d9fc:	920c      	str	r2, [sp, #48]	@ 0x30
 800d9fe:	e7db      	b.n	800d9b8 <_dtoa_r+0x250>
 800da00:	2301      	movs	r3, #1
 800da02:	9309      	str	r3, [sp, #36]	@ 0x24
 800da04:	e7f4      	b.n	800d9f0 <_dtoa_r+0x288>
 800da06:	f04f 0b01 	mov.w	fp, #1
 800da0a:	f8cd b00c 	str.w	fp, [sp, #12]
 800da0e:	465b      	mov	r3, fp
 800da10:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800da14:	e7d0      	b.n	800d9b8 <_dtoa_r+0x250>
 800da16:	3101      	adds	r1, #1
 800da18:	0052      	lsls	r2, r2, #1
 800da1a:	e7d1      	b.n	800d9c0 <_dtoa_r+0x258>
 800da1c:	f3af 8000 	nop.w
 800da20:	636f4361 	.word	0x636f4361
 800da24:	3fd287a7 	.word	0x3fd287a7
 800da28:	8b60c8b3 	.word	0x8b60c8b3
 800da2c:	3fc68a28 	.word	0x3fc68a28
 800da30:	509f79fb 	.word	0x509f79fb
 800da34:	3fd34413 	.word	0x3fd34413
 800da38:	0800f2f9 	.word	0x0800f2f9
 800da3c:	0800f310 	.word	0x0800f310
 800da40:	7ff00000 	.word	0x7ff00000
 800da44:	0800f2c9 	.word	0x0800f2c9
 800da48:	3ff80000 	.word	0x3ff80000
 800da4c:	0800f428 	.word	0x0800f428
 800da50:	0800f368 	.word	0x0800f368
 800da54:	0800f2f5 	.word	0x0800f2f5
 800da58:	0800f2c8 	.word	0x0800f2c8
 800da5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800da60:	6018      	str	r0, [r3, #0]
 800da62:	9b03      	ldr	r3, [sp, #12]
 800da64:	2b0e      	cmp	r3, #14
 800da66:	f200 80a1 	bhi.w	800dbac <_dtoa_r+0x444>
 800da6a:	2c00      	cmp	r4, #0
 800da6c:	f000 809e 	beq.w	800dbac <_dtoa_r+0x444>
 800da70:	2f00      	cmp	r7, #0
 800da72:	dd33      	ble.n	800dadc <_dtoa_r+0x374>
 800da74:	4b9c      	ldr	r3, [pc, #624]	@ (800dce8 <_dtoa_r+0x580>)
 800da76:	f007 020f 	and.w	r2, r7, #15
 800da7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da7e:	ed93 7b00 	vldr	d7, [r3]
 800da82:	05f8      	lsls	r0, r7, #23
 800da84:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800da88:	ea4f 1427 	mov.w	r4, r7, asr #4
 800da8c:	d516      	bpl.n	800dabc <_dtoa_r+0x354>
 800da8e:	4b97      	ldr	r3, [pc, #604]	@ (800dcec <_dtoa_r+0x584>)
 800da90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800da94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800da98:	f7f2 fed8 	bl	800084c <__aeabi_ddiv>
 800da9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800daa0:	f004 040f 	and.w	r4, r4, #15
 800daa4:	2603      	movs	r6, #3
 800daa6:	4d91      	ldr	r5, [pc, #580]	@ (800dcec <_dtoa_r+0x584>)
 800daa8:	b954      	cbnz	r4, 800dac0 <_dtoa_r+0x358>
 800daaa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800daae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dab2:	f7f2 fecb 	bl	800084c <__aeabi_ddiv>
 800dab6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800daba:	e028      	b.n	800db0e <_dtoa_r+0x3a6>
 800dabc:	2602      	movs	r6, #2
 800dabe:	e7f2      	b.n	800daa6 <_dtoa_r+0x33e>
 800dac0:	07e1      	lsls	r1, r4, #31
 800dac2:	d508      	bpl.n	800dad6 <_dtoa_r+0x36e>
 800dac4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dac8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dacc:	f7f2 fd94 	bl	80005f8 <__aeabi_dmul>
 800dad0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dad4:	3601      	adds	r6, #1
 800dad6:	1064      	asrs	r4, r4, #1
 800dad8:	3508      	adds	r5, #8
 800dada:	e7e5      	b.n	800daa8 <_dtoa_r+0x340>
 800dadc:	f000 80af 	beq.w	800dc3e <_dtoa_r+0x4d6>
 800dae0:	427c      	negs	r4, r7
 800dae2:	4b81      	ldr	r3, [pc, #516]	@ (800dce8 <_dtoa_r+0x580>)
 800dae4:	4d81      	ldr	r5, [pc, #516]	@ (800dcec <_dtoa_r+0x584>)
 800dae6:	f004 020f 	and.w	r2, r4, #15
 800daea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800daee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800daf6:	f7f2 fd7f 	bl	80005f8 <__aeabi_dmul>
 800dafa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dafe:	1124      	asrs	r4, r4, #4
 800db00:	2300      	movs	r3, #0
 800db02:	2602      	movs	r6, #2
 800db04:	2c00      	cmp	r4, #0
 800db06:	f040 808f 	bne.w	800dc28 <_dtoa_r+0x4c0>
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d1d3      	bne.n	800dab6 <_dtoa_r+0x34e>
 800db0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800db10:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800db14:	2b00      	cmp	r3, #0
 800db16:	f000 8094 	beq.w	800dc42 <_dtoa_r+0x4da>
 800db1a:	4b75      	ldr	r3, [pc, #468]	@ (800dcf0 <_dtoa_r+0x588>)
 800db1c:	2200      	movs	r2, #0
 800db1e:	4620      	mov	r0, r4
 800db20:	4629      	mov	r1, r5
 800db22:	f7f2 ffdb 	bl	8000adc <__aeabi_dcmplt>
 800db26:	2800      	cmp	r0, #0
 800db28:	f000 808b 	beq.w	800dc42 <_dtoa_r+0x4da>
 800db2c:	9b03      	ldr	r3, [sp, #12]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	f000 8087 	beq.w	800dc42 <_dtoa_r+0x4da>
 800db34:	f1bb 0f00 	cmp.w	fp, #0
 800db38:	dd34      	ble.n	800dba4 <_dtoa_r+0x43c>
 800db3a:	4620      	mov	r0, r4
 800db3c:	4b6d      	ldr	r3, [pc, #436]	@ (800dcf4 <_dtoa_r+0x58c>)
 800db3e:	2200      	movs	r2, #0
 800db40:	4629      	mov	r1, r5
 800db42:	f7f2 fd59 	bl	80005f8 <__aeabi_dmul>
 800db46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800db4a:	f107 38ff 	add.w	r8, r7, #4294967295
 800db4e:	3601      	adds	r6, #1
 800db50:	465c      	mov	r4, fp
 800db52:	4630      	mov	r0, r6
 800db54:	f7f2 fce6 	bl	8000524 <__aeabi_i2d>
 800db58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db5c:	f7f2 fd4c 	bl	80005f8 <__aeabi_dmul>
 800db60:	4b65      	ldr	r3, [pc, #404]	@ (800dcf8 <_dtoa_r+0x590>)
 800db62:	2200      	movs	r2, #0
 800db64:	f7f2 fb92 	bl	800028c <__adddf3>
 800db68:	4605      	mov	r5, r0
 800db6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800db6e:	2c00      	cmp	r4, #0
 800db70:	d16a      	bne.n	800dc48 <_dtoa_r+0x4e0>
 800db72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db76:	4b61      	ldr	r3, [pc, #388]	@ (800dcfc <_dtoa_r+0x594>)
 800db78:	2200      	movs	r2, #0
 800db7a:	f7f2 fb85 	bl	8000288 <__aeabi_dsub>
 800db7e:	4602      	mov	r2, r0
 800db80:	460b      	mov	r3, r1
 800db82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800db86:	462a      	mov	r2, r5
 800db88:	4633      	mov	r3, r6
 800db8a:	f7f2 ffc5 	bl	8000b18 <__aeabi_dcmpgt>
 800db8e:	2800      	cmp	r0, #0
 800db90:	f040 8298 	bne.w	800e0c4 <_dtoa_r+0x95c>
 800db94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db98:	462a      	mov	r2, r5
 800db9a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800db9e:	f7f2 ff9d 	bl	8000adc <__aeabi_dcmplt>
 800dba2:	bb38      	cbnz	r0, 800dbf4 <_dtoa_r+0x48c>
 800dba4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800dba8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800dbac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	f2c0 8157 	blt.w	800de62 <_dtoa_r+0x6fa>
 800dbb4:	2f0e      	cmp	r7, #14
 800dbb6:	f300 8154 	bgt.w	800de62 <_dtoa_r+0x6fa>
 800dbba:	4b4b      	ldr	r3, [pc, #300]	@ (800dce8 <_dtoa_r+0x580>)
 800dbbc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dbc0:	ed93 7b00 	vldr	d7, [r3]
 800dbc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	ed8d 7b00 	vstr	d7, [sp]
 800dbcc:	f280 80e5 	bge.w	800dd9a <_dtoa_r+0x632>
 800dbd0:	9b03      	ldr	r3, [sp, #12]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	f300 80e1 	bgt.w	800dd9a <_dtoa_r+0x632>
 800dbd8:	d10c      	bne.n	800dbf4 <_dtoa_r+0x48c>
 800dbda:	4b48      	ldr	r3, [pc, #288]	@ (800dcfc <_dtoa_r+0x594>)
 800dbdc:	2200      	movs	r2, #0
 800dbde:	ec51 0b17 	vmov	r0, r1, d7
 800dbe2:	f7f2 fd09 	bl	80005f8 <__aeabi_dmul>
 800dbe6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dbea:	f7f2 ff8b 	bl	8000b04 <__aeabi_dcmpge>
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	f000 8266 	beq.w	800e0c0 <_dtoa_r+0x958>
 800dbf4:	2400      	movs	r4, #0
 800dbf6:	4625      	mov	r5, r4
 800dbf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dbfa:	4656      	mov	r6, sl
 800dbfc:	ea6f 0803 	mvn.w	r8, r3
 800dc00:	2700      	movs	r7, #0
 800dc02:	4621      	mov	r1, r4
 800dc04:	4648      	mov	r0, r9
 800dc06:	f000 fc09 	bl	800e41c <_Bfree>
 800dc0a:	2d00      	cmp	r5, #0
 800dc0c:	f000 80bd 	beq.w	800dd8a <_dtoa_r+0x622>
 800dc10:	b12f      	cbz	r7, 800dc1e <_dtoa_r+0x4b6>
 800dc12:	42af      	cmp	r7, r5
 800dc14:	d003      	beq.n	800dc1e <_dtoa_r+0x4b6>
 800dc16:	4639      	mov	r1, r7
 800dc18:	4648      	mov	r0, r9
 800dc1a:	f000 fbff 	bl	800e41c <_Bfree>
 800dc1e:	4629      	mov	r1, r5
 800dc20:	4648      	mov	r0, r9
 800dc22:	f000 fbfb 	bl	800e41c <_Bfree>
 800dc26:	e0b0      	b.n	800dd8a <_dtoa_r+0x622>
 800dc28:	07e2      	lsls	r2, r4, #31
 800dc2a:	d505      	bpl.n	800dc38 <_dtoa_r+0x4d0>
 800dc2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dc30:	f7f2 fce2 	bl	80005f8 <__aeabi_dmul>
 800dc34:	3601      	adds	r6, #1
 800dc36:	2301      	movs	r3, #1
 800dc38:	1064      	asrs	r4, r4, #1
 800dc3a:	3508      	adds	r5, #8
 800dc3c:	e762      	b.n	800db04 <_dtoa_r+0x39c>
 800dc3e:	2602      	movs	r6, #2
 800dc40:	e765      	b.n	800db0e <_dtoa_r+0x3a6>
 800dc42:	9c03      	ldr	r4, [sp, #12]
 800dc44:	46b8      	mov	r8, r7
 800dc46:	e784      	b.n	800db52 <_dtoa_r+0x3ea>
 800dc48:	4b27      	ldr	r3, [pc, #156]	@ (800dce8 <_dtoa_r+0x580>)
 800dc4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dc4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dc54:	4454      	add	r4, sl
 800dc56:	2900      	cmp	r1, #0
 800dc58:	d054      	beq.n	800dd04 <_dtoa_r+0x59c>
 800dc5a:	4929      	ldr	r1, [pc, #164]	@ (800dd00 <_dtoa_r+0x598>)
 800dc5c:	2000      	movs	r0, #0
 800dc5e:	f7f2 fdf5 	bl	800084c <__aeabi_ddiv>
 800dc62:	4633      	mov	r3, r6
 800dc64:	462a      	mov	r2, r5
 800dc66:	f7f2 fb0f 	bl	8000288 <__aeabi_dsub>
 800dc6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dc6e:	4656      	mov	r6, sl
 800dc70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc74:	f7f2 ff70 	bl	8000b58 <__aeabi_d2iz>
 800dc78:	4605      	mov	r5, r0
 800dc7a:	f7f2 fc53 	bl	8000524 <__aeabi_i2d>
 800dc7e:	4602      	mov	r2, r0
 800dc80:	460b      	mov	r3, r1
 800dc82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc86:	f7f2 faff 	bl	8000288 <__aeabi_dsub>
 800dc8a:	3530      	adds	r5, #48	@ 0x30
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	460b      	mov	r3, r1
 800dc90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dc94:	f806 5b01 	strb.w	r5, [r6], #1
 800dc98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dc9c:	f7f2 ff1e 	bl	8000adc <__aeabi_dcmplt>
 800dca0:	2800      	cmp	r0, #0
 800dca2:	d172      	bne.n	800dd8a <_dtoa_r+0x622>
 800dca4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dca8:	4911      	ldr	r1, [pc, #68]	@ (800dcf0 <_dtoa_r+0x588>)
 800dcaa:	2000      	movs	r0, #0
 800dcac:	f7f2 faec 	bl	8000288 <__aeabi_dsub>
 800dcb0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dcb4:	f7f2 ff12 	bl	8000adc <__aeabi_dcmplt>
 800dcb8:	2800      	cmp	r0, #0
 800dcba:	f040 80b4 	bne.w	800de26 <_dtoa_r+0x6be>
 800dcbe:	42a6      	cmp	r6, r4
 800dcc0:	f43f af70 	beq.w	800dba4 <_dtoa_r+0x43c>
 800dcc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dcc8:	4b0a      	ldr	r3, [pc, #40]	@ (800dcf4 <_dtoa_r+0x58c>)
 800dcca:	2200      	movs	r2, #0
 800dccc:	f7f2 fc94 	bl	80005f8 <__aeabi_dmul>
 800dcd0:	4b08      	ldr	r3, [pc, #32]	@ (800dcf4 <_dtoa_r+0x58c>)
 800dcd2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dcdc:	f7f2 fc8c 	bl	80005f8 <__aeabi_dmul>
 800dce0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dce4:	e7c4      	b.n	800dc70 <_dtoa_r+0x508>
 800dce6:	bf00      	nop
 800dce8:	0800f428 	.word	0x0800f428
 800dcec:	0800f400 	.word	0x0800f400
 800dcf0:	3ff00000 	.word	0x3ff00000
 800dcf4:	40240000 	.word	0x40240000
 800dcf8:	401c0000 	.word	0x401c0000
 800dcfc:	40140000 	.word	0x40140000
 800dd00:	3fe00000 	.word	0x3fe00000
 800dd04:	4631      	mov	r1, r6
 800dd06:	4628      	mov	r0, r5
 800dd08:	f7f2 fc76 	bl	80005f8 <__aeabi_dmul>
 800dd0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dd10:	9413      	str	r4, [sp, #76]	@ 0x4c
 800dd12:	4656      	mov	r6, sl
 800dd14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd18:	f7f2 ff1e 	bl	8000b58 <__aeabi_d2iz>
 800dd1c:	4605      	mov	r5, r0
 800dd1e:	f7f2 fc01 	bl	8000524 <__aeabi_i2d>
 800dd22:	4602      	mov	r2, r0
 800dd24:	460b      	mov	r3, r1
 800dd26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd2a:	f7f2 faad 	bl	8000288 <__aeabi_dsub>
 800dd2e:	3530      	adds	r5, #48	@ 0x30
 800dd30:	f806 5b01 	strb.w	r5, [r6], #1
 800dd34:	4602      	mov	r2, r0
 800dd36:	460b      	mov	r3, r1
 800dd38:	42a6      	cmp	r6, r4
 800dd3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dd3e:	f04f 0200 	mov.w	r2, #0
 800dd42:	d124      	bne.n	800dd8e <_dtoa_r+0x626>
 800dd44:	4baf      	ldr	r3, [pc, #700]	@ (800e004 <_dtoa_r+0x89c>)
 800dd46:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dd4a:	f7f2 fa9f 	bl	800028c <__adddf3>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	460b      	mov	r3, r1
 800dd52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd56:	f7f2 fedf 	bl	8000b18 <__aeabi_dcmpgt>
 800dd5a:	2800      	cmp	r0, #0
 800dd5c:	d163      	bne.n	800de26 <_dtoa_r+0x6be>
 800dd5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dd62:	49a8      	ldr	r1, [pc, #672]	@ (800e004 <_dtoa_r+0x89c>)
 800dd64:	2000      	movs	r0, #0
 800dd66:	f7f2 fa8f 	bl	8000288 <__aeabi_dsub>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd72:	f7f2 feb3 	bl	8000adc <__aeabi_dcmplt>
 800dd76:	2800      	cmp	r0, #0
 800dd78:	f43f af14 	beq.w	800dba4 <_dtoa_r+0x43c>
 800dd7c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800dd7e:	1e73      	subs	r3, r6, #1
 800dd80:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dd82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dd86:	2b30      	cmp	r3, #48	@ 0x30
 800dd88:	d0f8      	beq.n	800dd7c <_dtoa_r+0x614>
 800dd8a:	4647      	mov	r7, r8
 800dd8c:	e03b      	b.n	800de06 <_dtoa_r+0x69e>
 800dd8e:	4b9e      	ldr	r3, [pc, #632]	@ (800e008 <_dtoa_r+0x8a0>)
 800dd90:	f7f2 fc32 	bl	80005f8 <__aeabi_dmul>
 800dd94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd98:	e7bc      	b.n	800dd14 <_dtoa_r+0x5ac>
 800dd9a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800dd9e:	4656      	mov	r6, sl
 800dda0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dda4:	4620      	mov	r0, r4
 800dda6:	4629      	mov	r1, r5
 800dda8:	f7f2 fd50 	bl	800084c <__aeabi_ddiv>
 800ddac:	f7f2 fed4 	bl	8000b58 <__aeabi_d2iz>
 800ddb0:	4680      	mov	r8, r0
 800ddb2:	f7f2 fbb7 	bl	8000524 <__aeabi_i2d>
 800ddb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ddba:	f7f2 fc1d 	bl	80005f8 <__aeabi_dmul>
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	4620      	mov	r0, r4
 800ddc4:	4629      	mov	r1, r5
 800ddc6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ddca:	f7f2 fa5d 	bl	8000288 <__aeabi_dsub>
 800ddce:	f806 4b01 	strb.w	r4, [r6], #1
 800ddd2:	9d03      	ldr	r5, [sp, #12]
 800ddd4:	eba6 040a 	sub.w	r4, r6, sl
 800ddd8:	42a5      	cmp	r5, r4
 800ddda:	4602      	mov	r2, r0
 800dddc:	460b      	mov	r3, r1
 800ddde:	d133      	bne.n	800de48 <_dtoa_r+0x6e0>
 800dde0:	f7f2 fa54 	bl	800028c <__adddf3>
 800dde4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dde8:	4604      	mov	r4, r0
 800ddea:	460d      	mov	r5, r1
 800ddec:	f7f2 fe94 	bl	8000b18 <__aeabi_dcmpgt>
 800ddf0:	b9c0      	cbnz	r0, 800de24 <_dtoa_r+0x6bc>
 800ddf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ddf6:	4620      	mov	r0, r4
 800ddf8:	4629      	mov	r1, r5
 800ddfa:	f7f2 fe65 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddfe:	b110      	cbz	r0, 800de06 <_dtoa_r+0x69e>
 800de00:	f018 0f01 	tst.w	r8, #1
 800de04:	d10e      	bne.n	800de24 <_dtoa_r+0x6bc>
 800de06:	9902      	ldr	r1, [sp, #8]
 800de08:	4648      	mov	r0, r9
 800de0a:	f000 fb07 	bl	800e41c <_Bfree>
 800de0e:	2300      	movs	r3, #0
 800de10:	7033      	strb	r3, [r6, #0]
 800de12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800de14:	3701      	adds	r7, #1
 800de16:	601f      	str	r7, [r3, #0]
 800de18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	f000 824b 	beq.w	800e2b6 <_dtoa_r+0xb4e>
 800de20:	601e      	str	r6, [r3, #0]
 800de22:	e248      	b.n	800e2b6 <_dtoa_r+0xb4e>
 800de24:	46b8      	mov	r8, r7
 800de26:	4633      	mov	r3, r6
 800de28:	461e      	mov	r6, r3
 800de2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de2e:	2a39      	cmp	r2, #57	@ 0x39
 800de30:	d106      	bne.n	800de40 <_dtoa_r+0x6d8>
 800de32:	459a      	cmp	sl, r3
 800de34:	d1f8      	bne.n	800de28 <_dtoa_r+0x6c0>
 800de36:	2230      	movs	r2, #48	@ 0x30
 800de38:	f108 0801 	add.w	r8, r8, #1
 800de3c:	f88a 2000 	strb.w	r2, [sl]
 800de40:	781a      	ldrb	r2, [r3, #0]
 800de42:	3201      	adds	r2, #1
 800de44:	701a      	strb	r2, [r3, #0]
 800de46:	e7a0      	b.n	800dd8a <_dtoa_r+0x622>
 800de48:	4b6f      	ldr	r3, [pc, #444]	@ (800e008 <_dtoa_r+0x8a0>)
 800de4a:	2200      	movs	r2, #0
 800de4c:	f7f2 fbd4 	bl	80005f8 <__aeabi_dmul>
 800de50:	2200      	movs	r2, #0
 800de52:	2300      	movs	r3, #0
 800de54:	4604      	mov	r4, r0
 800de56:	460d      	mov	r5, r1
 800de58:	f7f2 fe36 	bl	8000ac8 <__aeabi_dcmpeq>
 800de5c:	2800      	cmp	r0, #0
 800de5e:	d09f      	beq.n	800dda0 <_dtoa_r+0x638>
 800de60:	e7d1      	b.n	800de06 <_dtoa_r+0x69e>
 800de62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de64:	2a00      	cmp	r2, #0
 800de66:	f000 80ea 	beq.w	800e03e <_dtoa_r+0x8d6>
 800de6a:	9a07      	ldr	r2, [sp, #28]
 800de6c:	2a01      	cmp	r2, #1
 800de6e:	f300 80cd 	bgt.w	800e00c <_dtoa_r+0x8a4>
 800de72:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800de74:	2a00      	cmp	r2, #0
 800de76:	f000 80c1 	beq.w	800dffc <_dtoa_r+0x894>
 800de7a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800de7e:	9c08      	ldr	r4, [sp, #32]
 800de80:	9e00      	ldr	r6, [sp, #0]
 800de82:	9a00      	ldr	r2, [sp, #0]
 800de84:	441a      	add	r2, r3
 800de86:	9200      	str	r2, [sp, #0]
 800de88:	9a06      	ldr	r2, [sp, #24]
 800de8a:	2101      	movs	r1, #1
 800de8c:	441a      	add	r2, r3
 800de8e:	4648      	mov	r0, r9
 800de90:	9206      	str	r2, [sp, #24]
 800de92:	f000 fb77 	bl	800e584 <__i2b>
 800de96:	4605      	mov	r5, r0
 800de98:	b166      	cbz	r6, 800deb4 <_dtoa_r+0x74c>
 800de9a:	9b06      	ldr	r3, [sp, #24]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	dd09      	ble.n	800deb4 <_dtoa_r+0x74c>
 800dea0:	42b3      	cmp	r3, r6
 800dea2:	9a00      	ldr	r2, [sp, #0]
 800dea4:	bfa8      	it	ge
 800dea6:	4633      	movge	r3, r6
 800dea8:	1ad2      	subs	r2, r2, r3
 800deaa:	9200      	str	r2, [sp, #0]
 800deac:	9a06      	ldr	r2, [sp, #24]
 800deae:	1af6      	subs	r6, r6, r3
 800deb0:	1ad3      	subs	r3, r2, r3
 800deb2:	9306      	str	r3, [sp, #24]
 800deb4:	9b08      	ldr	r3, [sp, #32]
 800deb6:	b30b      	cbz	r3, 800defc <_dtoa_r+0x794>
 800deb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800deba:	2b00      	cmp	r3, #0
 800debc:	f000 80c6 	beq.w	800e04c <_dtoa_r+0x8e4>
 800dec0:	2c00      	cmp	r4, #0
 800dec2:	f000 80c0 	beq.w	800e046 <_dtoa_r+0x8de>
 800dec6:	4629      	mov	r1, r5
 800dec8:	4622      	mov	r2, r4
 800deca:	4648      	mov	r0, r9
 800decc:	f000 fc12 	bl	800e6f4 <__pow5mult>
 800ded0:	9a02      	ldr	r2, [sp, #8]
 800ded2:	4601      	mov	r1, r0
 800ded4:	4605      	mov	r5, r0
 800ded6:	4648      	mov	r0, r9
 800ded8:	f000 fb6a 	bl	800e5b0 <__multiply>
 800dedc:	9902      	ldr	r1, [sp, #8]
 800dede:	4680      	mov	r8, r0
 800dee0:	4648      	mov	r0, r9
 800dee2:	f000 fa9b 	bl	800e41c <_Bfree>
 800dee6:	9b08      	ldr	r3, [sp, #32]
 800dee8:	1b1b      	subs	r3, r3, r4
 800deea:	9308      	str	r3, [sp, #32]
 800deec:	f000 80b1 	beq.w	800e052 <_dtoa_r+0x8ea>
 800def0:	9a08      	ldr	r2, [sp, #32]
 800def2:	4641      	mov	r1, r8
 800def4:	4648      	mov	r0, r9
 800def6:	f000 fbfd 	bl	800e6f4 <__pow5mult>
 800defa:	9002      	str	r0, [sp, #8]
 800defc:	2101      	movs	r1, #1
 800defe:	4648      	mov	r0, r9
 800df00:	f000 fb40 	bl	800e584 <__i2b>
 800df04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800df06:	4604      	mov	r4, r0
 800df08:	2b00      	cmp	r3, #0
 800df0a:	f000 81d8 	beq.w	800e2be <_dtoa_r+0xb56>
 800df0e:	461a      	mov	r2, r3
 800df10:	4601      	mov	r1, r0
 800df12:	4648      	mov	r0, r9
 800df14:	f000 fbee 	bl	800e6f4 <__pow5mult>
 800df18:	9b07      	ldr	r3, [sp, #28]
 800df1a:	2b01      	cmp	r3, #1
 800df1c:	4604      	mov	r4, r0
 800df1e:	f300 809f 	bgt.w	800e060 <_dtoa_r+0x8f8>
 800df22:	9b04      	ldr	r3, [sp, #16]
 800df24:	2b00      	cmp	r3, #0
 800df26:	f040 8097 	bne.w	800e058 <_dtoa_r+0x8f0>
 800df2a:	9b05      	ldr	r3, [sp, #20]
 800df2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df30:	2b00      	cmp	r3, #0
 800df32:	f040 8093 	bne.w	800e05c <_dtoa_r+0x8f4>
 800df36:	9b05      	ldr	r3, [sp, #20]
 800df38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800df3c:	0d1b      	lsrs	r3, r3, #20
 800df3e:	051b      	lsls	r3, r3, #20
 800df40:	b133      	cbz	r3, 800df50 <_dtoa_r+0x7e8>
 800df42:	9b00      	ldr	r3, [sp, #0]
 800df44:	3301      	adds	r3, #1
 800df46:	9300      	str	r3, [sp, #0]
 800df48:	9b06      	ldr	r3, [sp, #24]
 800df4a:	3301      	adds	r3, #1
 800df4c:	9306      	str	r3, [sp, #24]
 800df4e:	2301      	movs	r3, #1
 800df50:	9308      	str	r3, [sp, #32]
 800df52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800df54:	2b00      	cmp	r3, #0
 800df56:	f000 81b8 	beq.w	800e2ca <_dtoa_r+0xb62>
 800df5a:	6923      	ldr	r3, [r4, #16]
 800df5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800df60:	6918      	ldr	r0, [r3, #16]
 800df62:	f000 fac3 	bl	800e4ec <__hi0bits>
 800df66:	f1c0 0020 	rsb	r0, r0, #32
 800df6a:	9b06      	ldr	r3, [sp, #24]
 800df6c:	4418      	add	r0, r3
 800df6e:	f010 001f 	ands.w	r0, r0, #31
 800df72:	f000 8082 	beq.w	800e07a <_dtoa_r+0x912>
 800df76:	f1c0 0320 	rsb	r3, r0, #32
 800df7a:	2b04      	cmp	r3, #4
 800df7c:	dd73      	ble.n	800e066 <_dtoa_r+0x8fe>
 800df7e:	9b00      	ldr	r3, [sp, #0]
 800df80:	f1c0 001c 	rsb	r0, r0, #28
 800df84:	4403      	add	r3, r0
 800df86:	9300      	str	r3, [sp, #0]
 800df88:	9b06      	ldr	r3, [sp, #24]
 800df8a:	4403      	add	r3, r0
 800df8c:	4406      	add	r6, r0
 800df8e:	9306      	str	r3, [sp, #24]
 800df90:	9b00      	ldr	r3, [sp, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	dd05      	ble.n	800dfa2 <_dtoa_r+0x83a>
 800df96:	9902      	ldr	r1, [sp, #8]
 800df98:	461a      	mov	r2, r3
 800df9a:	4648      	mov	r0, r9
 800df9c:	f000 fc04 	bl	800e7a8 <__lshift>
 800dfa0:	9002      	str	r0, [sp, #8]
 800dfa2:	9b06      	ldr	r3, [sp, #24]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	dd05      	ble.n	800dfb4 <_dtoa_r+0x84c>
 800dfa8:	4621      	mov	r1, r4
 800dfaa:	461a      	mov	r2, r3
 800dfac:	4648      	mov	r0, r9
 800dfae:	f000 fbfb 	bl	800e7a8 <__lshift>
 800dfb2:	4604      	mov	r4, r0
 800dfb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d061      	beq.n	800e07e <_dtoa_r+0x916>
 800dfba:	9802      	ldr	r0, [sp, #8]
 800dfbc:	4621      	mov	r1, r4
 800dfbe:	f000 fc5f 	bl	800e880 <__mcmp>
 800dfc2:	2800      	cmp	r0, #0
 800dfc4:	da5b      	bge.n	800e07e <_dtoa_r+0x916>
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	9902      	ldr	r1, [sp, #8]
 800dfca:	220a      	movs	r2, #10
 800dfcc:	4648      	mov	r0, r9
 800dfce:	f000 fa47 	bl	800e460 <__multadd>
 800dfd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfd4:	9002      	str	r0, [sp, #8]
 800dfd6:	f107 38ff 	add.w	r8, r7, #4294967295
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	f000 8177 	beq.w	800e2ce <_dtoa_r+0xb66>
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	220a      	movs	r2, #10
 800dfe6:	4648      	mov	r0, r9
 800dfe8:	f000 fa3a 	bl	800e460 <__multadd>
 800dfec:	f1bb 0f00 	cmp.w	fp, #0
 800dff0:	4605      	mov	r5, r0
 800dff2:	dc6f      	bgt.n	800e0d4 <_dtoa_r+0x96c>
 800dff4:	9b07      	ldr	r3, [sp, #28]
 800dff6:	2b02      	cmp	r3, #2
 800dff8:	dc49      	bgt.n	800e08e <_dtoa_r+0x926>
 800dffa:	e06b      	b.n	800e0d4 <_dtoa_r+0x96c>
 800dffc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dffe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e002:	e73c      	b.n	800de7e <_dtoa_r+0x716>
 800e004:	3fe00000 	.word	0x3fe00000
 800e008:	40240000 	.word	0x40240000
 800e00c:	9b03      	ldr	r3, [sp, #12]
 800e00e:	1e5c      	subs	r4, r3, #1
 800e010:	9b08      	ldr	r3, [sp, #32]
 800e012:	42a3      	cmp	r3, r4
 800e014:	db09      	blt.n	800e02a <_dtoa_r+0x8c2>
 800e016:	1b1c      	subs	r4, r3, r4
 800e018:	9b03      	ldr	r3, [sp, #12]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	f6bf af30 	bge.w	800de80 <_dtoa_r+0x718>
 800e020:	9b00      	ldr	r3, [sp, #0]
 800e022:	9a03      	ldr	r2, [sp, #12]
 800e024:	1a9e      	subs	r6, r3, r2
 800e026:	2300      	movs	r3, #0
 800e028:	e72b      	b.n	800de82 <_dtoa_r+0x71a>
 800e02a:	9b08      	ldr	r3, [sp, #32]
 800e02c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e02e:	9408      	str	r4, [sp, #32]
 800e030:	1ae3      	subs	r3, r4, r3
 800e032:	441a      	add	r2, r3
 800e034:	9e00      	ldr	r6, [sp, #0]
 800e036:	9b03      	ldr	r3, [sp, #12]
 800e038:	920d      	str	r2, [sp, #52]	@ 0x34
 800e03a:	2400      	movs	r4, #0
 800e03c:	e721      	b.n	800de82 <_dtoa_r+0x71a>
 800e03e:	9c08      	ldr	r4, [sp, #32]
 800e040:	9e00      	ldr	r6, [sp, #0]
 800e042:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e044:	e728      	b.n	800de98 <_dtoa_r+0x730>
 800e046:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e04a:	e751      	b.n	800def0 <_dtoa_r+0x788>
 800e04c:	9a08      	ldr	r2, [sp, #32]
 800e04e:	9902      	ldr	r1, [sp, #8]
 800e050:	e750      	b.n	800def4 <_dtoa_r+0x78c>
 800e052:	f8cd 8008 	str.w	r8, [sp, #8]
 800e056:	e751      	b.n	800defc <_dtoa_r+0x794>
 800e058:	2300      	movs	r3, #0
 800e05a:	e779      	b.n	800df50 <_dtoa_r+0x7e8>
 800e05c:	9b04      	ldr	r3, [sp, #16]
 800e05e:	e777      	b.n	800df50 <_dtoa_r+0x7e8>
 800e060:	2300      	movs	r3, #0
 800e062:	9308      	str	r3, [sp, #32]
 800e064:	e779      	b.n	800df5a <_dtoa_r+0x7f2>
 800e066:	d093      	beq.n	800df90 <_dtoa_r+0x828>
 800e068:	9a00      	ldr	r2, [sp, #0]
 800e06a:	331c      	adds	r3, #28
 800e06c:	441a      	add	r2, r3
 800e06e:	9200      	str	r2, [sp, #0]
 800e070:	9a06      	ldr	r2, [sp, #24]
 800e072:	441a      	add	r2, r3
 800e074:	441e      	add	r6, r3
 800e076:	9206      	str	r2, [sp, #24]
 800e078:	e78a      	b.n	800df90 <_dtoa_r+0x828>
 800e07a:	4603      	mov	r3, r0
 800e07c:	e7f4      	b.n	800e068 <_dtoa_r+0x900>
 800e07e:	9b03      	ldr	r3, [sp, #12]
 800e080:	2b00      	cmp	r3, #0
 800e082:	46b8      	mov	r8, r7
 800e084:	dc20      	bgt.n	800e0c8 <_dtoa_r+0x960>
 800e086:	469b      	mov	fp, r3
 800e088:	9b07      	ldr	r3, [sp, #28]
 800e08a:	2b02      	cmp	r3, #2
 800e08c:	dd1e      	ble.n	800e0cc <_dtoa_r+0x964>
 800e08e:	f1bb 0f00 	cmp.w	fp, #0
 800e092:	f47f adb1 	bne.w	800dbf8 <_dtoa_r+0x490>
 800e096:	4621      	mov	r1, r4
 800e098:	465b      	mov	r3, fp
 800e09a:	2205      	movs	r2, #5
 800e09c:	4648      	mov	r0, r9
 800e09e:	f000 f9df 	bl	800e460 <__multadd>
 800e0a2:	4601      	mov	r1, r0
 800e0a4:	4604      	mov	r4, r0
 800e0a6:	9802      	ldr	r0, [sp, #8]
 800e0a8:	f000 fbea 	bl	800e880 <__mcmp>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	f77f ada3 	ble.w	800dbf8 <_dtoa_r+0x490>
 800e0b2:	4656      	mov	r6, sl
 800e0b4:	2331      	movs	r3, #49	@ 0x31
 800e0b6:	f806 3b01 	strb.w	r3, [r6], #1
 800e0ba:	f108 0801 	add.w	r8, r8, #1
 800e0be:	e59f      	b.n	800dc00 <_dtoa_r+0x498>
 800e0c0:	9c03      	ldr	r4, [sp, #12]
 800e0c2:	46b8      	mov	r8, r7
 800e0c4:	4625      	mov	r5, r4
 800e0c6:	e7f4      	b.n	800e0b2 <_dtoa_r+0x94a>
 800e0c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e0cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	f000 8101 	beq.w	800e2d6 <_dtoa_r+0xb6e>
 800e0d4:	2e00      	cmp	r6, #0
 800e0d6:	dd05      	ble.n	800e0e4 <_dtoa_r+0x97c>
 800e0d8:	4629      	mov	r1, r5
 800e0da:	4632      	mov	r2, r6
 800e0dc:	4648      	mov	r0, r9
 800e0de:	f000 fb63 	bl	800e7a8 <__lshift>
 800e0e2:	4605      	mov	r5, r0
 800e0e4:	9b08      	ldr	r3, [sp, #32]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d05c      	beq.n	800e1a4 <_dtoa_r+0xa3c>
 800e0ea:	6869      	ldr	r1, [r5, #4]
 800e0ec:	4648      	mov	r0, r9
 800e0ee:	f000 f955 	bl	800e39c <_Balloc>
 800e0f2:	4606      	mov	r6, r0
 800e0f4:	b928      	cbnz	r0, 800e102 <_dtoa_r+0x99a>
 800e0f6:	4b82      	ldr	r3, [pc, #520]	@ (800e300 <_dtoa_r+0xb98>)
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e0fe:	f7ff bb4a 	b.w	800d796 <_dtoa_r+0x2e>
 800e102:	692a      	ldr	r2, [r5, #16]
 800e104:	3202      	adds	r2, #2
 800e106:	0092      	lsls	r2, r2, #2
 800e108:	f105 010c 	add.w	r1, r5, #12
 800e10c:	300c      	adds	r0, #12
 800e10e:	f7ff fa8c 	bl	800d62a <memcpy>
 800e112:	2201      	movs	r2, #1
 800e114:	4631      	mov	r1, r6
 800e116:	4648      	mov	r0, r9
 800e118:	f000 fb46 	bl	800e7a8 <__lshift>
 800e11c:	f10a 0301 	add.w	r3, sl, #1
 800e120:	9300      	str	r3, [sp, #0]
 800e122:	eb0a 030b 	add.w	r3, sl, fp
 800e126:	9308      	str	r3, [sp, #32]
 800e128:	9b04      	ldr	r3, [sp, #16]
 800e12a:	f003 0301 	and.w	r3, r3, #1
 800e12e:	462f      	mov	r7, r5
 800e130:	9306      	str	r3, [sp, #24]
 800e132:	4605      	mov	r5, r0
 800e134:	9b00      	ldr	r3, [sp, #0]
 800e136:	9802      	ldr	r0, [sp, #8]
 800e138:	4621      	mov	r1, r4
 800e13a:	f103 3bff 	add.w	fp, r3, #4294967295
 800e13e:	f7ff fa89 	bl	800d654 <quorem>
 800e142:	4603      	mov	r3, r0
 800e144:	3330      	adds	r3, #48	@ 0x30
 800e146:	9003      	str	r0, [sp, #12]
 800e148:	4639      	mov	r1, r7
 800e14a:	9802      	ldr	r0, [sp, #8]
 800e14c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e14e:	f000 fb97 	bl	800e880 <__mcmp>
 800e152:	462a      	mov	r2, r5
 800e154:	9004      	str	r0, [sp, #16]
 800e156:	4621      	mov	r1, r4
 800e158:	4648      	mov	r0, r9
 800e15a:	f000 fbad 	bl	800e8b8 <__mdiff>
 800e15e:	68c2      	ldr	r2, [r0, #12]
 800e160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e162:	4606      	mov	r6, r0
 800e164:	bb02      	cbnz	r2, 800e1a8 <_dtoa_r+0xa40>
 800e166:	4601      	mov	r1, r0
 800e168:	9802      	ldr	r0, [sp, #8]
 800e16a:	f000 fb89 	bl	800e880 <__mcmp>
 800e16e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e170:	4602      	mov	r2, r0
 800e172:	4631      	mov	r1, r6
 800e174:	4648      	mov	r0, r9
 800e176:	920c      	str	r2, [sp, #48]	@ 0x30
 800e178:	9309      	str	r3, [sp, #36]	@ 0x24
 800e17a:	f000 f94f 	bl	800e41c <_Bfree>
 800e17e:	9b07      	ldr	r3, [sp, #28]
 800e180:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e182:	9e00      	ldr	r6, [sp, #0]
 800e184:	ea42 0103 	orr.w	r1, r2, r3
 800e188:	9b06      	ldr	r3, [sp, #24]
 800e18a:	4319      	orrs	r1, r3
 800e18c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e18e:	d10d      	bne.n	800e1ac <_dtoa_r+0xa44>
 800e190:	2b39      	cmp	r3, #57	@ 0x39
 800e192:	d027      	beq.n	800e1e4 <_dtoa_r+0xa7c>
 800e194:	9a04      	ldr	r2, [sp, #16]
 800e196:	2a00      	cmp	r2, #0
 800e198:	dd01      	ble.n	800e19e <_dtoa_r+0xa36>
 800e19a:	9b03      	ldr	r3, [sp, #12]
 800e19c:	3331      	adds	r3, #49	@ 0x31
 800e19e:	f88b 3000 	strb.w	r3, [fp]
 800e1a2:	e52e      	b.n	800dc02 <_dtoa_r+0x49a>
 800e1a4:	4628      	mov	r0, r5
 800e1a6:	e7b9      	b.n	800e11c <_dtoa_r+0x9b4>
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	e7e2      	b.n	800e172 <_dtoa_r+0xa0a>
 800e1ac:	9904      	ldr	r1, [sp, #16]
 800e1ae:	2900      	cmp	r1, #0
 800e1b0:	db04      	blt.n	800e1bc <_dtoa_r+0xa54>
 800e1b2:	9807      	ldr	r0, [sp, #28]
 800e1b4:	4301      	orrs	r1, r0
 800e1b6:	9806      	ldr	r0, [sp, #24]
 800e1b8:	4301      	orrs	r1, r0
 800e1ba:	d120      	bne.n	800e1fe <_dtoa_r+0xa96>
 800e1bc:	2a00      	cmp	r2, #0
 800e1be:	ddee      	ble.n	800e19e <_dtoa_r+0xa36>
 800e1c0:	9902      	ldr	r1, [sp, #8]
 800e1c2:	9300      	str	r3, [sp, #0]
 800e1c4:	2201      	movs	r2, #1
 800e1c6:	4648      	mov	r0, r9
 800e1c8:	f000 faee 	bl	800e7a8 <__lshift>
 800e1cc:	4621      	mov	r1, r4
 800e1ce:	9002      	str	r0, [sp, #8]
 800e1d0:	f000 fb56 	bl	800e880 <__mcmp>
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	9b00      	ldr	r3, [sp, #0]
 800e1d8:	dc02      	bgt.n	800e1e0 <_dtoa_r+0xa78>
 800e1da:	d1e0      	bne.n	800e19e <_dtoa_r+0xa36>
 800e1dc:	07da      	lsls	r2, r3, #31
 800e1de:	d5de      	bpl.n	800e19e <_dtoa_r+0xa36>
 800e1e0:	2b39      	cmp	r3, #57	@ 0x39
 800e1e2:	d1da      	bne.n	800e19a <_dtoa_r+0xa32>
 800e1e4:	2339      	movs	r3, #57	@ 0x39
 800e1e6:	f88b 3000 	strb.w	r3, [fp]
 800e1ea:	4633      	mov	r3, r6
 800e1ec:	461e      	mov	r6, r3
 800e1ee:	3b01      	subs	r3, #1
 800e1f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e1f4:	2a39      	cmp	r2, #57	@ 0x39
 800e1f6:	d04e      	beq.n	800e296 <_dtoa_r+0xb2e>
 800e1f8:	3201      	adds	r2, #1
 800e1fa:	701a      	strb	r2, [r3, #0]
 800e1fc:	e501      	b.n	800dc02 <_dtoa_r+0x49a>
 800e1fe:	2a00      	cmp	r2, #0
 800e200:	dd03      	ble.n	800e20a <_dtoa_r+0xaa2>
 800e202:	2b39      	cmp	r3, #57	@ 0x39
 800e204:	d0ee      	beq.n	800e1e4 <_dtoa_r+0xa7c>
 800e206:	3301      	adds	r3, #1
 800e208:	e7c9      	b.n	800e19e <_dtoa_r+0xa36>
 800e20a:	9a00      	ldr	r2, [sp, #0]
 800e20c:	9908      	ldr	r1, [sp, #32]
 800e20e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e212:	428a      	cmp	r2, r1
 800e214:	d028      	beq.n	800e268 <_dtoa_r+0xb00>
 800e216:	9902      	ldr	r1, [sp, #8]
 800e218:	2300      	movs	r3, #0
 800e21a:	220a      	movs	r2, #10
 800e21c:	4648      	mov	r0, r9
 800e21e:	f000 f91f 	bl	800e460 <__multadd>
 800e222:	42af      	cmp	r7, r5
 800e224:	9002      	str	r0, [sp, #8]
 800e226:	f04f 0300 	mov.w	r3, #0
 800e22a:	f04f 020a 	mov.w	r2, #10
 800e22e:	4639      	mov	r1, r7
 800e230:	4648      	mov	r0, r9
 800e232:	d107      	bne.n	800e244 <_dtoa_r+0xadc>
 800e234:	f000 f914 	bl	800e460 <__multadd>
 800e238:	4607      	mov	r7, r0
 800e23a:	4605      	mov	r5, r0
 800e23c:	9b00      	ldr	r3, [sp, #0]
 800e23e:	3301      	adds	r3, #1
 800e240:	9300      	str	r3, [sp, #0]
 800e242:	e777      	b.n	800e134 <_dtoa_r+0x9cc>
 800e244:	f000 f90c 	bl	800e460 <__multadd>
 800e248:	4629      	mov	r1, r5
 800e24a:	4607      	mov	r7, r0
 800e24c:	2300      	movs	r3, #0
 800e24e:	220a      	movs	r2, #10
 800e250:	4648      	mov	r0, r9
 800e252:	f000 f905 	bl	800e460 <__multadd>
 800e256:	4605      	mov	r5, r0
 800e258:	e7f0      	b.n	800e23c <_dtoa_r+0xad4>
 800e25a:	f1bb 0f00 	cmp.w	fp, #0
 800e25e:	bfcc      	ite	gt
 800e260:	465e      	movgt	r6, fp
 800e262:	2601      	movle	r6, #1
 800e264:	4456      	add	r6, sl
 800e266:	2700      	movs	r7, #0
 800e268:	9902      	ldr	r1, [sp, #8]
 800e26a:	9300      	str	r3, [sp, #0]
 800e26c:	2201      	movs	r2, #1
 800e26e:	4648      	mov	r0, r9
 800e270:	f000 fa9a 	bl	800e7a8 <__lshift>
 800e274:	4621      	mov	r1, r4
 800e276:	9002      	str	r0, [sp, #8]
 800e278:	f000 fb02 	bl	800e880 <__mcmp>
 800e27c:	2800      	cmp	r0, #0
 800e27e:	dcb4      	bgt.n	800e1ea <_dtoa_r+0xa82>
 800e280:	d102      	bne.n	800e288 <_dtoa_r+0xb20>
 800e282:	9b00      	ldr	r3, [sp, #0]
 800e284:	07db      	lsls	r3, r3, #31
 800e286:	d4b0      	bmi.n	800e1ea <_dtoa_r+0xa82>
 800e288:	4633      	mov	r3, r6
 800e28a:	461e      	mov	r6, r3
 800e28c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e290:	2a30      	cmp	r2, #48	@ 0x30
 800e292:	d0fa      	beq.n	800e28a <_dtoa_r+0xb22>
 800e294:	e4b5      	b.n	800dc02 <_dtoa_r+0x49a>
 800e296:	459a      	cmp	sl, r3
 800e298:	d1a8      	bne.n	800e1ec <_dtoa_r+0xa84>
 800e29a:	2331      	movs	r3, #49	@ 0x31
 800e29c:	f108 0801 	add.w	r8, r8, #1
 800e2a0:	f88a 3000 	strb.w	r3, [sl]
 800e2a4:	e4ad      	b.n	800dc02 <_dtoa_r+0x49a>
 800e2a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e2a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e304 <_dtoa_r+0xb9c>
 800e2ac:	b11b      	cbz	r3, 800e2b6 <_dtoa_r+0xb4e>
 800e2ae:	f10a 0308 	add.w	r3, sl, #8
 800e2b2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e2b4:	6013      	str	r3, [r2, #0]
 800e2b6:	4650      	mov	r0, sl
 800e2b8:	b017      	add	sp, #92	@ 0x5c
 800e2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2be:	9b07      	ldr	r3, [sp, #28]
 800e2c0:	2b01      	cmp	r3, #1
 800e2c2:	f77f ae2e 	ble.w	800df22 <_dtoa_r+0x7ba>
 800e2c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e2c8:	9308      	str	r3, [sp, #32]
 800e2ca:	2001      	movs	r0, #1
 800e2cc:	e64d      	b.n	800df6a <_dtoa_r+0x802>
 800e2ce:	f1bb 0f00 	cmp.w	fp, #0
 800e2d2:	f77f aed9 	ble.w	800e088 <_dtoa_r+0x920>
 800e2d6:	4656      	mov	r6, sl
 800e2d8:	9802      	ldr	r0, [sp, #8]
 800e2da:	4621      	mov	r1, r4
 800e2dc:	f7ff f9ba 	bl	800d654 <quorem>
 800e2e0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e2e4:	f806 3b01 	strb.w	r3, [r6], #1
 800e2e8:	eba6 020a 	sub.w	r2, r6, sl
 800e2ec:	4593      	cmp	fp, r2
 800e2ee:	ddb4      	ble.n	800e25a <_dtoa_r+0xaf2>
 800e2f0:	9902      	ldr	r1, [sp, #8]
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	220a      	movs	r2, #10
 800e2f6:	4648      	mov	r0, r9
 800e2f8:	f000 f8b2 	bl	800e460 <__multadd>
 800e2fc:	9002      	str	r0, [sp, #8]
 800e2fe:	e7eb      	b.n	800e2d8 <_dtoa_r+0xb70>
 800e300:	0800f368 	.word	0x0800f368
 800e304:	0800f2ec 	.word	0x0800f2ec

0800e308 <_free_r>:
 800e308:	b538      	push	{r3, r4, r5, lr}
 800e30a:	4605      	mov	r5, r0
 800e30c:	2900      	cmp	r1, #0
 800e30e:	d041      	beq.n	800e394 <_free_r+0x8c>
 800e310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e314:	1f0c      	subs	r4, r1, #4
 800e316:	2b00      	cmp	r3, #0
 800e318:	bfb8      	it	lt
 800e31a:	18e4      	addlt	r4, r4, r3
 800e31c:	f7fe fb7c 	bl	800ca18 <__malloc_lock>
 800e320:	4a1d      	ldr	r2, [pc, #116]	@ (800e398 <_free_r+0x90>)
 800e322:	6813      	ldr	r3, [r2, #0]
 800e324:	b933      	cbnz	r3, 800e334 <_free_r+0x2c>
 800e326:	6063      	str	r3, [r4, #4]
 800e328:	6014      	str	r4, [r2, #0]
 800e32a:	4628      	mov	r0, r5
 800e32c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e330:	f7fe bb78 	b.w	800ca24 <__malloc_unlock>
 800e334:	42a3      	cmp	r3, r4
 800e336:	d908      	bls.n	800e34a <_free_r+0x42>
 800e338:	6820      	ldr	r0, [r4, #0]
 800e33a:	1821      	adds	r1, r4, r0
 800e33c:	428b      	cmp	r3, r1
 800e33e:	bf01      	itttt	eq
 800e340:	6819      	ldreq	r1, [r3, #0]
 800e342:	685b      	ldreq	r3, [r3, #4]
 800e344:	1809      	addeq	r1, r1, r0
 800e346:	6021      	streq	r1, [r4, #0]
 800e348:	e7ed      	b.n	800e326 <_free_r+0x1e>
 800e34a:	461a      	mov	r2, r3
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	b10b      	cbz	r3, 800e354 <_free_r+0x4c>
 800e350:	42a3      	cmp	r3, r4
 800e352:	d9fa      	bls.n	800e34a <_free_r+0x42>
 800e354:	6811      	ldr	r1, [r2, #0]
 800e356:	1850      	adds	r0, r2, r1
 800e358:	42a0      	cmp	r0, r4
 800e35a:	d10b      	bne.n	800e374 <_free_r+0x6c>
 800e35c:	6820      	ldr	r0, [r4, #0]
 800e35e:	4401      	add	r1, r0
 800e360:	1850      	adds	r0, r2, r1
 800e362:	4283      	cmp	r3, r0
 800e364:	6011      	str	r1, [r2, #0]
 800e366:	d1e0      	bne.n	800e32a <_free_r+0x22>
 800e368:	6818      	ldr	r0, [r3, #0]
 800e36a:	685b      	ldr	r3, [r3, #4]
 800e36c:	6053      	str	r3, [r2, #4]
 800e36e:	4408      	add	r0, r1
 800e370:	6010      	str	r0, [r2, #0]
 800e372:	e7da      	b.n	800e32a <_free_r+0x22>
 800e374:	d902      	bls.n	800e37c <_free_r+0x74>
 800e376:	230c      	movs	r3, #12
 800e378:	602b      	str	r3, [r5, #0]
 800e37a:	e7d6      	b.n	800e32a <_free_r+0x22>
 800e37c:	6820      	ldr	r0, [r4, #0]
 800e37e:	1821      	adds	r1, r4, r0
 800e380:	428b      	cmp	r3, r1
 800e382:	bf04      	itt	eq
 800e384:	6819      	ldreq	r1, [r3, #0]
 800e386:	685b      	ldreq	r3, [r3, #4]
 800e388:	6063      	str	r3, [r4, #4]
 800e38a:	bf04      	itt	eq
 800e38c:	1809      	addeq	r1, r1, r0
 800e38e:	6021      	streq	r1, [r4, #0]
 800e390:	6054      	str	r4, [r2, #4]
 800e392:	e7ca      	b.n	800e32a <_free_r+0x22>
 800e394:	bd38      	pop	{r3, r4, r5, pc}
 800e396:	bf00      	nop
 800e398:	200020dc 	.word	0x200020dc

0800e39c <_Balloc>:
 800e39c:	b570      	push	{r4, r5, r6, lr}
 800e39e:	69c6      	ldr	r6, [r0, #28]
 800e3a0:	4604      	mov	r4, r0
 800e3a2:	460d      	mov	r5, r1
 800e3a4:	b976      	cbnz	r6, 800e3c4 <_Balloc+0x28>
 800e3a6:	2010      	movs	r0, #16
 800e3a8:	f7fe fa84 	bl	800c8b4 <malloc>
 800e3ac:	4602      	mov	r2, r0
 800e3ae:	61e0      	str	r0, [r4, #28]
 800e3b0:	b920      	cbnz	r0, 800e3bc <_Balloc+0x20>
 800e3b2:	4b18      	ldr	r3, [pc, #96]	@ (800e414 <_Balloc+0x78>)
 800e3b4:	4818      	ldr	r0, [pc, #96]	@ (800e418 <_Balloc+0x7c>)
 800e3b6:	216b      	movs	r1, #107	@ 0x6b
 800e3b8:	f7fe fa5e 	bl	800c878 <__assert_func>
 800e3bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e3c0:	6006      	str	r6, [r0, #0]
 800e3c2:	60c6      	str	r6, [r0, #12]
 800e3c4:	69e6      	ldr	r6, [r4, #28]
 800e3c6:	68f3      	ldr	r3, [r6, #12]
 800e3c8:	b183      	cbz	r3, 800e3ec <_Balloc+0x50>
 800e3ca:	69e3      	ldr	r3, [r4, #28]
 800e3cc:	68db      	ldr	r3, [r3, #12]
 800e3ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e3d2:	b9b8      	cbnz	r0, 800e404 <_Balloc+0x68>
 800e3d4:	2101      	movs	r1, #1
 800e3d6:	fa01 f605 	lsl.w	r6, r1, r5
 800e3da:	1d72      	adds	r2, r6, #5
 800e3dc:	0092      	lsls	r2, r2, #2
 800e3de:	4620      	mov	r0, r4
 800e3e0:	f000 fe1c 	bl	800f01c <_calloc_r>
 800e3e4:	b160      	cbz	r0, 800e400 <_Balloc+0x64>
 800e3e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e3ea:	e00e      	b.n	800e40a <_Balloc+0x6e>
 800e3ec:	2221      	movs	r2, #33	@ 0x21
 800e3ee:	2104      	movs	r1, #4
 800e3f0:	4620      	mov	r0, r4
 800e3f2:	f000 fe13 	bl	800f01c <_calloc_r>
 800e3f6:	69e3      	ldr	r3, [r4, #28]
 800e3f8:	60f0      	str	r0, [r6, #12]
 800e3fa:	68db      	ldr	r3, [r3, #12]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d1e4      	bne.n	800e3ca <_Balloc+0x2e>
 800e400:	2000      	movs	r0, #0
 800e402:	bd70      	pop	{r4, r5, r6, pc}
 800e404:	6802      	ldr	r2, [r0, #0]
 800e406:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e40a:	2300      	movs	r3, #0
 800e40c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e410:	e7f7      	b.n	800e402 <_Balloc+0x66>
 800e412:	bf00      	nop
 800e414:	0800f2f9 	.word	0x0800f2f9
 800e418:	0800f379 	.word	0x0800f379

0800e41c <_Bfree>:
 800e41c:	b570      	push	{r4, r5, r6, lr}
 800e41e:	69c6      	ldr	r6, [r0, #28]
 800e420:	4605      	mov	r5, r0
 800e422:	460c      	mov	r4, r1
 800e424:	b976      	cbnz	r6, 800e444 <_Bfree+0x28>
 800e426:	2010      	movs	r0, #16
 800e428:	f7fe fa44 	bl	800c8b4 <malloc>
 800e42c:	4602      	mov	r2, r0
 800e42e:	61e8      	str	r0, [r5, #28]
 800e430:	b920      	cbnz	r0, 800e43c <_Bfree+0x20>
 800e432:	4b09      	ldr	r3, [pc, #36]	@ (800e458 <_Bfree+0x3c>)
 800e434:	4809      	ldr	r0, [pc, #36]	@ (800e45c <_Bfree+0x40>)
 800e436:	218f      	movs	r1, #143	@ 0x8f
 800e438:	f7fe fa1e 	bl	800c878 <__assert_func>
 800e43c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e440:	6006      	str	r6, [r0, #0]
 800e442:	60c6      	str	r6, [r0, #12]
 800e444:	b13c      	cbz	r4, 800e456 <_Bfree+0x3a>
 800e446:	69eb      	ldr	r3, [r5, #28]
 800e448:	6862      	ldr	r2, [r4, #4]
 800e44a:	68db      	ldr	r3, [r3, #12]
 800e44c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e450:	6021      	str	r1, [r4, #0]
 800e452:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e456:	bd70      	pop	{r4, r5, r6, pc}
 800e458:	0800f2f9 	.word	0x0800f2f9
 800e45c:	0800f379 	.word	0x0800f379

0800e460 <__multadd>:
 800e460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e464:	690d      	ldr	r5, [r1, #16]
 800e466:	4607      	mov	r7, r0
 800e468:	460c      	mov	r4, r1
 800e46a:	461e      	mov	r6, r3
 800e46c:	f101 0c14 	add.w	ip, r1, #20
 800e470:	2000      	movs	r0, #0
 800e472:	f8dc 3000 	ldr.w	r3, [ip]
 800e476:	b299      	uxth	r1, r3
 800e478:	fb02 6101 	mla	r1, r2, r1, r6
 800e47c:	0c1e      	lsrs	r6, r3, #16
 800e47e:	0c0b      	lsrs	r3, r1, #16
 800e480:	fb02 3306 	mla	r3, r2, r6, r3
 800e484:	b289      	uxth	r1, r1
 800e486:	3001      	adds	r0, #1
 800e488:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e48c:	4285      	cmp	r5, r0
 800e48e:	f84c 1b04 	str.w	r1, [ip], #4
 800e492:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e496:	dcec      	bgt.n	800e472 <__multadd+0x12>
 800e498:	b30e      	cbz	r6, 800e4de <__multadd+0x7e>
 800e49a:	68a3      	ldr	r3, [r4, #8]
 800e49c:	42ab      	cmp	r3, r5
 800e49e:	dc19      	bgt.n	800e4d4 <__multadd+0x74>
 800e4a0:	6861      	ldr	r1, [r4, #4]
 800e4a2:	4638      	mov	r0, r7
 800e4a4:	3101      	adds	r1, #1
 800e4a6:	f7ff ff79 	bl	800e39c <_Balloc>
 800e4aa:	4680      	mov	r8, r0
 800e4ac:	b928      	cbnz	r0, 800e4ba <__multadd+0x5a>
 800e4ae:	4602      	mov	r2, r0
 800e4b0:	4b0c      	ldr	r3, [pc, #48]	@ (800e4e4 <__multadd+0x84>)
 800e4b2:	480d      	ldr	r0, [pc, #52]	@ (800e4e8 <__multadd+0x88>)
 800e4b4:	21ba      	movs	r1, #186	@ 0xba
 800e4b6:	f7fe f9df 	bl	800c878 <__assert_func>
 800e4ba:	6922      	ldr	r2, [r4, #16]
 800e4bc:	3202      	adds	r2, #2
 800e4be:	f104 010c 	add.w	r1, r4, #12
 800e4c2:	0092      	lsls	r2, r2, #2
 800e4c4:	300c      	adds	r0, #12
 800e4c6:	f7ff f8b0 	bl	800d62a <memcpy>
 800e4ca:	4621      	mov	r1, r4
 800e4cc:	4638      	mov	r0, r7
 800e4ce:	f7ff ffa5 	bl	800e41c <_Bfree>
 800e4d2:	4644      	mov	r4, r8
 800e4d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e4d8:	3501      	adds	r5, #1
 800e4da:	615e      	str	r6, [r3, #20]
 800e4dc:	6125      	str	r5, [r4, #16]
 800e4de:	4620      	mov	r0, r4
 800e4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4e4:	0800f368 	.word	0x0800f368
 800e4e8:	0800f379 	.word	0x0800f379

0800e4ec <__hi0bits>:
 800e4ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	bf36      	itet	cc
 800e4f4:	0403      	lslcc	r3, r0, #16
 800e4f6:	2000      	movcs	r0, #0
 800e4f8:	2010      	movcc	r0, #16
 800e4fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e4fe:	bf3c      	itt	cc
 800e500:	021b      	lslcc	r3, r3, #8
 800e502:	3008      	addcc	r0, #8
 800e504:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e508:	bf3c      	itt	cc
 800e50a:	011b      	lslcc	r3, r3, #4
 800e50c:	3004      	addcc	r0, #4
 800e50e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e512:	bf3c      	itt	cc
 800e514:	009b      	lslcc	r3, r3, #2
 800e516:	3002      	addcc	r0, #2
 800e518:	2b00      	cmp	r3, #0
 800e51a:	db05      	blt.n	800e528 <__hi0bits+0x3c>
 800e51c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e520:	f100 0001 	add.w	r0, r0, #1
 800e524:	bf08      	it	eq
 800e526:	2020      	moveq	r0, #32
 800e528:	4770      	bx	lr

0800e52a <__lo0bits>:
 800e52a:	6803      	ldr	r3, [r0, #0]
 800e52c:	4602      	mov	r2, r0
 800e52e:	f013 0007 	ands.w	r0, r3, #7
 800e532:	d00b      	beq.n	800e54c <__lo0bits+0x22>
 800e534:	07d9      	lsls	r1, r3, #31
 800e536:	d421      	bmi.n	800e57c <__lo0bits+0x52>
 800e538:	0798      	lsls	r0, r3, #30
 800e53a:	bf49      	itett	mi
 800e53c:	085b      	lsrmi	r3, r3, #1
 800e53e:	089b      	lsrpl	r3, r3, #2
 800e540:	2001      	movmi	r0, #1
 800e542:	6013      	strmi	r3, [r2, #0]
 800e544:	bf5c      	itt	pl
 800e546:	6013      	strpl	r3, [r2, #0]
 800e548:	2002      	movpl	r0, #2
 800e54a:	4770      	bx	lr
 800e54c:	b299      	uxth	r1, r3
 800e54e:	b909      	cbnz	r1, 800e554 <__lo0bits+0x2a>
 800e550:	0c1b      	lsrs	r3, r3, #16
 800e552:	2010      	movs	r0, #16
 800e554:	b2d9      	uxtb	r1, r3
 800e556:	b909      	cbnz	r1, 800e55c <__lo0bits+0x32>
 800e558:	3008      	adds	r0, #8
 800e55a:	0a1b      	lsrs	r3, r3, #8
 800e55c:	0719      	lsls	r1, r3, #28
 800e55e:	bf04      	itt	eq
 800e560:	091b      	lsreq	r3, r3, #4
 800e562:	3004      	addeq	r0, #4
 800e564:	0799      	lsls	r1, r3, #30
 800e566:	bf04      	itt	eq
 800e568:	089b      	lsreq	r3, r3, #2
 800e56a:	3002      	addeq	r0, #2
 800e56c:	07d9      	lsls	r1, r3, #31
 800e56e:	d403      	bmi.n	800e578 <__lo0bits+0x4e>
 800e570:	085b      	lsrs	r3, r3, #1
 800e572:	f100 0001 	add.w	r0, r0, #1
 800e576:	d003      	beq.n	800e580 <__lo0bits+0x56>
 800e578:	6013      	str	r3, [r2, #0]
 800e57a:	4770      	bx	lr
 800e57c:	2000      	movs	r0, #0
 800e57e:	4770      	bx	lr
 800e580:	2020      	movs	r0, #32
 800e582:	4770      	bx	lr

0800e584 <__i2b>:
 800e584:	b510      	push	{r4, lr}
 800e586:	460c      	mov	r4, r1
 800e588:	2101      	movs	r1, #1
 800e58a:	f7ff ff07 	bl	800e39c <_Balloc>
 800e58e:	4602      	mov	r2, r0
 800e590:	b928      	cbnz	r0, 800e59e <__i2b+0x1a>
 800e592:	4b05      	ldr	r3, [pc, #20]	@ (800e5a8 <__i2b+0x24>)
 800e594:	4805      	ldr	r0, [pc, #20]	@ (800e5ac <__i2b+0x28>)
 800e596:	f240 1145 	movw	r1, #325	@ 0x145
 800e59a:	f7fe f96d 	bl	800c878 <__assert_func>
 800e59e:	2301      	movs	r3, #1
 800e5a0:	6144      	str	r4, [r0, #20]
 800e5a2:	6103      	str	r3, [r0, #16]
 800e5a4:	bd10      	pop	{r4, pc}
 800e5a6:	bf00      	nop
 800e5a8:	0800f368 	.word	0x0800f368
 800e5ac:	0800f379 	.word	0x0800f379

0800e5b0 <__multiply>:
 800e5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b4:	4617      	mov	r7, r2
 800e5b6:	690a      	ldr	r2, [r1, #16]
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	bfa8      	it	ge
 800e5be:	463b      	movge	r3, r7
 800e5c0:	4689      	mov	r9, r1
 800e5c2:	bfa4      	itt	ge
 800e5c4:	460f      	movge	r7, r1
 800e5c6:	4699      	movge	r9, r3
 800e5c8:	693d      	ldr	r5, [r7, #16]
 800e5ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	6879      	ldr	r1, [r7, #4]
 800e5d2:	eb05 060a 	add.w	r6, r5, sl
 800e5d6:	42b3      	cmp	r3, r6
 800e5d8:	b085      	sub	sp, #20
 800e5da:	bfb8      	it	lt
 800e5dc:	3101      	addlt	r1, #1
 800e5de:	f7ff fedd 	bl	800e39c <_Balloc>
 800e5e2:	b930      	cbnz	r0, 800e5f2 <__multiply+0x42>
 800e5e4:	4602      	mov	r2, r0
 800e5e6:	4b41      	ldr	r3, [pc, #260]	@ (800e6ec <__multiply+0x13c>)
 800e5e8:	4841      	ldr	r0, [pc, #260]	@ (800e6f0 <__multiply+0x140>)
 800e5ea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e5ee:	f7fe f943 	bl	800c878 <__assert_func>
 800e5f2:	f100 0414 	add.w	r4, r0, #20
 800e5f6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e5fa:	4623      	mov	r3, r4
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	4573      	cmp	r3, lr
 800e600:	d320      	bcc.n	800e644 <__multiply+0x94>
 800e602:	f107 0814 	add.w	r8, r7, #20
 800e606:	f109 0114 	add.w	r1, r9, #20
 800e60a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e60e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e612:	9302      	str	r3, [sp, #8]
 800e614:	1beb      	subs	r3, r5, r7
 800e616:	3b15      	subs	r3, #21
 800e618:	f023 0303 	bic.w	r3, r3, #3
 800e61c:	3304      	adds	r3, #4
 800e61e:	3715      	adds	r7, #21
 800e620:	42bd      	cmp	r5, r7
 800e622:	bf38      	it	cc
 800e624:	2304      	movcc	r3, #4
 800e626:	9301      	str	r3, [sp, #4]
 800e628:	9b02      	ldr	r3, [sp, #8]
 800e62a:	9103      	str	r1, [sp, #12]
 800e62c:	428b      	cmp	r3, r1
 800e62e:	d80c      	bhi.n	800e64a <__multiply+0x9a>
 800e630:	2e00      	cmp	r6, #0
 800e632:	dd03      	ble.n	800e63c <__multiply+0x8c>
 800e634:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d055      	beq.n	800e6e8 <__multiply+0x138>
 800e63c:	6106      	str	r6, [r0, #16]
 800e63e:	b005      	add	sp, #20
 800e640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e644:	f843 2b04 	str.w	r2, [r3], #4
 800e648:	e7d9      	b.n	800e5fe <__multiply+0x4e>
 800e64a:	f8b1 a000 	ldrh.w	sl, [r1]
 800e64e:	f1ba 0f00 	cmp.w	sl, #0
 800e652:	d01f      	beq.n	800e694 <__multiply+0xe4>
 800e654:	46c4      	mov	ip, r8
 800e656:	46a1      	mov	r9, r4
 800e658:	2700      	movs	r7, #0
 800e65a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e65e:	f8d9 3000 	ldr.w	r3, [r9]
 800e662:	fa1f fb82 	uxth.w	fp, r2
 800e666:	b29b      	uxth	r3, r3
 800e668:	fb0a 330b 	mla	r3, sl, fp, r3
 800e66c:	443b      	add	r3, r7
 800e66e:	f8d9 7000 	ldr.w	r7, [r9]
 800e672:	0c12      	lsrs	r2, r2, #16
 800e674:	0c3f      	lsrs	r7, r7, #16
 800e676:	fb0a 7202 	mla	r2, sl, r2, r7
 800e67a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e67e:	b29b      	uxth	r3, r3
 800e680:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e684:	4565      	cmp	r5, ip
 800e686:	f849 3b04 	str.w	r3, [r9], #4
 800e68a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e68e:	d8e4      	bhi.n	800e65a <__multiply+0xaa>
 800e690:	9b01      	ldr	r3, [sp, #4]
 800e692:	50e7      	str	r7, [r4, r3]
 800e694:	9b03      	ldr	r3, [sp, #12]
 800e696:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e69a:	3104      	adds	r1, #4
 800e69c:	f1b9 0f00 	cmp.w	r9, #0
 800e6a0:	d020      	beq.n	800e6e4 <__multiply+0x134>
 800e6a2:	6823      	ldr	r3, [r4, #0]
 800e6a4:	4647      	mov	r7, r8
 800e6a6:	46a4      	mov	ip, r4
 800e6a8:	f04f 0a00 	mov.w	sl, #0
 800e6ac:	f8b7 b000 	ldrh.w	fp, [r7]
 800e6b0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e6b4:	fb09 220b 	mla	r2, r9, fp, r2
 800e6b8:	4452      	add	r2, sl
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e6c0:	f84c 3b04 	str.w	r3, [ip], #4
 800e6c4:	f857 3b04 	ldr.w	r3, [r7], #4
 800e6c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e6cc:	f8bc 3000 	ldrh.w	r3, [ip]
 800e6d0:	fb09 330a 	mla	r3, r9, sl, r3
 800e6d4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e6d8:	42bd      	cmp	r5, r7
 800e6da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e6de:	d8e5      	bhi.n	800e6ac <__multiply+0xfc>
 800e6e0:	9a01      	ldr	r2, [sp, #4]
 800e6e2:	50a3      	str	r3, [r4, r2]
 800e6e4:	3404      	adds	r4, #4
 800e6e6:	e79f      	b.n	800e628 <__multiply+0x78>
 800e6e8:	3e01      	subs	r6, #1
 800e6ea:	e7a1      	b.n	800e630 <__multiply+0x80>
 800e6ec:	0800f368 	.word	0x0800f368
 800e6f0:	0800f379 	.word	0x0800f379

0800e6f4 <__pow5mult>:
 800e6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6f8:	4615      	mov	r5, r2
 800e6fa:	f012 0203 	ands.w	r2, r2, #3
 800e6fe:	4607      	mov	r7, r0
 800e700:	460e      	mov	r6, r1
 800e702:	d007      	beq.n	800e714 <__pow5mult+0x20>
 800e704:	4c25      	ldr	r4, [pc, #148]	@ (800e79c <__pow5mult+0xa8>)
 800e706:	3a01      	subs	r2, #1
 800e708:	2300      	movs	r3, #0
 800e70a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e70e:	f7ff fea7 	bl	800e460 <__multadd>
 800e712:	4606      	mov	r6, r0
 800e714:	10ad      	asrs	r5, r5, #2
 800e716:	d03d      	beq.n	800e794 <__pow5mult+0xa0>
 800e718:	69fc      	ldr	r4, [r7, #28]
 800e71a:	b97c      	cbnz	r4, 800e73c <__pow5mult+0x48>
 800e71c:	2010      	movs	r0, #16
 800e71e:	f7fe f8c9 	bl	800c8b4 <malloc>
 800e722:	4602      	mov	r2, r0
 800e724:	61f8      	str	r0, [r7, #28]
 800e726:	b928      	cbnz	r0, 800e734 <__pow5mult+0x40>
 800e728:	4b1d      	ldr	r3, [pc, #116]	@ (800e7a0 <__pow5mult+0xac>)
 800e72a:	481e      	ldr	r0, [pc, #120]	@ (800e7a4 <__pow5mult+0xb0>)
 800e72c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e730:	f7fe f8a2 	bl	800c878 <__assert_func>
 800e734:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e738:	6004      	str	r4, [r0, #0]
 800e73a:	60c4      	str	r4, [r0, #12]
 800e73c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e740:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e744:	b94c      	cbnz	r4, 800e75a <__pow5mult+0x66>
 800e746:	f240 2171 	movw	r1, #625	@ 0x271
 800e74a:	4638      	mov	r0, r7
 800e74c:	f7ff ff1a 	bl	800e584 <__i2b>
 800e750:	2300      	movs	r3, #0
 800e752:	f8c8 0008 	str.w	r0, [r8, #8]
 800e756:	4604      	mov	r4, r0
 800e758:	6003      	str	r3, [r0, #0]
 800e75a:	f04f 0900 	mov.w	r9, #0
 800e75e:	07eb      	lsls	r3, r5, #31
 800e760:	d50a      	bpl.n	800e778 <__pow5mult+0x84>
 800e762:	4631      	mov	r1, r6
 800e764:	4622      	mov	r2, r4
 800e766:	4638      	mov	r0, r7
 800e768:	f7ff ff22 	bl	800e5b0 <__multiply>
 800e76c:	4631      	mov	r1, r6
 800e76e:	4680      	mov	r8, r0
 800e770:	4638      	mov	r0, r7
 800e772:	f7ff fe53 	bl	800e41c <_Bfree>
 800e776:	4646      	mov	r6, r8
 800e778:	106d      	asrs	r5, r5, #1
 800e77a:	d00b      	beq.n	800e794 <__pow5mult+0xa0>
 800e77c:	6820      	ldr	r0, [r4, #0]
 800e77e:	b938      	cbnz	r0, 800e790 <__pow5mult+0x9c>
 800e780:	4622      	mov	r2, r4
 800e782:	4621      	mov	r1, r4
 800e784:	4638      	mov	r0, r7
 800e786:	f7ff ff13 	bl	800e5b0 <__multiply>
 800e78a:	6020      	str	r0, [r4, #0]
 800e78c:	f8c0 9000 	str.w	r9, [r0]
 800e790:	4604      	mov	r4, r0
 800e792:	e7e4      	b.n	800e75e <__pow5mult+0x6a>
 800e794:	4630      	mov	r0, r6
 800e796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e79a:	bf00      	nop
 800e79c:	0800f3f0 	.word	0x0800f3f0
 800e7a0:	0800f2f9 	.word	0x0800f2f9
 800e7a4:	0800f379 	.word	0x0800f379

0800e7a8 <__lshift>:
 800e7a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7ac:	460c      	mov	r4, r1
 800e7ae:	6849      	ldr	r1, [r1, #4]
 800e7b0:	6923      	ldr	r3, [r4, #16]
 800e7b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e7b6:	68a3      	ldr	r3, [r4, #8]
 800e7b8:	4607      	mov	r7, r0
 800e7ba:	4691      	mov	r9, r2
 800e7bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e7c0:	f108 0601 	add.w	r6, r8, #1
 800e7c4:	42b3      	cmp	r3, r6
 800e7c6:	db0b      	blt.n	800e7e0 <__lshift+0x38>
 800e7c8:	4638      	mov	r0, r7
 800e7ca:	f7ff fde7 	bl	800e39c <_Balloc>
 800e7ce:	4605      	mov	r5, r0
 800e7d0:	b948      	cbnz	r0, 800e7e6 <__lshift+0x3e>
 800e7d2:	4602      	mov	r2, r0
 800e7d4:	4b28      	ldr	r3, [pc, #160]	@ (800e878 <__lshift+0xd0>)
 800e7d6:	4829      	ldr	r0, [pc, #164]	@ (800e87c <__lshift+0xd4>)
 800e7d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e7dc:	f7fe f84c 	bl	800c878 <__assert_func>
 800e7e0:	3101      	adds	r1, #1
 800e7e2:	005b      	lsls	r3, r3, #1
 800e7e4:	e7ee      	b.n	800e7c4 <__lshift+0x1c>
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	f100 0114 	add.w	r1, r0, #20
 800e7ec:	f100 0210 	add.w	r2, r0, #16
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	4553      	cmp	r3, sl
 800e7f4:	db33      	blt.n	800e85e <__lshift+0xb6>
 800e7f6:	6920      	ldr	r0, [r4, #16]
 800e7f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e7fc:	f104 0314 	add.w	r3, r4, #20
 800e800:	f019 091f 	ands.w	r9, r9, #31
 800e804:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e808:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e80c:	d02b      	beq.n	800e866 <__lshift+0xbe>
 800e80e:	f1c9 0e20 	rsb	lr, r9, #32
 800e812:	468a      	mov	sl, r1
 800e814:	2200      	movs	r2, #0
 800e816:	6818      	ldr	r0, [r3, #0]
 800e818:	fa00 f009 	lsl.w	r0, r0, r9
 800e81c:	4310      	orrs	r0, r2
 800e81e:	f84a 0b04 	str.w	r0, [sl], #4
 800e822:	f853 2b04 	ldr.w	r2, [r3], #4
 800e826:	459c      	cmp	ip, r3
 800e828:	fa22 f20e 	lsr.w	r2, r2, lr
 800e82c:	d8f3      	bhi.n	800e816 <__lshift+0x6e>
 800e82e:	ebac 0304 	sub.w	r3, ip, r4
 800e832:	3b15      	subs	r3, #21
 800e834:	f023 0303 	bic.w	r3, r3, #3
 800e838:	3304      	adds	r3, #4
 800e83a:	f104 0015 	add.w	r0, r4, #21
 800e83e:	4560      	cmp	r0, ip
 800e840:	bf88      	it	hi
 800e842:	2304      	movhi	r3, #4
 800e844:	50ca      	str	r2, [r1, r3]
 800e846:	b10a      	cbz	r2, 800e84c <__lshift+0xa4>
 800e848:	f108 0602 	add.w	r6, r8, #2
 800e84c:	3e01      	subs	r6, #1
 800e84e:	4638      	mov	r0, r7
 800e850:	612e      	str	r6, [r5, #16]
 800e852:	4621      	mov	r1, r4
 800e854:	f7ff fde2 	bl	800e41c <_Bfree>
 800e858:	4628      	mov	r0, r5
 800e85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e85e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e862:	3301      	adds	r3, #1
 800e864:	e7c5      	b.n	800e7f2 <__lshift+0x4a>
 800e866:	3904      	subs	r1, #4
 800e868:	f853 2b04 	ldr.w	r2, [r3], #4
 800e86c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e870:	459c      	cmp	ip, r3
 800e872:	d8f9      	bhi.n	800e868 <__lshift+0xc0>
 800e874:	e7ea      	b.n	800e84c <__lshift+0xa4>
 800e876:	bf00      	nop
 800e878:	0800f368 	.word	0x0800f368
 800e87c:	0800f379 	.word	0x0800f379

0800e880 <__mcmp>:
 800e880:	690a      	ldr	r2, [r1, #16]
 800e882:	4603      	mov	r3, r0
 800e884:	6900      	ldr	r0, [r0, #16]
 800e886:	1a80      	subs	r0, r0, r2
 800e888:	b530      	push	{r4, r5, lr}
 800e88a:	d10e      	bne.n	800e8aa <__mcmp+0x2a>
 800e88c:	3314      	adds	r3, #20
 800e88e:	3114      	adds	r1, #20
 800e890:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e894:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e898:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e89c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e8a0:	4295      	cmp	r5, r2
 800e8a2:	d003      	beq.n	800e8ac <__mcmp+0x2c>
 800e8a4:	d205      	bcs.n	800e8b2 <__mcmp+0x32>
 800e8a6:	f04f 30ff 	mov.w	r0, #4294967295
 800e8aa:	bd30      	pop	{r4, r5, pc}
 800e8ac:	42a3      	cmp	r3, r4
 800e8ae:	d3f3      	bcc.n	800e898 <__mcmp+0x18>
 800e8b0:	e7fb      	b.n	800e8aa <__mcmp+0x2a>
 800e8b2:	2001      	movs	r0, #1
 800e8b4:	e7f9      	b.n	800e8aa <__mcmp+0x2a>
	...

0800e8b8 <__mdiff>:
 800e8b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8bc:	4689      	mov	r9, r1
 800e8be:	4606      	mov	r6, r0
 800e8c0:	4611      	mov	r1, r2
 800e8c2:	4648      	mov	r0, r9
 800e8c4:	4614      	mov	r4, r2
 800e8c6:	f7ff ffdb 	bl	800e880 <__mcmp>
 800e8ca:	1e05      	subs	r5, r0, #0
 800e8cc:	d112      	bne.n	800e8f4 <__mdiff+0x3c>
 800e8ce:	4629      	mov	r1, r5
 800e8d0:	4630      	mov	r0, r6
 800e8d2:	f7ff fd63 	bl	800e39c <_Balloc>
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	b928      	cbnz	r0, 800e8e6 <__mdiff+0x2e>
 800e8da:	4b3f      	ldr	r3, [pc, #252]	@ (800e9d8 <__mdiff+0x120>)
 800e8dc:	f240 2137 	movw	r1, #567	@ 0x237
 800e8e0:	483e      	ldr	r0, [pc, #248]	@ (800e9dc <__mdiff+0x124>)
 800e8e2:	f7fd ffc9 	bl	800c878 <__assert_func>
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e8ec:	4610      	mov	r0, r2
 800e8ee:	b003      	add	sp, #12
 800e8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8f4:	bfbc      	itt	lt
 800e8f6:	464b      	movlt	r3, r9
 800e8f8:	46a1      	movlt	r9, r4
 800e8fa:	4630      	mov	r0, r6
 800e8fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e900:	bfba      	itte	lt
 800e902:	461c      	movlt	r4, r3
 800e904:	2501      	movlt	r5, #1
 800e906:	2500      	movge	r5, #0
 800e908:	f7ff fd48 	bl	800e39c <_Balloc>
 800e90c:	4602      	mov	r2, r0
 800e90e:	b918      	cbnz	r0, 800e918 <__mdiff+0x60>
 800e910:	4b31      	ldr	r3, [pc, #196]	@ (800e9d8 <__mdiff+0x120>)
 800e912:	f240 2145 	movw	r1, #581	@ 0x245
 800e916:	e7e3      	b.n	800e8e0 <__mdiff+0x28>
 800e918:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e91c:	6926      	ldr	r6, [r4, #16]
 800e91e:	60c5      	str	r5, [r0, #12]
 800e920:	f109 0310 	add.w	r3, r9, #16
 800e924:	f109 0514 	add.w	r5, r9, #20
 800e928:	f104 0e14 	add.w	lr, r4, #20
 800e92c:	f100 0b14 	add.w	fp, r0, #20
 800e930:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e934:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e938:	9301      	str	r3, [sp, #4]
 800e93a:	46d9      	mov	r9, fp
 800e93c:	f04f 0c00 	mov.w	ip, #0
 800e940:	9b01      	ldr	r3, [sp, #4]
 800e942:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e946:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e94a:	9301      	str	r3, [sp, #4]
 800e94c:	fa1f f38a 	uxth.w	r3, sl
 800e950:	4619      	mov	r1, r3
 800e952:	b283      	uxth	r3, r0
 800e954:	1acb      	subs	r3, r1, r3
 800e956:	0c00      	lsrs	r0, r0, #16
 800e958:	4463      	add	r3, ip
 800e95a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e95e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e962:	b29b      	uxth	r3, r3
 800e964:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e968:	4576      	cmp	r6, lr
 800e96a:	f849 3b04 	str.w	r3, [r9], #4
 800e96e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e972:	d8e5      	bhi.n	800e940 <__mdiff+0x88>
 800e974:	1b33      	subs	r3, r6, r4
 800e976:	3b15      	subs	r3, #21
 800e978:	f023 0303 	bic.w	r3, r3, #3
 800e97c:	3415      	adds	r4, #21
 800e97e:	3304      	adds	r3, #4
 800e980:	42a6      	cmp	r6, r4
 800e982:	bf38      	it	cc
 800e984:	2304      	movcc	r3, #4
 800e986:	441d      	add	r5, r3
 800e988:	445b      	add	r3, fp
 800e98a:	461e      	mov	r6, r3
 800e98c:	462c      	mov	r4, r5
 800e98e:	4544      	cmp	r4, r8
 800e990:	d30e      	bcc.n	800e9b0 <__mdiff+0xf8>
 800e992:	f108 0103 	add.w	r1, r8, #3
 800e996:	1b49      	subs	r1, r1, r5
 800e998:	f021 0103 	bic.w	r1, r1, #3
 800e99c:	3d03      	subs	r5, #3
 800e99e:	45a8      	cmp	r8, r5
 800e9a0:	bf38      	it	cc
 800e9a2:	2100      	movcc	r1, #0
 800e9a4:	440b      	add	r3, r1
 800e9a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e9aa:	b191      	cbz	r1, 800e9d2 <__mdiff+0x11a>
 800e9ac:	6117      	str	r7, [r2, #16]
 800e9ae:	e79d      	b.n	800e8ec <__mdiff+0x34>
 800e9b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800e9b4:	46e6      	mov	lr, ip
 800e9b6:	0c08      	lsrs	r0, r1, #16
 800e9b8:	fa1c fc81 	uxtah	ip, ip, r1
 800e9bc:	4471      	add	r1, lr
 800e9be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e9c2:	b289      	uxth	r1, r1
 800e9c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e9c8:	f846 1b04 	str.w	r1, [r6], #4
 800e9cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e9d0:	e7dd      	b.n	800e98e <__mdiff+0xd6>
 800e9d2:	3f01      	subs	r7, #1
 800e9d4:	e7e7      	b.n	800e9a6 <__mdiff+0xee>
 800e9d6:	bf00      	nop
 800e9d8:	0800f368 	.word	0x0800f368
 800e9dc:	0800f379 	.word	0x0800f379

0800e9e0 <__d2b>:
 800e9e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e9e4:	460f      	mov	r7, r1
 800e9e6:	2101      	movs	r1, #1
 800e9e8:	ec59 8b10 	vmov	r8, r9, d0
 800e9ec:	4616      	mov	r6, r2
 800e9ee:	f7ff fcd5 	bl	800e39c <_Balloc>
 800e9f2:	4604      	mov	r4, r0
 800e9f4:	b930      	cbnz	r0, 800ea04 <__d2b+0x24>
 800e9f6:	4602      	mov	r2, r0
 800e9f8:	4b23      	ldr	r3, [pc, #140]	@ (800ea88 <__d2b+0xa8>)
 800e9fa:	4824      	ldr	r0, [pc, #144]	@ (800ea8c <__d2b+0xac>)
 800e9fc:	f240 310f 	movw	r1, #783	@ 0x30f
 800ea00:	f7fd ff3a 	bl	800c878 <__assert_func>
 800ea04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ea08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea0c:	b10d      	cbz	r5, 800ea12 <__d2b+0x32>
 800ea0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ea12:	9301      	str	r3, [sp, #4]
 800ea14:	f1b8 0300 	subs.w	r3, r8, #0
 800ea18:	d023      	beq.n	800ea62 <__d2b+0x82>
 800ea1a:	4668      	mov	r0, sp
 800ea1c:	9300      	str	r3, [sp, #0]
 800ea1e:	f7ff fd84 	bl	800e52a <__lo0bits>
 800ea22:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ea26:	b1d0      	cbz	r0, 800ea5e <__d2b+0x7e>
 800ea28:	f1c0 0320 	rsb	r3, r0, #32
 800ea2c:	fa02 f303 	lsl.w	r3, r2, r3
 800ea30:	430b      	orrs	r3, r1
 800ea32:	40c2      	lsrs	r2, r0
 800ea34:	6163      	str	r3, [r4, #20]
 800ea36:	9201      	str	r2, [sp, #4]
 800ea38:	9b01      	ldr	r3, [sp, #4]
 800ea3a:	61a3      	str	r3, [r4, #24]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	bf0c      	ite	eq
 800ea40:	2201      	moveq	r2, #1
 800ea42:	2202      	movne	r2, #2
 800ea44:	6122      	str	r2, [r4, #16]
 800ea46:	b1a5      	cbz	r5, 800ea72 <__d2b+0x92>
 800ea48:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ea4c:	4405      	add	r5, r0
 800ea4e:	603d      	str	r5, [r7, #0]
 800ea50:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ea54:	6030      	str	r0, [r6, #0]
 800ea56:	4620      	mov	r0, r4
 800ea58:	b003      	add	sp, #12
 800ea5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea5e:	6161      	str	r1, [r4, #20]
 800ea60:	e7ea      	b.n	800ea38 <__d2b+0x58>
 800ea62:	a801      	add	r0, sp, #4
 800ea64:	f7ff fd61 	bl	800e52a <__lo0bits>
 800ea68:	9b01      	ldr	r3, [sp, #4]
 800ea6a:	6163      	str	r3, [r4, #20]
 800ea6c:	3020      	adds	r0, #32
 800ea6e:	2201      	movs	r2, #1
 800ea70:	e7e8      	b.n	800ea44 <__d2b+0x64>
 800ea72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ea76:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ea7a:	6038      	str	r0, [r7, #0]
 800ea7c:	6918      	ldr	r0, [r3, #16]
 800ea7e:	f7ff fd35 	bl	800e4ec <__hi0bits>
 800ea82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ea86:	e7e5      	b.n	800ea54 <__d2b+0x74>
 800ea88:	0800f368 	.word	0x0800f368
 800ea8c:	0800f379 	.word	0x0800f379

0800ea90 <__sfputc_r>:
 800ea90:	6893      	ldr	r3, [r2, #8]
 800ea92:	3b01      	subs	r3, #1
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	b410      	push	{r4}
 800ea98:	6093      	str	r3, [r2, #8]
 800ea9a:	da08      	bge.n	800eaae <__sfputc_r+0x1e>
 800ea9c:	6994      	ldr	r4, [r2, #24]
 800ea9e:	42a3      	cmp	r3, r4
 800eaa0:	db01      	blt.n	800eaa6 <__sfputc_r+0x16>
 800eaa2:	290a      	cmp	r1, #10
 800eaa4:	d103      	bne.n	800eaae <__sfputc_r+0x1e>
 800eaa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eaaa:	f000 b9df 	b.w	800ee6c <__swbuf_r>
 800eaae:	6813      	ldr	r3, [r2, #0]
 800eab0:	1c58      	adds	r0, r3, #1
 800eab2:	6010      	str	r0, [r2, #0]
 800eab4:	7019      	strb	r1, [r3, #0]
 800eab6:	4608      	mov	r0, r1
 800eab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eabc:	4770      	bx	lr

0800eabe <__sfputs_r>:
 800eabe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eac0:	4606      	mov	r6, r0
 800eac2:	460f      	mov	r7, r1
 800eac4:	4614      	mov	r4, r2
 800eac6:	18d5      	adds	r5, r2, r3
 800eac8:	42ac      	cmp	r4, r5
 800eaca:	d101      	bne.n	800ead0 <__sfputs_r+0x12>
 800eacc:	2000      	movs	r0, #0
 800eace:	e007      	b.n	800eae0 <__sfputs_r+0x22>
 800ead0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ead4:	463a      	mov	r2, r7
 800ead6:	4630      	mov	r0, r6
 800ead8:	f7ff ffda 	bl	800ea90 <__sfputc_r>
 800eadc:	1c43      	adds	r3, r0, #1
 800eade:	d1f3      	bne.n	800eac8 <__sfputs_r+0xa>
 800eae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eae4 <_vfiprintf_r>:
 800eae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eae8:	460d      	mov	r5, r1
 800eaea:	b09d      	sub	sp, #116	@ 0x74
 800eaec:	4614      	mov	r4, r2
 800eaee:	4698      	mov	r8, r3
 800eaf0:	4606      	mov	r6, r0
 800eaf2:	b118      	cbz	r0, 800eafc <_vfiprintf_r+0x18>
 800eaf4:	6a03      	ldr	r3, [r0, #32]
 800eaf6:	b90b      	cbnz	r3, 800eafc <_vfiprintf_r+0x18>
 800eaf8:	f7fe fc7c 	bl	800d3f4 <__sinit>
 800eafc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eafe:	07d9      	lsls	r1, r3, #31
 800eb00:	d405      	bmi.n	800eb0e <_vfiprintf_r+0x2a>
 800eb02:	89ab      	ldrh	r3, [r5, #12]
 800eb04:	059a      	lsls	r2, r3, #22
 800eb06:	d402      	bmi.n	800eb0e <_vfiprintf_r+0x2a>
 800eb08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eb0a:	f7fe fd8c 	bl	800d626 <__retarget_lock_acquire_recursive>
 800eb0e:	89ab      	ldrh	r3, [r5, #12]
 800eb10:	071b      	lsls	r3, r3, #28
 800eb12:	d501      	bpl.n	800eb18 <_vfiprintf_r+0x34>
 800eb14:	692b      	ldr	r3, [r5, #16]
 800eb16:	b99b      	cbnz	r3, 800eb40 <_vfiprintf_r+0x5c>
 800eb18:	4629      	mov	r1, r5
 800eb1a:	4630      	mov	r0, r6
 800eb1c:	f000 f9e4 	bl	800eee8 <__swsetup_r>
 800eb20:	b170      	cbz	r0, 800eb40 <_vfiprintf_r+0x5c>
 800eb22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eb24:	07dc      	lsls	r4, r3, #31
 800eb26:	d504      	bpl.n	800eb32 <_vfiprintf_r+0x4e>
 800eb28:	f04f 30ff 	mov.w	r0, #4294967295
 800eb2c:	b01d      	add	sp, #116	@ 0x74
 800eb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb32:	89ab      	ldrh	r3, [r5, #12]
 800eb34:	0598      	lsls	r0, r3, #22
 800eb36:	d4f7      	bmi.n	800eb28 <_vfiprintf_r+0x44>
 800eb38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eb3a:	f7fe fd75 	bl	800d628 <__retarget_lock_release_recursive>
 800eb3e:	e7f3      	b.n	800eb28 <_vfiprintf_r+0x44>
 800eb40:	2300      	movs	r3, #0
 800eb42:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb44:	2320      	movs	r3, #32
 800eb46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eb4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb4e:	2330      	movs	r3, #48	@ 0x30
 800eb50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ed00 <_vfiprintf_r+0x21c>
 800eb54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eb58:	f04f 0901 	mov.w	r9, #1
 800eb5c:	4623      	mov	r3, r4
 800eb5e:	469a      	mov	sl, r3
 800eb60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb64:	b10a      	cbz	r2, 800eb6a <_vfiprintf_r+0x86>
 800eb66:	2a25      	cmp	r2, #37	@ 0x25
 800eb68:	d1f9      	bne.n	800eb5e <_vfiprintf_r+0x7a>
 800eb6a:	ebba 0b04 	subs.w	fp, sl, r4
 800eb6e:	d00b      	beq.n	800eb88 <_vfiprintf_r+0xa4>
 800eb70:	465b      	mov	r3, fp
 800eb72:	4622      	mov	r2, r4
 800eb74:	4629      	mov	r1, r5
 800eb76:	4630      	mov	r0, r6
 800eb78:	f7ff ffa1 	bl	800eabe <__sfputs_r>
 800eb7c:	3001      	adds	r0, #1
 800eb7e:	f000 80a7 	beq.w	800ecd0 <_vfiprintf_r+0x1ec>
 800eb82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb84:	445a      	add	r2, fp
 800eb86:	9209      	str	r2, [sp, #36]	@ 0x24
 800eb88:	f89a 3000 	ldrb.w	r3, [sl]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	f000 809f 	beq.w	800ecd0 <_vfiprintf_r+0x1ec>
 800eb92:	2300      	movs	r3, #0
 800eb94:	f04f 32ff 	mov.w	r2, #4294967295
 800eb98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb9c:	f10a 0a01 	add.w	sl, sl, #1
 800eba0:	9304      	str	r3, [sp, #16]
 800eba2:	9307      	str	r3, [sp, #28]
 800eba4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eba8:	931a      	str	r3, [sp, #104]	@ 0x68
 800ebaa:	4654      	mov	r4, sl
 800ebac:	2205      	movs	r2, #5
 800ebae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebb2:	4853      	ldr	r0, [pc, #332]	@ (800ed00 <_vfiprintf_r+0x21c>)
 800ebb4:	f7f1 fb0c 	bl	80001d0 <memchr>
 800ebb8:	9a04      	ldr	r2, [sp, #16]
 800ebba:	b9d8      	cbnz	r0, 800ebf4 <_vfiprintf_r+0x110>
 800ebbc:	06d1      	lsls	r1, r2, #27
 800ebbe:	bf44      	itt	mi
 800ebc0:	2320      	movmi	r3, #32
 800ebc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ebc6:	0713      	lsls	r3, r2, #28
 800ebc8:	bf44      	itt	mi
 800ebca:	232b      	movmi	r3, #43	@ 0x2b
 800ebcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ebd0:	f89a 3000 	ldrb.w	r3, [sl]
 800ebd4:	2b2a      	cmp	r3, #42	@ 0x2a
 800ebd6:	d015      	beq.n	800ec04 <_vfiprintf_r+0x120>
 800ebd8:	9a07      	ldr	r2, [sp, #28]
 800ebda:	4654      	mov	r4, sl
 800ebdc:	2000      	movs	r0, #0
 800ebde:	f04f 0c0a 	mov.w	ip, #10
 800ebe2:	4621      	mov	r1, r4
 800ebe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebe8:	3b30      	subs	r3, #48	@ 0x30
 800ebea:	2b09      	cmp	r3, #9
 800ebec:	d94b      	bls.n	800ec86 <_vfiprintf_r+0x1a2>
 800ebee:	b1b0      	cbz	r0, 800ec1e <_vfiprintf_r+0x13a>
 800ebf0:	9207      	str	r2, [sp, #28]
 800ebf2:	e014      	b.n	800ec1e <_vfiprintf_r+0x13a>
 800ebf4:	eba0 0308 	sub.w	r3, r0, r8
 800ebf8:	fa09 f303 	lsl.w	r3, r9, r3
 800ebfc:	4313      	orrs	r3, r2
 800ebfe:	9304      	str	r3, [sp, #16]
 800ec00:	46a2      	mov	sl, r4
 800ec02:	e7d2      	b.n	800ebaa <_vfiprintf_r+0xc6>
 800ec04:	9b03      	ldr	r3, [sp, #12]
 800ec06:	1d19      	adds	r1, r3, #4
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	9103      	str	r1, [sp, #12]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	bfbb      	ittet	lt
 800ec10:	425b      	neglt	r3, r3
 800ec12:	f042 0202 	orrlt.w	r2, r2, #2
 800ec16:	9307      	strge	r3, [sp, #28]
 800ec18:	9307      	strlt	r3, [sp, #28]
 800ec1a:	bfb8      	it	lt
 800ec1c:	9204      	strlt	r2, [sp, #16]
 800ec1e:	7823      	ldrb	r3, [r4, #0]
 800ec20:	2b2e      	cmp	r3, #46	@ 0x2e
 800ec22:	d10a      	bne.n	800ec3a <_vfiprintf_r+0x156>
 800ec24:	7863      	ldrb	r3, [r4, #1]
 800ec26:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec28:	d132      	bne.n	800ec90 <_vfiprintf_r+0x1ac>
 800ec2a:	9b03      	ldr	r3, [sp, #12]
 800ec2c:	1d1a      	adds	r2, r3, #4
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	9203      	str	r2, [sp, #12]
 800ec32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ec36:	3402      	adds	r4, #2
 800ec38:	9305      	str	r3, [sp, #20]
 800ec3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ed10 <_vfiprintf_r+0x22c>
 800ec3e:	7821      	ldrb	r1, [r4, #0]
 800ec40:	2203      	movs	r2, #3
 800ec42:	4650      	mov	r0, sl
 800ec44:	f7f1 fac4 	bl	80001d0 <memchr>
 800ec48:	b138      	cbz	r0, 800ec5a <_vfiprintf_r+0x176>
 800ec4a:	9b04      	ldr	r3, [sp, #16]
 800ec4c:	eba0 000a 	sub.w	r0, r0, sl
 800ec50:	2240      	movs	r2, #64	@ 0x40
 800ec52:	4082      	lsls	r2, r0
 800ec54:	4313      	orrs	r3, r2
 800ec56:	3401      	adds	r4, #1
 800ec58:	9304      	str	r3, [sp, #16]
 800ec5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec5e:	4829      	ldr	r0, [pc, #164]	@ (800ed04 <_vfiprintf_r+0x220>)
 800ec60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ec64:	2206      	movs	r2, #6
 800ec66:	f7f1 fab3 	bl	80001d0 <memchr>
 800ec6a:	2800      	cmp	r0, #0
 800ec6c:	d03f      	beq.n	800ecee <_vfiprintf_r+0x20a>
 800ec6e:	4b26      	ldr	r3, [pc, #152]	@ (800ed08 <_vfiprintf_r+0x224>)
 800ec70:	bb1b      	cbnz	r3, 800ecba <_vfiprintf_r+0x1d6>
 800ec72:	9b03      	ldr	r3, [sp, #12]
 800ec74:	3307      	adds	r3, #7
 800ec76:	f023 0307 	bic.w	r3, r3, #7
 800ec7a:	3308      	adds	r3, #8
 800ec7c:	9303      	str	r3, [sp, #12]
 800ec7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec80:	443b      	add	r3, r7
 800ec82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec84:	e76a      	b.n	800eb5c <_vfiprintf_r+0x78>
 800ec86:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec8a:	460c      	mov	r4, r1
 800ec8c:	2001      	movs	r0, #1
 800ec8e:	e7a8      	b.n	800ebe2 <_vfiprintf_r+0xfe>
 800ec90:	2300      	movs	r3, #0
 800ec92:	3401      	adds	r4, #1
 800ec94:	9305      	str	r3, [sp, #20]
 800ec96:	4619      	mov	r1, r3
 800ec98:	f04f 0c0a 	mov.w	ip, #10
 800ec9c:	4620      	mov	r0, r4
 800ec9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eca2:	3a30      	subs	r2, #48	@ 0x30
 800eca4:	2a09      	cmp	r2, #9
 800eca6:	d903      	bls.n	800ecb0 <_vfiprintf_r+0x1cc>
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d0c6      	beq.n	800ec3a <_vfiprintf_r+0x156>
 800ecac:	9105      	str	r1, [sp, #20]
 800ecae:	e7c4      	b.n	800ec3a <_vfiprintf_r+0x156>
 800ecb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800ecb4:	4604      	mov	r4, r0
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	e7f0      	b.n	800ec9c <_vfiprintf_r+0x1b8>
 800ecba:	ab03      	add	r3, sp, #12
 800ecbc:	9300      	str	r3, [sp, #0]
 800ecbe:	462a      	mov	r2, r5
 800ecc0:	4b12      	ldr	r3, [pc, #72]	@ (800ed0c <_vfiprintf_r+0x228>)
 800ecc2:	a904      	add	r1, sp, #16
 800ecc4:	4630      	mov	r0, r6
 800ecc6:	f7fd ff53 	bl	800cb70 <_printf_float>
 800ecca:	4607      	mov	r7, r0
 800eccc:	1c78      	adds	r0, r7, #1
 800ecce:	d1d6      	bne.n	800ec7e <_vfiprintf_r+0x19a>
 800ecd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ecd2:	07d9      	lsls	r1, r3, #31
 800ecd4:	d405      	bmi.n	800ece2 <_vfiprintf_r+0x1fe>
 800ecd6:	89ab      	ldrh	r3, [r5, #12]
 800ecd8:	059a      	lsls	r2, r3, #22
 800ecda:	d402      	bmi.n	800ece2 <_vfiprintf_r+0x1fe>
 800ecdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ecde:	f7fe fca3 	bl	800d628 <__retarget_lock_release_recursive>
 800ece2:	89ab      	ldrh	r3, [r5, #12]
 800ece4:	065b      	lsls	r3, r3, #25
 800ece6:	f53f af1f 	bmi.w	800eb28 <_vfiprintf_r+0x44>
 800ecea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ecec:	e71e      	b.n	800eb2c <_vfiprintf_r+0x48>
 800ecee:	ab03      	add	r3, sp, #12
 800ecf0:	9300      	str	r3, [sp, #0]
 800ecf2:	462a      	mov	r2, r5
 800ecf4:	4b05      	ldr	r3, [pc, #20]	@ (800ed0c <_vfiprintf_r+0x228>)
 800ecf6:	a904      	add	r1, sp, #16
 800ecf8:	4630      	mov	r0, r6
 800ecfa:	f7fe f9d1 	bl	800d0a0 <_printf_i>
 800ecfe:	e7e4      	b.n	800ecca <_vfiprintf_r+0x1e6>
 800ed00:	0800f3d2 	.word	0x0800f3d2
 800ed04:	0800f3dc 	.word	0x0800f3dc
 800ed08:	0800cb71 	.word	0x0800cb71
 800ed0c:	0800eabf 	.word	0x0800eabf
 800ed10:	0800f3d8 	.word	0x0800f3d8

0800ed14 <__sflush_r>:
 800ed14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ed18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed1c:	0716      	lsls	r6, r2, #28
 800ed1e:	4605      	mov	r5, r0
 800ed20:	460c      	mov	r4, r1
 800ed22:	d454      	bmi.n	800edce <__sflush_r+0xba>
 800ed24:	684b      	ldr	r3, [r1, #4]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	dc02      	bgt.n	800ed30 <__sflush_r+0x1c>
 800ed2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	dd48      	ble.n	800edc2 <__sflush_r+0xae>
 800ed30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ed32:	2e00      	cmp	r6, #0
 800ed34:	d045      	beq.n	800edc2 <__sflush_r+0xae>
 800ed36:	2300      	movs	r3, #0
 800ed38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ed3c:	682f      	ldr	r7, [r5, #0]
 800ed3e:	6a21      	ldr	r1, [r4, #32]
 800ed40:	602b      	str	r3, [r5, #0]
 800ed42:	d030      	beq.n	800eda6 <__sflush_r+0x92>
 800ed44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ed46:	89a3      	ldrh	r3, [r4, #12]
 800ed48:	0759      	lsls	r1, r3, #29
 800ed4a:	d505      	bpl.n	800ed58 <__sflush_r+0x44>
 800ed4c:	6863      	ldr	r3, [r4, #4]
 800ed4e:	1ad2      	subs	r2, r2, r3
 800ed50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ed52:	b10b      	cbz	r3, 800ed58 <__sflush_r+0x44>
 800ed54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ed56:	1ad2      	subs	r2, r2, r3
 800ed58:	2300      	movs	r3, #0
 800ed5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ed5c:	6a21      	ldr	r1, [r4, #32]
 800ed5e:	4628      	mov	r0, r5
 800ed60:	47b0      	blx	r6
 800ed62:	1c43      	adds	r3, r0, #1
 800ed64:	89a3      	ldrh	r3, [r4, #12]
 800ed66:	d106      	bne.n	800ed76 <__sflush_r+0x62>
 800ed68:	6829      	ldr	r1, [r5, #0]
 800ed6a:	291d      	cmp	r1, #29
 800ed6c:	d82b      	bhi.n	800edc6 <__sflush_r+0xb2>
 800ed6e:	4a2a      	ldr	r2, [pc, #168]	@ (800ee18 <__sflush_r+0x104>)
 800ed70:	40ca      	lsrs	r2, r1
 800ed72:	07d6      	lsls	r6, r2, #31
 800ed74:	d527      	bpl.n	800edc6 <__sflush_r+0xb2>
 800ed76:	2200      	movs	r2, #0
 800ed78:	6062      	str	r2, [r4, #4]
 800ed7a:	04d9      	lsls	r1, r3, #19
 800ed7c:	6922      	ldr	r2, [r4, #16]
 800ed7e:	6022      	str	r2, [r4, #0]
 800ed80:	d504      	bpl.n	800ed8c <__sflush_r+0x78>
 800ed82:	1c42      	adds	r2, r0, #1
 800ed84:	d101      	bne.n	800ed8a <__sflush_r+0x76>
 800ed86:	682b      	ldr	r3, [r5, #0]
 800ed88:	b903      	cbnz	r3, 800ed8c <__sflush_r+0x78>
 800ed8a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ed8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ed8e:	602f      	str	r7, [r5, #0]
 800ed90:	b1b9      	cbz	r1, 800edc2 <__sflush_r+0xae>
 800ed92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ed96:	4299      	cmp	r1, r3
 800ed98:	d002      	beq.n	800eda0 <__sflush_r+0x8c>
 800ed9a:	4628      	mov	r0, r5
 800ed9c:	f7ff fab4 	bl	800e308 <_free_r>
 800eda0:	2300      	movs	r3, #0
 800eda2:	6363      	str	r3, [r4, #52]	@ 0x34
 800eda4:	e00d      	b.n	800edc2 <__sflush_r+0xae>
 800eda6:	2301      	movs	r3, #1
 800eda8:	4628      	mov	r0, r5
 800edaa:	47b0      	blx	r6
 800edac:	4602      	mov	r2, r0
 800edae:	1c50      	adds	r0, r2, #1
 800edb0:	d1c9      	bne.n	800ed46 <__sflush_r+0x32>
 800edb2:	682b      	ldr	r3, [r5, #0]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d0c6      	beq.n	800ed46 <__sflush_r+0x32>
 800edb8:	2b1d      	cmp	r3, #29
 800edba:	d001      	beq.n	800edc0 <__sflush_r+0xac>
 800edbc:	2b16      	cmp	r3, #22
 800edbe:	d11e      	bne.n	800edfe <__sflush_r+0xea>
 800edc0:	602f      	str	r7, [r5, #0]
 800edc2:	2000      	movs	r0, #0
 800edc4:	e022      	b.n	800ee0c <__sflush_r+0xf8>
 800edc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800edca:	b21b      	sxth	r3, r3
 800edcc:	e01b      	b.n	800ee06 <__sflush_r+0xf2>
 800edce:	690f      	ldr	r7, [r1, #16]
 800edd0:	2f00      	cmp	r7, #0
 800edd2:	d0f6      	beq.n	800edc2 <__sflush_r+0xae>
 800edd4:	0793      	lsls	r3, r2, #30
 800edd6:	680e      	ldr	r6, [r1, #0]
 800edd8:	bf08      	it	eq
 800edda:	694b      	ldreq	r3, [r1, #20]
 800eddc:	600f      	str	r7, [r1, #0]
 800edde:	bf18      	it	ne
 800ede0:	2300      	movne	r3, #0
 800ede2:	eba6 0807 	sub.w	r8, r6, r7
 800ede6:	608b      	str	r3, [r1, #8]
 800ede8:	f1b8 0f00 	cmp.w	r8, #0
 800edec:	dde9      	ble.n	800edc2 <__sflush_r+0xae>
 800edee:	6a21      	ldr	r1, [r4, #32]
 800edf0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800edf2:	4643      	mov	r3, r8
 800edf4:	463a      	mov	r2, r7
 800edf6:	4628      	mov	r0, r5
 800edf8:	47b0      	blx	r6
 800edfa:	2800      	cmp	r0, #0
 800edfc:	dc08      	bgt.n	800ee10 <__sflush_r+0xfc>
 800edfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee06:	81a3      	strh	r3, [r4, #12]
 800ee08:	f04f 30ff 	mov.w	r0, #4294967295
 800ee0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee10:	4407      	add	r7, r0
 800ee12:	eba8 0800 	sub.w	r8, r8, r0
 800ee16:	e7e7      	b.n	800ede8 <__sflush_r+0xd4>
 800ee18:	20400001 	.word	0x20400001

0800ee1c <_fflush_r>:
 800ee1c:	b538      	push	{r3, r4, r5, lr}
 800ee1e:	690b      	ldr	r3, [r1, #16]
 800ee20:	4605      	mov	r5, r0
 800ee22:	460c      	mov	r4, r1
 800ee24:	b913      	cbnz	r3, 800ee2c <_fflush_r+0x10>
 800ee26:	2500      	movs	r5, #0
 800ee28:	4628      	mov	r0, r5
 800ee2a:	bd38      	pop	{r3, r4, r5, pc}
 800ee2c:	b118      	cbz	r0, 800ee36 <_fflush_r+0x1a>
 800ee2e:	6a03      	ldr	r3, [r0, #32]
 800ee30:	b90b      	cbnz	r3, 800ee36 <_fflush_r+0x1a>
 800ee32:	f7fe fadf 	bl	800d3f4 <__sinit>
 800ee36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d0f3      	beq.n	800ee26 <_fflush_r+0xa>
 800ee3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ee40:	07d0      	lsls	r0, r2, #31
 800ee42:	d404      	bmi.n	800ee4e <_fflush_r+0x32>
 800ee44:	0599      	lsls	r1, r3, #22
 800ee46:	d402      	bmi.n	800ee4e <_fflush_r+0x32>
 800ee48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee4a:	f7fe fbec 	bl	800d626 <__retarget_lock_acquire_recursive>
 800ee4e:	4628      	mov	r0, r5
 800ee50:	4621      	mov	r1, r4
 800ee52:	f7ff ff5f 	bl	800ed14 <__sflush_r>
 800ee56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee58:	07da      	lsls	r2, r3, #31
 800ee5a:	4605      	mov	r5, r0
 800ee5c:	d4e4      	bmi.n	800ee28 <_fflush_r+0xc>
 800ee5e:	89a3      	ldrh	r3, [r4, #12]
 800ee60:	059b      	lsls	r3, r3, #22
 800ee62:	d4e1      	bmi.n	800ee28 <_fflush_r+0xc>
 800ee64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee66:	f7fe fbdf 	bl	800d628 <__retarget_lock_release_recursive>
 800ee6a:	e7dd      	b.n	800ee28 <_fflush_r+0xc>

0800ee6c <__swbuf_r>:
 800ee6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee6e:	460e      	mov	r6, r1
 800ee70:	4614      	mov	r4, r2
 800ee72:	4605      	mov	r5, r0
 800ee74:	b118      	cbz	r0, 800ee7e <__swbuf_r+0x12>
 800ee76:	6a03      	ldr	r3, [r0, #32]
 800ee78:	b90b      	cbnz	r3, 800ee7e <__swbuf_r+0x12>
 800ee7a:	f7fe fabb 	bl	800d3f4 <__sinit>
 800ee7e:	69a3      	ldr	r3, [r4, #24]
 800ee80:	60a3      	str	r3, [r4, #8]
 800ee82:	89a3      	ldrh	r3, [r4, #12]
 800ee84:	071a      	lsls	r2, r3, #28
 800ee86:	d501      	bpl.n	800ee8c <__swbuf_r+0x20>
 800ee88:	6923      	ldr	r3, [r4, #16]
 800ee8a:	b943      	cbnz	r3, 800ee9e <__swbuf_r+0x32>
 800ee8c:	4621      	mov	r1, r4
 800ee8e:	4628      	mov	r0, r5
 800ee90:	f000 f82a 	bl	800eee8 <__swsetup_r>
 800ee94:	b118      	cbz	r0, 800ee9e <__swbuf_r+0x32>
 800ee96:	f04f 37ff 	mov.w	r7, #4294967295
 800ee9a:	4638      	mov	r0, r7
 800ee9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee9e:	6823      	ldr	r3, [r4, #0]
 800eea0:	6922      	ldr	r2, [r4, #16]
 800eea2:	1a98      	subs	r0, r3, r2
 800eea4:	6963      	ldr	r3, [r4, #20]
 800eea6:	b2f6      	uxtb	r6, r6
 800eea8:	4283      	cmp	r3, r0
 800eeaa:	4637      	mov	r7, r6
 800eeac:	dc05      	bgt.n	800eeba <__swbuf_r+0x4e>
 800eeae:	4621      	mov	r1, r4
 800eeb0:	4628      	mov	r0, r5
 800eeb2:	f7ff ffb3 	bl	800ee1c <_fflush_r>
 800eeb6:	2800      	cmp	r0, #0
 800eeb8:	d1ed      	bne.n	800ee96 <__swbuf_r+0x2a>
 800eeba:	68a3      	ldr	r3, [r4, #8]
 800eebc:	3b01      	subs	r3, #1
 800eebe:	60a3      	str	r3, [r4, #8]
 800eec0:	6823      	ldr	r3, [r4, #0]
 800eec2:	1c5a      	adds	r2, r3, #1
 800eec4:	6022      	str	r2, [r4, #0]
 800eec6:	701e      	strb	r6, [r3, #0]
 800eec8:	6962      	ldr	r2, [r4, #20]
 800eeca:	1c43      	adds	r3, r0, #1
 800eecc:	429a      	cmp	r2, r3
 800eece:	d004      	beq.n	800eeda <__swbuf_r+0x6e>
 800eed0:	89a3      	ldrh	r3, [r4, #12]
 800eed2:	07db      	lsls	r3, r3, #31
 800eed4:	d5e1      	bpl.n	800ee9a <__swbuf_r+0x2e>
 800eed6:	2e0a      	cmp	r6, #10
 800eed8:	d1df      	bne.n	800ee9a <__swbuf_r+0x2e>
 800eeda:	4621      	mov	r1, r4
 800eedc:	4628      	mov	r0, r5
 800eede:	f7ff ff9d 	bl	800ee1c <_fflush_r>
 800eee2:	2800      	cmp	r0, #0
 800eee4:	d0d9      	beq.n	800ee9a <__swbuf_r+0x2e>
 800eee6:	e7d6      	b.n	800ee96 <__swbuf_r+0x2a>

0800eee8 <__swsetup_r>:
 800eee8:	b538      	push	{r3, r4, r5, lr}
 800eeea:	4b29      	ldr	r3, [pc, #164]	@ (800ef90 <__swsetup_r+0xa8>)
 800eeec:	4605      	mov	r5, r0
 800eeee:	6818      	ldr	r0, [r3, #0]
 800eef0:	460c      	mov	r4, r1
 800eef2:	b118      	cbz	r0, 800eefc <__swsetup_r+0x14>
 800eef4:	6a03      	ldr	r3, [r0, #32]
 800eef6:	b90b      	cbnz	r3, 800eefc <__swsetup_r+0x14>
 800eef8:	f7fe fa7c 	bl	800d3f4 <__sinit>
 800eefc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef00:	0719      	lsls	r1, r3, #28
 800ef02:	d422      	bmi.n	800ef4a <__swsetup_r+0x62>
 800ef04:	06da      	lsls	r2, r3, #27
 800ef06:	d407      	bmi.n	800ef18 <__swsetup_r+0x30>
 800ef08:	2209      	movs	r2, #9
 800ef0a:	602a      	str	r2, [r5, #0]
 800ef0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef10:	81a3      	strh	r3, [r4, #12]
 800ef12:	f04f 30ff 	mov.w	r0, #4294967295
 800ef16:	e033      	b.n	800ef80 <__swsetup_r+0x98>
 800ef18:	0758      	lsls	r0, r3, #29
 800ef1a:	d512      	bpl.n	800ef42 <__swsetup_r+0x5a>
 800ef1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef1e:	b141      	cbz	r1, 800ef32 <__swsetup_r+0x4a>
 800ef20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef24:	4299      	cmp	r1, r3
 800ef26:	d002      	beq.n	800ef2e <__swsetup_r+0x46>
 800ef28:	4628      	mov	r0, r5
 800ef2a:	f7ff f9ed 	bl	800e308 <_free_r>
 800ef2e:	2300      	movs	r3, #0
 800ef30:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef32:	89a3      	ldrh	r3, [r4, #12]
 800ef34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ef38:	81a3      	strh	r3, [r4, #12]
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	6063      	str	r3, [r4, #4]
 800ef3e:	6923      	ldr	r3, [r4, #16]
 800ef40:	6023      	str	r3, [r4, #0]
 800ef42:	89a3      	ldrh	r3, [r4, #12]
 800ef44:	f043 0308 	orr.w	r3, r3, #8
 800ef48:	81a3      	strh	r3, [r4, #12]
 800ef4a:	6923      	ldr	r3, [r4, #16]
 800ef4c:	b94b      	cbnz	r3, 800ef62 <__swsetup_r+0x7a>
 800ef4e:	89a3      	ldrh	r3, [r4, #12]
 800ef50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ef54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef58:	d003      	beq.n	800ef62 <__swsetup_r+0x7a>
 800ef5a:	4621      	mov	r1, r4
 800ef5c:	4628      	mov	r0, r5
 800ef5e:	f000 f8b6 	bl	800f0ce <__smakebuf_r>
 800ef62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef66:	f013 0201 	ands.w	r2, r3, #1
 800ef6a:	d00a      	beq.n	800ef82 <__swsetup_r+0x9a>
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	60a2      	str	r2, [r4, #8]
 800ef70:	6962      	ldr	r2, [r4, #20]
 800ef72:	4252      	negs	r2, r2
 800ef74:	61a2      	str	r2, [r4, #24]
 800ef76:	6922      	ldr	r2, [r4, #16]
 800ef78:	b942      	cbnz	r2, 800ef8c <__swsetup_r+0xa4>
 800ef7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ef7e:	d1c5      	bne.n	800ef0c <__swsetup_r+0x24>
 800ef80:	bd38      	pop	{r3, r4, r5, pc}
 800ef82:	0799      	lsls	r1, r3, #30
 800ef84:	bf58      	it	pl
 800ef86:	6962      	ldrpl	r2, [r4, #20]
 800ef88:	60a2      	str	r2, [r4, #8]
 800ef8a:	e7f4      	b.n	800ef76 <__swsetup_r+0x8e>
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	e7f7      	b.n	800ef80 <__swsetup_r+0x98>
 800ef90:	20000108 	.word	0x20000108

0800ef94 <_raise_r>:
 800ef94:	291f      	cmp	r1, #31
 800ef96:	b538      	push	{r3, r4, r5, lr}
 800ef98:	4605      	mov	r5, r0
 800ef9a:	460c      	mov	r4, r1
 800ef9c:	d904      	bls.n	800efa8 <_raise_r+0x14>
 800ef9e:	2316      	movs	r3, #22
 800efa0:	6003      	str	r3, [r0, #0]
 800efa2:	f04f 30ff 	mov.w	r0, #4294967295
 800efa6:	bd38      	pop	{r3, r4, r5, pc}
 800efa8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800efaa:	b112      	cbz	r2, 800efb2 <_raise_r+0x1e>
 800efac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800efb0:	b94b      	cbnz	r3, 800efc6 <_raise_r+0x32>
 800efb2:	4628      	mov	r0, r5
 800efb4:	f000 f830 	bl	800f018 <_getpid_r>
 800efb8:	4622      	mov	r2, r4
 800efba:	4601      	mov	r1, r0
 800efbc:	4628      	mov	r0, r5
 800efbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efc2:	f000 b817 	b.w	800eff4 <_kill_r>
 800efc6:	2b01      	cmp	r3, #1
 800efc8:	d00a      	beq.n	800efe0 <_raise_r+0x4c>
 800efca:	1c59      	adds	r1, r3, #1
 800efcc:	d103      	bne.n	800efd6 <_raise_r+0x42>
 800efce:	2316      	movs	r3, #22
 800efd0:	6003      	str	r3, [r0, #0]
 800efd2:	2001      	movs	r0, #1
 800efd4:	e7e7      	b.n	800efa6 <_raise_r+0x12>
 800efd6:	2100      	movs	r1, #0
 800efd8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800efdc:	4620      	mov	r0, r4
 800efde:	4798      	blx	r3
 800efe0:	2000      	movs	r0, #0
 800efe2:	e7e0      	b.n	800efa6 <_raise_r+0x12>

0800efe4 <raise>:
 800efe4:	4b02      	ldr	r3, [pc, #8]	@ (800eff0 <raise+0xc>)
 800efe6:	4601      	mov	r1, r0
 800efe8:	6818      	ldr	r0, [r3, #0]
 800efea:	f7ff bfd3 	b.w	800ef94 <_raise_r>
 800efee:	bf00      	nop
 800eff0:	20000108 	.word	0x20000108

0800eff4 <_kill_r>:
 800eff4:	b538      	push	{r3, r4, r5, lr}
 800eff6:	4d07      	ldr	r5, [pc, #28]	@ (800f014 <_kill_r+0x20>)
 800eff8:	2300      	movs	r3, #0
 800effa:	4604      	mov	r4, r0
 800effc:	4608      	mov	r0, r1
 800effe:	4611      	mov	r1, r2
 800f000:	602b      	str	r3, [r5, #0]
 800f002:	f7f5 fd8d 	bl	8004b20 <_kill>
 800f006:	1c43      	adds	r3, r0, #1
 800f008:	d102      	bne.n	800f010 <_kill_r+0x1c>
 800f00a:	682b      	ldr	r3, [r5, #0]
 800f00c:	b103      	cbz	r3, 800f010 <_kill_r+0x1c>
 800f00e:	6023      	str	r3, [r4, #0]
 800f010:	bd38      	pop	{r3, r4, r5, pc}
 800f012:	bf00      	nop
 800f014:	2000221c 	.word	0x2000221c

0800f018 <_getpid_r>:
 800f018:	f7f5 bd7a 	b.w	8004b10 <_getpid>

0800f01c <_calloc_r>:
 800f01c:	b570      	push	{r4, r5, r6, lr}
 800f01e:	fba1 5402 	umull	r5, r4, r1, r2
 800f022:	b934      	cbnz	r4, 800f032 <_calloc_r+0x16>
 800f024:	4629      	mov	r1, r5
 800f026:	f7fd fc77 	bl	800c918 <_malloc_r>
 800f02a:	4606      	mov	r6, r0
 800f02c:	b928      	cbnz	r0, 800f03a <_calloc_r+0x1e>
 800f02e:	4630      	mov	r0, r6
 800f030:	bd70      	pop	{r4, r5, r6, pc}
 800f032:	220c      	movs	r2, #12
 800f034:	6002      	str	r2, [r0, #0]
 800f036:	2600      	movs	r6, #0
 800f038:	e7f9      	b.n	800f02e <_calloc_r+0x12>
 800f03a:	462a      	mov	r2, r5
 800f03c:	4621      	mov	r1, r4
 800f03e:	f7fe fa64 	bl	800d50a <memset>
 800f042:	e7f4      	b.n	800f02e <_calloc_r+0x12>

0800f044 <__ascii_mbtowc>:
 800f044:	b082      	sub	sp, #8
 800f046:	b901      	cbnz	r1, 800f04a <__ascii_mbtowc+0x6>
 800f048:	a901      	add	r1, sp, #4
 800f04a:	b142      	cbz	r2, 800f05e <__ascii_mbtowc+0x1a>
 800f04c:	b14b      	cbz	r3, 800f062 <__ascii_mbtowc+0x1e>
 800f04e:	7813      	ldrb	r3, [r2, #0]
 800f050:	600b      	str	r3, [r1, #0]
 800f052:	7812      	ldrb	r2, [r2, #0]
 800f054:	1e10      	subs	r0, r2, #0
 800f056:	bf18      	it	ne
 800f058:	2001      	movne	r0, #1
 800f05a:	b002      	add	sp, #8
 800f05c:	4770      	bx	lr
 800f05e:	4610      	mov	r0, r2
 800f060:	e7fb      	b.n	800f05a <__ascii_mbtowc+0x16>
 800f062:	f06f 0001 	mvn.w	r0, #1
 800f066:	e7f8      	b.n	800f05a <__ascii_mbtowc+0x16>

0800f068 <__ascii_wctomb>:
 800f068:	4603      	mov	r3, r0
 800f06a:	4608      	mov	r0, r1
 800f06c:	b141      	cbz	r1, 800f080 <__ascii_wctomb+0x18>
 800f06e:	2aff      	cmp	r2, #255	@ 0xff
 800f070:	d904      	bls.n	800f07c <__ascii_wctomb+0x14>
 800f072:	228a      	movs	r2, #138	@ 0x8a
 800f074:	601a      	str	r2, [r3, #0]
 800f076:	f04f 30ff 	mov.w	r0, #4294967295
 800f07a:	4770      	bx	lr
 800f07c:	700a      	strb	r2, [r1, #0]
 800f07e:	2001      	movs	r0, #1
 800f080:	4770      	bx	lr

0800f082 <__swhatbuf_r>:
 800f082:	b570      	push	{r4, r5, r6, lr}
 800f084:	460c      	mov	r4, r1
 800f086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f08a:	2900      	cmp	r1, #0
 800f08c:	b096      	sub	sp, #88	@ 0x58
 800f08e:	4615      	mov	r5, r2
 800f090:	461e      	mov	r6, r3
 800f092:	da0d      	bge.n	800f0b0 <__swhatbuf_r+0x2e>
 800f094:	89a3      	ldrh	r3, [r4, #12]
 800f096:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f09a:	f04f 0100 	mov.w	r1, #0
 800f09e:	bf14      	ite	ne
 800f0a0:	2340      	movne	r3, #64	@ 0x40
 800f0a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f0a6:	2000      	movs	r0, #0
 800f0a8:	6031      	str	r1, [r6, #0]
 800f0aa:	602b      	str	r3, [r5, #0]
 800f0ac:	b016      	add	sp, #88	@ 0x58
 800f0ae:	bd70      	pop	{r4, r5, r6, pc}
 800f0b0:	466a      	mov	r2, sp
 800f0b2:	f000 f849 	bl	800f148 <_fstat_r>
 800f0b6:	2800      	cmp	r0, #0
 800f0b8:	dbec      	blt.n	800f094 <__swhatbuf_r+0x12>
 800f0ba:	9901      	ldr	r1, [sp, #4]
 800f0bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f0c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f0c4:	4259      	negs	r1, r3
 800f0c6:	4159      	adcs	r1, r3
 800f0c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f0cc:	e7eb      	b.n	800f0a6 <__swhatbuf_r+0x24>

0800f0ce <__smakebuf_r>:
 800f0ce:	898b      	ldrh	r3, [r1, #12]
 800f0d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0d2:	079d      	lsls	r5, r3, #30
 800f0d4:	4606      	mov	r6, r0
 800f0d6:	460c      	mov	r4, r1
 800f0d8:	d507      	bpl.n	800f0ea <__smakebuf_r+0x1c>
 800f0da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f0de:	6023      	str	r3, [r4, #0]
 800f0e0:	6123      	str	r3, [r4, #16]
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	6163      	str	r3, [r4, #20]
 800f0e6:	b003      	add	sp, #12
 800f0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0ea:	ab01      	add	r3, sp, #4
 800f0ec:	466a      	mov	r2, sp
 800f0ee:	f7ff ffc8 	bl	800f082 <__swhatbuf_r>
 800f0f2:	9f00      	ldr	r7, [sp, #0]
 800f0f4:	4605      	mov	r5, r0
 800f0f6:	4639      	mov	r1, r7
 800f0f8:	4630      	mov	r0, r6
 800f0fa:	f7fd fc0d 	bl	800c918 <_malloc_r>
 800f0fe:	b948      	cbnz	r0, 800f114 <__smakebuf_r+0x46>
 800f100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f104:	059a      	lsls	r2, r3, #22
 800f106:	d4ee      	bmi.n	800f0e6 <__smakebuf_r+0x18>
 800f108:	f023 0303 	bic.w	r3, r3, #3
 800f10c:	f043 0302 	orr.w	r3, r3, #2
 800f110:	81a3      	strh	r3, [r4, #12]
 800f112:	e7e2      	b.n	800f0da <__smakebuf_r+0xc>
 800f114:	89a3      	ldrh	r3, [r4, #12]
 800f116:	6020      	str	r0, [r4, #0]
 800f118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f11c:	81a3      	strh	r3, [r4, #12]
 800f11e:	9b01      	ldr	r3, [sp, #4]
 800f120:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f124:	b15b      	cbz	r3, 800f13e <__smakebuf_r+0x70>
 800f126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f12a:	4630      	mov	r0, r6
 800f12c:	f000 f81e 	bl	800f16c <_isatty_r>
 800f130:	b128      	cbz	r0, 800f13e <__smakebuf_r+0x70>
 800f132:	89a3      	ldrh	r3, [r4, #12]
 800f134:	f023 0303 	bic.w	r3, r3, #3
 800f138:	f043 0301 	orr.w	r3, r3, #1
 800f13c:	81a3      	strh	r3, [r4, #12]
 800f13e:	89a3      	ldrh	r3, [r4, #12]
 800f140:	431d      	orrs	r5, r3
 800f142:	81a5      	strh	r5, [r4, #12]
 800f144:	e7cf      	b.n	800f0e6 <__smakebuf_r+0x18>
	...

0800f148 <_fstat_r>:
 800f148:	b538      	push	{r3, r4, r5, lr}
 800f14a:	4d07      	ldr	r5, [pc, #28]	@ (800f168 <_fstat_r+0x20>)
 800f14c:	2300      	movs	r3, #0
 800f14e:	4604      	mov	r4, r0
 800f150:	4608      	mov	r0, r1
 800f152:	4611      	mov	r1, r2
 800f154:	602b      	str	r3, [r5, #0]
 800f156:	f7f5 fd27 	bl	8004ba8 <_fstat>
 800f15a:	1c43      	adds	r3, r0, #1
 800f15c:	d102      	bne.n	800f164 <_fstat_r+0x1c>
 800f15e:	682b      	ldr	r3, [r5, #0]
 800f160:	b103      	cbz	r3, 800f164 <_fstat_r+0x1c>
 800f162:	6023      	str	r3, [r4, #0]
 800f164:	bd38      	pop	{r3, r4, r5, pc}
 800f166:	bf00      	nop
 800f168:	2000221c 	.word	0x2000221c

0800f16c <_isatty_r>:
 800f16c:	b538      	push	{r3, r4, r5, lr}
 800f16e:	4d06      	ldr	r5, [pc, #24]	@ (800f188 <_isatty_r+0x1c>)
 800f170:	2300      	movs	r3, #0
 800f172:	4604      	mov	r4, r0
 800f174:	4608      	mov	r0, r1
 800f176:	602b      	str	r3, [r5, #0]
 800f178:	f7f5 fd26 	bl	8004bc8 <_isatty>
 800f17c:	1c43      	adds	r3, r0, #1
 800f17e:	d102      	bne.n	800f186 <_isatty_r+0x1a>
 800f180:	682b      	ldr	r3, [r5, #0]
 800f182:	b103      	cbz	r3, 800f186 <_isatty_r+0x1a>
 800f184:	6023      	str	r3, [r4, #0]
 800f186:	bd38      	pop	{r3, r4, r5, pc}
 800f188:	2000221c 	.word	0x2000221c

0800f18c <_init>:
 800f18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f18e:	bf00      	nop
 800f190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f192:	bc08      	pop	{r3}
 800f194:	469e      	mov	lr, r3
 800f196:	4770      	bx	lr

0800f198 <_fini>:
 800f198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f19a:	bf00      	nop
 800f19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f19e:	bc08      	pop	{r3}
 800f1a0:	469e      	mov	lr, r3
 800f1a2:	4770      	bx	lr
