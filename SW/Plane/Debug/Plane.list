
Plane.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e7e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  0800e978  0800e978  0000f978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800edac  0800edac  000102c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800edac  0800edac  0000fdac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edb4  0800edb4  000102c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800edb4  0800edb4  0000fdb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800edb8  0800edb8  0000fdb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800edbc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000102c4  2**0
                  CONTENTS
 10 .bss          00002000  200002c4  200002c4  000102c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200022c4  200022c4  000102c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000102c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b380  00000000  00000000  000102f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005091  00000000  00000000  0002b674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019d0  00000000  00000000  00030708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000135e  00000000  00000000  000320d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b31a  00000000  00000000  00033436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000214e6  00000000  00000000  0005e750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb8ed  00000000  00000000  0007fc36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016b523  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000079f0  00000000  00000000  0016b568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00172f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e960 	.word	0x0800e960

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800e960 	.word	0x0800e960

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a1a      	ldr	r2, [r3, #32]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	431a      	orrs	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	621a      	str	r2, [r3, #32]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a1a      	ldr	r2, [r3, #32]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	401a      	ands	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	621a      	str	r2, [r3, #32]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <BuzzerPlayNote>:

#include <FC_Basic/Buzzer.h>
#include "main.h"


void BuzzerPlayNote(Note note){
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	TIM4->ARR = APB1_CLOCKS/TIM4->PSC/tones[note];
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <BuzzerPlayNote+0x50>)
 8000f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f6a:	4a11      	ldr	r2, [pc, #68]	@ (8000fb0 <BuzzerPlayNote+0x54>)
 8000f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fac7 	bl	8000504 <__aeabi_ui2d>
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb4 <BuzzerPlayNote+0x58>)
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f82:	f7ff fc63 	bl	800084c <__aeabi_ddiv>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4c08      	ldr	r4, [pc, #32]	@ (8000fac <BuzzerPlayNote+0x50>)
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f7ff fe0a 	bl	8000ba8 <__aeabi_d2uiz>
 8000f94:	4603      	mov	r3, r0
 8000f96:	62e3      	str	r3, [r4, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 8000f98:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <BuzzerPlayNote+0x50>)
 8000f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f9c:	4a03      	ldr	r2, [pc, #12]	@ (8000fac <BuzzerPlayNote+0x50>)
 8000f9e:	085b      	lsrs	r3, r3, #1
 8000fa0:	63d3      	str	r3, [r2, #60]	@ 0x3c
	return;
 8000fa2:	bf00      	nop
}
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40000800 	.word	0x40000800
 8000fb0:	0501bd00 	.word	0x0501bd00
 8000fb4:	0800e9c0 	.word	0x0800e9c0

08000fb8 <BuzzerPlayInit>:

void BuzzerPlayInit(void){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8000fbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fc0:	4813      	ldr	r0, [pc, #76]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fc2:	f7ff ffa7 	bl	8000f14 <LL_TIM_CC_EnableChannel>
	TIM4->ARR = 21;
 8000fc6:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fc8:	2215      	movs	r2, #21
 8000fca:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CCR3 = TIM4->ARR/2;
 8000fcc:	4b10      	ldr	r3, [pc, #64]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd0:	4a0f      	ldr	r2, [pc, #60]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fd2:	085b      	lsrs	r3, r3, #1
 8000fd4:	63d3      	str	r3, [r2, #60]	@ 0x3c

	TIM4->PSC = 2000;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fd8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000fdc:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8000fde:	2064      	movs	r0, #100	@ 0x64
 8000fe0:	f002 feba 	bl	8003d58 <HAL_Delay>
	TIM4->PSC = 1500;
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000fe6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000fea:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8000fec:	2064      	movs	r0, #100	@ 0x64
 8000fee:	f002 feb3 	bl	8003d58 <HAL_Delay>
	TIM4->PSC = 1000;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <BuzzerPlayInit+0x58>)
 8000ff4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ff8:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8000ffa:	2064      	movs	r0, #100	@ 0x64
 8000ffc:	f002 feac 	bl	8003d58 <HAL_Delay>

	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8001000:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001004:	4802      	ldr	r0, [pc, #8]	@ (8001010 <BuzzerPlayInit+0x58>)
 8001006:	f7ff ff96 	bl	8000f36 <LL_TIM_CC_DisableChannel>
	return;
 800100a:	bf00      	nop
}
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40000800 	.word	0x40000800

08001014 <BuzzerPlayOneCycle>:

void BuzzerPlayOneCycle(void){
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 800101a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800101e:	4810      	ldr	r0, [pc, #64]	@ (8001060 <BuzzerPlayOneCycle+0x4c>)
 8001020:	f7ff ff78 	bl	8000f14 <LL_TIM_CC_EnableChannel>
	TIM4->PSC = 4;
 8001024:	4b0e      	ldr	r3, [pc, #56]	@ (8001060 <BuzzerPlayOneCycle+0x4c>)
 8001026:	2204      	movs	r2, #4
 8001028:	629a      	str	r2, [r3, #40]	@ 0x28

	for (int i=0; i<8; i++){
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	e00a      	b.n	8001046 <BuzzerPlayOneCycle+0x32>
		BuzzerPlayNote(i);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff91 	bl	8000f5c <BuzzerPlayNote>
		HAL_Delay(150);
 800103a:	2096      	movs	r0, #150	@ 0x96
 800103c:	f002 fe8c 	bl	8003d58 <HAL_Delay>
	for (int i=0; i<8; i++){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3301      	adds	r3, #1
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b07      	cmp	r3, #7
 800104a:	ddf1      	ble.n	8001030 <BuzzerPlayOneCycle+0x1c>
	}
	LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 800104c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001050:	4803      	ldr	r0, [pc, #12]	@ (8001060 <BuzzerPlayOneCycle+0x4c>)
 8001052:	f7ff ff70 	bl	8000f36 <LL_TIM_CC_DisableChannel>
	return;
 8001056:	bf00      	nop
}
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40000800 	.word	0x40000800

08001064 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	601a      	str	r2, [r3, #0]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f023 0210 	bic.w	r2, r3, #16
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	431a      	orrs	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	605a      	str	r2, [r3, #4]
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d101      	bne.n	80010c2 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d101      	bne.n	80010e8 <LL_SPI_IsActiveFlag_TXE+0x18>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <LL_SPI_IsActiveFlag_TXE+0x1a>
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	330c      	adds	r3, #12
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b2db      	uxtb	r3, r3
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001112:	b480      	push	{r7}
 8001114:	b085      	sub	sp, #20
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	460b      	mov	r3, r1
 800111c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	330c      	adds	r3, #12
 8001122:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	78fa      	ldrb	r2, [r7, #3]
 8001128:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	619a      	str	r2, [r3, #24]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	041a      	lsls	r2, r3, #16
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	619a      	str	r2, [r3, #24]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001178:	4b08      	ldr	r3, [pc, #32]	@ (800119c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800117a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800117c:	4907      	ldr	r1, [pc, #28]	@ (800119c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4313      	orrs	r3, r2
 8001182:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001186:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4013      	ands	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800118e:	68fb      	ldr	r3, [r7, #12]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	40023800 	.word	0x40023800

080011a0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80011a8:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80011aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011ac:	4907      	ldr	r1, [pc, #28]	@ (80011cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80011b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4013      	ands	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	40023800 	.word	0x40023800

080011d0 <ICM42688_GPIO_SPI_Initialization>:

int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM42688_GPIO_SPI_Initialization(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b090      	sub	sp, #64	@ 0x40
 80011d4:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80011d6:	f107 0318 	add.w	r3, r7, #24
 80011da:	2228      	movs	r2, #40	@ 0x28
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f00b fd7f 	bl	800cce2 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	463b      	mov	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]
 80011f2:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80011f4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80011f8:	f7ff ffd2 	bl	80011a0 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80011fc:	2001      	movs	r0, #1
 80011fe:	f7ff ffb7 	bl	8001170 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8001202:	2010      	movs	r0, #16
 8001204:	f7ff ffb4 	bl	8001170 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001208:	23e0      	movs	r3, #224	@ 0xe0
 800120a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800120c:	2302      	movs	r3, #2
 800120e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800121c:	2305      	movs	r3, #5
 800121e:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	463b      	mov	r3, r7
 8001222:	4619      	mov	r1, r3
 8001224:	4820      	ldr	r0, [pc, #128]	@ (80012a8 <ICM42688_GPIO_SPI_Initialization+0xd8>)
 8001226:	f005 fee0 	bl	8006fea <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800122a:	2300      	movs	r3, #0
 800122c:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800122e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001232:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001238:	2302      	movs	r3, #2
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800123c:	2301      	movs	r3, #1
 800123e:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001240:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001244:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-42688 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8001246:	2310      	movs	r3, #16
 8001248:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800124a:	2300      	movs	r3, #0
 800124c:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001252:	230a      	movs	r3, #10
 8001254:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM42688_SPI_CHANNEL, &SPI_InitStruct);
 8001256:	f107 0318 	add.w	r3, r7, #24
 800125a:	4619      	mov	r1, r3
 800125c:	4813      	ldr	r0, [pc, #76]	@ (80012ac <ICM42688_GPIO_SPI_Initialization+0xdc>)
 800125e:	f006 f89e 	bl	800739e <LL_SPI_Init>
	LL_SPI_SetStandard(ICM42688_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001262:	2100      	movs	r1, #0
 8001264:	4811      	ldr	r0, [pc, #68]	@ (80012ac <ICM42688_GPIO_SPI_Initialization+0xdc>)
 8001266:	f7ff ff0d 	bl	8001084 <LL_SPI_SetStandard>
	/**ICM42688 GPIO Control Configuration
	 * PC4  ------> ICM42688_SPI_CS_PIN (output)
	 * PC5  ------> ICM42688_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM42688_SPI_CS_PORT, ICM42688_SPI_CS_PIN);
 800126a:	2120      	movs	r1, #32
 800126c:	4810      	ldr	r0, [pc, #64]	@ (80012b0 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 800126e:	f7ff ff70 	bl	8001152 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM42688_SPI_CS_PIN;
 8001272:	2320      	movs	r3, #32
 8001274:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001276:	2301      	movs	r3, #1
 8001278:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM42688_SPI_CS_PORT, &GPIO_InitStruct);
 8001286:	463b      	mov	r3, r7
 8001288:	4619      	mov	r1, r3
 800128a:	4809      	ldr	r0, [pc, #36]	@ (80012b0 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 800128c:	f005 fead 	bl	8006fea <LL_GPIO_Init>
//	GPIO_InitStruct.Pin = ICM42688_INT_PIN;
//	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	LL_GPIO_Init(ICM42688_INT_PORT, &GPIO_InitStruct);

	LL_SPI_Enable(ICM42688_SPI_CHANNEL);
 8001290:	4806      	ldr	r0, [pc, #24]	@ (80012ac <ICM42688_GPIO_SPI_Initialization+0xdc>)
 8001292:	f7ff fee7 	bl	8001064 <LL_SPI_Enable>

	CHIP_DESELECT(ICM42688);
 8001296:	2120      	movs	r1, #32
 8001298:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <ICM42688_GPIO_SPI_Initialization+0xe0>)
 800129a:	f7ff ff4c 	bl	8001136 <LL_GPIO_SetOutputPin>
}
 800129e:	bf00      	nop
 80012a0:	3740      	adds	r7, #64	@ 0x40
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40020000 	.word	0x40020000
 80012ac:	40013000 	.word	0x40013000
 80012b0:	40021000 	.word	0x40021000

080012b4 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM42688_SPI_CHANNEL)==RESET);
 80012be:	bf00      	nop
 80012c0:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <SPI1_SendByte+0x40>)
 80012c2:	f7ff ff05 	bl	80010d0 <LL_SPI_IsActiveFlag_TXE>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0f9      	beq.n	80012c0 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM42688_SPI_CHANNEL, data);
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	4619      	mov	r1, r3
 80012d0:	4808      	ldr	r0, [pc, #32]	@ (80012f4 <SPI1_SendByte+0x40>)
 80012d2:	f7ff ff1e 	bl	8001112 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM42688_SPI_CHANNEL)==RESET);
 80012d6:	bf00      	nop
 80012d8:	4806      	ldr	r0, [pc, #24]	@ (80012f4 <SPI1_SendByte+0x40>)
 80012da:	f7ff fee6 	bl	80010aa <LL_SPI_IsActiveFlag_RXNE>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f9      	beq.n	80012d8 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM42688_SPI_CHANNEL);
 80012e4:	4803      	ldr	r0, [pc, #12]	@ (80012f4 <SPI1_SendByte+0x40>)
 80012e6:	f7ff ff06 	bl	80010f6 <LL_SPI_ReceiveData8>
 80012ea:	4603      	mov	r3, r0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40013000 	.word	0x40013000

080012f8 <ICM42688_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM42688_Readbyte(uint8_t reg_addr)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM42688);
 8001302:	2120      	movs	r1, #32
 8001304:	480b      	ldr	r0, [pc, #44]	@ (8001334 <ICM42688_Readbyte+0x3c>)
 8001306:	f7ff ff24 	bl	8001152 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001310:	b2db      	uxtb	r3, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ffce 	bl	80012b4 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001318:	2000      	movs	r0, #0
 800131a:	f7ff ffcb 	bl	80012b4 <SPI1_SendByte>
 800131e:	4603      	mov	r3, r0
 8001320:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM42688);
 8001322:	2120      	movs	r1, #32
 8001324:	4803      	ldr	r0, [pc, #12]	@ (8001334 <ICM42688_Readbyte+0x3c>)
 8001326:	f7ff ff06 	bl	8001136 <LL_GPIO_SetOutputPin>
	
	return val;
 800132a:	7bfb      	ldrb	r3, [r7, #15]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40021000 	.word	0x40021000

08001338 <ICM42688_Readbytes>:

void ICM42688_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	603a      	str	r2, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	460b      	mov	r3, r1
 8001346:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM42688);
 800134c:	2120      	movs	r1, #32
 800134e:	4810      	ldr	r0, [pc, #64]	@ (8001390 <ICM42688_Readbytes+0x58>)
 8001350:	f7ff feff 	bl	8001152 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800135a:	b2db      	uxtb	r3, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ffa9 	bl	80012b4 <SPI1_SendByte>
	while(i < len)
 8001362:	e009      	b.n	8001378 <ICM42688_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	60fa      	str	r2, [r7, #12]
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	18d4      	adds	r4, r2, r3
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff ffa0 	bl	80012b4 <SPI1_SendByte>
 8001374:	4603      	mov	r3, r0
 8001376:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8001378:	79bb      	ldrb	r3, [r7, #6]
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	429a      	cmp	r2, r3
 800137e:	d3f1      	bcc.n	8001364 <ICM42688_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM42688);
 8001380:	2120      	movs	r1, #32
 8001382:	4803      	ldr	r0, [pc, #12]	@ (8001390 <ICM42688_Readbytes+0x58>)
 8001384:	f7ff fed7 	bl	8001136 <LL_GPIO_SetOutputPin>
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	bd90      	pop	{r4, r7, pc}
 8001390:	40021000 	.word	0x40021000

08001394 <ICM42688_Writebyte>:

void ICM42688_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	460a      	mov	r2, r1
 800139e:	71fb      	strb	r3, [r7, #7]
 80013a0:	4613      	mov	r3, r2
 80013a2:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM42688);
 80013a4:	2120      	movs	r1, #32
 80013a6:	480b      	ldr	r0, [pc, #44]	@ (80013d4 <ICM42688_Writebyte+0x40>)
 80013a8:	f7ff fed3 	bl	8001152 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff7d 	bl	80012b4 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80013ba:	79bb      	ldrb	r3, [r7, #6]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff79 	bl	80012b4 <SPI1_SendByte>
	CHIP_DESELECT(ICM42688);
 80013c2:	2120      	movs	r1, #32
 80013c4:	4803      	ldr	r0, [pc, #12]	@ (80013d4 <ICM42688_Writebyte+0x40>)
 80013c6:	f7ff feb6 	bl	8001136 <LL_GPIO_SetOutputPin>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40021000 	.word	0x40021000

080013d8 <ICM42688_Initialization>:
	CHIP_DESELECT(ICM42688);
}


int ICM42688_Initialization(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 80013ec:	463b      	mov	r3, r7
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	809a      	strh	r2, [r3, #4]
	
	ICM42688_GPIO_SPI_Initialization();
 80013f4:	f7ff feec 	bl	80011d0 <ICM42688_GPIO_SPI_Initialization>
	
	// printf("Checking ICM42688...\n\r");
	
	who_am_i = ICM42688_Readbyte(WHO_AM_I); 
 80013f8:	2075      	movs	r0, #117	@ 0x75
 80013fa:	f7ff ff7d 	bl	80012f8 <ICM42688_Readbyte>
 80013fe:	4603      	mov	r3, r0
 8001400:	73fb      	strb	r3, [r7, #15]

	if(who_am_i == 0x47)
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	2b47      	cmp	r3, #71	@ 0x47
 8001406:	d00c      	beq.n	8001422 <ICM42688_Initialization+0x4a>
	{
		// printf("ICM42688 who_am_i = 0x%02x...OK\n\r", who_am_i);
	}
	// recheck
	else if(who_am_i != 0x47)
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	2b47      	cmp	r3, #71	@ 0x47
 800140c:	d009      	beq.n	8001422 <ICM42688_Initialization+0x4a>
	{
		who_am_i = ICM42688_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 800140e:	2075      	movs	r0, #117	@ 0x75
 8001410:	f7ff ff72 	bl	80012f8 <ICM42688_Readbyte>
 8001414:	4603      	mov	r3, r0
 8001416:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	2b12      	cmp	r3, #18
 800141c:	d001      	beq.n	8001422 <ICM42688_Initialization+0x4a>
			// printf( "ICM42688 Not OK: 0x%02x Should be 0x%02x\n\r", who_am_i, 0x12);
			return 1; //ERROR
 800141e:	2301      	movs	r3, #1
 8001420:	e02a      	b.n	8001478 <ICM42688_Initialization+0xa0>
		}
	}
	
	// PWR_MGMT0
	ICM42688_Writebyte(PWR_MGMT0, 0x0F); // Temp on, ACC, GYRO LPF Mode
 8001422:	210f      	movs	r1, #15
 8001424:	204e      	movs	r0, #78	@ 0x4e
 8001426:	f7ff ffb5 	bl	8001394 <ICM42688_Writebyte>
	HAL_Delay(50);
 800142a:	2032      	movs	r0, #50	@ 0x32
 800142c:	f002 fc94 	bl	8003d58 <HAL_Delay>

	
	// GYRO_CONFIG0
	ICM42688_Writebyte(GYRO_CONFIG0, 0x06); // Gyro sensitivity 2000 dps, 1kHz
 8001430:	2106      	movs	r1, #6
 8001432:	204f      	movs	r0, #79	@ 0x4f
 8001434:	f7ff ffae 	bl	8001394 <ICM42688_Writebyte>
	HAL_Delay(50);
 8001438:	2032      	movs	r0, #50	@ 0x32
 800143a:	f002 fc8d 	bl	8003d58 <HAL_Delay>
	ICM42688_Writebyte(GYRO_CONFIG1, 0x00); // Gyro temp DLPF 4kHz, UI Filter 1st, 	DEC2_M2 reserved
 800143e:	2100      	movs	r1, #0
 8001440:	2051      	movs	r0, #81	@ 0x51
 8001442:	f7ff ffa7 	bl	8001394 <ICM42688_Writebyte>
	HAL_Delay(50);
 8001446:	2032      	movs	r0, #50	@ 0x32
 8001448:	f002 fc86 	bl	8003d58 <HAL_Delay>

	ICM42688_Writebyte(ACCEL_CONFIG0, 0x06); // Acc sensitivity 16g, 1kHz
 800144c:	2106      	movs	r1, #6
 800144e:	2050      	movs	r0, #80	@ 0x50
 8001450:	f7ff ffa0 	bl	8001394 <ICM42688_Writebyte>
	HAL_Delay(50);
 8001454:	2032      	movs	r0, #50	@ 0x32
 8001456:	f002 fc7f 	bl	8003d58 <HAL_Delay>
	ICM42688_Writebyte(ACCEL_CONFIG1, 0x00); // Acc UI Filter 1st, 	DEC2_M2 reserved
 800145a:	2100      	movs	r1, #0
 800145c:	2053      	movs	r0, #83	@ 0x53
 800145e:	f7ff ff99 	bl	8001394 <ICM42688_Writebyte>
	HAL_Delay(50);
 8001462:	2032      	movs	r0, #50	@ 0x32
 8001464:	f002 fc78 	bl	8003d58 <HAL_Delay>

	ICM42688_Writebyte(GYRO_ACCEL_CONFIG0, 0x11); // LPF default max(400Hz,ODR)/4
 8001468:	2111      	movs	r1, #17
 800146a:	2052      	movs	r0, #82	@ 0x52
 800146c:	f7ff ff92 	bl	8001394 <ICM42688_Writebyte>
	HAL_Delay(50);
 8001470:	2032      	movs	r0, #50	@ 0x32
 8001472:	f002 fc71 	bl	8003d58 <HAL_Delay>
//	HAL_Delay(50);
	
	// printf("gyro bias: %d %d %d\n", gyro_x_offset, gyro_y_offset, gyro_z_offset);
	
	// Remove Gyro X offset
	return 0; //OK
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <ICM42688_Get6AxisRawData>:

void ICM42688_Get6AxisRawData()
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
	uint8_t data[14];

	ICM42688_Readbytes(ACCEL_DATA_X1, 14, data);
 8001486:	463b      	mov	r3, r7
 8001488:	461a      	mov	r2, r3
 800148a:	210e      	movs	r1, #14
 800148c:	201f      	movs	r0, #31
 800148e:	f7ff ff53 	bl	8001338 <ICM42688_Readbytes>
//	ICM42688.acc_z_raw = ((data[6] << 8) | data[7]);
//	ICM42688.gyro_x_raw = ((data[8] << 8) | data[9]);
//	ICM42688.gyro_y_raw = ((data[10] << 8) | data[11]);
//	ICM42688.gyro_z_raw = ((data[12] << 8) | data[13]);

	raw_imu.temperature = (data[0] << 8) | data[1];
 8001492:	783b      	ldrb	r3, [r7, #0]
 8001494:	b21b      	sxth	r3, r3
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b21a      	sxth	r2, r3
 800149a:	787b      	ldrb	r3, [r7, #1]
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	4b21      	ldr	r3, [pc, #132]	@ (8001528 <ICM42688_Get6AxisRawData+0xa8>)
 80014a4:	f8a3 201b 	strh.w	r2, [r3, #27]
	raw_imu.xacc = (data[2] << 8) | data[3];
 80014a8:	78bb      	ldrb	r3, [r7, #2]
 80014aa:	b21b      	sxth	r3, r3
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	b21a      	sxth	r2, r3
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	4313      	orrs	r3, r2
 80014b6:	b21a      	sxth	r2, r3
 80014b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <ICM42688_Get6AxisRawData+0xa8>)
 80014ba:	811a      	strh	r2, [r3, #8]
	raw_imu.yacc = (data[4] << 8) | data[5];
 80014bc:	793b      	ldrb	r3, [r7, #4]
 80014be:	b21b      	sxth	r3, r3
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	b21a      	sxth	r2, r3
 80014c4:	797b      	ldrb	r3, [r7, #5]
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b21a      	sxth	r2, r3
 80014cc:	4b16      	ldr	r3, [pc, #88]	@ (8001528 <ICM42688_Get6AxisRawData+0xa8>)
 80014ce:	815a      	strh	r2, [r3, #10]
	raw_imu.zacc = ((data[6] << 8) | data[7]);
 80014d0:	79bb      	ldrb	r3, [r7, #6]
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	b21b      	sxth	r3, r3
 80014dc:	4313      	orrs	r3, r2
 80014de:	b21a      	sxth	r2, r3
 80014e0:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <ICM42688_Get6AxisRawData+0xa8>)
 80014e2:	819a      	strh	r2, [r3, #12]
	raw_imu.xgyro = ((data[8] << 8) | data[9]);
 80014e4:	7a3b      	ldrb	r3, [r7, #8]
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	b21a      	sxth	r2, r3
 80014ec:	7a7b      	ldrb	r3, [r7, #9]
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	4313      	orrs	r3, r2
 80014f2:	b21a      	sxth	r2, r3
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <ICM42688_Get6AxisRawData+0xa8>)
 80014f6:	81da      	strh	r2, [r3, #14]
	raw_imu.ygyro = ((data[10] << 8) | data[11]);
 80014f8:	7abb      	ldrb	r3, [r7, #10]
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	b21a      	sxth	r2, r3
 8001500:	7afb      	ldrb	r3, [r7, #11]
 8001502:	b21b      	sxth	r3, r3
 8001504:	4313      	orrs	r3, r2
 8001506:	b21a      	sxth	r2, r3
 8001508:	4b07      	ldr	r3, [pc, #28]	@ (8001528 <ICM42688_Get6AxisRawData+0xa8>)
 800150a:	821a      	strh	r2, [r3, #16]
	raw_imu.zgyro = ((data[12] << 8) | data[13]);
 800150c:	7b3b      	ldrb	r3, [r7, #12]
 800150e:	b21b      	sxth	r3, r3
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	b21a      	sxth	r2, r3
 8001514:	7b7b      	ldrb	r3, [r7, #13]
 8001516:	b21b      	sxth	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b21a      	sxth	r2, r3
 800151c:	4b02      	ldr	r3, [pc, #8]	@ (8001528 <ICM42688_Get6AxisRawData+0xa8>)
 800151e:	825a      	strh	r2, [r3, #18]
}
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200003a0 	.word	0x200003a0

0800152c <Log_Send>:
#include <GCS_MAVLink/GCS_Common.h>


/* Functions -----------------------------------------------------------------*/
int Log_Send()
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
	const uint8_t code = 0xFD;
 8001532:	23fd      	movs	r3, #253	@ 0xfd
 8001534:	71fb      	strb	r3, [r7, #7]
	static uint32_t previous_time = 0;

	// 4Hz 단위로 전송
	if(!(system_time.time_boot_ms - previous_time > 250)) return -1;
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <Log_Send+0x44>)
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <Log_Send+0x48>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2bfa      	cmp	r3, #250	@ 0xfa
 8001542:	d802      	bhi.n	800154a <Log_Send+0x1e>
 8001544:	f04f 33ff 	mov.w	r3, #4294967295
 8001548:	e00d      	b.n	8001566 <Log_Send+0x3a>
	previous_time = system_time.time_boot_ms;
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <Log_Send+0x44>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	4a09      	ldr	r2, [pc, #36]	@ (8001574 <Log_Send+0x48>)
 8001550:	6013      	str	r3, [r2, #0]

	CDC_Transmit_FS(&code, sizeof(code));
 8001552:	1dfb      	adds	r3, r7, #7
 8001554:	2101      	movs	r1, #1
 8001556:	4618      	mov	r0, r3
 8001558:	f00a f926 	bl	800b7a8 <CDC_Transmit_FS>

	Log_transmit((uint8_t *)&servo_output_raw, sizeof(servo_output_raw));
 800155c:	2125      	movs	r1, #37	@ 0x25
 800155e:	4806      	ldr	r0, [pc, #24]	@ (8001578 <Log_Send+0x4c>)
 8001560:	f000 f80c 	bl	800157c <Log_transmit>
	// Log_transmit(&RC_channels, sizeof(RC_channels));
	// while(1 == CDC_Transmit_FS(&RC_channels, sizeof(RC_CHANNELS))) {}
	return 0;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000394 	.word	0x20000394
 8001574:	200002e0 	.word	0x200002e0
 8001578:	200003c0 	.word	0x200003c0

0800157c <Log_transmit>:
 * SRXL2.c 코드 정리
 * 	- readByte 내에 cal crc 수행 후 타입에 따라 리턴
 */
extern uint16_t calculate_crc(const uint8_t *data, uint8_t len);
int Log_transmit(uint8_t* p, uint8_t len)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = calculate_crc(p, len);
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	4619      	mov	r1, r3
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 fccf 	bl	8001f30 <calculate_crc>
 8001592:	4603      	mov	r3, r0
 8001594:	81fb      	strh	r3, [r7, #14]

	CDC_Transmit_FS(p, len);
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	4619      	mov	r1, r3
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f00a f904 	bl	800b7a8 <CDC_Transmit_FS>
	CDC_Transmit_FS((uint8_t*)&crc, sizeof(uint16_t));
 80015a0:	f107 030e 	add.w	r3, r7, #14
 80015a4:	2102      	movs	r1, #2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f00a f8fe 	bl	800b7a8 <CDC_Transmit_FS>
	return len;
 80015ac:	78fb      	ldrb	r3, [r7, #3]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <PARM_load>:
	DroneCAN = 14,
	Ghost	 = 15,
	MAVRadio = 16,
};

int PARM_load(void){
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
	SERVO* servo = &parm_servo;
 80015be:	4b74      	ldr	r3, [pc, #464]	@ (8001790 <PARM_load+0x1d8>)
 80015c0:	607b      	str	r3, [r7, #4]
	SERVO_CH* servo_ch = parm_servo_ch;
 80015c2:	4b74      	ldr	r3, [pc, #464]	@ (8001794 <PARM_load+0x1dc>)
 80015c4:	603b      	str	r3, [r7, #0]
	PARM_rc.PROTOCOLS = (0x1<<SRXL2);
 80015c6:	4b74      	ldr	r3, [pc, #464]	@ (8001798 <PARM_load+0x1e0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f042 0201 	orr.w	r2, r2, #1
 80015d2:	705a      	strb	r2, [r3, #1]
	PARM_rc.FS_TIMEOUT = 1.0;
 80015d4:	4b70      	ldr	r3, [pc, #448]	@ (8001798 <PARM_load+0x1e0>)
 80015d6:	3302      	adds	r3, #2
 80015d8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015dc:	601a      	str	r2, [r3, #0]
	PARM_rc.reversedMask = 0x00;
 80015de:	4b6e      	ldr	r3, [pc, #440]	@ (8001798 <PARM_load+0x1e0>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	719a      	strb	r2, [r3, #6]
 80015e4:	2200      	movs	r2, #0
 80015e6:	71da      	strb	r2, [r3, #7]
 80015e8:	2200      	movs	r2, #0
 80015ea:	721a      	strb	r2, [r3, #8]
 80015ec:	2200      	movs	r2, #0
 80015ee:	725a      	strb	r2, [r3, #9]

	for(int i=0; i<RC_CHANNEL_MAX; i++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	e03f      	b.n	8001676 <PARM_load+0xbe>
	{
		PARM_rc.CHANNEL[i].MIN = 1000;
 80015f6:	4968      	ldr	r1, [pc, #416]	@ (8001798 <PARM_load+0x1e0>)
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4613      	mov	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	4413      	add	r3, r2
 8001600:	440b      	add	r3, r1
 8001602:	3308      	adds	r3, #8
 8001604:	2200      	movs	r2, #0
 8001606:	f062 0217 	orn	r2, r2, #23
 800160a:	709a      	strb	r2, [r3, #2]
 800160c:	2200      	movs	r2, #0
 800160e:	f042 0203 	orr.w	r2, r2, #3
 8001612:	70da      	strb	r2, [r3, #3]
		PARM_rc.CHANNEL[i].MAX = 2000;
 8001614:	4960      	ldr	r1, [pc, #384]	@ (8001798 <PARM_load+0x1e0>)
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	4613      	mov	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	4413      	add	r3, r2
 800161e:	440b      	add	r3, r1
 8001620:	3308      	adds	r3, #8
 8001622:	2200      	movs	r2, #0
 8001624:	f062 022f 	orn	r2, r2, #47	@ 0x2f
 8001628:	711a      	strb	r2, [r3, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f042 0207 	orr.w	r2, r2, #7
 8001630:	715a      	strb	r2, [r3, #5]
		PARM_rc.CHANNEL[i].TRIM = 0;
 8001632:	4959      	ldr	r1, [pc, #356]	@ (8001798 <PARM_load+0x1e0>)
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	4613      	mov	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	4413      	add	r3, r2
 800163c:	440b      	add	r3, r1
 800163e:	3308      	adds	r3, #8
 8001640:	2200      	movs	r2, #0
 8001642:	719a      	strb	r2, [r3, #6]
 8001644:	2200      	movs	r2, #0
 8001646:	71da      	strb	r2, [r3, #7]
		PARM_rc.CHANNEL[i].DZ = 0;
 8001648:	4953      	ldr	r1, [pc, #332]	@ (8001798 <PARM_load+0x1e0>)
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	4613      	mov	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	4413      	add	r3, r2
 8001652:	440b      	add	r3, r1
 8001654:	3310      	adds	r3, #16
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
		PARM_rc.CHANNEL[i].OPTION = 0;
 800165a:	494f      	ldr	r1, [pc, #316]	@ (8001798 <PARM_load+0x1e0>)
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4613      	mov	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4413      	add	r3, r2
 8001664:	440b      	add	r3, r1
 8001666:	3308      	adds	r3, #8
 8001668:	2200      	movs	r2, #0
 800166a:	725a      	strb	r2, [r3, #9]
 800166c:	2200      	movs	r2, #0
 800166e:	729a      	strb	r2, [r3, #10]
	for(int i=0; i<RC_CHANNEL_MAX; i++)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	3301      	adds	r3, #1
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2b1f      	cmp	r3, #31
 800167a:	ddbc      	ble.n	80015f6 <PARM_load+0x3e>
	}
	PARM_rc.MAP.THR = 0;
 800167c:	4b46      	ldr	r3, [pc, #280]	@ (8001798 <PARM_load+0x1e0>)
 800167e:	2200      	movs	r2, #0
 8001680:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
	PARM_rc.MAP.ROL = 1;
 8001684:	4b44      	ldr	r3, [pc, #272]	@ (8001798 <PARM_load+0x1e0>)
 8001686:	2201      	movs	r2, #1
 8001688:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
	PARM_rc.MAP.PIT = 2;
 800168c:	4b42      	ldr	r3, [pc, #264]	@ (8001798 <PARM_load+0x1e0>)
 800168e:	2202      	movs	r2, #2
 8001690:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
	PARM_rc.MAP.YAW = 3;
 8001694:	4b40      	ldr	r3, [pc, #256]	@ (8001798 <PARM_load+0x1e0>)
 8001696:	2203      	movs	r2, #3
 8001698:	f883 212d 	strb.w	r2, [r3, #301]	@ 0x12d

	servo->AUTO_TRIM = 0;
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	7813      	ldrb	r3, [r2, #0]
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	7013      	strb	r3, [r2, #0]
	servo->DSHOT_ESC = 0;
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	78d3      	ldrb	r3, [r2, #3]
 80016aa:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80016ae:	70d3      	strb	r3, [r2, #3]
	servo->DSHOT_RATE = 0;
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	78d3      	ldrb	r3, [r2, #3]
 80016b4:	f023 0307 	bic.w	r3, r3, #7
 80016b8:	70d3      	strb	r3, [r2, #3]
	servo->RATE = 50;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 80016c2:	705a      	strb	r2, [r3, #1]
 80016c4:	2200      	movs	r2, #0
 80016c6:	709a      	strb	r2, [r3, #2]
	servo->GPIO_MASK = 0xFF;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f04f 32ff 	mov.w	r2, #4294967295
 80016ce:	711a      	strb	r2, [r3, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	715a      	strb	r2, [r3, #5]
 80016d4:	2200      	movs	r2, #0
 80016d6:	719a      	strb	r2, [r3, #6]
 80016d8:	2200      	movs	r2, #0
 80016da:	71da      	strb	r2, [r3, #7]
	servo->RC_FS_MSK = 0xFF;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f04f 32ff 	mov.w	r2, #4294967295
 80016e2:	721a      	strb	r2, [r3, #8]
 80016e4:	2200      	movs	r2, #0
 80016e6:	725a      	strb	r2, [r3, #9]
	servo->_32_ENABLE = 0;
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	7a93      	ldrb	r3, [r2, #10]
 80016ec:	f023 0301 	bic.w	r3, r3, #1
 80016f0:	7293      	strb	r3, [r2, #10]

	for(int i=0; i<32; i++){
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	e040      	b.n	800177a <PARM_load+0x1c2>
		servo_ch[i].FUNCTION = 0;
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	4613      	mov	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4413      	add	r3, r2
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	4413      	add	r3, r2
 8001704:	2200      	movs	r2, #0
 8001706:	71da      	strb	r2, [r3, #7]
 8001708:	2200      	movs	r2, #0
 800170a:	721a      	strb	r2, [r3, #8]
		servo_ch[i].MAX = 2000;
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	4613      	mov	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	4413      	add	r3, r2
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	4413      	add	r3, r2
 8001718:	2200      	movs	r2, #0
 800171a:	f062 022f 	orn	r2, r2, #47	@ 0x2f
 800171e:	709a      	strb	r2, [r3, #2]
 8001720:	2200      	movs	r2, #0
 8001722:	f042 0207 	orr.w	r2, r2, #7
 8001726:	70da      	strb	r2, [r3, #3]
		servo_ch[i].MIN = 1000;
 8001728:	68ba      	ldr	r2, [r7, #8]
 800172a:	4613      	mov	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4413      	add	r3, r2
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	4413      	add	r3, r2
 8001734:	2200      	movs	r2, #0
 8001736:	f062 0217 	orn	r2, r2, #23
 800173a:	701a      	strb	r2, [r3, #0]
 800173c:	2200      	movs	r2, #0
 800173e:	f042 0203 	orr.w	r2, r2, #3
 8001742:	705a      	strb	r2, [r3, #1]
		servo_ch[i].TRIM = 1500;
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	4613      	mov	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	4413      	add	r3, r2
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	4413      	add	r3, r2
 8001750:	2200      	movs	r2, #0
 8001752:	f062 0223 	orn	r2, r2, #35	@ 0x23
 8001756:	711a      	strb	r2, [r3, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f042 0205 	orr.w	r2, r2, #5
 800175e:	715a      	strb	r2, [r3, #5]
		servo_ch[i].REVERSED = 0;
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	4613      	mov	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4413      	add	r3, r2
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	441a      	add	r2, r3
 800176c:	7993      	ldrb	r3, [r2, #6]
 800176e:	f023 0301 	bic.w	r3, r3, #1
 8001772:	7193      	strb	r3, [r2, #6]
	for(int i=0; i<32; i++){
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	3301      	adds	r3, #1
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	2b1f      	cmp	r3, #31
 800177e:	ddbb      	ble.n	80016f8 <PARM_load+0x140>
	}
	return 0;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	200002e4 	.word	0x200002e4
 8001794:	200002f0 	.word	0x200002f0
 8001798:	2000045c 	.word	0x2000045c

0800179c <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ac:	2b80      	cmp	r3, #128	@ 0x80
 80017ae:	bf0c      	ite	eq
 80017b0:	2301      	moveq	r3, #1
 80017b2:	2300      	movne	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	460b      	mov	r3, r1
 80017cc:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80017ce:	78fa      	ldrb	r2, [r7, #3]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	605a      	str	r2, [r3, #4]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <RC_Initialization>:
/* Functions -----------------------------------------------------------------*/
/*
 * @brief RC 초기 설정
 */
int RC_Initialization(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	RC_Buffer = malloc(SRXL_MAX_BUFFER_SIZE*sizeof(uint8_t));
 80017e4:	2050      	movs	r0, #80	@ 0x50
 80017e6:	f00a fc59 	bl	800c09c <malloc>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b03      	ldr	r3, [pc, #12]	@ (80017fc <RC_Initialization+0x1c>)
 80017f0:	601a      	str	r2, [r3, #0]

	SRXL2_Connect();
 80017f2:	f000 f8ad 	bl	8001950 <SRXL2_Connect>
	return 0;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000360 	.word	0x20000360

08001800 <RC_GetData>:

int RC_GetData(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	SRXL2_GetData();
 8001804:	f000 f900 	bl	8001a08 <SRXL2_GetData>
	return 0;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <RC_reviceIRQ2>:
 * @retval 0 : IRQ2 처리 완료
 *
 * 모든 수신 패킷을 처리하면 RC_rxFlag를 1로 처리함.
 */
int RC_reviceIRQ2(const uint8_t data)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
	// Half-Duplex에서 송신한 패킷을 무시
	if(RC_rxFlag.half_tx == 1) return 1;
 800181a:	4b0f      	ldr	r3, [pc, #60]	@ (8001858 <RC_reviceIRQ2+0x48>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <RC_reviceIRQ2+0x1c>
 8001828:	2301      	movs	r3, #1
 800182a:	e011      	b.n	8001850 <RC_reviceIRQ2+0x40>

	if(SRXL2_readByteIRQ2(data) == 0){
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	4618      	mov	r0, r3
 8001830:	f000 fa7e 	bl	8001d30 <SRXL2_readByteIRQ2>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d109      	bne.n	800184e <RC_reviceIRQ2+0x3e>
		// 모든 바이트를 읽었는지 검사
		RC_rxFlag.uart = 1;
 800183a:	4a07      	ldr	r2, [pc, #28]	@ (8001858 <RC_reviceIRQ2+0x48>)
 800183c:	7813      	ldrb	r3, [r2, #0]
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	7013      	strb	r3, [r2, #0]
		RC_rxFlag.half_using = 0;
 8001844:	4a04      	ldr	r2, [pc, #16]	@ (8001858 <RC_reviceIRQ2+0x48>)
 8001846:	7813      	ldrb	r3, [r2, #0]
 8001848:	f023 0302 	bic.w	r3, r3, #2
 800184c:	7013      	strb	r3, [r2, #0]
	}

	return 0;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	2000035c 	.word	0x2000035c

0800185c <RC_halfDuplex_Transmit>:
 * @parm uint8_t len : sizeof(data)
 * @retval 0 : 송신 완료.
 * @retval -1 : 송신 실패.
 */
int RC_halfDuplex_Transmit(uint8_t *data, uint8_t len)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	70fb      	strb	r3, [r7, #3]
	if(RC_rxFlag.half_using == 1) return -1;
 8001868:	4b1b      	ldr	r3, [pc, #108]	@ (80018d8 <RC_halfDuplex_Transmit+0x7c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <RC_halfDuplex_Transmit+0x20>
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
 800187a:	e028      	b.n	80018ce <RC_halfDuplex_Transmit+0x72>

	RC_rxFlag.half_using = 1;
 800187c:	4a16      	ldr	r2, [pc, #88]	@ (80018d8 <RC_halfDuplex_Transmit+0x7c>)
 800187e:	7813      	ldrb	r3, [r2, #0]
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	7013      	strb	r3, [r2, #0]
	RC_rxFlag.half_tx = 1;
 8001886:	4a14      	ldr	r2, [pc, #80]	@ (80018d8 <RC_halfDuplex_Transmit+0x7c>)
 8001888:	7813      	ldrb	r3, [r2, #0]
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	7013      	strb	r3, [r2, #0]

	for(int i=0; i<len; i++){
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	e011      	b.n	80018ba <RC_halfDuplex_Transmit+0x5e>
		while(!LL_USART_IsActiveFlag_TXE(USART1));
 8001896:	bf00      	nop
 8001898:	4810      	ldr	r0, [pc, #64]	@ (80018dc <RC_halfDuplex_Transmit+0x80>)
 800189a:	f7ff ff7f 	bl	800179c <LL_USART_IsActiveFlag_TXE>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f9      	beq.n	8001898 <RC_halfDuplex_Transmit+0x3c>
		LL_USART_TransmitData8(USART1, data[i]);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	480b      	ldr	r0, [pc, #44]	@ (80018dc <RC_halfDuplex_Transmit+0x80>)
 80018b0:	f7ff ff87 	bl	80017c2 <LL_USART_TransmitData8>
	for(int i=0; i<len; i++){
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	3301      	adds	r3, #1
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	429a      	cmp	r2, r3
 80018c0:	dbe9      	blt.n	8001896 <RC_halfDuplex_Transmit+0x3a>
	}

	RC_rxFlag.half_tx = 0;
 80018c2:	4a05      	ldr	r2, [pc, #20]	@ (80018d8 <RC_halfDuplex_Transmit+0x7c>)
 80018c4:	7813      	ldrb	r3, [r2, #0]
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	7013      	strb	r3, [r2, #0]
	return 0;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2000035c 	.word	0x2000035c
 80018dc:	40011000 	.word	0x40011000

080018e0 <RC_isBufferInit>:
 *
 * @parm None
 * @retval 0 : 설정됨
 * @retval -1 : 설정되지 않음
 */
int RC_isBufferInit(void){
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
	if(RC_Buffer == 0) return -1;
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <RC_isBufferInit+0x20>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d102      	bne.n	80018f2 <RC_isBufferInit+0x12>
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
 80018f0:	e000      	b.n	80018f4 <RC_isBufferInit+0x14>
	return 0;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000360 	.word	0x20000360

08001904 <map>:
 * @parm uint16_t in_max : x의 최댓값
 * @parm uint16_t out_min : x의 최솟값
 * @parm uint16_t out_max : x의 최댓값
 * @retVal uint16_t : 변환 값
 */
uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 8001904:	b490      	push	{r4, r7}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	4604      	mov	r4, r0
 800190c:	4608      	mov	r0, r1
 800190e:	4611      	mov	r1, r2
 8001910:	461a      	mov	r2, r3
 8001912:	4623      	mov	r3, r4
 8001914:	80fb      	strh	r3, [r7, #6]
 8001916:	4603      	mov	r3, r0
 8001918:	80bb      	strh	r3, [r7, #4]
 800191a:	460b      	mov	r3, r1
 800191c:	807b      	strh	r3, [r7, #2]
 800191e:	4613      	mov	r3, r2
 8001920:	803b      	strh	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001922:	88fa      	ldrh	r2, [r7, #6]
 8001924:	88bb      	ldrh	r3, [r7, #4]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	8a39      	ldrh	r1, [r7, #16]
 800192a:	883a      	ldrh	r2, [r7, #0]
 800192c:	1a8a      	subs	r2, r1, r2
 800192e:	fb03 f202 	mul.w	r2, r3, r2
 8001932:	8879      	ldrh	r1, [r7, #2]
 8001934:	88bb      	ldrh	r3, [r7, #4]
 8001936:	1acb      	subs	r3, r1, r3
 8001938:	fb92 f3f3 	sdiv	r3, r2, r3
 800193c:	b29a      	uxth	r2, r3
 800193e:	883b      	ldrh	r3, [r7, #0]
 8001940:	4413      	add	r3, r2
 8001942:	b29b      	uxth	r3, r3
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bc90      	pop	{r4, r7}
 800194c:	4770      	bx	lr
	...

08001950 <SRXL2_Connect>:
 * @detail 수신기와 연결하기 위한 Handshake 절차 수행
 * @parm none
 * @retval 0 : 연결 완료
 * @retval 2 : 이미 연결됨
 */
int SRXL2_Connect(void){
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
	SRXL2_Header *header = &packet.header;
 8001956:	4b28      	ldr	r3, [pc, #160]	@ (80019f8 <SRXL2_Connect+0xa8>)
 8001958:	617b      	str	r3, [r7, #20]
	SRXL2_Handshake_Data* rx;
	SRXL2_Handshake_Packet tx_packet;

	while(1)
	{
		if(SRXL2_isReceived()!=0) continue;
 800195a:	f000 fa8b 	bl	8001e74 <SRXL2_isReceived>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d138      	bne.n	80019d6 <SRXL2_Connect+0x86>

		switch(header->pType)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	785b      	ldrb	r3, [r3, #1]
 8001968:	2b21      	cmp	r3, #33	@ 0x21
 800196a:	d003      	beq.n	8001974 <SRXL2_Connect+0x24>
 800196c:	2bcd      	cmp	r3, #205	@ 0xcd
 800196e:	d134      	bne.n	80019da <SRXL2_Connect+0x8a>
		{
		case SRXL_CTRL_ID:
			return 2;
 8001970:	2302      	movs	r3, #2
 8001972:	e03c      	b.n	80019ee <SRXL2_Connect+0x9e>
		case SRXL_HANDSHAKE_ID:
			rx = &(((SRXL2_Handshake_Packet *) RC_Buffer)->data);
 8001974:	4b21      	ldr	r3, [pc, #132]	@ (80019fc <SRXL2_Connect+0xac>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	3303      	adds	r3, #3
 800197a:	613b      	str	r3, [r7, #16]

			// 수신기의 ID를 가져옴
			if((rx->SrcID)>>4 == 0x1)
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b01      	cmp	r3, #1
 8001986:	d10e      	bne.n	80019a6 <SRXL2_Connect+0x56>
			{
				receiver_info.SrcID = rx->SrcID;
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	781a      	ldrb	r2, [r3, #0]
 800198c:	4b1c      	ldr	r3, [pc, #112]	@ (8001a00 <SRXL2_Connect+0xb0>)
 800198e:	701a      	strb	r2, [r3, #0]
				receiver_info.Info = rx->Info;
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	791a      	ldrb	r2, [r3, #4]
 8001994:	4b1a      	ldr	r3, [pc, #104]	@ (8001a00 <SRXL2_Connect+0xb0>)
 8001996:	711a      	strb	r2, [r3, #4]
				receiver_info.UID = rx->UID;
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800199e:	4a18      	ldr	r2, [pc, #96]	@ (8001a00 <SRXL2_Connect+0xb0>)
 80019a0:	f8c2 3005 	str.w	r3, [r2, #5]
				break;
 80019a4:	e000      	b.n	80019a8 <SRXL2_Connect+0x58>
			}
			break;
 80019a6:	bf00      	nop
		default:
			continue;
		}

		break;
 80019a8:	bf00      	nop
	}

	tx_packet.header.speckrum_id = SPEKTRUM_SRXL_ID;
 80019aa:	23a6      	movs	r3, #166	@ 0xa6
 80019ac:	703b      	strb	r3, [r7, #0]
	tx_packet.header.pType = SRXL_HANDSHAKE_ID;
 80019ae:	2321      	movs	r3, #33	@ 0x21
 80019b0:	707b      	strb	r3, [r7, #1]
	tx_packet.header.len = sizeof(SRXL2_Handshake_Packet);
 80019b2:	230e      	movs	r3, #14
 80019b4:	70bb      	strb	r3, [r7, #2]

	tx_packet.data.SrcID = SRXL_FC_DEVICE_ID;
 80019b6:	2330      	movs	r3, #48	@ 0x30
 80019b8:	70fb      	strb	r3, [r7, #3]
	tx_packet.data.DestID = receiver_info.SrcID;
 80019ba:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <SRXL2_Connect+0xb0>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	713b      	strb	r3, [r7, #4]
	tx_packet.data.Priority = 0x60;
 80019c0:	2360      	movs	r3, #96	@ 0x60
 80019c2:	717b      	strb	r3, [r7, #5]
	tx_packet.data.BaudRate = SRXL_BAUD_115200;
 80019c4:	2300      	movs	r3, #0
 80019c6:	71bb      	strb	r3, [r7, #6]
	tx_packet.data.Info = 0x01;
 80019c8:	2301      	movs	r3, #1
 80019ca:	71fb      	strb	r3, [r7, #7]
	tx_packet.data.UID = 0x12345678;
 80019cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001a04 <SRXL2_Connect+0xb4>)
 80019ce:	60bb      	str	r3, [r7, #8]

	tx_packet.crc = 0x0000;
 80019d0:	2300      	movs	r3, #0
 80019d2:	81bb      	strh	r3, [r7, #12]

	while(SRXL2_doHandshake(&tx_packet));
 80019d4:	e003      	b.n	80019de <SRXL2_Connect+0x8e>
		if(SRXL2_isReceived()!=0) continue;
 80019d6:	bf00      	nop
 80019d8:	e7bf      	b.n	800195a <SRXL2_Connect+0xa>
			continue;
 80019da:	bf00      	nop
		if(SRXL2_isReceived()!=0) continue;
 80019dc:	e7bd      	b.n	800195a <SRXL2_Connect+0xa>
	while(SRXL2_doHandshake(&tx_packet));
 80019de:	463b      	mov	r3, r7
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 f963 	bl	8001cac <SRXL2_doHandshake>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1f8      	bne.n	80019de <SRXL2_Connect+0x8e>

	return 0;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000364 	.word	0x20000364
 80019fc:	20000360 	.word	0x20000360
 8001a00:	2000037c 	.word	0x2000037c
 8001a04:	12345678 	.word	0x12345678

08001a08 <SRXL2_GetData>:


/*
 * 수신 데이터 로딩
 */
int SRXL2_GetData(){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
	SRXL2_Header *header = &packet.header;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a48 <SRXL2_GetData+0x40>)
 8001a10:	607b      	str	r3, [r7, #4]

	if(SRXL2_isReceived()!=0) return -1;
 8001a12:	f000 fa2f 	bl	8001e74 <SRXL2_isReceived>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <SRXL2_GetData+0x1a>
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a20:	e00d      	b.n	8001a3e <SRXL2_GetData+0x36>

	switch(header->pType){
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	785b      	ldrb	r3, [r3, #1]
 8001a26:	2b21      	cmp	r3, #33	@ 0x21
 8001a28:	d007      	beq.n	8001a3a <SRXL2_GetData+0x32>
 8001a2a:	2bcd      	cmp	r3, #205	@ 0xcd
 8001a2c:	d106      	bne.n	8001a3c <SRXL2_GetData+0x34>
	case SRXL_HANDSHAKE_ID :
		break;
	case SRXL_CTRL_ID :
		// SRXL2_SendTelemetryData();
		SRXL2_parseControlData((SRXL2_Control_Packet*)RC_Buffer);
 8001a2e:	4b07      	ldr	r3, [pc, #28]	@ (8001a4c <SRXL2_GetData+0x44>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 f80c 	bl	8001a50 <SRXL2_parseControlData>
		break;
 8001a38:	e000      	b.n	8001a3c <SRXL2_GetData+0x34>
		break;
 8001a3a:	bf00      	nop
	}
	return 0;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000364 	.word	0x20000364
 8001a4c:	20000360 	.word	0x20000360

08001a50 <SRXL2_parseControlData>:
 *		   data 범위 조정(1000us~2000us), 반전, 트림, Dead-zone 적용.
 * 		   RC_Channel[]에 저장
 * @parm SRXL_Control_Pack *rx : (SRXL2_Control_Packet*)packet
 */
int SRXL2_parseControlData(SRXL2_Control_Packet *rx)
{
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b08b      	sub	sp, #44	@ 0x2c
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	6078      	str	r0, [r7, #4]
	PARM_RC *parm = &PARM_rc;
 8001a58:	4b8f      	ldr	r3, [pc, #572]	@ (8001c98 <SRXL2_parseControlData+0x248>)
 8001a5a:	617b      	str	r3, [r7, #20]
	RC_CHANNELS *rc = &RC_channels;
 8001a5c:	4b8f      	ldr	r3, [pc, #572]	@ (8001c9c <SRXL2_parseControlData+0x24c>)
 8001a5e:	613b      	str	r3, [r7, #16]


	// if(rx->Command == SRXL_CTRL_CMD_VTX)
	// if(rx->Command == SRXL_CTRL_CMD_FWDPGM)

	uint8_t channelCnt = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	77fb      	strb	r3, [r7, #31]
	static uint32_t channelMask = 0;

	static uint32_t previousTime = 0;

	for(int i=0; i<SRXL_MAX_CHANNEL; i++)
 8001a64:	2300      	movs	r3, #0
 8001a66:	61bb      	str	r3, [r7, #24]
 8001a68:	e0cb      	b.n	8001c02 <SRXL2_parseControlData+0x1b2>
	{
		if(!((rx->data.mask>>i)&0x01)) continue;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	fa22 f303 	lsr.w	r3, r2, r3
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 80be 	beq.w	8001bfa <SRXL2_parseControlData+0x1aa>
		if(i>=18) break;
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	2b11      	cmp	r3, #17
 8001a82:	f300 80c3 	bgt.w	8001c0c <SRXL2_parseControlData+0x1bc>

		uint16_t value = rx->data.values[channelCnt];
 8001a86:	7ff9      	ldrb	r1, [r7, #31]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	004b      	lsls	r3, r1, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	7b18      	ldrb	r0, [r3, #12]
 8001a90:	004b      	lsls	r3, r1, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	7b5b      	ldrb	r3, [r3, #13]
 8001a96:	021b      	lsls	r3, r3, #8
 8001a98:	4303      	orrs	r3, r0
 8001a9a:	81fb      	strh	r3, [r7, #14]
		channelCnt++;
 8001a9c:	7ffb      	ldrb	r3, [r7, #31]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	77fb      	strb	r3, [r7, #31]

		// RC 값 필터링 코드 작성
		value = value<SRXL_CTRL_VALUE_MIN?SRXL_CTRL_VALUE_MIN:value;
 8001aa2:	89fb      	ldrh	r3, [r7, #14]
 8001aa4:	f642 22a0 	movw	r2, #10912	@ 0x2aa0
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	bf38      	it	cc
 8001aac:	4613      	movcc	r3, r2
 8001aae:	81fb      	strh	r3, [r7, #14]
		value = value>SRXL_CTRL_VALUE_MAX?SRXL_CTRL_VALUE_MAX:value;
 8001ab0:	89fb      	ldrh	r3, [r7, #14]
 8001ab2:	f24d 5254 	movw	r2, #54612	@ 0xd554
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	bf28      	it	cs
 8001aba:	4613      	movcs	r3, r2
 8001abc:	81fb      	strh	r3, [r7, #14]

		// Reverse 처리
		if((parm->reversedMask>>i)&0x01)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d02f      	beq.n	8001b32 <SRXL2_parseControlData+0xe2>
		{
			rc->value[i] = map(value,
 8001ad2:	6979      	ldr	r1, [r7, #20]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4413      	add	r3, r2
 8001adc:	440b      	add	r3, r1
 8001ade:	3308      	adds	r3, #8
 8001ae0:	889b      	ldrh	r3, [r3, #4]
 8001ae2:	b29c      	uxth	r4, r3
 8001ae4:	6979      	ldr	r1, [r7, #20]
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4413      	add	r3, r2
 8001aee:	440b      	add	r3, r1
 8001af0:	3308      	adds	r3, #8
 8001af2:	885b      	ldrh	r3, [r3, #2]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	89f8      	ldrh	r0, [r7, #14]
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	4623      	mov	r3, r4
 8001afc:	f24d 5254 	movw	r2, #54612	@ 0xd554
 8001b00:	f642 21a0 	movw	r1, #10912	@ 0x2aa0
 8001b04:	f7ff fefe 	bl	8001904 <map>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4618      	mov	r0, r3
					SRXL_CTRL_VALUE_MIN, SRXL_CTRL_VALUE_MAX,
					parm->CHANNEL[i].MAX, parm->CHANNEL[i].MIN) + parm->CHANNEL[i].TRIM;
 8001b0c:	6979      	ldr	r1, [r7, #20]
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4613      	mov	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4413      	add	r3, r2
 8001b16:	440b      	add	r3, r1
 8001b18:	3308      	adds	r3, #8
 8001b1a:	88db      	ldrh	r3, [r3, #6]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	4403      	add	r3, r0
 8001b20:	b299      	uxth	r1, r3
			rc->value[i] = map(value,
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	460a      	mov	r2, r1
 8001b2c:	f8a3 2005 	strh.w	r2, [r3, #5]
 8001b30:	e02e      	b.n	8001b90 <SRXL2_parseControlData+0x140>
		}
		else{
			rc->value[i] = map(value,
 8001b32:	6979      	ldr	r1, [r7, #20]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4613      	mov	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	3308      	adds	r3, #8
 8001b40:	885b      	ldrh	r3, [r3, #2]
 8001b42:	b29c      	uxth	r4, r3
 8001b44:	6979      	ldr	r1, [r7, #20]
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	440b      	add	r3, r1
 8001b50:	3308      	adds	r3, #8
 8001b52:	889b      	ldrh	r3, [r3, #4]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	89f8      	ldrh	r0, [r7, #14]
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	4623      	mov	r3, r4
 8001b5c:	f24d 5254 	movw	r2, #54612	@ 0xd554
 8001b60:	f642 21a0 	movw	r1, #10912	@ 0x2aa0
 8001b64:	f7ff fece 	bl	8001904 <map>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4618      	mov	r0, r3
					SRXL_CTRL_VALUE_MIN, SRXL_CTRL_VALUE_MAX,
					parm->CHANNEL[i].MIN, parm->CHANNEL[i].MAX) + parm->CHANNEL[i].TRIM;
 8001b6c:	6979      	ldr	r1, [r7, #20]
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4613      	mov	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	4413      	add	r3, r2
 8001b76:	440b      	add	r3, r1
 8001b78:	3308      	adds	r3, #8
 8001b7a:	88db      	ldrh	r3, [r3, #6]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4403      	add	r3, r0
 8001b80:	b299      	uxth	r1, r3
			rc->value[i] = map(value,
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	460a      	mov	r2, r1
 8001b8c:	f8a3 2005 	strh.w	r2, [r3, #5]
		}

		// Dead-zone 처리
		if(rc->value[i]>(1500-parm->CHANNEL[i].DZ) && rc->value[i]<(1500+parm->CHANNEL[i].DZ)){
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	6979      	ldr	r1, [r7, #20]
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	4413      	add	r3, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	3310      	adds	r3, #16
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	4298      	cmp	r0, r3
 8001bb8:	dd20      	ble.n	8001bfc <SRXL2_parseControlData+0x1ac>
 8001bba:	6979      	ldr	r1, [r7, #20]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3310      	adds	r3, #16
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	f203 52db 	addw	r2, r3, #1499	@ 0x5db
 8001bce:	6939      	ldr	r1, [r7, #16]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	440b      	add	r3, r1
 8001bd6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	db0d      	blt.n	8001bfc <SRXL2_parseControlData+0x1ac>
			rc->value[i] = 1500;
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	2200      	movs	r2, #0
 8001bea:	f062 0223 	orn	r2, r2, #35	@ 0x23
 8001bee:	715a      	strb	r2, [r3, #5]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f042 0205 	orr.w	r2, r2, #5
 8001bf6:	719a      	strb	r2, [r3, #6]
 8001bf8:	e000      	b.n	8001bfc <SRXL2_parseControlData+0x1ac>
		if(!((rx->data.mask>>i)&0x01)) continue;
 8001bfa:	bf00      	nop
	for(int i=0; i<SRXL_MAX_CHANNEL; i++)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	61bb      	str	r3, [r7, #24]
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	2b1f      	cmp	r3, #31
 8001c06:	f77f af30 	ble.w	8001a6a <SRXL2_parseControlData+0x1a>
 8001c0a:	e000      	b.n	8001c0e <SRXL2_parseControlData+0x1be>
		if(i>=18) break;
 8001c0c:	bf00      	nop
		}
	}

	channelMask |= rx->data.mask;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	4b23      	ldr	r3, [pc, #140]	@ (8001ca0 <SRXL2_parseControlData+0x250>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	4a21      	ldr	r2, [pc, #132]	@ (8001ca0 <SRXL2_parseControlData+0x250>)
 8001c1a:	6013      	str	r3, [r2, #0]
	rc->chancount = countSetBits(channelMask);
 8001c1c:	4b20      	ldr	r3, [pc, #128]	@ (8001ca0 <SRXL2_parseControlData+0x250>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 f9e8 	bl	8001ff6 <countSetBits>
 8001c26:	4603      	mov	r3, r0
 8001c28:	461a      	mov	r2, r3
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	711a      	strb	r2, [r3, #4]
	rc->time_boot_ms = system_time.time_boot_ms;
 8001c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca4 <SRXL2_parseControlData+0x254>)
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	601a      	str	r2, [r3, #0]

	if(system_time.time_boot_ms - previousTime > 2000){
 8001c36:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca4 <SRXL2_parseControlData+0x254>)
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca8 <SRXL2_parseControlData+0x258>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001c44:	d906      	bls.n	8001c54 <SRXL2_parseControlData+0x204>
		previousTime = system_time.time_boot_ms;
 8001c46:	4b17      	ldr	r3, [pc, #92]	@ (8001ca4 <SRXL2_parseControlData+0x254>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	4a17      	ldr	r2, [pc, #92]	@ (8001ca8 <SRXL2_parseControlData+0x258>)
 8001c4c:	6013      	str	r3, [r2, #0]
		channelMask = 0;
 8001c4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ca0 <SRXL2_parseControlData+0x250>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
	}

	// rssi, frameLoss, Fail-safe 기능 등 구현
	switch(rx->Command){
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	78db      	ldrb	r3, [r3, #3]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <SRXL2_parseControlData+0x210>
 8001c5c:	2b01      	cmp	r3, #1
		 */
		if((rx->data.rssi&0x80)) break;
		rc->rssi = map(rx->data.rssi, 0, 100, 0, 254);
		break;
	case SRXL_CTRL_CMD_CHANNEL_FS:
		break;
 8001c5e:	e016      	b.n	8001c8e <SRXL2_parseControlData+0x23e>
		if((rx->data.rssi&0x80)) break;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	db10      	blt.n	8001c8c <SRXL2_parseControlData+0x23c>
		rc->rssi = map(rx->data.rssi, 0, 100, 0, 254);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001c70:	b298      	uxth	r0, r3
 8001c72:	23fe      	movs	r3, #254	@ 0xfe
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	2300      	movs	r3, #0
 8001c78:	2264      	movs	r2, #100	@ 0x64
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	f7ff fe42 	bl	8001904 <map>
 8001c80:	4603      	mov	r3, r0
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		break;
 8001c8a:	e000      	b.n	8001c8e <SRXL2_parseControlData+0x23e>
		if((rx->data.rssi&0x80)) break;
 8001c8c:	bf00      	nop
	}

	return 0;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3724      	adds	r7, #36	@ 0x24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd90      	pop	{r4, r7, pc}
 8001c98:	2000045c 	.word	0x2000045c
 8001c9c:	200003e8 	.word	0x200003e8
 8001ca0:	20000388 	.word	0x20000388
 8001ca4:	20000394 	.word	0x20000394
 8001ca8:	2000038c 	.word	0x2000038c

08001cac <SRXL2_doHandshake>:
 * @retval 0 : 송신 완료
 * @retval -1 : 송신 실패
 * @retval -2 : 패킷 크기와 정보가 불일치
 */
int SRXL2_doHandshake(SRXL2_Handshake_Packet *tx_packet)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	SRXL2_Handshake_Data* rx;
	SRXL2_Handshake_Data* data = &tx_packet->data;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3303      	adds	r3, #3
 8001cb8:	617b      	str	r3, [r7, #20]

	uint8_t len = tx_packet->header.len;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	789b      	ldrb	r3, [r3, #2]
 8001cbe:	74fb      	strb	r3, [r7, #19]
	if(sizeof(*tx_packet) != len) return -2;
 8001cc0:	7cfb      	ldrb	r3, [r7, #19]
 8001cc2:	2b0e      	cmp	r3, #14
 8001cc4:	d002      	beq.n	8001ccc <SRXL2_doHandshake+0x20>
 8001cc6:	f06f 0301 	mvn.w	r3, #1
 8001cca:	e029      	b.n	8001d20 <SRXL2_doHandshake+0x74>

	while(1)
	{
		if(SRXL2_isReceived()!=0) continue;
 8001ccc:	f000 f8d2 	bl	8001e74 <SRXL2_isReceived>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d114      	bne.n	8001d00 <SRXL2_doHandshake+0x54>
		if(packet.header.pType != SRXL_HANDSHAKE_ID) continue;
 8001cd6:	4b14      	ldr	r3, [pc, #80]	@ (8001d28 <SRXL2_doHandshake+0x7c>)
 8001cd8:	785b      	ldrb	r3, [r3, #1]
 8001cda:	2b21      	cmp	r3, #33	@ 0x21
 8001cdc:	d112      	bne.n	8001d04 <SRXL2_doHandshake+0x58>

		rx = &(((SRXL2_Handshake_Packet *) RC_Buffer)->data);
 8001cde:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <SRXL2_doHandshake+0x80>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	3303      	adds	r3, #3
 8001ce4:	60fb      	str	r3, [r7, #12]

		if(rx->SrcID == data->DestID && rx->DestID == data->SrcID)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	781a      	ldrb	r2, [r3, #0]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	785b      	ldrb	r3, [r3, #1]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d1ec      	bne.n	8001ccc <SRXL2_doHandshake+0x20>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	785a      	ldrb	r2, [r3, #1]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d004      	beq.n	8001d08 <SRXL2_doHandshake+0x5c>
 8001cfe:	e7e5      	b.n	8001ccc <SRXL2_doHandshake+0x20>
		if(SRXL2_isReceived()!=0) continue;
 8001d00:	bf00      	nop
 8001d02:	e7e3      	b.n	8001ccc <SRXL2_doHandshake+0x20>
		if(packet.header.pType != SRXL_HANDSHAKE_ID) continue;
 8001d04:	bf00      	nop
		if(SRXL2_isReceived()!=0) continue;
 8001d06:	e7e1      	b.n	8001ccc <SRXL2_doHandshake+0x20>
		{
			break;
 8001d08:	bf00      	nop
		}
	}

	insert_crc((uint8_t*)tx_packet, len);
 8001d0a:	7cfb      	ldrb	r3, [r7, #19]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f94f 	bl	8001fb2 <insert_crc>
	return RC_halfDuplex_Transmit((uint8_t*)tx_packet, len);
 8001d14:	7cfb      	ldrb	r3, [r7, #19]
 8001d16:	4619      	mov	r1, r3
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff fd9f 	bl	800185c <RC_halfDuplex_Transmit>
 8001d1e:	4603      	mov	r3, r0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000364 	.word	0x20000364
 8001d2c:	20000360 	.word	0x20000360

08001d30 <SRXL2_readByteIRQ2>:
 * @retval 1 : 1byte 수신 완료
 * @retval -1 : 헤더 에러
 * @retval -2 : 버퍼 설정 안됨
 */
int SRXL2_readByteIRQ2(const uint8_t data)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
	static uint8_t cnt = 0;
	static uint8_t maxLen = 0;

	if(RC_isBufferInit()!=0) return -2;
 8001d3a:	f7ff fdd1 	bl	80018e0 <RC_isBufferInit>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d002      	beq.n	8001d4a <SRXL2_readByteIRQ2+0x1a>
 8001d44:	f06f 0301 	mvn.w	r3, #1
 8001d48:	e089      	b.n	8001e5e <SRXL2_readByteIRQ2+0x12e>
	if(cnt>=SRXL_MAX_BUFFER_SIZE) return -2;
 8001d4a:	4b47      	ldr	r3, [pc, #284]	@ (8001e68 <SRXL2_readByteIRQ2+0x138>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b4f      	cmp	r3, #79	@ 0x4f
 8001d50:	d902      	bls.n	8001d58 <SRXL2_readByteIRQ2+0x28>
 8001d52:	f06f 0301 	mvn.w	r3, #1
 8001d56:	e082      	b.n	8001e5e <SRXL2_readByteIRQ2+0x12e>

	switch(cnt)
 8001d58:	4b43      	ldr	r3, [pc, #268]	@ (8001e68 <SRXL2_readByteIRQ2+0x138>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d002      	beq.n	8001d66 <SRXL2_readByteIRQ2+0x36>
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d011      	beq.n	8001d88 <SRXL2_readByteIRQ2+0x58>
 8001d64:	e052      	b.n	8001e0c <SRXL2_readByteIRQ2+0xdc>
	{
	case 0:
		if(data == SPEKTRUM_SRXL_ID){
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	2ba6      	cmp	r3, #166	@ 0xa6
 8001d6a:	d176      	bne.n	8001e5a <SRXL2_readByteIRQ2+0x12a>
			RC_Buffer[cnt] = data;
 8001d6c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e6c <SRXL2_readByteIRQ2+0x13c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a3d      	ldr	r2, [pc, #244]	@ (8001e68 <SRXL2_readByteIRQ2+0x138>)
 8001d72:	7812      	ldrb	r2, [r2, #0]
 8001d74:	4413      	add	r3, r2
 8001d76:	79fa      	ldrb	r2, [r7, #7]
 8001d78:	701a      	strb	r2, [r3, #0]
			cnt++;
 8001d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e68 <SRXL2_readByteIRQ2+0x138>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4b39      	ldr	r3, [pc, #228]	@ (8001e68 <SRXL2_readByteIRQ2+0x138>)
 8001d84:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001d86:	e068      	b.n	8001e5a <SRXL2_readByteIRQ2+0x12a>
	case 1:
		switch(data){
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	2bcd      	cmp	r3, #205	@ 0xcd
 8001d8c:	d026      	beq.n	8001ddc <SRXL2_readByteIRQ2+0xac>
 8001d8e:	2bcd      	cmp	r3, #205	@ 0xcd
 8001d90:	dc28      	bgt.n	8001de4 <SRXL2_readByteIRQ2+0xb4>
 8001d92:	2b80      	cmp	r3, #128	@ 0x80
 8001d94:	d01e      	beq.n	8001dd4 <SRXL2_readByteIRQ2+0xa4>
 8001d96:	2b80      	cmp	r3, #128	@ 0x80
 8001d98:	dc24      	bgt.n	8001de4 <SRXL2_readByteIRQ2+0xb4>
 8001d9a:	2b55      	cmp	r3, #85	@ 0x55
 8001d9c:	d016      	beq.n	8001dcc <SRXL2_readByteIRQ2+0x9c>
 8001d9e:	2b55      	cmp	r3, #85	@ 0x55
 8001da0:	dc20      	bgt.n	8001de4 <SRXL2_readByteIRQ2+0xb4>
 8001da2:	2b50      	cmp	r3, #80	@ 0x50
 8001da4:	d00e      	beq.n	8001dc4 <SRXL2_readByteIRQ2+0x94>
 8001da6:	2b50      	cmp	r3, #80	@ 0x50
 8001da8:	dc1c      	bgt.n	8001de4 <SRXL2_readByteIRQ2+0xb4>
 8001daa:	2b21      	cmp	r3, #33	@ 0x21
 8001dac:	d002      	beq.n	8001db4 <SRXL2_readByteIRQ2+0x84>
 8001dae:	2b41      	cmp	r3, #65	@ 0x41
 8001db0:	d004      	beq.n	8001dbc <SRXL2_readByteIRQ2+0x8c>
 8001db2:	e017      	b.n	8001de4 <SRXL2_readByteIRQ2+0xb4>
		case SRXL_HANDSHAKE_ID:
			maxLen = 14;
 8001db4:	4b2e      	ldr	r3, [pc, #184]	@ (8001e70 <SRXL2_readByteIRQ2+0x140>)
 8001db6:	220e      	movs	r2, #14
 8001db8:	701a      	strb	r2, [r3, #0]
			break;
 8001dba:	e019      	b.n	8001df0 <SRXL2_readByteIRQ2+0xc0>
		case SRXL_BIND_ID:
			maxLen = 21;
 8001dbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001e70 <SRXL2_readByteIRQ2+0x140>)
 8001dbe:	2215      	movs	r2, #21
 8001dc0:	701a      	strb	r2, [r3, #0]
			break;
 8001dc2:	e015      	b.n	8001df0 <SRXL2_readByteIRQ2+0xc0>
		case SRXL_PARAM_ID:
			maxLen = 14;
 8001dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8001e70 <SRXL2_readByteIRQ2+0x140>)
 8001dc6:	220e      	movs	r2, #14
 8001dc8:	701a      	strb	r2, [r3, #0]
			break;
 8001dca:	e011      	b.n	8001df0 <SRXL2_readByteIRQ2+0xc0>
		case SRXL_RSSI_ID:
			maxLen = 10;
 8001dcc:	4b28      	ldr	r3, [pc, #160]	@ (8001e70 <SRXL2_readByteIRQ2+0x140>)
 8001dce:	220a      	movs	r2, #10
 8001dd0:	701a      	strb	r2, [r3, #0]
			break;
 8001dd2:	e00d      	b.n	8001df0 <SRXL2_readByteIRQ2+0xc0>
		case SRXL_TELEM_ID:
			maxLen = 22;
 8001dd4:	4b26      	ldr	r3, [pc, #152]	@ (8001e70 <SRXL2_readByteIRQ2+0x140>)
 8001dd6:	2216      	movs	r2, #22
 8001dd8:	701a      	strb	r2, [r3, #0]
			break;
 8001dda:	e009      	b.n	8001df0 <SRXL2_readByteIRQ2+0xc0>
		case SRXL_CTRL_ID:
			maxLen = 80;
 8001ddc:	4b24      	ldr	r3, [pc, #144]	@ (8001e70 <SRXL2_readByteIRQ2+0x140>)
 8001dde:	2250      	movs	r2, #80	@ 0x50
 8001de0:	701a      	strb	r2, [r3, #0]
			break;
 8001de2:	e005      	b.n	8001df0 <SRXL2_readByteIRQ2+0xc0>
		default :
			cnt = 0;
 8001de4:	4b20      	ldr	r3, [pc, #128]	@ (8001e68 <SRXL2_readByteIRQ2+0x138>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
			return -1;
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295
 8001dee:	e036      	b.n	8001e5e <SRXL2_readByteIRQ2+0x12e>
		}
		RC_Buffer[cnt] = data;
 8001df0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e6c <SRXL2_readByteIRQ2+0x13c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a1c      	ldr	r2, [pc, #112]	@ (8001e68 <SRXL2_readByteIRQ2+0x138>)
 8001df6:	7812      	ldrb	r2, [r2, #0]
 8001df8:	4413      	add	r3, r2
 8001dfa:	79fa      	ldrb	r2, [r7, #7]
 8001dfc:	701a      	strb	r2, [r3, #0]
		cnt++;
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001e68 <SRXL2_readByteIRQ2+0x138>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	3301      	adds	r3, #1
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4b18      	ldr	r3, [pc, #96]	@ (8001e68 <SRXL2_readByteIRQ2+0x138>)
 8001e08:	701a      	strb	r2, [r3, #0]
		break;
 8001e0a:	e027      	b.n	8001e5c <SRXL2_readByteIRQ2+0x12c>
	default :
		RC_Buffer[cnt] = data;
 8001e0c:	4b17      	ldr	r3, [pc, #92]	@ (8001e6c <SRXL2_readByteIRQ2+0x13c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a15      	ldr	r2, [pc, #84]	@ (8001e68 <SRXL2_readByteIRQ2+0x138>)
 8001e12:	7812      	ldrb	r2, [r2, #0]
 8001e14:	4413      	add	r3, r2
 8001e16:	79fa      	ldrb	r2, [r7, #7]
 8001e18:	701a      	strb	r2, [r3, #0]

		/*
		 * Control Packet은 사이즈가 가변적임
		 * 3번째 바이트가 패킷의 크기를 결정함
		 */
		if(maxLen == 80) maxLen = RC_Buffer[cnt];
 8001e1a:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <SRXL2_readByteIRQ2+0x140>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b50      	cmp	r3, #80	@ 0x50
 8001e20:	d107      	bne.n	8001e32 <SRXL2_readByteIRQ2+0x102>
 8001e22:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <SRXL2_readByteIRQ2+0x13c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a10      	ldr	r2, [pc, #64]	@ (8001e68 <SRXL2_readByteIRQ2+0x138>)
 8001e28:	7812      	ldrb	r2, [r2, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	781a      	ldrb	r2, [r3, #0]
 8001e2e:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <SRXL2_readByteIRQ2+0x140>)
 8001e30:	701a      	strb	r2, [r3, #0]

		if(cnt == maxLen-1){
 8001e32:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <SRXL2_readByteIRQ2+0x138>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	4b0d      	ldr	r3, [pc, #52]	@ (8001e70 <SRXL2_readByteIRQ2+0x140>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d104      	bne.n	8001e4c <SRXL2_readByteIRQ2+0x11c>
			cnt=0;
 8001e42:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <SRXL2_readByteIRQ2+0x138>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
			return 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e008      	b.n	8001e5e <SRXL2_readByteIRQ2+0x12e>
		}
		else{
			cnt++;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <SRXL2_readByteIRQ2+0x138>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	3301      	adds	r3, #1
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	4b04      	ldr	r3, [pc, #16]	@ (8001e68 <SRXL2_readByteIRQ2+0x138>)
 8001e56:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001e58:	e000      	b.n	8001e5c <SRXL2_readByteIRQ2+0x12c>
		break;
 8001e5a:	bf00      	nop
	}
	return 1;
 8001e5c:	2301      	movs	r3, #1
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000390 	.word	0x20000390
 8001e6c:	20000360 	.word	0x20000360
 8001e70:	20000391 	.word	0x20000391

08001e74 <SRXL2_isReceived>:
 * @detail IRQ2가 실행되었는지 확인
 * @retval 0 : 수신 완료
 * @retval -1 : 수신 인터럽트 없음
 * @retval -2 : CRC 불일치
 */
int SRXL2_isReceived(void){
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
	SRXL2_Packet *rx = &packet;
 8001e7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001f24 <SRXL2_isReceived+0xb0>)
 8001e7c:	607b      	str	r3, [r7, #4]
	SRXL2_Header *header = &rx->header;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	603b      	str	r3, [r7, #0]

	if(RC_rxFlag.uart == 0)
 8001e82:	4b29      	ldr	r3, [pc, #164]	@ (8001f28 <SRXL2_isReceived+0xb4>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d102      	bne.n	8001e96 <SRXL2_isReceived+0x22>
	{
		return -1;
 8001e90:	f04f 33ff 	mov.w	r3, #4294967295
 8001e94:	e042      	b.n	8001f1c <SRXL2_isReceived+0xa8>
	}

	// flag clear
	RC_rxFlag.uart = 0;
 8001e96:	4a24      	ldr	r2, [pc, #144]	@ (8001f28 <SRXL2_isReceived+0xb4>)
 8001e98:	7813      	ldrb	r3, [r2, #0]
 8001e9a:	f023 0304 	bic.w	r3, r3, #4
 8001e9e:	7013      	strb	r3, [r2, #0]

	header->speckrum_id = SPEKTRUM_SRXL_ID;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	22a6      	movs	r2, #166	@ 0xa6
 8001ea4:	701a      	strb	r2, [r3, #0]
	header->pType = RC_Buffer[1];
 8001ea6:	4b21      	ldr	r3, [pc, #132]	@ (8001f2c <SRXL2_isReceived+0xb8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	785a      	ldrb	r2, [r3, #1]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	705a      	strb	r2, [r3, #1]
	header->len = RC_Buffer[2];
 8001eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f2c <SRXL2_isReceived+0xb8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	789a      	ldrb	r2, [r3, #2]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	709a      	strb	r2, [r3, #2]

	rx->Data = RC_Buffer;
 8001eba:	4b1c      	ldr	r3, [pc, #112]	@ (8001f2c <SRXL2_isReceived+0xb8>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f8c3 2003 	str.w	r2, [r3, #3]
	rx->crc = ((uint16_t)RC_Buffer[header->len -2] << 8 | RC_Buffer[header->len -1]);
 8001ec4:	4b19      	ldr	r3, [pc, #100]	@ (8001f2c <SRXL2_isReceived+0xb8>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	789b      	ldrb	r3, [r3, #2]
 8001ecc:	3b02      	subs	r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	b21b      	sxth	r3, r3
 8001ed4:	021b      	lsls	r3, r3, #8
 8001ed6:	b21a      	sxth	r2, r3
 8001ed8:	4b14      	ldr	r3, [pc, #80]	@ (8001f2c <SRXL2_isReceived+0xb8>)
 8001eda:	6819      	ldr	r1, [r3, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	789b      	ldrb	r3, [r3, #2]
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	440b      	add	r3, r1
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	b21b      	sxth	r3, r3
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	b21b      	sxth	r3, r3
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f8a3 2013 	strh.w	r2, [r3, #19]

	if(calculate_crc(RC_Buffer, header->len) != rx->crc){
 8001ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8001f2c <SRXL2_isReceived+0xb8>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	789b      	ldrb	r3, [r3, #2]
 8001efc:	4619      	mov	r1, r3
 8001efe:	4610      	mov	r0, r2
 8001f00:	f000 f816 	bl	8001f30 <calculate_crc>
 8001f04:	4603      	mov	r3, r0
 8001f06:	461a      	mov	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f8b3 3013 	ldrh.w	r3, [r3, #19]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d002      	beq.n	8001f1a <SRXL2_isReceived+0xa6>
		return -2;
 8001f14:	f06f 0301 	mvn.w	r3, #1
 8001f18:	e000      	b.n	8001f1c <SRXL2_isReceived+0xa8>
	}

	return 0;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000364 	.word	0x20000364
 8001f28:	2000035c 	.word	0x2000035c
 8001f2c:	20000360 	.word	0x20000360

08001f30 <calculate_crc>:
 * @parm const uint8_t* data : data address
 * @parm uint8_t len : sizeof(data)
 * @retval uint16_t crc
 */
uint16_t calculate_crc(const uint8_t *data, uint8_t len)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0x0000;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len-2; i++) {
 8001f40:	2300      	movs	r3, #0
 8001f42:	737b      	strb	r3, [r7, #13]
 8001f44:	e029      	b.n	8001f9a <calculate_crc+0x6a>
		crc ^= ((uint16_t)data[i] << 8);
 8001f46:	7b7b      	ldrb	r3, [r7, #13]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	b21b      	sxth	r3, r3
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	b21a      	sxth	r2, r3
 8001f54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f58:	4053      	eors	r3, r2
 8001f5a:	b21b      	sxth	r3, r3
 8001f5c:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 8001f5e:	2300      	movs	r3, #0
 8001f60:	733b      	strb	r3, [r7, #12]
 8001f62:	e014      	b.n	8001f8e <calculate_crc+0x5e>
			if (crc & 0x8000)
 8001f64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	da0a      	bge.n	8001f82 <calculate_crc+0x52>
				crc = (crc << 1) ^ 0x1021;
 8001f6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	b21b      	sxth	r3, r3
 8001f74:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8001f78:	f083 0301 	eor.w	r3, r3, #1
 8001f7c:	b21b      	sxth	r3, r3
 8001f7e:	81fb      	strh	r3, [r7, #14]
 8001f80:	e002      	b.n	8001f88 <calculate_crc+0x58>
			else
				crc = (crc << 1);
 8001f82:	89fb      	ldrh	r3, [r7, #14]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 8001f88:	7b3b      	ldrb	r3, [r7, #12]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	733b      	strb	r3, [r7, #12]
 8001f8e:	7b3b      	ldrb	r3, [r7, #12]
 8001f90:	2b07      	cmp	r3, #7
 8001f92:	d9e7      	bls.n	8001f64 <calculate_crc+0x34>
	for (uint8_t i = 0; i < len-2; i++) {
 8001f94:	7b7b      	ldrb	r3, [r7, #13]
 8001f96:	3301      	adds	r3, #1
 8001f98:	737b      	strb	r3, [r7, #13]
 8001f9a:	7b7a      	ldrb	r2, [r7, #13]
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	3b02      	subs	r3, #2
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	dbd0      	blt.n	8001f46 <calculate_crc+0x16>
		}
	}

	return crc;
 8001fa4:	89fb      	ldrh	r3, [r7, #14]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <insert_crc>:
 * @parm uint8_t* data : data address
 * @parm uint8_t len : sizeof(data)
 * @retval uint16_t crc
 */
uint16_t insert_crc(uint8_t *data, uint8_t len)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = calculate_crc(data, len);
 8001fbe:	78fb      	ldrb	r3, [r7, #3]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff ffb4 	bl	8001f30 <calculate_crc>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	81fb      	strh	r3, [r7, #14]

	data[len -2] = (uint8_t)(crc >> 8);
 8001fcc:	89fb      	ldrh	r3, [r7, #14]
 8001fce:	0a1b      	lsrs	r3, r3, #8
 8001fd0:	b299      	uxth	r1, r3
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	3b02      	subs	r3, #2
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	b2ca      	uxtb	r2, r1
 8001fdc:	701a      	strb	r2, [r3, #0]
	data[len -1] = (uint8_t)(crc & 0xFF);
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	89fa      	ldrh	r2, [r7, #14]
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	701a      	strb	r2, [r3, #0]

	return crc;
 8001fec:	89fb      	ldrh	r3, [r7, #14]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <countSetBits>:
 *	Set bit(1)의 갯수를 세는 함수
 *	@parm uint32_t i : bits
 *	@retval uint8_t num of set bits
 */
uint8_t countSetBits(uint32_t i)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
     // C or C++: use uint32_t
     i = i - ((i >> 1) & 0x55555555);        // add pairs of bits
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	085b      	lsrs	r3, r3, #1
 8002002:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	607b      	str	r3, [r7, #4]
     i = (i & 0x33333333) + ((i >> 2) & 0x33333333);  // quads
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f003 3233 	and.w	r2, r3, #858993459	@ 0x33333333
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 800201a:	4413      	add	r3, r2
 800201c:	607b      	str	r3, [r7, #4]
     i = (i + (i >> 4)) & 0x0F0F0F0F;        // groups of 8
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	091a      	lsrs	r2, r3, #4
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 800202a:	607b      	str	r3, [r7, #4]
     return (uint8_t)((i * 0x01010101) >> 24);          // horizontal sum of bytes
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	021b      	lsls	r3, r3, #8
 8002032:	4413      	add	r3, r2
 8002034:	041a      	lsls	r2, r3, #16
 8002036:	4413      	add	r3, r2
 8002038:	0e1b      	lsrs	r3, r3, #24
 800203a:	b2db      	uxtb	r3, r3
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_TIM_EnableCounter>:
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f043 0201 	orr.w	r2, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	601a      	str	r2, [r3, #0]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_TIM_CC_EnableChannel>:
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1a      	ldr	r2, [r3, #32]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	621a      	str	r2, [r3, #32]
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <LL_TIM_DisableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_DisableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableAllOutputs(TIM_TypeDef *TIMx)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002096:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	645a      	str	r2, [r3, #68]	@ 0x44
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <SERVO_Initialization>:
 * @detail 출력 프로토콜, 주기 변경
 * @parm none
 * @retval none
 */
void SERVO_Initialization(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
	SERVO* servo = &parm_servo;
 80020b2:	4b0a      	ldr	r3, [pc, #40]	@ (80020dc <SERVO_Initialization+0x30>)
 80020b4:	607b      	str	r3, [r7, #4]

	LL_TIM_EnableCounter(TIM1);
 80020b6:	480a      	ldr	r0, [pc, #40]	@ (80020e0 <SERVO_Initialization+0x34>)
 80020b8:	f7ff ffc6 	bl	8002048 <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(TIM3);
 80020bc:	4809      	ldr	r0, [pc, #36]	@ (80020e4 <SERVO_Initialization+0x38>)
 80020be:	f7ff ffc3 	bl	8002048 <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(TIM4);
 80020c2:	4809      	ldr	r0, [pc, #36]	@ (80020e8 <SERVO_Initialization+0x3c>)
 80020c4:	f7ff ffc0 	bl	8002048 <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(TIM5);
 80020c8:	4808      	ldr	r0, [pc, #32]	@ (80020ec <SERVO_Initialization+0x40>)
 80020ca:	f7ff ffbd 	bl	8002048 <LL_TIM_EnableCounter>

	SERVO_doDisarm();
 80020ce:	f000 f8c5 	bl	800225c <SERVO_doDisarm>

	return;
 80020d2:	bf00      	nop
}
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	200002e4 	.word	0x200002e4
 80020e0:	40010000 	.word	0x40010000
 80020e4:	40000400 	.word	0x40000400
 80020e8:	40000800 	.word	0x40000800
 80020ec:	40000c00 	.word	0x40000c00

080020f0 <configurePWM>:
 * @parm uint16_t hz 50-490
 * @retval 0 : 설정됨
 * @retval 1 : 주파수 범위 오설정
 */
uint8_t configurePWM(uint16_t hz)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	80fb      	strh	r3, [r7, #6]
	if(hz>490 || hz<50) return 1;
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	f5b3 7ff5 	cmp.w	r3, #490	@ 0x1ea
 8002100:	d802      	bhi.n	8002108 <configurePWM+0x18>
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	2b31      	cmp	r3, #49	@ 0x31
 8002106:	d801      	bhi.n	800210c <configurePWM+0x1c>
 8002108:	2301      	movs	r3, #1
 800210a:	e01f      	b.n	800214c <configurePWM+0x5c>

	TIM1->ARR = 1000000/hz-1;
 800210c:	88fb      	ldrh	r3, [r7, #6]
 800210e:	4a12      	ldr	r2, [pc, #72]	@ (8002158 <configurePWM+0x68>)
 8002110:	fb92 f3f3 	sdiv	r3, r2, r3
 8002114:	1e5a      	subs	r2, r3, #1
 8002116:	4b11      	ldr	r3, [pc, #68]	@ (800215c <configurePWM+0x6c>)
 8002118:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->PSC = 84-1;
 800211a:	4b10      	ldr	r3, [pc, #64]	@ (800215c <configurePWM+0x6c>)
 800211c:	2253      	movs	r2, #83	@ 0x53
 800211e:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM3->ARR = 20000;
 8002120:	4b0f      	ldr	r3, [pc, #60]	@ (8002160 <configurePWM+0x70>)
 8002122:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002126:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->PSC = 84-1;
 8002128:	4b0d      	ldr	r3, [pc, #52]	@ (8002160 <configurePWM+0x70>)
 800212a:	2253      	movs	r2, #83	@ 0x53
 800212c:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM4->ARR = 20000;
 800212e:	4b0d      	ldr	r3, [pc, #52]	@ (8002164 <configurePWM+0x74>)
 8002130:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002134:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->PSC = 84-1;
 8002136:	4b0b      	ldr	r3, [pc, #44]	@ (8002164 <configurePWM+0x74>)
 8002138:	2253      	movs	r2, #83	@ 0x53
 800213a:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM5->ARR = 20000;
 800213c:	4b0a      	ldr	r3, [pc, #40]	@ (8002168 <configurePWM+0x78>)
 800213e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002142:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM5->PSC = 84-1;
 8002144:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <configurePWM+0x78>)
 8002146:	2253      	movs	r2, #83	@ 0x53
 8002148:	629a      	str	r2, [r3, #40]	@ 0x28

	return 0;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	000f4240 	.word	0x000f4240
 800215c:	40010000 	.word	0x40010000
 8002160:	40000400 	.word	0x40000400
 8002164:	40000800 	.word	0x40000800
 8002168:	40000c00 	.word	0x40000c00

0800216c <SERVO_doArm>:


void SERVO_doArm(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
	SERVO* servo = &parm_servo;
 8002172:	4b34      	ldr	r3, [pc, #208]	@ (8002244 <SERVO_doArm+0xd8>)
 8002174:	603b      	str	r3, [r7, #0]
	configurePWM(servo->RATE);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800217c:	b29b      	uxth	r3, r3
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff ffb6 	bl	80020f0 <configurePWM>

	for(uint8_t i=0; i<NUM_SERVO_CHANNELS; i++)
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]
 8002188:	e055      	b.n	8002236 <SERVO_doArm+0xca>
	{
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	2101      	movs	r1, #1
 8002192:	fa01 f202 	lsl.w	r2, r1, r2
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d048      	beq.n	800222e <SERVO_doArm+0xc2>

		TIM_TypeDef* timer;
		uint32_t ch;
		switch(SERVO_TIMER_MAP[i]>>4){
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	4a2a      	ldr	r2, [pc, #168]	@ (8002248 <SERVO_doArm+0xdc>)
 80021a0:	5cd3      	ldrb	r3, [r2, r3]
 80021a2:	091b      	lsrs	r3, r3, #4
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	3b01      	subs	r3, #1
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d819      	bhi.n	80021e0 <SERVO_doArm+0x74>
 80021ac:	a201      	add	r2, pc, #4	@ (adr r2, 80021b4 <SERVO_doArm+0x48>)
 80021ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b2:	bf00      	nop
 80021b4:	080021c9 	.word	0x080021c9
 80021b8:	080021e1 	.word	0x080021e1
 80021bc:	080021cf 	.word	0x080021cf
 80021c0:	080021d5 	.word	0x080021d5
 80021c4:	080021db 	.word	0x080021db
		case 1:
			timer = TIM1;
 80021c8:	4b20      	ldr	r3, [pc, #128]	@ (800224c <SERVO_doArm+0xe0>)
 80021ca:	60bb      	str	r3, [r7, #8]
			break;
 80021cc:	e008      	b.n	80021e0 <SERVO_doArm+0x74>
		case 3:
			timer = TIM3;
 80021ce:	4b20      	ldr	r3, [pc, #128]	@ (8002250 <SERVO_doArm+0xe4>)
 80021d0:	60bb      	str	r3, [r7, #8]
			break;
 80021d2:	e005      	b.n	80021e0 <SERVO_doArm+0x74>
		case 4:
			timer = TIM4;
 80021d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002254 <SERVO_doArm+0xe8>)
 80021d6:	60bb      	str	r3, [r7, #8]
			break;
 80021d8:	e002      	b.n	80021e0 <SERVO_doArm+0x74>
		case 5:
			timer = TIM5;
 80021da:	4b1f      	ldr	r3, [pc, #124]	@ (8002258 <SERVO_doArm+0xec>)
 80021dc:	60bb      	str	r3, [r7, #8]
			break;
 80021de:	bf00      	nop
		}
		switch(SERVO_TIMER_MAP[i]&0x0F){
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	4a19      	ldr	r2, [pc, #100]	@ (8002248 <SERVO_doArm+0xdc>)
 80021e4:	5cd3      	ldrb	r3, [r2, r3]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	3b01      	subs	r3, #1
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d819      	bhi.n	8002224 <SERVO_doArm+0xb8>
 80021f0:	a201      	add	r2, pc, #4	@ (adr r2, 80021f8 <SERVO_doArm+0x8c>)
 80021f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f6:	bf00      	nop
 80021f8:	08002209 	.word	0x08002209
 80021fc:	0800220f 	.word	0x0800220f
 8002200:	08002215 	.word	0x08002215
 8002204:	0800221d 	.word	0x0800221d
		case 1:
			ch = LL_TIM_CHANNEL_CH1;
 8002208:	2301      	movs	r3, #1
 800220a:	607b      	str	r3, [r7, #4]
			break;
 800220c:	e00a      	b.n	8002224 <SERVO_doArm+0xb8>
		case 2:
			ch = LL_TIM_CHANNEL_CH2;
 800220e:	2310      	movs	r3, #16
 8002210:	607b      	str	r3, [r7, #4]
			break;
 8002212:	e007      	b.n	8002224 <SERVO_doArm+0xb8>
		case 3:
			ch = LL_TIM_CHANNEL_CH3;
 8002214:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002218:	607b      	str	r3, [r7, #4]
			break;
 800221a:	e003      	b.n	8002224 <SERVO_doArm+0xb8>
		case 4:
			ch = LL_TIM_CHANNEL_CH4;
 800221c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002220:	607b      	str	r3, [r7, #4]
			break;
 8002222:	bf00      	nop
		}

		LL_TIM_CC_EnableChannel(timer, ch);
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	68b8      	ldr	r0, [r7, #8]
 8002228:	f7ff ff1e 	bl	8002068 <LL_TIM_CC_EnableChannel>
 800222c:	e000      	b.n	8002230 <SERVO_doArm+0xc4>
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 800222e:	bf00      	nop
	for(uint8_t i=0; i<NUM_SERVO_CHANNELS; i++)
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	3301      	adds	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
 8002236:	7bfb      	ldrb	r3, [r7, #15]
 8002238:	2b0b      	cmp	r3, #11
 800223a:	d9a6      	bls.n	800218a <SERVO_doArm+0x1e>
	}

	return;
 800223c:	bf00      	nop
}
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	200002e4 	.word	0x200002e4
 8002248:	0800ea00 	.word	0x0800ea00
 800224c:	40010000 	.word	0x40010000
 8002250:	40000400 	.word	0x40000400
 8002254:	40000800 	.word	0x40000800
 8002258:	40000c00 	.word	0x40000c00

0800225c <SERVO_doDisarm>:


void SERVO_doDisarm(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
	LL_TIM_DisableAllOutputs(TIM1);
 8002260:	4806      	ldr	r0, [pc, #24]	@ (800227c <SERVO_doDisarm+0x20>)
 8002262:	f7ff ff12 	bl	800208a <LL_TIM_DisableAllOutputs>
	LL_TIM_DisableAllOutputs(TIM3);
 8002266:	4806      	ldr	r0, [pc, #24]	@ (8002280 <SERVO_doDisarm+0x24>)
 8002268:	f7ff ff0f 	bl	800208a <LL_TIM_DisableAllOutputs>
	LL_TIM_DisableAllOutputs(TIM4);
 800226c:	4805      	ldr	r0, [pc, #20]	@ (8002284 <SERVO_doDisarm+0x28>)
 800226e:	f7ff ff0c 	bl	800208a <LL_TIM_DisableAllOutputs>
	LL_TIM_DisableAllOutputs(TIM5);
 8002272:	4805      	ldr	r0, [pc, #20]	@ (8002288 <SERVO_doDisarm+0x2c>)
 8002274:	f7ff ff09 	bl	800208a <LL_TIM_DisableAllOutputs>

	return;
 8002278:	bf00      	nop
}
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40010000 	.word	0x40010000
 8002280:	40000400 	.word	0x40000400
 8002284:	40000800 	.word	0x40000800
 8002288:	40000c00 	.word	0x40000c00

0800228c <SERVO_control>:
 * @detail 출력 프로토콜 따라 수행
 * @parm none
 * @retval none
 */
void SERVO_control(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	calculateServoOutput();
 8002290:	f000 f804 	bl	800229c <calculateServoOutput>

	controlPWM();
 8002294:	f000 f83c 	bl	8002310 <controlPWM>
	return;
 8002298:	bf00      	nop
}
 800229a:	bd80      	pop	{r7, pc}

0800229c <calculateServoOutput>:
 * @detail
 * @parm none
 * @retval none
 */
void calculateServoOutput(void)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
	SERVO* servo = &parm_servo;
 80022a2:	4b17      	ldr	r3, [pc, #92]	@ (8002300 <calculateServoOutput+0x64>)
 80022a4:	603b      	str	r3, [r7, #0]

	servo_output_raw.time_usec = system_time.time_boot_ms;
 80022a6:	4b17      	ldr	r3, [pc, #92]	@ (8002304 <calculateServoOutput+0x68>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	4a17      	ldr	r2, [pc, #92]	@ (8002308 <calculateServoOutput+0x6c>)
 80022ac:	6013      	str	r3, [r2, #0]

	for(uint8_t i=0; i<NUM_SERVO_CHANNELS; i++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	71fb      	strb	r3, [r7, #7]
 80022b2:	e01b      	b.n	80022ec <calculateServoOutput+0x50>
	{
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	79fa      	ldrb	r2, [r7, #7]
 80022ba:	2101      	movs	r1, #1
 80022bc:	fa01 f202 	lsl.w	r2, r1, r2
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00e      	beq.n	80022e4 <calculateServoOutput+0x48>

		servo_output_raw.servo_raw[i] = RC_channels.value[i];
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	79fa      	ldrb	r2, [r7, #7]
 80022ca:	4910      	ldr	r1, [pc, #64]	@ (800230c <calculateServoOutput+0x70>)
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	440b      	add	r3, r1
 80022d0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80022d4:	b298      	uxth	r0, r3
 80022d6:	490c      	ldr	r1, [pc, #48]	@ (8002308 <calculateServoOutput+0x6c>)
 80022d8:	0053      	lsls	r3, r2, #1
 80022da:	440b      	add	r3, r1
 80022dc:	4602      	mov	r2, r0
 80022de:	f8a3 2005 	strh.w	r2, [r3, #5]
 80022e2:	e000      	b.n	80022e6 <calculateServoOutput+0x4a>
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 80022e4:	bf00      	nop
	for(uint8_t i=0; i<NUM_SERVO_CHANNELS; i++)
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	3301      	adds	r3, #1
 80022ea:	71fb      	strb	r3, [r7, #7]
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	2b0b      	cmp	r3, #11
 80022f0:	d9e0      	bls.n	80022b4 <calculateServoOutput+0x18>
	}

	return;
 80022f2:	bf00      	nop
}
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	200002e4 	.word	0x200002e4
 8002304:	20000394 	.word	0x20000394
 8002308:	200003c0 	.word	0x200003c0
 800230c:	200003e8 	.word	0x200003e8

08002310 <controlPWM>:
 * @detail
 * @parm none
 * @retval none
 */
void controlPWM(void)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
	SERVO* servo = &parm_servo;
 8002316:	4b3e      	ldr	r3, [pc, #248]	@ (8002410 <controlPWM+0x100>)
 8002318:	607b      	str	r3, [r7, #4]

	for(uint8_t i=0; i<NUM_SERVO_CHANNELS; i++)
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
 800231e:	e06d      	b.n	80023fc <controlPWM+0xec>
	{
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	2101      	movs	r1, #1
 8002328:	fa01 f202 	lsl.w	r2, r1, r2
 800232c:	4013      	ands	r3, r2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d060      	beq.n	80023f4 <controlPWM+0xe4>

		TIM_TypeDef* timer;
		switch(SERVO_TIMER_MAP[i]>>4){
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	4a37      	ldr	r2, [pc, #220]	@ (8002414 <controlPWM+0x104>)
 8002336:	5cd3      	ldrb	r3, [r2, r3]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	b2db      	uxtb	r3, r3
 800233c:	3b01      	subs	r3, #1
 800233e:	2b04      	cmp	r3, #4
 8002340:	d818      	bhi.n	8002374 <controlPWM+0x64>
 8002342:	a201      	add	r2, pc, #4	@ (adr r2, 8002348 <controlPWM+0x38>)
 8002344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002348:	0800235d 	.word	0x0800235d
 800234c:	08002375 	.word	0x08002375
 8002350:	08002363 	.word	0x08002363
 8002354:	08002369 	.word	0x08002369
 8002358:	0800236f 	.word	0x0800236f
		case 1:
			timer = TIM1;
 800235c:	4b2e      	ldr	r3, [pc, #184]	@ (8002418 <controlPWM+0x108>)
 800235e:	60bb      	str	r3, [r7, #8]
			break;
 8002360:	e008      	b.n	8002374 <controlPWM+0x64>
		case 3:
			timer = TIM3;
 8002362:	4b2e      	ldr	r3, [pc, #184]	@ (800241c <controlPWM+0x10c>)
 8002364:	60bb      	str	r3, [r7, #8]
			break;
 8002366:	e005      	b.n	8002374 <controlPWM+0x64>
		case 4:
			timer = TIM4;
 8002368:	4b2d      	ldr	r3, [pc, #180]	@ (8002420 <controlPWM+0x110>)
 800236a:	60bb      	str	r3, [r7, #8]
			break;
 800236c:	e002      	b.n	8002374 <controlPWM+0x64>
		case 5:
			timer = TIM5;
 800236e:	4b2d      	ldr	r3, [pc, #180]	@ (8002424 <controlPWM+0x114>)
 8002370:	60bb      	str	r3, [r7, #8]
			break;
 8002372:	bf00      	nop
		}
		switch(SERVO_TIMER_MAP[i]&0x0F){
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	4a27      	ldr	r2, [pc, #156]	@ (8002414 <controlPWM+0x104>)
 8002378:	5cd3      	ldrb	r3, [r2, r3]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	3b01      	subs	r3, #1
 8002380:	2b03      	cmp	r3, #3
 8002382:	d838      	bhi.n	80023f6 <controlPWM+0xe6>
 8002384:	a201      	add	r2, pc, #4	@ (adr r2, 800238c <controlPWM+0x7c>)
 8002386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238a:	bf00      	nop
 800238c:	0800239d 	.word	0x0800239d
 8002390:	080023b3 	.word	0x080023b3
 8002394:	080023c9 	.word	0x080023c9
 8002398:	080023df 	.word	0x080023df
		case 1:
			timer->CCR1 = servo_output_raw.servo_raw[i];
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	4a22      	ldr	r2, [pc, #136]	@ (8002428 <controlPWM+0x118>)
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80023b0:	e021      	b.n	80023f6 <controlPWM+0xe6>
		case 2:
			timer->CCR2 = servo_output_raw.servo_raw[i];
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002428 <controlPWM+0x118>)
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4413      	add	r3, r2
 80023ba:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 80023c6:	e016      	b.n	80023f6 <controlPWM+0xe6>
		case 3:
			timer->CCR3 = servo_output_raw.servo_raw[i];
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	4a17      	ldr	r2, [pc, #92]	@ (8002428 <controlPWM+0x118>)
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4413      	add	r3, r2
 80023d0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	461a      	mov	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 80023dc:	e00b      	b.n	80023f6 <controlPWM+0xe6>
		case 4:
			timer->CCR4 = servo_output_raw.servo_raw[i];
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	4a11      	ldr	r2, [pc, #68]	@ (8002428 <controlPWM+0x118>)
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	4413      	add	r3, r2
 80023e6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 80023f2:	e000      	b.n	80023f6 <controlPWM+0xe6>
		if(!(servo->GPIO_MASK&0x1<<i)) continue;
 80023f4:	bf00      	nop
	for(uint8_t i=0; i<NUM_SERVO_CHANNELS; i++)
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	3301      	adds	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	2b0b      	cmp	r3, #11
 8002400:	d98e      	bls.n	8002320 <controlPWM+0x10>
		}
	}

	return;
 8002402:	bf00      	nop
}
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	200002e4 	.word	0x200002e4
 8002414:	0800ea00 	.word	0x0800ea00
 8002418:	40010000 	.word	0x40010000
 800241c:	40000400 	.word	0x40000400
 8002420:	40000800 	.word	0x40000800
 8002424:	40000c00 	.word	0x40000c00
 8002428:	200003c0 	.word	0x200003c0

0800242c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002430:	4b04      	ldr	r3, [pc, #16]	@ (8002444 <__NVIC_GetPriorityGrouping+0x18>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	f003 0307 	and.w	r3, r3, #7
}
 800243a:	4618      	mov	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	2b00      	cmp	r3, #0
 8002458:	db0b      	blt.n	8002472 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	f003 021f 	and.w	r2, r3, #31
 8002460:	4907      	ldr	r1, [pc, #28]	@ (8002480 <__NVIC_EnableIRQ+0x38>)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	2001      	movs	r0, #1
 800246a:	fa00 f202 	lsl.w	r2, r0, r2
 800246e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000e100 	.word	0xe000e100

08002484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	6039      	str	r1, [r7, #0]
 800248e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002494:	2b00      	cmp	r3, #0
 8002496:	db0a      	blt.n	80024ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	490c      	ldr	r1, [pc, #48]	@ (80024d0 <__NVIC_SetPriority+0x4c>)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	0112      	lsls	r2, r2, #4
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	440b      	add	r3, r1
 80024a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024ac:	e00a      	b.n	80024c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4908      	ldr	r1, [pc, #32]	@ (80024d4 <__NVIC_SetPriority+0x50>)
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	3b04      	subs	r3, #4
 80024bc:	0112      	lsls	r2, r2, #4
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	440b      	add	r3, r1
 80024c2:	761a      	strb	r2, [r3, #24]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	e000e100 	.word	0xe000e100
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d8:	b480      	push	{r7}
 80024da:	b089      	sub	sp, #36	@ 0x24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f1c3 0307 	rsb	r3, r3, #7
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	bf28      	it	cs
 80024f6:	2304      	movcs	r3, #4
 80024f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3304      	adds	r3, #4
 80024fe:	2b06      	cmp	r3, #6
 8002500:	d902      	bls.n	8002508 <NVIC_EncodePriority+0x30>
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3b03      	subs	r3, #3
 8002506:	e000      	b.n	800250a <NVIC_EncodePriority+0x32>
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	f04f 32ff 	mov.w	r2, #4294967295
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43da      	mvns	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	401a      	ands	r2, r3
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002520:	f04f 31ff 	mov.w	r1, #4294967295
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	43d9      	mvns	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002530:	4313      	orrs	r3, r2
         );
}
 8002532:	4618      	mov	r0, r3
 8002534:	3724      	adds	r7, #36	@ 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800253e:	b480      	push	{r7}
 8002540:	b089      	sub	sp, #36	@ 0x24
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	332c      	adds	r3, #44	@ 0x2c
 800254e:	4619      	mov	r1, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002556:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800255a:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	fa92 f2a2 	rbit	r2, r2
 8002562:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	61ba      	str	r2, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	2a00      	cmp	r2, #0
 800256c:	d101      	bne.n	8002572 <LL_ADC_REG_SetSequencerRanks+0x34>
  {
    return 32U;
 800256e:	2220      	movs	r2, #32
 8002570:	e003      	b.n	800257a <LL_ADC_REG_SetSequencerRanks+0x3c>
  }
  return __builtin_clz(value);
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	fab2 f282 	clz	r2, r2
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	40d3      	lsrs	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	61fb      	str	r3, [r7, #28]

  MODIFY_REG(*preg,
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	211f      	movs	r1, #31
 800258e:	fa01 f303 	lsl.w	r3, r1, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	401a      	ands	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f003 011f 	and.w	r1, r3, #31
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	fa01 f303 	lsl.w	r3, r1, r3
 80025a6:	431a      	orrs	r2, r3
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025ac:	bf00      	nop
 80025ae:	3724      	adds	r7, #36	@ 0x24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	609a      	str	r2, [r3, #8]
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025de:	b480      	push	{r7}
 80025e0:	b08f      	sub	sp, #60	@ 0x3c
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	60f8      	str	r0, [r7, #12]
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	330c      	adds	r3, #12
 80025ee:	4619      	mov	r1, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025fa:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	fa92 f2a2 	rbit	r2, r2
 8002602:	613a      	str	r2, [r7, #16]
  return result;
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	2a00      	cmp	r2, #0
 800260c:	d101      	bne.n	8002612 <LL_ADC_SetChannelSamplingTime+0x34>
    return 32U;
 800260e:	2220      	movs	r2, #32
 8002610:	e003      	b.n	800261a <LL_ADC_SetChannelSamplingTime+0x3c>
  return __builtin_clz(value);
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	fab2 f282 	clz	r2, r2
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	40d3      	lsrs	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	637b      	str	r3, [r7, #52]	@ 0x34

  MODIFY_REG(*preg,
 8002622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 800262c:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8002630:	6239      	str	r1, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	6a39      	ldr	r1, [r7, #32]
 8002634:	fa91 f1a1 	rbit	r1, r1
 8002638:	61f9      	str	r1, [r7, #28]
  return result;
 800263a:	69f9      	ldr	r1, [r7, #28]
 800263c:	6279      	str	r1, [r7, #36]	@ 0x24
  if (value == 0U)
 800263e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002640:	2900      	cmp	r1, #0
 8002642:	d101      	bne.n	8002648 <LL_ADC_SetChannelSamplingTime+0x6a>
    return 32U;
 8002644:	2120      	movs	r1, #32
 8002646:	e003      	b.n	8002650 <LL_ADC_SetChannelSamplingTime+0x72>
  return __builtin_clz(value);
 8002648:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800264a:	fab1 f181 	clz	r1, r1
 800264e:	b2c9      	uxtb	r1, r1
 8002650:	40cb      	lsrs	r3, r1
 8002652:	2107      	movs	r1, #7
 8002654:	fa01 f303 	lsl.w	r3, r1, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	401a      	ands	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8002662:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8002666:	62f9      	str	r1, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800266a:	fa91 f1a1 	rbit	r1, r1
 800266e:	62b9      	str	r1, [r7, #40]	@ 0x28
  return result;
 8002670:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002672:	6339      	str	r1, [r7, #48]	@ 0x30
  if (value == 0U)
 8002674:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002676:	2900      	cmp	r1, #0
 8002678:	d101      	bne.n	800267e <LL_ADC_SetChannelSamplingTime+0xa0>
    return 32U;
 800267a:	2120      	movs	r1, #32
 800267c:	e003      	b.n	8002686 <LL_ADC_SetChannelSamplingTime+0xa8>
  return __builtin_clz(value);
 800267e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002680:	fab1 f181 	clz	r1, r1
 8002684:	b2c9      	uxtb	r1, r1
 8002686:	40cb      	lsrs	r3, r1
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	431a      	orrs	r2, r3
 8002690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002692:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8002694:	bf00      	nop
 8002696:	373c      	adds	r7, #60	@ 0x3c
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <LL_SPI_SetStandard>:
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f023 0210 	bic.w	r2, r3, #16
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	605a      	str	r2, [r3, #4]
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <LL_TIM_EnableCounter>:
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f043 0201 	orr.w	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	601a      	str	r2, [r3, #0]
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <LL_TIM_DisableARRPreload>:
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	601a      	str	r2, [r3, #0]
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <LL_TIM_OC_DisableFast>:
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d01c      	beq.n	8002752 <LL_TIM_OC_DisableFast+0x4a>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2b04      	cmp	r3, #4
 800271c:	d017      	beq.n	800274e <LL_TIM_OC_DisableFast+0x46>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b10      	cmp	r3, #16
 8002722:	d012      	beq.n	800274a <LL_TIM_OC_DisableFast+0x42>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2b40      	cmp	r3, #64	@ 0x40
 8002728:	d00d      	beq.n	8002746 <LL_TIM_OC_DisableFast+0x3e>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002730:	d007      	beq.n	8002742 <LL_TIM_OC_DisableFast+0x3a>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002738:	d101      	bne.n	800273e <LL_TIM_OC_DisableFast+0x36>
 800273a:	2305      	movs	r3, #5
 800273c:	e00a      	b.n	8002754 <LL_TIM_OC_DisableFast+0x4c>
 800273e:	2306      	movs	r3, #6
 8002740:	e008      	b.n	8002754 <LL_TIM_OC_DisableFast+0x4c>
 8002742:	2304      	movs	r3, #4
 8002744:	e006      	b.n	8002754 <LL_TIM_OC_DisableFast+0x4c>
 8002746:	2303      	movs	r3, #3
 8002748:	e004      	b.n	8002754 <LL_TIM_OC_DisableFast+0x4c>
 800274a:	2302      	movs	r3, #2
 800274c:	e002      	b.n	8002754 <LL_TIM_OC_DisableFast+0x4c>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <LL_TIM_OC_DisableFast+0x4c>
 8002752:	2300      	movs	r3, #0
 8002754:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3318      	adds	r3, #24
 800275a:	4619      	mov	r1, r3
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	4a0b      	ldr	r2, [pc, #44]	@ (800278c <LL_TIM_OC_DisableFast+0x84>)
 8002760:	5cd3      	ldrb	r3, [r2, r3]
 8002762:	440b      	add	r3, r1
 8002764:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	4908      	ldr	r1, [pc, #32]	@ (8002790 <LL_TIM_OC_DisableFast+0x88>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	4619      	mov	r1, r3
 8002772:	2304      	movs	r3, #4
 8002774:	408b      	lsls	r3, r1
 8002776:	43db      	mvns	r3, r3
 8002778:	401a      	ands	r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	601a      	str	r2, [r3, #0]
}
 800277e:	bf00      	nop
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	0800ea0c 	.word	0x0800ea0c
 8002790:	0800ea14 	.word	0x0800ea14

08002794 <LL_TIM_OC_EnablePreload>:
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d01c      	beq.n	80027de <LL_TIM_OC_EnablePreload+0x4a>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d017      	beq.n	80027da <LL_TIM_OC_EnablePreload+0x46>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b10      	cmp	r3, #16
 80027ae:	d012      	beq.n	80027d6 <LL_TIM_OC_EnablePreload+0x42>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	2b40      	cmp	r3, #64	@ 0x40
 80027b4:	d00d      	beq.n	80027d2 <LL_TIM_OC_EnablePreload+0x3e>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027bc:	d007      	beq.n	80027ce <LL_TIM_OC_EnablePreload+0x3a>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027c4:	d101      	bne.n	80027ca <LL_TIM_OC_EnablePreload+0x36>
 80027c6:	2305      	movs	r3, #5
 80027c8:	e00a      	b.n	80027e0 <LL_TIM_OC_EnablePreload+0x4c>
 80027ca:	2306      	movs	r3, #6
 80027cc:	e008      	b.n	80027e0 <LL_TIM_OC_EnablePreload+0x4c>
 80027ce:	2304      	movs	r3, #4
 80027d0:	e006      	b.n	80027e0 <LL_TIM_OC_EnablePreload+0x4c>
 80027d2:	2303      	movs	r3, #3
 80027d4:	e004      	b.n	80027e0 <LL_TIM_OC_EnablePreload+0x4c>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e002      	b.n	80027e0 <LL_TIM_OC_EnablePreload+0x4c>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <LL_TIM_OC_EnablePreload+0x4c>
 80027de:	2300      	movs	r3, #0
 80027e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3318      	adds	r3, #24
 80027e6:	4619      	mov	r1, r3
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002814 <LL_TIM_OC_EnablePreload+0x80>)
 80027ec:	5cd3      	ldrb	r3, [r2, r3]
 80027ee:	440b      	add	r3, r1
 80027f0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	4907      	ldr	r1, [pc, #28]	@ (8002818 <LL_TIM_OC_EnablePreload+0x84>)
 80027fa:	5ccb      	ldrb	r3, [r1, r3]
 80027fc:	4619      	mov	r1, r3
 80027fe:	2308      	movs	r3, #8
 8002800:	408b      	lsls	r3, r1
 8002802:	431a      	orrs	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	601a      	str	r2, [r3, #0]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	0800ea0c 	.word	0x0800ea0c
 8002818:	0800ea14 	.word	0x0800ea14

0800281c <LL_TIM_SetClockSource>:
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800282e:	f023 0307 	bic.w	r3, r3, #7
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	609a      	str	r2, [r3, #8]
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <LL_TIM_SetTriggerOutput>:
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	605a      	str	r2, [r3, #4]
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <LL_TIM_DisableMasterSlaveMode>:
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	609a      	str	r2, [r3, #8]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f043 0201 	orr.w	r2, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	60da      	str	r2, [r3, #12]
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <LL_USART_Enable>:
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	60da      	str	r2, [r3, #12]
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <LL_USART_ConfigAsyncMode>:
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	615a      	str	r2, [r3, #20]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <LL_USART_ConfigHalfDuplexMode>:
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f023 0222 	bic.w	r2, r3, #34	@ 0x22
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	615a      	str	r2, [r3, #20]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	f043 0208 	orr.w	r2, r3, #8
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	615a      	str	r2, [r3, #20]
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <LL_USART_EnableIT_RXNE>:
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	@ 0x24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	330c      	adds	r3, #12
 800293c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	e853 3f00 	ldrex	r3, [r3]
 8002944:	60bb      	str	r3, [r7, #8]
   return(result);
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	f043 0320 	orr.w	r3, r3, #32
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	330c      	adds	r3, #12
 8002952:	69fa      	ldr	r2, [r7, #28]
 8002954:	61ba      	str	r2, [r7, #24]
 8002956:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002958:	6979      	ldr	r1, [r7, #20]
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	e841 2300 	strex	r3, r2, [r1]
 8002960:	613b      	str	r3, [r7, #16]
   return(result);
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1e7      	bne.n	8002938 <LL_USART_EnableIT_RXNE+0x8>
}
 8002968:	bf00      	nop
 800296a:	bf00      	nop
 800296c:	3724      	adds	r7, #36	@ 0x24
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <LL_GPIO_ResetOutputPin>:
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	041a      	lsls	r2, r3, #16
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	619a      	str	r2, [r3, #24]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <LL_AHB1_GRP1_EnableClock>:
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800299c:	4b08      	ldr	r3, [pc, #32]	@ (80029c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800299e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029a0:	4907      	ldr	r1, [pc, #28]	@ (80029c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80029a8:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4013      	ands	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029b2:	68fb      	ldr	r3, [r7, #12]
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	40023800 	.word	0x40023800

080029c4 <LL_APB1_GRP1_EnableClock>:
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80029cc:	4b08      	ldr	r3, [pc, #32]	@ (80029f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80029ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029d0:	4907      	ldr	r1, [pc, #28]	@ (80029f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80029d8:	4b05      	ldr	r3, [pc, #20]	@ (80029f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80029da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4013      	ands	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029e2:	68fb      	ldr	r3, [r7, #12]
}
 80029e4:	bf00      	nop
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	40023800 	.word	0x40023800

080029f4 <LL_APB2_GRP1_EnableClock>:
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80029fc:	4b08      	ldr	r3, [pc, #32]	@ (8002a20 <LL_APB2_GRP1_EnableClock+0x2c>)
 80029fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a00:	4907      	ldr	r1, [pc, #28]	@ (8002a20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a08:	4b05      	ldr	r3, [pc, #20]	@ (8002a20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a12:	68fb      	ldr	r3, [r7, #12]
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	40023800 	.word	0x40023800

08002a24 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
	{
		while(!LL_USART_IsActiveFlag_TXE(USART2));
		LL_USART_TransmitData8(USART2, *(p+i));
	}
#else
	while(USBD_BUSY == CDC_Transmit_FS((uint8_t*)p, len)) {}
 8002a30:	bf00      	nop
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	4619      	mov	r1, r3
 8002a38:	68b8      	ldr	r0, [r7, #8]
 8002a3a:	f008 feb5 	bl	800b7a8 <CDC_Transmit_FS>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d0f6      	beq.n	8002a32 <_write+0xe>
	return len;
 8002a44:	687b      	ldr	r3, [r7, #4]
#endif
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a54:	f001 f90e 	bl	8003c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a58:	f000 f852 	bl	8002b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a5c:	f000 fe66 	bl	800372c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002a60:	f000 fd54 	bl	800350c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002a64:	f000 fa2a 	bl	8002ebc <MX_TIM3_Init>
  MX_TIM4_Init();
 8002a68:	f000 fae2 	bl	8003030 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002a6c:	f000 fb8c 	bl	8003188 <MX_TIM5_Init>
  MX_TIM13_Init();
 8002a70:	f000 fc2e 	bl	80032d0 <MX_TIM13_Init>
  MX_SPI1_Init();
 8002a74:	f000 f924 	bl	8002cc0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002a78:	f000 fda6 	bl	80035c8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002a7c:	f000 fe04 	bl	8003688 <MX_USART3_UART_Init>
  MX_UART4_Init();
 8002a80:	f000 fc7a 	bl	8003378 <MX_UART4_Init>
  MX_UART5_Init();
 8002a84:	f000 fcca 	bl	800341c <MX_UART5_Init>
  MX_USB_DEVICE_Init();
 8002a88:	f008 fdd0 	bl	800b62c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8002a8c:	f000 f8a2 	bl	8002bd4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002a90:	f000 f968 	bl	8002d64 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_EnableCounter(TIM4);
 8002a94:	4814      	ldr	r0, [pc, #80]	@ (8002ae8 <main+0x98>)
 8002a96:	f7ff fe16 	bl	80026c6 <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM13);
 8002a9a:	4814      	ldr	r0, [pc, #80]	@ (8002aec <main+0x9c>)
 8002a9c:	f7ff fe13 	bl	80026c6 <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM14);
 8002aa0:	4813      	ldr	r0, [pc, #76]	@ (8002af0 <main+0xa0>)
 8002aa2:	f7ff fe10 	bl	80026c6 <LL_TIM_EnableCounter>

  PARM_load();
 8002aa6:	f7fe fd87 	bl	80015b8 <PARM_load>

  SERVO_Initialization();
 8002aaa:	f7ff faff 	bl	80020ac <SERVO_Initialization>
  BuzzerPlayInit();
 8002aae:	f7fe fa83 	bl	8000fb8 <BuzzerPlayInit>

  // interrupt when finished receiving
  LL_USART_EnableIT_RXNE(USART1);
 8002ab2:	4810      	ldr	r0, [pc, #64]	@ (8002af4 <main+0xa4>)
 8002ab4:	f7ff ff3c 	bl	8002930 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART2);
 8002ab8:	480f      	ldr	r0, [pc, #60]	@ (8002af8 <main+0xa8>)
 8002aba:	f7ff ff39 	bl	8002930 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART3);
 8002abe:	480f      	ldr	r0, [pc, #60]	@ (8002afc <main+0xac>)
 8002ac0:	f7ff ff36 	bl	8002930 <LL_USART_EnableIT_RXNE>

  // 필수 기기 점검
  RC_Initialization();
 8002ac4:	f7fe fe8c 	bl	80017e0 <RC_Initialization>
  ICM42688_Initialization();
 8002ac8:	f7fe fc86 	bl	80013d8 <ICM42688_Initialization>
  BuzzerPlayOneCycle();
 8002acc:	f7fe faa2 	bl	8001014 <BuzzerPlayOneCycle>
  SERVO_doArm();
 8002ad0:	f7ff fb4c 	bl	800216c <SERVO_doArm>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(RC_GetData() != 0)
 8002ad4:	f7fe fe94 	bl	8001800 <RC_GetData>
	  {
	  }

	  ICM42688_Get6AxisRawData();
 8002ad8:	f7fe fcd2 	bl	8001480 <ICM42688_Get6AxisRawData>

	  SERVO_control();
 8002adc:	f7ff fbd6 	bl	800228c <SERVO_control>

	  Log_Send();
 8002ae0:	f7fe fd24 	bl	800152c <Log_Send>
	  if(RC_GetData() != 0)
 8002ae4:	e7f6      	b.n	8002ad4 <main+0x84>
 8002ae6:	bf00      	nop
 8002ae8:	40000800 	.word	0x40000800
 8002aec:	40001c00 	.word	0x40001c00
 8002af0:	40002000 	.word	0x40002000
 8002af4:	40011000 	.word	0x40011000
 8002af8:	40004400 	.word	0x40004400
 8002afc:	40004800 	.word	0x40004800

08002b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b094      	sub	sp, #80	@ 0x50
 8002b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b06:	f107 0320 	add.w	r3, r7, #32
 8002b0a:	2230      	movs	r2, #48	@ 0x30
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f00a f8e7 	bl	800cce2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b14:	f107 030c 	add.w	r3, r7, #12
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	60da      	str	r2, [r3, #12]
 8002b22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b24:	2300      	movs	r3, #0
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	4b28      	ldr	r3, [pc, #160]	@ (8002bcc <SystemClock_Config+0xcc>)
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	4a27      	ldr	r2, [pc, #156]	@ (8002bcc <SystemClock_Config+0xcc>)
 8002b2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b32:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b34:	4b25      	ldr	r3, [pc, #148]	@ (8002bcc <SystemClock_Config+0xcc>)
 8002b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b40:	2300      	movs	r3, #0
 8002b42:	607b      	str	r3, [r7, #4]
 8002b44:	4b22      	ldr	r3, [pc, #136]	@ (8002bd0 <SystemClock_Config+0xd0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a21      	ldr	r2, [pc, #132]	@ (8002bd0 <SystemClock_Config+0xd0>)
 8002b4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	4b1f      	ldr	r3, [pc, #124]	@ (8002bd0 <SystemClock_Config+0xd0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b58:	607b      	str	r3, [r7, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b64:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b66:	2302      	movs	r3, #2
 8002b68:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b6a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002b70:	2308      	movs	r3, #8
 8002b72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002b74:	23a8      	movs	r3, #168	@ 0xa8
 8002b76:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002b7c:	2307      	movs	r3, #7
 8002b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b80:	f107 0320 	add.w	r3, r7, #32
 8002b84:	4618      	mov	r0, r3
 8002b86:	f002 fe0b 	bl	80057a0 <HAL_RCC_OscConfig>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002b90:	f000 fe1a 	bl	80037c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b94:	230f      	movs	r3, #15
 8002b96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002ba0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002ba4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ba6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002baa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002bac:	f107 030c 	add.w	r3, r7, #12
 8002bb0:	2105      	movs	r1, #5
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f003 f86c 	bl	8005c90 <HAL_RCC_ClockConfig>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002bbe:	f000 fe03 	bl	80037c8 <Error_Handler>
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	3750      	adds	r7, #80	@ 0x50
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40007000 	.word	0x40007000

08002bd4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b092      	sub	sp, #72	@ 0x48
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8002bda:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8002be6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	605a      	str	r2, [r3, #4]
 8002bf0:	609a      	str	r2, [r3, #8]
 8002bf2:	60da      	str	r2, [r3, #12]
 8002bf4:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8002bf6:	f107 0318 	add.w	r3, r7, #24
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	605a      	str	r2, [r3, #4]
 8002c00:	609a      	str	r2, [r3, #8]
 8002c02:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c04:	463b      	mov	r3, r7
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	605a      	str	r2, [r3, #4]
 8002c0c:	609a      	str	r2, [r3, #8]
 8002c0e:	60da      	str	r2, [r3, #12]
 8002c10:	611a      	str	r2, [r3, #16]
 8002c12:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8002c14:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002c18:	f7ff feec 	bl	80029f4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002c1c:	2004      	movs	r0, #4
 8002c1e:	f7ff feb9 	bl	8002994 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC1   ------> ADC1_IN11
  */
  GPIO_InitStruct.Pin = RSSI_Pin;
 8002c22:	2302      	movs	r3, #2
 8002c24:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002c26:	2303      	movs	r3, #3
 8002c28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(RSSI_GPIO_Port, &GPIO_InitStruct);
 8002c2e:	463b      	mov	r3, r7
 8002c30:	4619      	mov	r1, r3
 8002c32:	481f      	ldr	r0, [pc, #124]	@ (8002cb0 <MX_ADC1_Init+0xdc>)
 8002c34:	f004 f9d9 	bl	8006fea <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8002c40:	2300      	movs	r3, #0
 8002c42:	647b      	str	r3, [r7, #68]	@ 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8002c44:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002c48:	4619      	mov	r1, r3
 8002c4a:	481a      	ldr	r0, [pc, #104]	@ (8002cb4 <MX_ADC1_Init+0xe0>)
 8002c4c:	f004 f814 	bl	8006c78 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8002c54:	2300      	movs	r3, #0
 8002c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8002c64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4812      	ldr	r0, [pc, #72]	@ (8002cb4 <MX_ADC1_Init+0xe0>)
 8002c6c:	f004 f830 	bl	8006cd0 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8002c70:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c74:	480f      	ldr	r0, [pc, #60]	@ (8002cb4 <MX_ADC1_Init+0xe0>)
 8002c76:	f7ff fc9f 	bl	80025b8 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c7e:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8002c80:	2300      	movs	r3, #0
 8002c82:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8002c84:	f107 0318 	add.w	r3, r7, #24
 8002c88:	4619      	mov	r1, r3
 8002c8a:	480b      	ldr	r0, [pc, #44]	@ (8002cb8 <MX_ADC1_Init+0xe4>)
 8002c8c:	f003 ffac 	bl	8006be8 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_11);
 8002c90:	4a0a      	ldr	r2, [pc, #40]	@ (8002cbc <MX_ADC1_Init+0xe8>)
 8002c92:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c96:	4807      	ldr	r0, [pc, #28]	@ (8002cb4 <MX_ADC1_Init+0xe0>)
 8002c98:	f7ff fc51 	bl	800253e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	4907      	ldr	r1, [pc, #28]	@ (8002cbc <MX_ADC1_Init+0xe8>)
 8002ca0:	4804      	ldr	r0, [pc, #16]	@ (8002cb4 <MX_ADC1_Init+0xe0>)
 8002ca2:	f7ff fc9c 	bl	80025de <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ca6:	bf00      	nop
 8002ca8:	3748      	adds	r7, #72	@ 0x48
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40020800 	.word	0x40020800
 8002cb4:	40012000 	.word	0x40012000
 8002cb8:	40012300 	.word	0x40012300
 8002cbc:	0030000b 	.word	0x0030000b

08002cc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b090      	sub	sp, #64	@ 0x40
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002cc6:	f107 0318 	add.w	r3, r7, #24
 8002cca:	2228      	movs	r2, #40	@ 0x28
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f00a f807 	bl	800cce2 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd4:	463b      	mov	r3, r7
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	605a      	str	r2, [r3, #4]
 8002cdc:	609a      	str	r2, [r3, #8]
 8002cde:	60da      	str	r2, [r3, #12]
 8002ce0:	611a      	str	r2, [r3, #16]
 8002ce2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002ce4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002ce8:	f7ff fe84 	bl	80029f4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002cec:	2001      	movs	r0, #1
 8002cee:	f7ff fe51 	bl	8002994 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002cf2:	23e0      	movs	r3, #224	@ 0xe0
 8002cf4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002d06:	2305      	movs	r3, #5
 8002d08:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0a:	463b      	mov	r3, r7
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4813      	ldr	r0, [pc, #76]	@ (8002d5c <MX_SPI1_Init+0x9c>)
 8002d10:	f004 f96b 	bl	8006fea <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002d18:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002d1c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002d22:	2302      	movs	r3, #2
 8002d24:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002d26:	2301      	movs	r3, #1
 8002d28:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002d2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8002d30:	2318      	movs	r3, #24
 8002d32:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002d34:	2300      	movs	r3, #0
 8002d36:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002d3c:	230a      	movs	r3, #10
 8002d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002d40:	f107 0318 	add.w	r3, r7, #24
 8002d44:	4619      	mov	r1, r3
 8002d46:	4806      	ldr	r0, [pc, #24]	@ (8002d60 <MX_SPI1_Init+0xa0>)
 8002d48:	f004 fb29 	bl	800739e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4804      	ldr	r0, [pc, #16]	@ (8002d60 <MX_SPI1_Init+0xa0>)
 8002d50:	f7ff fca6 	bl	80026a0 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d54:	bf00      	nop
 8002d56:	3740      	adds	r7, #64	@ 0x40
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40020000 	.word	0x40020000
 8002d60:	40013000 	.word	0x40013000

08002d64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b096      	sub	sp, #88	@ 0x58
 8002d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d6a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	605a      	str	r2, [r3, #4]
 8002d74:	609a      	str	r2, [r3, #8]
 8002d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d78:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
 8002d8c:	609a      	str	r2, [r3, #8]
 8002d8e:	60da      	str	r2, [r3, #12]
 8002d90:	611a      	str	r2, [r3, #16]
 8002d92:	615a      	str	r2, [r3, #20]
 8002d94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	2220      	movs	r2, #32
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f009 ffa0 	bl	800cce2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002da2:	4b44      	ldr	r3, [pc, #272]	@ (8002eb4 <MX_TIM1_Init+0x150>)
 8002da4:	4a44      	ldr	r2, [pc, #272]	@ (8002eb8 <MX_TIM1_Init+0x154>)
 8002da6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002da8:	4b42      	ldr	r3, [pc, #264]	@ (8002eb4 <MX_TIM1_Init+0x150>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dae:	4b41      	ldr	r3, [pc, #260]	@ (8002eb4 <MX_TIM1_Init+0x150>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002db4:	4b3f      	ldr	r3, [pc, #252]	@ (8002eb4 <MX_TIM1_Init+0x150>)
 8002db6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002dba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dbc:	4b3d      	ldr	r3, [pc, #244]	@ (8002eb4 <MX_TIM1_Init+0x150>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dc2:	4b3c      	ldr	r3, [pc, #240]	@ (8002eb4 <MX_TIM1_Init+0x150>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dc8:	4b3a      	ldr	r3, [pc, #232]	@ (8002eb4 <MX_TIM1_Init+0x150>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002dce:	4839      	ldr	r0, [pc, #228]	@ (8002eb4 <MX_TIM1_Init+0x150>)
 8002dd0:	f003 f954 	bl	800607c <HAL_TIM_Base_Init>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002dda:	f000 fcf5 	bl	80037c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002de2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002de4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002de8:	4619      	mov	r1, r3
 8002dea:	4832      	ldr	r0, [pc, #200]	@ (8002eb4 <MX_TIM1_Init+0x150>)
 8002dec:	f003 fa4a 	bl	8006284 <HAL_TIM_ConfigClockSource>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002df6:	f000 fce7 	bl	80037c8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002dfa:	482e      	ldr	r0, [pc, #184]	@ (8002eb4 <MX_TIM1_Init+0x150>)
 8002dfc:	f003 f98d 	bl	800611a <HAL_TIM_OC_Init>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002e06:	f000 fcdf 	bl	80037c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e12:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e16:	4619      	mov	r1, r3
 8002e18:	4826      	ldr	r0, [pc, #152]	@ (8002eb4 <MX_TIM1_Init+0x150>)
 8002e1a:	f003 fdf1 	bl	8006a00 <HAL_TIMEx_MasterConfigSynchronization>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002e24:	f000 fcd0 	bl	80037c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e30:	2300      	movs	r3, #0
 8002e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e34:	2300      	movs	r3, #0
 8002e36:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e40:	2300      	movs	r3, #0
 8002e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e48:	2204      	movs	r2, #4
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4819      	ldr	r0, [pc, #100]	@ (8002eb4 <MX_TIM1_Init+0x150>)
 8002e4e:	f003 f9bd 	bl	80061cc <HAL_TIM_OC_ConfigChannel>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002e58:	f000 fcb6 	bl	80037c8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e60:	2208      	movs	r2, #8
 8002e62:	4619      	mov	r1, r3
 8002e64:	4813      	ldr	r0, [pc, #76]	@ (8002eb4 <MX_TIM1_Init+0x150>)
 8002e66:	f003 f9b1 	bl	80061cc <HAL_TIM_OC_ConfigChannel>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002e70:	f000 fcaa 	bl	80037c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e74:	2300      	movs	r3, #0
 8002e76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	4619      	mov	r1, r3
 8002e96:	4807      	ldr	r0, [pc, #28]	@ (8002eb4 <MX_TIM1_Init+0x150>)
 8002e98:	f003 fe2e 	bl	8006af8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002ea2:	f000 fc91 	bl	80037c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002ea6:	4803      	ldr	r0, [pc, #12]	@ (8002eb4 <MX_TIM1_Init+0x150>)
 8002ea8:	f000 fcde 	bl	8003868 <HAL_TIM_MspPostInit>

}
 8002eac:	bf00      	nop
 8002eae:	3758      	adds	r7, #88	@ 0x58
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20000414 	.word	0x20000414
 8002eb8:	40010000 	.word	0x40010000

08002ebc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b094      	sub	sp, #80	@ 0x50
 8002ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002ec2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	609a      	str	r2, [r3, #8]
 8002ece:	60da      	str	r2, [r3, #12]
 8002ed0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002ed2:	f107 031c 	add.w	r3, r7, #28
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f009 ff01 	bl	800cce2 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee0:	1d3b      	adds	r3, r7, #4
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	605a      	str	r2, [r3, #4]
 8002ee8:	609a      	str	r2, [r3, #8]
 8002eea:	60da      	str	r2, [r3, #12]
 8002eec:	611a      	str	r2, [r3, #16]
 8002eee:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002ef0:	2002      	movs	r0, #2
 8002ef2:	f7ff fd67 	bl	80029c4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 8002ef6:	2353      	movs	r3, #83	@ 0x53
 8002ef8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002efa:	2300      	movs	r3, #0
 8002efc:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 20000-LL_TIM_IC_FILTER_FDIV1_N2;
 8002efe:	4b48      	ldr	r3, [pc, #288]	@ (8003020 <MX_TIM3_Init+0x164>)
 8002f00:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002f02:	2300      	movs	r3, #0
 8002f04:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002f06:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4845      	ldr	r0, [pc, #276]	@ (8003024 <MX_TIM3_Init+0x168>)
 8002f0e:	f004 fb0b 	bl	8007528 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8002f12:	4844      	ldr	r0, [pc, #272]	@ (8003024 <MX_TIM3_Init+0x168>)
 8002f14:	f7ff fbe7 	bl	80026e6 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4842      	ldr	r0, [pc, #264]	@ (8003024 <MX_TIM3_Init+0x168>)
 8002f1c:	f7ff fc7e 	bl	800281c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8002f20:	2101      	movs	r1, #1
 8002f22:	4840      	ldr	r0, [pc, #256]	@ (8003024 <MX_TIM3_Init+0x168>)
 8002f24:	f7ff fc36 	bl	8002794 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002f28:	2360      	movs	r3, #96	@ 0x60
 8002f2a:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002f3c:	f107 031c 	add.w	r3, r7, #28
 8002f40:	461a      	mov	r2, r3
 8002f42:	2101      	movs	r1, #1
 8002f44:	4837      	ldr	r0, [pc, #220]	@ (8003024 <MX_TIM3_Init+0x168>)
 8002f46:	f004 fb89 	bl	800765c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	4835      	ldr	r0, [pc, #212]	@ (8003024 <MX_TIM3_Init+0x168>)
 8002f4e:	f7ff fbdb 	bl	8002708 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 8002f52:	2110      	movs	r1, #16
 8002f54:	4833      	ldr	r0, [pc, #204]	@ (8003024 <MX_TIM3_Init+0x168>)
 8002f56:	f7ff fc1d 	bl	8002794 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002f5a:	f107 031c 	add.w	r3, r7, #28
 8002f5e:	461a      	mov	r2, r3
 8002f60:	2110      	movs	r1, #16
 8002f62:	4830      	ldr	r0, [pc, #192]	@ (8003024 <MX_TIM3_Init+0x168>)
 8002f64:	f004 fb7a 	bl	800765c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8002f68:	2110      	movs	r1, #16
 8002f6a:	482e      	ldr	r0, [pc, #184]	@ (8003024 <MX_TIM3_Init+0x168>)
 8002f6c:	f7ff fbcc 	bl	8002708 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
 8002f70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f74:	482b      	ldr	r0, [pc, #172]	@ (8003024 <MX_TIM3_Init+0x168>)
 8002f76:	f7ff fc0d 	bl	8002794 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002f7a:	f107 031c 	add.w	r3, r7, #28
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f84:	4827      	ldr	r0, [pc, #156]	@ (8003024 <MX_TIM3_Init+0x168>)
 8002f86:	f004 fb69 	bl	800765c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
 8002f8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f8e:	4825      	ldr	r0, [pc, #148]	@ (8003024 <MX_TIM3_Init+0x168>)
 8002f90:	f7ff fbba 	bl	8002708 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8002f94:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002f98:	4822      	ldr	r0, [pc, #136]	@ (8003024 <MX_TIM3_Init+0x168>)
 8002f9a:	f7ff fbfb 	bl	8002794 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8002f9e:	f107 031c 	add.w	r3, r7, #28
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fa8:	481e      	ldr	r0, [pc, #120]	@ (8003024 <MX_TIM3_Init+0x168>)
 8002faa:	f004 fb57 	bl	800765c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8002fae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fb2:	481c      	ldr	r0, [pc, #112]	@ (8003024 <MX_TIM3_Init+0x168>)
 8002fb4:	f7ff fba8 	bl	8002708 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002fb8:	2100      	movs	r1, #0
 8002fba:	481a      	ldr	r0, [pc, #104]	@ (8003024 <MX_TIM3_Init+0x168>)
 8002fbc:	f7ff fc43 	bl	8002846 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002fc0:	4818      	ldr	r0, [pc, #96]	@ (8003024 <MX_TIM3_Init+0x168>)
 8002fc2:	f7ff fc53 	bl	800286c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002fc6:	2002      	movs	r0, #2
 8002fc8:	f7ff fce4 	bl	8002994 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002fcc:	2004      	movs	r0, #4
 8002fce:	f7ff fce1 	bl	8002994 <LL_AHB1_GRP1_EnableClock>
  PB0   ------> TIM3_CH3
  PB1   ------> TIM3_CH4
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = MAIN_CH9_Pin|MAIN_CH10_Pin;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fea:	1d3b      	adds	r3, r7, #4
 8002fec:	4619      	mov	r1, r3
 8002fee:	480e      	ldr	r0, [pc, #56]	@ (8003028 <MX_TIM3_Init+0x16c>)
 8002ff0:	f003 fffb 	bl	8006fea <LL_GPIO_Init>

  GPIO_InitStruct.Pin = MAIN_CH2_Pin|MAIN_CH3_Pin;
 8002ff4:	23c0      	movs	r3, #192	@ 0xc0
 8002ff6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003000:	2300      	movs	r3, #0
 8003002:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003008:	2302      	movs	r3, #2
 800300a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800300c:	1d3b      	adds	r3, r7, #4
 800300e:	4619      	mov	r1, r3
 8003010:	4806      	ldr	r0, [pc, #24]	@ (800302c <MX_TIM3_Init+0x170>)
 8003012:	f003 ffea 	bl	8006fea <LL_GPIO_Init>

}
 8003016:	bf00      	nop
 8003018:	3750      	adds	r7, #80	@ 0x50
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	fff04e20 	.word	0xfff04e20
 8003024:	40000400 	.word	0x40000400
 8003028:	40020400 	.word	0x40020400
 800302c:	40020800 	.word	0x40020800

08003030 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b094      	sub	sp, #80	@ 0x50
 8003034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003036:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	609a      	str	r2, [r3, #8]
 8003042:	60da      	str	r2, [r3, #12]
 8003044:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003046:	f107 031c 	add.w	r3, r7, #28
 800304a:	2220      	movs	r2, #32
 800304c:	2100      	movs	r1, #0
 800304e:	4618      	mov	r0, r3
 8003050:	f009 fe47 	bl	800cce2 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003054:	1d3b      	adds	r3, r7, #4
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	609a      	str	r2, [r3, #8]
 800305e:	60da      	str	r2, [r3, #12]
 8003060:	611a      	str	r2, [r3, #16]
 8003062:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8003064:	2004      	movs	r0, #4
 8003066:	f7ff fcad 	bl	80029c4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 4;
 800306a:	2304      	movs	r3, #4
 800306c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800306e:	2300      	movs	r3, #0
 8003070:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 64220-LL_TIM_IC_FILTER_FDIV1_N2;
 8003072:	4b41      	ldr	r3, [pc, #260]	@ (8003178 <MX_TIM4_Init+0x148>)
 8003074:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003076:	2300      	movs	r3, #0
 8003078:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 800307a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800307e:	4619      	mov	r1, r3
 8003080:	483e      	ldr	r0, [pc, #248]	@ (800317c <MX_TIM4_Init+0x14c>)
 8003082:	f004 fa51 	bl	8007528 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8003086:	483d      	ldr	r0, [pc, #244]	@ (800317c <MX_TIM4_Init+0x14c>)
 8003088:	f7ff fb2d 	bl	80026e6 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 800308c:	2100      	movs	r1, #0
 800308e:	483b      	ldr	r0, [pc, #236]	@ (800317c <MX_TIM4_Init+0x14c>)
 8003090:	f7ff fbc4 	bl	800281c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH2);
 8003094:	2110      	movs	r1, #16
 8003096:	4839      	ldr	r0, [pc, #228]	@ (800317c <MX_TIM4_Init+0x14c>)
 8003098:	f7ff fb7c 	bl	8002794 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800309c:	2360      	movs	r3, #96	@ 0x60
 800309e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80030a0:	2300      	movs	r3, #0
 80030a2:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80030a4:	2300      	movs	r3, #0
 80030a6:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80030ac:	2300      	movs	r3, #0
 80030ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80030b0:	f107 031c 	add.w	r3, r7, #28
 80030b4:	461a      	mov	r2, r3
 80030b6:	2110      	movs	r1, #16
 80030b8:	4830      	ldr	r0, [pc, #192]	@ (800317c <MX_TIM4_Init+0x14c>)
 80030ba:	f004 facf 	bl	800765c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 80030be:	2110      	movs	r1, #16
 80030c0:	482e      	ldr	r0, [pc, #184]	@ (800317c <MX_TIM4_Init+0x14c>)
 80030c2:	f7ff fb21 	bl	8002708 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH3);
 80030c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80030ca:	482c      	ldr	r0, [pc, #176]	@ (800317c <MX_TIM4_Init+0x14c>)
 80030cc:	f7ff fb62 	bl	8002794 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80030d0:	f107 031c 	add.w	r3, r7, #28
 80030d4:	461a      	mov	r2, r3
 80030d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80030da:	4828      	ldr	r0, [pc, #160]	@ (800317c <MX_TIM4_Init+0x14c>)
 80030dc:	f004 fabe 	bl	800765c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 80030e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80030e4:	4825      	ldr	r0, [pc, #148]	@ (800317c <MX_TIM4_Init+0x14c>)
 80030e6:	f7ff fb0f 	bl	8002708 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH4);
 80030ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030ee:	4823      	ldr	r0, [pc, #140]	@ (800317c <MX_TIM4_Init+0x14c>)
 80030f0:	f7ff fb50 	bl	8002794 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80030f4:	f107 031c 	add.w	r3, r7, #28
 80030f8:	461a      	mov	r2, r3
 80030fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030fe:	481f      	ldr	r0, [pc, #124]	@ (800317c <MX_TIM4_Init+0x14c>)
 8003100:	f004 faac 	bl	800765c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH4);
 8003104:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003108:	481c      	ldr	r0, [pc, #112]	@ (800317c <MX_TIM4_Init+0x14c>)
 800310a:	f7ff fafd 	bl	8002708 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 800310e:	2100      	movs	r1, #0
 8003110:	481a      	ldr	r0, [pc, #104]	@ (800317c <MX_TIM4_Init+0x14c>)
 8003112:	f7ff fb98 	bl	8002846 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8003116:	4819      	ldr	r0, [pc, #100]	@ (800317c <MX_TIM4_Init+0x14c>)
 8003118:	f7ff fba8 	bl	800286c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800311c:	2008      	movs	r0, #8
 800311e:	f7ff fc39 	bl	8002994 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003122:	2002      	movs	r0, #2
 8003124:	f7ff fc36 	bl	8002994 <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PD14   ------> TIM4_CH3
  PD15   ------> TIM4_CH4
  PB7   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = Buzzer_Pin|MAIN_CH4_Pin;
 8003128:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800312c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800312e:	2302      	movs	r3, #2
 8003130:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800313e:	2302      	movs	r3, #2
 8003140:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003142:	1d3b      	adds	r3, r7, #4
 8003144:	4619      	mov	r1, r3
 8003146:	480e      	ldr	r0, [pc, #56]	@ (8003180 <MX_TIM4_Init+0x150>)
 8003148:	f003 ff4f 	bl	8006fea <LL_GPIO_Init>

  GPIO_InitStruct.Pin = MAIN_CH1_Pin;
 800314c:	2380      	movs	r3, #128	@ 0x80
 800314e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003150:	2302      	movs	r3, #2
 8003152:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003158:	2300      	movs	r3, #0
 800315a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003160:	2302      	movs	r3, #2
 8003162:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(MAIN_CH1_GPIO_Port, &GPIO_InitStruct);
 8003164:	1d3b      	adds	r3, r7, #4
 8003166:	4619      	mov	r1, r3
 8003168:	4806      	ldr	r0, [pc, #24]	@ (8003184 <MX_TIM4_Init+0x154>)
 800316a:	f003 ff3e 	bl	8006fea <LL_GPIO_Init>

}
 800316e:	bf00      	nop
 8003170:	3750      	adds	r7, #80	@ 0x50
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	fff0fadc 	.word	0xfff0fadc
 800317c:	40000800 	.word	0x40000800
 8003180:	40020c00 	.word	0x40020c00
 8003184:	40020400 	.word	0x40020400

08003188 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b094      	sub	sp, #80	@ 0x50
 800318c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800318e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	605a      	str	r2, [r3, #4]
 8003198:	609a      	str	r2, [r3, #8]
 800319a:	60da      	str	r2, [r3, #12]
 800319c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800319e:	f107 031c 	add.w	r3, r7, #28
 80031a2:	2220      	movs	r2, #32
 80031a4:	2100      	movs	r1, #0
 80031a6:	4618      	mov	r0, r3
 80031a8:	f009 fd9b 	bl	800cce2 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ac:	1d3b      	adds	r3, r7, #4
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	605a      	str	r2, [r3, #4]
 80031b4:	609a      	str	r2, [r3, #8]
 80031b6:	60da      	str	r2, [r3, #12]
 80031b8:	611a      	str	r2, [r3, #16]
 80031ba:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 80031bc:	2008      	movs	r0, #8
 80031be:	f7ff fc01 	bl	80029c4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 80031c2:	2353      	movs	r3, #83	@ 0x53
 80031c4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80031c6:	2300      	movs	r3, #0
 80031c8:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 20000-LL_TIM_IC_FILTER_FDIV1_N2;
 80031ca:	4b3e      	ldr	r3, [pc, #248]	@ (80032c4 <MX_TIM5_Init+0x13c>)
 80031cc:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80031ce:	2300      	movs	r3, #0
 80031d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 80031d2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80031d6:	4619      	mov	r1, r3
 80031d8:	483b      	ldr	r0, [pc, #236]	@ (80032c8 <MX_TIM5_Init+0x140>)
 80031da:	f004 f9a5 	bl	8007528 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 80031de:	483a      	ldr	r0, [pc, #232]	@ (80032c8 <MX_TIM5_Init+0x140>)
 80031e0:	f7ff fa81 	bl	80026e6 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 80031e4:	2100      	movs	r1, #0
 80031e6:	4838      	ldr	r0, [pc, #224]	@ (80032c8 <MX_TIM5_Init+0x140>)
 80031e8:	f7ff fb18 	bl	800281c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 80031ec:	2101      	movs	r1, #1
 80031ee:	4836      	ldr	r0, [pc, #216]	@ (80032c8 <MX_TIM5_Init+0x140>)
 80031f0:	f7ff fad0 	bl	8002794 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80031f4:	2360      	movs	r3, #96	@ 0x60
 80031f6:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80031f8:	2300      	movs	r3, #0
 80031fa:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80031fc:	2300      	movs	r3, #0
 80031fe:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003204:	2300      	movs	r3, #0
 8003206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003208:	f107 031c 	add.w	r3, r7, #28
 800320c:	461a      	mov	r2, r3
 800320e:	2101      	movs	r1, #1
 8003210:	482d      	ldr	r0, [pc, #180]	@ (80032c8 <MX_TIM5_Init+0x140>)
 8003212:	f004 fa23 	bl	800765c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH1);
 8003216:	2101      	movs	r1, #1
 8003218:	482b      	ldr	r0, [pc, #172]	@ (80032c8 <MX_TIM5_Init+0x140>)
 800321a:	f7ff fa75 	bl	8002708 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 800321e:	2110      	movs	r1, #16
 8003220:	4829      	ldr	r0, [pc, #164]	@ (80032c8 <MX_TIM5_Init+0x140>)
 8003222:	f7ff fab7 	bl	8002794 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8003226:	f107 031c 	add.w	r3, r7, #28
 800322a:	461a      	mov	r2, r3
 800322c:	2110      	movs	r1, #16
 800322e:	4826      	ldr	r0, [pc, #152]	@ (80032c8 <MX_TIM5_Init+0x140>)
 8003230:	f004 fa14 	bl	800765c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH2);
 8003234:	2110      	movs	r1, #16
 8003236:	4824      	ldr	r0, [pc, #144]	@ (80032c8 <MX_TIM5_Init+0x140>)
 8003238:	f7ff fa66 	bl	8002708 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 800323c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003240:	4821      	ldr	r0, [pc, #132]	@ (80032c8 <MX_TIM5_Init+0x140>)
 8003242:	f7ff faa7 	bl	8002794 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8003246:	f107 031c 	add.w	r3, r7, #28
 800324a:	461a      	mov	r2, r3
 800324c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003250:	481d      	ldr	r0, [pc, #116]	@ (80032c8 <MX_TIM5_Init+0x140>)
 8003252:	f004 fa03 	bl	800765c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH3);
 8003256:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800325a:	481b      	ldr	r0, [pc, #108]	@ (80032c8 <MX_TIM5_Init+0x140>)
 800325c:	f7ff fa54 	bl	8002708 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 8003260:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003264:	4818      	ldr	r0, [pc, #96]	@ (80032c8 <MX_TIM5_Init+0x140>)
 8003266:	f7ff fa95 	bl	8002794 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800326a:	f107 031c 	add.w	r3, r7, #28
 800326e:	461a      	mov	r2, r3
 8003270:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003274:	4814      	ldr	r0, [pc, #80]	@ (80032c8 <MX_TIM5_Init+0x140>)
 8003276:	f004 f9f1 	bl	800765c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH4);
 800327a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800327e:	4812      	ldr	r0, [pc, #72]	@ (80032c8 <MX_TIM5_Init+0x140>)
 8003280:	f7ff fa42 	bl	8002708 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8003284:	2100      	movs	r1, #0
 8003286:	4810      	ldr	r0, [pc, #64]	@ (80032c8 <MX_TIM5_Init+0x140>)
 8003288:	f7ff fadd 	bl	8002846 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 800328c:	480e      	ldr	r0, [pc, #56]	@ (80032c8 <MX_TIM5_Init+0x140>)
 800328e:	f7ff faed 	bl	800286c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003292:	2001      	movs	r0, #1
 8003294:	f7ff fb7e 	bl	8002994 <LL_AHB1_GRP1_EnableClock>
  PA0-WKUP   ------> TIM5_CH1
  PA1   ------> TIM5_CH2
  PA2   ------> TIM5_CH3
  PA3   ------> TIM5_CH4
  */
  GPIO_InitStruct.Pin = MAIN_CH5_Pin|MAIN_CH6_Pin|MAIN_CH7_Pin|MAIN_CH8_Pin;
 8003298:	230f      	movs	r3, #15
 800329a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800329c:	2302      	movs	r3, #2
 800329e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80032ac:	2302      	movs	r3, #2
 80032ae:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b0:	1d3b      	adds	r3, r7, #4
 80032b2:	4619      	mov	r1, r3
 80032b4:	4805      	ldr	r0, [pc, #20]	@ (80032cc <MX_TIM5_Init+0x144>)
 80032b6:	f003 fe98 	bl	8006fea <LL_GPIO_Init>

}
 80032ba:	bf00      	nop
 80032bc:	3750      	adds	r7, #80	@ 0x50
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	fff04e20 	.word	0xfff04e20
 80032c8:	40000c00 	.word	0x40000c00
 80032cc:	40020000 	.word	0x40020000

080032d0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08e      	sub	sp, #56	@ 0x38
 80032d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80032d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	605a      	str	r2, [r3, #4]
 80032e0:	609a      	str	r2, [r3, #8]
 80032e2:	60da      	str	r2, [r3, #12]
 80032e4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80032e6:	1d3b      	adds	r3, r7, #4
 80032e8:	2220      	movs	r2, #32
 80032ea:	2100      	movs	r1, #0
 80032ec:	4618      	mov	r0, r3
 80032ee:	f009 fcf8 	bl	800cce2 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM13);
 80032f2:	2080      	movs	r0, #128	@ 0x80
 80032f4:	f7ff fb66 	bl	80029c4 <LL_APB1_GRP1_EnableClock>

  /* TIM13 interrupt Init */
  NVIC_SetPriority(TIM8_UP_TIM13_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80032f8:	f7ff f898 	bl	800242c <__NVIC_GetPriorityGrouping>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2200      	movs	r2, #0
 8003300:	2100      	movs	r1, #0
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff f8e8 	bl	80024d8 <NVIC_EncodePriority>
 8003308:	4603      	mov	r3, r0
 800330a:	4619      	mov	r1, r3
 800330c:	202c      	movs	r0, #44	@ 0x2c
 800330e:	f7ff f8b9 	bl	8002484 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003312:	202c      	movs	r0, #44	@ 0x2c
 8003314:	f7ff f898 	bl	8002448 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  TIM_InitStruct.Prescaler = 1;
 8003318:	2301      	movs	r3, #1
 800331a:	84bb      	strh	r3, [r7, #36]	@ 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800331c:	2300      	movs	r3, #0
 800331e:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_InitStruct.Autoreload = 42000-LL_TIM_IC_FILTER_FDIV1_N2;
 8003320:	4b13      	ldr	r3, [pc, #76]	@ (8003370 <MX_TIM13_Init+0xa0>)
 8003322:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003324:	2300      	movs	r3, #0
 8003326:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_Init(TIM13, &TIM_InitStruct);
 8003328:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800332c:	4619      	mov	r1, r3
 800332e:	4811      	ldr	r0, [pc, #68]	@ (8003374 <MX_TIM13_Init+0xa4>)
 8003330:	f004 f8fa 	bl	8007528 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM13);
 8003334:	480f      	ldr	r0, [pc, #60]	@ (8003374 <MX_TIM13_Init+0xa4>)
 8003336:	f7ff f9d6 	bl	80026e6 <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 800333a:	2300      	movs	r3, #0
 800333c:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800333e:	2300      	movs	r3, #0
 8003340:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM13, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800334e:	1d3b      	adds	r3, r7, #4
 8003350:	461a      	mov	r2, r3
 8003352:	2101      	movs	r1, #1
 8003354:	4807      	ldr	r0, [pc, #28]	@ (8003374 <MX_TIM13_Init+0xa4>)
 8003356:	f004 f981 	bl	800765c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM13, LL_TIM_CHANNEL_CH1);
 800335a:	2101      	movs	r1, #1
 800335c:	4805      	ldr	r0, [pc, #20]	@ (8003374 <MX_TIM13_Init+0xa4>)
 800335e:	f7ff f9d3 	bl	8002708 <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM13_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM13);
 8003362:	4804      	ldr	r0, [pc, #16]	@ (8003374 <MX_TIM13_Init+0xa4>)
 8003364:	f7ff fa92 	bl	800288c <LL_TIM_EnableIT_UPDATE>
//  TIM13->ARR = 42000;
//  TIM13->PSC = 2;

  /* USER CODE END TIM13_Init 2 */

}
 8003368:	bf00      	nop
 800336a:	3738      	adds	r7, #56	@ 0x38
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	fff0a410 	.word	0xfff0a410
 8003374:	40001c00 	.word	0x40001c00

08003378 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08e      	sub	sp, #56	@ 0x38
 800337c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800337e:	f107 031c 	add.w	r3, r7, #28
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	605a      	str	r2, [r3, #4]
 8003388:	609a      	str	r2, [r3, #8]
 800338a:	60da      	str	r2, [r3, #12]
 800338c:	611a      	str	r2, [r3, #16]
 800338e:	615a      	str	r2, [r3, #20]
 8003390:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003392:	1d3b      	adds	r3, r7, #4
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	605a      	str	r2, [r3, #4]
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	60da      	str	r2, [r3, #12]
 800339e:	611a      	str	r2, [r3, #16]
 80033a0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80033a2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80033a6:	f7ff fb0d 	bl	80029c4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80033aa:	2004      	movs	r0, #4
 80033ac:	f7ff faf2 	bl	8002994 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = GPS1_TX_Pin|GPS2_RX_Pin;
 80033b0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80033b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80033b6:	2302      	movs	r3, #2
 80033b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80033ba:	2303      	movs	r3, #3
 80033bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80033c6:	2308      	movs	r3, #8
 80033c8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033ca:	1d3b      	adds	r3, r7, #4
 80033cc:	4619      	mov	r1, r3
 80033ce:	4811      	ldr	r0, [pc, #68]	@ (8003414 <MX_UART4_Init+0x9c>)
 80033d0:	f003 fe0b 	bl	8006fea <LL_GPIO_Init>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80033d4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80033d8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80033da:	2300      	movs	r3, #0
 80033dc:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80033de:	2300      	movs	r3, #0
 80033e0:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80033e2:	2300      	movs	r3, #0
 80033e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80033e6:	230c      	movs	r3, #12
 80033e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80033ee:	2300      	movs	r3, #0
 80033f0:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 80033f2:	f107 031c 	add.w	r3, r7, #28
 80033f6:	4619      	mov	r1, r3
 80033f8:	4807      	ldr	r0, [pc, #28]	@ (8003418 <MX_UART4_Init+0xa0>)
 80033fa:	f004 fd7d 	bl	8007ef8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 80033fe:	4806      	ldr	r0, [pc, #24]	@ (8003418 <MX_UART4_Init+0xa0>)
 8003400:	f7ff fa64 	bl	80028cc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8003404:	4804      	ldr	r0, [pc, #16]	@ (8003418 <MX_UART4_Init+0xa0>)
 8003406:	f7ff fa51 	bl	80028ac <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800340a:	bf00      	nop
 800340c:	3738      	adds	r7, #56	@ 0x38
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40020800 	.word	0x40020800
 8003418:	40004c00 	.word	0x40004c00

0800341c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08e      	sub	sp, #56	@ 0x38
 8003420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003422:	f107 031c 	add.w	r3, r7, #28
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	605a      	str	r2, [r3, #4]
 800342c:	609a      	str	r2, [r3, #8]
 800342e:	60da      	str	r2, [r3, #12]
 8003430:	611a      	str	r2, [r3, #16]
 8003432:	615a      	str	r2, [r3, #20]
 8003434:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003436:	1d3b      	adds	r3, r7, #4
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	611a      	str	r2, [r3, #16]
 8003444:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8003446:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800344a:	f7ff fabb 	bl	80029c4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800344e:	2004      	movs	r0, #4
 8003450:	f7ff faa0 	bl	8002994 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8003454:	2008      	movs	r0, #8
 8003456:	f7ff fa9d 	bl	8002994 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = GPS2_TX_Pin;
 800345a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800345e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003460:	2302      	movs	r3, #2
 8003462:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003464:	2303      	movs	r3, #3
 8003466:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003468:	2300      	movs	r3, #0
 800346a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8003470:	2308      	movs	r3, #8
 8003472:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPS2_TX_GPIO_Port, &GPIO_InitStruct);
 8003474:	1d3b      	adds	r3, r7, #4
 8003476:	4619      	mov	r1, r3
 8003478:	4821      	ldr	r0, [pc, #132]	@ (8003500 <MX_UART5_Init+0xe4>)
 800347a:	f003 fdb6 	bl	8006fea <LL_GPIO_Init>

  GPIO_InitStruct.Pin = GPS2_RXD2_Pin;
 800347e:	2304      	movs	r3, #4
 8003480:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003482:	2302      	movs	r3, #2
 8003484:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003486:	2303      	movs	r3, #3
 8003488:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8003492:	2308      	movs	r3, #8
 8003494:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPS2_RXD2_GPIO_Port, &GPIO_InitStruct);
 8003496:	1d3b      	adds	r3, r7, #4
 8003498:	4619      	mov	r1, r3
 800349a:	481a      	ldr	r0, [pc, #104]	@ (8003504 <MX_UART5_Init+0xe8>)
 800349c:	f003 fda5 	bl	8006fea <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80034a0:	f7fe ffc4 	bl	800242c <__NVIC_GetPriorityGrouping>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2200      	movs	r2, #0
 80034a8:	2100      	movs	r1, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff f814 	bl	80024d8 <NVIC_EncodePriority>
 80034b0:	4603      	mov	r3, r0
 80034b2:	4619      	mov	r1, r3
 80034b4:	2035      	movs	r0, #53	@ 0x35
 80034b6:	f7fe ffe5 	bl	8002484 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 80034ba:	2035      	movs	r0, #53	@ 0x35
 80034bc:	f7fe ffc4 	bl	8002448 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80034c0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80034c4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80034c6:	2300      	movs	r3, #0
 80034c8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80034ca:	2300      	movs	r3, #0
 80034cc:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80034d2:	230c      	movs	r3, #12
 80034d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80034d6:	2300      	movs	r3, #0
 80034d8:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80034da:	2300      	movs	r3, #0
 80034dc:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 80034de:	f107 031c 	add.w	r3, r7, #28
 80034e2:	4619      	mov	r1, r3
 80034e4:	4808      	ldr	r0, [pc, #32]	@ (8003508 <MX_UART5_Init+0xec>)
 80034e6:	f004 fd07 	bl	8007ef8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 80034ea:	4807      	ldr	r0, [pc, #28]	@ (8003508 <MX_UART5_Init+0xec>)
 80034ec:	f7ff f9ee 	bl	80028cc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 80034f0:	4805      	ldr	r0, [pc, #20]	@ (8003508 <MX_UART5_Init+0xec>)
 80034f2:	f7ff f9db 	bl	80028ac <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80034f6:	bf00      	nop
 80034f8:	3738      	adds	r7, #56	@ 0x38
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40020800 	.word	0x40020800
 8003504:	40020c00 	.word	0x40020c00
 8003508:	40005000 	.word	0x40005000

0800350c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08e      	sub	sp, #56	@ 0x38
 8003510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003512:	f107 031c 	add.w	r3, r7, #28
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	605a      	str	r2, [r3, #4]
 800351c:	609a      	str	r2, [r3, #8]
 800351e:	60da      	str	r2, [r3, #12]
 8003520:	611a      	str	r2, [r3, #16]
 8003522:	615a      	str	r2, [r3, #20]
 8003524:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003526:	1d3b      	adds	r3, r7, #4
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	611a      	str	r2, [r3, #16]
 8003534:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8003536:	2010      	movs	r0, #16
 8003538:	f7ff fa5c 	bl	80029f4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800353c:	2001      	movs	r0, #1
 800353e:	f7ff fa29 	bl	8002994 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = RC_SRXL2_Pin;
 8003542:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003546:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003548:	2302      	movs	r3, #2
 800354a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800354c:	2303      	movs	r3, #3
 800354e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003550:	2300      	movs	r3, #0
 8003552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8003554:	2301      	movs	r3, #1
 8003556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003558:	2307      	movs	r3, #7
 800355a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(RC_SRXL2_GPIO_Port, &GPIO_InitStruct);
 800355c:	1d3b      	adds	r3, r7, #4
 800355e:	4619      	mov	r1, r3
 8003560:	4817      	ldr	r0, [pc, #92]	@ (80035c0 <MX_USART1_UART_Init+0xb4>)
 8003562:	f003 fd42 	bl	8006fea <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003566:	f7fe ff61 	bl	800242c <__NVIC_GetPriorityGrouping>
 800356a:	4603      	mov	r3, r0
 800356c:	2200      	movs	r2, #0
 800356e:	2100      	movs	r1, #0
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe ffb1 	bl	80024d8 <NVIC_EncodePriority>
 8003576:	4603      	mov	r3, r0
 8003578:	4619      	mov	r1, r3
 800357a:	2025      	movs	r0, #37	@ 0x25
 800357c:	f7fe ff82 	bl	8002484 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8003580:	2025      	movs	r0, #37	@ 0x25
 8003582:	f7fe ff61 	bl	8002448 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003586:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800358a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800358c:	2300      	movs	r3, #0
 800358e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003590:	2300      	movs	r3, #0
 8003592:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003594:	2300      	movs	r3, #0
 8003596:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003598:	230c      	movs	r3, #12
 800359a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800359c:	2300      	movs	r3, #0
 800359e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80035a0:	f107 031c 	add.w	r3, r7, #28
 80035a4:	4619      	mov	r1, r3
 80035a6:	4807      	ldr	r0, [pc, #28]	@ (80035c4 <MX_USART1_UART_Init+0xb8>)
 80035a8:	f004 fca6 	bl	8007ef8 <LL_USART_Init>
  LL_USART_Enable(USART1);
 80035ac:	4805      	ldr	r0, [pc, #20]	@ (80035c4 <MX_USART1_UART_Init+0xb8>)
 80035ae:	f7ff f97d 	bl	80028ac <LL_USART_Enable>
  LL_USART_ConfigHalfDuplexMode(USART1);
 80035b2:	4804      	ldr	r0, [pc, #16]	@ (80035c4 <MX_USART1_UART_Init+0xb8>)
 80035b4:	f7ff f9a0 	bl	80028f8 <LL_USART_ConfigHalfDuplexMode>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80035b8:	bf00      	nop
 80035ba:	3738      	adds	r7, #56	@ 0x38
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40020000 	.word	0x40020000
 80035c4:	40011000 	.word	0x40011000

080035c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08e      	sub	sp, #56	@ 0x38
 80035cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80035ce:	f107 031c 	add.w	r3, r7, #28
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	605a      	str	r2, [r3, #4]
 80035d8:	609a      	str	r2, [r3, #8]
 80035da:	60da      	str	r2, [r3, #12]
 80035dc:	611a      	str	r2, [r3, #16]
 80035de:	615a      	str	r2, [r3, #20]
 80035e0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	605a      	str	r2, [r3, #4]
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	60da      	str	r2, [r3, #12]
 80035ee:	611a      	str	r2, [r3, #16]
 80035f0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80035f2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80035f6:	f7ff f9e5 	bl	80029c4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80035fa:	2008      	movs	r0, #8
 80035fc:	f7ff f9ca 	bl	8002994 <LL_AHB1_GRP1_EnableClock>
  PD3   ------> USART2_CTS
  PD4   ------> USART2_RTS
  PD5   ------> USART2_TX
  PD6   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|Telm1_TX_Pin|Telm1_RX_Pin;
 8003600:	2378      	movs	r3, #120	@ 0x78
 8003602:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003604:	2302      	movs	r3, #2
 8003606:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003608:	2303      	movs	r3, #3
 800360a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800360c:	2300      	movs	r3, #0
 800360e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003614:	2307      	movs	r3, #7
 8003616:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003618:	1d3b      	adds	r3, r7, #4
 800361a:	4619      	mov	r1, r3
 800361c:	4818      	ldr	r0, [pc, #96]	@ (8003680 <MX_USART2_UART_Init+0xb8>)
 800361e:	f003 fce4 	bl	8006fea <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003622:	f7fe ff03 	bl	800242c <__NVIC_GetPriorityGrouping>
 8003626:	4603      	mov	r3, r0
 8003628:	2200      	movs	r2, #0
 800362a:	2100      	movs	r1, #0
 800362c:	4618      	mov	r0, r3
 800362e:	f7fe ff53 	bl	80024d8 <NVIC_EncodePriority>
 8003632:	4603      	mov	r3, r0
 8003634:	4619      	mov	r1, r3
 8003636:	2026      	movs	r0, #38	@ 0x26
 8003638:	f7fe ff24 	bl	8002484 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800363c:	2026      	movs	r0, #38	@ 0x26
 800363e:	f7fe ff03 	bl	8002448 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 57600;
 8003642:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8003646:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003648:	2300      	movs	r3, #0
 800364a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800364c:	2300      	movs	r3, #0
 800364e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003650:	2300      	movs	r3, #0
 8003652:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003654:	230c      	movs	r3, #12
 8003656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003658:	2300      	movs	r3, #0
 800365a:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800365c:	2300      	movs	r3, #0
 800365e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8003660:	f107 031c 	add.w	r3, r7, #28
 8003664:	4619      	mov	r1, r3
 8003666:	4807      	ldr	r0, [pc, #28]	@ (8003684 <MX_USART2_UART_Init+0xbc>)
 8003668:	f004 fc46 	bl	8007ef8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800366c:	4805      	ldr	r0, [pc, #20]	@ (8003684 <MX_USART2_UART_Init+0xbc>)
 800366e:	f7ff f92d 	bl	80028cc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8003672:	4804      	ldr	r0, [pc, #16]	@ (8003684 <MX_USART2_UART_Init+0xbc>)
 8003674:	f7ff f91a 	bl	80028ac <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003678:	bf00      	nop
 800367a:	3738      	adds	r7, #56	@ 0x38
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40020c00 	.word	0x40020c00
 8003684:	40004400 	.word	0x40004400

08003688 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08e      	sub	sp, #56	@ 0x38
 800368c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800368e:	f107 031c 	add.w	r3, r7, #28
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	605a      	str	r2, [r3, #4]
 8003698:	609a      	str	r2, [r3, #8]
 800369a:	60da      	str	r2, [r3, #12]
 800369c:	611a      	str	r2, [r3, #16]
 800369e:	615a      	str	r2, [r3, #20]
 80036a0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a2:	1d3b      	adds	r3, r7, #4
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	609a      	str	r2, [r3, #8]
 80036ac:	60da      	str	r2, [r3, #12]
 80036ae:	611a      	str	r2, [r3, #16]
 80036b0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80036b2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80036b6:	f7ff f985 	bl	80029c4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80036ba:	2008      	movs	r0, #8
 80036bc:	f7ff f96a 	bl	8002994 <LL_AHB1_GRP1_EnableClock>
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  PD11   ------> USART3_CTS
  PD12   ------> USART3_RTS
  */
  GPIO_InitStruct.Pin = Telm2_TX_Pin|Telm2_RX_Pin|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 80036c0:	f44f 53d8 	mov.w	r3, #6912	@ 0x1b00
 80036c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80036c6:	2302      	movs	r3, #2
 80036c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80036ca:	2303      	movs	r3, #3
 80036cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80036d6:	2307      	movs	r3, #7
 80036d8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036da:	1d3b      	adds	r3, r7, #4
 80036dc:	4619      	mov	r1, r3
 80036de:	4811      	ldr	r0, [pc, #68]	@ (8003724 <MX_USART3_UART_Init+0x9c>)
 80036e0:	f003 fc83 	bl	8006fea <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80036e4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80036e8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80036ea:	2300      	movs	r3, #0
 80036ec:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80036ee:	2300      	movs	r3, #0
 80036f0:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80036f2:	2300      	movs	r3, #0
 80036f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80036f6:	230c      	movs	r3, #12
 80036f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80036fa:	2300      	movs	r3, #0
 80036fc:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80036fe:	2300      	movs	r3, #0
 8003700:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8003702:	f107 031c 	add.w	r3, r7, #28
 8003706:	4619      	mov	r1, r3
 8003708:	4807      	ldr	r0, [pc, #28]	@ (8003728 <MX_USART3_UART_Init+0xa0>)
 800370a:	f004 fbf5 	bl	8007ef8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800370e:	4806      	ldr	r0, [pc, #24]	@ (8003728 <MX_USART3_UART_Init+0xa0>)
 8003710:	f7ff f8dc 	bl	80028cc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8003714:	4804      	ldr	r0, [pc, #16]	@ (8003728 <MX_USART3_UART_Init+0xa0>)
 8003716:	f7ff f8c9 	bl	80028ac <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800371a:	bf00      	nop
 800371c:	3738      	adds	r7, #56	@ 0x38
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40020c00 	.word	0x40020c00
 8003728:	40004800 	.word	0x40004800

0800372c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003732:	463b      	mov	r3, r7
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	611a      	str	r2, [r3, #16]
 8003740:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8003742:	2010      	movs	r0, #16
 8003744:	f7ff f926 	bl	8002994 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8003748:	2080      	movs	r0, #128	@ 0x80
 800374a:	f7ff f923 	bl	8002994 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800374e:	2004      	movs	r0, #4
 8003750:	f7ff f920 	bl	8002994 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003754:	2001      	movs	r0, #1
 8003756:	f7ff f91d 	bl	8002994 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800375a:	2002      	movs	r0, #2
 800375c:	f7ff f91a 	bl	8002994 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8003760:	2008      	movs	r0, #8
 8003762:	f7ff f917 	bl	8002994 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LED_BLUE_Pin|GYRO1_NSS_Pin|LED_RED_Pin|LED_YELLOW_Pin);
 8003766:	2127      	movs	r1, #39	@ 0x27
 8003768:	4815      	ldr	r0, [pc, #84]	@ (80037c0 <MX_GPIO_Init+0x94>)
 800376a:	f7ff f904 	bl	8002976 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPS1_SW_LED_GPIO_Port, GPS1_SW_LED_Pin);
 800376e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003772:	4814      	ldr	r0, [pc, #80]	@ (80037c4 <MX_GPIO_Init+0x98>)
 8003774:	f7ff f8ff 	bl	8002976 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_BLUE_Pin|GYRO1_NSS_Pin|LED_RED_Pin|LED_YELLOW_Pin;
 8003778:	2327      	movs	r3, #39	@ 0x27
 800377a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800377c:	2301      	movs	r3, #1
 800377e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003780:	2300      	movs	r3, #0
 8003782:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003788:	2300      	movs	r3, #0
 800378a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800378c:	463b      	mov	r3, r7
 800378e:	4619      	mov	r1, r3
 8003790:	480b      	ldr	r0, [pc, #44]	@ (80037c0 <MX_GPIO_Init+0x94>)
 8003792:	f003 fc2a 	bl	8006fea <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GPS1_SW_LED_Pin;
 8003796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800379a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800379c:	2301      	movs	r3, #1
 800379e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80037a8:	2300      	movs	r3, #0
 80037aa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPS1_SW_LED_GPIO_Port, &GPIO_InitStruct);
 80037ac:	463b      	mov	r3, r7
 80037ae:	4619      	mov	r1, r3
 80037b0:	4804      	ldr	r0, [pc, #16]	@ (80037c4 <MX_GPIO_Init+0x98>)
 80037b2:	f003 fc1a 	bl	8006fea <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80037b6:	bf00      	nop
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40020c00 	.word	0x40020c00

080037c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037cc:	b672      	cpsid	i
}
 80037ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037d0:	bf00      	nop
 80037d2:	e7fd      	b.n	80037d0 <Error_Handler+0x8>

080037d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	607b      	str	r3, [r7, #4]
 80037de:	4b10      	ldr	r3, [pc, #64]	@ (8003820 <HAL_MspInit+0x4c>)
 80037e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e2:	4a0f      	ldr	r2, [pc, #60]	@ (8003820 <HAL_MspInit+0x4c>)
 80037e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80037ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003820 <HAL_MspInit+0x4c>)
 80037ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037f2:	607b      	str	r3, [r7, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	603b      	str	r3, [r7, #0]
 80037fa:	4b09      	ldr	r3, [pc, #36]	@ (8003820 <HAL_MspInit+0x4c>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	4a08      	ldr	r2, [pc, #32]	@ (8003820 <HAL_MspInit+0x4c>)
 8003800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003804:	6413      	str	r3, [r2, #64]	@ 0x40
 8003806:	4b06      	ldr	r3, [pc, #24]	@ (8003820 <HAL_MspInit+0x4c>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40023800 	.word	0x40023800

08003824 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a0b      	ldr	r2, [pc, #44]	@ (8003860 <HAL_TIM_Base_MspInit+0x3c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d10d      	bne.n	8003852 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	4b0a      	ldr	r3, [pc, #40]	@ (8003864 <HAL_TIM_Base_MspInit+0x40>)
 800383c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383e:	4a09      	ldr	r2, [pc, #36]	@ (8003864 <HAL_TIM_Base_MspInit+0x40>)
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	6453      	str	r3, [r2, #68]	@ 0x44
 8003846:	4b07      	ldr	r3, [pc, #28]	@ (8003864 <HAL_TIM_Base_MspInit+0x40>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003852:	bf00      	nop
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40010000 	.word	0x40010000
 8003864:	40023800 	.word	0x40023800

08003868 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003870:	f107 030c 	add.w	r3, r7, #12
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a12      	ldr	r2, [pc, #72]	@ (80038d0 <HAL_TIM_MspPostInit+0x68>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d11e      	bne.n	80038c8 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	4b11      	ldr	r3, [pc, #68]	@ (80038d4 <HAL_TIM_MspPostInit+0x6c>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003892:	4a10      	ldr	r2, [pc, #64]	@ (80038d4 <HAL_TIM_MspPostInit+0x6c>)
 8003894:	f043 0310 	orr.w	r3, r3, #16
 8003898:	6313      	str	r3, [r2, #48]	@ 0x30
 800389a:	4b0e      	ldr	r3, [pc, #56]	@ (80038d4 <HAL_TIM_MspPostInit+0x6c>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389e:	f003 0310 	and.w	r3, r3, #16
 80038a2:	60bb      	str	r3, [r7, #8]
 80038a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80038a6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80038aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ac:	2302      	movs	r3, #2
 80038ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80038b8:	2301      	movs	r3, #1
 80038ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038bc:	f107 030c 	add.w	r3, r7, #12
 80038c0:	4619      	mov	r1, r3
 80038c2:	4805      	ldr	r0, [pc, #20]	@ (80038d8 <HAL_TIM_MspPostInit+0x70>)
 80038c4:	f000 fb7e 	bl	8003fc4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80038c8:	bf00      	nop
 80038ca:	3720      	adds	r7, #32
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40010000 	.word	0x40010000
 80038d4:	40023800 	.word	0x40023800
 80038d8:	40021000 	.word	0x40021000

080038dc <LL_TIM_ClearFlag_UPDATE>:
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f06f 0201 	mvn.w	r2, #1
 80038ea:	611a      	str	r2, [r3, #16]
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <LL_TIM_IsActiveFlag_UPDATE>:
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <LL_USART_IsActiveFlag_RXNE>:
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b20      	cmp	r3, #32
 8003930:	bf0c      	ite	eq
 8003932:	2301      	moveq	r3, #1
 8003934:	2300      	movne	r3, #0
 8003936:	b2db      	uxtb	r3, r3
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <LL_USART_ClearFlag_RXNE>:
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f06f 0220 	mvn.w	r2, #32
 8003952:	601a      	str	r2, [r3, #0]
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <LL_USART_ReceiveData8>:
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	b2db      	uxtb	r3, r3
}
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800397a:	b480      	push	{r7}
 800397c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800397e:	bf00      	nop
 8003980:	e7fd      	b.n	800397e <NMI_Handler+0x4>

08003982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003982:	b480      	push	{r7}
 8003984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003986:	bf00      	nop
 8003988:	e7fd      	b.n	8003986 <HardFault_Handler+0x4>

0800398a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800398a:	b480      	push	{r7}
 800398c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800398e:	bf00      	nop
 8003990:	e7fd      	b.n	800398e <MemManage_Handler+0x4>

08003992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003992:	b480      	push	{r7}
 8003994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003996:	bf00      	nop
 8003998:	e7fd      	b.n	8003996 <BusFault_Handler+0x4>

0800399a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800399a:	b480      	push	{r7}
 800399c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800399e:	bf00      	nop
 80039a0:	e7fd      	b.n	800399e <UsageFault_Handler+0x4>

080039a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039a2:	b480      	push	{r7}
 80039a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039a6:	bf00      	nop
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039be:	b480      	push	{r7}
 80039c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039c2:	bf00      	nop
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039d0:	f000 f9a2 	bl	8003d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039d4:	bf00      	nop
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART1))
 80039de:	480d      	ldr	r0, [pc, #52]	@ (8003a14 <USART1_IRQHandler+0x3c>)
 80039e0:	f7ff ff9d 	bl	800391e <LL_USART_IsActiveFlag_RXNE>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d010      	beq.n	8003a0c <USART1_IRQHandler+0x34>
	{
		LL_USART_ClearFlag_RXNE(USART1);
 80039ea:	480a      	ldr	r0, [pc, #40]	@ (8003a14 <USART1_IRQHandler+0x3c>)
 80039ec:	f7ff ffaa 	bl	8003944 <LL_USART_ClearFlag_RXNE>
		uint8_t uart1_rx_data = LL_USART_ReceiveData8(USART1);
 80039f0:	4808      	ldr	r0, [pc, #32]	@ (8003a14 <USART1_IRQHandler+0x3c>)
 80039f2:	f7ff ffb5 	bl	8003960 <LL_USART_ReceiveData8>
 80039f6:	4603      	mov	r3, r0
 80039f8:	71fb      	strb	r3, [r7, #7]

		RC_rxFlag.half_using = 1;
 80039fa:	4a07      	ldr	r2, [pc, #28]	@ (8003a18 <USART1_IRQHandler+0x40>)
 80039fc:	7813      	ldrb	r3, [r2, #0]
 80039fe:	f043 0302 	orr.w	r3, r3, #2
 8003a02:	7013      	strb	r3, [r2, #0]

		// IRQ2 수행
		RC_reviceIRQ2(uart1_rx_data);
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd ff02 	bl	8001810 <RC_reviceIRQ2>

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a0c:	bf00      	nop
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40011000 	.word	0x40011000
 8003a18:	2000035c 	.word	0x2000035c

08003a1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART2))
 8003a20:	480a      	ldr	r0, [pc, #40]	@ (8003a4c <USART2_IRQHandler+0x30>)
 8003a22:	f7ff ff7c 	bl	800391e <LL_USART_IsActiveFlag_RXNE>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00c      	beq.n	8003a46 <USART2_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART2);
 8003a2c:	4807      	ldr	r0, [pc, #28]	@ (8003a4c <USART2_IRQHandler+0x30>)
 8003a2e:	f7ff ff89 	bl	8003944 <LL_USART_ClearFlag_RXNE>

		uart2_rx_data = LL_USART_ReceiveData8(USART2);
 8003a32:	4806      	ldr	r0, [pc, #24]	@ (8003a4c <USART2_IRQHandler+0x30>)
 8003a34:	f7ff ff94 	bl	8003960 <LL_USART_ReceiveData8>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	4b04      	ldr	r3, [pc, #16]	@ (8003a50 <USART2_IRQHandler+0x34>)
 8003a3e:	701a      	strb	r2, [r3, #0]
		uart2_rx_flag = 1;
 8003a40:	4b04      	ldr	r3, [pc, #16]	@ (8003a54 <USART2_IRQHandler+0x38>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40004400 	.word	0x40004400
 8003a50:	2000058b 	.word	0x2000058b
 8003a54:	2000058a 	.word	0x2000058a

08003a58 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM13))
 8003a5c:	4807      	ldr	r0, [pc, #28]	@ (8003a7c <TIM8_UP_TIM13_IRQHandler+0x24>)
 8003a5e:	f7ff ff4b 	bl	80038f8 <LL_TIM_IsActiveFlag_UPDATE>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d007      	beq.n	8003a78 <TIM8_UP_TIM13_IRQHandler+0x20>
	{
		LL_TIM_ClearFlag_UPDATE(TIM13);
 8003a68:	4804      	ldr	r0, [pc, #16]	@ (8003a7c <TIM8_UP_TIM13_IRQHandler+0x24>)
 8003a6a:	f7ff ff37 	bl	80038dc <LL_TIM_ClearFlag_UPDATE>
		system_time.time_boot_ms++;
 8003a6e:	4b04      	ldr	r3, [pc, #16]	@ (8003a80 <TIM8_UP_TIM13_IRQHandler+0x28>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	3301      	adds	r3, #1
 8003a74:	4a02      	ldr	r2, [pc, #8]	@ (8003a80 <TIM8_UP_TIM13_IRQHandler+0x28>)
 8003a76:	6093      	str	r3, [r2, #8]

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003a78:	bf00      	nop
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40001c00 	.word	0x40001c00
 8003a80:	20000394 	.word	0x20000394

08003a84 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003a88:	bf00      	nop
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
	...

08003a94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003a98:	4802      	ldr	r0, [pc, #8]	@ (8003aa4 <OTG_FS_IRQHandler+0x10>)
 8003a9a:	f000 fd73 	bl	8004584 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20001a74 	.word	0x20001a74

08003aa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  return 1;
 8003aac:	2301      	movs	r3, #1
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <_kill>:

int _kill(int pid, int sig)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003ac2:	f009 f971 	bl	800cda8 <__errno>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2216      	movs	r2, #22
 8003aca:	601a      	str	r2, [r3, #0]
  return -1;
 8003acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <_exit>:

void _exit (int status)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff ffe7 	bl	8003ab8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003aea:	bf00      	nop
 8003aec:	e7fd      	b.n	8003aea <_exit+0x12>

08003aee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b086      	sub	sp, #24
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	e00a      	b.n	8003b16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b00:	f3af 8000 	nop.w
 8003b04:	4601      	mov	r1, r0
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	60ba      	str	r2, [r7, #8]
 8003b0c:	b2ca      	uxtb	r2, r1
 8003b0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	3301      	adds	r3, #1
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	dbf0      	blt.n	8003b00 <_read+0x12>
  }

  return len;
 8003b1e:	687b      	ldr	r3, [r7, #4]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b50:	605a      	str	r2, [r3, #4]
  return 0;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <_isatty>:

int _isatty(int file)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b68:	2301      	movs	r3, #1
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b085      	sub	sp, #20
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b98:	4a14      	ldr	r2, [pc, #80]	@ (8003bec <_sbrk+0x5c>)
 8003b9a:	4b15      	ldr	r3, [pc, #84]	@ (8003bf0 <_sbrk+0x60>)
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ba4:	4b13      	ldr	r3, [pc, #76]	@ (8003bf4 <_sbrk+0x64>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d102      	bne.n	8003bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bac:	4b11      	ldr	r3, [pc, #68]	@ (8003bf4 <_sbrk+0x64>)
 8003bae:	4a12      	ldr	r2, [pc, #72]	@ (8003bf8 <_sbrk+0x68>)
 8003bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bb2:	4b10      	ldr	r3, [pc, #64]	@ (8003bf4 <_sbrk+0x64>)
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4413      	add	r3, r2
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d207      	bcs.n	8003bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bc0:	f009 f8f2 	bl	800cda8 <__errno>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	220c      	movs	r2, #12
 8003bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bca:	f04f 33ff 	mov.w	r3, #4294967295
 8003bce:	e009      	b.n	8003be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bd0:	4b08      	ldr	r3, [pc, #32]	@ (8003bf4 <_sbrk+0x64>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bd6:	4b07      	ldr	r3, [pc, #28]	@ (8003bf4 <_sbrk+0x64>)
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4413      	add	r3, r2
 8003bde:	4a05      	ldr	r2, [pc, #20]	@ (8003bf4 <_sbrk+0x64>)
 8003be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003be2:	68fb      	ldr	r3, [r7, #12]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20020000 	.word	0x20020000
 8003bf0:	00000400 	.word	0x00000400
 8003bf4:	2000058c 	.word	0x2000058c
 8003bf8:	200022c8 	.word	0x200022c8

08003bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c00:	4b06      	ldr	r3, [pc, #24]	@ (8003c1c <SystemInit+0x20>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c06:	4a05      	ldr	r2, [pc, #20]	@ (8003c1c <SystemInit+0x20>)
 8003c08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c10:	bf00      	nop
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	e000ed00 	.word	0xe000ed00

08003c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003c20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003c24:	f7ff ffea 	bl	8003bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c28:	480c      	ldr	r0, [pc, #48]	@ (8003c5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c2a:	490d      	ldr	r1, [pc, #52]	@ (8003c60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003c64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c30:	e002      	b.n	8003c38 <LoopCopyDataInit>

08003c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c36:	3304      	adds	r3, #4

08003c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c3c:	d3f9      	bcc.n	8003c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003c68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c40:	4c0a      	ldr	r4, [pc, #40]	@ (8003c6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c44:	e001      	b.n	8003c4a <LoopFillZerobss>

08003c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c48:	3204      	adds	r2, #4

08003c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c4c:	d3fb      	bcc.n	8003c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c4e:	f009 f8b1 	bl	800cdb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c52:	f7fe fefd 	bl	8002a50 <main>
  bx  lr    
 8003c56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003c58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c60:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8003c64:	0800edbc 	.word	0x0800edbc
  ldr r2, =_sbss
 8003c68:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8003c6c:	200022c4 	.word	0x200022c4

08003c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c70:	e7fe      	b.n	8003c70 <ADC_IRQHandler>
	...

08003c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c78:	4b0e      	ldr	r3, [pc, #56]	@ (8003cb4 <HAL_Init+0x40>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8003cb4 <HAL_Init+0x40>)
 8003c7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c84:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb4 <HAL_Init+0x40>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a0a      	ldr	r2, [pc, #40]	@ (8003cb4 <HAL_Init+0x40>)
 8003c8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c90:	4b08      	ldr	r3, [pc, #32]	@ (8003cb4 <HAL_Init+0x40>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a07      	ldr	r2, [pc, #28]	@ (8003cb4 <HAL_Init+0x40>)
 8003c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c9c:	2003      	movs	r0, #3
 8003c9e:	f000 f94f 	bl	8003f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ca2:	200f      	movs	r0, #15
 8003ca4:	f000 f808 	bl	8003cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ca8:	f7ff fd94 	bl	80037d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40023c00 	.word	0x40023c00

08003cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cc0:	4b12      	ldr	r3, [pc, #72]	@ (8003d0c <HAL_InitTick+0x54>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	4b12      	ldr	r3, [pc, #72]	@ (8003d10 <HAL_InitTick+0x58>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 f967 	bl	8003faa <HAL_SYSTICK_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e00e      	b.n	8003d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b0f      	cmp	r3, #15
 8003cea:	d80a      	bhi.n	8003d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cec:	2200      	movs	r2, #0
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf4:	f000 f92f 	bl	8003f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cf8:	4a06      	ldr	r2, [pc, #24]	@ (8003d14 <HAL_InitTick+0x5c>)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e000      	b.n	8003d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20000000 	.word	0x20000000
 8003d10:	20000008 	.word	0x20000008
 8003d14:	20000004 	.word	0x20000004

08003d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d1c:	4b06      	ldr	r3, [pc, #24]	@ (8003d38 <HAL_IncTick+0x20>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	4b06      	ldr	r3, [pc, #24]	@ (8003d3c <HAL_IncTick+0x24>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4413      	add	r3, r2
 8003d28:	4a04      	ldr	r2, [pc, #16]	@ (8003d3c <HAL_IncTick+0x24>)
 8003d2a:	6013      	str	r3, [r2, #0]
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	20000008 	.word	0x20000008
 8003d3c:	20000590 	.word	0x20000590

08003d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  return uwTick;
 8003d44:	4b03      	ldr	r3, [pc, #12]	@ (8003d54 <HAL_GetTick+0x14>)
 8003d46:	681b      	ldr	r3, [r3, #0]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	20000590 	.word	0x20000590

08003d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d60:	f7ff ffee 	bl	8003d40 <HAL_GetTick>
 8003d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d70:	d005      	beq.n	8003d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d72:	4b0a      	ldr	r3, [pc, #40]	@ (8003d9c <HAL_Delay+0x44>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d7e:	bf00      	nop
 8003d80:	f7ff ffde 	bl	8003d40 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d8f7      	bhi.n	8003d80 <HAL_Delay+0x28>
  {
  }
}
 8003d90:	bf00      	nop
 8003d92:	bf00      	nop
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000008 	.word	0x20000008

08003da0 <__NVIC_SetPriorityGrouping>:
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003db0:	4b0c      	ldr	r3, [pc, #48]	@ (8003de4 <__NVIC_SetPriorityGrouping+0x44>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dd2:	4a04      	ldr	r2, [pc, #16]	@ (8003de4 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	60d3      	str	r3, [r2, #12]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <__NVIC_GetPriorityGrouping>:
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dec:	4b04      	ldr	r3, [pc, #16]	@ (8003e00 <__NVIC_GetPriorityGrouping+0x18>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	0a1b      	lsrs	r3, r3, #8
 8003df2:	f003 0307 	and.w	r3, r3, #7
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	e000ed00 	.word	0xe000ed00

08003e04 <__NVIC_EnableIRQ>:
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	db0b      	blt.n	8003e2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	f003 021f 	and.w	r2, r3, #31
 8003e1c:	4907      	ldr	r1, [pc, #28]	@ (8003e3c <__NVIC_EnableIRQ+0x38>)
 8003e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	2001      	movs	r0, #1
 8003e26:	fa00 f202 	lsl.w	r2, r0, r2
 8003e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	e000e100 	.word	0xe000e100

08003e40 <__NVIC_SetPriority>:
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	6039      	str	r1, [r7, #0]
 8003e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	db0a      	blt.n	8003e6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	490c      	ldr	r1, [pc, #48]	@ (8003e8c <__NVIC_SetPriority+0x4c>)
 8003e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5e:	0112      	lsls	r2, r2, #4
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	440b      	add	r3, r1
 8003e64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003e68:	e00a      	b.n	8003e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	4908      	ldr	r1, [pc, #32]	@ (8003e90 <__NVIC_SetPriority+0x50>)
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	3b04      	subs	r3, #4
 8003e78:	0112      	lsls	r2, r2, #4
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	761a      	strb	r2, [r3, #24]
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	e000e100 	.word	0xe000e100
 8003e90:	e000ed00 	.word	0xe000ed00

08003e94 <NVIC_EncodePriority>:
{
 8003e94:	b480      	push	{r7}
 8003e96:	b089      	sub	sp, #36	@ 0x24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f1c3 0307 	rsb	r3, r3, #7
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	bf28      	it	cs
 8003eb2:	2304      	movcs	r3, #4
 8003eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	2b06      	cmp	r3, #6
 8003ebc:	d902      	bls.n	8003ec4 <NVIC_EncodePriority+0x30>
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	3b03      	subs	r3, #3
 8003ec2:	e000      	b.n	8003ec6 <NVIC_EncodePriority+0x32>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	43da      	mvns	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	401a      	ands	r2, r3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003edc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee6:	43d9      	mvns	r1, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eec:	4313      	orrs	r3, r2
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3724      	adds	r7, #36	@ 0x24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
	...

08003efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f0c:	d301      	bcc.n	8003f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e00f      	b.n	8003f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f12:	4a0a      	ldr	r2, [pc, #40]	@ (8003f3c <SysTick_Config+0x40>)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f1a:	210f      	movs	r1, #15
 8003f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f20:	f7ff ff8e 	bl	8003e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f24:	4b05      	ldr	r3, [pc, #20]	@ (8003f3c <SysTick_Config+0x40>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f2a:	4b04      	ldr	r3, [pc, #16]	@ (8003f3c <SysTick_Config+0x40>)
 8003f2c:	2207      	movs	r2, #7
 8003f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	e000e010 	.word	0xe000e010

08003f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff ff29 	bl	8003da0 <__NVIC_SetPriorityGrouping>
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b086      	sub	sp, #24
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	607a      	str	r2, [r7, #4]
 8003f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f68:	f7ff ff3e 	bl	8003de8 <__NVIC_GetPriorityGrouping>
 8003f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	6978      	ldr	r0, [r7, #20]
 8003f74:	f7ff ff8e 	bl	8003e94 <NVIC_EncodePriority>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f7e:	4611      	mov	r1, r2
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff ff5d 	bl	8003e40 <__NVIC_SetPriority>
}
 8003f86:	bf00      	nop
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	4603      	mov	r3, r0
 8003f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff ff31 	bl	8003e04 <__NVIC_EnableIRQ>
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff ffa2 	bl	8003efc <SysTick_Config>
 8003fb8:	4603      	mov	r3, r0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b089      	sub	sp, #36	@ 0x24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61fb      	str	r3, [r7, #28]
 8003fde:	e16b      	b.n	80042b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	f040 815a 	bne.w	80042b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	2b01      	cmp	r3, #1
 8004008:	d005      	beq.n	8004016 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004012:	2b02      	cmp	r3, #2
 8004014:	d130      	bne.n	8004078 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	2203      	movs	r2, #3
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43db      	mvns	r3, r3
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4013      	ands	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800404c:	2201      	movs	r2, #1
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4013      	ands	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	f003 0201 	and.w	r2, r3, #1
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	2b03      	cmp	r3, #3
 8004082:	d017      	beq.n	80040b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	2203      	movs	r2, #3
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	43db      	mvns	r3, r3
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	4013      	ands	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 0303 	and.w	r3, r3, #3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d123      	bne.n	8004108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	08da      	lsrs	r2, r3, #3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3208      	adds	r2, #8
 80040c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	220f      	movs	r2, #15
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4013      	ands	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	08da      	lsrs	r2, r3, #3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3208      	adds	r2, #8
 8004102:	69b9      	ldr	r1, [r7, #24]
 8004104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	2203      	movs	r2, #3
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	43db      	mvns	r3, r3
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4013      	ands	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f003 0203 	and.w	r2, r3, #3
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80b4 	beq.w	80042b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	4b60      	ldr	r3, [pc, #384]	@ (80042d0 <HAL_GPIO_Init+0x30c>)
 8004150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004152:	4a5f      	ldr	r2, [pc, #380]	@ (80042d0 <HAL_GPIO_Init+0x30c>)
 8004154:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004158:	6453      	str	r3, [r2, #68]	@ 0x44
 800415a:	4b5d      	ldr	r3, [pc, #372]	@ (80042d0 <HAL_GPIO_Init+0x30c>)
 800415c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004166:	4a5b      	ldr	r2, [pc, #364]	@ (80042d4 <HAL_GPIO_Init+0x310>)
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	089b      	lsrs	r3, r3, #2
 800416c:	3302      	adds	r3, #2
 800416e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	220f      	movs	r2, #15
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43db      	mvns	r3, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4013      	ands	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a52      	ldr	r2, [pc, #328]	@ (80042d8 <HAL_GPIO_Init+0x314>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d02b      	beq.n	80041ea <HAL_GPIO_Init+0x226>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a51      	ldr	r2, [pc, #324]	@ (80042dc <HAL_GPIO_Init+0x318>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d025      	beq.n	80041e6 <HAL_GPIO_Init+0x222>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a50      	ldr	r2, [pc, #320]	@ (80042e0 <HAL_GPIO_Init+0x31c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d01f      	beq.n	80041e2 <HAL_GPIO_Init+0x21e>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a4f      	ldr	r2, [pc, #316]	@ (80042e4 <HAL_GPIO_Init+0x320>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d019      	beq.n	80041de <HAL_GPIO_Init+0x21a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a4e      	ldr	r2, [pc, #312]	@ (80042e8 <HAL_GPIO_Init+0x324>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d013      	beq.n	80041da <HAL_GPIO_Init+0x216>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a4d      	ldr	r2, [pc, #308]	@ (80042ec <HAL_GPIO_Init+0x328>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00d      	beq.n	80041d6 <HAL_GPIO_Init+0x212>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a4c      	ldr	r2, [pc, #304]	@ (80042f0 <HAL_GPIO_Init+0x32c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d007      	beq.n	80041d2 <HAL_GPIO_Init+0x20e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a4b      	ldr	r2, [pc, #300]	@ (80042f4 <HAL_GPIO_Init+0x330>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d101      	bne.n	80041ce <HAL_GPIO_Init+0x20a>
 80041ca:	2307      	movs	r3, #7
 80041cc:	e00e      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041ce:	2308      	movs	r3, #8
 80041d0:	e00c      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041d2:	2306      	movs	r3, #6
 80041d4:	e00a      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041d6:	2305      	movs	r3, #5
 80041d8:	e008      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041da:	2304      	movs	r3, #4
 80041dc:	e006      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041de:	2303      	movs	r3, #3
 80041e0:	e004      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e002      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041ea:	2300      	movs	r3, #0
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	f002 0203 	and.w	r2, r2, #3
 80041f2:	0092      	lsls	r2, r2, #2
 80041f4:	4093      	lsls	r3, r2
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041fc:	4935      	ldr	r1, [pc, #212]	@ (80042d4 <HAL_GPIO_Init+0x310>)
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	089b      	lsrs	r3, r3, #2
 8004202:	3302      	adds	r3, #2
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800420a:	4b3b      	ldr	r3, [pc, #236]	@ (80042f8 <HAL_GPIO_Init+0x334>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	43db      	mvns	r3, r3
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	4013      	ands	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4313      	orrs	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800422e:	4a32      	ldr	r2, [pc, #200]	@ (80042f8 <HAL_GPIO_Init+0x334>)
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004234:	4b30      	ldr	r3, [pc, #192]	@ (80042f8 <HAL_GPIO_Init+0x334>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	43db      	mvns	r3, r3
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	4013      	ands	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004258:	4a27      	ldr	r2, [pc, #156]	@ (80042f8 <HAL_GPIO_Init+0x334>)
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800425e:	4b26      	ldr	r3, [pc, #152]	@ (80042f8 <HAL_GPIO_Init+0x334>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	43db      	mvns	r3, r3
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	4013      	ands	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004282:	4a1d      	ldr	r2, [pc, #116]	@ (80042f8 <HAL_GPIO_Init+0x334>)
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004288:	4b1b      	ldr	r3, [pc, #108]	@ (80042f8 <HAL_GPIO_Init+0x334>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	43db      	mvns	r3, r3
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	4013      	ands	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042ac:	4a12      	ldr	r2, [pc, #72]	@ (80042f8 <HAL_GPIO_Init+0x334>)
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	3301      	adds	r3, #1
 80042b6:	61fb      	str	r3, [r7, #28]
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	2b0f      	cmp	r3, #15
 80042bc:	f67f ae90 	bls.w	8003fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042c0:	bf00      	nop
 80042c2:	bf00      	nop
 80042c4:	3724      	adds	r7, #36	@ 0x24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40023800 	.word	0x40023800
 80042d4:	40013800 	.word	0x40013800
 80042d8:	40020000 	.word	0x40020000
 80042dc:	40020400 	.word	0x40020400
 80042e0:	40020800 	.word	0x40020800
 80042e4:	40020c00 	.word	0x40020c00
 80042e8:	40021000 	.word	0x40021000
 80042ec:	40021400 	.word	0x40021400
 80042f0:	40021800 	.word	0x40021800
 80042f4:	40021c00 	.word	0x40021c00
 80042f8:	40013c00 	.word	0x40013c00

080042fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af02      	add	r7, sp, #8
 8004302:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e101      	b.n	8004512 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d106      	bne.n	800432e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f007 fb85 	bl	800ba38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2203      	movs	r2, #3
 8004332:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800433c:	d102      	bne.n	8004344 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f003 ff6c 	bl	8008226 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	7c1a      	ldrb	r2, [r3, #16]
 8004356:	f88d 2000 	strb.w	r2, [sp]
 800435a:	3304      	adds	r3, #4
 800435c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800435e:	f003 fe4b 	bl	8007ff8 <USB_CoreInit>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0ce      	b.n	8004512 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2100      	movs	r1, #0
 800437a:	4618      	mov	r0, r3
 800437c:	f003 ff64 	bl	8008248 <USB_SetCurrentMode>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d005      	beq.n	8004392 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2202      	movs	r2, #2
 800438a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e0bf      	b.n	8004512 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004392:	2300      	movs	r3, #0
 8004394:	73fb      	strb	r3, [r7, #15]
 8004396:	e04a      	b.n	800442e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004398:	7bfa      	ldrb	r2, [r7, #15]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	4413      	add	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	3315      	adds	r3, #21
 80043a8:	2201      	movs	r2, #1
 80043aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043ac:	7bfa      	ldrb	r2, [r7, #15]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4413      	add	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	3314      	adds	r3, #20
 80043bc:	7bfa      	ldrb	r2, [r7, #15]
 80043be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80043c0:	7bfa      	ldrb	r2, [r7, #15]
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	b298      	uxth	r0, r3
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	4613      	mov	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	332e      	adds	r3, #46	@ 0x2e
 80043d4:	4602      	mov	r2, r0
 80043d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80043d8:	7bfa      	ldrb	r2, [r7, #15]
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	4613      	mov	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	3318      	adds	r3, #24
 80043e8:	2200      	movs	r2, #0
 80043ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80043ec:	7bfa      	ldrb	r2, [r7, #15]
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	4413      	add	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	331c      	adds	r3, #28
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004400:	7bfa      	ldrb	r2, [r7, #15]
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	4613      	mov	r3, r2
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	3320      	adds	r3, #32
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004414:	7bfa      	ldrb	r2, [r7, #15]
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	4613      	mov	r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	3324      	adds	r3, #36	@ 0x24
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	3301      	adds	r3, #1
 800442c:	73fb      	strb	r3, [r7, #15]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	791b      	ldrb	r3, [r3, #4]
 8004432:	7bfa      	ldrb	r2, [r7, #15]
 8004434:	429a      	cmp	r2, r3
 8004436:	d3af      	bcc.n	8004398 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004438:	2300      	movs	r3, #0
 800443a:	73fb      	strb	r3, [r7, #15]
 800443c:	e044      	b.n	80044c8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800443e:	7bfa      	ldrb	r2, [r7, #15]
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004450:	2200      	movs	r2, #0
 8004452:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004454:	7bfa      	ldrb	r2, [r7, #15]
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	4613      	mov	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	4413      	add	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004466:	7bfa      	ldrb	r2, [r7, #15]
 8004468:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800446a:	7bfa      	ldrb	r2, [r7, #15]
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	4613      	mov	r3, r2
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	4413      	add	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	440b      	add	r3, r1
 8004478:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800447c:	2200      	movs	r2, #0
 800447e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004480:	7bfa      	ldrb	r2, [r7, #15]
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	4613      	mov	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004496:	7bfa      	ldrb	r2, [r7, #15]
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044ac:	7bfa      	ldrb	r2, [r7, #15]
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	4613      	mov	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
 80044c4:	3301      	adds	r3, #1
 80044c6:	73fb      	strb	r3, [r7, #15]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	791b      	ldrb	r3, [r3, #4]
 80044cc:	7bfa      	ldrb	r2, [r7, #15]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d3b5      	bcc.n	800443e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6818      	ldr	r0, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	7c1a      	ldrb	r2, [r3, #16]
 80044da:	f88d 2000 	strb.w	r2, [sp]
 80044de:	3304      	adds	r3, #4
 80044e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044e2:	f003 fefd 	bl	80082e0 <USB_DevInit>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e00c      	b.n	8004512 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f004 ff47 	bl	800939e <USB_DevDisconnect>

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800452e:	2b01      	cmp	r3, #1
 8004530:	d101      	bne.n	8004536 <HAL_PCD_Start+0x1c>
 8004532:	2302      	movs	r3, #2
 8004534:	e022      	b.n	800457c <HAL_PCD_Start+0x62>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	d009      	beq.n	800455e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800454e:	2b01      	cmp	r3, #1
 8004550:	d105      	bne.n	800455e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004556:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f003 fe4e 	bl	8008204 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f004 fef5 	bl	800935c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004584:	b590      	push	{r4, r7, lr}
 8004586:	b08d      	sub	sp, #52	@ 0x34
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f004 ffb3 	bl	8009506 <USB_GetMode>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f040 848c 	bne.w	8004ec0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f004 ff17 	bl	80093e0 <USB_ReadInterrupts>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 8482 	beq.w	8004ebe <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	0a1b      	lsrs	r3, r3, #8
 80045c4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f004 ff04 	bl	80093e0 <USB_ReadInterrupts>
 80045d8:	4603      	mov	r3, r0
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d107      	bne.n	80045f2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695a      	ldr	r2, [r3, #20]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f002 0202 	and.w	r2, r2, #2
 80045f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f004 fef2 	bl	80093e0 <USB_ReadInterrupts>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f003 0310 	and.w	r3, r3, #16
 8004602:	2b10      	cmp	r3, #16
 8004604:	d161      	bne.n	80046ca <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699a      	ldr	r2, [r3, #24]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0210 	bic.w	r2, r2, #16
 8004614:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	f003 020f 	and.w	r2, r3, #15
 8004622:	4613      	mov	r3, r2
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	4413      	add	r3, r2
 8004632:	3304      	adds	r3, #4
 8004634:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800463c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004640:	d124      	bne.n	800468c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004648:	4013      	ands	r3, r2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d035      	beq.n	80046ba <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	091b      	lsrs	r3, r3, #4
 8004656:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004658:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800465c:	b29b      	uxth	r3, r3
 800465e:	461a      	mov	r2, r3
 8004660:	6a38      	ldr	r0, [r7, #32]
 8004662:	f004 fd29 	bl	80090b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004672:	441a      	add	r2, r3
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	695a      	ldr	r2, [r3, #20]
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	091b      	lsrs	r3, r3, #4
 8004680:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004684:	441a      	add	r2, r3
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	615a      	str	r2, [r3, #20]
 800468a:	e016      	b.n	80046ba <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004692:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004696:	d110      	bne.n	80046ba <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800469e:	2208      	movs	r2, #8
 80046a0:	4619      	mov	r1, r3
 80046a2:	6a38      	ldr	r0, [r7, #32]
 80046a4:	f004 fd08 	bl	80090b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	695a      	ldr	r2, [r3, #20]
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	091b      	lsrs	r3, r3, #4
 80046b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046b4:	441a      	add	r2, r3
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	699a      	ldr	r2, [r3, #24]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f042 0210 	orr.w	r2, r2, #16
 80046c8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f004 fe86 	bl	80093e0 <USB_ReadInterrupts>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046da:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80046de:	f040 80a7 	bne.w	8004830 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f004 fe8b 	bl	8009406 <USB_ReadDevAllOutEpInterrupt>
 80046f0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80046f2:	e099      	b.n	8004828 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80046f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 808e 	beq.w	800481c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	4611      	mov	r1, r2
 800470a:	4618      	mov	r0, r3
 800470c:	f004 feaf 	bl	800946e <USB_ReadDevOutEPInterrupt>
 8004710:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00c      	beq.n	8004736 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800471c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004728:	461a      	mov	r2, r3
 800472a:	2301      	movs	r3, #1
 800472c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800472e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 fea3 	bl	800547c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00c      	beq.n	800475a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800474c:	461a      	mov	r2, r3
 800474e:	2308      	movs	r3, #8
 8004750:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004752:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 ff79 	bl	800564c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f003 0310 	and.w	r3, r3, #16
 8004760:	2b00      	cmp	r3, #0
 8004762:	d008      	beq.n	8004776 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	4413      	add	r3, r2
 800476c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004770:	461a      	mov	r2, r3
 8004772:	2310      	movs	r3, #16
 8004774:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d030      	beq.n	80047e2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004788:	2b80      	cmp	r3, #128	@ 0x80
 800478a:	d109      	bne.n	80047a0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800479a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800479e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80047a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047a2:	4613      	mov	r3, r2
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	4413      	add	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	4413      	add	r3, r2
 80047b2:	3304      	adds	r3, #4
 80047b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	78db      	ldrb	r3, [r3, #3]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d108      	bne.n	80047d0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2200      	movs	r2, #0
 80047c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80047c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	4619      	mov	r1, r3
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f007 fa3a 	bl	800bc44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80047d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047dc:	461a      	mov	r2, r3
 80047de:	2302      	movs	r3, #2
 80047e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047f8:	461a      	mov	r2, r3
 80047fa:	2320      	movs	r3, #32
 80047fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d009      	beq.n	800481c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004814:	461a      	mov	r2, r3
 8004816:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800481a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800481c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481e:	3301      	adds	r3, #1
 8004820:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004824:	085b      	lsrs	r3, r3, #1
 8004826:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482a:	2b00      	cmp	r3, #0
 800482c:	f47f af62 	bne.w	80046f4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f004 fdd3 	bl	80093e0 <USB_ReadInterrupts>
 800483a:	4603      	mov	r3, r0
 800483c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004840:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004844:	f040 80db 	bne.w	80049fe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4618      	mov	r0, r3
 800484e:	f004 fdf4 	bl	800943a <USB_ReadDevAllInEpInterrupt>
 8004852:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004858:	e0cd      	b.n	80049f6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800485a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 80c2 	beq.w	80049ea <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800486c:	b2d2      	uxtb	r2, r2
 800486e:	4611      	mov	r1, r2
 8004870:	4618      	mov	r0, r3
 8004872:	f004 fe1a 	bl	80094aa <USB_ReadDevInEPInterrupt>
 8004876:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d057      	beq.n	8004932 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	2201      	movs	r2, #1
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004896:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	43db      	mvns	r3, r3
 800489c:	69f9      	ldr	r1, [r7, #28]
 800489e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048a2:	4013      	ands	r3, r2
 80048a4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048b2:	461a      	mov	r2, r3
 80048b4:	2301      	movs	r3, #1
 80048b6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	799b      	ldrb	r3, [r3, #6]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d132      	bne.n	8004926 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048c4:	4613      	mov	r3, r2
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	4413      	add	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	3320      	adds	r3, #32
 80048d0:	6819      	ldr	r1, [r3, #0]
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048d6:	4613      	mov	r3, r2
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	4413      	add	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4403      	add	r3, r0
 80048e0:	331c      	adds	r3, #28
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4419      	add	r1, r3
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ea:	4613      	mov	r3, r2
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	4413      	add	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4403      	add	r3, r0
 80048f4:	3320      	adds	r3, #32
 80048f6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80048f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d113      	bne.n	8004926 <HAL_PCD_IRQHandler+0x3a2>
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004902:	4613      	mov	r3, r2
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	4413      	add	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	440b      	add	r3, r1
 800490c:	3324      	adds	r3, #36	@ 0x24
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d108      	bne.n	8004926 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6818      	ldr	r0, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800491e:	461a      	mov	r2, r3
 8004920:	2101      	movs	r1, #1
 8004922:	f004 fe21 	bl	8009568 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004928:	b2db      	uxtb	r3, r3
 800492a:	4619      	mov	r1, r3
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f007 f904 	bl	800bb3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d008      	beq.n	800494e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800493c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004948:	461a      	mov	r2, r3
 800494a:	2308      	movs	r3, #8
 800494c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004964:	461a      	mov	r2, r3
 8004966:	2310      	movs	r3, #16
 8004968:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004980:	461a      	mov	r2, r3
 8004982:	2340      	movs	r3, #64	@ 0x40
 8004984:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d023      	beq.n	80049d8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004990:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004992:	6a38      	ldr	r0, [r7, #32]
 8004994:	f003 fe08 	bl	80085a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800499a:	4613      	mov	r3, r2
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	4413      	add	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	3310      	adds	r3, #16
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	4413      	add	r3, r2
 80049a8:	3304      	adds	r3, #4
 80049aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	78db      	ldrb	r3, [r3, #3]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d108      	bne.n	80049c6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	2200      	movs	r2, #0
 80049b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	4619      	mov	r1, r3
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f007 f951 	bl	800bc68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80049c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c8:	015a      	lsls	r2, r3, #5
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	4413      	add	r3, r2
 80049ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049d2:	461a      	mov	r2, r3
 80049d4:	2302      	movs	r3, #2
 80049d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80049e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 fcbd 	bl	8005364 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80049ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ec:	3301      	adds	r3, #1
 80049ee:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80049f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f2:	085b      	lsrs	r3, r3, #1
 80049f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80049f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f47f af2e 	bne.w	800485a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f004 fcec 	bl	80093e0 <USB_ReadInterrupts>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a12:	d122      	bne.n	8004a5a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a22:	f023 0301 	bic.w	r3, r3, #1
 8004a26:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d108      	bne.n	8004a44 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 fea3 	bl	8005788 <HAL_PCDEx_LPM_Callback>
 8004a42:	e002      	b.n	8004a4a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f007 f8ef 	bl	800bc28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695a      	ldr	r2, [r3, #20]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004a58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f004 fcbe 	bl	80093e0 <USB_ReadInterrupts>
 8004a64:	4603      	mov	r3, r0
 8004a66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a6e:	d112      	bne.n	8004a96 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d102      	bne.n	8004a86 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f007 f8ab 	bl	800bbdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695a      	ldr	r2, [r3, #20]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004a94:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f004 fca0 	bl	80093e0 <USB_ReadInterrupts>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004aa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aaa:	f040 80b7 	bne.w	8004c1c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004abc:	f023 0301 	bic.w	r3, r3, #1
 8004ac0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2110      	movs	r1, #16
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f003 fd6d 	bl	80085a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ace:	2300      	movs	r3, #0
 8004ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ad2:	e046      	b.n	8004b62 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ae6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004af8:	0151      	lsls	r1, r2, #5
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	440a      	add	r2, r1
 8004afe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b14:	461a      	mov	r2, r3
 8004b16:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b1a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b2c:	0151      	lsls	r1, r2, #5
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	440a      	add	r2, r1
 8004b32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b3a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b4c:	0151      	lsls	r1, r2, #5
 8004b4e:	69fa      	ldr	r2, [r7, #28]
 8004b50:	440a      	add	r2, r1
 8004b52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b5a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b5e:	3301      	adds	r3, #1
 8004b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	791b      	ldrb	r3, [r3, #4]
 8004b66:	461a      	mov	r2, r3
 8004b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d3b2      	bcc.n	8004ad4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	69fa      	ldr	r2, [r7, #28]
 8004b78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b7c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004b80:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	7bdb      	ldrb	r3, [r3, #15]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d016      	beq.n	8004bb8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b9a:	f043 030b 	orr.w	r3, r3, #11
 8004b9e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004baa:	69fa      	ldr	r2, [r7, #28]
 8004bac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bb0:	f043 030b 	orr.w	r3, r3, #11
 8004bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004bb6:	e015      	b.n	8004be4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bc6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004bca:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004bce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bde:	f043 030b 	orr.w	r3, r3, #11
 8004be2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	69fa      	ldr	r2, [r7, #28]
 8004bee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bf2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004bf6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6818      	ldr	r0, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c06:	461a      	mov	r2, r3
 8004c08:	f004 fcae 	bl	8009568 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695a      	ldr	r2, [r3, #20]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004c1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f004 fbdd 	bl	80093e0 <USB_ReadInterrupts>
 8004c26:	4603      	mov	r3, r0
 8004c28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c30:	d123      	bne.n	8004c7a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f004 fc73 	bl	8009522 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f003 fd2a 	bl	800869a <USB_GetDevSpeed>
 8004c46:	4603      	mov	r3, r0
 8004c48:	461a      	mov	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681c      	ldr	r4, [r3, #0]
 8004c52:	f001 fa07 	bl	8006064 <HAL_RCC_GetHCLKFreq>
 8004c56:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f003 fa2e 	bl	80080c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f006 ff90 	bl	800bb8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695a      	ldr	r2, [r3, #20]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004c78:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f004 fbae 	bl	80093e0 <USB_ReadInterrupts>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b08      	cmp	r3, #8
 8004c8c:	d10a      	bne.n	8004ca4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f006 ff6d 	bl	800bb6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695a      	ldr	r2, [r3, #20]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f002 0208 	and.w	r2, r2, #8
 8004ca2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f004 fb99 	bl	80093e0 <USB_ReadInterrupts>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cb4:	2b80      	cmp	r3, #128	@ 0x80
 8004cb6:	d123      	bne.n	8004d00 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cc8:	e014      	b.n	8004cf4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cce:	4613      	mov	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d105      	bne.n	8004cee <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fb0a 	bl	8005302 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	791b      	ldrb	r3, [r3, #4]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d3e4      	bcc.n	8004cca <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f004 fb6b 	bl	80093e0 <USB_ReadInterrupts>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d14:	d13c      	bne.n	8004d90 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d16:	2301      	movs	r3, #1
 8004d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d1a:	e02b      	b.n	8004d74 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d30:	4613      	mov	r3, r2
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	4413      	add	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	3318      	adds	r3, #24
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d115      	bne.n	8004d6e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004d42:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	da12      	bge.n	8004d6e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	3317      	adds	r3, #23
 8004d58:	2201      	movs	r2, #1
 8004d5a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	4619      	mov	r1, r3
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 faca 	bl	8005302 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d70:	3301      	adds	r3, #1
 8004d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	791b      	ldrb	r3, [r3, #4]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d3cd      	bcc.n	8004d1c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695a      	ldr	r2, [r3, #20]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004d8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f004 fb23 	bl	80093e0 <USB_ReadInterrupts>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004da0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004da4:	d156      	bne.n	8004e54 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004da6:	2301      	movs	r3, #1
 8004da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004daa:	e045      	b.n	8004e38 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004dbc:	6879      	ldr	r1, [r7, #4]
 8004dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	440b      	add	r3, r1
 8004dca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d12e      	bne.n	8004e32 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004dd4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	da2b      	bge.n	8004e32 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004de6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d121      	bne.n	8004e32 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004df2:	4613      	mov	r3, r2
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	4413      	add	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	440b      	add	r3, r1
 8004dfc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004e00:	2201      	movs	r2, #1
 8004e02:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004e10:	6a3b      	ldr	r3, [r7, #32]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10a      	bne.n	8004e32 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e2e:	6053      	str	r3, [r2, #4]
            break;
 8004e30:	e008      	b.n	8004e44 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	3301      	adds	r3, #1
 8004e36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	791b      	ldrb	r3, [r3, #4]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d3b3      	bcc.n	8004dac <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695a      	ldr	r2, [r3, #20]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f004 fac1 	bl	80093e0 <USB_ReadInterrupts>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e68:	d10a      	bne.n	8004e80 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f006 ff0e 	bl	800bc8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695a      	ldr	r2, [r3, #20]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004e7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f004 faab 	bl	80093e0 <USB_ReadInterrupts>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d115      	bne.n	8004ec0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f006 fefe 	bl	800bca8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6859      	ldr	r1, [r3, #4]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	605a      	str	r2, [r3, #4]
 8004ebc:	e000      	b.n	8004ec0 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004ebe:	bf00      	nop
    }
  }
}
 8004ec0:	3734      	adds	r7, #52	@ 0x34
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd90      	pop	{r4, r7, pc}

08004ec6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b082      	sub	sp, #8
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	460b      	mov	r3, r1
 8004ed0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_PCD_SetAddress+0x1a>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e012      	b.n	8004f06 <HAL_PCD_SetAddress+0x40>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	78fa      	ldrb	r2, [r7, #3]
 8004eec:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	78fa      	ldrb	r2, [r7, #3]
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f004 fa0a 	bl	8009310 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b084      	sub	sp, #16
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	4608      	mov	r0, r1
 8004f18:	4611      	mov	r1, r2
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	70fb      	strb	r3, [r7, #3]
 8004f20:	460b      	mov	r3, r1
 8004f22:	803b      	strh	r3, [r7, #0]
 8004f24:	4613      	mov	r3, r2
 8004f26:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	da0f      	bge.n	8004f54 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f34:	78fb      	ldrb	r3, [r7, #3]
 8004f36:	f003 020f 	and.w	r2, r3, #15
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	4413      	add	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	3310      	adds	r3, #16
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	4413      	add	r3, r2
 8004f48:	3304      	adds	r3, #4
 8004f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	705a      	strb	r2, [r3, #1]
 8004f52:	e00f      	b.n	8004f74 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f54:	78fb      	ldrb	r3, [r7, #3]
 8004f56:	f003 020f 	and.w	r2, r3, #15
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	4413      	add	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	4413      	add	r3, r2
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004f80:	883b      	ldrh	r3, [r7, #0]
 8004f82:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	78ba      	ldrb	r2, [r7, #2]
 8004f8e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	785b      	ldrb	r3, [r3, #1]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d004      	beq.n	8004fa2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004fa2:	78bb      	ldrb	r3, [r7, #2]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d102      	bne.n	8004fae <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <HAL_PCD_EP_Open+0xae>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e00e      	b.n	8004fda <HAL_PCD_EP_Open+0xcc>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68f9      	ldr	r1, [r7, #12]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f003 fb8a 	bl	80086e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004fd8:	7afb      	ldrb	r3, [r7, #11]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	460b      	mov	r3, r1
 8004fec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004fee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	da0f      	bge.n	8005016 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ff6:	78fb      	ldrb	r3, [r7, #3]
 8004ff8:	f003 020f 	and.w	r2, r3, #15
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	4413      	add	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	3310      	adds	r3, #16
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	4413      	add	r3, r2
 800500a:	3304      	adds	r3, #4
 800500c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2201      	movs	r2, #1
 8005012:	705a      	strb	r2, [r3, #1]
 8005014:	e00f      	b.n	8005036 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005016:	78fb      	ldrb	r3, [r7, #3]
 8005018:	f003 020f 	and.w	r2, r3, #15
 800501c:	4613      	mov	r3, r2
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	4413      	add	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	4413      	add	r3, r2
 800502c:	3304      	adds	r3, #4
 800502e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	b2da      	uxtb	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005048:	2b01      	cmp	r3, #1
 800504a:	d101      	bne.n	8005050 <HAL_PCD_EP_Close+0x6e>
 800504c:	2302      	movs	r3, #2
 800504e:	e00e      	b.n	800506e <HAL_PCD_EP_Close+0x8c>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68f9      	ldr	r1, [r7, #12]
 800505e:	4618      	mov	r0, r3
 8005060:	f003 fbc8 	bl	80087f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b086      	sub	sp, #24
 800507a:	af00      	add	r7, sp, #0
 800507c:	60f8      	str	r0, [r7, #12]
 800507e:	607a      	str	r2, [r7, #4]
 8005080:	603b      	str	r3, [r7, #0]
 8005082:	460b      	mov	r3, r1
 8005084:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005086:	7afb      	ldrb	r3, [r7, #11]
 8005088:	f003 020f 	and.w	r2, r3, #15
 800508c:	4613      	mov	r3, r2
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	4413      	add	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4413      	add	r3, r2
 800509c:	3304      	adds	r3, #4
 800509e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2200      	movs	r2, #0
 80050b0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2200      	movs	r2, #0
 80050b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050b8:	7afb      	ldrb	r3, [r7, #11]
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	799b      	ldrb	r3, [r3, #6]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d102      	bne.n	80050d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	799b      	ldrb	r3, [r3, #6]
 80050da:	461a      	mov	r2, r3
 80050dc:	6979      	ldr	r1, [r7, #20]
 80050de:	f003 fc65 	bl	80089ac <USB_EPStartXfer>

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80050f8:	78fb      	ldrb	r3, [r7, #3]
 80050fa:	f003 020f 	and.w	r2, r3, #15
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	4613      	mov	r3, r2
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	440b      	add	r3, r1
 800510a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800510e:	681b      	ldr	r3, [r3, #0]
}
 8005110:	4618      	mov	r0, r3
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	607a      	str	r2, [r7, #4]
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	460b      	mov	r3, r1
 800512a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800512c:	7afb      	ldrb	r3, [r7, #11]
 800512e:	f003 020f 	and.w	r2, r3, #15
 8005132:	4613      	mov	r3, r2
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	3310      	adds	r3, #16
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	3304      	adds	r3, #4
 8005142:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2200      	movs	r2, #0
 8005154:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2201      	movs	r2, #1
 800515a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800515c:	7afb      	ldrb	r3, [r7, #11]
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	b2da      	uxtb	r2, r3
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	799b      	ldrb	r3, [r3, #6]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d102      	bne.n	8005176 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6818      	ldr	r0, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	799b      	ldrb	r3, [r3, #6]
 800517e:	461a      	mov	r2, r3
 8005180:	6979      	ldr	r1, [r7, #20]
 8005182:	f003 fc13 	bl	80089ac <USB_EPStartXfer>

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800519c:	78fb      	ldrb	r3, [r7, #3]
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	7912      	ldrb	r2, [r2, #4]
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d901      	bls.n	80051ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e04f      	b.n	800524e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	da0f      	bge.n	80051d6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051b6:	78fb      	ldrb	r3, [r7, #3]
 80051b8:	f003 020f 	and.w	r2, r3, #15
 80051bc:	4613      	mov	r3, r2
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	4413      	add	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	3310      	adds	r3, #16
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	4413      	add	r3, r2
 80051ca:	3304      	adds	r3, #4
 80051cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	705a      	strb	r2, [r3, #1]
 80051d4:	e00d      	b.n	80051f2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80051d6:	78fa      	ldrb	r2, [r7, #3]
 80051d8:	4613      	mov	r3, r2
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	4413      	add	r3, r2
 80051e8:	3304      	adds	r3, #4
 80051ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2201      	movs	r2, #1
 80051f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051f8:	78fb      	ldrb	r3, [r7, #3]
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800520a:	2b01      	cmp	r3, #1
 800520c:	d101      	bne.n	8005212 <HAL_PCD_EP_SetStall+0x82>
 800520e:	2302      	movs	r3, #2
 8005210:	e01d      	b.n	800524e <HAL_PCD_EP_SetStall+0xbe>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68f9      	ldr	r1, [r7, #12]
 8005220:	4618      	mov	r0, r3
 8005222:	f003 ffa1 	bl	8009168 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005226:	78fb      	ldrb	r3, [r7, #3]
 8005228:	f003 030f 	and.w	r3, r3, #15
 800522c:	2b00      	cmp	r3, #0
 800522e:	d109      	bne.n	8005244 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	7999      	ldrb	r1, [r3, #6]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800523e:	461a      	mov	r2, r3
 8005240:	f004 f992 	bl	8009568 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	460b      	mov	r3, r1
 8005260:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005262:	78fb      	ldrb	r3, [r7, #3]
 8005264:	f003 030f 	and.w	r3, r3, #15
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	7912      	ldrb	r2, [r2, #4]
 800526c:	4293      	cmp	r3, r2
 800526e:	d901      	bls.n	8005274 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e042      	b.n	80052fa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005274:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005278:	2b00      	cmp	r3, #0
 800527a:	da0f      	bge.n	800529c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800527c:	78fb      	ldrb	r3, [r7, #3]
 800527e:	f003 020f 	and.w	r2, r3, #15
 8005282:	4613      	mov	r3, r2
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	4413      	add	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	3310      	adds	r3, #16
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	4413      	add	r3, r2
 8005290:	3304      	adds	r3, #4
 8005292:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2201      	movs	r2, #1
 8005298:	705a      	strb	r2, [r3, #1]
 800529a:	e00f      	b.n	80052bc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800529c:	78fb      	ldrb	r3, [r7, #3]
 800529e:	f003 020f 	and.w	r2, r3, #15
 80052a2:	4613      	mov	r3, r2
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	4413      	add	r3, r2
 80052b2:	3304      	adds	r3, #4
 80052b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052c2:	78fb      	ldrb	r3, [r7, #3]
 80052c4:	f003 030f 	and.w	r3, r3, #15
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <HAL_PCD_EP_ClrStall+0x86>
 80052d8:	2302      	movs	r3, #2
 80052da:	e00e      	b.n	80052fa <HAL_PCD_EP_ClrStall+0xa4>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68f9      	ldr	r1, [r7, #12]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f003 ffaa 	bl	8009244 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	460b      	mov	r3, r1
 800530c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800530e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005312:	2b00      	cmp	r3, #0
 8005314:	da0c      	bge.n	8005330 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005316:	78fb      	ldrb	r3, [r7, #3]
 8005318:	f003 020f 	and.w	r2, r3, #15
 800531c:	4613      	mov	r3, r2
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	3310      	adds	r3, #16
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	4413      	add	r3, r2
 800532a:	3304      	adds	r3, #4
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	e00c      	b.n	800534a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	f003 020f 	and.w	r2, r3, #15
 8005336:	4613      	mov	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	4413      	add	r3, r2
 8005346:	3304      	adds	r3, #4
 8005348:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68f9      	ldr	r1, [r7, #12]
 8005350:	4618      	mov	r0, r3
 8005352:	f003 fdc9 	bl	8008ee8 <USB_EPStopXfer>
 8005356:	4603      	mov	r3, r0
 8005358:	72fb      	strb	r3, [r7, #11]

  return ret;
 800535a:	7afb      	ldrb	r3, [r7, #11]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08a      	sub	sp, #40	@ 0x28
 8005368:	af02      	add	r7, sp, #8
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	4613      	mov	r3, r2
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	3310      	adds	r3, #16
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	4413      	add	r3, r2
 8005388:	3304      	adds	r3, #4
 800538a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	695a      	ldr	r2, [r3, #20]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	429a      	cmp	r2, r3
 8005396:	d901      	bls.n	800539c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e06b      	b.n	8005474 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	691a      	ldr	r2, [r3, #16]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	69fa      	ldr	r2, [r7, #28]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d902      	bls.n	80053b8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	3303      	adds	r3, #3
 80053bc:	089b      	lsrs	r3, r3, #2
 80053be:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053c0:	e02a      	b.n	8005418 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	691a      	ldr	r2, [r3, #16]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	69fa      	ldr	r2, [r7, #28]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d902      	bls.n	80053de <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	3303      	adds	r3, #3
 80053e2:	089b      	lsrs	r3, r3, #2
 80053e4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	68d9      	ldr	r1, [r3, #12]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	4603      	mov	r3, r0
 80053fa:	6978      	ldr	r0, [r7, #20]
 80053fc:	f003 fe1e 	bl	800903c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	441a      	add	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	695a      	ldr	r2, [r3, #20]
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	441a      	add	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	429a      	cmp	r2, r3
 800542c:	d809      	bhi.n	8005442 <PCD_WriteEmptyTxFifo+0xde>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	695a      	ldr	r2, [r3, #20]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005436:	429a      	cmp	r2, r3
 8005438:	d203      	bcs.n	8005442 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1bf      	bne.n	80053c2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	691a      	ldr	r2, [r3, #16]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	429a      	cmp	r2, r3
 800544c:	d811      	bhi.n	8005472 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	f003 030f 	and.w	r3, r3, #15
 8005454:	2201      	movs	r2, #1
 8005456:	fa02 f303 	lsl.w	r3, r2, r3
 800545a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005462:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	43db      	mvns	r3, r3
 8005468:	6939      	ldr	r1, [r7, #16]
 800546a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800546e:	4013      	ands	r3, r2
 8005470:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3720      	adds	r7, #32
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	333c      	adds	r3, #60	@ 0x3c
 8005494:	3304      	adds	r3, #4
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	799b      	ldrb	r3, [r3, #6]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d17b      	bne.n	80055aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d015      	beq.n	80054e8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	4a61      	ldr	r2, [pc, #388]	@ (8005644 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	f240 80b9 	bls.w	8005638 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 80b3 	beq.w	8005638 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054de:	461a      	mov	r2, r3
 80054e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054e4:	6093      	str	r3, [r2, #8]
 80054e6:	e0a7      	b.n	8005638 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f003 0320 	and.w	r3, r3, #32
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d009      	beq.n	8005506 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054fe:	461a      	mov	r2, r3
 8005500:	2320      	movs	r3, #32
 8005502:	6093      	str	r3, [r2, #8]
 8005504:	e098      	b.n	8005638 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800550c:	2b00      	cmp	r3, #0
 800550e:	f040 8093 	bne.w	8005638 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	4a4b      	ldr	r2, [pc, #300]	@ (8005644 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d90f      	bls.n	800553a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00a      	beq.n	800553a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005530:	461a      	mov	r2, r3
 8005532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005536:	6093      	str	r3, [r2, #8]
 8005538:	e07e      	b.n	8005638 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	4613      	mov	r3, r2
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	4413      	add	r3, r2
 800554c:	3304      	adds	r3, #4
 800554e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a1a      	ldr	r2, [r3, #32]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	0159      	lsls	r1, r3, #5
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	440b      	add	r3, r1
 800555c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005566:	1ad2      	subs	r2, r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d114      	bne.n	800559c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d109      	bne.n	800558e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005584:	461a      	mov	r2, r3
 8005586:	2101      	movs	r1, #1
 8005588:	f003 ffee 	bl	8009568 <USB_EP0_OutStart>
 800558c:	e006      	b.n	800559c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	68da      	ldr	r2, [r3, #12]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	441a      	add	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	4619      	mov	r1, r3
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f006 faae 	bl	800bb04 <HAL_PCD_DataOutStageCallback>
 80055a8:	e046      	b.n	8005638 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	4a26      	ldr	r2, [pc, #152]	@ (8005648 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d124      	bne.n	80055fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00a      	beq.n	80055d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c8:	461a      	mov	r2, r3
 80055ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055ce:	6093      	str	r3, [r2, #8]
 80055d0:	e032      	b.n	8005638 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d008      	beq.n	80055ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e8:	461a      	mov	r2, r3
 80055ea:	2320      	movs	r3, #32
 80055ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	4619      	mov	r1, r3
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f006 fa85 	bl	800bb04 <HAL_PCD_DataOutStageCallback>
 80055fa:	e01d      	b.n	8005638 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d114      	bne.n	800562c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	4613      	mov	r3, r2
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	4413      	add	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d108      	bne.n	800562c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6818      	ldr	r0, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005624:	461a      	mov	r2, r3
 8005626:	2100      	movs	r1, #0
 8005628:	f003 ff9e 	bl	8009568 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	b2db      	uxtb	r3, r3
 8005630:	4619      	mov	r1, r3
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f006 fa66 	bl	800bb04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3720      	adds	r7, #32
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	4f54300a 	.word	0x4f54300a
 8005648:	4f54310a 	.word	0x4f54310a

0800564c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	333c      	adds	r3, #60	@ 0x3c
 8005664:	3304      	adds	r3, #4
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4a15      	ldr	r2, [pc, #84]	@ (80056d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d90e      	bls.n	80056a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005688:	2b00      	cmp	r3, #0
 800568a:	d009      	beq.n	80056a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	4413      	add	r3, r2
 8005694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005698:	461a      	mov	r2, r3
 800569a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800569e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f006 fa1d 	bl	800bae0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4a0a      	ldr	r2, [pc, #40]	@ (80056d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d90c      	bls.n	80056c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	799b      	ldrb	r3, [r3, #6]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d108      	bne.n	80056c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80056c0:	461a      	mov	r2, r3
 80056c2:	2101      	movs	r1, #1
 80056c4:	f003 ff50 	bl	8009568 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	4f54300a 	.word	0x4f54300a

080056d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	70fb      	strb	r3, [r7, #3]
 80056e4:	4613      	mov	r3, r2
 80056e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d107      	bne.n	8005706 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80056f6:	883b      	ldrh	r3, [r7, #0]
 80056f8:	0419      	lsls	r1, r3, #16
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	430a      	orrs	r2, r1
 8005702:	629a      	str	r2, [r3, #40]	@ 0x28
 8005704:	e028      	b.n	8005758 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800570c:	0c1b      	lsrs	r3, r3, #16
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	4413      	add	r3, r2
 8005712:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005714:	2300      	movs	r3, #0
 8005716:	73fb      	strb	r3, [r7, #15]
 8005718:	e00d      	b.n	8005736 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	7bfb      	ldrb	r3, [r7, #15]
 8005720:	3340      	adds	r3, #64	@ 0x40
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	0c1b      	lsrs	r3, r3, #16
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	4413      	add	r3, r2
 800572e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	3301      	adds	r3, #1
 8005734:	73fb      	strb	r3, [r7, #15]
 8005736:	7bfa      	ldrb	r2, [r7, #15]
 8005738:	78fb      	ldrb	r3, [r7, #3]
 800573a:	3b01      	subs	r3, #1
 800573c:	429a      	cmp	r2, r3
 800573e:	d3ec      	bcc.n	800571a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005740:	883b      	ldrh	r3, [r7, #0]
 8005742:	0418      	lsls	r0, r3, #16
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6819      	ldr	r1, [r3, #0]
 8005748:	78fb      	ldrb	r3, [r7, #3]
 800574a:	3b01      	subs	r3, #1
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	4302      	orrs	r2, r0
 8005750:	3340      	adds	r3, #64	@ 0x40
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005766:	b480      	push	{r7}
 8005768:	b083      	sub	sp, #12
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	460b      	mov	r3, r1
 8005770:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	887a      	ldrh	r2, [r7, #2]
 8005778:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	460b      	mov	r3, r1
 8005792:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e267      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d075      	beq.n	80058aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80057be:	4b88      	ldr	r3, [pc, #544]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 030c 	and.w	r3, r3, #12
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d00c      	beq.n	80057e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057ca:	4b85      	ldr	r3, [pc, #532]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80057d2:	2b08      	cmp	r3, #8
 80057d4:	d112      	bne.n	80057fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057d6:	4b82      	ldr	r3, [pc, #520]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057e2:	d10b      	bne.n	80057fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057e4:	4b7e      	ldr	r3, [pc, #504]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d05b      	beq.n	80058a8 <HAL_RCC_OscConfig+0x108>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d157      	bne.n	80058a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e242      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005804:	d106      	bne.n	8005814 <HAL_RCC_OscConfig+0x74>
 8005806:	4b76      	ldr	r3, [pc, #472]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a75      	ldr	r2, [pc, #468]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 800580c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	e01d      	b.n	8005850 <HAL_RCC_OscConfig+0xb0>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800581c:	d10c      	bne.n	8005838 <HAL_RCC_OscConfig+0x98>
 800581e:	4b70      	ldr	r3, [pc, #448]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a6f      	ldr	r2, [pc, #444]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005824:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	4b6d      	ldr	r3, [pc, #436]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a6c      	ldr	r2, [pc, #432]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	e00b      	b.n	8005850 <HAL_RCC_OscConfig+0xb0>
 8005838:	4b69      	ldr	r3, [pc, #420]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a68      	ldr	r2, [pc, #416]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 800583e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005842:	6013      	str	r3, [r2, #0]
 8005844:	4b66      	ldr	r3, [pc, #408]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a65      	ldr	r2, [pc, #404]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 800584a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800584e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d013      	beq.n	8005880 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005858:	f7fe fa72 	bl	8003d40 <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005860:	f7fe fa6e 	bl	8003d40 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b64      	cmp	r3, #100	@ 0x64
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e207      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005872:	4b5b      	ldr	r3, [pc, #364]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0f0      	beq.n	8005860 <HAL_RCC_OscConfig+0xc0>
 800587e:	e014      	b.n	80058aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005880:	f7fe fa5e 	bl	8003d40 <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005888:	f7fe fa5a 	bl	8003d40 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b64      	cmp	r3, #100	@ 0x64
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e1f3      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800589a:	4b51      	ldr	r3, [pc, #324]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1f0      	bne.n	8005888 <HAL_RCC_OscConfig+0xe8>
 80058a6:	e000      	b.n	80058aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d063      	beq.n	800597e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80058b6:	4b4a      	ldr	r3, [pc, #296]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 030c 	and.w	r3, r3, #12
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00b      	beq.n	80058da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058c2:	4b47      	ldr	r3, [pc, #284]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80058ca:	2b08      	cmp	r3, #8
 80058cc:	d11c      	bne.n	8005908 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058ce:	4b44      	ldr	r3, [pc, #272]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d116      	bne.n	8005908 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058da:	4b41      	ldr	r3, [pc, #260]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d005      	beq.n	80058f2 <HAL_RCC_OscConfig+0x152>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d001      	beq.n	80058f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e1c7      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058f2:	4b3b      	ldr	r3, [pc, #236]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	4937      	ldr	r1, [pc, #220]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005902:	4313      	orrs	r3, r2
 8005904:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005906:	e03a      	b.n	800597e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d020      	beq.n	8005952 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005910:	4b34      	ldr	r3, [pc, #208]	@ (80059e4 <HAL_RCC_OscConfig+0x244>)
 8005912:	2201      	movs	r2, #1
 8005914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005916:	f7fe fa13 	bl	8003d40 <HAL_GetTick>
 800591a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800591c:	e008      	b.n	8005930 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800591e:	f7fe fa0f 	bl	8003d40 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d901      	bls.n	8005930 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e1a8      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005930:	4b2b      	ldr	r3, [pc, #172]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0f0      	beq.n	800591e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800593c:	4b28      	ldr	r3, [pc, #160]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	4925      	ldr	r1, [pc, #148]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 800594c:	4313      	orrs	r3, r2
 800594e:	600b      	str	r3, [r1, #0]
 8005950:	e015      	b.n	800597e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005952:	4b24      	ldr	r3, [pc, #144]	@ (80059e4 <HAL_RCC_OscConfig+0x244>)
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005958:	f7fe f9f2 	bl	8003d40 <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800595e:	e008      	b.n	8005972 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005960:	f7fe f9ee 	bl	8003d40 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e187      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005972:	4b1b      	ldr	r3, [pc, #108]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1f0      	bne.n	8005960 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0308 	and.w	r3, r3, #8
 8005986:	2b00      	cmp	r3, #0
 8005988:	d036      	beq.n	80059f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d016      	beq.n	80059c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005992:	4b15      	ldr	r3, [pc, #84]	@ (80059e8 <HAL_RCC_OscConfig+0x248>)
 8005994:	2201      	movs	r2, #1
 8005996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005998:	f7fe f9d2 	bl	8003d40 <HAL_GetTick>
 800599c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059a0:	f7fe f9ce 	bl	8003d40 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e167      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059b2:	4b0b      	ldr	r3, [pc, #44]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 80059b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d0f0      	beq.n	80059a0 <HAL_RCC_OscConfig+0x200>
 80059be:	e01b      	b.n	80059f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059c0:	4b09      	ldr	r3, [pc, #36]	@ (80059e8 <HAL_RCC_OscConfig+0x248>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059c6:	f7fe f9bb 	bl	8003d40 <HAL_GetTick>
 80059ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059cc:	e00e      	b.n	80059ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059ce:	f7fe f9b7 	bl	8003d40 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d907      	bls.n	80059ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e150      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
 80059e0:	40023800 	.word	0x40023800
 80059e4:	42470000 	.word	0x42470000
 80059e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059ec:	4b88      	ldr	r3, [pc, #544]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 80059ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1ea      	bne.n	80059ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 8097 	beq.w	8005b34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a06:	2300      	movs	r3, #0
 8005a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a0a:	4b81      	ldr	r3, [pc, #516]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10f      	bne.n	8005a36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a16:	2300      	movs	r3, #0
 8005a18:	60bb      	str	r3, [r7, #8]
 8005a1a:	4b7d      	ldr	r3, [pc, #500]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1e:	4a7c      	ldr	r2, [pc, #496]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a26:	4b7a      	ldr	r3, [pc, #488]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a2e:	60bb      	str	r3, [r7, #8]
 8005a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a32:	2301      	movs	r3, #1
 8005a34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a36:	4b77      	ldr	r3, [pc, #476]	@ (8005c14 <HAL_RCC_OscConfig+0x474>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d118      	bne.n	8005a74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a42:	4b74      	ldr	r3, [pc, #464]	@ (8005c14 <HAL_RCC_OscConfig+0x474>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a73      	ldr	r2, [pc, #460]	@ (8005c14 <HAL_RCC_OscConfig+0x474>)
 8005a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a4e:	f7fe f977 	bl	8003d40 <HAL_GetTick>
 8005a52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a54:	e008      	b.n	8005a68 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a56:	f7fe f973 	bl	8003d40 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e10c      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a68:	4b6a      	ldr	r3, [pc, #424]	@ (8005c14 <HAL_RCC_OscConfig+0x474>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d0f0      	beq.n	8005a56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d106      	bne.n	8005a8a <HAL_RCC_OscConfig+0x2ea>
 8005a7c:	4b64      	ldr	r3, [pc, #400]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a80:	4a63      	ldr	r2, [pc, #396]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a82:	f043 0301 	orr.w	r3, r3, #1
 8005a86:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a88:	e01c      	b.n	8005ac4 <HAL_RCC_OscConfig+0x324>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	2b05      	cmp	r3, #5
 8005a90:	d10c      	bne.n	8005aac <HAL_RCC_OscConfig+0x30c>
 8005a92:	4b5f      	ldr	r3, [pc, #380]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a96:	4a5e      	ldr	r2, [pc, #376]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a98:	f043 0304 	orr.w	r3, r3, #4
 8005a9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a9e:	4b5c      	ldr	r3, [pc, #368]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aa2:	4a5b      	ldr	r2, [pc, #364]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005aa4:	f043 0301 	orr.w	r3, r3, #1
 8005aa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005aaa:	e00b      	b.n	8005ac4 <HAL_RCC_OscConfig+0x324>
 8005aac:	4b58      	ldr	r3, [pc, #352]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ab0:	4a57      	ldr	r2, [pc, #348]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005ab2:	f023 0301 	bic.w	r3, r3, #1
 8005ab6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ab8:	4b55      	ldr	r3, [pc, #340]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005abc:	4a54      	ldr	r2, [pc, #336]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005abe:	f023 0304 	bic.w	r3, r3, #4
 8005ac2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d015      	beq.n	8005af8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005acc:	f7fe f938 	bl	8003d40 <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad2:	e00a      	b.n	8005aea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ad4:	f7fe f934 	bl	8003d40 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e0cb      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aea:	4b49      	ldr	r3, [pc, #292]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0ee      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x334>
 8005af6:	e014      	b.n	8005b22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005af8:	f7fe f922 	bl	8003d40 <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005afe:	e00a      	b.n	8005b16 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b00:	f7fe f91e 	bl	8003d40 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e0b5      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b16:	4b3e      	ldr	r3, [pc, #248]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1ee      	bne.n	8005b00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b22:	7dfb      	ldrb	r3, [r7, #23]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d105      	bne.n	8005b34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b28:	4b39      	ldr	r3, [pc, #228]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2c:	4a38      	ldr	r2, [pc, #224]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005b2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 80a1 	beq.w	8005c80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b3e:	4b34      	ldr	r3, [pc, #208]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 030c 	and.w	r3, r3, #12
 8005b46:	2b08      	cmp	r3, #8
 8005b48:	d05c      	beq.n	8005c04 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d141      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b52:	4b31      	ldr	r3, [pc, #196]	@ (8005c18 <HAL_RCC_OscConfig+0x478>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b58:	f7fe f8f2 	bl	8003d40 <HAL_GetTick>
 8005b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b5e:	e008      	b.n	8005b72 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b60:	f7fe f8ee 	bl	8003d40 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e087      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b72:	4b27      	ldr	r3, [pc, #156]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1f0      	bne.n	8005b60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69da      	ldr	r2, [r3, #28]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8c:	019b      	lsls	r3, r3, #6
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b94:	085b      	lsrs	r3, r3, #1
 8005b96:	3b01      	subs	r3, #1
 8005b98:	041b      	lsls	r3, r3, #16
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba0:	061b      	lsls	r3, r3, #24
 8005ba2:	491b      	ldr	r1, [pc, #108]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c18 <HAL_RCC_OscConfig+0x478>)
 8005baa:	2201      	movs	r2, #1
 8005bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bae:	f7fe f8c7 	bl	8003d40 <HAL_GetTick>
 8005bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bb4:	e008      	b.n	8005bc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bb6:	f7fe f8c3 	bl	8003d40 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e05c      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bc8:	4b11      	ldr	r3, [pc, #68]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0f0      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x416>
 8005bd4:	e054      	b.n	8005c80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bd6:	4b10      	ldr	r3, [pc, #64]	@ (8005c18 <HAL_RCC_OscConfig+0x478>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bdc:	f7fe f8b0 	bl	8003d40 <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005be4:	f7fe f8ac 	bl	8003d40 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e045      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bf6:	4b06      	ldr	r3, [pc, #24]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1f0      	bne.n	8005be4 <HAL_RCC_OscConfig+0x444>
 8005c02:	e03d      	b.n	8005c80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d107      	bne.n	8005c1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e038      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
 8005c10:	40023800 	.word	0x40023800
 8005c14:	40007000 	.word	0x40007000
 8005c18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005c8c <HAL_RCC_OscConfig+0x4ec>)
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d028      	beq.n	8005c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d121      	bne.n	8005c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d11a      	bne.n	8005c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d111      	bne.n	8005c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c62:	085b      	lsrs	r3, r3, #1
 8005c64:	3b01      	subs	r3, #1
 8005c66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d107      	bne.n	8005c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d001      	beq.n	8005c80 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e000      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3718      	adds	r7, #24
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	40023800 	.word	0x40023800

08005c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e0cc      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ca4:	4b68      	ldr	r3, [pc, #416]	@ (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d90c      	bls.n	8005ccc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cb2:	4b65      	ldr	r3, [pc, #404]	@ (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cba:	4b63      	ldr	r3, [pc, #396]	@ (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0307 	and.w	r3, r3, #7
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d001      	beq.n	8005ccc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e0b8      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d020      	beq.n	8005d1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d005      	beq.n	8005cf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ce4:	4b59      	ldr	r3, [pc, #356]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	4a58      	ldr	r2, [pc, #352]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005cea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005cee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d005      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cfc:	4b53      	ldr	r3, [pc, #332]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	4a52      	ldr	r2, [pc, #328]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005d06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d08:	4b50      	ldr	r3, [pc, #320]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	494d      	ldr	r1, [pc, #308]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d044      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d107      	bne.n	8005d3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d2e:	4b47      	ldr	r3, [pc, #284]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d119      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e07f      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d003      	beq.n	8005d4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d107      	bne.n	8005d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d109      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e06f      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e067      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d6e:	4b37      	ldr	r3, [pc, #220]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f023 0203 	bic.w	r2, r3, #3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	4934      	ldr	r1, [pc, #208]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d80:	f7fd ffde 	bl	8003d40 <HAL_GetTick>
 8005d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d86:	e00a      	b.n	8005d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d88:	f7fd ffda 	bl	8003d40 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e04f      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d9e:	4b2b      	ldr	r3, [pc, #172]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 020c 	and.w	r2, r3, #12
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d1eb      	bne.n	8005d88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005db0:	4b25      	ldr	r3, [pc, #148]	@ (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d20c      	bcs.n	8005dd8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dbe:	4b22      	ldr	r3, [pc, #136]	@ (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dc6:	4b20      	ldr	r3, [pc, #128]	@ (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d001      	beq.n	8005dd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e032      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d008      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005de4:	4b19      	ldr	r3, [pc, #100]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4916      	ldr	r1, [pc, #88]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d009      	beq.n	8005e16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e02:	4b12      	ldr	r3, [pc, #72]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	490e      	ldr	r1, [pc, #56]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e16:	f000 f821 	bl	8005e5c <HAL_RCC_GetSysClockFreq>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	091b      	lsrs	r3, r3, #4
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	490a      	ldr	r1, [pc, #40]	@ (8005e50 <HAL_RCC_ClockConfig+0x1c0>)
 8005e28:	5ccb      	ldrb	r3, [r1, r3]
 8005e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e2e:	4a09      	ldr	r2, [pc, #36]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005e32:	4b09      	ldr	r3, [pc, #36]	@ (8005e58 <HAL_RCC_ClockConfig+0x1c8>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fd ff3e 	bl	8003cb8 <HAL_InitTick>

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	40023c00 	.word	0x40023c00
 8005e4c:	40023800 	.word	0x40023800
 8005e50:	0800ea1c 	.word	0x0800ea1c
 8005e54:	20000000 	.word	0x20000000
 8005e58:	20000004 	.word	0x20000004

08005e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e60:	b094      	sub	sp, #80	@ 0x50
 8005e62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e74:	4b79      	ldr	r3, [pc, #484]	@ (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f003 030c 	and.w	r3, r3, #12
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d00d      	beq.n	8005e9c <HAL_RCC_GetSysClockFreq+0x40>
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	f200 80e1 	bhi.w	8006048 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <HAL_RCC_GetSysClockFreq+0x34>
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d003      	beq.n	8005e96 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e8e:	e0db      	b.n	8006048 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e90:	4b73      	ldr	r3, [pc, #460]	@ (8006060 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e94:	e0db      	b.n	800604e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e96:	4b72      	ldr	r3, [pc, #456]	@ (8006060 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e9a:	e0d8      	b.n	800604e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e9c:	4b6f      	ldr	r3, [pc, #444]	@ (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ea4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ea6:	4b6d      	ldr	r3, [pc, #436]	@ (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d063      	beq.n	8005f7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eb2:	4b6a      	ldr	r3, [pc, #424]	@ (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	099b      	lsrs	r3, r3, #6
 8005eb8:	2200      	movs	r2, #0
 8005eba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ebc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005eca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005ece:	4622      	mov	r2, r4
 8005ed0:	462b      	mov	r3, r5
 8005ed2:	f04f 0000 	mov.w	r0, #0
 8005ed6:	f04f 0100 	mov.w	r1, #0
 8005eda:	0159      	lsls	r1, r3, #5
 8005edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ee0:	0150      	lsls	r0, r2, #5
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	1a51      	subs	r1, r2, r1
 8005eea:	6139      	str	r1, [r7, #16]
 8005eec:	4629      	mov	r1, r5
 8005eee:	eb63 0301 	sbc.w	r3, r3, r1
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f00:	4659      	mov	r1, fp
 8005f02:	018b      	lsls	r3, r1, #6
 8005f04:	4651      	mov	r1, sl
 8005f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f0a:	4651      	mov	r1, sl
 8005f0c:	018a      	lsls	r2, r1, #6
 8005f0e:	4651      	mov	r1, sl
 8005f10:	ebb2 0801 	subs.w	r8, r2, r1
 8005f14:	4659      	mov	r1, fp
 8005f16:	eb63 0901 	sbc.w	r9, r3, r1
 8005f1a:	f04f 0200 	mov.w	r2, #0
 8005f1e:	f04f 0300 	mov.w	r3, #0
 8005f22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f2e:	4690      	mov	r8, r2
 8005f30:	4699      	mov	r9, r3
 8005f32:	4623      	mov	r3, r4
 8005f34:	eb18 0303 	adds.w	r3, r8, r3
 8005f38:	60bb      	str	r3, [r7, #8]
 8005f3a:	462b      	mov	r3, r5
 8005f3c:	eb49 0303 	adc.w	r3, r9, r3
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	f04f 0200 	mov.w	r2, #0
 8005f46:	f04f 0300 	mov.w	r3, #0
 8005f4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f4e:	4629      	mov	r1, r5
 8005f50:	028b      	lsls	r3, r1, #10
 8005f52:	4621      	mov	r1, r4
 8005f54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f58:	4621      	mov	r1, r4
 8005f5a:	028a      	lsls	r2, r1, #10
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	4619      	mov	r1, r3
 8005f60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f62:	2200      	movs	r2, #0
 8005f64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f6c:	f7fa fe3c 	bl	8000be8 <__aeabi_uldivmod>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	4613      	mov	r3, r2
 8005f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f78:	e058      	b.n	800602c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f7a:	4b38      	ldr	r3, [pc, #224]	@ (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	099b      	lsrs	r3, r3, #6
 8005f80:	2200      	movs	r2, #0
 8005f82:	4618      	mov	r0, r3
 8005f84:	4611      	mov	r1, r2
 8005f86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f8a:	623b      	str	r3, [r7, #32]
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f94:	4642      	mov	r2, r8
 8005f96:	464b      	mov	r3, r9
 8005f98:	f04f 0000 	mov.w	r0, #0
 8005f9c:	f04f 0100 	mov.w	r1, #0
 8005fa0:	0159      	lsls	r1, r3, #5
 8005fa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fa6:	0150      	lsls	r0, r2, #5
 8005fa8:	4602      	mov	r2, r0
 8005faa:	460b      	mov	r3, r1
 8005fac:	4641      	mov	r1, r8
 8005fae:	ebb2 0a01 	subs.w	sl, r2, r1
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005fb8:	f04f 0200 	mov.w	r2, #0
 8005fbc:	f04f 0300 	mov.w	r3, #0
 8005fc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005fc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005fc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005fcc:	ebb2 040a 	subs.w	r4, r2, sl
 8005fd0:	eb63 050b 	sbc.w	r5, r3, fp
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	00eb      	lsls	r3, r5, #3
 8005fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fe2:	00e2      	lsls	r2, r4, #3
 8005fe4:	4614      	mov	r4, r2
 8005fe6:	461d      	mov	r5, r3
 8005fe8:	4643      	mov	r3, r8
 8005fea:	18e3      	adds	r3, r4, r3
 8005fec:	603b      	str	r3, [r7, #0]
 8005fee:	464b      	mov	r3, r9
 8005ff0:	eb45 0303 	adc.w	r3, r5, r3
 8005ff4:	607b      	str	r3, [r7, #4]
 8005ff6:	f04f 0200 	mov.w	r2, #0
 8005ffa:	f04f 0300 	mov.w	r3, #0
 8005ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006002:	4629      	mov	r1, r5
 8006004:	028b      	lsls	r3, r1, #10
 8006006:	4621      	mov	r1, r4
 8006008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800600c:	4621      	mov	r1, r4
 800600e:	028a      	lsls	r2, r1, #10
 8006010:	4610      	mov	r0, r2
 8006012:	4619      	mov	r1, r3
 8006014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006016:	2200      	movs	r2, #0
 8006018:	61bb      	str	r3, [r7, #24]
 800601a:	61fa      	str	r2, [r7, #28]
 800601c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006020:	f7fa fde2 	bl	8000be8 <__aeabi_uldivmod>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	4613      	mov	r3, r2
 800602a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800602c:	4b0b      	ldr	r3, [pc, #44]	@ (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	0c1b      	lsrs	r3, r3, #16
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	3301      	adds	r3, #1
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800603c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800603e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006040:	fbb2 f3f3 	udiv	r3, r2, r3
 8006044:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006046:	e002      	b.n	800604e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006048:	4b05      	ldr	r3, [pc, #20]	@ (8006060 <HAL_RCC_GetSysClockFreq+0x204>)
 800604a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800604c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800604e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006050:	4618      	mov	r0, r3
 8006052:	3750      	adds	r7, #80	@ 0x50
 8006054:	46bd      	mov	sp, r7
 8006056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800605a:	bf00      	nop
 800605c:	40023800 	.word	0x40023800
 8006060:	00f42400 	.word	0x00f42400

08006064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006068:	4b03      	ldr	r3, [pc, #12]	@ (8006078 <HAL_RCC_GetHCLKFreq+0x14>)
 800606a:	681b      	ldr	r3, [r3, #0]
}
 800606c:	4618      	mov	r0, r3
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	20000000 	.word	0x20000000

0800607c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e041      	b.n	8006112 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d106      	bne.n	80060a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7fd fbbe 	bl	8003824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3304      	adds	r3, #4
 80060b8:	4619      	mov	r1, r3
 80060ba:	4610      	mov	r0, r2
 80060bc:	f000 f9aa 	bl	8006414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e041      	b.n	80061b0 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b00      	cmp	r3, #0
 8006136:	d106      	bne.n	8006146 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f839 	bl	80061b8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2202      	movs	r2, #2
 800614a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	3304      	adds	r3, #4
 8006156:	4619      	mov	r1, r3
 8006158:	4610      	mov	r0, r2
 800615a:	f000 f95b 	bl	8006414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d101      	bne.n	80061ea <HAL_TIM_OC_ConfigChannel+0x1e>
 80061e6:	2302      	movs	r3, #2
 80061e8:	e048      	b.n	800627c <HAL_TIM_OC_ConfigChannel+0xb0>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b0c      	cmp	r3, #12
 80061f6:	d839      	bhi.n	800626c <HAL_TIM_OC_ConfigChannel+0xa0>
 80061f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006200 <HAL_TIM_OC_ConfigChannel+0x34>)
 80061fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fe:	bf00      	nop
 8006200:	08006235 	.word	0x08006235
 8006204:	0800626d 	.word	0x0800626d
 8006208:	0800626d 	.word	0x0800626d
 800620c:	0800626d 	.word	0x0800626d
 8006210:	08006243 	.word	0x08006243
 8006214:	0800626d 	.word	0x0800626d
 8006218:	0800626d 	.word	0x0800626d
 800621c:	0800626d 	.word	0x0800626d
 8006220:	08006251 	.word	0x08006251
 8006224:	0800626d 	.word	0x0800626d
 8006228:	0800626d 	.word	0x0800626d
 800622c:	0800626d 	.word	0x0800626d
 8006230:	0800625f 	.word	0x0800625f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68b9      	ldr	r1, [r7, #8]
 800623a:	4618      	mov	r0, r3
 800623c:	f000 f996 	bl	800656c <TIM_OC1_SetConfig>
      break;
 8006240:	e017      	b.n	8006272 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68b9      	ldr	r1, [r7, #8]
 8006248:	4618      	mov	r0, r3
 800624a:	f000 f9ff 	bl	800664c <TIM_OC2_SetConfig>
      break;
 800624e:	e010      	b.n	8006272 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	4618      	mov	r0, r3
 8006258:	f000 fa6e 	bl	8006738 <TIM_OC3_SetConfig>
      break;
 800625c:	e009      	b.n	8006272 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68b9      	ldr	r1, [r7, #8]
 8006264:	4618      	mov	r0, r3
 8006266:	f000 fadb 	bl	8006820 <TIM_OC4_SetConfig>
      break;
 800626a:	e002      	b.n	8006272 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	75fb      	strb	r3, [r7, #23]
      break;
 8006270:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800627a:	7dfb      	ldrb	r3, [r7, #23]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006298:	2b01      	cmp	r3, #1
 800629a:	d101      	bne.n	80062a0 <HAL_TIM_ConfigClockSource+0x1c>
 800629c:	2302      	movs	r3, #2
 800629e:	e0b4      	b.n	800640a <HAL_TIM_ConfigClockSource+0x186>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80062be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062d8:	d03e      	beq.n	8006358 <HAL_TIM_ConfigClockSource+0xd4>
 80062da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062de:	f200 8087 	bhi.w	80063f0 <HAL_TIM_ConfigClockSource+0x16c>
 80062e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062e6:	f000 8086 	beq.w	80063f6 <HAL_TIM_ConfigClockSource+0x172>
 80062ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ee:	d87f      	bhi.n	80063f0 <HAL_TIM_ConfigClockSource+0x16c>
 80062f0:	2b70      	cmp	r3, #112	@ 0x70
 80062f2:	d01a      	beq.n	800632a <HAL_TIM_ConfigClockSource+0xa6>
 80062f4:	2b70      	cmp	r3, #112	@ 0x70
 80062f6:	d87b      	bhi.n	80063f0 <HAL_TIM_ConfigClockSource+0x16c>
 80062f8:	2b60      	cmp	r3, #96	@ 0x60
 80062fa:	d050      	beq.n	800639e <HAL_TIM_ConfigClockSource+0x11a>
 80062fc:	2b60      	cmp	r3, #96	@ 0x60
 80062fe:	d877      	bhi.n	80063f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006300:	2b50      	cmp	r3, #80	@ 0x50
 8006302:	d03c      	beq.n	800637e <HAL_TIM_ConfigClockSource+0xfa>
 8006304:	2b50      	cmp	r3, #80	@ 0x50
 8006306:	d873      	bhi.n	80063f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006308:	2b40      	cmp	r3, #64	@ 0x40
 800630a:	d058      	beq.n	80063be <HAL_TIM_ConfigClockSource+0x13a>
 800630c:	2b40      	cmp	r3, #64	@ 0x40
 800630e:	d86f      	bhi.n	80063f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006310:	2b30      	cmp	r3, #48	@ 0x30
 8006312:	d064      	beq.n	80063de <HAL_TIM_ConfigClockSource+0x15a>
 8006314:	2b30      	cmp	r3, #48	@ 0x30
 8006316:	d86b      	bhi.n	80063f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006318:	2b20      	cmp	r3, #32
 800631a:	d060      	beq.n	80063de <HAL_TIM_ConfigClockSource+0x15a>
 800631c:	2b20      	cmp	r3, #32
 800631e:	d867      	bhi.n	80063f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006320:	2b00      	cmp	r3, #0
 8006322:	d05c      	beq.n	80063de <HAL_TIM_ConfigClockSource+0x15a>
 8006324:	2b10      	cmp	r3, #16
 8006326:	d05a      	beq.n	80063de <HAL_TIM_ConfigClockSource+0x15a>
 8006328:	e062      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800633a:	f000 fb41 	bl	80069c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800634c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	609a      	str	r2, [r3, #8]
      break;
 8006356:	e04f      	b.n	80063f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006368:	f000 fb2a 	bl	80069c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689a      	ldr	r2, [r3, #8]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800637a:	609a      	str	r2, [r3, #8]
      break;
 800637c:	e03c      	b.n	80063f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800638a:	461a      	mov	r2, r3
 800638c:	f000 fa9e 	bl	80068cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2150      	movs	r1, #80	@ 0x50
 8006396:	4618      	mov	r0, r3
 8006398:	f000 faf7 	bl	800698a <TIM_ITRx_SetConfig>
      break;
 800639c:	e02c      	b.n	80063f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063aa:	461a      	mov	r2, r3
 80063ac:	f000 fabd 	bl	800692a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2160      	movs	r1, #96	@ 0x60
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 fae7 	bl	800698a <TIM_ITRx_SetConfig>
      break;
 80063bc:	e01c      	b.n	80063f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ca:	461a      	mov	r2, r3
 80063cc:	f000 fa7e 	bl	80068cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2140      	movs	r1, #64	@ 0x40
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fad7 	bl	800698a <TIM_ITRx_SetConfig>
      break;
 80063dc:	e00c      	b.n	80063f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4619      	mov	r1, r3
 80063e8:	4610      	mov	r0, r2
 80063ea:	f000 face 	bl	800698a <TIM_ITRx_SetConfig>
      break;
 80063ee:	e003      	b.n	80063f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	73fb      	strb	r3, [r7, #15]
      break;
 80063f4:	e000      	b.n	80063f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006408:	7bfb      	ldrb	r3, [r7, #15]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a46      	ldr	r2, [pc, #280]	@ (8006540 <TIM_Base_SetConfig+0x12c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d013      	beq.n	8006454 <TIM_Base_SetConfig+0x40>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006432:	d00f      	beq.n	8006454 <TIM_Base_SetConfig+0x40>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a43      	ldr	r2, [pc, #268]	@ (8006544 <TIM_Base_SetConfig+0x130>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d00b      	beq.n	8006454 <TIM_Base_SetConfig+0x40>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a42      	ldr	r2, [pc, #264]	@ (8006548 <TIM_Base_SetConfig+0x134>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d007      	beq.n	8006454 <TIM_Base_SetConfig+0x40>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a41      	ldr	r2, [pc, #260]	@ (800654c <TIM_Base_SetConfig+0x138>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d003      	beq.n	8006454 <TIM_Base_SetConfig+0x40>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a40      	ldr	r2, [pc, #256]	@ (8006550 <TIM_Base_SetConfig+0x13c>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d108      	bne.n	8006466 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800645a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a35      	ldr	r2, [pc, #212]	@ (8006540 <TIM_Base_SetConfig+0x12c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d02b      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006474:	d027      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a32      	ldr	r2, [pc, #200]	@ (8006544 <TIM_Base_SetConfig+0x130>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d023      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a31      	ldr	r2, [pc, #196]	@ (8006548 <TIM_Base_SetConfig+0x134>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d01f      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a30      	ldr	r2, [pc, #192]	@ (800654c <TIM_Base_SetConfig+0x138>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d01b      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a2f      	ldr	r2, [pc, #188]	@ (8006550 <TIM_Base_SetConfig+0x13c>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d017      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a2e      	ldr	r2, [pc, #184]	@ (8006554 <TIM_Base_SetConfig+0x140>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d013      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a2d      	ldr	r2, [pc, #180]	@ (8006558 <TIM_Base_SetConfig+0x144>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d00f      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a2c      	ldr	r2, [pc, #176]	@ (800655c <TIM_Base_SetConfig+0x148>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d00b      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a2b      	ldr	r2, [pc, #172]	@ (8006560 <TIM_Base_SetConfig+0x14c>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d007      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a2a      	ldr	r2, [pc, #168]	@ (8006564 <TIM_Base_SetConfig+0x150>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d003      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a29      	ldr	r2, [pc, #164]	@ (8006568 <TIM_Base_SetConfig+0x154>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d108      	bne.n	80064d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a10      	ldr	r2, [pc, #64]	@ (8006540 <TIM_Base_SetConfig+0x12c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d003      	beq.n	800650c <TIM_Base_SetConfig+0xf8>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a12      	ldr	r2, [pc, #72]	@ (8006550 <TIM_Base_SetConfig+0x13c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d103      	bne.n	8006514 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	691a      	ldr	r2, [r3, #16]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b01      	cmp	r3, #1
 8006524:	d105      	bne.n	8006532 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f023 0201 	bic.w	r2, r3, #1
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	611a      	str	r2, [r3, #16]
  }
}
 8006532:	bf00      	nop
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40010000 	.word	0x40010000
 8006544:	40000400 	.word	0x40000400
 8006548:	40000800 	.word	0x40000800
 800654c:	40000c00 	.word	0x40000c00
 8006550:	40010400 	.word	0x40010400
 8006554:	40014000 	.word	0x40014000
 8006558:	40014400 	.word	0x40014400
 800655c:	40014800 	.word	0x40014800
 8006560:	40001800 	.word	0x40001800
 8006564:	40001c00 	.word	0x40001c00
 8006568:	40002000 	.word	0x40002000

0800656c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	f023 0201 	bic.w	r2, r3, #1
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800659a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0303 	bic.w	r3, r3, #3
 80065a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f023 0302 	bic.w	r3, r3, #2
 80065b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	4313      	orrs	r3, r2
 80065be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a20      	ldr	r2, [pc, #128]	@ (8006644 <TIM_OC1_SetConfig+0xd8>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d003      	beq.n	80065d0 <TIM_OC1_SetConfig+0x64>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a1f      	ldr	r2, [pc, #124]	@ (8006648 <TIM_OC1_SetConfig+0xdc>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d10c      	bne.n	80065ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f023 0308 	bic.w	r3, r3, #8
 80065d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f023 0304 	bic.w	r3, r3, #4
 80065e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a15      	ldr	r2, [pc, #84]	@ (8006644 <TIM_OC1_SetConfig+0xd8>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d003      	beq.n	80065fa <TIM_OC1_SetConfig+0x8e>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a14      	ldr	r2, [pc, #80]	@ (8006648 <TIM_OC1_SetConfig+0xdc>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d111      	bne.n	800661e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	4313      	orrs	r3, r2
 8006612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	4313      	orrs	r3, r2
 800661c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	621a      	str	r2, [r3, #32]
}
 8006638:	bf00      	nop
 800663a:	371c      	adds	r7, #28
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	40010000 	.word	0x40010000
 8006648:	40010400 	.word	0x40010400

0800664c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	f023 0210 	bic.w	r2, r3, #16
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800667a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	021b      	lsls	r3, r3, #8
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	4313      	orrs	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f023 0320 	bic.w	r3, r3, #32
 8006696:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	011b      	lsls	r3, r3, #4
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a22      	ldr	r2, [pc, #136]	@ (8006730 <TIM_OC2_SetConfig+0xe4>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d003      	beq.n	80066b4 <TIM_OC2_SetConfig+0x68>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a21      	ldr	r2, [pc, #132]	@ (8006734 <TIM_OC2_SetConfig+0xe8>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d10d      	bne.n	80066d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	011b      	lsls	r3, r3, #4
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a17      	ldr	r2, [pc, #92]	@ (8006730 <TIM_OC2_SetConfig+0xe4>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d003      	beq.n	80066e0 <TIM_OC2_SetConfig+0x94>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a16      	ldr	r2, [pc, #88]	@ (8006734 <TIM_OC2_SetConfig+0xe8>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d113      	bne.n	8006708 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	621a      	str	r2, [r3, #32]
}
 8006722:	bf00      	nop
 8006724:	371c      	adds	r7, #28
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	40010000 	.word	0x40010000
 8006734:	40010400 	.word	0x40010400

08006738 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0303 	bic.w	r3, r3, #3
 800676e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4313      	orrs	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	021b      	lsls	r3, r3, #8
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	4313      	orrs	r3, r2
 800678c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a21      	ldr	r2, [pc, #132]	@ (8006818 <TIM_OC3_SetConfig+0xe0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d003      	beq.n	800679e <TIM_OC3_SetConfig+0x66>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a20      	ldr	r2, [pc, #128]	@ (800681c <TIM_OC3_SetConfig+0xe4>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d10d      	bne.n	80067ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	021b      	lsls	r3, r3, #8
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a16      	ldr	r2, [pc, #88]	@ (8006818 <TIM_OC3_SetConfig+0xe0>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d003      	beq.n	80067ca <TIM_OC3_SetConfig+0x92>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a15      	ldr	r2, [pc, #84]	@ (800681c <TIM_OC3_SetConfig+0xe4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d113      	bne.n	80067f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	621a      	str	r2, [r3, #32]
}
 800680c:	bf00      	nop
 800680e:	371c      	adds	r7, #28
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	40010000 	.word	0x40010000
 800681c:	40010400 	.word	0x40010400

08006820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800684e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	021b      	lsls	r3, r3, #8
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	4313      	orrs	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800686a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	031b      	lsls	r3, r3, #12
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	4313      	orrs	r3, r2
 8006876:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a12      	ldr	r2, [pc, #72]	@ (80068c4 <TIM_OC4_SetConfig+0xa4>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d003      	beq.n	8006888 <TIM_OC4_SetConfig+0x68>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a11      	ldr	r2, [pc, #68]	@ (80068c8 <TIM_OC4_SetConfig+0xa8>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d109      	bne.n	800689c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800688e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	019b      	lsls	r3, r3, #6
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	4313      	orrs	r3, r2
 800689a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	621a      	str	r2, [r3, #32]
}
 80068b6:	bf00      	nop
 80068b8:	371c      	adds	r7, #28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	40010000 	.word	0x40010000
 80068c8:	40010400 	.word	0x40010400

080068cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	f023 0201 	bic.w	r2, r3, #1
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	011b      	lsls	r3, r3, #4
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	4313      	orrs	r3, r2
 8006900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f023 030a 	bic.w	r3, r3, #10
 8006908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	4313      	orrs	r3, r2
 8006910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	621a      	str	r2, [r3, #32]
}
 800691e:	bf00      	nop
 8006920:	371c      	adds	r7, #28
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800692a:	b480      	push	{r7}
 800692c:	b087      	sub	sp, #28
 800692e:	af00      	add	r7, sp, #0
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	f023 0210 	bic.w	r2, r3, #16
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006954:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	031b      	lsls	r3, r3, #12
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	4313      	orrs	r3, r2
 800695e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006966:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	011b      	lsls	r3, r3, #4
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	4313      	orrs	r3, r2
 8006970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	621a      	str	r2, [r3, #32]
}
 800697e:	bf00      	nop
 8006980:	371c      	adds	r7, #28
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800698a:	b480      	push	{r7}
 800698c:	b085      	sub	sp, #20
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	f043 0307 	orr.w	r3, r3, #7
 80069ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	609a      	str	r2, [r3, #8]
}
 80069b4:	bf00      	nop
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
 80069cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	021a      	lsls	r2, r3, #8
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	609a      	str	r2, [r3, #8]
}
 80069f4:	bf00      	nop
 80069f6:	371c      	adds	r7, #28
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d101      	bne.n	8006a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a14:	2302      	movs	r3, #2
 8006a16:	e05a      	b.n	8006ace <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2202      	movs	r2, #2
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a21      	ldr	r2, [pc, #132]	@ (8006adc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d022      	beq.n	8006aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a64:	d01d      	beq.n	8006aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a1d      	ldr	r2, [pc, #116]	@ (8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d018      	beq.n	8006aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a1b      	ldr	r2, [pc, #108]	@ (8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d013      	beq.n	8006aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d00e      	beq.n	8006aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a18      	ldr	r2, [pc, #96]	@ (8006aec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d009      	beq.n	8006aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a17      	ldr	r2, [pc, #92]	@ (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d004      	beq.n	8006aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a15      	ldr	r2, [pc, #84]	@ (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d10c      	bne.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	40010000 	.word	0x40010000
 8006ae0:	40000400 	.word	0x40000400
 8006ae4:	40000800 	.word	0x40000800
 8006ae8:	40000c00 	.word	0x40000c00
 8006aec:	40010400 	.word	0x40010400
 8006af0:	40014000 	.word	0x40014000
 8006af4:	40001800 	.word	0x40001800

08006af8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d101      	bne.n	8006b14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b10:	2302      	movs	r3, #2
 8006b12:	e03d      	b.n	8006b90 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <LL_ADC_REG_SetSequencerLength>:
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006baa:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006bb6:	bf00      	nop
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b083      	sub	sp, #12
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	bf0c      	ite	eq
 8006bd6:	2301      	moveq	r3, #1
 8006bd8:	2300      	movne	r3, #0
 8006bda:	b2db      	uxtb	r3, r3
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8006be8:	b590      	push	{r4, r7, lr}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8006bf6:	481c      	ldr	r0, [pc, #112]	@ (8006c68 <LL_ADC_CommonInit+0x80>)
 8006bf8:	f7ff ffe3 	bl	8006bc2 <LL_ADC_IsEnabled>
 8006bfc:	4604      	mov	r4, r0
 8006bfe:	481b      	ldr	r0, [pc, #108]	@ (8006c6c <LL_ADC_CommonInit+0x84>)
 8006c00:	f7ff ffdf 	bl	8006bc2 <LL_ADC_IsEnabled>
 8006c04:	4603      	mov	r3, r0
 8006c06:	431c      	orrs	r4, r3
 8006c08:	4819      	ldr	r0, [pc, #100]	@ (8006c70 <LL_ADC_CommonInit+0x88>)
 8006c0a:	f7ff ffda 	bl	8006bc2 <LL_ADC_IsEnabled>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	4323      	orrs	r3, r4
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d120      	bne.n	8006c58 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d012      	beq.n	8006c44 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	4b14      	ldr	r3, [pc, #80]	@ (8006c74 <LL_ADC_CommonInit+0x8c>)
 8006c24:	4013      	ands	r3, r2
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	6811      	ldr	r1, [r2, #0]
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	6852      	ldr	r2, [r2, #4]
 8006c2e:	4311      	orrs	r1, r2
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	6892      	ldr	r2, [r2, #8]
 8006c34:	4311      	orrs	r1, r2
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	68d2      	ldr	r2, [r2, #12]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	605a      	str	r2, [r3, #4]
 8006c42:	e00b      	b.n	8006c5c <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	4b0a      	ldr	r3, [pc, #40]	@ (8006c74 <LL_ADC_CommonInit+0x8c>)
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	6812      	ldr	r2, [r2, #0]
 8006c50:	431a      	orrs	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	605a      	str	r2, [r3, #4]
 8006c56:	e001      	b.n	8006c5c <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd90      	pop	{r4, r7, pc}
 8006c66:	bf00      	nop
 8006c68:	40012000 	.word	0x40012000
 8006c6c:	40012100 	.word	0x40012100
 8006c70:	40012200 	.word	0x40012200
 8006c74:	fffc10e0 	.word	0xfffc10e0

08006c78 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8006c82:	2300      	movs	r3, #0
 8006c84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7ff ff9b 	bl	8006bc2 <LL_ADC_IsEnabled>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d117      	bne.n	8006cc2 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8006c9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	6811      	ldr	r1, [r2, #0]
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	6892      	ldr	r2, [r2, #8]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	605a      	str	r2, [r3, #4]
               ,
               ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );

    MODIFY_REG(ADCx->CR2,
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	609a      	str	r2, [r3, #8]
 8006cc0:	e001      	b.n	8006cc6 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7ff ff6f 	bl	8006bc2 <LL_ADC_IsEnabled>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d12b      	bne.n	8006d42 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d009      	beq.n	8006d06 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	605a      	str	r2, [r3, #4]
 8006d04:	e005      	b.n	8006d12 <LL_ADC_REG_Init+0x42>
                 ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	605a      	str	r2, [r3, #4]
                 ,
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	689a      	ldr	r2, [r3, #8]
 8006d16:	4b0e      	ldr	r3, [pc, #56]	@ (8006d50 <LL_ADC_REG_Init+0x80>)
 8006d18:	4013      	ands	r3, r2
 8006d1a:	683a      	ldr	r2, [r7, #0]
 8006d1c:	6812      	ldr	r2, [r2, #0]
 8006d1e:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	68d2      	ldr	r2, [r2, #12]
 8006d26:	4311      	orrs	r1, r2
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	6912      	ldr	r2, [r2, #16]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	431a      	orrs	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7ff ff2e 	bl	8006b9c <LL_ADC_REG_SetSequencerLength>
 8006d40:	e001      	b.n	8006d46 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	c0fffcfd 	.word	0xc0fffcfd

08006d54 <LL_GPIO_SetPinMode>:
{
 8006d54:	b480      	push	{r7}
 8006d56:	b08b      	sub	sp, #44	@ 0x2c
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	fa93 f3a3 	rbit	r3, r3
 8006d6e:	613b      	str	r3, [r7, #16]
  return result;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006d7a:	2320      	movs	r3, #32
 8006d7c:	e003      	b.n	8006d86 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	fab3 f383 	clz	r3, r3
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	005b      	lsls	r3, r3, #1
 8006d88:	2103      	movs	r1, #3
 8006d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8e:	43db      	mvns	r3, r3
 8006d90:	401a      	ands	r2, r3
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	fa93 f3a3 	rbit	r3, r3
 8006d9c:	61fb      	str	r3, [r7, #28]
  return result;
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006da8:	2320      	movs	r3, #32
 8006daa:	e003      	b.n	8006db4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dae:	fab3 f383 	clz	r3, r3
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	6879      	ldr	r1, [r7, #4]
 8006db8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dbc:	431a      	orrs	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	601a      	str	r2, [r3, #0]
}
 8006dc2:	bf00      	nop
 8006dc4:	372c      	adds	r7, #44	@ 0x2c
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <LL_GPIO_SetPinOutputType>:
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b085      	sub	sp, #20
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	60b9      	str	r1, [r7, #8]
 8006dd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	43db      	mvns	r3, r3
 8006de2:	401a      	ands	r2, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	fb01 f303 	mul.w	r3, r1, r3
 8006dec:	431a      	orrs	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	605a      	str	r2, [r3, #4]
}
 8006df2:	bf00      	nop
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <LL_GPIO_SetPinSpeed>:
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b08b      	sub	sp, #44	@ 0x2c
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	689a      	ldr	r2, [r3, #8]
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	fa93 f3a3 	rbit	r3, r3
 8006e18:	613b      	str	r3, [r7, #16]
  return result;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006e24:	2320      	movs	r3, #32
 8006e26:	e003      	b.n	8006e30 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	fab3 f383 	clz	r3, r3
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	005b      	lsls	r3, r3, #1
 8006e32:	2103      	movs	r1, #3
 8006e34:	fa01 f303 	lsl.w	r3, r1, r3
 8006e38:	43db      	mvns	r3, r3
 8006e3a:	401a      	ands	r2, r3
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	fa93 f3a3 	rbit	r3, r3
 8006e46:	61fb      	str	r3, [r7, #28]
  return result;
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006e52:	2320      	movs	r3, #32
 8006e54:	e003      	b.n	8006e5e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e58:	fab3 f383 	clz	r3, r3
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	005b      	lsls	r3, r3, #1
 8006e60:	6879      	ldr	r1, [r7, #4]
 8006e62:	fa01 f303 	lsl.w	r3, r1, r3
 8006e66:	431a      	orrs	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	609a      	str	r2, [r3, #8]
}
 8006e6c:	bf00      	nop
 8006e6e:	372c      	adds	r7, #44	@ 0x2c
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <LL_GPIO_SetPinPull>:
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b08b      	sub	sp, #44	@ 0x2c
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	fa93 f3a3 	rbit	r3, r3
 8006e92:	613b      	str	r3, [r7, #16]
  return result;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006e9e:	2320      	movs	r3, #32
 8006ea0:	e003      	b.n	8006eaa <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	fab3 f383 	clz	r3, r3
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	2103      	movs	r1, #3
 8006eae:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb2:	43db      	mvns	r3, r3
 8006eb4:	401a      	ands	r2, r3
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	fa93 f3a3 	rbit	r3, r3
 8006ec0:	61fb      	str	r3, [r7, #28]
  return result;
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006ecc:	2320      	movs	r3, #32
 8006ece:	e003      	b.n	8006ed8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed2:	fab3 f383 	clz	r3, r3
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	6879      	ldr	r1, [r7, #4]
 8006edc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee0:	431a      	orrs	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	60da      	str	r2, [r3, #12]
}
 8006ee6:	bf00      	nop
 8006ee8:	372c      	adds	r7, #44	@ 0x2c
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <LL_GPIO_SetAFPin_0_7>:
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b08b      	sub	sp, #44	@ 0x2c
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6a1a      	ldr	r2, [r3, #32]
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	fa93 f3a3 	rbit	r3, r3
 8006f0c:	613b      	str	r3, [r7, #16]
  return result;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006f18:	2320      	movs	r3, #32
 8006f1a:	e003      	b.n	8006f24 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	fab3 f383 	clz	r3, r3
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	210f      	movs	r1, #15
 8006f28:	fa01 f303 	lsl.w	r3, r1, r3
 8006f2c:	43db      	mvns	r3, r3
 8006f2e:	401a      	ands	r2, r3
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	fa93 f3a3 	rbit	r3, r3
 8006f3a:	61fb      	str	r3, [r7, #28]
  return result;
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006f46:	2320      	movs	r3, #32
 8006f48:	e003      	b.n	8006f52 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	fab3 f383 	clz	r3, r3
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	fa01 f303 	lsl.w	r3, r1, r3
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	621a      	str	r2, [r3, #32]
}
 8006f60:	bf00      	nop
 8006f62:	372c      	adds	r7, #44	@ 0x2c
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <LL_GPIO_SetAFPin_8_15>:
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b08b      	sub	sp, #44	@ 0x2c
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	0a1b      	lsrs	r3, r3, #8
 8006f80:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	fa93 f3a3 	rbit	r3, r3
 8006f88:	613b      	str	r3, [r7, #16]
  return result;
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006f94:	2320      	movs	r3, #32
 8006f96:	e003      	b.n	8006fa0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	fab3 f383 	clz	r3, r3
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	210f      	movs	r1, #15
 8006fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa8:	43db      	mvns	r3, r3
 8006faa:	401a      	ands	r2, r3
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	0a1b      	lsrs	r3, r3, #8
 8006fb0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	fa93 f3a3 	rbit	r3, r3
 8006fb8:	61fb      	str	r3, [r7, #28]
  return result;
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006fc4:	2320      	movs	r3, #32
 8006fc6:	e003      	b.n	8006fd0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fca:	fab3 f383 	clz	r3, r3
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	6879      	ldr	r1, [r7, #4]
 8006fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006fde:	bf00      	nop
 8006fe0:	372c      	adds	r7, #44	@ 0x2c
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b08a      	sub	sp, #40	@ 0x28
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	fa93 f3a3 	rbit	r3, r3
 8007008:	617b      	str	r3, [r7, #20]
  return result;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <LL_GPIO_Init+0x2e>
    return 32U;
 8007014:	2320      	movs	r3, #32
 8007016:	e003      	b.n	8007020 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	fab3 f383 	clz	r3, r3
 800701e:	b2db      	uxtb	r3, r3
 8007020:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007022:	e057      	b.n	80070d4 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	2101      	movs	r1, #1
 800702a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702c:	fa01 f303 	lsl.w	r3, r1, r3
 8007030:	4013      	ands	r3, r2
 8007032:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d049      	beq.n	80070ce <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d003      	beq.n	800704a <LL_GPIO_Init+0x60>
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2b02      	cmp	r3, #2
 8007048:	d10d      	bne.n	8007066 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	461a      	mov	r2, r3
 8007050:	6a39      	ldr	r1, [r7, #32]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7ff fed3 	bl	8006dfe <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	461a      	mov	r2, r3
 800705e:	6a39      	ldr	r1, [r7, #32]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f7ff feb4 	bl	8006dce <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	461a      	mov	r2, r3
 800706c:	6a39      	ldr	r1, [r7, #32]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7ff ff02 	bl	8006e78 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	2b02      	cmp	r3, #2
 800707a:	d121      	bne.n	80070c0 <LL_GPIO_Init+0xd6>
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	fa93 f3a3 	rbit	r3, r3
 8007086:	60bb      	str	r3, [r7, #8]
  return result;
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <LL_GPIO_Init+0xac>
    return 32U;
 8007092:	2320      	movs	r3, #32
 8007094:	e003      	b.n	800709e <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	fab3 f383 	clz	r3, r3
 800709c:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800709e:	2b07      	cmp	r3, #7
 80070a0:	d807      	bhi.n	80070b2 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	461a      	mov	r2, r3
 80070a8:	6a39      	ldr	r1, [r7, #32]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7ff ff21 	bl	8006ef2 <LL_GPIO_SetAFPin_0_7>
 80070b0:	e006      	b.n	80070c0 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	461a      	mov	r2, r3
 80070b8:	6a39      	ldr	r1, [r7, #32]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7ff ff56 	bl	8006f6c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	461a      	mov	r2, r3
 80070c6:	6a39      	ldr	r1, [r7, #32]
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7ff fe43 	bl	8006d54 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80070ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d0:	3301      	adds	r3, #1
 80070d2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070da:	fa22 f303 	lsr.w	r3, r2, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1a0      	bne.n	8007024 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3728      	adds	r7, #40	@ 0x28
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80070ec:	b480      	push	{r7}
 80070ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80070f0:	4b04      	ldr	r3, [pc, #16]	@ (8007104 <LL_RCC_GetSysClkSource+0x18>)
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f003 030c 	and.w	r3, r3, #12
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	40023800 	.word	0x40023800

08007108 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8007108:	b480      	push	{r7}
 800710a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800710c:	4b04      	ldr	r3, [pc, #16]	@ (8007120 <LL_RCC_GetAHBPrescaler+0x18>)
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8007114:	4618      	mov	r0, r3
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	40023800 	.word	0x40023800

08007124 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007124:	b480      	push	{r7}
 8007126:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007128:	4b04      	ldr	r3, [pc, #16]	@ (800713c <LL_RCC_GetAPB1Prescaler+0x18>)
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8007130:	4618      	mov	r0, r3
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	40023800 	.word	0x40023800

08007140 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8007140:	b480      	push	{r7}
 8007142:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007144:	4b04      	ldr	r3, [pc, #16]	@ (8007158 <LL_RCC_GetAPB2Prescaler+0x18>)
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800714c:	4618      	mov	r0, r3
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	40023800 	.word	0x40023800

0800715c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800715c:	b480      	push	{r7}
 800715e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007160:	4b04      	ldr	r3, [pc, #16]	@ (8007174 <LL_RCC_PLL_GetMainSource+0x18>)
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8007168:	4618      	mov	r0, r3
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	40023800 	.word	0x40023800

08007178 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800717c:	4b04      	ldr	r3, [pc, #16]	@ (8007190 <LL_RCC_PLL_GetN+0x18>)
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	099b      	lsrs	r3, r3, #6
 8007182:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8007186:	4618      	mov	r0, r3
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	40023800 	.word	0x40023800

08007194 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8007194:	b480      	push	{r7}
 8007196:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8007198:	4b04      	ldr	r3, [pc, #16]	@ (80071ac <LL_RCC_PLL_GetP+0x18>)
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	40023800 	.word	0x40023800

080071b0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80071b0:	b480      	push	{r7}
 80071b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80071b4:	4b04      	ldr	r3, [pc, #16]	@ (80071c8 <LL_RCC_PLL_GetDivider+0x18>)
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80071bc:	4618      	mov	r0, r3
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	40023800 	.word	0x40023800

080071cc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80071d4:	f000 f820 	bl	8007218 <RCC_GetSystemClockFreq>
 80071d8:	4602      	mov	r2, r0
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 f83e 	bl	8007264 <RCC_GetHCLKClockFreq>
 80071e8:	4602      	mov	r2, r0
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 f84c 	bl	8007290 <RCC_GetPCLK1ClockFreq>
 80071f8:	4602      	mov	r2, r0
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	4618      	mov	r0, r3
 8007204:	f000 f858 	bl	80072b8 <RCC_GetPCLK2ClockFreq>
 8007208:	4602      	mov	r2, r0
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	60da      	str	r2, [r3, #12]
}
 800720e:	bf00      	nop
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
	...

08007218 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8007222:	f7ff ff63 	bl	80070ec <LL_RCC_GetSysClkSource>
 8007226:	4603      	mov	r3, r0
 8007228:	2b08      	cmp	r3, #8
 800722a:	d00c      	beq.n	8007246 <RCC_GetSystemClockFreq+0x2e>
 800722c:	2b08      	cmp	r3, #8
 800722e:	d80f      	bhi.n	8007250 <RCC_GetSystemClockFreq+0x38>
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <RCC_GetSystemClockFreq+0x22>
 8007234:	2b04      	cmp	r3, #4
 8007236:	d003      	beq.n	8007240 <RCC_GetSystemClockFreq+0x28>
 8007238:	e00a      	b.n	8007250 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800723a:	4b09      	ldr	r3, [pc, #36]	@ (8007260 <RCC_GetSystemClockFreq+0x48>)
 800723c:	607b      	str	r3, [r7, #4]
      break;
 800723e:	e00a      	b.n	8007256 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8007240:	4b07      	ldr	r3, [pc, #28]	@ (8007260 <RCC_GetSystemClockFreq+0x48>)
 8007242:	607b      	str	r3, [r7, #4]
      break;
 8007244:	e007      	b.n	8007256 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8007246:	2008      	movs	r0, #8
 8007248:	f000 f84a 	bl	80072e0 <RCC_PLL_GetFreqDomain_SYS>
 800724c:	6078      	str	r0, [r7, #4]
      break;
 800724e:	e002      	b.n	8007256 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8007250:	4b03      	ldr	r3, [pc, #12]	@ (8007260 <RCC_GetSystemClockFreq+0x48>)
 8007252:	607b      	str	r3, [r7, #4]
      break;
 8007254:	bf00      	nop
  }

  return frequency;
 8007256:	687b      	ldr	r3, [r7, #4]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	00f42400 	.word	0x00f42400

08007264 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800726c:	f7ff ff4c 	bl	8007108 <LL_RCC_GetAHBPrescaler>
 8007270:	4603      	mov	r3, r0
 8007272:	091b      	lsrs	r3, r3, #4
 8007274:	f003 030f 	and.w	r3, r3, #15
 8007278:	4a04      	ldr	r2, [pc, #16]	@ (800728c <RCC_GetHCLKClockFreq+0x28>)
 800727a:	5cd3      	ldrb	r3, [r2, r3]
 800727c:	461a      	mov	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	40d3      	lsrs	r3, r2
}
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	0800ea1c 	.word	0x0800ea1c

08007290 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8007298:	f7ff ff44 	bl	8007124 <LL_RCC_GetAPB1Prescaler>
 800729c:	4603      	mov	r3, r0
 800729e:	0a9b      	lsrs	r3, r3, #10
 80072a0:	4a04      	ldr	r2, [pc, #16]	@ (80072b4 <RCC_GetPCLK1ClockFreq+0x24>)
 80072a2:	5cd3      	ldrb	r3, [r2, r3]
 80072a4:	461a      	mov	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	40d3      	lsrs	r3, r2
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	0800ea2c 	.word	0x0800ea2c

080072b8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80072c0:	f7ff ff3e 	bl	8007140 <LL_RCC_GetAPB2Prescaler>
 80072c4:	4603      	mov	r3, r0
 80072c6:	0b5b      	lsrs	r3, r3, #13
 80072c8:	4a04      	ldr	r2, [pc, #16]	@ (80072dc <RCC_GetPCLK2ClockFreq+0x24>)
 80072ca:	5cd3      	ldrb	r3, [r2, r3]
 80072cc:	461a      	mov	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	40d3      	lsrs	r3, r2
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	0800ea2c 	.word	0x0800ea2c

080072e0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80072e0:	b590      	push	{r4, r7, lr}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80072f4:	f7ff ff32 	bl	800715c <LL_RCC_PLL_GetMainSource>
 80072f8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d004      	beq.n	800730a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007306:	d003      	beq.n	8007310 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8007308:	e005      	b.n	8007316 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800730a:	4b12      	ldr	r3, [pc, #72]	@ (8007354 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800730c:	617b      	str	r3, [r7, #20]
      break;
 800730e:	e005      	b.n	800731c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8007310:	4b10      	ldr	r3, [pc, #64]	@ (8007354 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007312:	617b      	str	r3, [r7, #20]
      break;
 8007314:	e002      	b.n	800731c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8007316:	4b0f      	ldr	r3, [pc, #60]	@ (8007354 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007318:	617b      	str	r3, [r7, #20]
      break;
 800731a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b08      	cmp	r3, #8
 8007320:	d113      	bne.n	800734a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007322:	f7ff ff45 	bl	80071b0 <LL_RCC_PLL_GetDivider>
 8007326:	4602      	mov	r2, r0
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	fbb3 f4f2 	udiv	r4, r3, r2
 800732e:	f7ff ff23 	bl	8007178 <LL_RCC_PLL_GetN>
 8007332:	4603      	mov	r3, r0
 8007334:	fb03 f404 	mul.w	r4, r3, r4
 8007338:	f7ff ff2c 	bl	8007194 <LL_RCC_PLL_GetP>
 800733c:	4603      	mov	r3, r0
 800733e:	0c1b      	lsrs	r3, r3, #16
 8007340:	3301      	adds	r3, #1
 8007342:	005b      	lsls	r3, r3, #1
 8007344:	fbb4 f3f3 	udiv	r3, r4, r3
 8007348:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800734a:	693b      	ldr	r3, [r7, #16]
}
 800734c:	4618      	mov	r0, r3
 800734e:	371c      	adds	r7, #28
 8007350:	46bd      	mov	sp, r7
 8007352:	bd90      	pop	{r4, r7, pc}
 8007354:	00f42400 	.word	0x00f42400

08007358 <LL_SPI_IsEnabled>:
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007368:	2b40      	cmp	r3, #64	@ 0x40
 800736a:	d101      	bne.n	8007370 <LL_SPI_IsEnabled+0x18>
 800736c:	2301      	movs	r3, #1
 800736e:	e000      	b.n	8007372 <LL_SPI_IsEnabled+0x1a>
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <LL_SPI_SetCRCPolynomial>:
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	b29b      	uxth	r3, r3
 800738c:	461a      	mov	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	611a      	str	r2, [r3, #16]
}
 8007392:	bf00      	nop
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b084      	sub	sp, #16
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7ff ffd3 	bl	8007358 <LL_SPI_IsEnabled>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d139      	bne.n	800742c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073c0:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	6811      	ldr	r1, [r2, #0]
 80073c8:	683a      	ldr	r2, [r7, #0]
 80073ca:	6852      	ldr	r2, [r2, #4]
 80073cc:	4311      	orrs	r1, r2
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	6892      	ldr	r2, [r2, #8]
 80073d2:	4311      	orrs	r1, r2
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	68d2      	ldr	r2, [r2, #12]
 80073d8:	4311      	orrs	r1, r2
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	6912      	ldr	r2, [r2, #16]
 80073de:	4311      	orrs	r1, r2
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	6952      	ldr	r2, [r2, #20]
 80073e4:	4311      	orrs	r1, r2
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	6992      	ldr	r2, [r2, #24]
 80073ea:	4311      	orrs	r1, r2
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	69d2      	ldr	r2, [r2, #28]
 80073f0:	4311      	orrs	r1, r2
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	6a12      	ldr	r2, [r2, #32]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	431a      	orrs	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f023 0204 	bic.w	r2, r3, #4
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	0c1b      	lsrs	r3, r3, #16
 800740c:	431a      	orrs	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800741a:	d105      	bne.n	8007428 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007420:	4619      	mov	r1, r3
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7ff ffab 	bl	800737e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8007428:	2300      	movs	r3, #0
 800742a:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	61da      	str	r2, [r3, #28]
  return status;
 8007438:	7bfb      	ldrb	r3, [r7, #15]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <LL_TIM_SetPrescaler>:
{
 8007442:	b480      	push	{r7}
 8007444:	b083      	sub	sp, #12
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007452:	bf00      	nop
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <LL_TIM_SetAutoReload>:
{
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800746e:	bf00      	nop
 8007470:	370c      	adds	r7, #12
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <LL_TIM_SetRepetitionCounter>:
{
 800747a:	b480      	push	{r7}
 800747c:	b083      	sub	sp, #12
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800748a:	bf00      	nop
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <LL_TIM_OC_SetCompareCH1>:
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80074a6:	bf00      	nop
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <LL_TIM_OC_SetCompareCH2>:
{
 80074b2:	b480      	push	{r7}
 80074b4:	b083      	sub	sp, #12
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80074c2:	bf00      	nop
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <LL_TIM_OC_SetCompareCH3>:
{
 80074ce:	b480      	push	{r7}
 80074d0:	b083      	sub	sp, #12
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
 80074d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80074de:	bf00      	nop
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <LL_TIM_OC_SetCompareCH4>:
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80074fa:	bf00      	nop
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8007506:	b480      	push	{r7}
 8007508:	b083      	sub	sp, #12
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	f043 0201 	orr.w	r2, r3, #1
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	615a      	str	r2, [r3, #20]
}
 800751a:	bf00      	nop
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
	...

08007528 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a3d      	ldr	r2, [pc, #244]	@ (8007630 <LL_TIM_Init+0x108>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d013      	beq.n	8007568 <LL_TIM_Init+0x40>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007546:	d00f      	beq.n	8007568 <LL_TIM_Init+0x40>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a3a      	ldr	r2, [pc, #232]	@ (8007634 <LL_TIM_Init+0x10c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d00b      	beq.n	8007568 <LL_TIM_Init+0x40>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a39      	ldr	r2, [pc, #228]	@ (8007638 <LL_TIM_Init+0x110>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d007      	beq.n	8007568 <LL_TIM_Init+0x40>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a38      	ldr	r2, [pc, #224]	@ (800763c <LL_TIM_Init+0x114>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d003      	beq.n	8007568 <LL_TIM_Init+0x40>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a37      	ldr	r2, [pc, #220]	@ (8007640 <LL_TIM_Init+0x118>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d106      	bne.n	8007576 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	4313      	orrs	r3, r2
 8007574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a2d      	ldr	r2, [pc, #180]	@ (8007630 <LL_TIM_Init+0x108>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d02b      	beq.n	80075d6 <LL_TIM_Init+0xae>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007584:	d027      	beq.n	80075d6 <LL_TIM_Init+0xae>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a2a      	ldr	r2, [pc, #168]	@ (8007634 <LL_TIM_Init+0x10c>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d023      	beq.n	80075d6 <LL_TIM_Init+0xae>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a29      	ldr	r2, [pc, #164]	@ (8007638 <LL_TIM_Init+0x110>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d01f      	beq.n	80075d6 <LL_TIM_Init+0xae>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a28      	ldr	r2, [pc, #160]	@ (800763c <LL_TIM_Init+0x114>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d01b      	beq.n	80075d6 <LL_TIM_Init+0xae>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a27      	ldr	r2, [pc, #156]	@ (8007640 <LL_TIM_Init+0x118>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d017      	beq.n	80075d6 <LL_TIM_Init+0xae>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a26      	ldr	r2, [pc, #152]	@ (8007644 <LL_TIM_Init+0x11c>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d013      	beq.n	80075d6 <LL_TIM_Init+0xae>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a25      	ldr	r2, [pc, #148]	@ (8007648 <LL_TIM_Init+0x120>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d00f      	beq.n	80075d6 <LL_TIM_Init+0xae>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a24      	ldr	r2, [pc, #144]	@ (800764c <LL_TIM_Init+0x124>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d00b      	beq.n	80075d6 <LL_TIM_Init+0xae>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a23      	ldr	r2, [pc, #140]	@ (8007650 <LL_TIM_Init+0x128>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d007      	beq.n	80075d6 <LL_TIM_Init+0xae>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a22      	ldr	r2, [pc, #136]	@ (8007654 <LL_TIM_Init+0x12c>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d003      	beq.n	80075d6 <LL_TIM_Init+0xae>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a21      	ldr	r2, [pc, #132]	@ (8007658 <LL_TIM_Init+0x130>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d106      	bne.n	80075e4 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f7ff ff34 	bl	800745e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	881b      	ldrh	r3, [r3, #0]
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7ff ff20 	bl	8007442 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a0a      	ldr	r2, [pc, #40]	@ (8007630 <LL_TIM_Init+0x108>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d003      	beq.n	8007612 <LL_TIM_Init+0xea>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a0c      	ldr	r2, [pc, #48]	@ (8007640 <LL_TIM_Init+0x118>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d105      	bne.n	800761e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	4619      	mov	r1, r3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7ff ff2e 	bl	800747a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7ff ff71 	bl	8007506 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	40010000 	.word	0x40010000
 8007634:	40000400 	.word	0x40000400
 8007638:	40000800 	.word	0x40000800
 800763c:	40000c00 	.word	0x40000c00
 8007640:	40010400 	.word	0x40010400
 8007644:	40014000 	.word	0x40014000
 8007648:	40014400 	.word	0x40014400
 800764c:	40014800 	.word	0x40014800
 8007650:	40001800 	.word	0x40001800
 8007654:	40001c00 	.word	0x40001c00
 8007658:	40002000 	.word	0x40002000

0800765c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007672:	d027      	beq.n	80076c4 <LL_TIM_OC_Init+0x68>
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800767a:	d82a      	bhi.n	80076d2 <LL_TIM_OC_Init+0x76>
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007682:	d018      	beq.n	80076b6 <LL_TIM_OC_Init+0x5a>
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800768a:	d822      	bhi.n	80076d2 <LL_TIM_OC_Init+0x76>
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d003      	beq.n	800769a <LL_TIM_OC_Init+0x3e>
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2b10      	cmp	r3, #16
 8007696:	d007      	beq.n	80076a8 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8007698:	e01b      	b.n	80076d2 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800769a:	6879      	ldr	r1, [r7, #4]
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 f81f 	bl	80076e0 <OC1Config>
 80076a2:	4603      	mov	r3, r0
 80076a4:	75fb      	strb	r3, [r7, #23]
      break;
 80076a6:	e015      	b.n	80076d4 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80076a8:	6879      	ldr	r1, [r7, #4]
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f000 f884 	bl	80077b8 <OC2Config>
 80076b0:	4603      	mov	r3, r0
 80076b2:	75fb      	strb	r3, [r7, #23]
      break;
 80076b4:	e00e      	b.n	80076d4 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80076b6:	6879      	ldr	r1, [r7, #4]
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f000 f8ed 	bl	8007898 <OC3Config>
 80076be:	4603      	mov	r3, r0
 80076c0:	75fb      	strb	r3, [r7, #23]
      break;
 80076c2:	e007      	b.n	80076d4 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80076c4:	6879      	ldr	r1, [r7, #4]
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 f956 	bl	8007978 <OC4Config>
 80076cc:	4603      	mov	r3, r0
 80076ce:	75fb      	strb	r3, [r7, #23]
      break;
 80076d0:	e000      	b.n	80076d4 <LL_TIM_OC_Init+0x78>
      break;
 80076d2:	bf00      	nop
  }

  return result;
 80076d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	f023 0201 	bic.w	r2, r3, #1
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f023 0303 	bic.w	r3, r3, #3
 800770e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4313      	orrs	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f023 0202 	bic.w	r2, r3, #2
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	4313      	orrs	r3, r2
 800772a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f023 0201 	bic.w	r2, r3, #1
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	4313      	orrs	r3, r2
 8007738:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a1c      	ldr	r2, [pc, #112]	@ (80077b0 <OC1Config+0xd0>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d003      	beq.n	800774a <OC1Config+0x6a>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a1b      	ldr	r2, [pc, #108]	@ (80077b4 <OC1Config+0xd4>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d11e      	bne.n	8007788 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	f023 0208 	bic.w	r2, r3, #8
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	695b      	ldr	r3, [r3, #20]
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4313      	orrs	r3, r2
 8007758:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	f023 0204 	bic.w	r2, r3, #4
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4313      	orrs	r3, r2
 8007768:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	4313      	orrs	r3, r2
 8007776:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	005b      	lsls	r3, r3, #1
 8007784:	4313      	orrs	r3, r2
 8007786:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	4619      	mov	r1, r3
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7ff fe7b 	bl	8007496 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	40010000 	.word	0x40010000
 80077b4:	40010400 	.word	0x40010400

080077b8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	f023 0210 	bic.w	r2, r3, #16
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	021b      	lsls	r3, r3, #8
 80077f4:	4313      	orrs	r3, r2
 80077f6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	f023 0220 	bic.w	r2, r3, #32
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	011b      	lsls	r3, r3, #4
 8007804:	4313      	orrs	r3, r2
 8007806:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	f023 0210 	bic.w	r2, r3, #16
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	4313      	orrs	r3, r2
 8007816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a1d      	ldr	r2, [pc, #116]	@ (8007890 <OC2Config+0xd8>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d003      	beq.n	8007828 <OC2Config+0x70>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a1c      	ldr	r2, [pc, #112]	@ (8007894 <OC2Config+0xdc>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d11f      	bne.n	8007868 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	019b      	lsls	r3, r3, #6
 8007834:	4313      	orrs	r3, r2
 8007836:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	019b      	lsls	r3, r3, #6
 8007844:	4313      	orrs	r3, r2
 8007846:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4313      	orrs	r3, r2
 8007856:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	69db      	ldr	r3, [r3, #28]
 8007862:	00db      	lsls	r3, r3, #3
 8007864:	4313      	orrs	r3, r2
 8007866:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7ff fe19 	bl	80074b2 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3718      	adds	r7, #24
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	40010000 	.word	0x40010000
 8007894:	40010400 	.word	0x40010400

08007898 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f023 0303 	bic.w	r3, r3, #3
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	021b      	lsls	r3, r3, #8
 80078e2:	4313      	orrs	r3, r2
 80078e4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	021b      	lsls	r3, r3, #8
 80078f2:	4313      	orrs	r3, r2
 80078f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007970 <OC3Config+0xd8>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d003      	beq.n	8007906 <OC3Config+0x6e>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a1c      	ldr	r2, [pc, #112]	@ (8007974 <OC3Config+0xdc>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d11f      	bne.n	8007946 <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	029b      	lsls	r3, r3, #10
 8007912:	4313      	orrs	r3, r2
 8007914:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	029b      	lsls	r3, r3, #10
 8007922:	4313      	orrs	r3, r2
 8007924:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	011b      	lsls	r3, r3, #4
 8007932:	4313      	orrs	r3, r2
 8007934:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	015b      	lsls	r3, r3, #5
 8007942:	4313      	orrs	r3, r2
 8007944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7ff fdb8 	bl	80074ce <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	697a      	ldr	r2, [r7, #20]
 8007962:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3718      	adds	r7, #24
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	40010000 	.word	0x40010000
 8007974:	40010400 	.word	0x40010400

08007978 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	021b      	lsls	r3, r3, #8
 80079b4:	4313      	orrs	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	031b      	lsls	r3, r3, #12
 80079c4:	4313      	orrs	r3, r2
 80079c6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	031b      	lsls	r3, r3, #12
 80079d4:	4313      	orrs	r3, r2
 80079d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a11      	ldr	r2, [pc, #68]	@ (8007a20 <OC4Config+0xa8>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d003      	beq.n	80079e8 <OC4Config+0x70>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a10      	ldr	r2, [pc, #64]	@ (8007a24 <OC4Config+0xac>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d107      	bne.n	80079f8 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	019b      	lsls	r3, r3, #6
 80079f4:	4313      	orrs	r3, r2
 80079f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7ff fd6d 	bl	80074ea <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3718      	adds	r7, #24
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	40010000 	.word	0x40010000
 8007a24:	40010400 	.word	0x40010400

08007a28 <LL_USART_IsEnabled>:
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a3c:	bf0c      	ite	eq
 8007a3e:	2301      	moveq	r3, #1
 8007a40:	2300      	movne	r3, #0
 8007a42:	b2db      	uxtb	r3, r3
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <LL_USART_SetStopBitsLength>:
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	431a      	orrs	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	611a      	str	r2, [r3, #16]
}
 8007a6a:	bf00      	nop
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <LL_USART_SetHWFlowCtrl>:
{
 8007a76:	b480      	push	{r7}
 8007a78:	b083      	sub	sp, #12
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	695b      	ldr	r3, [r3, #20]
 8007a84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	431a      	orrs	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	615a      	str	r2, [r3, #20]
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <LL_USART_SetBaudRate>:
{
 8007a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007aa0:	b0c0      	sub	sp, #256	@ 0x100
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007aa8:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8007aac:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8007ab0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ab8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007abc:	f040 810c 	bne.w	8007cd8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007ac0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007aca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007ace:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007ad2:	4622      	mov	r2, r4
 8007ad4:	462b      	mov	r3, r5
 8007ad6:	1891      	adds	r1, r2, r2
 8007ad8:	6639      	str	r1, [r7, #96]	@ 0x60
 8007ada:	415b      	adcs	r3, r3
 8007adc:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ade:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8007ae2:	4621      	mov	r1, r4
 8007ae4:	eb12 0801 	adds.w	r8, r2, r1
 8007ae8:	4629      	mov	r1, r5
 8007aea:	eb43 0901 	adc.w	r9, r3, r1
 8007aee:	f04f 0200 	mov.w	r2, #0
 8007af2:	f04f 0300 	mov.w	r3, #0
 8007af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b02:	4690      	mov	r8, r2
 8007b04:	4699      	mov	r9, r3
 8007b06:	4623      	mov	r3, r4
 8007b08:	eb18 0303 	adds.w	r3, r8, r3
 8007b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007b10:	462b      	mov	r3, r5
 8007b12:	eb49 0303 	adc.w	r3, r9, r3
 8007b16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b1a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b1e:	2200      	movs	r2, #0
 8007b20:	469a      	mov	sl, r3
 8007b22:	4693      	mov	fp, r2
 8007b24:	eb1a 030a 	adds.w	r3, sl, sl
 8007b28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b2a:	eb4b 030b 	adc.w	r3, fp, fp
 8007b2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b30:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007b34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007b38:	f7f9 f856 	bl	8000be8 <__aeabi_uldivmod>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4b64      	ldr	r3, [pc, #400]	@ (8007cd4 <LL_USART_SetBaudRate+0x238>)
 8007b42:	fba3 2302 	umull	r2, r3, r3, r2
 8007b46:	095b      	lsrs	r3, r3, #5
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	011b      	lsls	r3, r3, #4
 8007b4c:	b29c      	uxth	r4, r3
 8007b4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b52:	2200      	movs	r2, #0
 8007b54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b58:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007b5c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8007b60:	4642      	mov	r2, r8
 8007b62:	464b      	mov	r3, r9
 8007b64:	1891      	adds	r1, r2, r2
 8007b66:	6539      	str	r1, [r7, #80]	@ 0x50
 8007b68:	415b      	adcs	r3, r3
 8007b6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007b70:	4641      	mov	r1, r8
 8007b72:	1851      	adds	r1, r2, r1
 8007b74:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007b76:	4649      	mov	r1, r9
 8007b78:	414b      	adcs	r3, r1
 8007b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b7c:	f04f 0200 	mov.w	r2, #0
 8007b80:	f04f 0300 	mov.w	r3, #0
 8007b84:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8007b88:	4659      	mov	r1, fp
 8007b8a:	00cb      	lsls	r3, r1, #3
 8007b8c:	4651      	mov	r1, sl
 8007b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b92:	4651      	mov	r1, sl
 8007b94:	00ca      	lsls	r2, r1, #3
 8007b96:	4610      	mov	r0, r2
 8007b98:	4619      	mov	r1, r3
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	4642      	mov	r2, r8
 8007b9e:	189b      	adds	r3, r3, r2
 8007ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ba4:	464b      	mov	r3, r9
 8007ba6:	460a      	mov	r2, r1
 8007ba8:	eb42 0303 	adc.w	r3, r2, r3
 8007bac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007bb0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007bba:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8007bbe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	18db      	adds	r3, r3, r3
 8007bc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bc8:	4613      	mov	r3, r2
 8007bca:	eb42 0303 	adc.w	r3, r2, r3
 8007bce:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bd0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007bd4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8007bd8:	f7f9 f806 	bl	8000be8 <__aeabi_uldivmod>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	4611      	mov	r1, r2
 8007be2:	4b3c      	ldr	r3, [pc, #240]	@ (8007cd4 <LL_USART_SetBaudRate+0x238>)
 8007be4:	fba3 2301 	umull	r2, r3, r3, r1
 8007be8:	095b      	lsrs	r3, r3, #5
 8007bea:	2264      	movs	r2, #100	@ 0x64
 8007bec:	fb02 f303 	mul.w	r3, r2, r3
 8007bf0:	1acb      	subs	r3, r1, r3
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007bf8:	4b36      	ldr	r3, [pc, #216]	@ (8007cd4 <LL_USART_SetBaudRate+0x238>)
 8007bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8007bfe:	095b      	lsrs	r3, r3, #5
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	005b      	lsls	r3, r3, #1
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	4423      	add	r3, r4
 8007c0e:	b29c      	uxth	r4, r3
 8007c10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007c14:	2200      	movs	r2, #0
 8007c16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c1a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007c1e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8007c22:	4642      	mov	r2, r8
 8007c24:	464b      	mov	r3, r9
 8007c26:	1891      	adds	r1, r2, r2
 8007c28:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007c2a:	415b      	adcs	r3, r3
 8007c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c2e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007c32:	4641      	mov	r1, r8
 8007c34:	1851      	adds	r1, r2, r1
 8007c36:	6339      	str	r1, [r7, #48]	@ 0x30
 8007c38:	4649      	mov	r1, r9
 8007c3a:	414b      	adcs	r3, r1
 8007c3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c3e:	f04f 0200 	mov.w	r2, #0
 8007c42:	f04f 0300 	mov.w	r3, #0
 8007c46:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007c4a:	4659      	mov	r1, fp
 8007c4c:	00cb      	lsls	r3, r1, #3
 8007c4e:	4651      	mov	r1, sl
 8007c50:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c54:	4651      	mov	r1, sl
 8007c56:	00ca      	lsls	r2, r1, #3
 8007c58:	4610      	mov	r0, r2
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	4642      	mov	r2, r8
 8007c60:	189b      	adds	r3, r3, r2
 8007c62:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c66:	464b      	mov	r3, r9
 8007c68:	460a      	mov	r2, r1
 8007c6a:	eb42 0303 	adc.w	r3, r2, r3
 8007c6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007c72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007c76:	2200      	movs	r2, #0
 8007c78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c7c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8007c80:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007c84:	460b      	mov	r3, r1
 8007c86:	18db      	adds	r3, r3, r3
 8007c88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	eb42 0303 	adc.w	r3, r2, r3
 8007c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007c96:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8007c9a:	f7f8 ffa5 	bl	8000be8 <__aeabi_uldivmod>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8007cd4 <LL_USART_SetBaudRate+0x238>)
 8007ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ca8:	095b      	lsrs	r3, r3, #5
 8007caa:	2164      	movs	r1, #100	@ 0x64
 8007cac:	fb01 f303 	mul.w	r3, r1, r3
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	00db      	lsls	r3, r3, #3
 8007cb4:	3332      	adds	r3, #50	@ 0x32
 8007cb6:	4a07      	ldr	r2, [pc, #28]	@ (8007cd4 <LL_USART_SetBaudRate+0x238>)
 8007cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cbc:	095b      	lsrs	r3, r3, #5
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	f003 0307 	and.w	r3, r3, #7
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	4423      	add	r3, r4
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	461a      	mov	r2, r3
 8007ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cd0:	609a      	str	r2, [r3, #8]
}
 8007cd2:	e108      	b.n	8007ee6 <LL_USART_SetBaudRate+0x44a>
 8007cd4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007cd8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ce2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007ce6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8007cea:	4642      	mov	r2, r8
 8007cec:	464b      	mov	r3, r9
 8007cee:	1891      	adds	r1, r2, r2
 8007cf0:	6239      	str	r1, [r7, #32]
 8007cf2:	415b      	adcs	r3, r3
 8007cf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007cfa:	4641      	mov	r1, r8
 8007cfc:	1854      	adds	r4, r2, r1
 8007cfe:	4649      	mov	r1, r9
 8007d00:	eb43 0501 	adc.w	r5, r3, r1
 8007d04:	f04f 0200 	mov.w	r2, #0
 8007d08:	f04f 0300 	mov.w	r3, #0
 8007d0c:	00eb      	lsls	r3, r5, #3
 8007d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d12:	00e2      	lsls	r2, r4, #3
 8007d14:	4614      	mov	r4, r2
 8007d16:	461d      	mov	r5, r3
 8007d18:	4643      	mov	r3, r8
 8007d1a:	18e3      	adds	r3, r4, r3
 8007d1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007d20:	464b      	mov	r3, r9
 8007d22:	eb45 0303 	adc.w	r3, r5, r3
 8007d26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007d2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d34:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007d38:	f04f 0200 	mov.w	r2, #0
 8007d3c:	f04f 0300 	mov.w	r3, #0
 8007d40:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8007d44:	4629      	mov	r1, r5
 8007d46:	008b      	lsls	r3, r1, #2
 8007d48:	4621      	mov	r1, r4
 8007d4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d4e:	4621      	mov	r1, r4
 8007d50:	008a      	lsls	r2, r1, #2
 8007d52:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8007d56:	f7f8 ff47 	bl	8000be8 <__aeabi_uldivmod>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	4b65      	ldr	r3, [pc, #404]	@ (8007ef4 <LL_USART_SetBaudRate+0x458>)
 8007d60:	fba3 2302 	umull	r2, r3, r3, r2
 8007d64:	095b      	lsrs	r3, r3, #5
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	011b      	lsls	r3, r3, #4
 8007d6a:	b29c      	uxth	r4, r3
 8007d6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d70:	2200      	movs	r2, #0
 8007d72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007d7a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8007d7e:	4642      	mov	r2, r8
 8007d80:	464b      	mov	r3, r9
 8007d82:	1891      	adds	r1, r2, r2
 8007d84:	61b9      	str	r1, [r7, #24]
 8007d86:	415b      	adcs	r3, r3
 8007d88:	61fb      	str	r3, [r7, #28]
 8007d8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d8e:	4641      	mov	r1, r8
 8007d90:	1851      	adds	r1, r2, r1
 8007d92:	6139      	str	r1, [r7, #16]
 8007d94:	4649      	mov	r1, r9
 8007d96:	414b      	adcs	r3, r1
 8007d98:	617b      	str	r3, [r7, #20]
 8007d9a:	f04f 0200 	mov.w	r2, #0
 8007d9e:	f04f 0300 	mov.w	r3, #0
 8007da2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007da6:	4659      	mov	r1, fp
 8007da8:	00cb      	lsls	r3, r1, #3
 8007daa:	4651      	mov	r1, sl
 8007dac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007db0:	4651      	mov	r1, sl
 8007db2:	00ca      	lsls	r2, r1, #3
 8007db4:	4610      	mov	r0, r2
 8007db6:	4619      	mov	r1, r3
 8007db8:	4603      	mov	r3, r0
 8007dba:	4642      	mov	r2, r8
 8007dbc:	189b      	adds	r3, r3, r2
 8007dbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007dc2:	464b      	mov	r3, r9
 8007dc4:	460a      	mov	r2, r1
 8007dc6:	eb42 0303 	adc.w	r3, r2, r3
 8007dca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007dce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007dd8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007ddc:	f04f 0200 	mov.w	r2, #0
 8007de0:	f04f 0300 	mov.w	r3, #0
 8007de4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8007de8:	4649      	mov	r1, r9
 8007dea:	008b      	lsls	r3, r1, #2
 8007dec:	4641      	mov	r1, r8
 8007dee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007df2:	4641      	mov	r1, r8
 8007df4:	008a      	lsls	r2, r1, #2
 8007df6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8007dfa:	f7f8 fef5 	bl	8000be8 <__aeabi_uldivmod>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	460b      	mov	r3, r1
 8007e02:	4611      	mov	r1, r2
 8007e04:	4b3b      	ldr	r3, [pc, #236]	@ (8007ef4 <LL_USART_SetBaudRate+0x458>)
 8007e06:	fba3 2301 	umull	r2, r3, r3, r1
 8007e0a:	095b      	lsrs	r3, r3, #5
 8007e0c:	2264      	movs	r2, #100	@ 0x64
 8007e0e:	fb02 f303 	mul.w	r3, r2, r3
 8007e12:	1acb      	subs	r3, r1, r3
 8007e14:	011b      	lsls	r3, r3, #4
 8007e16:	3332      	adds	r3, #50	@ 0x32
 8007e18:	4a36      	ldr	r2, [pc, #216]	@ (8007ef4 <LL_USART_SetBaudRate+0x458>)
 8007e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e1e:	095b      	lsrs	r3, r3, #5
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	4423      	add	r3, r4
 8007e2a:	b29c      	uxth	r4, r3
 8007e2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007e30:	2200      	movs	r2, #0
 8007e32:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e34:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007e36:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007e3a:	4642      	mov	r2, r8
 8007e3c:	464b      	mov	r3, r9
 8007e3e:	1891      	adds	r1, r2, r2
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	415b      	adcs	r3, r3
 8007e44:	60fb      	str	r3, [r7, #12]
 8007e46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e4a:	4641      	mov	r1, r8
 8007e4c:	1851      	adds	r1, r2, r1
 8007e4e:	6039      	str	r1, [r7, #0]
 8007e50:	4649      	mov	r1, r9
 8007e52:	414b      	adcs	r3, r1
 8007e54:	607b      	str	r3, [r7, #4]
 8007e56:	f04f 0200 	mov.w	r2, #0
 8007e5a:	f04f 0300 	mov.w	r3, #0
 8007e5e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e62:	4659      	mov	r1, fp
 8007e64:	00cb      	lsls	r3, r1, #3
 8007e66:	4651      	mov	r1, sl
 8007e68:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e6c:	4651      	mov	r1, sl
 8007e6e:	00ca      	lsls	r2, r1, #3
 8007e70:	4610      	mov	r0, r2
 8007e72:	4619      	mov	r1, r3
 8007e74:	4603      	mov	r3, r0
 8007e76:	4642      	mov	r2, r8
 8007e78:	189b      	adds	r3, r3, r2
 8007e7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e7c:	464b      	mov	r3, r9
 8007e7e:	460a      	mov	r2, r1
 8007e80:	eb42 0303 	adc.w	r3, r2, r3
 8007e84:	677b      	str	r3, [r7, #116]	@ 0x74
 8007e86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e8e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e90:	f04f 0200 	mov.w	r2, #0
 8007e94:	f04f 0300 	mov.w	r3, #0
 8007e98:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8007e9c:	4649      	mov	r1, r9
 8007e9e:	008b      	lsls	r3, r1, #2
 8007ea0:	4641      	mov	r1, r8
 8007ea2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ea6:	4641      	mov	r1, r8
 8007ea8:	008a      	lsls	r2, r1, #2
 8007eaa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8007eae:	f7f8 fe9b 	bl	8000be8 <__aeabi_uldivmod>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8007ef4 <LL_USART_SetBaudRate+0x458>)
 8007eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8007ebc:	095b      	lsrs	r3, r3, #5
 8007ebe:	2164      	movs	r1, #100	@ 0x64
 8007ec0:	fb01 f303 	mul.w	r3, r1, r3
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	011b      	lsls	r3, r3, #4
 8007ec8:	3332      	adds	r3, #50	@ 0x32
 8007eca:	4a0a      	ldr	r2, [pc, #40]	@ (8007ef4 <LL_USART_SetBaudRate+0x458>)
 8007ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed0:	095b      	lsrs	r3, r3, #5
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	f003 030f 	and.w	r3, r3, #15
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	4423      	add	r3, r4
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	461a      	mov	r2, r3
 8007ee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ee4:	609a      	str	r2, [r3, #8]
}
 8007ee6:	bf00      	nop
 8007ee8:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007eec:	46bd      	mov	sp, r7
 8007eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ef2:	bf00      	nop
 8007ef4:	51eb851f 	.word	0x51eb851f

08007ef8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007f06:	2300      	movs	r3, #0
 8007f08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7ff fd8c 	bl	8007a28 <LL_USART_IsEnabled>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d15e      	bne.n	8007fd4 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8007f1e:	f023 030c 	bic.w	r3, r3, #12
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	6851      	ldr	r1, [r2, #4]
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	68d2      	ldr	r2, [r2, #12]
 8007f2a:	4311      	orrs	r1, r2
 8007f2c:	683a      	ldr	r2, [r7, #0]
 8007f2e:	6912      	ldr	r2, [r2, #16]
 8007f30:	4311      	orrs	r1, r2
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	6992      	ldr	r2, [r2, #24]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	431a      	orrs	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	4619      	mov	r1, r3
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7ff fd83 	bl	8007a50 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	695b      	ldr	r3, [r3, #20]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f7ff fd90 	bl	8007a76 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8007f56:	f107 0308 	add.w	r3, r7, #8
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7ff f936 	bl	80071cc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a1f      	ldr	r2, [pc, #124]	@ (8007fe0 <LL_USART_Init+0xe8>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d102      	bne.n	8007f6e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	61bb      	str	r3, [r7, #24]
 8007f6c:	e021      	b.n	8007fb2 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a1c      	ldr	r2, [pc, #112]	@ (8007fe4 <LL_USART_Init+0xec>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d102      	bne.n	8007f7c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	61bb      	str	r3, [r7, #24]
 8007f7a:	e01a      	b.n	8007fb2 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8007fe8 <LL_USART_Init+0xf0>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d102      	bne.n	8007f8a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	61bb      	str	r3, [r7, #24]
 8007f88:	e013      	b.n	8007fb2 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a17      	ldr	r2, [pc, #92]	@ (8007fec <LL_USART_Init+0xf4>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d102      	bne.n	8007f98 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	61bb      	str	r3, [r7, #24]
 8007f96:	e00c      	b.n	8007fb2 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a15      	ldr	r2, [pc, #84]	@ (8007ff0 <LL_USART_Init+0xf8>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d102      	bne.n	8007fa6 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	61bb      	str	r3, [r7, #24]
 8007fa4:	e005      	b.n	8007fb2 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a12      	ldr	r2, [pc, #72]	@ (8007ff4 <LL_USART_Init+0xfc>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d101      	bne.n	8007fb2 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00d      	beq.n	8007fd4 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d009      	beq.n	8007fd4 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8007fcc:	69b9      	ldr	r1, [r7, #24]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f7ff fd64 	bl	8007a9c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007fd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3720      	adds	r7, #32
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	40011000 	.word	0x40011000
 8007fe4:	40004400 	.word	0x40004400
 8007fe8:	40004800 	.word	0x40004800
 8007fec:	40011400 	.word	0x40011400
 8007ff0:	40004c00 	.word	0x40004c00
 8007ff4:	40005000 	.word	0x40005000

08007ff8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ff8:	b084      	sub	sp, #16
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	f107 001c 	add.w	r0, r7, #28
 8008006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800800a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800800e:	2b01      	cmp	r3, #1
 8008010:	d123      	bne.n	800805a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008016:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008026:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800803a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800803e:	2b01      	cmp	r3, #1
 8008040:	d105      	bne.n	800804e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f001 fae8 	bl	8009624 <USB_CoreReset>
 8008054:	4603      	mov	r3, r0
 8008056:	73fb      	strb	r3, [r7, #15]
 8008058:	e01b      	b.n	8008092 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f001 fadc 	bl	8009624 <USB_CoreReset>
 800806c:	4603      	mov	r3, r0
 800806e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008070:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008074:	2b00      	cmp	r3, #0
 8008076:	d106      	bne.n	8008086 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800807c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	639a      	str	r2, [r3, #56]	@ 0x38
 8008084:	e005      	b.n	8008092 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800808a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008092:	7fbb      	ldrb	r3, [r7, #30]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d10b      	bne.n	80080b0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	f043 0206 	orr.w	r2, r3, #6
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f043 0220 	orr.w	r2, r3, #32
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080bc:	b004      	add	sp, #16
 80080be:	4770      	bx	lr

080080c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b087      	sub	sp, #28
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	4613      	mov	r3, r2
 80080cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80080ce:	79fb      	ldrb	r3, [r7, #7]
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d165      	bne.n	80081a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	4a41      	ldr	r2, [pc, #260]	@ (80081dc <USB_SetTurnaroundTime+0x11c>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d906      	bls.n	80080ea <USB_SetTurnaroundTime+0x2a>
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	4a40      	ldr	r2, [pc, #256]	@ (80081e0 <USB_SetTurnaroundTime+0x120>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d202      	bcs.n	80080ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80080e4:	230f      	movs	r3, #15
 80080e6:	617b      	str	r3, [r7, #20]
 80080e8:	e062      	b.n	80081b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	4a3c      	ldr	r2, [pc, #240]	@ (80081e0 <USB_SetTurnaroundTime+0x120>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d306      	bcc.n	8008100 <USB_SetTurnaroundTime+0x40>
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	4a3b      	ldr	r2, [pc, #236]	@ (80081e4 <USB_SetTurnaroundTime+0x124>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d202      	bcs.n	8008100 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80080fa:	230e      	movs	r3, #14
 80080fc:	617b      	str	r3, [r7, #20]
 80080fe:	e057      	b.n	80081b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	4a38      	ldr	r2, [pc, #224]	@ (80081e4 <USB_SetTurnaroundTime+0x124>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d306      	bcc.n	8008116 <USB_SetTurnaroundTime+0x56>
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	4a37      	ldr	r2, [pc, #220]	@ (80081e8 <USB_SetTurnaroundTime+0x128>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d202      	bcs.n	8008116 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008110:	230d      	movs	r3, #13
 8008112:	617b      	str	r3, [r7, #20]
 8008114:	e04c      	b.n	80081b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	4a33      	ldr	r2, [pc, #204]	@ (80081e8 <USB_SetTurnaroundTime+0x128>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d306      	bcc.n	800812c <USB_SetTurnaroundTime+0x6c>
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	4a32      	ldr	r2, [pc, #200]	@ (80081ec <USB_SetTurnaroundTime+0x12c>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d802      	bhi.n	800812c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008126:	230c      	movs	r3, #12
 8008128:	617b      	str	r3, [r7, #20]
 800812a:	e041      	b.n	80081b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	4a2f      	ldr	r2, [pc, #188]	@ (80081ec <USB_SetTurnaroundTime+0x12c>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d906      	bls.n	8008142 <USB_SetTurnaroundTime+0x82>
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	4a2e      	ldr	r2, [pc, #184]	@ (80081f0 <USB_SetTurnaroundTime+0x130>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d802      	bhi.n	8008142 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800813c:	230b      	movs	r3, #11
 800813e:	617b      	str	r3, [r7, #20]
 8008140:	e036      	b.n	80081b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	4a2a      	ldr	r2, [pc, #168]	@ (80081f0 <USB_SetTurnaroundTime+0x130>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d906      	bls.n	8008158 <USB_SetTurnaroundTime+0x98>
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	4a29      	ldr	r2, [pc, #164]	@ (80081f4 <USB_SetTurnaroundTime+0x134>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d802      	bhi.n	8008158 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008152:	230a      	movs	r3, #10
 8008154:	617b      	str	r3, [r7, #20]
 8008156:	e02b      	b.n	80081b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	4a26      	ldr	r2, [pc, #152]	@ (80081f4 <USB_SetTurnaroundTime+0x134>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d906      	bls.n	800816e <USB_SetTurnaroundTime+0xae>
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	4a25      	ldr	r2, [pc, #148]	@ (80081f8 <USB_SetTurnaroundTime+0x138>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d202      	bcs.n	800816e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008168:	2309      	movs	r3, #9
 800816a:	617b      	str	r3, [r7, #20]
 800816c:	e020      	b.n	80081b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	4a21      	ldr	r2, [pc, #132]	@ (80081f8 <USB_SetTurnaroundTime+0x138>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d306      	bcc.n	8008184 <USB_SetTurnaroundTime+0xc4>
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	4a20      	ldr	r2, [pc, #128]	@ (80081fc <USB_SetTurnaroundTime+0x13c>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d802      	bhi.n	8008184 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800817e:	2308      	movs	r3, #8
 8008180:	617b      	str	r3, [r7, #20]
 8008182:	e015      	b.n	80081b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	4a1d      	ldr	r2, [pc, #116]	@ (80081fc <USB_SetTurnaroundTime+0x13c>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d906      	bls.n	800819a <USB_SetTurnaroundTime+0xda>
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	4a1c      	ldr	r2, [pc, #112]	@ (8008200 <USB_SetTurnaroundTime+0x140>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d202      	bcs.n	800819a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008194:	2307      	movs	r3, #7
 8008196:	617b      	str	r3, [r7, #20]
 8008198:	e00a      	b.n	80081b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800819a:	2306      	movs	r3, #6
 800819c:	617b      	str	r3, [r7, #20]
 800819e:	e007      	b.n	80081b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80081a0:	79fb      	ldrb	r3, [r7, #7]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d102      	bne.n	80081ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80081a6:	2309      	movs	r3, #9
 80081a8:	617b      	str	r3, [r7, #20]
 80081aa:	e001      	b.n	80081b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80081ac:	2309      	movs	r3, #9
 80081ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	68da      	ldr	r2, [r3, #12]
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	029b      	lsls	r3, r3, #10
 80081c4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80081c8:	431a      	orrs	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	371c      	adds	r7, #28
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	00d8acbf 	.word	0x00d8acbf
 80081e0:	00e4e1c0 	.word	0x00e4e1c0
 80081e4:	00f42400 	.word	0x00f42400
 80081e8:	01067380 	.word	0x01067380
 80081ec:	011a499f 	.word	0x011a499f
 80081f0:	01312cff 	.word	0x01312cff
 80081f4:	014ca43f 	.word	0x014ca43f
 80081f8:	016e3600 	.word	0x016e3600
 80081fc:	01a6ab1f 	.word	0x01a6ab1f
 8008200:	01e84800 	.word	0x01e84800

08008204 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	f043 0201 	orr.w	r2, r3, #1
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f023 0201 	bic.w	r2, r3, #1
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008254:	2300      	movs	r3, #0
 8008256:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008264:	78fb      	ldrb	r3, [r7, #3]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d115      	bne.n	8008296 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008276:	200a      	movs	r0, #10
 8008278:	f7fb fd6e 	bl	8003d58 <HAL_Delay>
      ms += 10U;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	330a      	adds	r3, #10
 8008280:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f001 f93f 	bl	8009506 <USB_GetMode>
 8008288:	4603      	mov	r3, r0
 800828a:	2b01      	cmp	r3, #1
 800828c:	d01e      	beq.n	80082cc <USB_SetCurrentMode+0x84>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2bc7      	cmp	r3, #199	@ 0xc7
 8008292:	d9f0      	bls.n	8008276 <USB_SetCurrentMode+0x2e>
 8008294:	e01a      	b.n	80082cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008296:	78fb      	ldrb	r3, [r7, #3]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d115      	bne.n	80082c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80082a8:	200a      	movs	r0, #10
 80082aa:	f7fb fd55 	bl	8003d58 <HAL_Delay>
      ms += 10U;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	330a      	adds	r3, #10
 80082b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f001 f926 	bl	8009506 <USB_GetMode>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d005      	beq.n	80082cc <USB_SetCurrentMode+0x84>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2bc7      	cmp	r3, #199	@ 0xc7
 80082c4:	d9f0      	bls.n	80082a8 <USB_SetCurrentMode+0x60>
 80082c6:	e001      	b.n	80082cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e005      	b.n	80082d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2bc8      	cmp	r3, #200	@ 0xc8
 80082d0:	d101      	bne.n	80082d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e000      	b.n	80082d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082e0:	b084      	sub	sp, #16
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b086      	sub	sp, #24
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80082ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80082fa:	2300      	movs	r3, #0
 80082fc:	613b      	str	r3, [r7, #16]
 80082fe:	e009      	b.n	8008314 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	3340      	adds	r3, #64	@ 0x40
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4413      	add	r3, r2
 800830a:	2200      	movs	r2, #0
 800830c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	3301      	adds	r3, #1
 8008312:	613b      	str	r3, [r7, #16]
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	2b0e      	cmp	r3, #14
 8008318:	d9f2      	bls.n	8008300 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800831a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800831e:	2b00      	cmp	r3, #0
 8008320:	d11c      	bne.n	800835c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008330:	f043 0302 	orr.w	r3, r3, #2
 8008334:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800833a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008346:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008352:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	639a      	str	r2, [r3, #56]	@ 0x38
 800835a:	e00b      	b.n	8008374 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008360:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800836c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800837a:	461a      	mov	r2, r3
 800837c:	2300      	movs	r3, #0
 800837e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008380:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008384:	2b01      	cmp	r3, #1
 8008386:	d10d      	bne.n	80083a4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008388:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800838c:	2b00      	cmp	r3, #0
 800838e:	d104      	bne.n	800839a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008390:	2100      	movs	r1, #0
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f968 	bl	8008668 <USB_SetDevSpeed>
 8008398:	e008      	b.n	80083ac <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800839a:	2101      	movs	r1, #1
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f963 	bl	8008668 <USB_SetDevSpeed>
 80083a2:	e003      	b.n	80083ac <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80083a4:	2103      	movs	r1, #3
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f95e 	bl	8008668 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80083ac:	2110      	movs	r1, #16
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f8fa 	bl	80085a8 <USB_FlushTxFifo>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f924 	bl	800860c <USB_FlushRxFifo>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d001      	beq.n	80083ce <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083d4:	461a      	mov	r2, r3
 80083d6:	2300      	movs	r3, #0
 80083d8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083e0:	461a      	mov	r2, r3
 80083e2:	2300      	movs	r3, #0
 80083e4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083ec:	461a      	mov	r2, r3
 80083ee:	2300      	movs	r3, #0
 80083f0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083f2:	2300      	movs	r3, #0
 80083f4:	613b      	str	r3, [r7, #16]
 80083f6:	e043      	b.n	8008480 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	015a      	lsls	r2, r3, #5
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800840a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800840e:	d118      	bne.n	8008442 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10a      	bne.n	800842c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	015a      	lsls	r2, r3, #5
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	4413      	add	r3, r2
 800841e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008422:	461a      	mov	r2, r3
 8008424:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008428:	6013      	str	r3, [r2, #0]
 800842a:	e013      	b.n	8008454 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	015a      	lsls	r2, r3, #5
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4413      	add	r3, r2
 8008434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008438:	461a      	mov	r2, r3
 800843a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800843e:	6013      	str	r3, [r2, #0]
 8008440:	e008      	b.n	8008454 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	4413      	add	r3, r2
 800844a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800844e:	461a      	mov	r2, r3
 8008450:	2300      	movs	r3, #0
 8008452:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	015a      	lsls	r2, r3, #5
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	4413      	add	r3, r2
 800845c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008460:	461a      	mov	r2, r3
 8008462:	2300      	movs	r3, #0
 8008464:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	015a      	lsls	r2, r3, #5
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	4413      	add	r3, r2
 800846e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008472:	461a      	mov	r2, r3
 8008474:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008478:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	3301      	adds	r3, #1
 800847e:	613b      	str	r3, [r7, #16]
 8008480:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008484:	461a      	mov	r2, r3
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	4293      	cmp	r3, r2
 800848a:	d3b5      	bcc.n	80083f8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800848c:	2300      	movs	r3, #0
 800848e:	613b      	str	r3, [r7, #16]
 8008490:	e043      	b.n	800851a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	015a      	lsls	r2, r3, #5
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	4413      	add	r3, r2
 800849a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084a8:	d118      	bne.n	80084dc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10a      	bne.n	80084c6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	015a      	lsls	r2, r3, #5
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	4413      	add	r3, r2
 80084b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084bc:	461a      	mov	r2, r3
 80084be:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80084c2:	6013      	str	r3, [r2, #0]
 80084c4:	e013      	b.n	80084ee <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	015a      	lsls	r2, r3, #5
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084d2:	461a      	mov	r2, r3
 80084d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80084d8:	6013      	str	r3, [r2, #0]
 80084da:	e008      	b.n	80084ee <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	015a      	lsls	r2, r3, #5
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	4413      	add	r3, r2
 80084e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084e8:	461a      	mov	r2, r3
 80084ea:	2300      	movs	r3, #0
 80084ec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	015a      	lsls	r2, r3, #5
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	4413      	add	r3, r2
 80084f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084fa:	461a      	mov	r2, r3
 80084fc:	2300      	movs	r3, #0
 80084fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	4413      	add	r3, r2
 8008508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800850c:	461a      	mov	r2, r3
 800850e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008512:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	3301      	adds	r3, #1
 8008518:	613b      	str	r3, [r7, #16]
 800851a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800851e:	461a      	mov	r2, r3
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	4293      	cmp	r3, r2
 8008524:	d3b5      	bcc.n	8008492 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008538:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008546:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008548:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800854c:	2b00      	cmp	r3, #0
 800854e:	d105      	bne.n	800855c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	f043 0210 	orr.w	r2, r3, #16
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	699a      	ldr	r2, [r3, #24]
 8008560:	4b10      	ldr	r3, [pc, #64]	@ (80085a4 <USB_DevInit+0x2c4>)
 8008562:	4313      	orrs	r3, r2
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008568:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800856c:	2b00      	cmp	r3, #0
 800856e:	d005      	beq.n	800857c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	699b      	ldr	r3, [r3, #24]
 8008574:	f043 0208 	orr.w	r2, r3, #8
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800857c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008580:	2b01      	cmp	r3, #1
 8008582:	d107      	bne.n	8008594 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800858c:	f043 0304 	orr.w	r3, r3, #4
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008594:	7dfb      	ldrb	r3, [r7, #23]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3718      	adds	r7, #24
 800859a:	46bd      	mov	sp, r7
 800859c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085a0:	b004      	add	sp, #16
 80085a2:	4770      	bx	lr
 80085a4:	803c3800 	.word	0x803c3800

080085a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80085b2:	2300      	movs	r3, #0
 80085b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3301      	adds	r3, #1
 80085ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085c2:	d901      	bls.n	80085c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80085c4:	2303      	movs	r3, #3
 80085c6:	e01b      	b.n	8008600 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	daf2      	bge.n	80085b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80085d0:	2300      	movs	r3, #0
 80085d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	019b      	lsls	r3, r3, #6
 80085d8:	f043 0220 	orr.w	r2, r3, #32
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	3301      	adds	r3, #1
 80085e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085ec:	d901      	bls.n	80085f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e006      	b.n	8008600 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	f003 0320 	and.w	r3, r3, #32
 80085fa:	2b20      	cmp	r3, #32
 80085fc:	d0f0      	beq.n	80085e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3714      	adds	r7, #20
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800860c:	b480      	push	{r7}
 800860e:	b085      	sub	sp, #20
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008614:	2300      	movs	r3, #0
 8008616:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	3301      	adds	r3, #1
 800861c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008624:	d901      	bls.n	800862a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e018      	b.n	800865c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	daf2      	bge.n	8008618 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008632:	2300      	movs	r3, #0
 8008634:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2210      	movs	r2, #16
 800863a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	3301      	adds	r3, #1
 8008640:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008648:	d901      	bls.n	800864e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	e006      	b.n	800865c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	f003 0310 	and.w	r3, r3, #16
 8008656:	2b10      	cmp	r3, #16
 8008658:	d0f0      	beq.n	800863c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	460b      	mov	r3, r1
 8008672:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	78fb      	ldrb	r3, [r7, #3]
 8008682:	68f9      	ldr	r1, [r7, #12]
 8008684:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008688:	4313      	orrs	r3, r2
 800868a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800869a:	b480      	push	{r7}
 800869c:	b087      	sub	sp, #28
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f003 0306 	and.w	r3, r3, #6
 80086b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d102      	bne.n	80086c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80086ba:	2300      	movs	r3, #0
 80086bc:	75fb      	strb	r3, [r7, #23]
 80086be:	e00a      	b.n	80086d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d002      	beq.n	80086cc <USB_GetDevSpeed+0x32>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2b06      	cmp	r3, #6
 80086ca:	d102      	bne.n	80086d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80086cc:	2302      	movs	r3, #2
 80086ce:	75fb      	strb	r3, [r7, #23]
 80086d0:	e001      	b.n	80086d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80086d2:	230f      	movs	r3, #15
 80086d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80086d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	371c      	adds	r7, #28
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	785b      	ldrb	r3, [r3, #1]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d13a      	bne.n	8008776 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008706:	69da      	ldr	r2, [r3, #28]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	f003 030f 	and.w	r3, r3, #15
 8008710:	2101      	movs	r1, #1
 8008712:	fa01 f303 	lsl.w	r3, r1, r3
 8008716:	b29b      	uxth	r3, r3
 8008718:	68f9      	ldr	r1, [r7, #12]
 800871a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800871e:	4313      	orrs	r3, r2
 8008720:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	015a      	lsls	r2, r3, #5
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	4413      	add	r3, r2
 800872a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d155      	bne.n	80087e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	015a      	lsls	r2, r3, #5
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	4413      	add	r3, r2
 8008740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	791b      	ldrb	r3, [r3, #4]
 8008752:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008754:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	059b      	lsls	r3, r3, #22
 800875a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800875c:	4313      	orrs	r3, r2
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	0151      	lsls	r1, r2, #5
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	440a      	add	r2, r1
 8008766:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800876a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800876e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008772:	6013      	str	r3, [r2, #0]
 8008774:	e036      	b.n	80087e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800877c:	69da      	ldr	r2, [r3, #28]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	f003 030f 	and.w	r3, r3, #15
 8008786:	2101      	movs	r1, #1
 8008788:	fa01 f303 	lsl.w	r3, r1, r3
 800878c:	041b      	lsls	r3, r3, #16
 800878e:	68f9      	ldr	r1, [r7, #12]
 8008790:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008794:	4313      	orrs	r3, r2
 8008796:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	015a      	lsls	r2, r3, #5
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	4413      	add	r3, r2
 80087a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d11a      	bne.n	80087e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	791b      	ldrb	r3, [r3, #4]
 80087c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80087ca:	430b      	orrs	r3, r1
 80087cc:	4313      	orrs	r3, r2
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	0151      	lsls	r1, r2, #5
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	440a      	add	r2, r1
 80087d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3714      	adds	r7, #20
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
	...

080087f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	785b      	ldrb	r3, [r3, #1]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d161      	bne.n	80088d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	015a      	lsls	r2, r3, #5
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	4413      	add	r3, r2
 8008818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008822:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008826:	d11f      	bne.n	8008868 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	015a      	lsls	r2, r3, #5
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	4413      	add	r3, r2
 8008830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	0151      	lsls	r1, r2, #5
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	440a      	add	r2, r1
 800883e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008842:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008846:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	015a      	lsls	r2, r3, #5
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4413      	add	r3, r2
 8008850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	0151      	lsls	r1, r2, #5
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	440a      	add	r2, r1
 800885e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008862:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008866:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800886e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	f003 030f 	and.w	r3, r3, #15
 8008878:	2101      	movs	r1, #1
 800887a:	fa01 f303 	lsl.w	r3, r1, r3
 800887e:	b29b      	uxth	r3, r3
 8008880:	43db      	mvns	r3, r3
 8008882:	68f9      	ldr	r1, [r7, #12]
 8008884:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008888:	4013      	ands	r3, r2
 800888a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008892:	69da      	ldr	r2, [r3, #28]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	f003 030f 	and.w	r3, r3, #15
 800889c:	2101      	movs	r1, #1
 800889e:	fa01 f303 	lsl.w	r3, r1, r3
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	43db      	mvns	r3, r3
 80088a6:	68f9      	ldr	r1, [r7, #12]
 80088a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088ac:	4013      	ands	r3, r2
 80088ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	015a      	lsls	r2, r3, #5
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	4413      	add	r3, r2
 80088b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	0159      	lsls	r1, r3, #5
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	440b      	add	r3, r1
 80088c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088ca:	4619      	mov	r1, r3
 80088cc:	4b35      	ldr	r3, [pc, #212]	@ (80089a4 <USB_DeactivateEndpoint+0x1b0>)
 80088ce:	4013      	ands	r3, r2
 80088d0:	600b      	str	r3, [r1, #0]
 80088d2:	e060      	b.n	8008996 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	015a      	lsls	r2, r3, #5
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088ea:	d11f      	bne.n	800892c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	015a      	lsls	r2, r3, #5
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	4413      	add	r3, r2
 80088f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	0151      	lsls	r1, r2, #5
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	440a      	add	r2, r1
 8008902:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008906:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800890a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	015a      	lsls	r2, r3, #5
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	4413      	add	r3, r2
 8008914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	68ba      	ldr	r2, [r7, #8]
 800891c:	0151      	lsls	r1, r2, #5
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	440a      	add	r2, r1
 8008922:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008926:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800892a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008932:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	f003 030f 	and.w	r3, r3, #15
 800893c:	2101      	movs	r1, #1
 800893e:	fa01 f303 	lsl.w	r3, r1, r3
 8008942:	041b      	lsls	r3, r3, #16
 8008944:	43db      	mvns	r3, r3
 8008946:	68f9      	ldr	r1, [r7, #12]
 8008948:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800894c:	4013      	ands	r3, r2
 800894e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008956:	69da      	ldr	r2, [r3, #28]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	f003 030f 	and.w	r3, r3, #15
 8008960:	2101      	movs	r1, #1
 8008962:	fa01 f303 	lsl.w	r3, r1, r3
 8008966:	041b      	lsls	r3, r3, #16
 8008968:	43db      	mvns	r3, r3
 800896a:	68f9      	ldr	r1, [r7, #12]
 800896c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008970:	4013      	ands	r3, r2
 8008972:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	015a      	lsls	r2, r3, #5
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	4413      	add	r3, r2
 800897c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	0159      	lsls	r1, r3, #5
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	440b      	add	r3, r1
 800898a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800898e:	4619      	mov	r1, r3
 8008990:	4b05      	ldr	r3, [pc, #20]	@ (80089a8 <USB_DeactivateEndpoint+0x1b4>)
 8008992:	4013      	ands	r3, r2
 8008994:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3714      	adds	r7, #20
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr
 80089a4:	ec337800 	.word	0xec337800
 80089a8:	eff37800 	.word	0xeff37800

080089ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b08a      	sub	sp, #40	@ 0x28
 80089b0:	af02      	add	r7, sp, #8
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	4613      	mov	r3, r2
 80089b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	785b      	ldrb	r3, [r3, #1]
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	f040 817f 	bne.w	8008ccc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d132      	bne.n	8008a3c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	015a      	lsls	r2, r3, #5
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	4413      	add	r3, r2
 80089de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	69ba      	ldr	r2, [r7, #24]
 80089e6:	0151      	lsls	r1, r2, #5
 80089e8:	69fa      	ldr	r2, [r7, #28]
 80089ea:	440a      	add	r2, r1
 80089ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089f0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80089f4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80089f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	015a      	lsls	r2, r3, #5
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	4413      	add	r3, r2
 8008a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	69ba      	ldr	r2, [r7, #24]
 8008a0a:	0151      	lsls	r1, r2, #5
 8008a0c:	69fa      	ldr	r2, [r7, #28]
 8008a0e:	440a      	add	r2, r1
 8008a10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	015a      	lsls	r2, r3, #5
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	4413      	add	r3, r2
 8008a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	69ba      	ldr	r2, [r7, #24]
 8008a2a:	0151      	lsls	r1, r2, #5
 8008a2c:	69fa      	ldr	r2, [r7, #28]
 8008a2e:	440a      	add	r2, r1
 8008a30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a34:	0cdb      	lsrs	r3, r3, #19
 8008a36:	04db      	lsls	r3, r3, #19
 8008a38:	6113      	str	r3, [r2, #16]
 8008a3a:	e097      	b.n	8008b6c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	015a      	lsls	r2, r3, #5
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	69ba      	ldr	r2, [r7, #24]
 8008a4c:	0151      	lsls	r1, r2, #5
 8008a4e:	69fa      	ldr	r2, [r7, #28]
 8008a50:	440a      	add	r2, r1
 8008a52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a56:	0cdb      	lsrs	r3, r3, #19
 8008a58:	04db      	lsls	r3, r3, #19
 8008a5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	015a      	lsls	r2, r3, #5
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	4413      	add	r3, r2
 8008a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	69ba      	ldr	r2, [r7, #24]
 8008a6c:	0151      	lsls	r1, r2, #5
 8008a6e:	69fa      	ldr	r2, [r7, #28]
 8008a70:	440a      	add	r2, r1
 8008a72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a76:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008a7a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008a7e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d11a      	bne.n	8008abc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	691a      	ldr	r2, [r3, #16]
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d903      	bls.n	8008a9a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	689a      	ldr	r2, [r3, #8]
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	015a      	lsls	r2, r3, #5
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	69ba      	ldr	r2, [r7, #24]
 8008aaa:	0151      	lsls	r1, r2, #5
 8008aac:	69fa      	ldr	r2, [r7, #28]
 8008aae:	440a      	add	r2, r1
 8008ab0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ab4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ab8:	6113      	str	r3, [r2, #16]
 8008aba:	e044      	b.n	8008b46 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	691a      	ldr	r2, [r3, #16]
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	1e5a      	subs	r2, r3, #1
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	015a      	lsls	r2, r3, #5
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ade:	691a      	ldr	r2, [r3, #16]
 8008ae0:	8afb      	ldrh	r3, [r7, #22]
 8008ae2:	04d9      	lsls	r1, r3, #19
 8008ae4:	4ba4      	ldr	r3, [pc, #656]	@ (8008d78 <USB_EPStartXfer+0x3cc>)
 8008ae6:	400b      	ands	r3, r1
 8008ae8:	69b9      	ldr	r1, [r7, #24]
 8008aea:	0148      	lsls	r0, r1, #5
 8008aec:	69f9      	ldr	r1, [r7, #28]
 8008aee:	4401      	add	r1, r0
 8008af0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008af4:	4313      	orrs	r3, r2
 8008af6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	791b      	ldrb	r3, [r3, #4]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d122      	bne.n	8008b46 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	015a      	lsls	r2, r3, #5
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	4413      	add	r3, r2
 8008b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	69ba      	ldr	r2, [r7, #24]
 8008b10:	0151      	lsls	r1, r2, #5
 8008b12:	69fa      	ldr	r2, [r7, #28]
 8008b14:	440a      	add	r2, r1
 8008b16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b1a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008b1e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b2c:	691a      	ldr	r2, [r3, #16]
 8008b2e:	8afb      	ldrh	r3, [r7, #22]
 8008b30:	075b      	lsls	r3, r3, #29
 8008b32:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008b36:	69b9      	ldr	r1, [r7, #24]
 8008b38:	0148      	lsls	r0, r1, #5
 8008b3a:	69f9      	ldr	r1, [r7, #28]
 8008b3c:	4401      	add	r1, r0
 8008b3e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008b42:	4313      	orrs	r3, r2
 8008b44:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b52:	691a      	ldr	r2, [r3, #16]
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b5c:	69b9      	ldr	r1, [r7, #24]
 8008b5e:	0148      	lsls	r0, r1, #5
 8008b60:	69f9      	ldr	r1, [r7, #28]
 8008b62:	4401      	add	r1, r0
 8008b64:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008b6c:	79fb      	ldrb	r3, [r7, #7]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d14b      	bne.n	8008c0a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	69db      	ldr	r3, [r3, #28]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d009      	beq.n	8008b8e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	015a      	lsls	r2, r3, #5
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	4413      	add	r3, r2
 8008b82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b86:	461a      	mov	r2, r3
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	69db      	ldr	r3, [r3, #28]
 8008b8c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	791b      	ldrb	r3, [r3, #4]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d128      	bne.n	8008be8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d110      	bne.n	8008bc8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	015a      	lsls	r2, r3, #5
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	4413      	add	r3, r2
 8008bae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	69ba      	ldr	r2, [r7, #24]
 8008bb6:	0151      	lsls	r1, r2, #5
 8008bb8:	69fa      	ldr	r2, [r7, #28]
 8008bba:	440a      	add	r2, r1
 8008bbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bc0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008bc4:	6013      	str	r3, [r2, #0]
 8008bc6:	e00f      	b.n	8008be8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	0151      	lsls	r1, r2, #5
 8008bda:	69fa      	ldr	r2, [r7, #28]
 8008bdc:	440a      	add	r2, r1
 8008bde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008be6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	015a      	lsls	r2, r3, #5
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	4413      	add	r3, r2
 8008bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	69ba      	ldr	r2, [r7, #24]
 8008bf8:	0151      	lsls	r1, r2, #5
 8008bfa:	69fa      	ldr	r2, [r7, #28]
 8008bfc:	440a      	add	r2, r1
 8008bfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c02:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008c06:	6013      	str	r3, [r2, #0]
 8008c08:	e166      	b.n	8008ed8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	015a      	lsls	r2, r3, #5
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	4413      	add	r3, r2
 8008c12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	69ba      	ldr	r2, [r7, #24]
 8008c1a:	0151      	lsls	r1, r2, #5
 8008c1c:	69fa      	ldr	r2, [r7, #28]
 8008c1e:	440a      	add	r2, r1
 8008c20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c24:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008c28:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	791b      	ldrb	r3, [r3, #4]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d015      	beq.n	8008c5e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f000 814e 	beq.w	8008ed8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	f003 030f 	and.w	r3, r3, #15
 8008c4c:	2101      	movs	r1, #1
 8008c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c52:	69f9      	ldr	r1, [r7, #28]
 8008c54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	634b      	str	r3, [r1, #52]	@ 0x34
 8008c5c:	e13c      	b.n	8008ed8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d110      	bne.n	8008c90 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	015a      	lsls	r2, r3, #5
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	4413      	add	r3, r2
 8008c76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	69ba      	ldr	r2, [r7, #24]
 8008c7e:	0151      	lsls	r1, r2, #5
 8008c80:	69fa      	ldr	r2, [r7, #28]
 8008c82:	440a      	add	r2, r1
 8008c84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008c8c:	6013      	str	r3, [r2, #0]
 8008c8e:	e00f      	b.n	8008cb0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	69ba      	ldr	r2, [r7, #24]
 8008ca0:	0151      	lsls	r1, r2, #5
 8008ca2:	69fa      	ldr	r2, [r7, #28]
 8008ca4:	440a      	add	r2, r1
 8008ca6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008caa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cae:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	68d9      	ldr	r1, [r3, #12]
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	781a      	ldrb	r2, [r3, #0]
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	b298      	uxth	r0, r3
 8008cbe:	79fb      	ldrb	r3, [r7, #7]
 8008cc0:	9300      	str	r3, [sp, #0]
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f000 f9b9 	bl	800903c <USB_WritePacket>
 8008cca:	e105      	b.n	8008ed8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	015a      	lsls	r2, r3, #5
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	69ba      	ldr	r2, [r7, #24]
 8008cdc:	0151      	lsls	r1, r2, #5
 8008cde:	69fa      	ldr	r2, [r7, #28]
 8008ce0:	440a      	add	r2, r1
 8008ce2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ce6:	0cdb      	lsrs	r3, r3, #19
 8008ce8:	04db      	lsls	r3, r3, #19
 8008cea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	015a      	lsls	r2, r3, #5
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	69ba      	ldr	r2, [r7, #24]
 8008cfc:	0151      	lsls	r1, r2, #5
 8008cfe:	69fa      	ldr	r2, [r7, #28]
 8008d00:	440a      	add	r2, r1
 8008d02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d06:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008d0a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008d0e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d132      	bne.n	8008d7c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d003      	beq.n	8008d26 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	689a      	ldr	r2, [r3, #8]
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	689a      	ldr	r2, [r3, #8]
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d3a:	691a      	ldr	r2, [r3, #16]
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	6a1b      	ldr	r3, [r3, #32]
 8008d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d44:	69b9      	ldr	r1, [r7, #24]
 8008d46:	0148      	lsls	r0, r1, #5
 8008d48:	69f9      	ldr	r1, [r7, #28]
 8008d4a:	4401      	add	r1, r0
 8008d4c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008d50:	4313      	orrs	r3, r2
 8008d52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	015a      	lsls	r2, r3, #5
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	69ba      	ldr	r2, [r7, #24]
 8008d64:	0151      	lsls	r1, r2, #5
 8008d66:	69fa      	ldr	r2, [r7, #28]
 8008d68:	440a      	add	r2, r1
 8008d6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d72:	6113      	str	r3, [r2, #16]
 8008d74:	e062      	b.n	8008e3c <USB_EPStartXfer+0x490>
 8008d76:	bf00      	nop
 8008d78:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d123      	bne.n	8008dcc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	015a      	lsls	r2, r3, #5
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d90:	691a      	ldr	r2, [r3, #16]
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d9a:	69b9      	ldr	r1, [r7, #24]
 8008d9c:	0148      	lsls	r0, r1, #5
 8008d9e:	69f9      	ldr	r1, [r7, #28]
 8008da0:	4401      	add	r1, r0
 8008da2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008da6:	4313      	orrs	r3, r2
 8008da8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	015a      	lsls	r2, r3, #5
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	4413      	add	r3, r2
 8008db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	69ba      	ldr	r2, [r7, #24]
 8008dba:	0151      	lsls	r1, r2, #5
 8008dbc:	69fa      	ldr	r2, [r7, #28]
 8008dbe:	440a      	add	r2, r1
 8008dc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dc4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008dc8:	6113      	str	r3, [r2, #16]
 8008dca:	e037      	b.n	8008e3c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	691a      	ldr	r2, [r3, #16]
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	1e5a      	subs	r2, r3, #1
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008de0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	8afa      	ldrh	r2, [r7, #22]
 8008de8:	fb03 f202 	mul.w	r2, r3, r2
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	015a      	lsls	r2, r3, #5
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	4413      	add	r3, r2
 8008df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dfc:	691a      	ldr	r2, [r3, #16]
 8008dfe:	8afb      	ldrh	r3, [r7, #22]
 8008e00:	04d9      	lsls	r1, r3, #19
 8008e02:	4b38      	ldr	r3, [pc, #224]	@ (8008ee4 <USB_EPStartXfer+0x538>)
 8008e04:	400b      	ands	r3, r1
 8008e06:	69b9      	ldr	r1, [r7, #24]
 8008e08:	0148      	lsls	r0, r1, #5
 8008e0a:	69f9      	ldr	r1, [r7, #28]
 8008e0c:	4401      	add	r1, r0
 8008e0e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008e12:	4313      	orrs	r3, r2
 8008e14:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	015a      	lsls	r2, r3, #5
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e22:	691a      	ldr	r2, [r3, #16]
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	6a1b      	ldr	r3, [r3, #32]
 8008e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e2c:	69b9      	ldr	r1, [r7, #24]
 8008e2e:	0148      	lsls	r0, r1, #5
 8008e30:	69f9      	ldr	r1, [r7, #28]
 8008e32:	4401      	add	r1, r0
 8008e34:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008e3c:	79fb      	ldrb	r3, [r7, #7]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d10d      	bne.n	8008e5e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d009      	beq.n	8008e5e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	68d9      	ldr	r1, [r3, #12]
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	015a      	lsls	r2, r3, #5
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	4413      	add	r3, r2
 8008e56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e5a:	460a      	mov	r2, r1
 8008e5c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	791b      	ldrb	r3, [r3, #4]
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d128      	bne.n	8008eb8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d110      	bne.n	8008e98 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	015a      	lsls	r2, r3, #5
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	69ba      	ldr	r2, [r7, #24]
 8008e86:	0151      	lsls	r1, r2, #5
 8008e88:	69fa      	ldr	r2, [r7, #28]
 8008e8a:	440a      	add	r2, r1
 8008e8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e90:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008e94:	6013      	str	r3, [r2, #0]
 8008e96:	e00f      	b.n	8008eb8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	015a      	lsls	r2, r3, #5
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	69ba      	ldr	r2, [r7, #24]
 8008ea8:	0151      	lsls	r1, r2, #5
 8008eaa:	69fa      	ldr	r2, [r7, #28]
 8008eac:	440a      	add	r2, r1
 8008eae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008eb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008eb6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	015a      	lsls	r2, r3, #5
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	69ba      	ldr	r2, [r7, #24]
 8008ec8:	0151      	lsls	r1, r2, #5
 8008eca:	69fa      	ldr	r2, [r7, #28]
 8008ecc:	440a      	add	r2, r1
 8008ece:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ed2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008ed6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3720      	adds	r7, #32
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	1ff80000 	.word	0x1ff80000

08008ee8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b087      	sub	sp, #28
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	785b      	ldrb	r3, [r3, #1]
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d14a      	bne.n	8008f9c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	015a      	lsls	r2, r3, #5
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	4413      	add	r3, r2
 8008f10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f1e:	f040 8086 	bne.w	800902e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	015a      	lsls	r2, r3, #5
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	683a      	ldr	r2, [r7, #0]
 8008f34:	7812      	ldrb	r2, [r2, #0]
 8008f36:	0151      	lsls	r1, r2, #5
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	440a      	add	r2, r1
 8008f3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f40:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008f44:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	015a      	lsls	r2, r3, #5
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	4413      	add	r3, r2
 8008f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	7812      	ldrb	r2, [r2, #0]
 8008f5a:	0151      	lsls	r1, r2, #5
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	440a      	add	r2, r1
 8008f60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d902      	bls.n	8008f80 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	75fb      	strb	r3, [r7, #23]
          break;
 8008f7e:	e056      	b.n	800902e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	015a      	lsls	r2, r3, #5
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	4413      	add	r3, r2
 8008f8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f98:	d0e7      	beq.n	8008f6a <USB_EPStopXfer+0x82>
 8008f9a:	e048      	b.n	800902e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	015a      	lsls	r2, r3, #5
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fb4:	d13b      	bne.n	800902e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	015a      	lsls	r2, r3, #5
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	683a      	ldr	r2, [r7, #0]
 8008fc8:	7812      	ldrb	r2, [r2, #0]
 8008fca:	0151      	lsls	r1, r2, #5
 8008fcc:	693a      	ldr	r2, [r7, #16]
 8008fce:	440a      	add	r2, r1
 8008fd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fd4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008fd8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	7812      	ldrb	r2, [r2, #0]
 8008fee:	0151      	lsls	r1, r2, #5
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	440a      	add	r2, r1
 8008ff4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ff8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ffc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	3301      	adds	r3, #1
 8009002:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f242 7210 	movw	r2, #10000	@ 0x2710
 800900a:	4293      	cmp	r3, r2
 800900c:	d902      	bls.n	8009014 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	75fb      	strb	r3, [r7, #23]
          break;
 8009012:	e00c      	b.n	800902e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	4413      	add	r3, r2
 800901e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009028:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800902c:	d0e7      	beq.n	8008ffe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800902e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009030:	4618      	mov	r0, r3
 8009032:	371c      	adds	r7, #28
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800903c:	b480      	push	{r7}
 800903e:	b089      	sub	sp, #36	@ 0x24
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	4611      	mov	r1, r2
 8009048:	461a      	mov	r2, r3
 800904a:	460b      	mov	r3, r1
 800904c:	71fb      	strb	r3, [r7, #7]
 800904e:	4613      	mov	r3, r2
 8009050:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800905a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800905e:	2b00      	cmp	r3, #0
 8009060:	d123      	bne.n	80090aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009062:	88bb      	ldrh	r3, [r7, #4]
 8009064:	3303      	adds	r3, #3
 8009066:	089b      	lsrs	r3, r3, #2
 8009068:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800906a:	2300      	movs	r3, #0
 800906c:	61bb      	str	r3, [r7, #24]
 800906e:	e018      	b.n	80090a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009070:	79fb      	ldrb	r3, [r7, #7]
 8009072:	031a      	lsls	r2, r3, #12
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	4413      	add	r3, r2
 8009078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800907c:	461a      	mov	r2, r3
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	3301      	adds	r3, #1
 8009088:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	3301      	adds	r3, #1
 800908e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	3301      	adds	r3, #1
 8009094:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	3301      	adds	r3, #1
 800909a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	3301      	adds	r3, #1
 80090a0:	61bb      	str	r3, [r7, #24]
 80090a2:	69ba      	ldr	r2, [r7, #24]
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d3e2      	bcc.n	8009070 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3724      	adds	r7, #36	@ 0x24
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b08b      	sub	sp, #44	@ 0x2c
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	4613      	mov	r3, r2
 80090c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80090ce:	88fb      	ldrh	r3, [r7, #6]
 80090d0:	089b      	lsrs	r3, r3, #2
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80090d6:	88fb      	ldrh	r3, [r7, #6]
 80090d8:	f003 0303 	and.w	r3, r3, #3
 80090dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80090de:	2300      	movs	r3, #0
 80090e0:	623b      	str	r3, [r7, #32]
 80090e2:	e014      	b.n	800910e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80090f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f2:	3301      	adds	r3, #1
 80090f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80090f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f8:	3301      	adds	r3, #1
 80090fa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80090fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fe:	3301      	adds	r3, #1
 8009100:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009104:	3301      	adds	r3, #1
 8009106:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009108:	6a3b      	ldr	r3, [r7, #32]
 800910a:	3301      	adds	r3, #1
 800910c:	623b      	str	r3, [r7, #32]
 800910e:	6a3a      	ldr	r2, [r7, #32]
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	429a      	cmp	r2, r3
 8009114:	d3e6      	bcc.n	80090e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009116:	8bfb      	ldrh	r3, [r7, #30]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d01e      	beq.n	800915a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800911c:	2300      	movs	r3, #0
 800911e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009126:	461a      	mov	r2, r3
 8009128:	f107 0310 	add.w	r3, r7, #16
 800912c:	6812      	ldr	r2, [r2, #0]
 800912e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009130:	693a      	ldr	r2, [r7, #16]
 8009132:	6a3b      	ldr	r3, [r7, #32]
 8009134:	b2db      	uxtb	r3, r3
 8009136:	00db      	lsls	r3, r3, #3
 8009138:	fa22 f303 	lsr.w	r3, r2, r3
 800913c:	b2da      	uxtb	r2, r3
 800913e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009140:	701a      	strb	r2, [r3, #0]
      i++;
 8009142:	6a3b      	ldr	r3, [r7, #32]
 8009144:	3301      	adds	r3, #1
 8009146:	623b      	str	r3, [r7, #32]
      pDest++;
 8009148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914a:	3301      	adds	r3, #1
 800914c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800914e:	8bfb      	ldrh	r3, [r7, #30]
 8009150:	3b01      	subs	r3, #1
 8009152:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009154:	8bfb      	ldrh	r3, [r7, #30]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1ea      	bne.n	8009130 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800915a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800915c:	4618      	mov	r0, r3
 800915e:	372c      	adds	r7, #44	@ 0x2c
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	785b      	ldrb	r3, [r3, #1]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d12c      	bne.n	80091de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	015a      	lsls	r2, r3, #5
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	4413      	add	r3, r2
 800918c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	db12      	blt.n	80091bc <USB_EPSetStall+0x54>
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00f      	beq.n	80091bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	0151      	lsls	r1, r2, #5
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	440a      	add	r2, r1
 80091b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80091ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	015a      	lsls	r2, r3, #5
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	4413      	add	r3, r2
 80091c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	0151      	lsls	r1, r2, #5
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	440a      	add	r2, r1
 80091d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80091da:	6013      	str	r3, [r2, #0]
 80091dc:	e02b      	b.n	8009236 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	015a      	lsls	r2, r3, #5
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	4413      	add	r3, r2
 80091e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	db12      	blt.n	8009216 <USB_EPSetStall+0xae>
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00f      	beq.n	8009216 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	015a      	lsls	r2, r3, #5
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	4413      	add	r3, r2
 80091fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	0151      	lsls	r1, r2, #5
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	440a      	add	r2, r1
 800920c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009210:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009214:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	015a      	lsls	r2, r3, #5
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	4413      	add	r3, r2
 800921e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	0151      	lsls	r1, r2, #5
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	440a      	add	r2, r1
 800922c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009230:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009234:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3714      	adds	r7, #20
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	785b      	ldrb	r3, [r3, #1]
 800925c:	2b01      	cmp	r3, #1
 800925e:	d128      	bne.n	80092b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	0151      	lsls	r1, r2, #5
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	440a      	add	r2, r1
 8009276:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800927a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800927e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	791b      	ldrb	r3, [r3, #4]
 8009284:	2b03      	cmp	r3, #3
 8009286:	d003      	beq.n	8009290 <USB_EPClearStall+0x4c>
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	791b      	ldrb	r3, [r3, #4]
 800928c:	2b02      	cmp	r3, #2
 800928e:	d138      	bne.n	8009302 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	015a      	lsls	r2, r3, #5
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	4413      	add	r3, r2
 8009298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68ba      	ldr	r2, [r7, #8]
 80092a0:	0151      	lsls	r1, r2, #5
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	440a      	add	r2, r1
 80092a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092ae:	6013      	str	r3, [r2, #0]
 80092b0:	e027      	b.n	8009302 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	015a      	lsls	r2, r3, #5
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	4413      	add	r3, r2
 80092ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68ba      	ldr	r2, [r7, #8]
 80092c2:	0151      	lsls	r1, r2, #5
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	440a      	add	r2, r1
 80092c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092cc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80092d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	791b      	ldrb	r3, [r3, #4]
 80092d6:	2b03      	cmp	r3, #3
 80092d8:	d003      	beq.n	80092e2 <USB_EPClearStall+0x9e>
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	791b      	ldrb	r3, [r3, #4]
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d10f      	bne.n	8009302 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	015a      	lsls	r2, r3, #5
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	4413      	add	r3, r2
 80092ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	0151      	lsls	r1, r2, #5
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	440a      	add	r2, r1
 80092f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009300:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009310:	b480      	push	{r7}
 8009312:	b085      	sub	sp, #20
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	460b      	mov	r3, r1
 800931a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800932e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009332:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	78fb      	ldrb	r3, [r7, #3]
 800933e:	011b      	lsls	r3, r3, #4
 8009340:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009344:	68f9      	ldr	r1, [r7, #12]
 8009346:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800934a:	4313      	orrs	r3, r2
 800934c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3714      	adds	r7, #20
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009376:	f023 0303 	bic.w	r3, r3, #3
 800937a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800938a:	f023 0302 	bic.w	r3, r3, #2
 800938e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr

0800939e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800939e:	b480      	push	{r7}
 80093a0:	b085      	sub	sp, #20
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80093b8:	f023 0303 	bic.w	r3, r3, #3
 80093bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80093cc:	f043 0302 	orr.w	r3, r3, #2
 80093d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3714      	adds	r7, #20
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	695b      	ldr	r3, [r3, #20]
 80093ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	68fa      	ldr	r2, [r7, #12]
 80093f4:	4013      	ands	r3, r2
 80093f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80093f8:	68fb      	ldr	r3, [r7, #12]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3714      	adds	r7, #20
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr

08009406 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009406:	b480      	push	{r7}
 8009408:	b085      	sub	sp, #20
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009422:	69db      	ldr	r3, [r3, #28]
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	4013      	ands	r3, r2
 8009428:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	0c1b      	lsrs	r3, r3, #16
}
 800942e:	4618      	mov	r0, r3
 8009430:	3714      	adds	r7, #20
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800943a:	b480      	push	{r7}
 800943c:	b085      	sub	sp, #20
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800944c:	699b      	ldr	r3, [r3, #24]
 800944e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009456:	69db      	ldr	r3, [r3, #28]
 8009458:	68ba      	ldr	r2, [r7, #8]
 800945a:	4013      	ands	r3, r2
 800945c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	b29b      	uxth	r3, r3
}
 8009462:	4618      	mov	r0, r3
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800946e:	b480      	push	{r7}
 8009470:	b085      	sub	sp, #20
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	460b      	mov	r3, r1
 8009478:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800947e:	78fb      	ldrb	r3, [r7, #3]
 8009480:	015a      	lsls	r2, r3, #5
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	4413      	add	r3, r2
 8009486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009494:	695b      	ldr	r3, [r3, #20]
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	4013      	ands	r3, r2
 800949a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800949c:	68bb      	ldr	r3, [r7, #8]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b087      	sub	sp, #28
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	460b      	mov	r3, r1
 80094b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80094ce:	78fb      	ldrb	r3, [r7, #3]
 80094d0:	f003 030f 	and.w	r3, r3, #15
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	fa22 f303 	lsr.w	r3, r2, r3
 80094da:	01db      	lsls	r3, r3, #7
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	693a      	ldr	r2, [r7, #16]
 80094e0:	4313      	orrs	r3, r2
 80094e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80094e4:	78fb      	ldrb	r3, [r7, #3]
 80094e6:	015a      	lsls	r2, r3, #5
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	4413      	add	r3, r2
 80094ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	693a      	ldr	r2, [r7, #16]
 80094f4:	4013      	ands	r3, r2
 80094f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80094f8:	68bb      	ldr	r3, [r7, #8]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	371c      	adds	r7, #28
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009506:	b480      	push	{r7}
 8009508:	b083      	sub	sp, #12
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	695b      	ldr	r3, [r3, #20]
 8009512:	f003 0301 	and.w	r3, r3, #1
}
 8009516:	4618      	mov	r0, r3
 8009518:	370c      	adds	r7, #12
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr

08009522 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009522:	b480      	push	{r7}
 8009524:	b085      	sub	sp, #20
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800953c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009540:	f023 0307 	bic.w	r3, r3, #7
 8009544:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009558:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3714      	adds	r7, #20
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009568:	b480      	push	{r7}
 800956a:	b087      	sub	sp, #28
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	460b      	mov	r3, r1
 8009572:	607a      	str	r2, [r7, #4]
 8009574:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	333c      	adds	r3, #60	@ 0x3c
 800957e:	3304      	adds	r3, #4
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	4a26      	ldr	r2, [pc, #152]	@ (8009620 <USB_EP0_OutStart+0xb8>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d90a      	bls.n	80095a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009598:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800959c:	d101      	bne.n	80095a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	e037      	b.n	8009612 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095a8:	461a      	mov	r2, r3
 80095aa:	2300      	movs	r3, #0
 80095ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	697a      	ldr	r2, [r7, #20]
 80095b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80095c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	697a      	ldr	r2, [r7, #20]
 80095cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095d0:	f043 0318 	orr.w	r3, r3, #24
 80095d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	697a      	ldr	r2, [r7, #20]
 80095e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095e4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80095e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80095ea:	7afb      	ldrb	r3, [r7, #11]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d10f      	bne.n	8009610 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095f6:	461a      	mov	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	697a      	ldr	r2, [r7, #20]
 8009606:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800960a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800960e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	371c      	adds	r7, #28
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	4f54300a 	.word	0x4f54300a

08009624 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800962c:	2300      	movs	r3, #0
 800962e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	3301      	adds	r3, #1
 8009634:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800963c:	d901      	bls.n	8009642 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800963e:	2303      	movs	r3, #3
 8009640:	e01b      	b.n	800967a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	2b00      	cmp	r3, #0
 8009648:	daf2      	bge.n	8009630 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800964a:	2300      	movs	r3, #0
 800964c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	f043 0201 	orr.w	r2, r3, #1
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	3301      	adds	r3, #1
 800965e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009666:	d901      	bls.n	800966c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009668:	2303      	movs	r3, #3
 800966a:	e006      	b.n	800967a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	f003 0301 	and.w	r3, r3, #1
 8009674:	2b01      	cmp	r3, #1
 8009676:	d0f0      	beq.n	800965a <USB_CoreReset+0x36>

  return HAL_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3714      	adds	r7, #20
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr
	...

08009688 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	460b      	mov	r3, r1
 8009692:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009694:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009698:	f002 fc9e 	bl	800bfd8 <USBD_static_malloc>
 800969c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d109      	bne.n	80096b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	32b0      	adds	r2, #176	@ 0xb0
 80096ae:	2100      	movs	r1, #0
 80096b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80096b4:	2302      	movs	r3, #2
 80096b6:	e0d4      	b.n	8009862 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80096b8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80096bc:	2100      	movs	r1, #0
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f003 fb0f 	bl	800cce2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	32b0      	adds	r2, #176	@ 0xb0
 80096ce:	68f9      	ldr	r1, [r7, #12]
 80096d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	32b0      	adds	r2, #176	@ 0xb0
 80096de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	7c1b      	ldrb	r3, [r3, #16]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d138      	bne.n	8009762 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80096f0:	4b5e      	ldr	r3, [pc, #376]	@ (800986c <USBD_CDC_Init+0x1e4>)
 80096f2:	7819      	ldrb	r1, [r3, #0]
 80096f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80096f8:	2202      	movs	r2, #2
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f002 fb49 	bl	800bd92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009700:	4b5a      	ldr	r3, [pc, #360]	@ (800986c <USBD_CDC_Init+0x1e4>)
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	f003 020f 	and.w	r2, r3, #15
 8009708:	6879      	ldr	r1, [r7, #4]
 800970a:	4613      	mov	r3, r2
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4413      	add	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	440b      	add	r3, r1
 8009714:	3324      	adds	r3, #36	@ 0x24
 8009716:	2201      	movs	r2, #1
 8009718:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800971a:	4b55      	ldr	r3, [pc, #340]	@ (8009870 <USBD_CDC_Init+0x1e8>)
 800971c:	7819      	ldrb	r1, [r3, #0]
 800971e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009722:	2202      	movs	r2, #2
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f002 fb34 	bl	800bd92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800972a:	4b51      	ldr	r3, [pc, #324]	@ (8009870 <USBD_CDC_Init+0x1e8>)
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	f003 020f 	and.w	r2, r3, #15
 8009732:	6879      	ldr	r1, [r7, #4]
 8009734:	4613      	mov	r3, r2
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	4413      	add	r3, r2
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	440b      	add	r3, r1
 800973e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009742:	2201      	movs	r2, #1
 8009744:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009746:	4b4b      	ldr	r3, [pc, #300]	@ (8009874 <USBD_CDC_Init+0x1ec>)
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	f003 020f 	and.w	r2, r3, #15
 800974e:	6879      	ldr	r1, [r7, #4]
 8009750:	4613      	mov	r3, r2
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	4413      	add	r3, r2
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	440b      	add	r3, r1
 800975a:	3326      	adds	r3, #38	@ 0x26
 800975c:	2210      	movs	r2, #16
 800975e:	801a      	strh	r2, [r3, #0]
 8009760:	e035      	b.n	80097ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009762:	4b42      	ldr	r3, [pc, #264]	@ (800986c <USBD_CDC_Init+0x1e4>)
 8009764:	7819      	ldrb	r1, [r3, #0]
 8009766:	2340      	movs	r3, #64	@ 0x40
 8009768:	2202      	movs	r2, #2
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f002 fb11 	bl	800bd92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009770:	4b3e      	ldr	r3, [pc, #248]	@ (800986c <USBD_CDC_Init+0x1e4>)
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	f003 020f 	and.w	r2, r3, #15
 8009778:	6879      	ldr	r1, [r7, #4]
 800977a:	4613      	mov	r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	4413      	add	r3, r2
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	440b      	add	r3, r1
 8009784:	3324      	adds	r3, #36	@ 0x24
 8009786:	2201      	movs	r2, #1
 8009788:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800978a:	4b39      	ldr	r3, [pc, #228]	@ (8009870 <USBD_CDC_Init+0x1e8>)
 800978c:	7819      	ldrb	r1, [r3, #0]
 800978e:	2340      	movs	r3, #64	@ 0x40
 8009790:	2202      	movs	r2, #2
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f002 fafd 	bl	800bd92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009798:	4b35      	ldr	r3, [pc, #212]	@ (8009870 <USBD_CDC_Init+0x1e8>)
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	f003 020f 	and.w	r2, r3, #15
 80097a0:	6879      	ldr	r1, [r7, #4]
 80097a2:	4613      	mov	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	4413      	add	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	440b      	add	r3, r1
 80097ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80097b0:	2201      	movs	r2, #1
 80097b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80097b4:	4b2f      	ldr	r3, [pc, #188]	@ (8009874 <USBD_CDC_Init+0x1ec>)
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	f003 020f 	and.w	r2, r3, #15
 80097bc:	6879      	ldr	r1, [r7, #4]
 80097be:	4613      	mov	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	4413      	add	r3, r2
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	440b      	add	r3, r1
 80097c8:	3326      	adds	r3, #38	@ 0x26
 80097ca:	2210      	movs	r2, #16
 80097cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80097ce:	4b29      	ldr	r3, [pc, #164]	@ (8009874 <USBD_CDC_Init+0x1ec>)
 80097d0:	7819      	ldrb	r1, [r3, #0]
 80097d2:	2308      	movs	r3, #8
 80097d4:	2203      	movs	r2, #3
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f002 fadb 	bl	800bd92 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80097dc:	4b25      	ldr	r3, [pc, #148]	@ (8009874 <USBD_CDC_Init+0x1ec>)
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	f003 020f 	and.w	r2, r3, #15
 80097e4:	6879      	ldr	r1, [r7, #4]
 80097e6:	4613      	mov	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	4413      	add	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	440b      	add	r3, r1
 80097f0:	3324      	adds	r3, #36	@ 0x24
 80097f2:	2201      	movs	r2, #1
 80097f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	33b0      	adds	r3, #176	@ 0xb0
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4413      	add	r3, r2
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2200      	movs	r2, #0
 800981e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009828:	2b00      	cmp	r3, #0
 800982a:	d101      	bne.n	8009830 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800982c:	2302      	movs	r3, #2
 800982e:	e018      	b.n	8009862 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	7c1b      	ldrb	r3, [r3, #16]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d10a      	bne.n	800984e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009838:	4b0d      	ldr	r3, [pc, #52]	@ (8009870 <USBD_CDC_Init+0x1e8>)
 800983a:	7819      	ldrb	r1, [r3, #0]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009842:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f002 fb92 	bl	800bf70 <USBD_LL_PrepareReceive>
 800984c:	e008      	b.n	8009860 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800984e:	4b08      	ldr	r3, [pc, #32]	@ (8009870 <USBD_CDC_Init+0x1e8>)
 8009850:	7819      	ldrb	r1, [r3, #0]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009858:	2340      	movs	r3, #64	@ 0x40
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f002 fb88 	bl	800bf70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	20000093 	.word	0x20000093
 8009870:	20000094 	.word	0x20000094
 8009874:	20000095 	.word	0x20000095

08009878 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	460b      	mov	r3, r1
 8009882:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009884:	4b3a      	ldr	r3, [pc, #232]	@ (8009970 <USBD_CDC_DeInit+0xf8>)
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	4619      	mov	r1, r3
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f002 faa7 	bl	800bdde <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009890:	4b37      	ldr	r3, [pc, #220]	@ (8009970 <USBD_CDC_DeInit+0xf8>)
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	f003 020f 	and.w	r2, r3, #15
 8009898:	6879      	ldr	r1, [r7, #4]
 800989a:	4613      	mov	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	440b      	add	r3, r1
 80098a4:	3324      	adds	r3, #36	@ 0x24
 80098a6:	2200      	movs	r2, #0
 80098a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80098aa:	4b32      	ldr	r3, [pc, #200]	@ (8009974 <USBD_CDC_DeInit+0xfc>)
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	4619      	mov	r1, r3
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f002 fa94 	bl	800bdde <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80098b6:	4b2f      	ldr	r3, [pc, #188]	@ (8009974 <USBD_CDC_DeInit+0xfc>)
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	f003 020f 	and.w	r2, r3, #15
 80098be:	6879      	ldr	r1, [r7, #4]
 80098c0:	4613      	mov	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4413      	add	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	440b      	add	r3, r1
 80098ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80098ce:	2200      	movs	r2, #0
 80098d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80098d2:	4b29      	ldr	r3, [pc, #164]	@ (8009978 <USBD_CDC_DeInit+0x100>)
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	4619      	mov	r1, r3
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f002 fa80 	bl	800bdde <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80098de:	4b26      	ldr	r3, [pc, #152]	@ (8009978 <USBD_CDC_DeInit+0x100>)
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	f003 020f 	and.w	r2, r3, #15
 80098e6:	6879      	ldr	r1, [r7, #4]
 80098e8:	4613      	mov	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4413      	add	r3, r2
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	440b      	add	r3, r1
 80098f2:	3324      	adds	r3, #36	@ 0x24
 80098f4:	2200      	movs	r2, #0
 80098f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80098f8:	4b1f      	ldr	r3, [pc, #124]	@ (8009978 <USBD_CDC_DeInit+0x100>)
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	f003 020f 	and.w	r2, r3, #15
 8009900:	6879      	ldr	r1, [r7, #4]
 8009902:	4613      	mov	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	440b      	add	r3, r1
 800990c:	3326      	adds	r3, #38	@ 0x26
 800990e:	2200      	movs	r2, #0
 8009910:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	32b0      	adds	r2, #176	@ 0xb0
 800991c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d01f      	beq.n	8009964 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	33b0      	adds	r3, #176	@ 0xb0
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	4413      	add	r3, r2
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	32b0      	adds	r2, #176	@ 0xb0
 8009942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009946:	4618      	mov	r0, r3
 8009948:	f002 fb54 	bl	800bff4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	32b0      	adds	r2, #176	@ 0xb0
 8009956:	2100      	movs	r1, #0
 8009958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3708      	adds	r7, #8
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	20000093 	.word	0x20000093
 8009974:	20000094 	.word	0x20000094
 8009978:	20000095 	.word	0x20000095

0800997c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b086      	sub	sp, #24
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	32b0      	adds	r2, #176	@ 0xb0
 8009990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009994:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009996:	2300      	movs	r3, #0
 8009998:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800999a:	2300      	movs	r3, #0
 800999c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800999e:	2300      	movs	r3, #0
 80099a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d101      	bne.n	80099ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80099a8:	2303      	movs	r3, #3
 80099aa:	e0bf      	b.n	8009b2c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d050      	beq.n	8009a5a <USBD_CDC_Setup+0xde>
 80099b8:	2b20      	cmp	r3, #32
 80099ba:	f040 80af 	bne.w	8009b1c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	88db      	ldrh	r3, [r3, #6]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d03a      	beq.n	8009a3c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	b25b      	sxtb	r3, r3
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	da1b      	bge.n	8009a08 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	33b0      	adds	r3, #176	@ 0xb0
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	4413      	add	r3, r2
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	683a      	ldr	r2, [r7, #0]
 80099e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80099e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80099e8:	683a      	ldr	r2, [r7, #0]
 80099ea:	88d2      	ldrh	r2, [r2, #6]
 80099ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	88db      	ldrh	r3, [r3, #6]
 80099f2:	2b07      	cmp	r3, #7
 80099f4:	bf28      	it	cs
 80099f6:	2307      	movcs	r3, #7
 80099f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	89fa      	ldrh	r2, [r7, #14]
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f001 fd93 	bl	800b52c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009a06:	e090      	b.n	8009b2a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	785a      	ldrb	r2, [r3, #1]
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	88db      	ldrh	r3, [r3, #6]
 8009a16:	2b3f      	cmp	r3, #63	@ 0x3f
 8009a18:	d803      	bhi.n	8009a22 <USBD_CDC_Setup+0xa6>
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	88db      	ldrh	r3, [r3, #6]
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	e000      	b.n	8009a24 <USBD_CDC_Setup+0xa8>
 8009a22:	2240      	movs	r2, #64	@ 0x40
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009a2a:	6939      	ldr	r1, [r7, #16]
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009a32:	461a      	mov	r2, r3
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f001 fda5 	bl	800b584 <USBD_CtlPrepareRx>
      break;
 8009a3a:	e076      	b.n	8009b2a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	33b0      	adds	r3, #176	@ 0xb0
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4413      	add	r3, r2
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	683a      	ldr	r2, [r7, #0]
 8009a50:	7850      	ldrb	r0, [r2, #1]
 8009a52:	2200      	movs	r2, #0
 8009a54:	6839      	ldr	r1, [r7, #0]
 8009a56:	4798      	blx	r3
      break;
 8009a58:	e067      	b.n	8009b2a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	785b      	ldrb	r3, [r3, #1]
 8009a5e:	2b0b      	cmp	r3, #11
 8009a60:	d851      	bhi.n	8009b06 <USBD_CDC_Setup+0x18a>
 8009a62:	a201      	add	r2, pc, #4	@ (adr r2, 8009a68 <USBD_CDC_Setup+0xec>)
 8009a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a68:	08009a99 	.word	0x08009a99
 8009a6c:	08009b15 	.word	0x08009b15
 8009a70:	08009b07 	.word	0x08009b07
 8009a74:	08009b07 	.word	0x08009b07
 8009a78:	08009b07 	.word	0x08009b07
 8009a7c:	08009b07 	.word	0x08009b07
 8009a80:	08009b07 	.word	0x08009b07
 8009a84:	08009b07 	.word	0x08009b07
 8009a88:	08009b07 	.word	0x08009b07
 8009a8c:	08009b07 	.word	0x08009b07
 8009a90:	08009ac3 	.word	0x08009ac3
 8009a94:	08009aed 	.word	0x08009aed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	2b03      	cmp	r3, #3
 8009aa2:	d107      	bne.n	8009ab4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009aa4:	f107 030a 	add.w	r3, r7, #10
 8009aa8:	2202      	movs	r2, #2
 8009aaa:	4619      	mov	r1, r3
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f001 fd3d 	bl	800b52c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ab2:	e032      	b.n	8009b1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009ab4:	6839      	ldr	r1, [r7, #0]
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f001 fcbb 	bl	800b432 <USBD_CtlError>
            ret = USBD_FAIL;
 8009abc:	2303      	movs	r3, #3
 8009abe:	75fb      	strb	r3, [r7, #23]
          break;
 8009ac0:	e02b      	b.n	8009b1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	2b03      	cmp	r3, #3
 8009acc:	d107      	bne.n	8009ade <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009ace:	f107 030d 	add.w	r3, r7, #13
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f001 fd28 	bl	800b52c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009adc:	e01d      	b.n	8009b1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f001 fca6 	bl	800b432 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ae6:	2303      	movs	r3, #3
 8009ae8:	75fb      	strb	r3, [r7, #23]
          break;
 8009aea:	e016      	b.n	8009b1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	2b03      	cmp	r3, #3
 8009af6:	d00f      	beq.n	8009b18 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009af8:	6839      	ldr	r1, [r7, #0]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f001 fc99 	bl	800b432 <USBD_CtlError>
            ret = USBD_FAIL;
 8009b00:	2303      	movs	r3, #3
 8009b02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009b04:	e008      	b.n	8009b18 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009b06:	6839      	ldr	r1, [r7, #0]
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f001 fc92 	bl	800b432 <USBD_CtlError>
          ret = USBD_FAIL;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	75fb      	strb	r3, [r7, #23]
          break;
 8009b12:	e002      	b.n	8009b1a <USBD_CDC_Setup+0x19e>
          break;
 8009b14:	bf00      	nop
 8009b16:	e008      	b.n	8009b2a <USBD_CDC_Setup+0x1ae>
          break;
 8009b18:	bf00      	nop
      }
      break;
 8009b1a:	e006      	b.n	8009b2a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f001 fc87 	bl	800b432 <USBD_CtlError>
      ret = USBD_FAIL;
 8009b24:	2303      	movs	r3, #3
 8009b26:	75fb      	strb	r3, [r7, #23]
      break;
 8009b28:	bf00      	nop
  }

  return (uint8_t)ret;
 8009b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3718      	adds	r7, #24
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	32b0      	adds	r2, #176	@ 0xb0
 8009b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d101      	bne.n	8009b5e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	e065      	b.n	8009c2a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	32b0      	adds	r2, #176	@ 0xb0
 8009b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009b6e:	78fb      	ldrb	r3, [r7, #3]
 8009b70:	f003 020f 	and.w	r2, r3, #15
 8009b74:	6879      	ldr	r1, [r7, #4]
 8009b76:	4613      	mov	r3, r2
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	4413      	add	r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	440b      	add	r3, r1
 8009b80:	3318      	adds	r3, #24
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d02f      	beq.n	8009be8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009b88:	78fb      	ldrb	r3, [r7, #3]
 8009b8a:	f003 020f 	and.w	r2, r3, #15
 8009b8e:	6879      	ldr	r1, [r7, #4]
 8009b90:	4613      	mov	r3, r2
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	4413      	add	r3, r2
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	440b      	add	r3, r1
 8009b9a:	3318      	adds	r3, #24
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	78fb      	ldrb	r3, [r7, #3]
 8009ba0:	f003 010f 	and.w	r1, r3, #15
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	00db      	lsls	r3, r3, #3
 8009baa:	440b      	add	r3, r1
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	4403      	add	r3, r0
 8009bb0:	331c      	adds	r3, #28
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8009bb8:	fb01 f303 	mul.w	r3, r1, r3
 8009bbc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d112      	bne.n	8009be8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009bc2:	78fb      	ldrb	r3, [r7, #3]
 8009bc4:	f003 020f 	and.w	r2, r3, #15
 8009bc8:	6879      	ldr	r1, [r7, #4]
 8009bca:	4613      	mov	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	4413      	add	r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	440b      	add	r3, r1
 8009bd4:	3318      	adds	r3, #24
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009bda:	78f9      	ldrb	r1, [r7, #3]
 8009bdc:	2300      	movs	r3, #0
 8009bde:	2200      	movs	r2, #0
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f002 f9a4 	bl	800bf2e <USBD_LL_Transmit>
 8009be6:	e01f      	b.n	8009c28 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	33b0      	adds	r3, #176	@ 0xb0
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4413      	add	r3, r2
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	691b      	ldr	r3, [r3, #16]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d010      	beq.n	8009c28 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	33b0      	adds	r3, #176	@ 0xb0
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4413      	add	r3, r2
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009c1e:	68ba      	ldr	r2, [r7, #8]
 8009c20:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009c24:	78fa      	ldrb	r2, [r7, #3]
 8009c26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b084      	sub	sp, #16
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	32b0      	adds	r2, #176	@ 0xb0
 8009c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	32b0      	adds	r2, #176	@ 0xb0
 8009c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d101      	bne.n	8009c64 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009c60:	2303      	movs	r3, #3
 8009c62:	e01a      	b.n	8009c9a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009c64:	78fb      	ldrb	r3, [r7, #3]
 8009c66:	4619      	mov	r1, r3
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f002 f9a2 	bl	800bfb2 <USBD_LL_GetRxDataSize>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	33b0      	adds	r3, #176	@ 0xb0
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009c94:	4611      	mov	r1, r2
 8009c96:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b084      	sub	sp, #16
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	32b0      	adds	r2, #176	@ 0xb0
 8009cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d101      	bne.n	8009cc4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	e024      	b.n	8009d0e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	33b0      	adds	r3, #176	@ 0xb0
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4413      	add	r3, r2
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d019      	beq.n	8009d0c <USBD_CDC_EP0_RxReady+0x6a>
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009cde:	2bff      	cmp	r3, #255	@ 0xff
 8009ce0:	d014      	beq.n	8009d0c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	33b0      	adds	r3, #176	@ 0xb0
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	4413      	add	r3, r2
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009cfa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009d02:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	22ff      	movs	r2, #255	@ 0xff
 8009d08:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
	...

08009d18 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d20:	2182      	movs	r1, #130	@ 0x82
 8009d22:	4818      	ldr	r0, [pc, #96]	@ (8009d84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d24:	f000 fd4f 	bl	800a7c6 <USBD_GetEpDesc>
 8009d28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	4815      	ldr	r0, [pc, #84]	@ (8009d84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d2e:	f000 fd4a 	bl	800a7c6 <USBD_GetEpDesc>
 8009d32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d34:	2181      	movs	r1, #129	@ 0x81
 8009d36:	4813      	ldr	r0, [pc, #76]	@ (8009d84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d38:	f000 fd45 	bl	800a7c6 <USBD_GetEpDesc>
 8009d3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d002      	beq.n	8009d4a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	2210      	movs	r2, #16
 8009d48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d006      	beq.n	8009d5e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d58:	711a      	strb	r2, [r3, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d006      	beq.n	8009d72 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d6c:	711a      	strb	r2, [r3, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2243      	movs	r2, #67	@ 0x43
 8009d76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d78:	4b02      	ldr	r3, [pc, #8]	@ (8009d84 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3718      	adds	r7, #24
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	20000050 	.word	0x20000050

08009d88 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b086      	sub	sp, #24
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d90:	2182      	movs	r1, #130	@ 0x82
 8009d92:	4818      	ldr	r0, [pc, #96]	@ (8009df4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d94:	f000 fd17 	bl	800a7c6 <USBD_GetEpDesc>
 8009d98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d9a:	2101      	movs	r1, #1
 8009d9c:	4815      	ldr	r0, [pc, #84]	@ (8009df4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d9e:	f000 fd12 	bl	800a7c6 <USBD_GetEpDesc>
 8009da2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009da4:	2181      	movs	r1, #129	@ 0x81
 8009da6:	4813      	ldr	r0, [pc, #76]	@ (8009df4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009da8:	f000 fd0d 	bl	800a7c6 <USBD_GetEpDesc>
 8009dac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d002      	beq.n	8009dba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	2210      	movs	r2, #16
 8009db8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d006      	beq.n	8009dce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	711a      	strb	r2, [r3, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f042 0202 	orr.w	r2, r2, #2
 8009dcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d006      	beq.n	8009de2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	711a      	strb	r2, [r3, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f042 0202 	orr.w	r2, r2, #2
 8009de0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2243      	movs	r2, #67	@ 0x43
 8009de6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009de8:	4b02      	ldr	r3, [pc, #8]	@ (8009df4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3718      	adds	r7, #24
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	20000050 	.word	0x20000050

08009df8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b086      	sub	sp, #24
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009e00:	2182      	movs	r1, #130	@ 0x82
 8009e02:	4818      	ldr	r0, [pc, #96]	@ (8009e64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009e04:	f000 fcdf 	bl	800a7c6 <USBD_GetEpDesc>
 8009e08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009e0a:	2101      	movs	r1, #1
 8009e0c:	4815      	ldr	r0, [pc, #84]	@ (8009e64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009e0e:	f000 fcda 	bl	800a7c6 <USBD_GetEpDesc>
 8009e12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009e14:	2181      	movs	r1, #129	@ 0x81
 8009e16:	4813      	ldr	r0, [pc, #76]	@ (8009e64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009e18:	f000 fcd5 	bl	800a7c6 <USBD_GetEpDesc>
 8009e1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d002      	beq.n	8009e2a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	2210      	movs	r2, #16
 8009e28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d006      	beq.n	8009e3e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e38:	711a      	strb	r2, [r3, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d006      	beq.n	8009e52 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e4c:	711a      	strb	r2, [r3, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2243      	movs	r2, #67	@ 0x43
 8009e56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009e58:	4b02      	ldr	r3, [pc, #8]	@ (8009e64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3718      	adds	r7, #24
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	20000050 	.word	0x20000050

08009e68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	220a      	movs	r2, #10
 8009e74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009e76:	4b03      	ldr	r3, [pc, #12]	@ (8009e84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr
 8009e84:	2000000c 	.word	0x2000000c

08009e88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d101      	bne.n	8009e9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009e98:	2303      	movs	r3, #3
 8009e9a:	e009      	b.n	8009eb0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	33b0      	adds	r3, #176	@ 0xb0
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4413      	add	r3, r2
 8009eaa:	683a      	ldr	r2, [r7, #0]
 8009eac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b087      	sub	sp, #28
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	32b0      	adds	r2, #176	@ 0xb0
 8009ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d101      	bne.n	8009ee2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e008      	b.n	8009ef4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	68ba      	ldr	r2, [r7, #8]
 8009ee6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	371c      	adds	r7, #28
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	32b0      	adds	r2, #176	@ 0xb0
 8009f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d101      	bne.n	8009f24 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009f20:	2303      	movs	r3, #3
 8009f22:	e004      	b.n	8009f2e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	683a      	ldr	r2, [r7, #0]
 8009f28:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3714      	adds	r7, #20
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr
	...

08009f3c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	32b0      	adds	r2, #176	@ 0xb0
 8009f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f52:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009f54:	2301      	movs	r3, #1
 8009f56:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d101      	bne.n	8009f62 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	e025      	b.n	8009fae <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d11f      	bne.n	8009fac <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009f74:	4b10      	ldr	r3, [pc, #64]	@ (8009fb8 <USBD_CDC_TransmitPacket+0x7c>)
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	f003 020f 	and.w	r2, r3, #15
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	4613      	mov	r3, r2
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	4413      	add	r3, r2
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	4403      	add	r3, r0
 8009f8e:	3318      	adds	r3, #24
 8009f90:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009f92:	4b09      	ldr	r3, [pc, #36]	@ (8009fb8 <USBD_CDC_TransmitPacket+0x7c>)
 8009f94:	7819      	ldrb	r1, [r3, #0]
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f001 ffc3 	bl	800bf2e <USBD_LL_Transmit>

    ret = USBD_OK;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3710      	adds	r7, #16
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	20000093 	.word	0x20000093

08009fbc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	32b0      	adds	r2, #176	@ 0xb0
 8009fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fd2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	32b0      	adds	r2, #176	@ 0xb0
 8009fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d101      	bne.n	8009fea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	e018      	b.n	800a01c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	7c1b      	ldrb	r3, [r3, #16]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d10a      	bne.n	800a008 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ff2:	4b0c      	ldr	r3, [pc, #48]	@ (800a024 <USBD_CDC_ReceivePacket+0x68>)
 8009ff4:	7819      	ldrb	r1, [r3, #0]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009ffc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f001 ffb5 	bl	800bf70 <USBD_LL_PrepareReceive>
 800a006:	e008      	b.n	800a01a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a008:	4b06      	ldr	r3, [pc, #24]	@ (800a024 <USBD_CDC_ReceivePacket+0x68>)
 800a00a:	7819      	ldrb	r1, [r3, #0]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a012:	2340      	movs	r3, #64	@ 0x40
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f001 ffab 	bl	800bf70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	20000094 	.word	0x20000094

0800a028 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	4613      	mov	r3, r2
 800a034:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d101      	bne.n	800a040 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e01f      	b.n	800a080 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2200      	movs	r2, #0
 800a054:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d003      	beq.n	800a066 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	79fa      	ldrb	r2, [r7, #7]
 800a072:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f001 fe25 	bl	800bcc4 <USBD_LL_Init>
 800a07a:	4603      	mov	r3, r0
 800a07c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a07e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a080:	4618      	mov	r0, r3
 800a082:	3718      	adds	r7, #24
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a092:	2300      	movs	r3, #0
 800a094:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d101      	bne.n	800a0a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a09c:	2303      	movs	r3, #3
 800a09e:	e025      	b.n	800a0ec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	683a      	ldr	r2, [r7, #0]
 800a0a4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	32ae      	adds	r2, #174	@ 0xae
 800a0b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d00f      	beq.n	800a0dc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	32ae      	adds	r2, #174	@ 0xae
 800a0c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0cc:	f107 020e 	add.w	r2, r7, #14
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	4798      	blx	r3
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a0e2:	1c5a      	adds	r2, r3, #1
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3710      	adds	r7, #16
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f001 fe2d 	bl	800bd5c <USBD_LL_Start>
 800a102:	4603      	mov	r3, r0
}
 800a104:	4618      	mov	r0, r3
 800a106:	3708      	adds	r7, #8
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a114:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a116:	4618      	mov	r0, r3
 800a118:	370c      	adds	r7, #12
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr

0800a122 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b084      	sub	sp, #16
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
 800a12a:	460b      	mov	r3, r1
 800a12c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a12e:	2300      	movs	r3, #0
 800a130:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d009      	beq.n	800a150 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	78fa      	ldrb	r2, [r7, #3]
 800a146:	4611      	mov	r1, r2
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	4798      	blx	r3
 800a14c:	4603      	mov	r3, r0
 800a14e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a150:	7bfb      	ldrb	r3, [r7, #15]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b084      	sub	sp, #16
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
 800a162:	460b      	mov	r3, r1
 800a164:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a166:	2300      	movs	r3, #0
 800a168:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	78fa      	ldrb	r2, [r7, #3]
 800a174:	4611      	mov	r1, r2
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	4798      	blx	r3
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a180:	2303      	movs	r3, #3
 800a182:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a184:	7bfb      	ldrb	r3, [r7, #15]
}
 800a186:	4618      	mov	r0, r3
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b084      	sub	sp, #16
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a19e:	6839      	ldr	r1, [r7, #0]
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f001 f90c 	bl	800b3be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a1c2:	f003 031f 	and.w	r3, r3, #31
 800a1c6:	2b02      	cmp	r3, #2
 800a1c8:	d01a      	beq.n	800a200 <USBD_LL_SetupStage+0x72>
 800a1ca:	2b02      	cmp	r3, #2
 800a1cc:	d822      	bhi.n	800a214 <USBD_LL_SetupStage+0x86>
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d002      	beq.n	800a1d8 <USBD_LL_SetupStage+0x4a>
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d00a      	beq.n	800a1ec <USBD_LL_SetupStage+0x5e>
 800a1d6:	e01d      	b.n	800a214 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a1de:	4619      	mov	r1, r3
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 fb63 	bl	800a8ac <USBD_StdDevReq>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	73fb      	strb	r3, [r7, #15]
      break;
 800a1ea:	e020      	b.n	800a22e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 fbcb 	bl	800a990 <USBD_StdItfReq>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	73fb      	strb	r3, [r7, #15]
      break;
 800a1fe:	e016      	b.n	800a22e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a206:	4619      	mov	r1, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 fc2d 	bl	800aa68 <USBD_StdEPReq>
 800a20e:	4603      	mov	r3, r0
 800a210:	73fb      	strb	r3, [r7, #15]
      break;
 800a212:	e00c      	b.n	800a22e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a21a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	4619      	mov	r1, r3
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f001 fdfa 	bl	800be1c <USBD_LL_StallEP>
 800a228:	4603      	mov	r3, r0
 800a22a:	73fb      	strb	r3, [r7, #15]
      break;
 800a22c:	bf00      	nop
  }

  return ret;
 800a22e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b086      	sub	sp, #24
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	460b      	mov	r3, r1
 800a242:	607a      	str	r2, [r7, #4]
 800a244:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a24a:	7afb      	ldrb	r3, [r7, #11]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d16e      	bne.n	800a32e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a256:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a25e:	2b03      	cmp	r3, #3
 800a260:	f040 8098 	bne.w	800a394 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	689a      	ldr	r2, [r3, #8]
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d913      	bls.n	800a298 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	689a      	ldr	r2, [r3, #8]
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	1ad2      	subs	r2, r2, r3
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	68da      	ldr	r2, [r3, #12]
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	4293      	cmp	r3, r2
 800a288:	bf28      	it	cs
 800a28a:	4613      	movcs	r3, r2
 800a28c:	461a      	mov	r2, r3
 800a28e:	6879      	ldr	r1, [r7, #4]
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	f001 f994 	bl	800b5be <USBD_CtlContinueRx>
 800a296:	e07d      	b.n	800a394 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a29e:	f003 031f 	and.w	r3, r3, #31
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d014      	beq.n	800a2d0 <USBD_LL_DataOutStage+0x98>
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d81d      	bhi.n	800a2e6 <USBD_LL_DataOutStage+0xae>
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d002      	beq.n	800a2b4 <USBD_LL_DataOutStage+0x7c>
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d003      	beq.n	800a2ba <USBD_LL_DataOutStage+0x82>
 800a2b2:	e018      	b.n	800a2e6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	75bb      	strb	r3, [r7, #22]
            break;
 800a2b8:	e018      	b.n	800a2ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f000 fa64 	bl	800a792 <USBD_CoreFindIF>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	75bb      	strb	r3, [r7, #22]
            break;
 800a2ce:	e00d      	b.n	800a2ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	4619      	mov	r1, r3
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f000 fa66 	bl	800a7ac <USBD_CoreFindEP>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	75bb      	strb	r3, [r7, #22]
            break;
 800a2e4:	e002      	b.n	800a2ec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	75bb      	strb	r3, [r7, #22]
            break;
 800a2ea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a2ec:	7dbb      	ldrb	r3, [r7, #22]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d119      	bne.n	800a326 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2b03      	cmp	r3, #3
 800a2fc:	d113      	bne.n	800a326 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a2fe:	7dba      	ldrb	r2, [r7, #22]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	32ae      	adds	r2, #174	@ 0xae
 800a304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a308:	691b      	ldr	r3, [r3, #16]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00b      	beq.n	800a326 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a30e:	7dba      	ldrb	r2, [r7, #22]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a316:	7dba      	ldrb	r2, [r7, #22]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	32ae      	adds	r2, #174	@ 0xae
 800a31c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	68f8      	ldr	r0, [r7, #12]
 800a324:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	f001 f95a 	bl	800b5e0 <USBD_CtlSendStatus>
 800a32c:	e032      	b.n	800a394 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a32e:	7afb      	ldrb	r3, [r7, #11]
 800a330:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a334:	b2db      	uxtb	r3, r3
 800a336:	4619      	mov	r1, r3
 800a338:	68f8      	ldr	r0, [r7, #12]
 800a33a:	f000 fa37 	bl	800a7ac <USBD_CoreFindEP>
 800a33e:	4603      	mov	r3, r0
 800a340:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a342:	7dbb      	ldrb	r3, [r7, #22]
 800a344:	2bff      	cmp	r3, #255	@ 0xff
 800a346:	d025      	beq.n	800a394 <USBD_LL_DataOutStage+0x15c>
 800a348:	7dbb      	ldrb	r3, [r7, #22]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d122      	bne.n	800a394 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a354:	b2db      	uxtb	r3, r3
 800a356:	2b03      	cmp	r3, #3
 800a358:	d117      	bne.n	800a38a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a35a:	7dba      	ldrb	r2, [r7, #22]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	32ae      	adds	r2, #174	@ 0xae
 800a360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00f      	beq.n	800a38a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a36a:	7dba      	ldrb	r2, [r7, #22]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a372:	7dba      	ldrb	r2, [r7, #22]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	32ae      	adds	r2, #174	@ 0xae
 800a378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	7afa      	ldrb	r2, [r7, #11]
 800a380:	4611      	mov	r1, r2
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	4798      	blx	r3
 800a386:	4603      	mov	r3, r0
 800a388:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a38a:	7dfb      	ldrb	r3, [r7, #23]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d001      	beq.n	800a394 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a390:	7dfb      	ldrb	r3, [r7, #23]
 800a392:	e000      	b.n	800a396 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	3718      	adds	r7, #24
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b086      	sub	sp, #24
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	60f8      	str	r0, [r7, #12]
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	607a      	str	r2, [r7, #4]
 800a3aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a3ac:	7afb      	ldrb	r3, [r7, #11]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d16f      	bne.n	800a492 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	3314      	adds	r3, #20
 800a3b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d15a      	bne.n	800a478 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	689a      	ldr	r2, [r3, #8]
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	68db      	ldr	r3, [r3, #12]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d914      	bls.n	800a3f8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	689a      	ldr	r2, [r3, #8]
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	1ad2      	subs	r2, r2, r3
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	6879      	ldr	r1, [r7, #4]
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f001 f8bc 	bl	800b562 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f001 fdbd 	bl	800bf70 <USBD_LL_PrepareReceive>
 800a3f6:	e03f      	b.n	800a478 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	68da      	ldr	r2, [r3, #12]
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	429a      	cmp	r2, r3
 800a402:	d11c      	bne.n	800a43e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	685a      	ldr	r2, [r3, #4]
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d316      	bcc.n	800a43e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	685a      	ldr	r2, [r3, #4]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d20f      	bcs.n	800a43e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a41e:	2200      	movs	r2, #0
 800a420:	2100      	movs	r1, #0
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	f001 f89d 	bl	800b562 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a430:	2300      	movs	r3, #0
 800a432:	2200      	movs	r2, #0
 800a434:	2100      	movs	r1, #0
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f001 fd9a 	bl	800bf70 <USBD_LL_PrepareReceive>
 800a43c:	e01c      	b.n	800a478 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b03      	cmp	r3, #3
 800a448:	d10f      	bne.n	800a46a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d009      	beq.n	800a46a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a46a:	2180      	movs	r1, #128	@ 0x80
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f001 fcd5 	bl	800be1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f001 f8c7 	bl	800b606 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d03a      	beq.n	800a4f8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f7ff fe42 	bl	800a10c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a490:	e032      	b.n	800a4f8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a492:	7afb      	ldrb	r3, [r7, #11]
 800a494:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	4619      	mov	r1, r3
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f000 f985 	bl	800a7ac <USBD_CoreFindEP>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4a6:	7dfb      	ldrb	r3, [r7, #23]
 800a4a8:	2bff      	cmp	r3, #255	@ 0xff
 800a4aa:	d025      	beq.n	800a4f8 <USBD_LL_DataInStage+0x15a>
 800a4ac:	7dfb      	ldrb	r3, [r7, #23]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d122      	bne.n	800a4f8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b03      	cmp	r3, #3
 800a4bc:	d11c      	bne.n	800a4f8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a4be:	7dfa      	ldrb	r2, [r7, #23]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	32ae      	adds	r2, #174	@ 0xae
 800a4c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4c8:	695b      	ldr	r3, [r3, #20]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d014      	beq.n	800a4f8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a4ce:	7dfa      	ldrb	r2, [r7, #23]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a4d6:	7dfa      	ldrb	r2, [r7, #23]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	32ae      	adds	r2, #174	@ 0xae
 800a4dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e0:	695b      	ldr	r3, [r3, #20]
 800a4e2:	7afa      	ldrb	r2, [r7, #11]
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	4798      	blx	r3
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a4ee:	7dbb      	ldrb	r3, [r7, #22]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d001      	beq.n	800a4f8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a4f4:	7dbb      	ldrb	r3, [r7, #22]
 800a4f6:	e000      	b.n	800a4fa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3718      	adds	r7, #24
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b084      	sub	sp, #16
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a50a:	2300      	movs	r3, #0
 800a50c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2201      	movs	r2, #1
 800a512:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2200      	movs	r2, #0
 800a51a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d014      	beq.n	800a568 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00e      	beq.n	800a568 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	6852      	ldr	r2, [r2, #4]
 800a556:	b2d2      	uxtb	r2, r2
 800a558:	4611      	mov	r1, r2
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	4798      	blx	r3
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d001      	beq.n	800a568 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a564:	2303      	movs	r3, #3
 800a566:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a568:	2340      	movs	r3, #64	@ 0x40
 800a56a:	2200      	movs	r2, #0
 800a56c:	2100      	movs	r1, #0
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f001 fc0f 	bl	800bd92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2201      	movs	r2, #1
 800a578:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2240      	movs	r2, #64	@ 0x40
 800a580:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a584:	2340      	movs	r3, #64	@ 0x40
 800a586:	2200      	movs	r2, #0
 800a588:	2180      	movs	r1, #128	@ 0x80
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f001 fc01 	bl	800bd92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2240      	movs	r2, #64	@ 0x40
 800a59a:	621a      	str	r2, [r3, #32]

  return ret;
 800a59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	b083      	sub	sp, #12
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	78fa      	ldrb	r2, [r7, #3]
 800a5b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a5b8:	2300      	movs	r3, #0
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	370c      	adds	r7, #12
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr

0800a5c6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a5c6:	b480      	push	{r7}
 800a5c8:	b083      	sub	sp, #12
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	2b04      	cmp	r3, #4
 800a5d8:	d006      	beq.n	800a5e8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5e0:	b2da      	uxtb	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2204      	movs	r2, #4
 800a5ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	370c      	adds	r7, #12
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr

0800a5fe <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a5fe:	b480      	push	{r7}
 800a600:	b083      	sub	sp, #12
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	2b04      	cmp	r3, #4
 800a610:	d106      	bne.n	800a620 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a618:	b2da      	uxtb	r2, r3
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	370c      	adds	r7, #12
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr

0800a62e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b082      	sub	sp, #8
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	2b03      	cmp	r3, #3
 800a640:	d110      	bne.n	800a664 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00b      	beq.n	800a664 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a652:	69db      	ldr	r3, [r3, #28]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d005      	beq.n	800a664 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a65e:	69db      	ldr	r3, [r3, #28]
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b082      	sub	sp, #8
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	460b      	mov	r3, r1
 800a678:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	32ae      	adds	r2, #174	@ 0xae
 800a684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d101      	bne.n	800a690 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e01c      	b.n	800a6ca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a696:	b2db      	uxtb	r3, r3
 800a698:	2b03      	cmp	r3, #3
 800a69a:	d115      	bne.n	800a6c8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	32ae      	adds	r2, #174	@ 0xae
 800a6a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6aa:	6a1b      	ldr	r3, [r3, #32]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d00b      	beq.n	800a6c8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	32ae      	adds	r2, #174	@ 0xae
 800a6ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6be:	6a1b      	ldr	r3, [r3, #32]
 800a6c0:	78fa      	ldrb	r2, [r7, #3]
 800a6c2:	4611      	mov	r1, r2
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3708      	adds	r7, #8
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b082      	sub	sp, #8
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	460b      	mov	r3, r1
 800a6dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	32ae      	adds	r2, #174	@ 0xae
 800a6e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d101      	bne.n	800a6f4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a6f0:	2303      	movs	r3, #3
 800a6f2:	e01c      	b.n	800a72e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	2b03      	cmp	r3, #3
 800a6fe:	d115      	bne.n	800a72c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	32ae      	adds	r2, #174	@ 0xae
 800a70a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a70e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00b      	beq.n	800a72c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	32ae      	adds	r2, #174	@ 0xae
 800a71e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a724:	78fa      	ldrb	r2, [r7, #3]
 800a726:	4611      	mov	r1, r2
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a736:	b480      	push	{r7}
 800a738:	b083      	sub	sp, #12
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	4618      	mov	r0, r3
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a754:	2300      	movs	r3, #0
 800a756:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a766:	2b00      	cmp	r3, #0
 800a768:	d00e      	beq.n	800a788 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	6852      	ldr	r2, [r2, #4]
 800a776:	b2d2      	uxtb	r2, r2
 800a778:	4611      	mov	r1, r2
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	4798      	blx	r3
 800a77e:	4603      	mov	r3, r0
 800a780:	2b00      	cmp	r3, #0
 800a782:	d001      	beq.n	800a788 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a784:	2303      	movs	r3, #3
 800a786:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a788:	7bfb      	ldrb	r3, [r7, #15]
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a792:	b480      	push	{r7}
 800a794:	b083      	sub	sp, #12
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
 800a79a:	460b      	mov	r3, r1
 800a79c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a79e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a7b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	370c      	adds	r7, #12
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr

0800a7c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b086      	sub	sp, #24
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	885b      	ldrh	r3, [r3, #2]
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	7812      	ldrb	r2, [r2, #0]
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d91f      	bls.n	800a82c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a7f2:	e013      	b.n	800a81c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a7f4:	f107 030a 	add.w	r3, r7, #10
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	6978      	ldr	r0, [r7, #20]
 800a7fc:	f000 f81b 	bl	800a836 <USBD_GetNextDesc>
 800a800:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	785b      	ldrb	r3, [r3, #1]
 800a806:	2b05      	cmp	r3, #5
 800a808:	d108      	bne.n	800a81c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	789b      	ldrb	r3, [r3, #2]
 800a812:	78fa      	ldrb	r2, [r7, #3]
 800a814:	429a      	cmp	r2, r3
 800a816:	d008      	beq.n	800a82a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a818:	2300      	movs	r3, #0
 800a81a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	885b      	ldrh	r3, [r3, #2]
 800a820:	b29a      	uxth	r2, r3
 800a822:	897b      	ldrh	r3, [r7, #10]
 800a824:	429a      	cmp	r2, r3
 800a826:	d8e5      	bhi.n	800a7f4 <USBD_GetEpDesc+0x2e>
 800a828:	e000      	b.n	800a82c <USBD_GetEpDesc+0x66>
          break;
 800a82a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a82c:	693b      	ldr	r3, [r7, #16]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3718      	adds	r7, #24
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a836:	b480      	push	{r7}
 800a838:	b085      	sub	sp, #20
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
 800a83e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	881b      	ldrh	r3, [r3, #0]
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	7812      	ldrb	r2, [r2, #0]
 800a84c:	4413      	add	r3, r2
 800a84e:	b29a      	uxth	r2, r3
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	461a      	mov	r2, r3
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4413      	add	r3, r2
 800a85e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a860:	68fb      	ldr	r3, [r7, #12]
}
 800a862:	4618      	mov	r0, r3
 800a864:	3714      	adds	r7, #20
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr

0800a86e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a86e:	b480      	push	{r7}
 800a870:	b087      	sub	sp, #28
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	3301      	adds	r3, #1
 800a884:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a88c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a890:	021b      	lsls	r3, r3, #8
 800a892:	b21a      	sxth	r2, r3
 800a894:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a898:	4313      	orrs	r3, r2
 800a89a:	b21b      	sxth	r3, r3
 800a89c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a89e:	89fb      	ldrh	r3, [r7, #14]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	371c      	adds	r7, #28
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a8c2:	2b40      	cmp	r3, #64	@ 0x40
 800a8c4:	d005      	beq.n	800a8d2 <USBD_StdDevReq+0x26>
 800a8c6:	2b40      	cmp	r3, #64	@ 0x40
 800a8c8:	d857      	bhi.n	800a97a <USBD_StdDevReq+0xce>
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00f      	beq.n	800a8ee <USBD_StdDevReq+0x42>
 800a8ce:	2b20      	cmp	r3, #32
 800a8d0:	d153      	bne.n	800a97a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	32ae      	adds	r2, #174	@ 0xae
 800a8dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	6839      	ldr	r1, [r7, #0]
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	4798      	blx	r3
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	73fb      	strb	r3, [r7, #15]
      break;
 800a8ec:	e04a      	b.n	800a984 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	785b      	ldrb	r3, [r3, #1]
 800a8f2:	2b09      	cmp	r3, #9
 800a8f4:	d83b      	bhi.n	800a96e <USBD_StdDevReq+0xc2>
 800a8f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a8fc <USBD_StdDevReq+0x50>)
 800a8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8fc:	0800a951 	.word	0x0800a951
 800a900:	0800a965 	.word	0x0800a965
 800a904:	0800a96f 	.word	0x0800a96f
 800a908:	0800a95b 	.word	0x0800a95b
 800a90c:	0800a96f 	.word	0x0800a96f
 800a910:	0800a92f 	.word	0x0800a92f
 800a914:	0800a925 	.word	0x0800a925
 800a918:	0800a96f 	.word	0x0800a96f
 800a91c:	0800a947 	.word	0x0800a947
 800a920:	0800a939 	.word	0x0800a939
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a924:	6839      	ldr	r1, [r7, #0]
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 fa3c 	bl	800ada4 <USBD_GetDescriptor>
          break;
 800a92c:	e024      	b.n	800a978 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a92e:	6839      	ldr	r1, [r7, #0]
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 fba1 	bl	800b078 <USBD_SetAddress>
          break;
 800a936:	e01f      	b.n	800a978 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a938:	6839      	ldr	r1, [r7, #0]
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 fbe0 	bl	800b100 <USBD_SetConfig>
 800a940:	4603      	mov	r3, r0
 800a942:	73fb      	strb	r3, [r7, #15]
          break;
 800a944:	e018      	b.n	800a978 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a946:	6839      	ldr	r1, [r7, #0]
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 fc83 	bl	800b254 <USBD_GetConfig>
          break;
 800a94e:	e013      	b.n	800a978 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a950:	6839      	ldr	r1, [r7, #0]
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 fcb4 	bl	800b2c0 <USBD_GetStatus>
          break;
 800a958:	e00e      	b.n	800a978 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 fce3 	bl	800b328 <USBD_SetFeature>
          break;
 800a962:	e009      	b.n	800a978 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a964:	6839      	ldr	r1, [r7, #0]
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 fd07 	bl	800b37a <USBD_ClrFeature>
          break;
 800a96c:	e004      	b.n	800a978 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a96e:	6839      	ldr	r1, [r7, #0]
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 fd5e 	bl	800b432 <USBD_CtlError>
          break;
 800a976:	bf00      	nop
      }
      break;
 800a978:	e004      	b.n	800a984 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a97a:	6839      	ldr	r1, [r7, #0]
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 fd58 	bl	800b432 <USBD_CtlError>
      break;
 800a982:	bf00      	nop
  }

  return ret;
 800a984:	7bfb      	ldrb	r3, [r7, #15]
}
 800a986:	4618      	mov	r0, r3
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop

0800a990 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a99a:	2300      	movs	r3, #0
 800a99c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a9a6:	2b40      	cmp	r3, #64	@ 0x40
 800a9a8:	d005      	beq.n	800a9b6 <USBD_StdItfReq+0x26>
 800a9aa:	2b40      	cmp	r3, #64	@ 0x40
 800a9ac:	d852      	bhi.n	800aa54 <USBD_StdItfReq+0xc4>
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d001      	beq.n	800a9b6 <USBD_StdItfReq+0x26>
 800a9b2:	2b20      	cmp	r3, #32
 800a9b4:	d14e      	bne.n	800aa54 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	2b02      	cmp	r3, #2
 800a9c2:	d840      	bhi.n	800aa46 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	889b      	ldrh	r3, [r3, #4]
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d836      	bhi.n	800aa3c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	889b      	ldrh	r3, [r3, #4]
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f7ff fedb 	bl	800a792 <USBD_CoreFindIF>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9e0:	7bbb      	ldrb	r3, [r7, #14]
 800a9e2:	2bff      	cmp	r3, #255	@ 0xff
 800a9e4:	d01d      	beq.n	800aa22 <USBD_StdItfReq+0x92>
 800a9e6:	7bbb      	ldrb	r3, [r7, #14]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d11a      	bne.n	800aa22 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a9ec:	7bba      	ldrb	r2, [r7, #14]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	32ae      	adds	r2, #174	@ 0xae
 800a9f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d00f      	beq.n	800aa1c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a9fc:	7bba      	ldrb	r2, [r7, #14]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aa04:	7bba      	ldrb	r2, [r7, #14]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	32ae      	adds	r2, #174	@ 0xae
 800aa0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	6839      	ldr	r1, [r7, #0]
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	4798      	blx	r3
 800aa16:	4603      	mov	r3, r0
 800aa18:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aa1a:	e004      	b.n	800aa26 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800aa1c:	2303      	movs	r3, #3
 800aa1e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aa20:	e001      	b.n	800aa26 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800aa22:	2303      	movs	r3, #3
 800aa24:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	88db      	ldrh	r3, [r3, #6]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d110      	bne.n	800aa50 <USBD_StdItfReq+0xc0>
 800aa2e:	7bfb      	ldrb	r3, [r7, #15]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d10d      	bne.n	800aa50 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 fdd3 	bl	800b5e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aa3a:	e009      	b.n	800aa50 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800aa3c:	6839      	ldr	r1, [r7, #0]
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fcf7 	bl	800b432 <USBD_CtlError>
          break;
 800aa44:	e004      	b.n	800aa50 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800aa46:	6839      	ldr	r1, [r7, #0]
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 fcf2 	bl	800b432 <USBD_CtlError>
          break;
 800aa4e:	e000      	b.n	800aa52 <USBD_StdItfReq+0xc2>
          break;
 800aa50:	bf00      	nop
      }
      break;
 800aa52:	e004      	b.n	800aa5e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aa54:	6839      	ldr	r1, [r7, #0]
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 fceb 	bl	800b432 <USBD_CtlError>
      break;
 800aa5c:	bf00      	nop
  }

  return ret;
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3710      	adds	r7, #16
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aa72:	2300      	movs	r3, #0
 800aa74:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	889b      	ldrh	r3, [r3, #4]
 800aa7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aa84:	2b40      	cmp	r3, #64	@ 0x40
 800aa86:	d007      	beq.n	800aa98 <USBD_StdEPReq+0x30>
 800aa88:	2b40      	cmp	r3, #64	@ 0x40
 800aa8a:	f200 817f 	bhi.w	800ad8c <USBD_StdEPReq+0x324>
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d02a      	beq.n	800aae8 <USBD_StdEPReq+0x80>
 800aa92:	2b20      	cmp	r3, #32
 800aa94:	f040 817a 	bne.w	800ad8c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aa98:	7bbb      	ldrb	r3, [r7, #14]
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7ff fe85 	bl	800a7ac <USBD_CoreFindEP>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aaa6:	7b7b      	ldrb	r3, [r7, #13]
 800aaa8:	2bff      	cmp	r3, #255	@ 0xff
 800aaaa:	f000 8174 	beq.w	800ad96 <USBD_StdEPReq+0x32e>
 800aaae:	7b7b      	ldrb	r3, [r7, #13]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f040 8170 	bne.w	800ad96 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800aab6:	7b7a      	ldrb	r2, [r7, #13]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800aabe:	7b7a      	ldrb	r2, [r7, #13]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	32ae      	adds	r2, #174	@ 0xae
 800aac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	f000 8163 	beq.w	800ad96 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aad0:	7b7a      	ldrb	r2, [r7, #13]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	32ae      	adds	r2, #174	@ 0xae
 800aad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aada:	689b      	ldr	r3, [r3, #8]
 800aadc:	6839      	ldr	r1, [r7, #0]
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	4798      	blx	r3
 800aae2:	4603      	mov	r3, r0
 800aae4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aae6:	e156      	b.n	800ad96 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	785b      	ldrb	r3, [r3, #1]
 800aaec:	2b03      	cmp	r3, #3
 800aaee:	d008      	beq.n	800ab02 <USBD_StdEPReq+0x9a>
 800aaf0:	2b03      	cmp	r3, #3
 800aaf2:	f300 8145 	bgt.w	800ad80 <USBD_StdEPReq+0x318>
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	f000 809b 	beq.w	800ac32 <USBD_StdEPReq+0x1ca>
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d03c      	beq.n	800ab7a <USBD_StdEPReq+0x112>
 800ab00:	e13e      	b.n	800ad80 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d002      	beq.n	800ab14 <USBD_StdEPReq+0xac>
 800ab0e:	2b03      	cmp	r3, #3
 800ab10:	d016      	beq.n	800ab40 <USBD_StdEPReq+0xd8>
 800ab12:	e02c      	b.n	800ab6e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab14:	7bbb      	ldrb	r3, [r7, #14]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d00d      	beq.n	800ab36 <USBD_StdEPReq+0xce>
 800ab1a:	7bbb      	ldrb	r3, [r7, #14]
 800ab1c:	2b80      	cmp	r3, #128	@ 0x80
 800ab1e:	d00a      	beq.n	800ab36 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab20:	7bbb      	ldrb	r3, [r7, #14]
 800ab22:	4619      	mov	r1, r3
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f001 f979 	bl	800be1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab2a:	2180      	movs	r1, #128	@ 0x80
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f001 f975 	bl	800be1c <USBD_LL_StallEP>
 800ab32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab34:	e020      	b.n	800ab78 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 fc7a 	bl	800b432 <USBD_CtlError>
              break;
 800ab3e:	e01b      	b.n	800ab78 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	885b      	ldrh	r3, [r3, #2]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10e      	bne.n	800ab66 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ab48:	7bbb      	ldrb	r3, [r7, #14]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00b      	beq.n	800ab66 <USBD_StdEPReq+0xfe>
 800ab4e:	7bbb      	ldrb	r3, [r7, #14]
 800ab50:	2b80      	cmp	r3, #128	@ 0x80
 800ab52:	d008      	beq.n	800ab66 <USBD_StdEPReq+0xfe>
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	88db      	ldrh	r3, [r3, #6]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d104      	bne.n	800ab66 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab5c:	7bbb      	ldrb	r3, [r7, #14]
 800ab5e:	4619      	mov	r1, r3
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f001 f95b 	bl	800be1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 fd3a 	bl	800b5e0 <USBD_CtlSendStatus>

              break;
 800ab6c:	e004      	b.n	800ab78 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ab6e:	6839      	ldr	r1, [r7, #0]
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 fc5e 	bl	800b432 <USBD_CtlError>
              break;
 800ab76:	bf00      	nop
          }
          break;
 800ab78:	e107      	b.n	800ad8a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	d002      	beq.n	800ab8c <USBD_StdEPReq+0x124>
 800ab86:	2b03      	cmp	r3, #3
 800ab88:	d016      	beq.n	800abb8 <USBD_StdEPReq+0x150>
 800ab8a:	e04b      	b.n	800ac24 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab8c:	7bbb      	ldrb	r3, [r7, #14]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00d      	beq.n	800abae <USBD_StdEPReq+0x146>
 800ab92:	7bbb      	ldrb	r3, [r7, #14]
 800ab94:	2b80      	cmp	r3, #128	@ 0x80
 800ab96:	d00a      	beq.n	800abae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab98:	7bbb      	ldrb	r3, [r7, #14]
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f001 f93d 	bl	800be1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aba2:	2180      	movs	r1, #128	@ 0x80
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f001 f939 	bl	800be1c <USBD_LL_StallEP>
 800abaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800abac:	e040      	b.n	800ac30 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800abae:	6839      	ldr	r1, [r7, #0]
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 fc3e 	bl	800b432 <USBD_CtlError>
              break;
 800abb6:	e03b      	b.n	800ac30 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	885b      	ldrh	r3, [r3, #2]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d136      	bne.n	800ac2e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800abc0:	7bbb      	ldrb	r3, [r7, #14]
 800abc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d004      	beq.n	800abd4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800abca:	7bbb      	ldrb	r3, [r7, #14]
 800abcc:	4619      	mov	r1, r3
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f001 f943 	bl	800be5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fd03 	bl	800b5e0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800abda:	7bbb      	ldrb	r3, [r7, #14]
 800abdc:	4619      	mov	r1, r3
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f7ff fde4 	bl	800a7ac <USBD_CoreFindEP>
 800abe4:	4603      	mov	r3, r0
 800abe6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800abe8:	7b7b      	ldrb	r3, [r7, #13]
 800abea:	2bff      	cmp	r3, #255	@ 0xff
 800abec:	d01f      	beq.n	800ac2e <USBD_StdEPReq+0x1c6>
 800abee:	7b7b      	ldrb	r3, [r7, #13]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d11c      	bne.n	800ac2e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800abf4:	7b7a      	ldrb	r2, [r7, #13]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800abfc:	7b7a      	ldrb	r2, [r7, #13]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	32ae      	adds	r2, #174	@ 0xae
 800ac02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d010      	beq.n	800ac2e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ac0c:	7b7a      	ldrb	r2, [r7, #13]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	32ae      	adds	r2, #174	@ 0xae
 800ac12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	6839      	ldr	r1, [r7, #0]
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	4798      	blx	r3
 800ac1e:	4603      	mov	r3, r0
 800ac20:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ac22:	e004      	b.n	800ac2e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ac24:	6839      	ldr	r1, [r7, #0]
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 fc03 	bl	800b432 <USBD_CtlError>
              break;
 800ac2c:	e000      	b.n	800ac30 <USBD_StdEPReq+0x1c8>
              break;
 800ac2e:	bf00      	nop
          }
          break;
 800ac30:	e0ab      	b.n	800ad8a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	d002      	beq.n	800ac44 <USBD_StdEPReq+0x1dc>
 800ac3e:	2b03      	cmp	r3, #3
 800ac40:	d032      	beq.n	800aca8 <USBD_StdEPReq+0x240>
 800ac42:	e097      	b.n	800ad74 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac44:	7bbb      	ldrb	r3, [r7, #14]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d007      	beq.n	800ac5a <USBD_StdEPReq+0x1f2>
 800ac4a:	7bbb      	ldrb	r3, [r7, #14]
 800ac4c:	2b80      	cmp	r3, #128	@ 0x80
 800ac4e:	d004      	beq.n	800ac5a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ac50:	6839      	ldr	r1, [r7, #0]
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 fbed 	bl	800b432 <USBD_CtlError>
                break;
 800ac58:	e091      	b.n	800ad7e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	da0b      	bge.n	800ac7a <USBD_StdEPReq+0x212>
 800ac62:	7bbb      	ldrb	r3, [r7, #14]
 800ac64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ac68:	4613      	mov	r3, r2
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4413      	add	r3, r2
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	3310      	adds	r3, #16
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	4413      	add	r3, r2
 800ac76:	3304      	adds	r3, #4
 800ac78:	e00b      	b.n	800ac92 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac7a:	7bbb      	ldrb	r3, [r7, #14]
 800ac7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac80:	4613      	mov	r3, r2
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	4413      	add	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	4413      	add	r3, r2
 800ac90:	3304      	adds	r3, #4
 800ac92:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	2200      	movs	r2, #0
 800ac98:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	2202      	movs	r2, #2
 800ac9e:	4619      	mov	r1, r3
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 fc43 	bl	800b52c <USBD_CtlSendData>
              break;
 800aca6:	e06a      	b.n	800ad7e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acac:	2b00      	cmp	r3, #0
 800acae:	da11      	bge.n	800acd4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800acb0:	7bbb      	ldrb	r3, [r7, #14]
 800acb2:	f003 020f 	and.w	r2, r3, #15
 800acb6:	6879      	ldr	r1, [r7, #4]
 800acb8:	4613      	mov	r3, r2
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	4413      	add	r3, r2
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	440b      	add	r3, r1
 800acc2:	3324      	adds	r3, #36	@ 0x24
 800acc4:	881b      	ldrh	r3, [r3, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d117      	bne.n	800acfa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 fbb0 	bl	800b432 <USBD_CtlError>
                  break;
 800acd2:	e054      	b.n	800ad7e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800acd4:	7bbb      	ldrb	r3, [r7, #14]
 800acd6:	f003 020f 	and.w	r2, r3, #15
 800acda:	6879      	ldr	r1, [r7, #4]
 800acdc:	4613      	mov	r3, r2
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	4413      	add	r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	440b      	add	r3, r1
 800ace6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800acea:	881b      	ldrh	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d104      	bne.n	800acfa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800acf0:	6839      	ldr	r1, [r7, #0]
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fb9d 	bl	800b432 <USBD_CtlError>
                  break;
 800acf8:	e041      	b.n	800ad7e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	da0b      	bge.n	800ad1a <USBD_StdEPReq+0x2b2>
 800ad02:	7bbb      	ldrb	r3, [r7, #14]
 800ad04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad08:	4613      	mov	r3, r2
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	4413      	add	r3, r2
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	3310      	adds	r3, #16
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	4413      	add	r3, r2
 800ad16:	3304      	adds	r3, #4
 800ad18:	e00b      	b.n	800ad32 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad1a:	7bbb      	ldrb	r3, [r7, #14]
 800ad1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad20:	4613      	mov	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	4413      	add	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	4413      	add	r3, r2
 800ad30:	3304      	adds	r3, #4
 800ad32:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ad34:	7bbb      	ldrb	r3, [r7, #14]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d002      	beq.n	800ad40 <USBD_StdEPReq+0x2d8>
 800ad3a:	7bbb      	ldrb	r3, [r7, #14]
 800ad3c:	2b80      	cmp	r3, #128	@ 0x80
 800ad3e:	d103      	bne.n	800ad48 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	2200      	movs	r2, #0
 800ad44:	601a      	str	r2, [r3, #0]
 800ad46:	e00e      	b.n	800ad66 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ad48:	7bbb      	ldrb	r3, [r7, #14]
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f001 f8a3 	bl	800be98 <USBD_LL_IsStallEP>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d003      	beq.n	800ad60 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	601a      	str	r2, [r3, #0]
 800ad5e:	e002      	b.n	800ad66 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	2200      	movs	r2, #0
 800ad64:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	2202      	movs	r2, #2
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 fbdd 	bl	800b52c <USBD_CtlSendData>
              break;
 800ad72:	e004      	b.n	800ad7e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 fb5b 	bl	800b432 <USBD_CtlError>
              break;
 800ad7c:	bf00      	nop
          }
          break;
 800ad7e:	e004      	b.n	800ad8a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ad80:	6839      	ldr	r1, [r7, #0]
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 fb55 	bl	800b432 <USBD_CtlError>
          break;
 800ad88:	bf00      	nop
      }
      break;
 800ad8a:	e005      	b.n	800ad98 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ad8c:	6839      	ldr	r1, [r7, #0]
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 fb4f 	bl	800b432 <USBD_CtlError>
      break;
 800ad94:	e000      	b.n	800ad98 <USBD_StdEPReq+0x330>
      break;
 800ad96:	bf00      	nop
  }

  return ret;
 800ad98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
	...

0800ada4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800adae:	2300      	movs	r3, #0
 800adb0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800adb2:	2300      	movs	r3, #0
 800adb4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800adb6:	2300      	movs	r3, #0
 800adb8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	885b      	ldrh	r3, [r3, #2]
 800adbe:	0a1b      	lsrs	r3, r3, #8
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	3b01      	subs	r3, #1
 800adc4:	2b06      	cmp	r3, #6
 800adc6:	f200 8128 	bhi.w	800b01a <USBD_GetDescriptor+0x276>
 800adca:	a201      	add	r2, pc, #4	@ (adr r2, 800add0 <USBD_GetDescriptor+0x2c>)
 800adcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add0:	0800aded 	.word	0x0800aded
 800add4:	0800ae05 	.word	0x0800ae05
 800add8:	0800ae45 	.word	0x0800ae45
 800addc:	0800b01b 	.word	0x0800b01b
 800ade0:	0800b01b 	.word	0x0800b01b
 800ade4:	0800afbb 	.word	0x0800afbb
 800ade8:	0800afe7 	.word	0x0800afe7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	7c12      	ldrb	r2, [r2, #16]
 800adf8:	f107 0108 	add.w	r1, r7, #8
 800adfc:	4610      	mov	r0, r2
 800adfe:	4798      	blx	r3
 800ae00:	60f8      	str	r0, [r7, #12]
      break;
 800ae02:	e112      	b.n	800b02a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	7c1b      	ldrb	r3, [r3, #16]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10d      	bne.n	800ae28 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae14:	f107 0208 	add.w	r2, r7, #8
 800ae18:	4610      	mov	r0, r2
 800ae1a:	4798      	blx	r3
 800ae1c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	3301      	adds	r3, #1
 800ae22:	2202      	movs	r2, #2
 800ae24:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ae26:	e100      	b.n	800b02a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae30:	f107 0208 	add.w	r2, r7, #8
 800ae34:	4610      	mov	r0, r2
 800ae36:	4798      	blx	r3
 800ae38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	2202      	movs	r2, #2
 800ae40:	701a      	strb	r2, [r3, #0]
      break;
 800ae42:	e0f2      	b.n	800b02a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	885b      	ldrh	r3, [r3, #2]
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	2b05      	cmp	r3, #5
 800ae4c:	f200 80ac 	bhi.w	800afa8 <USBD_GetDescriptor+0x204>
 800ae50:	a201      	add	r2, pc, #4	@ (adr r2, 800ae58 <USBD_GetDescriptor+0xb4>)
 800ae52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae56:	bf00      	nop
 800ae58:	0800ae71 	.word	0x0800ae71
 800ae5c:	0800aea5 	.word	0x0800aea5
 800ae60:	0800aed9 	.word	0x0800aed9
 800ae64:	0800af0d 	.word	0x0800af0d
 800ae68:	0800af41 	.word	0x0800af41
 800ae6c:	0800af75 	.word	0x0800af75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00b      	beq.n	800ae94 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	7c12      	ldrb	r2, [r2, #16]
 800ae88:	f107 0108 	add.w	r1, r7, #8
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	4798      	blx	r3
 800ae90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae92:	e091      	b.n	800afb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 facb 	bl	800b432 <USBD_CtlError>
            err++;
 800ae9c:	7afb      	ldrb	r3, [r7, #11]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	72fb      	strb	r3, [r7, #11]
          break;
 800aea2:	e089      	b.n	800afb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d00b      	beq.n	800aec8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	7c12      	ldrb	r2, [r2, #16]
 800aebc:	f107 0108 	add.w	r1, r7, #8
 800aec0:	4610      	mov	r0, r2
 800aec2:	4798      	blx	r3
 800aec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aec6:	e077      	b.n	800afb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aec8:	6839      	ldr	r1, [r7, #0]
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 fab1 	bl	800b432 <USBD_CtlError>
            err++;
 800aed0:	7afb      	ldrb	r3, [r7, #11]
 800aed2:	3301      	adds	r3, #1
 800aed4:	72fb      	strb	r3, [r7, #11]
          break;
 800aed6:	e06f      	b.n	800afb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d00b      	beq.n	800aefc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aeea:	68db      	ldr	r3, [r3, #12]
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	7c12      	ldrb	r2, [r2, #16]
 800aef0:	f107 0108 	add.w	r1, r7, #8
 800aef4:	4610      	mov	r0, r2
 800aef6:	4798      	blx	r3
 800aef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aefa:	e05d      	b.n	800afb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aefc:	6839      	ldr	r1, [r7, #0]
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 fa97 	bl	800b432 <USBD_CtlError>
            err++;
 800af04:	7afb      	ldrb	r3, [r7, #11]
 800af06:	3301      	adds	r3, #1
 800af08:	72fb      	strb	r3, [r7, #11]
          break;
 800af0a:	e055      	b.n	800afb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af12:	691b      	ldr	r3, [r3, #16]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00b      	beq.n	800af30 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	7c12      	ldrb	r2, [r2, #16]
 800af24:	f107 0108 	add.w	r1, r7, #8
 800af28:	4610      	mov	r0, r2
 800af2a:	4798      	blx	r3
 800af2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af2e:	e043      	b.n	800afb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af30:	6839      	ldr	r1, [r7, #0]
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 fa7d 	bl	800b432 <USBD_CtlError>
            err++;
 800af38:	7afb      	ldrb	r3, [r7, #11]
 800af3a:	3301      	adds	r3, #1
 800af3c:	72fb      	strb	r3, [r7, #11]
          break;
 800af3e:	e03b      	b.n	800afb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00b      	beq.n	800af64 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af52:	695b      	ldr	r3, [r3, #20]
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	7c12      	ldrb	r2, [r2, #16]
 800af58:	f107 0108 	add.w	r1, r7, #8
 800af5c:	4610      	mov	r0, r2
 800af5e:	4798      	blx	r3
 800af60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af62:	e029      	b.n	800afb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af64:	6839      	ldr	r1, [r7, #0]
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 fa63 	bl	800b432 <USBD_CtlError>
            err++;
 800af6c:	7afb      	ldrb	r3, [r7, #11]
 800af6e:	3301      	adds	r3, #1
 800af70:	72fb      	strb	r3, [r7, #11]
          break;
 800af72:	e021      	b.n	800afb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af7a:	699b      	ldr	r3, [r3, #24]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00b      	beq.n	800af98 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af86:	699b      	ldr	r3, [r3, #24]
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	7c12      	ldrb	r2, [r2, #16]
 800af8c:	f107 0108 	add.w	r1, r7, #8
 800af90:	4610      	mov	r0, r2
 800af92:	4798      	blx	r3
 800af94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af96:	e00f      	b.n	800afb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fa49 	bl	800b432 <USBD_CtlError>
            err++;
 800afa0:	7afb      	ldrb	r3, [r7, #11]
 800afa2:	3301      	adds	r3, #1
 800afa4:	72fb      	strb	r3, [r7, #11]
          break;
 800afa6:	e007      	b.n	800afb8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800afa8:	6839      	ldr	r1, [r7, #0]
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 fa41 	bl	800b432 <USBD_CtlError>
          err++;
 800afb0:	7afb      	ldrb	r3, [r7, #11]
 800afb2:	3301      	adds	r3, #1
 800afb4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800afb6:	bf00      	nop
      }
      break;
 800afb8:	e037      	b.n	800b02a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	7c1b      	ldrb	r3, [r3, #16]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d109      	bne.n	800afd6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afca:	f107 0208 	add.w	r2, r7, #8
 800afce:	4610      	mov	r0, r2
 800afd0:	4798      	blx	r3
 800afd2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afd4:	e029      	b.n	800b02a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800afd6:	6839      	ldr	r1, [r7, #0]
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 fa2a 	bl	800b432 <USBD_CtlError>
        err++;
 800afde:	7afb      	ldrb	r3, [r7, #11]
 800afe0:	3301      	adds	r3, #1
 800afe2:	72fb      	strb	r3, [r7, #11]
      break;
 800afe4:	e021      	b.n	800b02a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	7c1b      	ldrb	r3, [r3, #16]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d10d      	bne.n	800b00a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aff6:	f107 0208 	add.w	r2, r7, #8
 800affa:	4610      	mov	r0, r2
 800affc:	4798      	blx	r3
 800affe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	3301      	adds	r3, #1
 800b004:	2207      	movs	r2, #7
 800b006:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b008:	e00f      	b.n	800b02a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b00a:	6839      	ldr	r1, [r7, #0]
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f000 fa10 	bl	800b432 <USBD_CtlError>
        err++;
 800b012:	7afb      	ldrb	r3, [r7, #11]
 800b014:	3301      	adds	r3, #1
 800b016:	72fb      	strb	r3, [r7, #11]
      break;
 800b018:	e007      	b.n	800b02a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b01a:	6839      	ldr	r1, [r7, #0]
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 fa08 	bl	800b432 <USBD_CtlError>
      err++;
 800b022:	7afb      	ldrb	r3, [r7, #11]
 800b024:	3301      	adds	r3, #1
 800b026:	72fb      	strb	r3, [r7, #11]
      break;
 800b028:	bf00      	nop
  }

  if (err != 0U)
 800b02a:	7afb      	ldrb	r3, [r7, #11]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d11e      	bne.n	800b06e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	88db      	ldrh	r3, [r3, #6]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d016      	beq.n	800b066 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b038:	893b      	ldrh	r3, [r7, #8]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00e      	beq.n	800b05c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	88da      	ldrh	r2, [r3, #6]
 800b042:	893b      	ldrh	r3, [r7, #8]
 800b044:	4293      	cmp	r3, r2
 800b046:	bf28      	it	cs
 800b048:	4613      	movcs	r3, r2
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b04e:	893b      	ldrh	r3, [r7, #8]
 800b050:	461a      	mov	r2, r3
 800b052:	68f9      	ldr	r1, [r7, #12]
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 fa69 	bl	800b52c <USBD_CtlSendData>
 800b05a:	e009      	b.n	800b070 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b05c:	6839      	ldr	r1, [r7, #0]
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 f9e7 	bl	800b432 <USBD_CtlError>
 800b064:	e004      	b.n	800b070 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 faba 	bl	800b5e0 <USBD_CtlSendStatus>
 800b06c:	e000      	b.n	800b070 <USBD_GetDescriptor+0x2cc>
    return;
 800b06e:	bf00      	nop
  }
}
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop

0800b078 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	889b      	ldrh	r3, [r3, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d131      	bne.n	800b0ee <USBD_SetAddress+0x76>
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	88db      	ldrh	r3, [r3, #6]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d12d      	bne.n	800b0ee <USBD_SetAddress+0x76>
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	885b      	ldrh	r3, [r3, #2]
 800b096:	2b7f      	cmp	r3, #127	@ 0x7f
 800b098:	d829      	bhi.n	800b0ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	885b      	ldrh	r3, [r3, #2]
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	2b03      	cmp	r3, #3
 800b0b0:	d104      	bne.n	800b0bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b0b2:	6839      	ldr	r1, [r7, #0]
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 f9bc 	bl	800b432 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ba:	e01d      	b.n	800b0f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	7bfa      	ldrb	r2, [r7, #15]
 800b0c0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b0c4:	7bfb      	ldrb	r3, [r7, #15]
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 ff11 	bl	800bef0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 fa86 	bl	800b5e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b0d4:	7bfb      	ldrb	r3, [r7, #15]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d004      	beq.n	800b0e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2202      	movs	r2, #2
 800b0de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0e2:	e009      	b.n	800b0f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ec:	e004      	b.n	800b0f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b0ee:	6839      	ldr	r1, [r7, #0]
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 f99e 	bl	800b432 <USBD_CtlError>
  }
}
 800b0f6:	bf00      	nop
 800b0f8:	bf00      	nop
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b10a:	2300      	movs	r3, #0
 800b10c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	885b      	ldrh	r3, [r3, #2]
 800b112:	b2da      	uxtb	r2, r3
 800b114:	4b4e      	ldr	r3, [pc, #312]	@ (800b250 <USBD_SetConfig+0x150>)
 800b116:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b118:	4b4d      	ldr	r3, [pc, #308]	@ (800b250 <USBD_SetConfig+0x150>)
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d905      	bls.n	800b12c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b120:	6839      	ldr	r1, [r7, #0]
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 f985 	bl	800b432 <USBD_CtlError>
    return USBD_FAIL;
 800b128:	2303      	movs	r3, #3
 800b12a:	e08c      	b.n	800b246 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b132:	b2db      	uxtb	r3, r3
 800b134:	2b02      	cmp	r3, #2
 800b136:	d002      	beq.n	800b13e <USBD_SetConfig+0x3e>
 800b138:	2b03      	cmp	r3, #3
 800b13a:	d029      	beq.n	800b190 <USBD_SetConfig+0x90>
 800b13c:	e075      	b.n	800b22a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b13e:	4b44      	ldr	r3, [pc, #272]	@ (800b250 <USBD_SetConfig+0x150>)
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d020      	beq.n	800b188 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b146:	4b42      	ldr	r3, [pc, #264]	@ (800b250 <USBD_SetConfig+0x150>)
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	461a      	mov	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b150:	4b3f      	ldr	r3, [pc, #252]	@ (800b250 <USBD_SetConfig+0x150>)
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	4619      	mov	r1, r3
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f7fe ffe3 	bl	800a122 <USBD_SetClassConfig>
 800b15c:	4603      	mov	r3, r0
 800b15e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b160:	7bfb      	ldrb	r3, [r7, #15]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d008      	beq.n	800b178 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b166:	6839      	ldr	r1, [r7, #0]
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 f962 	bl	800b432 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2202      	movs	r2, #2
 800b172:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b176:	e065      	b.n	800b244 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 fa31 	bl	800b5e0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2203      	movs	r2, #3
 800b182:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b186:	e05d      	b.n	800b244 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 fa29 	bl	800b5e0 <USBD_CtlSendStatus>
      break;
 800b18e:	e059      	b.n	800b244 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b190:	4b2f      	ldr	r3, [pc, #188]	@ (800b250 <USBD_SetConfig+0x150>)
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d112      	bne.n	800b1be <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2202      	movs	r2, #2
 800b19c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b1a0:	4b2b      	ldr	r3, [pc, #172]	@ (800b250 <USBD_SetConfig+0x150>)
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b1aa:	4b29      	ldr	r3, [pc, #164]	@ (800b250 <USBD_SetConfig+0x150>)
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f7fe ffd2 	bl	800a15a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 fa12 	bl	800b5e0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b1bc:	e042      	b.n	800b244 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b1be:	4b24      	ldr	r3, [pc, #144]	@ (800b250 <USBD_SetConfig+0x150>)
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d02a      	beq.n	800b222 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f7fe ffc0 	bl	800a15a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b1da:	4b1d      	ldr	r3, [pc, #116]	@ (800b250 <USBD_SetConfig+0x150>)
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	461a      	mov	r2, r3
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b1e4:	4b1a      	ldr	r3, [pc, #104]	@ (800b250 <USBD_SetConfig+0x150>)
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f7fe ff99 	bl	800a122 <USBD_SetClassConfig>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b1f4:	7bfb      	ldrb	r3, [r7, #15]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00f      	beq.n	800b21a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b1fa:	6839      	ldr	r1, [r7, #0]
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 f918 	bl	800b432 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	b2db      	uxtb	r3, r3
 800b208:	4619      	mov	r1, r3
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f7fe ffa5 	bl	800a15a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2202      	movs	r2, #2
 800b214:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b218:	e014      	b.n	800b244 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 f9e0 	bl	800b5e0 <USBD_CtlSendStatus>
      break;
 800b220:	e010      	b.n	800b244 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 f9dc 	bl	800b5e0 <USBD_CtlSendStatus>
      break;
 800b228:	e00c      	b.n	800b244 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b22a:	6839      	ldr	r1, [r7, #0]
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 f900 	bl	800b432 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b232:	4b07      	ldr	r3, [pc, #28]	@ (800b250 <USBD_SetConfig+0x150>)
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	4619      	mov	r1, r3
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f7fe ff8e 	bl	800a15a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b23e:	2303      	movs	r3, #3
 800b240:	73fb      	strb	r3, [r7, #15]
      break;
 800b242:	bf00      	nop
  }

  return ret;
 800b244:	7bfb      	ldrb	r3, [r7, #15]
}
 800b246:	4618      	mov	r0, r3
 800b248:	3710      	adds	r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	20000594 	.word	0x20000594

0800b254 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	88db      	ldrh	r3, [r3, #6]
 800b262:	2b01      	cmp	r3, #1
 800b264:	d004      	beq.n	800b270 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b266:	6839      	ldr	r1, [r7, #0]
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 f8e2 	bl	800b432 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b26e:	e023      	b.n	800b2b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b276:	b2db      	uxtb	r3, r3
 800b278:	2b02      	cmp	r3, #2
 800b27a:	dc02      	bgt.n	800b282 <USBD_GetConfig+0x2e>
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	dc03      	bgt.n	800b288 <USBD_GetConfig+0x34>
 800b280:	e015      	b.n	800b2ae <USBD_GetConfig+0x5a>
 800b282:	2b03      	cmp	r3, #3
 800b284:	d00b      	beq.n	800b29e <USBD_GetConfig+0x4a>
 800b286:	e012      	b.n	800b2ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	3308      	adds	r3, #8
 800b292:	2201      	movs	r2, #1
 800b294:	4619      	mov	r1, r3
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f948 	bl	800b52c <USBD_CtlSendData>
        break;
 800b29c:	e00c      	b.n	800b2b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	3304      	adds	r3, #4
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f940 	bl	800b52c <USBD_CtlSendData>
        break;
 800b2ac:	e004      	b.n	800b2b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b2ae:	6839      	ldr	r1, [r7, #0]
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 f8be 	bl	800b432 <USBD_CtlError>
        break;
 800b2b6:	bf00      	nop
}
 800b2b8:	bf00      	nop
 800b2ba:	3708      	adds	r7, #8
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	3b01      	subs	r3, #1
 800b2d4:	2b02      	cmp	r3, #2
 800b2d6:	d81e      	bhi.n	800b316 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	88db      	ldrh	r3, [r3, #6]
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d004      	beq.n	800b2ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b2e0:	6839      	ldr	r1, [r7, #0]
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 f8a5 	bl	800b432 <USBD_CtlError>
        break;
 800b2e8:	e01a      	b.n	800b320 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d005      	beq.n	800b306 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	f043 0202 	orr.w	r2, r3, #2
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	330c      	adds	r3, #12
 800b30a:	2202      	movs	r2, #2
 800b30c:	4619      	mov	r1, r3
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 f90c 	bl	800b52c <USBD_CtlSendData>
      break;
 800b314:	e004      	b.n	800b320 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b316:	6839      	ldr	r1, [r7, #0]
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 f88a 	bl	800b432 <USBD_CtlError>
      break;
 800b31e:	bf00      	nop
  }
}
 800b320:	bf00      	nop
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	885b      	ldrh	r3, [r3, #2]
 800b336:	2b01      	cmp	r3, #1
 800b338:	d107      	bne.n	800b34a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2201      	movs	r2, #1
 800b33e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 f94c 	bl	800b5e0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b348:	e013      	b.n	800b372 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	885b      	ldrh	r3, [r3, #2]
 800b34e:	2b02      	cmp	r3, #2
 800b350:	d10b      	bne.n	800b36a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	889b      	ldrh	r3, [r3, #4]
 800b356:	0a1b      	lsrs	r3, r3, #8
 800b358:	b29b      	uxth	r3, r3
 800b35a:	b2da      	uxtb	r2, r3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 f93c 	bl	800b5e0 <USBD_CtlSendStatus>
}
 800b368:	e003      	b.n	800b372 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b36a:	6839      	ldr	r1, [r7, #0]
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 f860 	bl	800b432 <USBD_CtlError>
}
 800b372:	bf00      	nop
 800b374:	3708      	adds	r7, #8
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b082      	sub	sp, #8
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
 800b382:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	3b01      	subs	r3, #1
 800b38e:	2b02      	cmp	r3, #2
 800b390:	d80b      	bhi.n	800b3aa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	885b      	ldrh	r3, [r3, #2]
 800b396:	2b01      	cmp	r3, #1
 800b398:	d10c      	bne.n	800b3b4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2200      	movs	r2, #0
 800b39e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 f91c 	bl	800b5e0 <USBD_CtlSendStatus>
      }
      break;
 800b3a8:	e004      	b.n	800b3b4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b3aa:	6839      	ldr	r1, [r7, #0]
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 f840 	bl	800b432 <USBD_CtlError>
      break;
 800b3b2:	e000      	b.n	800b3b6 <USBD_ClrFeature+0x3c>
      break;
 800b3b4:	bf00      	nop
  }
}
 800b3b6:	bf00      	nop
 800b3b8:	3708      	adds	r7, #8
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}

0800b3be <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b3be:	b580      	push	{r7, lr}
 800b3c0:	b084      	sub	sp, #16
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
 800b3c6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	781a      	ldrb	r2, [r3, #0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	781a      	ldrb	r2, [r3, #0]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f7ff fa40 	bl	800a86e <SWAPBYTE>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	3301      	adds	r3, #1
 800b400:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b402:	68f8      	ldr	r0, [r7, #12]
 800b404:	f7ff fa33 	bl	800a86e <SWAPBYTE>
 800b408:	4603      	mov	r3, r0
 800b40a:	461a      	mov	r2, r3
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	3301      	adds	r3, #1
 800b414:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	3301      	adds	r3, #1
 800b41a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f7ff fa26 	bl	800a86e <SWAPBYTE>
 800b422:	4603      	mov	r3, r0
 800b424:	461a      	mov	r2, r3
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	80da      	strh	r2, [r3, #6]
}
 800b42a:	bf00      	nop
 800b42c:	3710      	adds	r7, #16
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b082      	sub	sp, #8
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
 800b43a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b43c:	2180      	movs	r1, #128	@ 0x80
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 fcec 	bl	800be1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b444:	2100      	movs	r1, #0
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 fce8 	bl	800be1c <USBD_LL_StallEP>
}
 800b44c:	bf00      	nop
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b086      	sub	sp, #24
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b460:	2300      	movs	r3, #0
 800b462:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d042      	beq.n	800b4f0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b46e:	6938      	ldr	r0, [r7, #16]
 800b470:	f000 f842 	bl	800b4f8 <USBD_GetLen>
 800b474:	4603      	mov	r3, r0
 800b476:	3301      	adds	r3, #1
 800b478:	005b      	lsls	r3, r3, #1
 800b47a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b47e:	d808      	bhi.n	800b492 <USBD_GetString+0x3e>
 800b480:	6938      	ldr	r0, [r7, #16]
 800b482:	f000 f839 	bl	800b4f8 <USBD_GetLen>
 800b486:	4603      	mov	r3, r0
 800b488:	3301      	adds	r3, #1
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	005b      	lsls	r3, r3, #1
 800b48e:	b29a      	uxth	r2, r3
 800b490:	e001      	b.n	800b496 <USBD_GetString+0x42>
 800b492:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b49a:	7dfb      	ldrb	r3, [r7, #23]
 800b49c:	68ba      	ldr	r2, [r7, #8]
 800b49e:	4413      	add	r3, r2
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	7812      	ldrb	r2, [r2, #0]
 800b4a4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b4a6:	7dfb      	ldrb	r3, [r7, #23]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b4ac:	7dfb      	ldrb	r3, [r7, #23]
 800b4ae:	68ba      	ldr	r2, [r7, #8]
 800b4b0:	4413      	add	r3, r2
 800b4b2:	2203      	movs	r2, #3
 800b4b4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b4b6:	7dfb      	ldrb	r3, [r7, #23]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b4bc:	e013      	b.n	800b4e6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b4be:	7dfb      	ldrb	r3, [r7, #23]
 800b4c0:	68ba      	ldr	r2, [r7, #8]
 800b4c2:	4413      	add	r3, r2
 800b4c4:	693a      	ldr	r2, [r7, #16]
 800b4c6:	7812      	ldrb	r2, [r2, #0]
 800b4c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	613b      	str	r3, [r7, #16]
    idx++;
 800b4d0:	7dfb      	ldrb	r3, [r7, #23]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b4d6:	7dfb      	ldrb	r3, [r7, #23]
 800b4d8:	68ba      	ldr	r2, [r7, #8]
 800b4da:	4413      	add	r3, r2
 800b4dc:	2200      	movs	r2, #0
 800b4de:	701a      	strb	r2, [r3, #0]
    idx++;
 800b4e0:	7dfb      	ldrb	r3, [r7, #23]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1e7      	bne.n	800b4be <USBD_GetString+0x6a>
 800b4ee:	e000      	b.n	800b4f2 <USBD_GetString+0x9e>
    return;
 800b4f0:	bf00      	nop
  }
}
 800b4f2:	3718      	adds	r7, #24
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b500:	2300      	movs	r3, #0
 800b502:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b508:	e005      	b.n	800b516 <USBD_GetLen+0x1e>
  {
    len++;
 800b50a:	7bfb      	ldrb	r3, [r7, #15]
 800b50c:	3301      	adds	r3, #1
 800b50e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	3301      	adds	r3, #1
 800b514:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d1f5      	bne.n	800b50a <USBD_GetLen+0x12>
  }

  return len;
 800b51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b520:	4618      	mov	r0, r3
 800b522:	3714      	adds	r7, #20
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2202      	movs	r2, #2
 800b53c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	68ba      	ldr	r2, [r7, #8]
 800b550:	2100      	movs	r1, #0
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	f000 fceb 	bl	800bf2e <USBD_LL_Transmit>

  return USBD_OK;
 800b558:	2300      	movs	r3, #0
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3710      	adds	r7, #16
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b562:	b580      	push	{r7, lr}
 800b564:	b084      	sub	sp, #16
 800b566:	af00      	add	r7, sp, #0
 800b568:	60f8      	str	r0, [r7, #12]
 800b56a:	60b9      	str	r1, [r7, #8]
 800b56c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	68ba      	ldr	r2, [r7, #8]
 800b572:	2100      	movs	r1, #0
 800b574:	68f8      	ldr	r0, [r7, #12]
 800b576:	f000 fcda 	bl	800bf2e <USBD_LL_Transmit>

  return USBD_OK;
 800b57a:	2300      	movs	r3, #0
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3710      	adds	r7, #16
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2203      	movs	r2, #3
 800b594:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	68ba      	ldr	r2, [r7, #8]
 800b5ac:	2100      	movs	r1, #0
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	f000 fcde 	bl	800bf70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3710      	adds	r7, #16
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b084      	sub	sp, #16
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	60f8      	str	r0, [r7, #12]
 800b5c6:	60b9      	str	r1, [r7, #8]
 800b5c8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	68ba      	ldr	r2, [r7, #8]
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	f000 fccd 	bl	800bf70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3710      	adds	r7, #16
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2204      	movs	r2, #4
 800b5ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 fc99 	bl	800bf2e <USBD_LL_Transmit>

  return USBD_OK;
 800b5fc:	2300      	movs	r3, #0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b606:	b580      	push	{r7, lr}
 800b608:	b082      	sub	sp, #8
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2205      	movs	r2, #5
 800b612:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b616:	2300      	movs	r3, #0
 800b618:	2200      	movs	r2, #0
 800b61a:	2100      	movs	r1, #0
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 fca7 	bl	800bf70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b622:	2300      	movs	r3, #0
}
 800b624:	4618      	mov	r0, r3
 800b626:	3708      	adds	r7, #8
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b630:	2200      	movs	r2, #0
 800b632:	4912      	ldr	r1, [pc, #72]	@ (800b67c <MX_USB_DEVICE_Init+0x50>)
 800b634:	4812      	ldr	r0, [pc, #72]	@ (800b680 <MX_USB_DEVICE_Init+0x54>)
 800b636:	f7fe fcf7 	bl	800a028 <USBD_Init>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d001      	beq.n	800b644 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b640:	f7f8 f8c2 	bl	80037c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b644:	490f      	ldr	r1, [pc, #60]	@ (800b684 <MX_USB_DEVICE_Init+0x58>)
 800b646:	480e      	ldr	r0, [pc, #56]	@ (800b680 <MX_USB_DEVICE_Init+0x54>)
 800b648:	f7fe fd1e 	bl	800a088 <USBD_RegisterClass>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d001      	beq.n	800b656 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b652:	f7f8 f8b9 	bl	80037c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b656:	490c      	ldr	r1, [pc, #48]	@ (800b688 <MX_USB_DEVICE_Init+0x5c>)
 800b658:	4809      	ldr	r0, [pc, #36]	@ (800b680 <MX_USB_DEVICE_Init+0x54>)
 800b65a:	f7fe fc15 	bl	8009e88 <USBD_CDC_RegisterInterface>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	d001      	beq.n	800b668 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b664:	f7f8 f8b0 	bl	80037c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b668:	4805      	ldr	r0, [pc, #20]	@ (800b680 <MX_USB_DEVICE_Init+0x54>)
 800b66a:	f7fe fd43 	bl	800a0f4 <USBD_Start>
 800b66e:	4603      	mov	r3, r0
 800b670:	2b00      	cmp	r3, #0
 800b672:	d001      	beq.n	800b678 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b674:	f7f8 f8a8 	bl	80037c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b678:	bf00      	nop
 800b67a:	bd80      	pop	{r7, pc}
 800b67c:	200000ac 	.word	0x200000ac
 800b680:	20000598 	.word	0x20000598
 800b684:	20000018 	.word	0x20000018
 800b688:	20000098 	.word	0x20000098

0800b68c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b690:	2200      	movs	r2, #0
 800b692:	4905      	ldr	r1, [pc, #20]	@ (800b6a8 <CDC_Init_FS+0x1c>)
 800b694:	4805      	ldr	r0, [pc, #20]	@ (800b6ac <CDC_Init_FS+0x20>)
 800b696:	f7fe fc11 	bl	8009ebc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b69a:	4905      	ldr	r1, [pc, #20]	@ (800b6b0 <CDC_Init_FS+0x24>)
 800b69c:	4803      	ldr	r0, [pc, #12]	@ (800b6ac <CDC_Init_FS+0x20>)
 800b69e:	f7fe fc2f 	bl	8009f00 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b6a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	20001074 	.word	0x20001074
 800b6ac:	20000598 	.word	0x20000598
 800b6b0:	20000874 	.word	0x20000874

0800b6b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b6b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	6039      	str	r1, [r7, #0]
 800b6ce:	71fb      	strb	r3, [r7, #7]
 800b6d0:	4613      	mov	r3, r2
 800b6d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b6d4:	79fb      	ldrb	r3, [r7, #7]
 800b6d6:	2b23      	cmp	r3, #35	@ 0x23
 800b6d8:	d84a      	bhi.n	800b770 <CDC_Control_FS+0xac>
 800b6da:	a201      	add	r2, pc, #4	@ (adr r2, 800b6e0 <CDC_Control_FS+0x1c>)
 800b6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e0:	0800b771 	.word	0x0800b771
 800b6e4:	0800b771 	.word	0x0800b771
 800b6e8:	0800b771 	.word	0x0800b771
 800b6ec:	0800b771 	.word	0x0800b771
 800b6f0:	0800b771 	.word	0x0800b771
 800b6f4:	0800b771 	.word	0x0800b771
 800b6f8:	0800b771 	.word	0x0800b771
 800b6fc:	0800b771 	.word	0x0800b771
 800b700:	0800b771 	.word	0x0800b771
 800b704:	0800b771 	.word	0x0800b771
 800b708:	0800b771 	.word	0x0800b771
 800b70c:	0800b771 	.word	0x0800b771
 800b710:	0800b771 	.word	0x0800b771
 800b714:	0800b771 	.word	0x0800b771
 800b718:	0800b771 	.word	0x0800b771
 800b71c:	0800b771 	.word	0x0800b771
 800b720:	0800b771 	.word	0x0800b771
 800b724:	0800b771 	.word	0x0800b771
 800b728:	0800b771 	.word	0x0800b771
 800b72c:	0800b771 	.word	0x0800b771
 800b730:	0800b771 	.word	0x0800b771
 800b734:	0800b771 	.word	0x0800b771
 800b738:	0800b771 	.word	0x0800b771
 800b73c:	0800b771 	.word	0x0800b771
 800b740:	0800b771 	.word	0x0800b771
 800b744:	0800b771 	.word	0x0800b771
 800b748:	0800b771 	.word	0x0800b771
 800b74c:	0800b771 	.word	0x0800b771
 800b750:	0800b771 	.word	0x0800b771
 800b754:	0800b771 	.word	0x0800b771
 800b758:	0800b771 	.word	0x0800b771
 800b75c:	0800b771 	.word	0x0800b771
 800b760:	0800b771 	.word	0x0800b771
 800b764:	0800b771 	.word	0x0800b771
 800b768:	0800b771 	.word	0x0800b771
 800b76c:	0800b771 	.word	0x0800b771
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b770:	bf00      	nop
  }

  return (USBD_OK);
 800b772:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b774:	4618      	mov	r0, r3
 800b776:	370c      	adds	r7, #12
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b78a:	6879      	ldr	r1, [r7, #4]
 800b78c:	4805      	ldr	r0, [pc, #20]	@ (800b7a4 <CDC_Receive_FS+0x24>)
 800b78e:	f7fe fbb7 	bl	8009f00 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b792:	4804      	ldr	r0, [pc, #16]	@ (800b7a4 <CDC_Receive_FS+0x24>)
 800b794:	f7fe fc12 	bl	8009fbc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b798:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3708      	adds	r7, #8
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	20000598 	.word	0x20000598

0800b7a8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b7b8:	4b0d      	ldr	r3, [pc, #52]	@ (800b7f0 <CDC_Transmit_FS+0x48>)
 800b7ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b7be:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d001      	beq.n	800b7ce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e00b      	b.n	800b7e6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b7ce:	887b      	ldrh	r3, [r7, #2]
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	6879      	ldr	r1, [r7, #4]
 800b7d4:	4806      	ldr	r0, [pc, #24]	@ (800b7f0 <CDC_Transmit_FS+0x48>)
 800b7d6:	f7fe fb71 	bl	8009ebc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b7da:	4805      	ldr	r0, [pc, #20]	@ (800b7f0 <CDC_Transmit_FS+0x48>)
 800b7dc:	f7fe fbae 	bl	8009f3c <USBD_CDC_TransmitPacket>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	20000598 	.word	0x20000598

0800b7f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b087      	sub	sp, #28
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	4613      	mov	r3, r2
 800b800:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b802:	2300      	movs	r3, #0
 800b804:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b806:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	371c      	adds	r7, #28
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr
	...

0800b818 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	4603      	mov	r3, r0
 800b820:	6039      	str	r1, [r7, #0]
 800b822:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	2212      	movs	r2, #18
 800b828:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b82a:	4b03      	ldr	r3, [pc, #12]	@ (800b838 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr
 800b838:	200000c8 	.word	0x200000c8

0800b83c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	4603      	mov	r3, r0
 800b844:	6039      	str	r1, [r7, #0]
 800b846:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	2204      	movs	r2, #4
 800b84c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b84e:	4b03      	ldr	r3, [pc, #12]	@ (800b85c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b850:	4618      	mov	r0, r3
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	200000dc 	.word	0x200000dc

0800b860 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	4603      	mov	r3, r0
 800b868:	6039      	str	r1, [r7, #0]
 800b86a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b86c:	79fb      	ldrb	r3, [r7, #7]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d105      	bne.n	800b87e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b872:	683a      	ldr	r2, [r7, #0]
 800b874:	4907      	ldr	r1, [pc, #28]	@ (800b894 <USBD_FS_ProductStrDescriptor+0x34>)
 800b876:	4808      	ldr	r0, [pc, #32]	@ (800b898 <USBD_FS_ProductStrDescriptor+0x38>)
 800b878:	f7ff fdec 	bl	800b454 <USBD_GetString>
 800b87c:	e004      	b.n	800b888 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b87e:	683a      	ldr	r2, [r7, #0]
 800b880:	4904      	ldr	r1, [pc, #16]	@ (800b894 <USBD_FS_ProductStrDescriptor+0x34>)
 800b882:	4805      	ldr	r0, [pc, #20]	@ (800b898 <USBD_FS_ProductStrDescriptor+0x38>)
 800b884:	f7ff fde6 	bl	800b454 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b888:	4b02      	ldr	r3, [pc, #8]	@ (800b894 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	20001874 	.word	0x20001874
 800b898:	0800e978 	.word	0x0800e978

0800b89c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	6039      	str	r1, [r7, #0]
 800b8a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b8a8:	683a      	ldr	r2, [r7, #0]
 800b8aa:	4904      	ldr	r1, [pc, #16]	@ (800b8bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b8ac:	4804      	ldr	r0, [pc, #16]	@ (800b8c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b8ae:	f7ff fdd1 	bl	800b454 <USBD_GetString>
  return USBD_StrDesc;
 800b8b2:	4b02      	ldr	r3, [pc, #8]	@ (800b8bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3708      	adds	r7, #8
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	20001874 	.word	0x20001874
 800b8c0:	0800e990 	.word	0x0800e990

0800b8c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	6039      	str	r1, [r7, #0]
 800b8ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	221a      	movs	r2, #26
 800b8d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b8d6:	f000 f843 	bl	800b960 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b8da:	4b02      	ldr	r3, [pc, #8]	@ (800b8e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3708      	adds	r7, #8
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	200000e0 	.word	0x200000e0

0800b8e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	6039      	str	r1, [r7, #0]
 800b8f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b8f4:	79fb      	ldrb	r3, [r7, #7]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d105      	bne.n	800b906 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b8fa:	683a      	ldr	r2, [r7, #0]
 800b8fc:	4907      	ldr	r1, [pc, #28]	@ (800b91c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b8fe:	4808      	ldr	r0, [pc, #32]	@ (800b920 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b900:	f7ff fda8 	bl	800b454 <USBD_GetString>
 800b904:	e004      	b.n	800b910 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b906:	683a      	ldr	r2, [r7, #0]
 800b908:	4904      	ldr	r1, [pc, #16]	@ (800b91c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b90a:	4805      	ldr	r0, [pc, #20]	@ (800b920 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b90c:	f7ff fda2 	bl	800b454 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b910:	4b02      	ldr	r3, [pc, #8]	@ (800b91c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b912:	4618      	mov	r0, r3
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	20001874 	.word	0x20001874
 800b920:	0800e9a4 	.word	0x0800e9a4

0800b924 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	4603      	mov	r3, r0
 800b92c:	6039      	str	r1, [r7, #0]
 800b92e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b930:	79fb      	ldrb	r3, [r7, #7]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d105      	bne.n	800b942 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b936:	683a      	ldr	r2, [r7, #0]
 800b938:	4907      	ldr	r1, [pc, #28]	@ (800b958 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b93a:	4808      	ldr	r0, [pc, #32]	@ (800b95c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b93c:	f7ff fd8a 	bl	800b454 <USBD_GetString>
 800b940:	e004      	b.n	800b94c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b942:	683a      	ldr	r2, [r7, #0]
 800b944:	4904      	ldr	r1, [pc, #16]	@ (800b958 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b946:	4805      	ldr	r0, [pc, #20]	@ (800b95c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b948:	f7ff fd84 	bl	800b454 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b94c:	4b02      	ldr	r3, [pc, #8]	@ (800b958 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	20001874 	.word	0x20001874
 800b95c:	0800e9b0 	.word	0x0800e9b0

0800b960 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b966:	4b0f      	ldr	r3, [pc, #60]	@ (800b9a4 <Get_SerialNum+0x44>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b96c:	4b0e      	ldr	r3, [pc, #56]	@ (800b9a8 <Get_SerialNum+0x48>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b972:	4b0e      	ldr	r3, [pc, #56]	@ (800b9ac <Get_SerialNum+0x4c>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	4413      	add	r3, r2
 800b97e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d009      	beq.n	800b99a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b986:	2208      	movs	r2, #8
 800b988:	4909      	ldr	r1, [pc, #36]	@ (800b9b0 <Get_SerialNum+0x50>)
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f000 f814 	bl	800b9b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b990:	2204      	movs	r2, #4
 800b992:	4908      	ldr	r1, [pc, #32]	@ (800b9b4 <Get_SerialNum+0x54>)
 800b994:	68b8      	ldr	r0, [r7, #8]
 800b996:	f000 f80f 	bl	800b9b8 <IntToUnicode>
  }
}
 800b99a:	bf00      	nop
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	1fff7a10 	.word	0x1fff7a10
 800b9a8:	1fff7a14 	.word	0x1fff7a14
 800b9ac:	1fff7a18 	.word	0x1fff7a18
 800b9b0:	200000e2 	.word	0x200000e2
 800b9b4:	200000f2 	.word	0x200000f2

0800b9b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b087      	sub	sp, #28
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	75fb      	strb	r3, [r7, #23]
 800b9ce:	e027      	b.n	800ba20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	0f1b      	lsrs	r3, r3, #28
 800b9d4:	2b09      	cmp	r3, #9
 800b9d6:	d80b      	bhi.n	800b9f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	0f1b      	lsrs	r3, r3, #28
 800b9dc:	b2da      	uxtb	r2, r3
 800b9de:	7dfb      	ldrb	r3, [r7, #23]
 800b9e0:	005b      	lsls	r3, r3, #1
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	440b      	add	r3, r1
 800b9e8:	3230      	adds	r2, #48	@ 0x30
 800b9ea:	b2d2      	uxtb	r2, r2
 800b9ec:	701a      	strb	r2, [r3, #0]
 800b9ee:	e00a      	b.n	800ba06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	0f1b      	lsrs	r3, r3, #28
 800b9f4:	b2da      	uxtb	r2, r3
 800b9f6:	7dfb      	ldrb	r3, [r7, #23]
 800b9f8:	005b      	lsls	r3, r3, #1
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	440b      	add	r3, r1
 800ba00:	3237      	adds	r2, #55	@ 0x37
 800ba02:	b2d2      	uxtb	r2, r2
 800ba04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	011b      	lsls	r3, r3, #4
 800ba0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ba0c:	7dfb      	ldrb	r3, [r7, #23]
 800ba0e:	005b      	lsls	r3, r3, #1
 800ba10:	3301      	adds	r3, #1
 800ba12:	68ba      	ldr	r2, [r7, #8]
 800ba14:	4413      	add	r3, r2
 800ba16:	2200      	movs	r2, #0
 800ba18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ba1a:	7dfb      	ldrb	r3, [r7, #23]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	75fb      	strb	r3, [r7, #23]
 800ba20:	7dfa      	ldrb	r2, [r7, #23]
 800ba22:	79fb      	ldrb	r3, [r7, #7]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d3d3      	bcc.n	800b9d0 <IntToUnicode+0x18>
  }
}
 800ba28:	bf00      	nop
 800ba2a:	bf00      	nop
 800ba2c:	371c      	adds	r7, #28
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr
	...

0800ba38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b08a      	sub	sp, #40	@ 0x28
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba40:	f107 0314 	add.w	r3, r7, #20
 800ba44:	2200      	movs	r2, #0
 800ba46:	601a      	str	r2, [r3, #0]
 800ba48:	605a      	str	r2, [r3, #4]
 800ba4a:	609a      	str	r2, [r3, #8]
 800ba4c:	60da      	str	r2, [r3, #12]
 800ba4e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ba58:	d13a      	bne.n	800bad0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	613b      	str	r3, [r7, #16]
 800ba5e:	4b1e      	ldr	r3, [pc, #120]	@ (800bad8 <HAL_PCD_MspInit+0xa0>)
 800ba60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba62:	4a1d      	ldr	r2, [pc, #116]	@ (800bad8 <HAL_PCD_MspInit+0xa0>)
 800ba64:	f043 0301 	orr.w	r3, r3, #1
 800ba68:	6313      	str	r3, [r2, #48]	@ 0x30
 800ba6a:	4b1b      	ldr	r3, [pc, #108]	@ (800bad8 <HAL_PCD_MspInit+0xa0>)
 800ba6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba6e:	f003 0301 	and.w	r3, r3, #1
 800ba72:	613b      	str	r3, [r7, #16]
 800ba74:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ba76:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ba7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba7c:	2302      	movs	r3, #2
 800ba7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba80:	2300      	movs	r3, #0
 800ba82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba84:	2303      	movs	r3, #3
 800ba86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ba88:	230a      	movs	r3, #10
 800ba8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba8c:	f107 0314 	add.w	r3, r7, #20
 800ba90:	4619      	mov	r1, r3
 800ba92:	4812      	ldr	r0, [pc, #72]	@ (800badc <HAL_PCD_MspInit+0xa4>)
 800ba94:	f7f8 fa96 	bl	8003fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ba98:	4b0f      	ldr	r3, [pc, #60]	@ (800bad8 <HAL_PCD_MspInit+0xa0>)
 800ba9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba9c:	4a0e      	ldr	r2, [pc, #56]	@ (800bad8 <HAL_PCD_MspInit+0xa0>)
 800ba9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800baa2:	6353      	str	r3, [r2, #52]	@ 0x34
 800baa4:	2300      	movs	r3, #0
 800baa6:	60fb      	str	r3, [r7, #12]
 800baa8:	4b0b      	ldr	r3, [pc, #44]	@ (800bad8 <HAL_PCD_MspInit+0xa0>)
 800baaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800baac:	4a0a      	ldr	r2, [pc, #40]	@ (800bad8 <HAL_PCD_MspInit+0xa0>)
 800baae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bab2:	6453      	str	r3, [r2, #68]	@ 0x44
 800bab4:	4b08      	ldr	r3, [pc, #32]	@ (800bad8 <HAL_PCD_MspInit+0xa0>)
 800bab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bab8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800babc:	60fb      	str	r3, [r7, #12]
 800babe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bac0:	2200      	movs	r2, #0
 800bac2:	2100      	movs	r1, #0
 800bac4:	2043      	movs	r0, #67	@ 0x43
 800bac6:	f7f8 fa46 	bl	8003f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800baca:	2043      	movs	r0, #67	@ 0x43
 800bacc:	f7f8 fa5f 	bl	8003f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bad0:	bf00      	nop
 800bad2:	3728      	adds	r7, #40	@ 0x28
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	40023800 	.word	0x40023800
 800badc:	40020000 	.word	0x40020000

0800bae0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b082      	sub	sp, #8
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800baf4:	4619      	mov	r1, r3
 800baf6:	4610      	mov	r0, r2
 800baf8:	f7fe fb49 	bl	800a18e <USBD_LL_SetupStage>
}
 800bafc:	bf00      	nop
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bb16:	78fa      	ldrb	r2, [r7, #3]
 800bb18:	6879      	ldr	r1, [r7, #4]
 800bb1a:	4613      	mov	r3, r2
 800bb1c:	00db      	lsls	r3, r3, #3
 800bb1e:	4413      	add	r3, r2
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	440b      	add	r3, r1
 800bb24:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	78fb      	ldrb	r3, [r7, #3]
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	f7fe fb83 	bl	800a238 <USBD_LL_DataOutStage>
}
 800bb32:	bf00      	nop
 800bb34:	3708      	adds	r7, #8
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b082      	sub	sp, #8
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
 800bb42:	460b      	mov	r3, r1
 800bb44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bb4c:	78fa      	ldrb	r2, [r7, #3]
 800bb4e:	6879      	ldr	r1, [r7, #4]
 800bb50:	4613      	mov	r3, r2
 800bb52:	00db      	lsls	r3, r3, #3
 800bb54:	4413      	add	r3, r2
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	440b      	add	r3, r1
 800bb5a:	3320      	adds	r3, #32
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	78fb      	ldrb	r3, [r7, #3]
 800bb60:	4619      	mov	r1, r3
 800bb62:	f7fe fc1c 	bl	800a39e <USBD_LL_DataInStage>
}
 800bb66:	bf00      	nop
 800bb68:	3708      	adds	r7, #8
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}

0800bb6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb6e:	b580      	push	{r7, lr}
 800bb70:	b082      	sub	sp, #8
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7fe fd56 	bl	800a62e <USBD_LL_SOF>
}
 800bb82:	bf00      	nop
 800bb84:	3708      	adds	r7, #8
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b084      	sub	sp, #16
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bb92:	2301      	movs	r3, #1
 800bb94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	79db      	ldrb	r3, [r3, #7]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d102      	bne.n	800bba4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	73fb      	strb	r3, [r7, #15]
 800bba2:	e008      	b.n	800bbb6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	79db      	ldrb	r3, [r3, #7]
 800bba8:	2b02      	cmp	r3, #2
 800bbaa:	d102      	bne.n	800bbb2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bbac:	2301      	movs	r3, #1
 800bbae:	73fb      	strb	r3, [r7, #15]
 800bbb0:	e001      	b.n	800bbb6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bbb2:	f7f7 fe09 	bl	80037c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bbbc:	7bfa      	ldrb	r2, [r7, #15]
 800bbbe:	4611      	mov	r1, r2
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7fe fcf0 	bl	800a5a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7fe fc98 	bl	800a502 <USBD_LL_Reset>
}
 800bbd2:	bf00      	nop
 800bbd4:	3710      	adds	r7, #16
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
	...

0800bbdc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fe fceb 	bl	800a5c6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	6812      	ldr	r2, [r2, #0]
 800bbfe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bc02:	f043 0301 	orr.w	r3, r3, #1
 800bc06:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	7adb      	ldrb	r3, [r3, #11]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d005      	beq.n	800bc1c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc10:	4b04      	ldr	r3, [pc, #16]	@ (800bc24 <HAL_PCD_SuspendCallback+0x48>)
 800bc12:	691b      	ldr	r3, [r3, #16]
 800bc14:	4a03      	ldr	r2, [pc, #12]	@ (800bc24 <HAL_PCD_SuspendCallback+0x48>)
 800bc16:	f043 0306 	orr.w	r3, r3, #6
 800bc1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bc1c:	bf00      	nop
 800bc1e:	3708      	adds	r7, #8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	e000ed00 	.word	0xe000ed00

0800bc28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fe fce1 	bl	800a5fe <USBD_LL_Resume>
}
 800bc3c:	bf00      	nop
 800bc3e:	3708      	adds	r7, #8
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc56:	78fa      	ldrb	r2, [r7, #3]
 800bc58:	4611      	mov	r1, r2
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fe fd39 	bl	800a6d2 <USBD_LL_IsoOUTIncomplete>
}
 800bc60:	bf00      	nop
 800bc62:	3708      	adds	r7, #8
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	460b      	mov	r3, r1
 800bc72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc7a:	78fa      	ldrb	r2, [r7, #3]
 800bc7c:	4611      	mov	r1, r2
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7fe fcf5 	bl	800a66e <USBD_LL_IsoINIncomplete>
}
 800bc84:	bf00      	nop
 800bc86:	3708      	adds	r7, #8
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7fe fd4b 	bl	800a736 <USBD_LL_DevConnected>
}
 800bca0:	bf00      	nop
 800bca2:	3708      	adds	r7, #8
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7fe fd48 	bl	800a74c <USBD_LL_DevDisconnected>
}
 800bcbc:	bf00      	nop
 800bcbe:	3708      	adds	r7, #8
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	781b      	ldrb	r3, [r3, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d13c      	bne.n	800bd4e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bcd4:	4a20      	ldr	r2, [pc, #128]	@ (800bd58 <USBD_LL_Init+0x94>)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	4a1e      	ldr	r2, [pc, #120]	@ (800bd58 <USBD_LL_Init+0x94>)
 800bce0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bce4:	4b1c      	ldr	r3, [pc, #112]	@ (800bd58 <USBD_LL_Init+0x94>)
 800bce6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bcea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bcec:	4b1a      	ldr	r3, [pc, #104]	@ (800bd58 <USBD_LL_Init+0x94>)
 800bcee:	2204      	movs	r2, #4
 800bcf0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bcf2:	4b19      	ldr	r3, [pc, #100]	@ (800bd58 <USBD_LL_Init+0x94>)
 800bcf4:	2202      	movs	r2, #2
 800bcf6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bcf8:	4b17      	ldr	r3, [pc, #92]	@ (800bd58 <USBD_LL_Init+0x94>)
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bcfe:	4b16      	ldr	r3, [pc, #88]	@ (800bd58 <USBD_LL_Init+0x94>)
 800bd00:	2202      	movs	r2, #2
 800bd02:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bd04:	4b14      	ldr	r3, [pc, #80]	@ (800bd58 <USBD_LL_Init+0x94>)
 800bd06:	2200      	movs	r2, #0
 800bd08:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bd0a:	4b13      	ldr	r3, [pc, #76]	@ (800bd58 <USBD_LL_Init+0x94>)
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bd10:	4b11      	ldr	r3, [pc, #68]	@ (800bd58 <USBD_LL_Init+0x94>)
 800bd12:	2200      	movs	r2, #0
 800bd14:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bd16:	4b10      	ldr	r3, [pc, #64]	@ (800bd58 <USBD_LL_Init+0x94>)
 800bd18:	2200      	movs	r2, #0
 800bd1a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bd1c:	4b0e      	ldr	r3, [pc, #56]	@ (800bd58 <USBD_LL_Init+0x94>)
 800bd1e:	2200      	movs	r2, #0
 800bd20:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bd22:	480d      	ldr	r0, [pc, #52]	@ (800bd58 <USBD_LL_Init+0x94>)
 800bd24:	f7f8 faea 	bl	80042fc <HAL_PCD_Init>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d001      	beq.n	800bd32 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bd2e:	f7f7 fd4b 	bl	80037c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bd32:	2180      	movs	r1, #128	@ 0x80
 800bd34:	4808      	ldr	r0, [pc, #32]	@ (800bd58 <USBD_LL_Init+0x94>)
 800bd36:	f7f9 fd16 	bl	8005766 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bd3a:	2240      	movs	r2, #64	@ 0x40
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	4806      	ldr	r0, [pc, #24]	@ (800bd58 <USBD_LL_Init+0x94>)
 800bd40:	f7f9 fcca 	bl	80056d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bd44:	2280      	movs	r2, #128	@ 0x80
 800bd46:	2101      	movs	r1, #1
 800bd48:	4803      	ldr	r0, [pc, #12]	@ (800bd58 <USBD_LL_Init+0x94>)
 800bd4a:	f7f9 fcc5 	bl	80056d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bd4e:	2300      	movs	r3, #0
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	20001a74 	.word	0x20001a74

0800bd5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd64:	2300      	movs	r3, #0
 800bd66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7f8 fbd1 	bl	800451a <HAL_PCD_Start>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd7c:	7bfb      	ldrb	r3, [r7, #15]
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f000 f942 	bl	800c008 <USBD_Get_USB_Status>
 800bd84:	4603      	mov	r3, r0
 800bd86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd88:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3710      	adds	r7, #16
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}

0800bd92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b084      	sub	sp, #16
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
 800bd9a:	4608      	mov	r0, r1
 800bd9c:	4611      	mov	r1, r2
 800bd9e:	461a      	mov	r2, r3
 800bda0:	4603      	mov	r3, r0
 800bda2:	70fb      	strb	r3, [r7, #3]
 800bda4:	460b      	mov	r3, r1
 800bda6:	70bb      	strb	r3, [r7, #2]
 800bda8:	4613      	mov	r3, r2
 800bdaa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdac:	2300      	movs	r3, #0
 800bdae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bdba:	78bb      	ldrb	r3, [r7, #2]
 800bdbc:	883a      	ldrh	r2, [r7, #0]
 800bdbe:	78f9      	ldrb	r1, [r7, #3]
 800bdc0:	f7f9 f8a5 	bl	8004f0e <HAL_PCD_EP_Open>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdc8:	7bfb      	ldrb	r3, [r7, #15]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f000 f91c 	bl	800c008 <USBD_Get_USB_Status>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3710      	adds	r7, #16
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}

0800bdde <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b084      	sub	sp, #16
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
 800bde6:	460b      	mov	r3, r1
 800bde8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdea:	2300      	movs	r3, #0
 800bdec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bdf8:	78fa      	ldrb	r2, [r7, #3]
 800bdfa:	4611      	mov	r1, r2
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7f9 f8f0 	bl	8004fe2 <HAL_PCD_EP_Close>
 800be02:	4603      	mov	r3, r0
 800be04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be06:	7bfb      	ldrb	r3, [r7, #15]
 800be08:	4618      	mov	r0, r3
 800be0a:	f000 f8fd 	bl	800c008 <USBD_Get_USB_Status>
 800be0e:	4603      	mov	r3, r0
 800be10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be12:	7bbb      	ldrb	r3, [r7, #14]
}
 800be14:	4618      	mov	r0, r3
 800be16:	3710      	adds	r7, #16
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	460b      	mov	r3, r1
 800be26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be28:	2300      	movs	r3, #0
 800be2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be2c:	2300      	movs	r3, #0
 800be2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be36:	78fa      	ldrb	r2, [r7, #3]
 800be38:	4611      	mov	r1, r2
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7f9 f9a8 	bl	8005190 <HAL_PCD_EP_SetStall>
 800be40:	4603      	mov	r3, r0
 800be42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be44:	7bfb      	ldrb	r3, [r7, #15]
 800be46:	4618      	mov	r0, r3
 800be48:	f000 f8de 	bl	800c008 <USBD_Get_USB_Status>
 800be4c:	4603      	mov	r3, r0
 800be4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be50:	7bbb      	ldrb	r3, [r7, #14]
}
 800be52:	4618      	mov	r0, r3
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b084      	sub	sp, #16
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
 800be62:	460b      	mov	r3, r1
 800be64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be66:	2300      	movs	r3, #0
 800be68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be6a:	2300      	movs	r3, #0
 800be6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be74:	78fa      	ldrb	r2, [r7, #3]
 800be76:	4611      	mov	r1, r2
 800be78:	4618      	mov	r0, r3
 800be7a:	f7f9 f9ec 	bl	8005256 <HAL_PCD_EP_ClrStall>
 800be7e:	4603      	mov	r3, r0
 800be80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be82:	7bfb      	ldrb	r3, [r7, #15]
 800be84:	4618      	mov	r0, r3
 800be86:	f000 f8bf 	bl	800c008 <USBD_Get_USB_Status>
 800be8a:	4603      	mov	r3, r0
 800be8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800be90:	4618      	mov	r0, r3
 800be92:	3710      	adds	r7, #16
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be98:	b480      	push	{r7}
 800be9a:	b085      	sub	sp, #20
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	460b      	mov	r3, r1
 800bea2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800beaa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800beac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	da0b      	bge.n	800becc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800beb4:	78fb      	ldrb	r3, [r7, #3]
 800beb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800beba:	68f9      	ldr	r1, [r7, #12]
 800bebc:	4613      	mov	r3, r2
 800bebe:	00db      	lsls	r3, r3, #3
 800bec0:	4413      	add	r3, r2
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	440b      	add	r3, r1
 800bec6:	3316      	adds	r3, #22
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	e00b      	b.n	800bee4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800becc:	78fb      	ldrb	r3, [r7, #3]
 800bece:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bed2:	68f9      	ldr	r1, [r7, #12]
 800bed4:	4613      	mov	r3, r2
 800bed6:	00db      	lsls	r3, r3, #3
 800bed8:	4413      	add	r3, r2
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	440b      	add	r3, r1
 800bede:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800bee2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3714      	adds	r7, #20
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	460b      	mov	r3, r1
 800befa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf00:	2300      	movs	r3, #0
 800bf02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf0a:	78fa      	ldrb	r2, [r7, #3]
 800bf0c:	4611      	mov	r1, r2
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7f8 ffd9 	bl	8004ec6 <HAL_PCD_SetAddress>
 800bf14:	4603      	mov	r3, r0
 800bf16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf18:	7bfb      	ldrb	r3, [r7, #15]
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f000 f874 	bl	800c008 <USBD_Get_USB_Status>
 800bf20:	4603      	mov	r3, r0
 800bf22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf24:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3710      	adds	r7, #16
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}

0800bf2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bf2e:	b580      	push	{r7, lr}
 800bf30:	b086      	sub	sp, #24
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	60f8      	str	r0, [r7, #12]
 800bf36:	607a      	str	r2, [r7, #4]
 800bf38:	603b      	str	r3, [r7, #0]
 800bf3a:	460b      	mov	r3, r1
 800bf3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf42:	2300      	movs	r3, #0
 800bf44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bf4c:	7af9      	ldrb	r1, [r7, #11]
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	f7f9 f8e3 	bl	800511c <HAL_PCD_EP_Transmit>
 800bf56:	4603      	mov	r3, r0
 800bf58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf5a:	7dfb      	ldrb	r3, [r7, #23]
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f000 f853 	bl	800c008 <USBD_Get_USB_Status>
 800bf62:	4603      	mov	r3, r0
 800bf64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf66:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3718      	adds	r7, #24
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b086      	sub	sp, #24
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	607a      	str	r2, [r7, #4]
 800bf7a:	603b      	str	r3, [r7, #0]
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf80:	2300      	movs	r3, #0
 800bf82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf84:	2300      	movs	r3, #0
 800bf86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bf8e:	7af9      	ldrb	r1, [r7, #11]
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	f7f9 f86f 	bl	8005076 <HAL_PCD_EP_Receive>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf9c:	7dfb      	ldrb	r3, [r7, #23]
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f000 f832 	bl	800c008 <USBD_Get_USB_Status>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bfa8:	7dbb      	ldrb	r3, [r7, #22]
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3718      	adds	r7, #24
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}

0800bfb2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfb2:	b580      	push	{r7, lr}
 800bfb4:	b082      	sub	sp, #8
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
 800bfba:	460b      	mov	r3, r1
 800bfbc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bfc4:	78fa      	ldrb	r2, [r7, #3]
 800bfc6:	4611      	mov	r1, r2
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7f9 f88f 	bl	80050ec <HAL_PCD_EP_GetRxCount>
 800bfce:	4603      	mov	r3, r0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3708      	adds	r7, #8
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bfe0:	4b03      	ldr	r3, [pc, #12]	@ (800bff0 <USBD_static_malloc+0x18>)
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	370c      	adds	r7, #12
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	20001f58 	.word	0x20001f58

0800bff4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b083      	sub	sp, #12
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]

}
 800bffc:	bf00      	nop
 800bffe:	370c      	adds	r7, #12
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr

0800c008 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c008:	b480      	push	{r7}
 800c00a:	b085      	sub	sp, #20
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	4603      	mov	r3, r0
 800c010:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c012:	2300      	movs	r3, #0
 800c014:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c016:	79fb      	ldrb	r3, [r7, #7]
 800c018:	2b03      	cmp	r3, #3
 800c01a:	d817      	bhi.n	800c04c <USBD_Get_USB_Status+0x44>
 800c01c:	a201      	add	r2, pc, #4	@ (adr r2, 800c024 <USBD_Get_USB_Status+0x1c>)
 800c01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c022:	bf00      	nop
 800c024:	0800c035 	.word	0x0800c035
 800c028:	0800c03b 	.word	0x0800c03b
 800c02c:	0800c041 	.word	0x0800c041
 800c030:	0800c047 	.word	0x0800c047
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c034:	2300      	movs	r3, #0
 800c036:	73fb      	strb	r3, [r7, #15]
    break;
 800c038:	e00b      	b.n	800c052 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c03a:	2303      	movs	r3, #3
 800c03c:	73fb      	strb	r3, [r7, #15]
    break;
 800c03e:	e008      	b.n	800c052 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c040:	2301      	movs	r3, #1
 800c042:	73fb      	strb	r3, [r7, #15]
    break;
 800c044:	e005      	b.n	800c052 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c046:	2303      	movs	r3, #3
 800c048:	73fb      	strb	r3, [r7, #15]
    break;
 800c04a:	e002      	b.n	800c052 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c04c:	2303      	movs	r3, #3
 800c04e:	73fb      	strb	r3, [r7, #15]
    break;
 800c050:	bf00      	nop
  }
  return usb_status;
 800c052:	7bfb      	ldrb	r3, [r7, #15]
}
 800c054:	4618      	mov	r0, r3
 800c056:	3714      	adds	r7, #20
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <__assert_func>:
 800c060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c062:	4614      	mov	r4, r2
 800c064:	461a      	mov	r2, r3
 800c066:	4b09      	ldr	r3, [pc, #36]	@ (800c08c <__assert_func+0x2c>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4605      	mov	r5, r0
 800c06c:	68d8      	ldr	r0, [r3, #12]
 800c06e:	b14c      	cbz	r4, 800c084 <__assert_func+0x24>
 800c070:	4b07      	ldr	r3, [pc, #28]	@ (800c090 <__assert_func+0x30>)
 800c072:	9100      	str	r1, [sp, #0]
 800c074:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c078:	4906      	ldr	r1, [pc, #24]	@ (800c094 <__assert_func+0x34>)
 800c07a:	462b      	mov	r3, r5
 800c07c:	f000 fdbe 	bl	800cbfc <fiprintf>
 800c080:	f000 febf 	bl	800ce02 <abort>
 800c084:	4b04      	ldr	r3, [pc, #16]	@ (800c098 <__assert_func+0x38>)
 800c086:	461c      	mov	r4, r3
 800c088:	e7f3      	b.n	800c072 <__assert_func+0x12>
 800c08a:	bf00      	nop
 800c08c:	20000108 	.word	0x20000108
 800c090:	0800ea34 	.word	0x0800ea34
 800c094:	0800ea41 	.word	0x0800ea41
 800c098:	0800ea6f 	.word	0x0800ea6f

0800c09c <malloc>:
 800c09c:	4b02      	ldr	r3, [pc, #8]	@ (800c0a8 <malloc+0xc>)
 800c09e:	4601      	mov	r1, r0
 800c0a0:	6818      	ldr	r0, [r3, #0]
 800c0a2:	f000 b825 	b.w	800c0f0 <_malloc_r>
 800c0a6:	bf00      	nop
 800c0a8:	20000108 	.word	0x20000108

0800c0ac <sbrk_aligned>:
 800c0ac:	b570      	push	{r4, r5, r6, lr}
 800c0ae:	4e0f      	ldr	r6, [pc, #60]	@ (800c0ec <sbrk_aligned+0x40>)
 800c0b0:	460c      	mov	r4, r1
 800c0b2:	6831      	ldr	r1, [r6, #0]
 800c0b4:	4605      	mov	r5, r0
 800c0b6:	b911      	cbnz	r1, 800c0be <sbrk_aligned+0x12>
 800c0b8:	f000 fe54 	bl	800cd64 <_sbrk_r>
 800c0bc:	6030      	str	r0, [r6, #0]
 800c0be:	4621      	mov	r1, r4
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	f000 fe4f 	bl	800cd64 <_sbrk_r>
 800c0c6:	1c43      	adds	r3, r0, #1
 800c0c8:	d103      	bne.n	800c0d2 <sbrk_aligned+0x26>
 800c0ca:	f04f 34ff 	mov.w	r4, #4294967295
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	bd70      	pop	{r4, r5, r6, pc}
 800c0d2:	1cc4      	adds	r4, r0, #3
 800c0d4:	f024 0403 	bic.w	r4, r4, #3
 800c0d8:	42a0      	cmp	r0, r4
 800c0da:	d0f8      	beq.n	800c0ce <sbrk_aligned+0x22>
 800c0dc:	1a21      	subs	r1, r4, r0
 800c0de:	4628      	mov	r0, r5
 800c0e0:	f000 fe40 	bl	800cd64 <_sbrk_r>
 800c0e4:	3001      	adds	r0, #1
 800c0e6:	d1f2      	bne.n	800c0ce <sbrk_aligned+0x22>
 800c0e8:	e7ef      	b.n	800c0ca <sbrk_aligned+0x1e>
 800c0ea:	bf00      	nop
 800c0ec:	20002178 	.word	0x20002178

0800c0f0 <_malloc_r>:
 800c0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0f4:	1ccd      	adds	r5, r1, #3
 800c0f6:	f025 0503 	bic.w	r5, r5, #3
 800c0fa:	3508      	adds	r5, #8
 800c0fc:	2d0c      	cmp	r5, #12
 800c0fe:	bf38      	it	cc
 800c100:	250c      	movcc	r5, #12
 800c102:	2d00      	cmp	r5, #0
 800c104:	4606      	mov	r6, r0
 800c106:	db01      	blt.n	800c10c <_malloc_r+0x1c>
 800c108:	42a9      	cmp	r1, r5
 800c10a:	d904      	bls.n	800c116 <_malloc_r+0x26>
 800c10c:	230c      	movs	r3, #12
 800c10e:	6033      	str	r3, [r6, #0]
 800c110:	2000      	movs	r0, #0
 800c112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c116:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c1ec <_malloc_r+0xfc>
 800c11a:	f000 f869 	bl	800c1f0 <__malloc_lock>
 800c11e:	f8d8 3000 	ldr.w	r3, [r8]
 800c122:	461c      	mov	r4, r3
 800c124:	bb44      	cbnz	r4, 800c178 <_malloc_r+0x88>
 800c126:	4629      	mov	r1, r5
 800c128:	4630      	mov	r0, r6
 800c12a:	f7ff ffbf 	bl	800c0ac <sbrk_aligned>
 800c12e:	1c43      	adds	r3, r0, #1
 800c130:	4604      	mov	r4, r0
 800c132:	d158      	bne.n	800c1e6 <_malloc_r+0xf6>
 800c134:	f8d8 4000 	ldr.w	r4, [r8]
 800c138:	4627      	mov	r7, r4
 800c13a:	2f00      	cmp	r7, #0
 800c13c:	d143      	bne.n	800c1c6 <_malloc_r+0xd6>
 800c13e:	2c00      	cmp	r4, #0
 800c140:	d04b      	beq.n	800c1da <_malloc_r+0xea>
 800c142:	6823      	ldr	r3, [r4, #0]
 800c144:	4639      	mov	r1, r7
 800c146:	4630      	mov	r0, r6
 800c148:	eb04 0903 	add.w	r9, r4, r3
 800c14c:	f000 fe0a 	bl	800cd64 <_sbrk_r>
 800c150:	4581      	cmp	r9, r0
 800c152:	d142      	bne.n	800c1da <_malloc_r+0xea>
 800c154:	6821      	ldr	r1, [r4, #0]
 800c156:	1a6d      	subs	r5, r5, r1
 800c158:	4629      	mov	r1, r5
 800c15a:	4630      	mov	r0, r6
 800c15c:	f7ff ffa6 	bl	800c0ac <sbrk_aligned>
 800c160:	3001      	adds	r0, #1
 800c162:	d03a      	beq.n	800c1da <_malloc_r+0xea>
 800c164:	6823      	ldr	r3, [r4, #0]
 800c166:	442b      	add	r3, r5
 800c168:	6023      	str	r3, [r4, #0]
 800c16a:	f8d8 3000 	ldr.w	r3, [r8]
 800c16e:	685a      	ldr	r2, [r3, #4]
 800c170:	bb62      	cbnz	r2, 800c1cc <_malloc_r+0xdc>
 800c172:	f8c8 7000 	str.w	r7, [r8]
 800c176:	e00f      	b.n	800c198 <_malloc_r+0xa8>
 800c178:	6822      	ldr	r2, [r4, #0]
 800c17a:	1b52      	subs	r2, r2, r5
 800c17c:	d420      	bmi.n	800c1c0 <_malloc_r+0xd0>
 800c17e:	2a0b      	cmp	r2, #11
 800c180:	d917      	bls.n	800c1b2 <_malloc_r+0xc2>
 800c182:	1961      	adds	r1, r4, r5
 800c184:	42a3      	cmp	r3, r4
 800c186:	6025      	str	r5, [r4, #0]
 800c188:	bf18      	it	ne
 800c18a:	6059      	strne	r1, [r3, #4]
 800c18c:	6863      	ldr	r3, [r4, #4]
 800c18e:	bf08      	it	eq
 800c190:	f8c8 1000 	streq.w	r1, [r8]
 800c194:	5162      	str	r2, [r4, r5]
 800c196:	604b      	str	r3, [r1, #4]
 800c198:	4630      	mov	r0, r6
 800c19a:	f000 f82f 	bl	800c1fc <__malloc_unlock>
 800c19e:	f104 000b 	add.w	r0, r4, #11
 800c1a2:	1d23      	adds	r3, r4, #4
 800c1a4:	f020 0007 	bic.w	r0, r0, #7
 800c1a8:	1ac2      	subs	r2, r0, r3
 800c1aa:	bf1c      	itt	ne
 800c1ac:	1a1b      	subne	r3, r3, r0
 800c1ae:	50a3      	strne	r3, [r4, r2]
 800c1b0:	e7af      	b.n	800c112 <_malloc_r+0x22>
 800c1b2:	6862      	ldr	r2, [r4, #4]
 800c1b4:	42a3      	cmp	r3, r4
 800c1b6:	bf0c      	ite	eq
 800c1b8:	f8c8 2000 	streq.w	r2, [r8]
 800c1bc:	605a      	strne	r2, [r3, #4]
 800c1be:	e7eb      	b.n	800c198 <_malloc_r+0xa8>
 800c1c0:	4623      	mov	r3, r4
 800c1c2:	6864      	ldr	r4, [r4, #4]
 800c1c4:	e7ae      	b.n	800c124 <_malloc_r+0x34>
 800c1c6:	463c      	mov	r4, r7
 800c1c8:	687f      	ldr	r7, [r7, #4]
 800c1ca:	e7b6      	b.n	800c13a <_malloc_r+0x4a>
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	42a3      	cmp	r3, r4
 800c1d2:	d1fb      	bne.n	800c1cc <_malloc_r+0xdc>
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	6053      	str	r3, [r2, #4]
 800c1d8:	e7de      	b.n	800c198 <_malloc_r+0xa8>
 800c1da:	230c      	movs	r3, #12
 800c1dc:	6033      	str	r3, [r6, #0]
 800c1de:	4630      	mov	r0, r6
 800c1e0:	f000 f80c 	bl	800c1fc <__malloc_unlock>
 800c1e4:	e794      	b.n	800c110 <_malloc_r+0x20>
 800c1e6:	6005      	str	r5, [r0, #0]
 800c1e8:	e7d6      	b.n	800c198 <_malloc_r+0xa8>
 800c1ea:	bf00      	nop
 800c1ec:	2000217c 	.word	0x2000217c

0800c1f0 <__malloc_lock>:
 800c1f0:	4801      	ldr	r0, [pc, #4]	@ (800c1f8 <__malloc_lock+0x8>)
 800c1f2:	f000 be04 	b.w	800cdfe <__retarget_lock_acquire_recursive>
 800c1f6:	bf00      	nop
 800c1f8:	200022c0 	.word	0x200022c0

0800c1fc <__malloc_unlock>:
 800c1fc:	4801      	ldr	r0, [pc, #4]	@ (800c204 <__malloc_unlock+0x8>)
 800c1fe:	f000 bdff 	b.w	800ce00 <__retarget_lock_release_recursive>
 800c202:	bf00      	nop
 800c204:	200022c0 	.word	0x200022c0

0800c208 <__cvt>:
 800c208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c20c:	ec57 6b10 	vmov	r6, r7, d0
 800c210:	2f00      	cmp	r7, #0
 800c212:	460c      	mov	r4, r1
 800c214:	4619      	mov	r1, r3
 800c216:	463b      	mov	r3, r7
 800c218:	bfbb      	ittet	lt
 800c21a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c21e:	461f      	movlt	r7, r3
 800c220:	2300      	movge	r3, #0
 800c222:	232d      	movlt	r3, #45	@ 0x2d
 800c224:	700b      	strb	r3, [r1, #0]
 800c226:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c228:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c22c:	4691      	mov	r9, r2
 800c22e:	f023 0820 	bic.w	r8, r3, #32
 800c232:	bfbc      	itt	lt
 800c234:	4632      	movlt	r2, r6
 800c236:	4616      	movlt	r6, r2
 800c238:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c23c:	d005      	beq.n	800c24a <__cvt+0x42>
 800c23e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c242:	d100      	bne.n	800c246 <__cvt+0x3e>
 800c244:	3401      	adds	r4, #1
 800c246:	2102      	movs	r1, #2
 800c248:	e000      	b.n	800c24c <__cvt+0x44>
 800c24a:	2103      	movs	r1, #3
 800c24c:	ab03      	add	r3, sp, #12
 800c24e:	9301      	str	r3, [sp, #4]
 800c250:	ab02      	add	r3, sp, #8
 800c252:	9300      	str	r3, [sp, #0]
 800c254:	ec47 6b10 	vmov	d0, r6, r7
 800c258:	4653      	mov	r3, sl
 800c25a:	4622      	mov	r2, r4
 800c25c:	f000 fe60 	bl	800cf20 <_dtoa_r>
 800c260:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c264:	4605      	mov	r5, r0
 800c266:	d119      	bne.n	800c29c <__cvt+0x94>
 800c268:	f019 0f01 	tst.w	r9, #1
 800c26c:	d00e      	beq.n	800c28c <__cvt+0x84>
 800c26e:	eb00 0904 	add.w	r9, r0, r4
 800c272:	2200      	movs	r2, #0
 800c274:	2300      	movs	r3, #0
 800c276:	4630      	mov	r0, r6
 800c278:	4639      	mov	r1, r7
 800c27a:	f7f4 fc25 	bl	8000ac8 <__aeabi_dcmpeq>
 800c27e:	b108      	cbz	r0, 800c284 <__cvt+0x7c>
 800c280:	f8cd 900c 	str.w	r9, [sp, #12]
 800c284:	2230      	movs	r2, #48	@ 0x30
 800c286:	9b03      	ldr	r3, [sp, #12]
 800c288:	454b      	cmp	r3, r9
 800c28a:	d31e      	bcc.n	800c2ca <__cvt+0xc2>
 800c28c:	9b03      	ldr	r3, [sp, #12]
 800c28e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c290:	1b5b      	subs	r3, r3, r5
 800c292:	4628      	mov	r0, r5
 800c294:	6013      	str	r3, [r2, #0]
 800c296:	b004      	add	sp, #16
 800c298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c29c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c2a0:	eb00 0904 	add.w	r9, r0, r4
 800c2a4:	d1e5      	bne.n	800c272 <__cvt+0x6a>
 800c2a6:	7803      	ldrb	r3, [r0, #0]
 800c2a8:	2b30      	cmp	r3, #48	@ 0x30
 800c2aa:	d10a      	bne.n	800c2c2 <__cvt+0xba>
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	4630      	mov	r0, r6
 800c2b2:	4639      	mov	r1, r7
 800c2b4:	f7f4 fc08 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2b8:	b918      	cbnz	r0, 800c2c2 <__cvt+0xba>
 800c2ba:	f1c4 0401 	rsb	r4, r4, #1
 800c2be:	f8ca 4000 	str.w	r4, [sl]
 800c2c2:	f8da 3000 	ldr.w	r3, [sl]
 800c2c6:	4499      	add	r9, r3
 800c2c8:	e7d3      	b.n	800c272 <__cvt+0x6a>
 800c2ca:	1c59      	adds	r1, r3, #1
 800c2cc:	9103      	str	r1, [sp, #12]
 800c2ce:	701a      	strb	r2, [r3, #0]
 800c2d0:	e7d9      	b.n	800c286 <__cvt+0x7e>

0800c2d2 <__exponent>:
 800c2d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2d4:	2900      	cmp	r1, #0
 800c2d6:	bfba      	itte	lt
 800c2d8:	4249      	neglt	r1, r1
 800c2da:	232d      	movlt	r3, #45	@ 0x2d
 800c2dc:	232b      	movge	r3, #43	@ 0x2b
 800c2de:	2909      	cmp	r1, #9
 800c2e0:	7002      	strb	r2, [r0, #0]
 800c2e2:	7043      	strb	r3, [r0, #1]
 800c2e4:	dd29      	ble.n	800c33a <__exponent+0x68>
 800c2e6:	f10d 0307 	add.w	r3, sp, #7
 800c2ea:	461d      	mov	r5, r3
 800c2ec:	270a      	movs	r7, #10
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	fbb1 f6f7 	udiv	r6, r1, r7
 800c2f4:	fb07 1416 	mls	r4, r7, r6, r1
 800c2f8:	3430      	adds	r4, #48	@ 0x30
 800c2fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c2fe:	460c      	mov	r4, r1
 800c300:	2c63      	cmp	r4, #99	@ 0x63
 800c302:	f103 33ff 	add.w	r3, r3, #4294967295
 800c306:	4631      	mov	r1, r6
 800c308:	dcf1      	bgt.n	800c2ee <__exponent+0x1c>
 800c30a:	3130      	adds	r1, #48	@ 0x30
 800c30c:	1e94      	subs	r4, r2, #2
 800c30e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c312:	1c41      	adds	r1, r0, #1
 800c314:	4623      	mov	r3, r4
 800c316:	42ab      	cmp	r3, r5
 800c318:	d30a      	bcc.n	800c330 <__exponent+0x5e>
 800c31a:	f10d 0309 	add.w	r3, sp, #9
 800c31e:	1a9b      	subs	r3, r3, r2
 800c320:	42ac      	cmp	r4, r5
 800c322:	bf88      	it	hi
 800c324:	2300      	movhi	r3, #0
 800c326:	3302      	adds	r3, #2
 800c328:	4403      	add	r3, r0
 800c32a:	1a18      	subs	r0, r3, r0
 800c32c:	b003      	add	sp, #12
 800c32e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c330:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c334:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c338:	e7ed      	b.n	800c316 <__exponent+0x44>
 800c33a:	2330      	movs	r3, #48	@ 0x30
 800c33c:	3130      	adds	r1, #48	@ 0x30
 800c33e:	7083      	strb	r3, [r0, #2]
 800c340:	70c1      	strb	r1, [r0, #3]
 800c342:	1d03      	adds	r3, r0, #4
 800c344:	e7f1      	b.n	800c32a <__exponent+0x58>
	...

0800c348 <_printf_float>:
 800c348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34c:	b08d      	sub	sp, #52	@ 0x34
 800c34e:	460c      	mov	r4, r1
 800c350:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c354:	4616      	mov	r6, r2
 800c356:	461f      	mov	r7, r3
 800c358:	4605      	mov	r5, r0
 800c35a:	f000 fccb 	bl	800ccf4 <_localeconv_r>
 800c35e:	6803      	ldr	r3, [r0, #0]
 800c360:	9304      	str	r3, [sp, #16]
 800c362:	4618      	mov	r0, r3
 800c364:	f7f3 ff84 	bl	8000270 <strlen>
 800c368:	2300      	movs	r3, #0
 800c36a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c36c:	f8d8 3000 	ldr.w	r3, [r8]
 800c370:	9005      	str	r0, [sp, #20]
 800c372:	3307      	adds	r3, #7
 800c374:	f023 0307 	bic.w	r3, r3, #7
 800c378:	f103 0208 	add.w	r2, r3, #8
 800c37c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c380:	f8d4 b000 	ldr.w	fp, [r4]
 800c384:	f8c8 2000 	str.w	r2, [r8]
 800c388:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c38c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c390:	9307      	str	r3, [sp, #28]
 800c392:	f8cd 8018 	str.w	r8, [sp, #24]
 800c396:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c39a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c39e:	4b9c      	ldr	r3, [pc, #624]	@ (800c610 <_printf_float+0x2c8>)
 800c3a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c3a4:	f7f4 fbc2 	bl	8000b2c <__aeabi_dcmpun>
 800c3a8:	bb70      	cbnz	r0, 800c408 <_printf_float+0xc0>
 800c3aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3ae:	4b98      	ldr	r3, [pc, #608]	@ (800c610 <_printf_float+0x2c8>)
 800c3b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c3b4:	f7f4 fb9c 	bl	8000af0 <__aeabi_dcmple>
 800c3b8:	bb30      	cbnz	r0, 800c408 <_printf_float+0xc0>
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	2300      	movs	r3, #0
 800c3be:	4640      	mov	r0, r8
 800c3c0:	4649      	mov	r1, r9
 800c3c2:	f7f4 fb8b 	bl	8000adc <__aeabi_dcmplt>
 800c3c6:	b110      	cbz	r0, 800c3ce <_printf_float+0x86>
 800c3c8:	232d      	movs	r3, #45	@ 0x2d
 800c3ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3ce:	4a91      	ldr	r2, [pc, #580]	@ (800c614 <_printf_float+0x2cc>)
 800c3d0:	4b91      	ldr	r3, [pc, #580]	@ (800c618 <_printf_float+0x2d0>)
 800c3d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c3d6:	bf8c      	ite	hi
 800c3d8:	4690      	movhi	r8, r2
 800c3da:	4698      	movls	r8, r3
 800c3dc:	2303      	movs	r3, #3
 800c3de:	6123      	str	r3, [r4, #16]
 800c3e0:	f02b 0304 	bic.w	r3, fp, #4
 800c3e4:	6023      	str	r3, [r4, #0]
 800c3e6:	f04f 0900 	mov.w	r9, #0
 800c3ea:	9700      	str	r7, [sp, #0]
 800c3ec:	4633      	mov	r3, r6
 800c3ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c3f0:	4621      	mov	r1, r4
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	f000 f9d2 	bl	800c79c <_printf_common>
 800c3f8:	3001      	adds	r0, #1
 800c3fa:	f040 808d 	bne.w	800c518 <_printf_float+0x1d0>
 800c3fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c402:	b00d      	add	sp, #52	@ 0x34
 800c404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c408:	4642      	mov	r2, r8
 800c40a:	464b      	mov	r3, r9
 800c40c:	4640      	mov	r0, r8
 800c40e:	4649      	mov	r1, r9
 800c410:	f7f4 fb8c 	bl	8000b2c <__aeabi_dcmpun>
 800c414:	b140      	cbz	r0, 800c428 <_printf_float+0xe0>
 800c416:	464b      	mov	r3, r9
 800c418:	2b00      	cmp	r3, #0
 800c41a:	bfbc      	itt	lt
 800c41c:	232d      	movlt	r3, #45	@ 0x2d
 800c41e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c422:	4a7e      	ldr	r2, [pc, #504]	@ (800c61c <_printf_float+0x2d4>)
 800c424:	4b7e      	ldr	r3, [pc, #504]	@ (800c620 <_printf_float+0x2d8>)
 800c426:	e7d4      	b.n	800c3d2 <_printf_float+0x8a>
 800c428:	6863      	ldr	r3, [r4, #4]
 800c42a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c42e:	9206      	str	r2, [sp, #24]
 800c430:	1c5a      	adds	r2, r3, #1
 800c432:	d13b      	bne.n	800c4ac <_printf_float+0x164>
 800c434:	2306      	movs	r3, #6
 800c436:	6063      	str	r3, [r4, #4]
 800c438:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c43c:	2300      	movs	r3, #0
 800c43e:	6022      	str	r2, [r4, #0]
 800c440:	9303      	str	r3, [sp, #12]
 800c442:	ab0a      	add	r3, sp, #40	@ 0x28
 800c444:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c448:	ab09      	add	r3, sp, #36	@ 0x24
 800c44a:	9300      	str	r3, [sp, #0]
 800c44c:	6861      	ldr	r1, [r4, #4]
 800c44e:	ec49 8b10 	vmov	d0, r8, r9
 800c452:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c456:	4628      	mov	r0, r5
 800c458:	f7ff fed6 	bl	800c208 <__cvt>
 800c45c:	9b06      	ldr	r3, [sp, #24]
 800c45e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c460:	2b47      	cmp	r3, #71	@ 0x47
 800c462:	4680      	mov	r8, r0
 800c464:	d129      	bne.n	800c4ba <_printf_float+0x172>
 800c466:	1cc8      	adds	r0, r1, #3
 800c468:	db02      	blt.n	800c470 <_printf_float+0x128>
 800c46a:	6863      	ldr	r3, [r4, #4]
 800c46c:	4299      	cmp	r1, r3
 800c46e:	dd41      	ble.n	800c4f4 <_printf_float+0x1ac>
 800c470:	f1aa 0a02 	sub.w	sl, sl, #2
 800c474:	fa5f fa8a 	uxtb.w	sl, sl
 800c478:	3901      	subs	r1, #1
 800c47a:	4652      	mov	r2, sl
 800c47c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c480:	9109      	str	r1, [sp, #36]	@ 0x24
 800c482:	f7ff ff26 	bl	800c2d2 <__exponent>
 800c486:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c488:	1813      	adds	r3, r2, r0
 800c48a:	2a01      	cmp	r2, #1
 800c48c:	4681      	mov	r9, r0
 800c48e:	6123      	str	r3, [r4, #16]
 800c490:	dc02      	bgt.n	800c498 <_printf_float+0x150>
 800c492:	6822      	ldr	r2, [r4, #0]
 800c494:	07d2      	lsls	r2, r2, #31
 800c496:	d501      	bpl.n	800c49c <_printf_float+0x154>
 800c498:	3301      	adds	r3, #1
 800c49a:	6123      	str	r3, [r4, #16]
 800c49c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d0a2      	beq.n	800c3ea <_printf_float+0xa2>
 800c4a4:	232d      	movs	r3, #45	@ 0x2d
 800c4a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c4aa:	e79e      	b.n	800c3ea <_printf_float+0xa2>
 800c4ac:	9a06      	ldr	r2, [sp, #24]
 800c4ae:	2a47      	cmp	r2, #71	@ 0x47
 800c4b0:	d1c2      	bne.n	800c438 <_printf_float+0xf0>
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d1c0      	bne.n	800c438 <_printf_float+0xf0>
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	e7bd      	b.n	800c436 <_printf_float+0xee>
 800c4ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c4be:	d9db      	bls.n	800c478 <_printf_float+0x130>
 800c4c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c4c4:	d118      	bne.n	800c4f8 <_printf_float+0x1b0>
 800c4c6:	2900      	cmp	r1, #0
 800c4c8:	6863      	ldr	r3, [r4, #4]
 800c4ca:	dd0b      	ble.n	800c4e4 <_printf_float+0x19c>
 800c4cc:	6121      	str	r1, [r4, #16]
 800c4ce:	b913      	cbnz	r3, 800c4d6 <_printf_float+0x18e>
 800c4d0:	6822      	ldr	r2, [r4, #0]
 800c4d2:	07d0      	lsls	r0, r2, #31
 800c4d4:	d502      	bpl.n	800c4dc <_printf_float+0x194>
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	440b      	add	r3, r1
 800c4da:	6123      	str	r3, [r4, #16]
 800c4dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c4de:	f04f 0900 	mov.w	r9, #0
 800c4e2:	e7db      	b.n	800c49c <_printf_float+0x154>
 800c4e4:	b913      	cbnz	r3, 800c4ec <_printf_float+0x1a4>
 800c4e6:	6822      	ldr	r2, [r4, #0]
 800c4e8:	07d2      	lsls	r2, r2, #31
 800c4ea:	d501      	bpl.n	800c4f0 <_printf_float+0x1a8>
 800c4ec:	3302      	adds	r3, #2
 800c4ee:	e7f4      	b.n	800c4da <_printf_float+0x192>
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	e7f2      	b.n	800c4da <_printf_float+0x192>
 800c4f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c4f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4fa:	4299      	cmp	r1, r3
 800c4fc:	db05      	blt.n	800c50a <_printf_float+0x1c2>
 800c4fe:	6823      	ldr	r3, [r4, #0]
 800c500:	6121      	str	r1, [r4, #16]
 800c502:	07d8      	lsls	r0, r3, #31
 800c504:	d5ea      	bpl.n	800c4dc <_printf_float+0x194>
 800c506:	1c4b      	adds	r3, r1, #1
 800c508:	e7e7      	b.n	800c4da <_printf_float+0x192>
 800c50a:	2900      	cmp	r1, #0
 800c50c:	bfd4      	ite	le
 800c50e:	f1c1 0202 	rsble	r2, r1, #2
 800c512:	2201      	movgt	r2, #1
 800c514:	4413      	add	r3, r2
 800c516:	e7e0      	b.n	800c4da <_printf_float+0x192>
 800c518:	6823      	ldr	r3, [r4, #0]
 800c51a:	055a      	lsls	r2, r3, #21
 800c51c:	d407      	bmi.n	800c52e <_printf_float+0x1e6>
 800c51e:	6923      	ldr	r3, [r4, #16]
 800c520:	4642      	mov	r2, r8
 800c522:	4631      	mov	r1, r6
 800c524:	4628      	mov	r0, r5
 800c526:	47b8      	blx	r7
 800c528:	3001      	adds	r0, #1
 800c52a:	d12b      	bne.n	800c584 <_printf_float+0x23c>
 800c52c:	e767      	b.n	800c3fe <_printf_float+0xb6>
 800c52e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c532:	f240 80dd 	bls.w	800c6f0 <_printf_float+0x3a8>
 800c536:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c53a:	2200      	movs	r2, #0
 800c53c:	2300      	movs	r3, #0
 800c53e:	f7f4 fac3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c542:	2800      	cmp	r0, #0
 800c544:	d033      	beq.n	800c5ae <_printf_float+0x266>
 800c546:	4a37      	ldr	r2, [pc, #220]	@ (800c624 <_printf_float+0x2dc>)
 800c548:	2301      	movs	r3, #1
 800c54a:	4631      	mov	r1, r6
 800c54c:	4628      	mov	r0, r5
 800c54e:	47b8      	blx	r7
 800c550:	3001      	adds	r0, #1
 800c552:	f43f af54 	beq.w	800c3fe <_printf_float+0xb6>
 800c556:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c55a:	4543      	cmp	r3, r8
 800c55c:	db02      	blt.n	800c564 <_printf_float+0x21c>
 800c55e:	6823      	ldr	r3, [r4, #0]
 800c560:	07d8      	lsls	r0, r3, #31
 800c562:	d50f      	bpl.n	800c584 <_printf_float+0x23c>
 800c564:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c568:	4631      	mov	r1, r6
 800c56a:	4628      	mov	r0, r5
 800c56c:	47b8      	blx	r7
 800c56e:	3001      	adds	r0, #1
 800c570:	f43f af45 	beq.w	800c3fe <_printf_float+0xb6>
 800c574:	f04f 0900 	mov.w	r9, #0
 800c578:	f108 38ff 	add.w	r8, r8, #4294967295
 800c57c:	f104 0a1a 	add.w	sl, r4, #26
 800c580:	45c8      	cmp	r8, r9
 800c582:	dc09      	bgt.n	800c598 <_printf_float+0x250>
 800c584:	6823      	ldr	r3, [r4, #0]
 800c586:	079b      	lsls	r3, r3, #30
 800c588:	f100 8103 	bmi.w	800c792 <_printf_float+0x44a>
 800c58c:	68e0      	ldr	r0, [r4, #12]
 800c58e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c590:	4298      	cmp	r0, r3
 800c592:	bfb8      	it	lt
 800c594:	4618      	movlt	r0, r3
 800c596:	e734      	b.n	800c402 <_printf_float+0xba>
 800c598:	2301      	movs	r3, #1
 800c59a:	4652      	mov	r2, sl
 800c59c:	4631      	mov	r1, r6
 800c59e:	4628      	mov	r0, r5
 800c5a0:	47b8      	blx	r7
 800c5a2:	3001      	adds	r0, #1
 800c5a4:	f43f af2b 	beq.w	800c3fe <_printf_float+0xb6>
 800c5a8:	f109 0901 	add.w	r9, r9, #1
 800c5ac:	e7e8      	b.n	800c580 <_printf_float+0x238>
 800c5ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	dc39      	bgt.n	800c628 <_printf_float+0x2e0>
 800c5b4:	4a1b      	ldr	r2, [pc, #108]	@ (800c624 <_printf_float+0x2dc>)
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	4631      	mov	r1, r6
 800c5ba:	4628      	mov	r0, r5
 800c5bc:	47b8      	blx	r7
 800c5be:	3001      	adds	r0, #1
 800c5c0:	f43f af1d 	beq.w	800c3fe <_printf_float+0xb6>
 800c5c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c5c8:	ea59 0303 	orrs.w	r3, r9, r3
 800c5cc:	d102      	bne.n	800c5d4 <_printf_float+0x28c>
 800c5ce:	6823      	ldr	r3, [r4, #0]
 800c5d0:	07d9      	lsls	r1, r3, #31
 800c5d2:	d5d7      	bpl.n	800c584 <_printf_float+0x23c>
 800c5d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5d8:	4631      	mov	r1, r6
 800c5da:	4628      	mov	r0, r5
 800c5dc:	47b8      	blx	r7
 800c5de:	3001      	adds	r0, #1
 800c5e0:	f43f af0d 	beq.w	800c3fe <_printf_float+0xb6>
 800c5e4:	f04f 0a00 	mov.w	sl, #0
 800c5e8:	f104 0b1a 	add.w	fp, r4, #26
 800c5ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5ee:	425b      	negs	r3, r3
 800c5f0:	4553      	cmp	r3, sl
 800c5f2:	dc01      	bgt.n	800c5f8 <_printf_float+0x2b0>
 800c5f4:	464b      	mov	r3, r9
 800c5f6:	e793      	b.n	800c520 <_printf_float+0x1d8>
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	465a      	mov	r2, fp
 800c5fc:	4631      	mov	r1, r6
 800c5fe:	4628      	mov	r0, r5
 800c600:	47b8      	blx	r7
 800c602:	3001      	adds	r0, #1
 800c604:	f43f aefb 	beq.w	800c3fe <_printf_float+0xb6>
 800c608:	f10a 0a01 	add.w	sl, sl, #1
 800c60c:	e7ee      	b.n	800c5ec <_printf_float+0x2a4>
 800c60e:	bf00      	nop
 800c610:	7fefffff 	.word	0x7fefffff
 800c614:	0800ea74 	.word	0x0800ea74
 800c618:	0800ea70 	.word	0x0800ea70
 800c61c:	0800ea7c 	.word	0x0800ea7c
 800c620:	0800ea78 	.word	0x0800ea78
 800c624:	0800ea80 	.word	0x0800ea80
 800c628:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c62a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c62e:	4553      	cmp	r3, sl
 800c630:	bfa8      	it	ge
 800c632:	4653      	movge	r3, sl
 800c634:	2b00      	cmp	r3, #0
 800c636:	4699      	mov	r9, r3
 800c638:	dc36      	bgt.n	800c6a8 <_printf_float+0x360>
 800c63a:	f04f 0b00 	mov.w	fp, #0
 800c63e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c642:	f104 021a 	add.w	r2, r4, #26
 800c646:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c648:	9306      	str	r3, [sp, #24]
 800c64a:	eba3 0309 	sub.w	r3, r3, r9
 800c64e:	455b      	cmp	r3, fp
 800c650:	dc31      	bgt.n	800c6b6 <_printf_float+0x36e>
 800c652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c654:	459a      	cmp	sl, r3
 800c656:	dc3a      	bgt.n	800c6ce <_printf_float+0x386>
 800c658:	6823      	ldr	r3, [r4, #0]
 800c65a:	07da      	lsls	r2, r3, #31
 800c65c:	d437      	bmi.n	800c6ce <_printf_float+0x386>
 800c65e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c660:	ebaa 0903 	sub.w	r9, sl, r3
 800c664:	9b06      	ldr	r3, [sp, #24]
 800c666:	ebaa 0303 	sub.w	r3, sl, r3
 800c66a:	4599      	cmp	r9, r3
 800c66c:	bfa8      	it	ge
 800c66e:	4699      	movge	r9, r3
 800c670:	f1b9 0f00 	cmp.w	r9, #0
 800c674:	dc33      	bgt.n	800c6de <_printf_float+0x396>
 800c676:	f04f 0800 	mov.w	r8, #0
 800c67a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c67e:	f104 0b1a 	add.w	fp, r4, #26
 800c682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c684:	ebaa 0303 	sub.w	r3, sl, r3
 800c688:	eba3 0309 	sub.w	r3, r3, r9
 800c68c:	4543      	cmp	r3, r8
 800c68e:	f77f af79 	ble.w	800c584 <_printf_float+0x23c>
 800c692:	2301      	movs	r3, #1
 800c694:	465a      	mov	r2, fp
 800c696:	4631      	mov	r1, r6
 800c698:	4628      	mov	r0, r5
 800c69a:	47b8      	blx	r7
 800c69c:	3001      	adds	r0, #1
 800c69e:	f43f aeae 	beq.w	800c3fe <_printf_float+0xb6>
 800c6a2:	f108 0801 	add.w	r8, r8, #1
 800c6a6:	e7ec      	b.n	800c682 <_printf_float+0x33a>
 800c6a8:	4642      	mov	r2, r8
 800c6aa:	4631      	mov	r1, r6
 800c6ac:	4628      	mov	r0, r5
 800c6ae:	47b8      	blx	r7
 800c6b0:	3001      	adds	r0, #1
 800c6b2:	d1c2      	bne.n	800c63a <_printf_float+0x2f2>
 800c6b4:	e6a3      	b.n	800c3fe <_printf_float+0xb6>
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	4631      	mov	r1, r6
 800c6ba:	4628      	mov	r0, r5
 800c6bc:	9206      	str	r2, [sp, #24]
 800c6be:	47b8      	blx	r7
 800c6c0:	3001      	adds	r0, #1
 800c6c2:	f43f ae9c 	beq.w	800c3fe <_printf_float+0xb6>
 800c6c6:	9a06      	ldr	r2, [sp, #24]
 800c6c8:	f10b 0b01 	add.w	fp, fp, #1
 800c6cc:	e7bb      	b.n	800c646 <_printf_float+0x2fe>
 800c6ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6d2:	4631      	mov	r1, r6
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	47b8      	blx	r7
 800c6d8:	3001      	adds	r0, #1
 800c6da:	d1c0      	bne.n	800c65e <_printf_float+0x316>
 800c6dc:	e68f      	b.n	800c3fe <_printf_float+0xb6>
 800c6de:	9a06      	ldr	r2, [sp, #24]
 800c6e0:	464b      	mov	r3, r9
 800c6e2:	4442      	add	r2, r8
 800c6e4:	4631      	mov	r1, r6
 800c6e6:	4628      	mov	r0, r5
 800c6e8:	47b8      	blx	r7
 800c6ea:	3001      	adds	r0, #1
 800c6ec:	d1c3      	bne.n	800c676 <_printf_float+0x32e>
 800c6ee:	e686      	b.n	800c3fe <_printf_float+0xb6>
 800c6f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c6f4:	f1ba 0f01 	cmp.w	sl, #1
 800c6f8:	dc01      	bgt.n	800c6fe <_printf_float+0x3b6>
 800c6fa:	07db      	lsls	r3, r3, #31
 800c6fc:	d536      	bpl.n	800c76c <_printf_float+0x424>
 800c6fe:	2301      	movs	r3, #1
 800c700:	4642      	mov	r2, r8
 800c702:	4631      	mov	r1, r6
 800c704:	4628      	mov	r0, r5
 800c706:	47b8      	blx	r7
 800c708:	3001      	adds	r0, #1
 800c70a:	f43f ae78 	beq.w	800c3fe <_printf_float+0xb6>
 800c70e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c712:	4631      	mov	r1, r6
 800c714:	4628      	mov	r0, r5
 800c716:	47b8      	blx	r7
 800c718:	3001      	adds	r0, #1
 800c71a:	f43f ae70 	beq.w	800c3fe <_printf_float+0xb6>
 800c71e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c722:	2200      	movs	r2, #0
 800c724:	2300      	movs	r3, #0
 800c726:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c72a:	f7f4 f9cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800c72e:	b9c0      	cbnz	r0, 800c762 <_printf_float+0x41a>
 800c730:	4653      	mov	r3, sl
 800c732:	f108 0201 	add.w	r2, r8, #1
 800c736:	4631      	mov	r1, r6
 800c738:	4628      	mov	r0, r5
 800c73a:	47b8      	blx	r7
 800c73c:	3001      	adds	r0, #1
 800c73e:	d10c      	bne.n	800c75a <_printf_float+0x412>
 800c740:	e65d      	b.n	800c3fe <_printf_float+0xb6>
 800c742:	2301      	movs	r3, #1
 800c744:	465a      	mov	r2, fp
 800c746:	4631      	mov	r1, r6
 800c748:	4628      	mov	r0, r5
 800c74a:	47b8      	blx	r7
 800c74c:	3001      	adds	r0, #1
 800c74e:	f43f ae56 	beq.w	800c3fe <_printf_float+0xb6>
 800c752:	f108 0801 	add.w	r8, r8, #1
 800c756:	45d0      	cmp	r8, sl
 800c758:	dbf3      	blt.n	800c742 <_printf_float+0x3fa>
 800c75a:	464b      	mov	r3, r9
 800c75c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c760:	e6df      	b.n	800c522 <_printf_float+0x1da>
 800c762:	f04f 0800 	mov.w	r8, #0
 800c766:	f104 0b1a 	add.w	fp, r4, #26
 800c76a:	e7f4      	b.n	800c756 <_printf_float+0x40e>
 800c76c:	2301      	movs	r3, #1
 800c76e:	4642      	mov	r2, r8
 800c770:	e7e1      	b.n	800c736 <_printf_float+0x3ee>
 800c772:	2301      	movs	r3, #1
 800c774:	464a      	mov	r2, r9
 800c776:	4631      	mov	r1, r6
 800c778:	4628      	mov	r0, r5
 800c77a:	47b8      	blx	r7
 800c77c:	3001      	adds	r0, #1
 800c77e:	f43f ae3e 	beq.w	800c3fe <_printf_float+0xb6>
 800c782:	f108 0801 	add.w	r8, r8, #1
 800c786:	68e3      	ldr	r3, [r4, #12]
 800c788:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c78a:	1a5b      	subs	r3, r3, r1
 800c78c:	4543      	cmp	r3, r8
 800c78e:	dcf0      	bgt.n	800c772 <_printf_float+0x42a>
 800c790:	e6fc      	b.n	800c58c <_printf_float+0x244>
 800c792:	f04f 0800 	mov.w	r8, #0
 800c796:	f104 0919 	add.w	r9, r4, #25
 800c79a:	e7f4      	b.n	800c786 <_printf_float+0x43e>

0800c79c <_printf_common>:
 800c79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7a0:	4616      	mov	r6, r2
 800c7a2:	4698      	mov	r8, r3
 800c7a4:	688a      	ldr	r2, [r1, #8]
 800c7a6:	690b      	ldr	r3, [r1, #16]
 800c7a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	bfb8      	it	lt
 800c7b0:	4613      	movlt	r3, r2
 800c7b2:	6033      	str	r3, [r6, #0]
 800c7b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c7b8:	4607      	mov	r7, r0
 800c7ba:	460c      	mov	r4, r1
 800c7bc:	b10a      	cbz	r2, 800c7c2 <_printf_common+0x26>
 800c7be:	3301      	adds	r3, #1
 800c7c0:	6033      	str	r3, [r6, #0]
 800c7c2:	6823      	ldr	r3, [r4, #0]
 800c7c4:	0699      	lsls	r1, r3, #26
 800c7c6:	bf42      	ittt	mi
 800c7c8:	6833      	ldrmi	r3, [r6, #0]
 800c7ca:	3302      	addmi	r3, #2
 800c7cc:	6033      	strmi	r3, [r6, #0]
 800c7ce:	6825      	ldr	r5, [r4, #0]
 800c7d0:	f015 0506 	ands.w	r5, r5, #6
 800c7d4:	d106      	bne.n	800c7e4 <_printf_common+0x48>
 800c7d6:	f104 0a19 	add.w	sl, r4, #25
 800c7da:	68e3      	ldr	r3, [r4, #12]
 800c7dc:	6832      	ldr	r2, [r6, #0]
 800c7de:	1a9b      	subs	r3, r3, r2
 800c7e0:	42ab      	cmp	r3, r5
 800c7e2:	dc26      	bgt.n	800c832 <_printf_common+0x96>
 800c7e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c7e8:	6822      	ldr	r2, [r4, #0]
 800c7ea:	3b00      	subs	r3, #0
 800c7ec:	bf18      	it	ne
 800c7ee:	2301      	movne	r3, #1
 800c7f0:	0692      	lsls	r2, r2, #26
 800c7f2:	d42b      	bmi.n	800c84c <_printf_common+0xb0>
 800c7f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c7f8:	4641      	mov	r1, r8
 800c7fa:	4638      	mov	r0, r7
 800c7fc:	47c8      	blx	r9
 800c7fe:	3001      	adds	r0, #1
 800c800:	d01e      	beq.n	800c840 <_printf_common+0xa4>
 800c802:	6823      	ldr	r3, [r4, #0]
 800c804:	6922      	ldr	r2, [r4, #16]
 800c806:	f003 0306 	and.w	r3, r3, #6
 800c80a:	2b04      	cmp	r3, #4
 800c80c:	bf02      	ittt	eq
 800c80e:	68e5      	ldreq	r5, [r4, #12]
 800c810:	6833      	ldreq	r3, [r6, #0]
 800c812:	1aed      	subeq	r5, r5, r3
 800c814:	68a3      	ldr	r3, [r4, #8]
 800c816:	bf0c      	ite	eq
 800c818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c81c:	2500      	movne	r5, #0
 800c81e:	4293      	cmp	r3, r2
 800c820:	bfc4      	itt	gt
 800c822:	1a9b      	subgt	r3, r3, r2
 800c824:	18ed      	addgt	r5, r5, r3
 800c826:	2600      	movs	r6, #0
 800c828:	341a      	adds	r4, #26
 800c82a:	42b5      	cmp	r5, r6
 800c82c:	d11a      	bne.n	800c864 <_printf_common+0xc8>
 800c82e:	2000      	movs	r0, #0
 800c830:	e008      	b.n	800c844 <_printf_common+0xa8>
 800c832:	2301      	movs	r3, #1
 800c834:	4652      	mov	r2, sl
 800c836:	4641      	mov	r1, r8
 800c838:	4638      	mov	r0, r7
 800c83a:	47c8      	blx	r9
 800c83c:	3001      	adds	r0, #1
 800c83e:	d103      	bne.n	800c848 <_printf_common+0xac>
 800c840:	f04f 30ff 	mov.w	r0, #4294967295
 800c844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c848:	3501      	adds	r5, #1
 800c84a:	e7c6      	b.n	800c7da <_printf_common+0x3e>
 800c84c:	18e1      	adds	r1, r4, r3
 800c84e:	1c5a      	adds	r2, r3, #1
 800c850:	2030      	movs	r0, #48	@ 0x30
 800c852:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c856:	4422      	add	r2, r4
 800c858:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c85c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c860:	3302      	adds	r3, #2
 800c862:	e7c7      	b.n	800c7f4 <_printf_common+0x58>
 800c864:	2301      	movs	r3, #1
 800c866:	4622      	mov	r2, r4
 800c868:	4641      	mov	r1, r8
 800c86a:	4638      	mov	r0, r7
 800c86c:	47c8      	blx	r9
 800c86e:	3001      	adds	r0, #1
 800c870:	d0e6      	beq.n	800c840 <_printf_common+0xa4>
 800c872:	3601      	adds	r6, #1
 800c874:	e7d9      	b.n	800c82a <_printf_common+0x8e>
	...

0800c878 <_printf_i>:
 800c878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c87c:	7e0f      	ldrb	r7, [r1, #24]
 800c87e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c880:	2f78      	cmp	r7, #120	@ 0x78
 800c882:	4691      	mov	r9, r2
 800c884:	4680      	mov	r8, r0
 800c886:	460c      	mov	r4, r1
 800c888:	469a      	mov	sl, r3
 800c88a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c88e:	d807      	bhi.n	800c8a0 <_printf_i+0x28>
 800c890:	2f62      	cmp	r7, #98	@ 0x62
 800c892:	d80a      	bhi.n	800c8aa <_printf_i+0x32>
 800c894:	2f00      	cmp	r7, #0
 800c896:	f000 80d1 	beq.w	800ca3c <_printf_i+0x1c4>
 800c89a:	2f58      	cmp	r7, #88	@ 0x58
 800c89c:	f000 80b8 	beq.w	800ca10 <_printf_i+0x198>
 800c8a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c8a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c8a8:	e03a      	b.n	800c920 <_printf_i+0xa8>
 800c8aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c8ae:	2b15      	cmp	r3, #21
 800c8b0:	d8f6      	bhi.n	800c8a0 <_printf_i+0x28>
 800c8b2:	a101      	add	r1, pc, #4	@ (adr r1, 800c8b8 <_printf_i+0x40>)
 800c8b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c8b8:	0800c911 	.word	0x0800c911
 800c8bc:	0800c925 	.word	0x0800c925
 800c8c0:	0800c8a1 	.word	0x0800c8a1
 800c8c4:	0800c8a1 	.word	0x0800c8a1
 800c8c8:	0800c8a1 	.word	0x0800c8a1
 800c8cc:	0800c8a1 	.word	0x0800c8a1
 800c8d0:	0800c925 	.word	0x0800c925
 800c8d4:	0800c8a1 	.word	0x0800c8a1
 800c8d8:	0800c8a1 	.word	0x0800c8a1
 800c8dc:	0800c8a1 	.word	0x0800c8a1
 800c8e0:	0800c8a1 	.word	0x0800c8a1
 800c8e4:	0800ca23 	.word	0x0800ca23
 800c8e8:	0800c94f 	.word	0x0800c94f
 800c8ec:	0800c9dd 	.word	0x0800c9dd
 800c8f0:	0800c8a1 	.word	0x0800c8a1
 800c8f4:	0800c8a1 	.word	0x0800c8a1
 800c8f8:	0800ca45 	.word	0x0800ca45
 800c8fc:	0800c8a1 	.word	0x0800c8a1
 800c900:	0800c94f 	.word	0x0800c94f
 800c904:	0800c8a1 	.word	0x0800c8a1
 800c908:	0800c8a1 	.word	0x0800c8a1
 800c90c:	0800c9e5 	.word	0x0800c9e5
 800c910:	6833      	ldr	r3, [r6, #0]
 800c912:	1d1a      	adds	r2, r3, #4
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	6032      	str	r2, [r6, #0]
 800c918:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c91c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c920:	2301      	movs	r3, #1
 800c922:	e09c      	b.n	800ca5e <_printf_i+0x1e6>
 800c924:	6833      	ldr	r3, [r6, #0]
 800c926:	6820      	ldr	r0, [r4, #0]
 800c928:	1d19      	adds	r1, r3, #4
 800c92a:	6031      	str	r1, [r6, #0]
 800c92c:	0606      	lsls	r6, r0, #24
 800c92e:	d501      	bpl.n	800c934 <_printf_i+0xbc>
 800c930:	681d      	ldr	r5, [r3, #0]
 800c932:	e003      	b.n	800c93c <_printf_i+0xc4>
 800c934:	0645      	lsls	r5, r0, #25
 800c936:	d5fb      	bpl.n	800c930 <_printf_i+0xb8>
 800c938:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c93c:	2d00      	cmp	r5, #0
 800c93e:	da03      	bge.n	800c948 <_printf_i+0xd0>
 800c940:	232d      	movs	r3, #45	@ 0x2d
 800c942:	426d      	negs	r5, r5
 800c944:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c948:	4858      	ldr	r0, [pc, #352]	@ (800caac <_printf_i+0x234>)
 800c94a:	230a      	movs	r3, #10
 800c94c:	e011      	b.n	800c972 <_printf_i+0xfa>
 800c94e:	6821      	ldr	r1, [r4, #0]
 800c950:	6833      	ldr	r3, [r6, #0]
 800c952:	0608      	lsls	r0, r1, #24
 800c954:	f853 5b04 	ldr.w	r5, [r3], #4
 800c958:	d402      	bmi.n	800c960 <_printf_i+0xe8>
 800c95a:	0649      	lsls	r1, r1, #25
 800c95c:	bf48      	it	mi
 800c95e:	b2ad      	uxthmi	r5, r5
 800c960:	2f6f      	cmp	r7, #111	@ 0x6f
 800c962:	4852      	ldr	r0, [pc, #328]	@ (800caac <_printf_i+0x234>)
 800c964:	6033      	str	r3, [r6, #0]
 800c966:	bf14      	ite	ne
 800c968:	230a      	movne	r3, #10
 800c96a:	2308      	moveq	r3, #8
 800c96c:	2100      	movs	r1, #0
 800c96e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c972:	6866      	ldr	r6, [r4, #4]
 800c974:	60a6      	str	r6, [r4, #8]
 800c976:	2e00      	cmp	r6, #0
 800c978:	db05      	blt.n	800c986 <_printf_i+0x10e>
 800c97a:	6821      	ldr	r1, [r4, #0]
 800c97c:	432e      	orrs	r6, r5
 800c97e:	f021 0104 	bic.w	r1, r1, #4
 800c982:	6021      	str	r1, [r4, #0]
 800c984:	d04b      	beq.n	800ca1e <_printf_i+0x1a6>
 800c986:	4616      	mov	r6, r2
 800c988:	fbb5 f1f3 	udiv	r1, r5, r3
 800c98c:	fb03 5711 	mls	r7, r3, r1, r5
 800c990:	5dc7      	ldrb	r7, [r0, r7]
 800c992:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c996:	462f      	mov	r7, r5
 800c998:	42bb      	cmp	r3, r7
 800c99a:	460d      	mov	r5, r1
 800c99c:	d9f4      	bls.n	800c988 <_printf_i+0x110>
 800c99e:	2b08      	cmp	r3, #8
 800c9a0:	d10b      	bne.n	800c9ba <_printf_i+0x142>
 800c9a2:	6823      	ldr	r3, [r4, #0]
 800c9a4:	07df      	lsls	r7, r3, #31
 800c9a6:	d508      	bpl.n	800c9ba <_printf_i+0x142>
 800c9a8:	6923      	ldr	r3, [r4, #16]
 800c9aa:	6861      	ldr	r1, [r4, #4]
 800c9ac:	4299      	cmp	r1, r3
 800c9ae:	bfde      	ittt	le
 800c9b0:	2330      	movle	r3, #48	@ 0x30
 800c9b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c9b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c9ba:	1b92      	subs	r2, r2, r6
 800c9bc:	6122      	str	r2, [r4, #16]
 800c9be:	f8cd a000 	str.w	sl, [sp]
 800c9c2:	464b      	mov	r3, r9
 800c9c4:	aa03      	add	r2, sp, #12
 800c9c6:	4621      	mov	r1, r4
 800c9c8:	4640      	mov	r0, r8
 800c9ca:	f7ff fee7 	bl	800c79c <_printf_common>
 800c9ce:	3001      	adds	r0, #1
 800c9d0:	d14a      	bne.n	800ca68 <_printf_i+0x1f0>
 800c9d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d6:	b004      	add	sp, #16
 800c9d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9dc:	6823      	ldr	r3, [r4, #0]
 800c9de:	f043 0320 	orr.w	r3, r3, #32
 800c9e2:	6023      	str	r3, [r4, #0]
 800c9e4:	4832      	ldr	r0, [pc, #200]	@ (800cab0 <_printf_i+0x238>)
 800c9e6:	2778      	movs	r7, #120	@ 0x78
 800c9e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c9ec:	6823      	ldr	r3, [r4, #0]
 800c9ee:	6831      	ldr	r1, [r6, #0]
 800c9f0:	061f      	lsls	r7, r3, #24
 800c9f2:	f851 5b04 	ldr.w	r5, [r1], #4
 800c9f6:	d402      	bmi.n	800c9fe <_printf_i+0x186>
 800c9f8:	065f      	lsls	r7, r3, #25
 800c9fa:	bf48      	it	mi
 800c9fc:	b2ad      	uxthmi	r5, r5
 800c9fe:	6031      	str	r1, [r6, #0]
 800ca00:	07d9      	lsls	r1, r3, #31
 800ca02:	bf44      	itt	mi
 800ca04:	f043 0320 	orrmi.w	r3, r3, #32
 800ca08:	6023      	strmi	r3, [r4, #0]
 800ca0a:	b11d      	cbz	r5, 800ca14 <_printf_i+0x19c>
 800ca0c:	2310      	movs	r3, #16
 800ca0e:	e7ad      	b.n	800c96c <_printf_i+0xf4>
 800ca10:	4826      	ldr	r0, [pc, #152]	@ (800caac <_printf_i+0x234>)
 800ca12:	e7e9      	b.n	800c9e8 <_printf_i+0x170>
 800ca14:	6823      	ldr	r3, [r4, #0]
 800ca16:	f023 0320 	bic.w	r3, r3, #32
 800ca1a:	6023      	str	r3, [r4, #0]
 800ca1c:	e7f6      	b.n	800ca0c <_printf_i+0x194>
 800ca1e:	4616      	mov	r6, r2
 800ca20:	e7bd      	b.n	800c99e <_printf_i+0x126>
 800ca22:	6833      	ldr	r3, [r6, #0]
 800ca24:	6825      	ldr	r5, [r4, #0]
 800ca26:	6961      	ldr	r1, [r4, #20]
 800ca28:	1d18      	adds	r0, r3, #4
 800ca2a:	6030      	str	r0, [r6, #0]
 800ca2c:	062e      	lsls	r6, r5, #24
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	d501      	bpl.n	800ca36 <_printf_i+0x1be>
 800ca32:	6019      	str	r1, [r3, #0]
 800ca34:	e002      	b.n	800ca3c <_printf_i+0x1c4>
 800ca36:	0668      	lsls	r0, r5, #25
 800ca38:	d5fb      	bpl.n	800ca32 <_printf_i+0x1ba>
 800ca3a:	8019      	strh	r1, [r3, #0]
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	6123      	str	r3, [r4, #16]
 800ca40:	4616      	mov	r6, r2
 800ca42:	e7bc      	b.n	800c9be <_printf_i+0x146>
 800ca44:	6833      	ldr	r3, [r6, #0]
 800ca46:	1d1a      	adds	r2, r3, #4
 800ca48:	6032      	str	r2, [r6, #0]
 800ca4a:	681e      	ldr	r6, [r3, #0]
 800ca4c:	6862      	ldr	r2, [r4, #4]
 800ca4e:	2100      	movs	r1, #0
 800ca50:	4630      	mov	r0, r6
 800ca52:	f7f3 fbbd 	bl	80001d0 <memchr>
 800ca56:	b108      	cbz	r0, 800ca5c <_printf_i+0x1e4>
 800ca58:	1b80      	subs	r0, r0, r6
 800ca5a:	6060      	str	r0, [r4, #4]
 800ca5c:	6863      	ldr	r3, [r4, #4]
 800ca5e:	6123      	str	r3, [r4, #16]
 800ca60:	2300      	movs	r3, #0
 800ca62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca66:	e7aa      	b.n	800c9be <_printf_i+0x146>
 800ca68:	6923      	ldr	r3, [r4, #16]
 800ca6a:	4632      	mov	r2, r6
 800ca6c:	4649      	mov	r1, r9
 800ca6e:	4640      	mov	r0, r8
 800ca70:	47d0      	blx	sl
 800ca72:	3001      	adds	r0, #1
 800ca74:	d0ad      	beq.n	800c9d2 <_printf_i+0x15a>
 800ca76:	6823      	ldr	r3, [r4, #0]
 800ca78:	079b      	lsls	r3, r3, #30
 800ca7a:	d413      	bmi.n	800caa4 <_printf_i+0x22c>
 800ca7c:	68e0      	ldr	r0, [r4, #12]
 800ca7e:	9b03      	ldr	r3, [sp, #12]
 800ca80:	4298      	cmp	r0, r3
 800ca82:	bfb8      	it	lt
 800ca84:	4618      	movlt	r0, r3
 800ca86:	e7a6      	b.n	800c9d6 <_printf_i+0x15e>
 800ca88:	2301      	movs	r3, #1
 800ca8a:	4632      	mov	r2, r6
 800ca8c:	4649      	mov	r1, r9
 800ca8e:	4640      	mov	r0, r8
 800ca90:	47d0      	blx	sl
 800ca92:	3001      	adds	r0, #1
 800ca94:	d09d      	beq.n	800c9d2 <_printf_i+0x15a>
 800ca96:	3501      	adds	r5, #1
 800ca98:	68e3      	ldr	r3, [r4, #12]
 800ca9a:	9903      	ldr	r1, [sp, #12]
 800ca9c:	1a5b      	subs	r3, r3, r1
 800ca9e:	42ab      	cmp	r3, r5
 800caa0:	dcf2      	bgt.n	800ca88 <_printf_i+0x210>
 800caa2:	e7eb      	b.n	800ca7c <_printf_i+0x204>
 800caa4:	2500      	movs	r5, #0
 800caa6:	f104 0619 	add.w	r6, r4, #25
 800caaa:	e7f5      	b.n	800ca98 <_printf_i+0x220>
 800caac:	0800ea82 	.word	0x0800ea82
 800cab0:	0800ea93 	.word	0x0800ea93

0800cab4 <std>:
 800cab4:	2300      	movs	r3, #0
 800cab6:	b510      	push	{r4, lr}
 800cab8:	4604      	mov	r4, r0
 800caba:	e9c0 3300 	strd	r3, r3, [r0]
 800cabe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cac2:	6083      	str	r3, [r0, #8]
 800cac4:	8181      	strh	r1, [r0, #12]
 800cac6:	6643      	str	r3, [r0, #100]	@ 0x64
 800cac8:	81c2      	strh	r2, [r0, #14]
 800caca:	6183      	str	r3, [r0, #24]
 800cacc:	4619      	mov	r1, r3
 800cace:	2208      	movs	r2, #8
 800cad0:	305c      	adds	r0, #92	@ 0x5c
 800cad2:	f000 f906 	bl	800cce2 <memset>
 800cad6:	4b0d      	ldr	r3, [pc, #52]	@ (800cb0c <std+0x58>)
 800cad8:	6263      	str	r3, [r4, #36]	@ 0x24
 800cada:	4b0d      	ldr	r3, [pc, #52]	@ (800cb10 <std+0x5c>)
 800cadc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cade:	4b0d      	ldr	r3, [pc, #52]	@ (800cb14 <std+0x60>)
 800cae0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cae2:	4b0d      	ldr	r3, [pc, #52]	@ (800cb18 <std+0x64>)
 800cae4:	6323      	str	r3, [r4, #48]	@ 0x30
 800cae6:	4b0d      	ldr	r3, [pc, #52]	@ (800cb1c <std+0x68>)
 800cae8:	6224      	str	r4, [r4, #32]
 800caea:	429c      	cmp	r4, r3
 800caec:	d006      	beq.n	800cafc <std+0x48>
 800caee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800caf2:	4294      	cmp	r4, r2
 800caf4:	d002      	beq.n	800cafc <std+0x48>
 800caf6:	33d0      	adds	r3, #208	@ 0xd0
 800caf8:	429c      	cmp	r4, r3
 800cafa:	d105      	bne.n	800cb08 <std+0x54>
 800cafc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cb00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb04:	f000 b97a 	b.w	800cdfc <__retarget_lock_init_recursive>
 800cb08:	bd10      	pop	{r4, pc}
 800cb0a:	bf00      	nop
 800cb0c:	0800cc5d 	.word	0x0800cc5d
 800cb10:	0800cc7f 	.word	0x0800cc7f
 800cb14:	0800ccb7 	.word	0x0800ccb7
 800cb18:	0800ccdb 	.word	0x0800ccdb
 800cb1c:	20002180 	.word	0x20002180

0800cb20 <stdio_exit_handler>:
 800cb20:	4a02      	ldr	r2, [pc, #8]	@ (800cb2c <stdio_exit_handler+0xc>)
 800cb22:	4903      	ldr	r1, [pc, #12]	@ (800cb30 <stdio_exit_handler+0x10>)
 800cb24:	4803      	ldr	r0, [pc, #12]	@ (800cb34 <stdio_exit_handler+0x14>)
 800cb26:	f000 b87b 	b.w	800cc20 <_fwalk_sglue>
 800cb2a:	bf00      	nop
 800cb2c:	200000fc 	.word	0x200000fc
 800cb30:	0800e5d5 	.word	0x0800e5d5
 800cb34:	2000010c 	.word	0x2000010c

0800cb38 <cleanup_stdio>:
 800cb38:	6841      	ldr	r1, [r0, #4]
 800cb3a:	4b0c      	ldr	r3, [pc, #48]	@ (800cb6c <cleanup_stdio+0x34>)
 800cb3c:	4299      	cmp	r1, r3
 800cb3e:	b510      	push	{r4, lr}
 800cb40:	4604      	mov	r4, r0
 800cb42:	d001      	beq.n	800cb48 <cleanup_stdio+0x10>
 800cb44:	f001 fd46 	bl	800e5d4 <_fflush_r>
 800cb48:	68a1      	ldr	r1, [r4, #8]
 800cb4a:	4b09      	ldr	r3, [pc, #36]	@ (800cb70 <cleanup_stdio+0x38>)
 800cb4c:	4299      	cmp	r1, r3
 800cb4e:	d002      	beq.n	800cb56 <cleanup_stdio+0x1e>
 800cb50:	4620      	mov	r0, r4
 800cb52:	f001 fd3f 	bl	800e5d4 <_fflush_r>
 800cb56:	68e1      	ldr	r1, [r4, #12]
 800cb58:	4b06      	ldr	r3, [pc, #24]	@ (800cb74 <cleanup_stdio+0x3c>)
 800cb5a:	4299      	cmp	r1, r3
 800cb5c:	d004      	beq.n	800cb68 <cleanup_stdio+0x30>
 800cb5e:	4620      	mov	r0, r4
 800cb60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb64:	f001 bd36 	b.w	800e5d4 <_fflush_r>
 800cb68:	bd10      	pop	{r4, pc}
 800cb6a:	bf00      	nop
 800cb6c:	20002180 	.word	0x20002180
 800cb70:	200021e8 	.word	0x200021e8
 800cb74:	20002250 	.word	0x20002250

0800cb78 <global_stdio_init.part.0>:
 800cb78:	b510      	push	{r4, lr}
 800cb7a:	4b0b      	ldr	r3, [pc, #44]	@ (800cba8 <global_stdio_init.part.0+0x30>)
 800cb7c:	4c0b      	ldr	r4, [pc, #44]	@ (800cbac <global_stdio_init.part.0+0x34>)
 800cb7e:	4a0c      	ldr	r2, [pc, #48]	@ (800cbb0 <global_stdio_init.part.0+0x38>)
 800cb80:	601a      	str	r2, [r3, #0]
 800cb82:	4620      	mov	r0, r4
 800cb84:	2200      	movs	r2, #0
 800cb86:	2104      	movs	r1, #4
 800cb88:	f7ff ff94 	bl	800cab4 <std>
 800cb8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cb90:	2201      	movs	r2, #1
 800cb92:	2109      	movs	r1, #9
 800cb94:	f7ff ff8e 	bl	800cab4 <std>
 800cb98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cb9c:	2202      	movs	r2, #2
 800cb9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cba2:	2112      	movs	r1, #18
 800cba4:	f7ff bf86 	b.w	800cab4 <std>
 800cba8:	200022b8 	.word	0x200022b8
 800cbac:	20002180 	.word	0x20002180
 800cbb0:	0800cb21 	.word	0x0800cb21

0800cbb4 <__sfp_lock_acquire>:
 800cbb4:	4801      	ldr	r0, [pc, #4]	@ (800cbbc <__sfp_lock_acquire+0x8>)
 800cbb6:	f000 b922 	b.w	800cdfe <__retarget_lock_acquire_recursive>
 800cbba:	bf00      	nop
 800cbbc:	200022c1 	.word	0x200022c1

0800cbc0 <__sfp_lock_release>:
 800cbc0:	4801      	ldr	r0, [pc, #4]	@ (800cbc8 <__sfp_lock_release+0x8>)
 800cbc2:	f000 b91d 	b.w	800ce00 <__retarget_lock_release_recursive>
 800cbc6:	bf00      	nop
 800cbc8:	200022c1 	.word	0x200022c1

0800cbcc <__sinit>:
 800cbcc:	b510      	push	{r4, lr}
 800cbce:	4604      	mov	r4, r0
 800cbd0:	f7ff fff0 	bl	800cbb4 <__sfp_lock_acquire>
 800cbd4:	6a23      	ldr	r3, [r4, #32]
 800cbd6:	b11b      	cbz	r3, 800cbe0 <__sinit+0x14>
 800cbd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbdc:	f7ff bff0 	b.w	800cbc0 <__sfp_lock_release>
 800cbe0:	4b04      	ldr	r3, [pc, #16]	@ (800cbf4 <__sinit+0x28>)
 800cbe2:	6223      	str	r3, [r4, #32]
 800cbe4:	4b04      	ldr	r3, [pc, #16]	@ (800cbf8 <__sinit+0x2c>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d1f5      	bne.n	800cbd8 <__sinit+0xc>
 800cbec:	f7ff ffc4 	bl	800cb78 <global_stdio_init.part.0>
 800cbf0:	e7f2      	b.n	800cbd8 <__sinit+0xc>
 800cbf2:	bf00      	nop
 800cbf4:	0800cb39 	.word	0x0800cb39
 800cbf8:	200022b8 	.word	0x200022b8

0800cbfc <fiprintf>:
 800cbfc:	b40e      	push	{r1, r2, r3}
 800cbfe:	b503      	push	{r0, r1, lr}
 800cc00:	4601      	mov	r1, r0
 800cc02:	ab03      	add	r3, sp, #12
 800cc04:	4805      	ldr	r0, [pc, #20]	@ (800cc1c <fiprintf+0x20>)
 800cc06:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc0a:	6800      	ldr	r0, [r0, #0]
 800cc0c:	9301      	str	r3, [sp, #4]
 800cc0e:	f001 fb45 	bl	800e29c <_vfiprintf_r>
 800cc12:	b002      	add	sp, #8
 800cc14:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc18:	b003      	add	sp, #12
 800cc1a:	4770      	bx	lr
 800cc1c:	20000108 	.word	0x20000108

0800cc20 <_fwalk_sglue>:
 800cc20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc24:	4607      	mov	r7, r0
 800cc26:	4688      	mov	r8, r1
 800cc28:	4614      	mov	r4, r2
 800cc2a:	2600      	movs	r6, #0
 800cc2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc30:	f1b9 0901 	subs.w	r9, r9, #1
 800cc34:	d505      	bpl.n	800cc42 <_fwalk_sglue+0x22>
 800cc36:	6824      	ldr	r4, [r4, #0]
 800cc38:	2c00      	cmp	r4, #0
 800cc3a:	d1f7      	bne.n	800cc2c <_fwalk_sglue+0xc>
 800cc3c:	4630      	mov	r0, r6
 800cc3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc42:	89ab      	ldrh	r3, [r5, #12]
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d907      	bls.n	800cc58 <_fwalk_sglue+0x38>
 800cc48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	d003      	beq.n	800cc58 <_fwalk_sglue+0x38>
 800cc50:	4629      	mov	r1, r5
 800cc52:	4638      	mov	r0, r7
 800cc54:	47c0      	blx	r8
 800cc56:	4306      	orrs	r6, r0
 800cc58:	3568      	adds	r5, #104	@ 0x68
 800cc5a:	e7e9      	b.n	800cc30 <_fwalk_sglue+0x10>

0800cc5c <__sread>:
 800cc5c:	b510      	push	{r4, lr}
 800cc5e:	460c      	mov	r4, r1
 800cc60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc64:	f000 f86c 	bl	800cd40 <_read_r>
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	bfab      	itete	ge
 800cc6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cc6e:	89a3      	ldrhlt	r3, [r4, #12]
 800cc70:	181b      	addge	r3, r3, r0
 800cc72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cc76:	bfac      	ite	ge
 800cc78:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cc7a:	81a3      	strhlt	r3, [r4, #12]
 800cc7c:	bd10      	pop	{r4, pc}

0800cc7e <__swrite>:
 800cc7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc82:	461f      	mov	r7, r3
 800cc84:	898b      	ldrh	r3, [r1, #12]
 800cc86:	05db      	lsls	r3, r3, #23
 800cc88:	4605      	mov	r5, r0
 800cc8a:	460c      	mov	r4, r1
 800cc8c:	4616      	mov	r6, r2
 800cc8e:	d505      	bpl.n	800cc9c <__swrite+0x1e>
 800cc90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc94:	2302      	movs	r3, #2
 800cc96:	2200      	movs	r2, #0
 800cc98:	f000 f840 	bl	800cd1c <_lseek_r>
 800cc9c:	89a3      	ldrh	r3, [r4, #12]
 800cc9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cca2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cca6:	81a3      	strh	r3, [r4, #12]
 800cca8:	4632      	mov	r2, r6
 800ccaa:	463b      	mov	r3, r7
 800ccac:	4628      	mov	r0, r5
 800ccae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccb2:	f000 b867 	b.w	800cd84 <_write_r>

0800ccb6 <__sseek>:
 800ccb6:	b510      	push	{r4, lr}
 800ccb8:	460c      	mov	r4, r1
 800ccba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccbe:	f000 f82d 	bl	800cd1c <_lseek_r>
 800ccc2:	1c43      	adds	r3, r0, #1
 800ccc4:	89a3      	ldrh	r3, [r4, #12]
 800ccc6:	bf15      	itete	ne
 800ccc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ccca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ccce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ccd2:	81a3      	strheq	r3, [r4, #12]
 800ccd4:	bf18      	it	ne
 800ccd6:	81a3      	strhne	r3, [r4, #12]
 800ccd8:	bd10      	pop	{r4, pc}

0800ccda <__sclose>:
 800ccda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccde:	f000 b80d 	b.w	800ccfc <_close_r>

0800cce2 <memset>:
 800cce2:	4402      	add	r2, r0
 800cce4:	4603      	mov	r3, r0
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d100      	bne.n	800ccec <memset+0xa>
 800ccea:	4770      	bx	lr
 800ccec:	f803 1b01 	strb.w	r1, [r3], #1
 800ccf0:	e7f9      	b.n	800cce6 <memset+0x4>
	...

0800ccf4 <_localeconv_r>:
 800ccf4:	4800      	ldr	r0, [pc, #0]	@ (800ccf8 <_localeconv_r+0x4>)
 800ccf6:	4770      	bx	lr
 800ccf8:	20000248 	.word	0x20000248

0800ccfc <_close_r>:
 800ccfc:	b538      	push	{r3, r4, r5, lr}
 800ccfe:	4d06      	ldr	r5, [pc, #24]	@ (800cd18 <_close_r+0x1c>)
 800cd00:	2300      	movs	r3, #0
 800cd02:	4604      	mov	r4, r0
 800cd04:	4608      	mov	r0, r1
 800cd06:	602b      	str	r3, [r5, #0]
 800cd08:	f7f6 ff0e 	bl	8003b28 <_close>
 800cd0c:	1c43      	adds	r3, r0, #1
 800cd0e:	d102      	bne.n	800cd16 <_close_r+0x1a>
 800cd10:	682b      	ldr	r3, [r5, #0]
 800cd12:	b103      	cbz	r3, 800cd16 <_close_r+0x1a>
 800cd14:	6023      	str	r3, [r4, #0]
 800cd16:	bd38      	pop	{r3, r4, r5, pc}
 800cd18:	200022bc 	.word	0x200022bc

0800cd1c <_lseek_r>:
 800cd1c:	b538      	push	{r3, r4, r5, lr}
 800cd1e:	4d07      	ldr	r5, [pc, #28]	@ (800cd3c <_lseek_r+0x20>)
 800cd20:	4604      	mov	r4, r0
 800cd22:	4608      	mov	r0, r1
 800cd24:	4611      	mov	r1, r2
 800cd26:	2200      	movs	r2, #0
 800cd28:	602a      	str	r2, [r5, #0]
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	f7f6 ff23 	bl	8003b76 <_lseek>
 800cd30:	1c43      	adds	r3, r0, #1
 800cd32:	d102      	bne.n	800cd3a <_lseek_r+0x1e>
 800cd34:	682b      	ldr	r3, [r5, #0]
 800cd36:	b103      	cbz	r3, 800cd3a <_lseek_r+0x1e>
 800cd38:	6023      	str	r3, [r4, #0]
 800cd3a:	bd38      	pop	{r3, r4, r5, pc}
 800cd3c:	200022bc 	.word	0x200022bc

0800cd40 <_read_r>:
 800cd40:	b538      	push	{r3, r4, r5, lr}
 800cd42:	4d07      	ldr	r5, [pc, #28]	@ (800cd60 <_read_r+0x20>)
 800cd44:	4604      	mov	r4, r0
 800cd46:	4608      	mov	r0, r1
 800cd48:	4611      	mov	r1, r2
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	602a      	str	r2, [r5, #0]
 800cd4e:	461a      	mov	r2, r3
 800cd50:	f7f6 fecd 	bl	8003aee <_read>
 800cd54:	1c43      	adds	r3, r0, #1
 800cd56:	d102      	bne.n	800cd5e <_read_r+0x1e>
 800cd58:	682b      	ldr	r3, [r5, #0]
 800cd5a:	b103      	cbz	r3, 800cd5e <_read_r+0x1e>
 800cd5c:	6023      	str	r3, [r4, #0]
 800cd5e:	bd38      	pop	{r3, r4, r5, pc}
 800cd60:	200022bc 	.word	0x200022bc

0800cd64 <_sbrk_r>:
 800cd64:	b538      	push	{r3, r4, r5, lr}
 800cd66:	4d06      	ldr	r5, [pc, #24]	@ (800cd80 <_sbrk_r+0x1c>)
 800cd68:	2300      	movs	r3, #0
 800cd6a:	4604      	mov	r4, r0
 800cd6c:	4608      	mov	r0, r1
 800cd6e:	602b      	str	r3, [r5, #0]
 800cd70:	f7f6 ff0e 	bl	8003b90 <_sbrk>
 800cd74:	1c43      	adds	r3, r0, #1
 800cd76:	d102      	bne.n	800cd7e <_sbrk_r+0x1a>
 800cd78:	682b      	ldr	r3, [r5, #0]
 800cd7a:	b103      	cbz	r3, 800cd7e <_sbrk_r+0x1a>
 800cd7c:	6023      	str	r3, [r4, #0]
 800cd7e:	bd38      	pop	{r3, r4, r5, pc}
 800cd80:	200022bc 	.word	0x200022bc

0800cd84 <_write_r>:
 800cd84:	b538      	push	{r3, r4, r5, lr}
 800cd86:	4d07      	ldr	r5, [pc, #28]	@ (800cda4 <_write_r+0x20>)
 800cd88:	4604      	mov	r4, r0
 800cd8a:	4608      	mov	r0, r1
 800cd8c:	4611      	mov	r1, r2
 800cd8e:	2200      	movs	r2, #0
 800cd90:	602a      	str	r2, [r5, #0]
 800cd92:	461a      	mov	r2, r3
 800cd94:	f7f5 fe46 	bl	8002a24 <_write>
 800cd98:	1c43      	adds	r3, r0, #1
 800cd9a:	d102      	bne.n	800cda2 <_write_r+0x1e>
 800cd9c:	682b      	ldr	r3, [r5, #0]
 800cd9e:	b103      	cbz	r3, 800cda2 <_write_r+0x1e>
 800cda0:	6023      	str	r3, [r4, #0]
 800cda2:	bd38      	pop	{r3, r4, r5, pc}
 800cda4:	200022bc 	.word	0x200022bc

0800cda8 <__errno>:
 800cda8:	4b01      	ldr	r3, [pc, #4]	@ (800cdb0 <__errno+0x8>)
 800cdaa:	6818      	ldr	r0, [r3, #0]
 800cdac:	4770      	bx	lr
 800cdae:	bf00      	nop
 800cdb0:	20000108 	.word	0x20000108

0800cdb4 <__libc_init_array>:
 800cdb4:	b570      	push	{r4, r5, r6, lr}
 800cdb6:	4d0d      	ldr	r5, [pc, #52]	@ (800cdec <__libc_init_array+0x38>)
 800cdb8:	4c0d      	ldr	r4, [pc, #52]	@ (800cdf0 <__libc_init_array+0x3c>)
 800cdba:	1b64      	subs	r4, r4, r5
 800cdbc:	10a4      	asrs	r4, r4, #2
 800cdbe:	2600      	movs	r6, #0
 800cdc0:	42a6      	cmp	r6, r4
 800cdc2:	d109      	bne.n	800cdd8 <__libc_init_array+0x24>
 800cdc4:	4d0b      	ldr	r5, [pc, #44]	@ (800cdf4 <__libc_init_array+0x40>)
 800cdc6:	4c0c      	ldr	r4, [pc, #48]	@ (800cdf8 <__libc_init_array+0x44>)
 800cdc8:	f001 fdca 	bl	800e960 <_init>
 800cdcc:	1b64      	subs	r4, r4, r5
 800cdce:	10a4      	asrs	r4, r4, #2
 800cdd0:	2600      	movs	r6, #0
 800cdd2:	42a6      	cmp	r6, r4
 800cdd4:	d105      	bne.n	800cde2 <__libc_init_array+0x2e>
 800cdd6:	bd70      	pop	{r4, r5, r6, pc}
 800cdd8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cddc:	4798      	blx	r3
 800cdde:	3601      	adds	r6, #1
 800cde0:	e7ee      	b.n	800cdc0 <__libc_init_array+0xc>
 800cde2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cde6:	4798      	blx	r3
 800cde8:	3601      	adds	r6, #1
 800cdea:	e7f2      	b.n	800cdd2 <__libc_init_array+0x1e>
 800cdec:	0800edb4 	.word	0x0800edb4
 800cdf0:	0800edb4 	.word	0x0800edb4
 800cdf4:	0800edb4 	.word	0x0800edb4
 800cdf8:	0800edb8 	.word	0x0800edb8

0800cdfc <__retarget_lock_init_recursive>:
 800cdfc:	4770      	bx	lr

0800cdfe <__retarget_lock_acquire_recursive>:
 800cdfe:	4770      	bx	lr

0800ce00 <__retarget_lock_release_recursive>:
 800ce00:	4770      	bx	lr

0800ce02 <abort>:
 800ce02:	b508      	push	{r3, lr}
 800ce04:	2006      	movs	r0, #6
 800ce06:	f001 fcc9 	bl	800e79c <raise>
 800ce0a:	2001      	movs	r0, #1
 800ce0c:	f7f6 fe64 	bl	8003ad8 <_exit>

0800ce10 <quorem>:
 800ce10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce14:	6903      	ldr	r3, [r0, #16]
 800ce16:	690c      	ldr	r4, [r1, #16]
 800ce18:	42a3      	cmp	r3, r4
 800ce1a:	4607      	mov	r7, r0
 800ce1c:	db7e      	blt.n	800cf1c <quorem+0x10c>
 800ce1e:	3c01      	subs	r4, #1
 800ce20:	f101 0814 	add.w	r8, r1, #20
 800ce24:	00a3      	lsls	r3, r4, #2
 800ce26:	f100 0514 	add.w	r5, r0, #20
 800ce2a:	9300      	str	r3, [sp, #0]
 800ce2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce30:	9301      	str	r3, [sp, #4]
 800ce32:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ce36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ce42:	fbb2 f6f3 	udiv	r6, r2, r3
 800ce46:	d32e      	bcc.n	800cea6 <quorem+0x96>
 800ce48:	f04f 0a00 	mov.w	sl, #0
 800ce4c:	46c4      	mov	ip, r8
 800ce4e:	46ae      	mov	lr, r5
 800ce50:	46d3      	mov	fp, sl
 800ce52:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ce56:	b298      	uxth	r0, r3
 800ce58:	fb06 a000 	mla	r0, r6, r0, sl
 800ce5c:	0c02      	lsrs	r2, r0, #16
 800ce5e:	0c1b      	lsrs	r3, r3, #16
 800ce60:	fb06 2303 	mla	r3, r6, r3, r2
 800ce64:	f8de 2000 	ldr.w	r2, [lr]
 800ce68:	b280      	uxth	r0, r0
 800ce6a:	b292      	uxth	r2, r2
 800ce6c:	1a12      	subs	r2, r2, r0
 800ce6e:	445a      	add	r2, fp
 800ce70:	f8de 0000 	ldr.w	r0, [lr]
 800ce74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce78:	b29b      	uxth	r3, r3
 800ce7a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ce7e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ce82:	b292      	uxth	r2, r2
 800ce84:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ce88:	45e1      	cmp	r9, ip
 800ce8a:	f84e 2b04 	str.w	r2, [lr], #4
 800ce8e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ce92:	d2de      	bcs.n	800ce52 <quorem+0x42>
 800ce94:	9b00      	ldr	r3, [sp, #0]
 800ce96:	58eb      	ldr	r3, [r5, r3]
 800ce98:	b92b      	cbnz	r3, 800cea6 <quorem+0x96>
 800ce9a:	9b01      	ldr	r3, [sp, #4]
 800ce9c:	3b04      	subs	r3, #4
 800ce9e:	429d      	cmp	r5, r3
 800cea0:	461a      	mov	r2, r3
 800cea2:	d32f      	bcc.n	800cf04 <quorem+0xf4>
 800cea4:	613c      	str	r4, [r7, #16]
 800cea6:	4638      	mov	r0, r7
 800cea8:	f001 f8c6 	bl	800e038 <__mcmp>
 800ceac:	2800      	cmp	r0, #0
 800ceae:	db25      	blt.n	800cefc <quorem+0xec>
 800ceb0:	4629      	mov	r1, r5
 800ceb2:	2000      	movs	r0, #0
 800ceb4:	f858 2b04 	ldr.w	r2, [r8], #4
 800ceb8:	f8d1 c000 	ldr.w	ip, [r1]
 800cebc:	fa1f fe82 	uxth.w	lr, r2
 800cec0:	fa1f f38c 	uxth.w	r3, ip
 800cec4:	eba3 030e 	sub.w	r3, r3, lr
 800cec8:	4403      	add	r3, r0
 800ceca:	0c12      	lsrs	r2, r2, #16
 800cecc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ced0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ced4:	b29b      	uxth	r3, r3
 800ced6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ceda:	45c1      	cmp	r9, r8
 800cedc:	f841 3b04 	str.w	r3, [r1], #4
 800cee0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cee4:	d2e6      	bcs.n	800ceb4 <quorem+0xa4>
 800cee6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ceea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ceee:	b922      	cbnz	r2, 800cefa <quorem+0xea>
 800cef0:	3b04      	subs	r3, #4
 800cef2:	429d      	cmp	r5, r3
 800cef4:	461a      	mov	r2, r3
 800cef6:	d30b      	bcc.n	800cf10 <quorem+0x100>
 800cef8:	613c      	str	r4, [r7, #16]
 800cefa:	3601      	adds	r6, #1
 800cefc:	4630      	mov	r0, r6
 800cefe:	b003      	add	sp, #12
 800cf00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf04:	6812      	ldr	r2, [r2, #0]
 800cf06:	3b04      	subs	r3, #4
 800cf08:	2a00      	cmp	r2, #0
 800cf0a:	d1cb      	bne.n	800cea4 <quorem+0x94>
 800cf0c:	3c01      	subs	r4, #1
 800cf0e:	e7c6      	b.n	800ce9e <quorem+0x8e>
 800cf10:	6812      	ldr	r2, [r2, #0]
 800cf12:	3b04      	subs	r3, #4
 800cf14:	2a00      	cmp	r2, #0
 800cf16:	d1ef      	bne.n	800cef8 <quorem+0xe8>
 800cf18:	3c01      	subs	r4, #1
 800cf1a:	e7ea      	b.n	800cef2 <quorem+0xe2>
 800cf1c:	2000      	movs	r0, #0
 800cf1e:	e7ee      	b.n	800cefe <quorem+0xee>

0800cf20 <_dtoa_r>:
 800cf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf24:	69c7      	ldr	r7, [r0, #28]
 800cf26:	b097      	sub	sp, #92	@ 0x5c
 800cf28:	ed8d 0b04 	vstr	d0, [sp, #16]
 800cf2c:	ec55 4b10 	vmov	r4, r5, d0
 800cf30:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800cf32:	9107      	str	r1, [sp, #28]
 800cf34:	4681      	mov	r9, r0
 800cf36:	920c      	str	r2, [sp, #48]	@ 0x30
 800cf38:	9311      	str	r3, [sp, #68]	@ 0x44
 800cf3a:	b97f      	cbnz	r7, 800cf5c <_dtoa_r+0x3c>
 800cf3c:	2010      	movs	r0, #16
 800cf3e:	f7ff f8ad 	bl	800c09c <malloc>
 800cf42:	4602      	mov	r2, r0
 800cf44:	f8c9 001c 	str.w	r0, [r9, #28]
 800cf48:	b920      	cbnz	r0, 800cf54 <_dtoa_r+0x34>
 800cf4a:	4ba9      	ldr	r3, [pc, #676]	@ (800d1f0 <_dtoa_r+0x2d0>)
 800cf4c:	21ef      	movs	r1, #239	@ 0xef
 800cf4e:	48a9      	ldr	r0, [pc, #676]	@ (800d1f4 <_dtoa_r+0x2d4>)
 800cf50:	f7ff f886 	bl	800c060 <__assert_func>
 800cf54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cf58:	6007      	str	r7, [r0, #0]
 800cf5a:	60c7      	str	r7, [r0, #12]
 800cf5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cf60:	6819      	ldr	r1, [r3, #0]
 800cf62:	b159      	cbz	r1, 800cf7c <_dtoa_r+0x5c>
 800cf64:	685a      	ldr	r2, [r3, #4]
 800cf66:	604a      	str	r2, [r1, #4]
 800cf68:	2301      	movs	r3, #1
 800cf6a:	4093      	lsls	r3, r2
 800cf6c:	608b      	str	r3, [r1, #8]
 800cf6e:	4648      	mov	r0, r9
 800cf70:	f000 fe30 	bl	800dbd4 <_Bfree>
 800cf74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	601a      	str	r2, [r3, #0]
 800cf7c:	1e2b      	subs	r3, r5, #0
 800cf7e:	bfb9      	ittee	lt
 800cf80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cf84:	9305      	strlt	r3, [sp, #20]
 800cf86:	2300      	movge	r3, #0
 800cf88:	6033      	strge	r3, [r6, #0]
 800cf8a:	9f05      	ldr	r7, [sp, #20]
 800cf8c:	4b9a      	ldr	r3, [pc, #616]	@ (800d1f8 <_dtoa_r+0x2d8>)
 800cf8e:	bfbc      	itt	lt
 800cf90:	2201      	movlt	r2, #1
 800cf92:	6032      	strlt	r2, [r6, #0]
 800cf94:	43bb      	bics	r3, r7
 800cf96:	d112      	bne.n	800cfbe <_dtoa_r+0x9e>
 800cf98:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cf9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cf9e:	6013      	str	r3, [r2, #0]
 800cfa0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cfa4:	4323      	orrs	r3, r4
 800cfa6:	f000 855a 	beq.w	800da5e <_dtoa_r+0xb3e>
 800cfaa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cfac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d20c <_dtoa_r+0x2ec>
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	f000 855c 	beq.w	800da6e <_dtoa_r+0xb4e>
 800cfb6:	f10a 0303 	add.w	r3, sl, #3
 800cfba:	f000 bd56 	b.w	800da6a <_dtoa_r+0xb4a>
 800cfbe:	ed9d 7b04 	vldr	d7, [sp, #16]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	ec51 0b17 	vmov	r0, r1, d7
 800cfc8:	2300      	movs	r3, #0
 800cfca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800cfce:	f7f3 fd7b 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfd2:	4680      	mov	r8, r0
 800cfd4:	b158      	cbz	r0, 800cfee <_dtoa_r+0xce>
 800cfd6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cfd8:	2301      	movs	r3, #1
 800cfda:	6013      	str	r3, [r2, #0]
 800cfdc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cfde:	b113      	cbz	r3, 800cfe6 <_dtoa_r+0xc6>
 800cfe0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800cfe2:	4b86      	ldr	r3, [pc, #536]	@ (800d1fc <_dtoa_r+0x2dc>)
 800cfe4:	6013      	str	r3, [r2, #0]
 800cfe6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d210 <_dtoa_r+0x2f0>
 800cfea:	f000 bd40 	b.w	800da6e <_dtoa_r+0xb4e>
 800cfee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800cff2:	aa14      	add	r2, sp, #80	@ 0x50
 800cff4:	a915      	add	r1, sp, #84	@ 0x54
 800cff6:	4648      	mov	r0, r9
 800cff8:	f001 f8ce 	bl	800e198 <__d2b>
 800cffc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d000:	9002      	str	r0, [sp, #8]
 800d002:	2e00      	cmp	r6, #0
 800d004:	d078      	beq.n	800d0f8 <_dtoa_r+0x1d8>
 800d006:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d008:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d00c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d010:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d014:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d018:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d01c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d020:	4619      	mov	r1, r3
 800d022:	2200      	movs	r2, #0
 800d024:	4b76      	ldr	r3, [pc, #472]	@ (800d200 <_dtoa_r+0x2e0>)
 800d026:	f7f3 f92f 	bl	8000288 <__aeabi_dsub>
 800d02a:	a36b      	add	r3, pc, #428	@ (adr r3, 800d1d8 <_dtoa_r+0x2b8>)
 800d02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d030:	f7f3 fae2 	bl	80005f8 <__aeabi_dmul>
 800d034:	a36a      	add	r3, pc, #424	@ (adr r3, 800d1e0 <_dtoa_r+0x2c0>)
 800d036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d03a:	f7f3 f927 	bl	800028c <__adddf3>
 800d03e:	4604      	mov	r4, r0
 800d040:	4630      	mov	r0, r6
 800d042:	460d      	mov	r5, r1
 800d044:	f7f3 fa6e 	bl	8000524 <__aeabi_i2d>
 800d048:	a367      	add	r3, pc, #412	@ (adr r3, 800d1e8 <_dtoa_r+0x2c8>)
 800d04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04e:	f7f3 fad3 	bl	80005f8 <__aeabi_dmul>
 800d052:	4602      	mov	r2, r0
 800d054:	460b      	mov	r3, r1
 800d056:	4620      	mov	r0, r4
 800d058:	4629      	mov	r1, r5
 800d05a:	f7f3 f917 	bl	800028c <__adddf3>
 800d05e:	4604      	mov	r4, r0
 800d060:	460d      	mov	r5, r1
 800d062:	f7f3 fd79 	bl	8000b58 <__aeabi_d2iz>
 800d066:	2200      	movs	r2, #0
 800d068:	4607      	mov	r7, r0
 800d06a:	2300      	movs	r3, #0
 800d06c:	4620      	mov	r0, r4
 800d06e:	4629      	mov	r1, r5
 800d070:	f7f3 fd34 	bl	8000adc <__aeabi_dcmplt>
 800d074:	b140      	cbz	r0, 800d088 <_dtoa_r+0x168>
 800d076:	4638      	mov	r0, r7
 800d078:	f7f3 fa54 	bl	8000524 <__aeabi_i2d>
 800d07c:	4622      	mov	r2, r4
 800d07e:	462b      	mov	r3, r5
 800d080:	f7f3 fd22 	bl	8000ac8 <__aeabi_dcmpeq>
 800d084:	b900      	cbnz	r0, 800d088 <_dtoa_r+0x168>
 800d086:	3f01      	subs	r7, #1
 800d088:	2f16      	cmp	r7, #22
 800d08a:	d852      	bhi.n	800d132 <_dtoa_r+0x212>
 800d08c:	4b5d      	ldr	r3, [pc, #372]	@ (800d204 <_dtoa_r+0x2e4>)
 800d08e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d096:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d09a:	f7f3 fd1f 	bl	8000adc <__aeabi_dcmplt>
 800d09e:	2800      	cmp	r0, #0
 800d0a0:	d049      	beq.n	800d136 <_dtoa_r+0x216>
 800d0a2:	3f01      	subs	r7, #1
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d0a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d0aa:	1b9b      	subs	r3, r3, r6
 800d0ac:	1e5a      	subs	r2, r3, #1
 800d0ae:	bf45      	ittet	mi
 800d0b0:	f1c3 0301 	rsbmi	r3, r3, #1
 800d0b4:	9300      	strmi	r3, [sp, #0]
 800d0b6:	2300      	movpl	r3, #0
 800d0b8:	2300      	movmi	r3, #0
 800d0ba:	9206      	str	r2, [sp, #24]
 800d0bc:	bf54      	ite	pl
 800d0be:	9300      	strpl	r3, [sp, #0]
 800d0c0:	9306      	strmi	r3, [sp, #24]
 800d0c2:	2f00      	cmp	r7, #0
 800d0c4:	db39      	blt.n	800d13a <_dtoa_r+0x21a>
 800d0c6:	9b06      	ldr	r3, [sp, #24]
 800d0c8:	970d      	str	r7, [sp, #52]	@ 0x34
 800d0ca:	443b      	add	r3, r7
 800d0cc:	9306      	str	r3, [sp, #24]
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	9308      	str	r3, [sp, #32]
 800d0d2:	9b07      	ldr	r3, [sp, #28]
 800d0d4:	2b09      	cmp	r3, #9
 800d0d6:	d863      	bhi.n	800d1a0 <_dtoa_r+0x280>
 800d0d8:	2b05      	cmp	r3, #5
 800d0da:	bfc4      	itt	gt
 800d0dc:	3b04      	subgt	r3, #4
 800d0de:	9307      	strgt	r3, [sp, #28]
 800d0e0:	9b07      	ldr	r3, [sp, #28]
 800d0e2:	f1a3 0302 	sub.w	r3, r3, #2
 800d0e6:	bfcc      	ite	gt
 800d0e8:	2400      	movgt	r4, #0
 800d0ea:	2401      	movle	r4, #1
 800d0ec:	2b03      	cmp	r3, #3
 800d0ee:	d863      	bhi.n	800d1b8 <_dtoa_r+0x298>
 800d0f0:	e8df f003 	tbb	[pc, r3]
 800d0f4:	2b375452 	.word	0x2b375452
 800d0f8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d0fc:	441e      	add	r6, r3
 800d0fe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d102:	2b20      	cmp	r3, #32
 800d104:	bfc1      	itttt	gt
 800d106:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d10a:	409f      	lslgt	r7, r3
 800d10c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d110:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d114:	bfd6      	itet	le
 800d116:	f1c3 0320 	rsble	r3, r3, #32
 800d11a:	ea47 0003 	orrgt.w	r0, r7, r3
 800d11e:	fa04 f003 	lslle.w	r0, r4, r3
 800d122:	f7f3 f9ef 	bl	8000504 <__aeabi_ui2d>
 800d126:	2201      	movs	r2, #1
 800d128:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d12c:	3e01      	subs	r6, #1
 800d12e:	9212      	str	r2, [sp, #72]	@ 0x48
 800d130:	e776      	b.n	800d020 <_dtoa_r+0x100>
 800d132:	2301      	movs	r3, #1
 800d134:	e7b7      	b.n	800d0a6 <_dtoa_r+0x186>
 800d136:	9010      	str	r0, [sp, #64]	@ 0x40
 800d138:	e7b6      	b.n	800d0a8 <_dtoa_r+0x188>
 800d13a:	9b00      	ldr	r3, [sp, #0]
 800d13c:	1bdb      	subs	r3, r3, r7
 800d13e:	9300      	str	r3, [sp, #0]
 800d140:	427b      	negs	r3, r7
 800d142:	9308      	str	r3, [sp, #32]
 800d144:	2300      	movs	r3, #0
 800d146:	930d      	str	r3, [sp, #52]	@ 0x34
 800d148:	e7c3      	b.n	800d0d2 <_dtoa_r+0x1b2>
 800d14a:	2301      	movs	r3, #1
 800d14c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d14e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d150:	eb07 0b03 	add.w	fp, r7, r3
 800d154:	f10b 0301 	add.w	r3, fp, #1
 800d158:	2b01      	cmp	r3, #1
 800d15a:	9303      	str	r3, [sp, #12]
 800d15c:	bfb8      	it	lt
 800d15e:	2301      	movlt	r3, #1
 800d160:	e006      	b.n	800d170 <_dtoa_r+0x250>
 800d162:	2301      	movs	r3, #1
 800d164:	9309      	str	r3, [sp, #36]	@ 0x24
 800d166:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d168:	2b00      	cmp	r3, #0
 800d16a:	dd28      	ble.n	800d1be <_dtoa_r+0x29e>
 800d16c:	469b      	mov	fp, r3
 800d16e:	9303      	str	r3, [sp, #12]
 800d170:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d174:	2100      	movs	r1, #0
 800d176:	2204      	movs	r2, #4
 800d178:	f102 0514 	add.w	r5, r2, #20
 800d17c:	429d      	cmp	r5, r3
 800d17e:	d926      	bls.n	800d1ce <_dtoa_r+0x2ae>
 800d180:	6041      	str	r1, [r0, #4]
 800d182:	4648      	mov	r0, r9
 800d184:	f000 fce6 	bl	800db54 <_Balloc>
 800d188:	4682      	mov	sl, r0
 800d18a:	2800      	cmp	r0, #0
 800d18c:	d142      	bne.n	800d214 <_dtoa_r+0x2f4>
 800d18e:	4b1e      	ldr	r3, [pc, #120]	@ (800d208 <_dtoa_r+0x2e8>)
 800d190:	4602      	mov	r2, r0
 800d192:	f240 11af 	movw	r1, #431	@ 0x1af
 800d196:	e6da      	b.n	800cf4e <_dtoa_r+0x2e>
 800d198:	2300      	movs	r3, #0
 800d19a:	e7e3      	b.n	800d164 <_dtoa_r+0x244>
 800d19c:	2300      	movs	r3, #0
 800d19e:	e7d5      	b.n	800d14c <_dtoa_r+0x22c>
 800d1a0:	2401      	movs	r4, #1
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	9307      	str	r3, [sp, #28]
 800d1a6:	9409      	str	r4, [sp, #36]	@ 0x24
 800d1a8:	f04f 3bff 	mov.w	fp, #4294967295
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	f8cd b00c 	str.w	fp, [sp, #12]
 800d1b2:	2312      	movs	r3, #18
 800d1b4:	920c      	str	r2, [sp, #48]	@ 0x30
 800d1b6:	e7db      	b.n	800d170 <_dtoa_r+0x250>
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1bc:	e7f4      	b.n	800d1a8 <_dtoa_r+0x288>
 800d1be:	f04f 0b01 	mov.w	fp, #1
 800d1c2:	f8cd b00c 	str.w	fp, [sp, #12]
 800d1c6:	465b      	mov	r3, fp
 800d1c8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d1cc:	e7d0      	b.n	800d170 <_dtoa_r+0x250>
 800d1ce:	3101      	adds	r1, #1
 800d1d0:	0052      	lsls	r2, r2, #1
 800d1d2:	e7d1      	b.n	800d178 <_dtoa_r+0x258>
 800d1d4:	f3af 8000 	nop.w
 800d1d8:	636f4361 	.word	0x636f4361
 800d1dc:	3fd287a7 	.word	0x3fd287a7
 800d1e0:	8b60c8b3 	.word	0x8b60c8b3
 800d1e4:	3fc68a28 	.word	0x3fc68a28
 800d1e8:	509f79fb 	.word	0x509f79fb
 800d1ec:	3fd34413 	.word	0x3fd34413
 800d1f0:	0800eab1 	.word	0x0800eab1
 800d1f4:	0800eac8 	.word	0x0800eac8
 800d1f8:	7ff00000 	.word	0x7ff00000
 800d1fc:	0800ea81 	.word	0x0800ea81
 800d200:	3ff80000 	.word	0x3ff80000
 800d204:	0800ebe0 	.word	0x0800ebe0
 800d208:	0800eb20 	.word	0x0800eb20
 800d20c:	0800eaad 	.word	0x0800eaad
 800d210:	0800ea80 	.word	0x0800ea80
 800d214:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d218:	6018      	str	r0, [r3, #0]
 800d21a:	9b03      	ldr	r3, [sp, #12]
 800d21c:	2b0e      	cmp	r3, #14
 800d21e:	f200 80a1 	bhi.w	800d364 <_dtoa_r+0x444>
 800d222:	2c00      	cmp	r4, #0
 800d224:	f000 809e 	beq.w	800d364 <_dtoa_r+0x444>
 800d228:	2f00      	cmp	r7, #0
 800d22a:	dd33      	ble.n	800d294 <_dtoa_r+0x374>
 800d22c:	4b9c      	ldr	r3, [pc, #624]	@ (800d4a0 <_dtoa_r+0x580>)
 800d22e:	f007 020f 	and.w	r2, r7, #15
 800d232:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d236:	ed93 7b00 	vldr	d7, [r3]
 800d23a:	05f8      	lsls	r0, r7, #23
 800d23c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d240:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d244:	d516      	bpl.n	800d274 <_dtoa_r+0x354>
 800d246:	4b97      	ldr	r3, [pc, #604]	@ (800d4a4 <_dtoa_r+0x584>)
 800d248:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d24c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d250:	f7f3 fafc 	bl	800084c <__aeabi_ddiv>
 800d254:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d258:	f004 040f 	and.w	r4, r4, #15
 800d25c:	2603      	movs	r6, #3
 800d25e:	4d91      	ldr	r5, [pc, #580]	@ (800d4a4 <_dtoa_r+0x584>)
 800d260:	b954      	cbnz	r4, 800d278 <_dtoa_r+0x358>
 800d262:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d266:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d26a:	f7f3 faef 	bl	800084c <__aeabi_ddiv>
 800d26e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d272:	e028      	b.n	800d2c6 <_dtoa_r+0x3a6>
 800d274:	2602      	movs	r6, #2
 800d276:	e7f2      	b.n	800d25e <_dtoa_r+0x33e>
 800d278:	07e1      	lsls	r1, r4, #31
 800d27a:	d508      	bpl.n	800d28e <_dtoa_r+0x36e>
 800d27c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d280:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d284:	f7f3 f9b8 	bl	80005f8 <__aeabi_dmul>
 800d288:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d28c:	3601      	adds	r6, #1
 800d28e:	1064      	asrs	r4, r4, #1
 800d290:	3508      	adds	r5, #8
 800d292:	e7e5      	b.n	800d260 <_dtoa_r+0x340>
 800d294:	f000 80af 	beq.w	800d3f6 <_dtoa_r+0x4d6>
 800d298:	427c      	negs	r4, r7
 800d29a:	4b81      	ldr	r3, [pc, #516]	@ (800d4a0 <_dtoa_r+0x580>)
 800d29c:	4d81      	ldr	r5, [pc, #516]	@ (800d4a4 <_dtoa_r+0x584>)
 800d29e:	f004 020f 	and.w	r2, r4, #15
 800d2a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d2ae:	f7f3 f9a3 	bl	80005f8 <__aeabi_dmul>
 800d2b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d2b6:	1124      	asrs	r4, r4, #4
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	2602      	movs	r6, #2
 800d2bc:	2c00      	cmp	r4, #0
 800d2be:	f040 808f 	bne.w	800d3e0 <_dtoa_r+0x4c0>
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d1d3      	bne.n	800d26e <_dtoa_r+0x34e>
 800d2c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d2c8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	f000 8094 	beq.w	800d3fa <_dtoa_r+0x4da>
 800d2d2:	4b75      	ldr	r3, [pc, #468]	@ (800d4a8 <_dtoa_r+0x588>)
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	4629      	mov	r1, r5
 800d2da:	f7f3 fbff 	bl	8000adc <__aeabi_dcmplt>
 800d2de:	2800      	cmp	r0, #0
 800d2e0:	f000 808b 	beq.w	800d3fa <_dtoa_r+0x4da>
 800d2e4:	9b03      	ldr	r3, [sp, #12]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	f000 8087 	beq.w	800d3fa <_dtoa_r+0x4da>
 800d2ec:	f1bb 0f00 	cmp.w	fp, #0
 800d2f0:	dd34      	ble.n	800d35c <_dtoa_r+0x43c>
 800d2f2:	4620      	mov	r0, r4
 800d2f4:	4b6d      	ldr	r3, [pc, #436]	@ (800d4ac <_dtoa_r+0x58c>)
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	4629      	mov	r1, r5
 800d2fa:	f7f3 f97d 	bl	80005f8 <__aeabi_dmul>
 800d2fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d302:	f107 38ff 	add.w	r8, r7, #4294967295
 800d306:	3601      	adds	r6, #1
 800d308:	465c      	mov	r4, fp
 800d30a:	4630      	mov	r0, r6
 800d30c:	f7f3 f90a 	bl	8000524 <__aeabi_i2d>
 800d310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d314:	f7f3 f970 	bl	80005f8 <__aeabi_dmul>
 800d318:	4b65      	ldr	r3, [pc, #404]	@ (800d4b0 <_dtoa_r+0x590>)
 800d31a:	2200      	movs	r2, #0
 800d31c:	f7f2 ffb6 	bl	800028c <__adddf3>
 800d320:	4605      	mov	r5, r0
 800d322:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d326:	2c00      	cmp	r4, #0
 800d328:	d16a      	bne.n	800d400 <_dtoa_r+0x4e0>
 800d32a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d32e:	4b61      	ldr	r3, [pc, #388]	@ (800d4b4 <_dtoa_r+0x594>)
 800d330:	2200      	movs	r2, #0
 800d332:	f7f2 ffa9 	bl	8000288 <__aeabi_dsub>
 800d336:	4602      	mov	r2, r0
 800d338:	460b      	mov	r3, r1
 800d33a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d33e:	462a      	mov	r2, r5
 800d340:	4633      	mov	r3, r6
 800d342:	f7f3 fbe9 	bl	8000b18 <__aeabi_dcmpgt>
 800d346:	2800      	cmp	r0, #0
 800d348:	f040 8298 	bne.w	800d87c <_dtoa_r+0x95c>
 800d34c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d350:	462a      	mov	r2, r5
 800d352:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d356:	f7f3 fbc1 	bl	8000adc <__aeabi_dcmplt>
 800d35a:	bb38      	cbnz	r0, 800d3ac <_dtoa_r+0x48c>
 800d35c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d360:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d364:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d366:	2b00      	cmp	r3, #0
 800d368:	f2c0 8157 	blt.w	800d61a <_dtoa_r+0x6fa>
 800d36c:	2f0e      	cmp	r7, #14
 800d36e:	f300 8154 	bgt.w	800d61a <_dtoa_r+0x6fa>
 800d372:	4b4b      	ldr	r3, [pc, #300]	@ (800d4a0 <_dtoa_r+0x580>)
 800d374:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d378:	ed93 7b00 	vldr	d7, [r3]
 800d37c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d37e:	2b00      	cmp	r3, #0
 800d380:	ed8d 7b00 	vstr	d7, [sp]
 800d384:	f280 80e5 	bge.w	800d552 <_dtoa_r+0x632>
 800d388:	9b03      	ldr	r3, [sp, #12]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	f300 80e1 	bgt.w	800d552 <_dtoa_r+0x632>
 800d390:	d10c      	bne.n	800d3ac <_dtoa_r+0x48c>
 800d392:	4b48      	ldr	r3, [pc, #288]	@ (800d4b4 <_dtoa_r+0x594>)
 800d394:	2200      	movs	r2, #0
 800d396:	ec51 0b17 	vmov	r0, r1, d7
 800d39a:	f7f3 f92d 	bl	80005f8 <__aeabi_dmul>
 800d39e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3a2:	f7f3 fbaf 	bl	8000b04 <__aeabi_dcmpge>
 800d3a6:	2800      	cmp	r0, #0
 800d3a8:	f000 8266 	beq.w	800d878 <_dtoa_r+0x958>
 800d3ac:	2400      	movs	r4, #0
 800d3ae:	4625      	mov	r5, r4
 800d3b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d3b2:	4656      	mov	r6, sl
 800d3b4:	ea6f 0803 	mvn.w	r8, r3
 800d3b8:	2700      	movs	r7, #0
 800d3ba:	4621      	mov	r1, r4
 800d3bc:	4648      	mov	r0, r9
 800d3be:	f000 fc09 	bl	800dbd4 <_Bfree>
 800d3c2:	2d00      	cmp	r5, #0
 800d3c4:	f000 80bd 	beq.w	800d542 <_dtoa_r+0x622>
 800d3c8:	b12f      	cbz	r7, 800d3d6 <_dtoa_r+0x4b6>
 800d3ca:	42af      	cmp	r7, r5
 800d3cc:	d003      	beq.n	800d3d6 <_dtoa_r+0x4b6>
 800d3ce:	4639      	mov	r1, r7
 800d3d0:	4648      	mov	r0, r9
 800d3d2:	f000 fbff 	bl	800dbd4 <_Bfree>
 800d3d6:	4629      	mov	r1, r5
 800d3d8:	4648      	mov	r0, r9
 800d3da:	f000 fbfb 	bl	800dbd4 <_Bfree>
 800d3de:	e0b0      	b.n	800d542 <_dtoa_r+0x622>
 800d3e0:	07e2      	lsls	r2, r4, #31
 800d3e2:	d505      	bpl.n	800d3f0 <_dtoa_r+0x4d0>
 800d3e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d3e8:	f7f3 f906 	bl	80005f8 <__aeabi_dmul>
 800d3ec:	3601      	adds	r6, #1
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	1064      	asrs	r4, r4, #1
 800d3f2:	3508      	adds	r5, #8
 800d3f4:	e762      	b.n	800d2bc <_dtoa_r+0x39c>
 800d3f6:	2602      	movs	r6, #2
 800d3f8:	e765      	b.n	800d2c6 <_dtoa_r+0x3a6>
 800d3fa:	9c03      	ldr	r4, [sp, #12]
 800d3fc:	46b8      	mov	r8, r7
 800d3fe:	e784      	b.n	800d30a <_dtoa_r+0x3ea>
 800d400:	4b27      	ldr	r3, [pc, #156]	@ (800d4a0 <_dtoa_r+0x580>)
 800d402:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d404:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d408:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d40c:	4454      	add	r4, sl
 800d40e:	2900      	cmp	r1, #0
 800d410:	d054      	beq.n	800d4bc <_dtoa_r+0x59c>
 800d412:	4929      	ldr	r1, [pc, #164]	@ (800d4b8 <_dtoa_r+0x598>)
 800d414:	2000      	movs	r0, #0
 800d416:	f7f3 fa19 	bl	800084c <__aeabi_ddiv>
 800d41a:	4633      	mov	r3, r6
 800d41c:	462a      	mov	r2, r5
 800d41e:	f7f2 ff33 	bl	8000288 <__aeabi_dsub>
 800d422:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d426:	4656      	mov	r6, sl
 800d428:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d42c:	f7f3 fb94 	bl	8000b58 <__aeabi_d2iz>
 800d430:	4605      	mov	r5, r0
 800d432:	f7f3 f877 	bl	8000524 <__aeabi_i2d>
 800d436:	4602      	mov	r2, r0
 800d438:	460b      	mov	r3, r1
 800d43a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d43e:	f7f2 ff23 	bl	8000288 <__aeabi_dsub>
 800d442:	3530      	adds	r5, #48	@ 0x30
 800d444:	4602      	mov	r2, r0
 800d446:	460b      	mov	r3, r1
 800d448:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d44c:	f806 5b01 	strb.w	r5, [r6], #1
 800d450:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d454:	f7f3 fb42 	bl	8000adc <__aeabi_dcmplt>
 800d458:	2800      	cmp	r0, #0
 800d45a:	d172      	bne.n	800d542 <_dtoa_r+0x622>
 800d45c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d460:	4911      	ldr	r1, [pc, #68]	@ (800d4a8 <_dtoa_r+0x588>)
 800d462:	2000      	movs	r0, #0
 800d464:	f7f2 ff10 	bl	8000288 <__aeabi_dsub>
 800d468:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d46c:	f7f3 fb36 	bl	8000adc <__aeabi_dcmplt>
 800d470:	2800      	cmp	r0, #0
 800d472:	f040 80b4 	bne.w	800d5de <_dtoa_r+0x6be>
 800d476:	42a6      	cmp	r6, r4
 800d478:	f43f af70 	beq.w	800d35c <_dtoa_r+0x43c>
 800d47c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d480:	4b0a      	ldr	r3, [pc, #40]	@ (800d4ac <_dtoa_r+0x58c>)
 800d482:	2200      	movs	r2, #0
 800d484:	f7f3 f8b8 	bl	80005f8 <__aeabi_dmul>
 800d488:	4b08      	ldr	r3, [pc, #32]	@ (800d4ac <_dtoa_r+0x58c>)
 800d48a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d48e:	2200      	movs	r2, #0
 800d490:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d494:	f7f3 f8b0 	bl	80005f8 <__aeabi_dmul>
 800d498:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d49c:	e7c4      	b.n	800d428 <_dtoa_r+0x508>
 800d49e:	bf00      	nop
 800d4a0:	0800ebe0 	.word	0x0800ebe0
 800d4a4:	0800ebb8 	.word	0x0800ebb8
 800d4a8:	3ff00000 	.word	0x3ff00000
 800d4ac:	40240000 	.word	0x40240000
 800d4b0:	401c0000 	.word	0x401c0000
 800d4b4:	40140000 	.word	0x40140000
 800d4b8:	3fe00000 	.word	0x3fe00000
 800d4bc:	4631      	mov	r1, r6
 800d4be:	4628      	mov	r0, r5
 800d4c0:	f7f3 f89a 	bl	80005f8 <__aeabi_dmul>
 800d4c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d4c8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d4ca:	4656      	mov	r6, sl
 800d4cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d4d0:	f7f3 fb42 	bl	8000b58 <__aeabi_d2iz>
 800d4d4:	4605      	mov	r5, r0
 800d4d6:	f7f3 f825 	bl	8000524 <__aeabi_i2d>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	460b      	mov	r3, r1
 800d4de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d4e2:	f7f2 fed1 	bl	8000288 <__aeabi_dsub>
 800d4e6:	3530      	adds	r5, #48	@ 0x30
 800d4e8:	f806 5b01 	strb.w	r5, [r6], #1
 800d4ec:	4602      	mov	r2, r0
 800d4ee:	460b      	mov	r3, r1
 800d4f0:	42a6      	cmp	r6, r4
 800d4f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d4f6:	f04f 0200 	mov.w	r2, #0
 800d4fa:	d124      	bne.n	800d546 <_dtoa_r+0x626>
 800d4fc:	4baf      	ldr	r3, [pc, #700]	@ (800d7bc <_dtoa_r+0x89c>)
 800d4fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d502:	f7f2 fec3 	bl	800028c <__adddf3>
 800d506:	4602      	mov	r2, r0
 800d508:	460b      	mov	r3, r1
 800d50a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d50e:	f7f3 fb03 	bl	8000b18 <__aeabi_dcmpgt>
 800d512:	2800      	cmp	r0, #0
 800d514:	d163      	bne.n	800d5de <_dtoa_r+0x6be>
 800d516:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d51a:	49a8      	ldr	r1, [pc, #672]	@ (800d7bc <_dtoa_r+0x89c>)
 800d51c:	2000      	movs	r0, #0
 800d51e:	f7f2 feb3 	bl	8000288 <__aeabi_dsub>
 800d522:	4602      	mov	r2, r0
 800d524:	460b      	mov	r3, r1
 800d526:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d52a:	f7f3 fad7 	bl	8000adc <__aeabi_dcmplt>
 800d52e:	2800      	cmp	r0, #0
 800d530:	f43f af14 	beq.w	800d35c <_dtoa_r+0x43c>
 800d534:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d536:	1e73      	subs	r3, r6, #1
 800d538:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d53a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d53e:	2b30      	cmp	r3, #48	@ 0x30
 800d540:	d0f8      	beq.n	800d534 <_dtoa_r+0x614>
 800d542:	4647      	mov	r7, r8
 800d544:	e03b      	b.n	800d5be <_dtoa_r+0x69e>
 800d546:	4b9e      	ldr	r3, [pc, #632]	@ (800d7c0 <_dtoa_r+0x8a0>)
 800d548:	f7f3 f856 	bl	80005f8 <__aeabi_dmul>
 800d54c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d550:	e7bc      	b.n	800d4cc <_dtoa_r+0x5ac>
 800d552:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d556:	4656      	mov	r6, sl
 800d558:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d55c:	4620      	mov	r0, r4
 800d55e:	4629      	mov	r1, r5
 800d560:	f7f3 f974 	bl	800084c <__aeabi_ddiv>
 800d564:	f7f3 faf8 	bl	8000b58 <__aeabi_d2iz>
 800d568:	4680      	mov	r8, r0
 800d56a:	f7f2 ffdb 	bl	8000524 <__aeabi_i2d>
 800d56e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d572:	f7f3 f841 	bl	80005f8 <__aeabi_dmul>
 800d576:	4602      	mov	r2, r0
 800d578:	460b      	mov	r3, r1
 800d57a:	4620      	mov	r0, r4
 800d57c:	4629      	mov	r1, r5
 800d57e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d582:	f7f2 fe81 	bl	8000288 <__aeabi_dsub>
 800d586:	f806 4b01 	strb.w	r4, [r6], #1
 800d58a:	9d03      	ldr	r5, [sp, #12]
 800d58c:	eba6 040a 	sub.w	r4, r6, sl
 800d590:	42a5      	cmp	r5, r4
 800d592:	4602      	mov	r2, r0
 800d594:	460b      	mov	r3, r1
 800d596:	d133      	bne.n	800d600 <_dtoa_r+0x6e0>
 800d598:	f7f2 fe78 	bl	800028c <__adddf3>
 800d59c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5a0:	4604      	mov	r4, r0
 800d5a2:	460d      	mov	r5, r1
 800d5a4:	f7f3 fab8 	bl	8000b18 <__aeabi_dcmpgt>
 800d5a8:	b9c0      	cbnz	r0, 800d5dc <_dtoa_r+0x6bc>
 800d5aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5ae:	4620      	mov	r0, r4
 800d5b0:	4629      	mov	r1, r5
 800d5b2:	f7f3 fa89 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5b6:	b110      	cbz	r0, 800d5be <_dtoa_r+0x69e>
 800d5b8:	f018 0f01 	tst.w	r8, #1
 800d5bc:	d10e      	bne.n	800d5dc <_dtoa_r+0x6bc>
 800d5be:	9902      	ldr	r1, [sp, #8]
 800d5c0:	4648      	mov	r0, r9
 800d5c2:	f000 fb07 	bl	800dbd4 <_Bfree>
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	7033      	strb	r3, [r6, #0]
 800d5ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d5cc:	3701      	adds	r7, #1
 800d5ce:	601f      	str	r7, [r3, #0]
 800d5d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	f000 824b 	beq.w	800da6e <_dtoa_r+0xb4e>
 800d5d8:	601e      	str	r6, [r3, #0]
 800d5da:	e248      	b.n	800da6e <_dtoa_r+0xb4e>
 800d5dc:	46b8      	mov	r8, r7
 800d5de:	4633      	mov	r3, r6
 800d5e0:	461e      	mov	r6, r3
 800d5e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d5e6:	2a39      	cmp	r2, #57	@ 0x39
 800d5e8:	d106      	bne.n	800d5f8 <_dtoa_r+0x6d8>
 800d5ea:	459a      	cmp	sl, r3
 800d5ec:	d1f8      	bne.n	800d5e0 <_dtoa_r+0x6c0>
 800d5ee:	2230      	movs	r2, #48	@ 0x30
 800d5f0:	f108 0801 	add.w	r8, r8, #1
 800d5f4:	f88a 2000 	strb.w	r2, [sl]
 800d5f8:	781a      	ldrb	r2, [r3, #0]
 800d5fa:	3201      	adds	r2, #1
 800d5fc:	701a      	strb	r2, [r3, #0]
 800d5fe:	e7a0      	b.n	800d542 <_dtoa_r+0x622>
 800d600:	4b6f      	ldr	r3, [pc, #444]	@ (800d7c0 <_dtoa_r+0x8a0>)
 800d602:	2200      	movs	r2, #0
 800d604:	f7f2 fff8 	bl	80005f8 <__aeabi_dmul>
 800d608:	2200      	movs	r2, #0
 800d60a:	2300      	movs	r3, #0
 800d60c:	4604      	mov	r4, r0
 800d60e:	460d      	mov	r5, r1
 800d610:	f7f3 fa5a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d614:	2800      	cmp	r0, #0
 800d616:	d09f      	beq.n	800d558 <_dtoa_r+0x638>
 800d618:	e7d1      	b.n	800d5be <_dtoa_r+0x69e>
 800d61a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d61c:	2a00      	cmp	r2, #0
 800d61e:	f000 80ea 	beq.w	800d7f6 <_dtoa_r+0x8d6>
 800d622:	9a07      	ldr	r2, [sp, #28]
 800d624:	2a01      	cmp	r2, #1
 800d626:	f300 80cd 	bgt.w	800d7c4 <_dtoa_r+0x8a4>
 800d62a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d62c:	2a00      	cmp	r2, #0
 800d62e:	f000 80c1 	beq.w	800d7b4 <_dtoa_r+0x894>
 800d632:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d636:	9c08      	ldr	r4, [sp, #32]
 800d638:	9e00      	ldr	r6, [sp, #0]
 800d63a:	9a00      	ldr	r2, [sp, #0]
 800d63c:	441a      	add	r2, r3
 800d63e:	9200      	str	r2, [sp, #0]
 800d640:	9a06      	ldr	r2, [sp, #24]
 800d642:	2101      	movs	r1, #1
 800d644:	441a      	add	r2, r3
 800d646:	4648      	mov	r0, r9
 800d648:	9206      	str	r2, [sp, #24]
 800d64a:	f000 fb77 	bl	800dd3c <__i2b>
 800d64e:	4605      	mov	r5, r0
 800d650:	b166      	cbz	r6, 800d66c <_dtoa_r+0x74c>
 800d652:	9b06      	ldr	r3, [sp, #24]
 800d654:	2b00      	cmp	r3, #0
 800d656:	dd09      	ble.n	800d66c <_dtoa_r+0x74c>
 800d658:	42b3      	cmp	r3, r6
 800d65a:	9a00      	ldr	r2, [sp, #0]
 800d65c:	bfa8      	it	ge
 800d65e:	4633      	movge	r3, r6
 800d660:	1ad2      	subs	r2, r2, r3
 800d662:	9200      	str	r2, [sp, #0]
 800d664:	9a06      	ldr	r2, [sp, #24]
 800d666:	1af6      	subs	r6, r6, r3
 800d668:	1ad3      	subs	r3, r2, r3
 800d66a:	9306      	str	r3, [sp, #24]
 800d66c:	9b08      	ldr	r3, [sp, #32]
 800d66e:	b30b      	cbz	r3, 800d6b4 <_dtoa_r+0x794>
 800d670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d672:	2b00      	cmp	r3, #0
 800d674:	f000 80c6 	beq.w	800d804 <_dtoa_r+0x8e4>
 800d678:	2c00      	cmp	r4, #0
 800d67a:	f000 80c0 	beq.w	800d7fe <_dtoa_r+0x8de>
 800d67e:	4629      	mov	r1, r5
 800d680:	4622      	mov	r2, r4
 800d682:	4648      	mov	r0, r9
 800d684:	f000 fc12 	bl	800deac <__pow5mult>
 800d688:	9a02      	ldr	r2, [sp, #8]
 800d68a:	4601      	mov	r1, r0
 800d68c:	4605      	mov	r5, r0
 800d68e:	4648      	mov	r0, r9
 800d690:	f000 fb6a 	bl	800dd68 <__multiply>
 800d694:	9902      	ldr	r1, [sp, #8]
 800d696:	4680      	mov	r8, r0
 800d698:	4648      	mov	r0, r9
 800d69a:	f000 fa9b 	bl	800dbd4 <_Bfree>
 800d69e:	9b08      	ldr	r3, [sp, #32]
 800d6a0:	1b1b      	subs	r3, r3, r4
 800d6a2:	9308      	str	r3, [sp, #32]
 800d6a4:	f000 80b1 	beq.w	800d80a <_dtoa_r+0x8ea>
 800d6a8:	9a08      	ldr	r2, [sp, #32]
 800d6aa:	4641      	mov	r1, r8
 800d6ac:	4648      	mov	r0, r9
 800d6ae:	f000 fbfd 	bl	800deac <__pow5mult>
 800d6b2:	9002      	str	r0, [sp, #8]
 800d6b4:	2101      	movs	r1, #1
 800d6b6:	4648      	mov	r0, r9
 800d6b8:	f000 fb40 	bl	800dd3c <__i2b>
 800d6bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d6be:	4604      	mov	r4, r0
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	f000 81d8 	beq.w	800da76 <_dtoa_r+0xb56>
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	4601      	mov	r1, r0
 800d6ca:	4648      	mov	r0, r9
 800d6cc:	f000 fbee 	bl	800deac <__pow5mult>
 800d6d0:	9b07      	ldr	r3, [sp, #28]
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	4604      	mov	r4, r0
 800d6d6:	f300 809f 	bgt.w	800d818 <_dtoa_r+0x8f8>
 800d6da:	9b04      	ldr	r3, [sp, #16]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	f040 8097 	bne.w	800d810 <_dtoa_r+0x8f0>
 800d6e2:	9b05      	ldr	r3, [sp, #20]
 800d6e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	f040 8093 	bne.w	800d814 <_dtoa_r+0x8f4>
 800d6ee:	9b05      	ldr	r3, [sp, #20]
 800d6f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d6f4:	0d1b      	lsrs	r3, r3, #20
 800d6f6:	051b      	lsls	r3, r3, #20
 800d6f8:	b133      	cbz	r3, 800d708 <_dtoa_r+0x7e8>
 800d6fa:	9b00      	ldr	r3, [sp, #0]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	9300      	str	r3, [sp, #0]
 800d700:	9b06      	ldr	r3, [sp, #24]
 800d702:	3301      	adds	r3, #1
 800d704:	9306      	str	r3, [sp, #24]
 800d706:	2301      	movs	r3, #1
 800d708:	9308      	str	r3, [sp, #32]
 800d70a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	f000 81b8 	beq.w	800da82 <_dtoa_r+0xb62>
 800d712:	6923      	ldr	r3, [r4, #16]
 800d714:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d718:	6918      	ldr	r0, [r3, #16]
 800d71a:	f000 fac3 	bl	800dca4 <__hi0bits>
 800d71e:	f1c0 0020 	rsb	r0, r0, #32
 800d722:	9b06      	ldr	r3, [sp, #24]
 800d724:	4418      	add	r0, r3
 800d726:	f010 001f 	ands.w	r0, r0, #31
 800d72a:	f000 8082 	beq.w	800d832 <_dtoa_r+0x912>
 800d72e:	f1c0 0320 	rsb	r3, r0, #32
 800d732:	2b04      	cmp	r3, #4
 800d734:	dd73      	ble.n	800d81e <_dtoa_r+0x8fe>
 800d736:	9b00      	ldr	r3, [sp, #0]
 800d738:	f1c0 001c 	rsb	r0, r0, #28
 800d73c:	4403      	add	r3, r0
 800d73e:	9300      	str	r3, [sp, #0]
 800d740:	9b06      	ldr	r3, [sp, #24]
 800d742:	4403      	add	r3, r0
 800d744:	4406      	add	r6, r0
 800d746:	9306      	str	r3, [sp, #24]
 800d748:	9b00      	ldr	r3, [sp, #0]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	dd05      	ble.n	800d75a <_dtoa_r+0x83a>
 800d74e:	9902      	ldr	r1, [sp, #8]
 800d750:	461a      	mov	r2, r3
 800d752:	4648      	mov	r0, r9
 800d754:	f000 fc04 	bl	800df60 <__lshift>
 800d758:	9002      	str	r0, [sp, #8]
 800d75a:	9b06      	ldr	r3, [sp, #24]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	dd05      	ble.n	800d76c <_dtoa_r+0x84c>
 800d760:	4621      	mov	r1, r4
 800d762:	461a      	mov	r2, r3
 800d764:	4648      	mov	r0, r9
 800d766:	f000 fbfb 	bl	800df60 <__lshift>
 800d76a:	4604      	mov	r4, r0
 800d76c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d061      	beq.n	800d836 <_dtoa_r+0x916>
 800d772:	9802      	ldr	r0, [sp, #8]
 800d774:	4621      	mov	r1, r4
 800d776:	f000 fc5f 	bl	800e038 <__mcmp>
 800d77a:	2800      	cmp	r0, #0
 800d77c:	da5b      	bge.n	800d836 <_dtoa_r+0x916>
 800d77e:	2300      	movs	r3, #0
 800d780:	9902      	ldr	r1, [sp, #8]
 800d782:	220a      	movs	r2, #10
 800d784:	4648      	mov	r0, r9
 800d786:	f000 fa47 	bl	800dc18 <__multadd>
 800d78a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d78c:	9002      	str	r0, [sp, #8]
 800d78e:	f107 38ff 	add.w	r8, r7, #4294967295
 800d792:	2b00      	cmp	r3, #0
 800d794:	f000 8177 	beq.w	800da86 <_dtoa_r+0xb66>
 800d798:	4629      	mov	r1, r5
 800d79a:	2300      	movs	r3, #0
 800d79c:	220a      	movs	r2, #10
 800d79e:	4648      	mov	r0, r9
 800d7a0:	f000 fa3a 	bl	800dc18 <__multadd>
 800d7a4:	f1bb 0f00 	cmp.w	fp, #0
 800d7a8:	4605      	mov	r5, r0
 800d7aa:	dc6f      	bgt.n	800d88c <_dtoa_r+0x96c>
 800d7ac:	9b07      	ldr	r3, [sp, #28]
 800d7ae:	2b02      	cmp	r3, #2
 800d7b0:	dc49      	bgt.n	800d846 <_dtoa_r+0x926>
 800d7b2:	e06b      	b.n	800d88c <_dtoa_r+0x96c>
 800d7b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d7b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d7ba:	e73c      	b.n	800d636 <_dtoa_r+0x716>
 800d7bc:	3fe00000 	.word	0x3fe00000
 800d7c0:	40240000 	.word	0x40240000
 800d7c4:	9b03      	ldr	r3, [sp, #12]
 800d7c6:	1e5c      	subs	r4, r3, #1
 800d7c8:	9b08      	ldr	r3, [sp, #32]
 800d7ca:	42a3      	cmp	r3, r4
 800d7cc:	db09      	blt.n	800d7e2 <_dtoa_r+0x8c2>
 800d7ce:	1b1c      	subs	r4, r3, r4
 800d7d0:	9b03      	ldr	r3, [sp, #12]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	f6bf af30 	bge.w	800d638 <_dtoa_r+0x718>
 800d7d8:	9b00      	ldr	r3, [sp, #0]
 800d7da:	9a03      	ldr	r2, [sp, #12]
 800d7dc:	1a9e      	subs	r6, r3, r2
 800d7de:	2300      	movs	r3, #0
 800d7e0:	e72b      	b.n	800d63a <_dtoa_r+0x71a>
 800d7e2:	9b08      	ldr	r3, [sp, #32]
 800d7e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d7e6:	9408      	str	r4, [sp, #32]
 800d7e8:	1ae3      	subs	r3, r4, r3
 800d7ea:	441a      	add	r2, r3
 800d7ec:	9e00      	ldr	r6, [sp, #0]
 800d7ee:	9b03      	ldr	r3, [sp, #12]
 800d7f0:	920d      	str	r2, [sp, #52]	@ 0x34
 800d7f2:	2400      	movs	r4, #0
 800d7f4:	e721      	b.n	800d63a <_dtoa_r+0x71a>
 800d7f6:	9c08      	ldr	r4, [sp, #32]
 800d7f8:	9e00      	ldr	r6, [sp, #0]
 800d7fa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800d7fc:	e728      	b.n	800d650 <_dtoa_r+0x730>
 800d7fe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d802:	e751      	b.n	800d6a8 <_dtoa_r+0x788>
 800d804:	9a08      	ldr	r2, [sp, #32]
 800d806:	9902      	ldr	r1, [sp, #8]
 800d808:	e750      	b.n	800d6ac <_dtoa_r+0x78c>
 800d80a:	f8cd 8008 	str.w	r8, [sp, #8]
 800d80e:	e751      	b.n	800d6b4 <_dtoa_r+0x794>
 800d810:	2300      	movs	r3, #0
 800d812:	e779      	b.n	800d708 <_dtoa_r+0x7e8>
 800d814:	9b04      	ldr	r3, [sp, #16]
 800d816:	e777      	b.n	800d708 <_dtoa_r+0x7e8>
 800d818:	2300      	movs	r3, #0
 800d81a:	9308      	str	r3, [sp, #32]
 800d81c:	e779      	b.n	800d712 <_dtoa_r+0x7f2>
 800d81e:	d093      	beq.n	800d748 <_dtoa_r+0x828>
 800d820:	9a00      	ldr	r2, [sp, #0]
 800d822:	331c      	adds	r3, #28
 800d824:	441a      	add	r2, r3
 800d826:	9200      	str	r2, [sp, #0]
 800d828:	9a06      	ldr	r2, [sp, #24]
 800d82a:	441a      	add	r2, r3
 800d82c:	441e      	add	r6, r3
 800d82e:	9206      	str	r2, [sp, #24]
 800d830:	e78a      	b.n	800d748 <_dtoa_r+0x828>
 800d832:	4603      	mov	r3, r0
 800d834:	e7f4      	b.n	800d820 <_dtoa_r+0x900>
 800d836:	9b03      	ldr	r3, [sp, #12]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	46b8      	mov	r8, r7
 800d83c:	dc20      	bgt.n	800d880 <_dtoa_r+0x960>
 800d83e:	469b      	mov	fp, r3
 800d840:	9b07      	ldr	r3, [sp, #28]
 800d842:	2b02      	cmp	r3, #2
 800d844:	dd1e      	ble.n	800d884 <_dtoa_r+0x964>
 800d846:	f1bb 0f00 	cmp.w	fp, #0
 800d84a:	f47f adb1 	bne.w	800d3b0 <_dtoa_r+0x490>
 800d84e:	4621      	mov	r1, r4
 800d850:	465b      	mov	r3, fp
 800d852:	2205      	movs	r2, #5
 800d854:	4648      	mov	r0, r9
 800d856:	f000 f9df 	bl	800dc18 <__multadd>
 800d85a:	4601      	mov	r1, r0
 800d85c:	4604      	mov	r4, r0
 800d85e:	9802      	ldr	r0, [sp, #8]
 800d860:	f000 fbea 	bl	800e038 <__mcmp>
 800d864:	2800      	cmp	r0, #0
 800d866:	f77f ada3 	ble.w	800d3b0 <_dtoa_r+0x490>
 800d86a:	4656      	mov	r6, sl
 800d86c:	2331      	movs	r3, #49	@ 0x31
 800d86e:	f806 3b01 	strb.w	r3, [r6], #1
 800d872:	f108 0801 	add.w	r8, r8, #1
 800d876:	e59f      	b.n	800d3b8 <_dtoa_r+0x498>
 800d878:	9c03      	ldr	r4, [sp, #12]
 800d87a:	46b8      	mov	r8, r7
 800d87c:	4625      	mov	r5, r4
 800d87e:	e7f4      	b.n	800d86a <_dtoa_r+0x94a>
 800d880:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d886:	2b00      	cmp	r3, #0
 800d888:	f000 8101 	beq.w	800da8e <_dtoa_r+0xb6e>
 800d88c:	2e00      	cmp	r6, #0
 800d88e:	dd05      	ble.n	800d89c <_dtoa_r+0x97c>
 800d890:	4629      	mov	r1, r5
 800d892:	4632      	mov	r2, r6
 800d894:	4648      	mov	r0, r9
 800d896:	f000 fb63 	bl	800df60 <__lshift>
 800d89a:	4605      	mov	r5, r0
 800d89c:	9b08      	ldr	r3, [sp, #32]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d05c      	beq.n	800d95c <_dtoa_r+0xa3c>
 800d8a2:	6869      	ldr	r1, [r5, #4]
 800d8a4:	4648      	mov	r0, r9
 800d8a6:	f000 f955 	bl	800db54 <_Balloc>
 800d8aa:	4606      	mov	r6, r0
 800d8ac:	b928      	cbnz	r0, 800d8ba <_dtoa_r+0x99a>
 800d8ae:	4b82      	ldr	r3, [pc, #520]	@ (800dab8 <_dtoa_r+0xb98>)
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d8b6:	f7ff bb4a 	b.w	800cf4e <_dtoa_r+0x2e>
 800d8ba:	692a      	ldr	r2, [r5, #16]
 800d8bc:	3202      	adds	r2, #2
 800d8be:	0092      	lsls	r2, r2, #2
 800d8c0:	f105 010c 	add.w	r1, r5, #12
 800d8c4:	300c      	adds	r0, #12
 800d8c6:	f000 ff85 	bl	800e7d4 <memcpy>
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	4631      	mov	r1, r6
 800d8ce:	4648      	mov	r0, r9
 800d8d0:	f000 fb46 	bl	800df60 <__lshift>
 800d8d4:	f10a 0301 	add.w	r3, sl, #1
 800d8d8:	9300      	str	r3, [sp, #0]
 800d8da:	eb0a 030b 	add.w	r3, sl, fp
 800d8de:	9308      	str	r3, [sp, #32]
 800d8e0:	9b04      	ldr	r3, [sp, #16]
 800d8e2:	f003 0301 	and.w	r3, r3, #1
 800d8e6:	462f      	mov	r7, r5
 800d8e8:	9306      	str	r3, [sp, #24]
 800d8ea:	4605      	mov	r5, r0
 800d8ec:	9b00      	ldr	r3, [sp, #0]
 800d8ee:	9802      	ldr	r0, [sp, #8]
 800d8f0:	4621      	mov	r1, r4
 800d8f2:	f103 3bff 	add.w	fp, r3, #4294967295
 800d8f6:	f7ff fa8b 	bl	800ce10 <quorem>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	3330      	adds	r3, #48	@ 0x30
 800d8fe:	9003      	str	r0, [sp, #12]
 800d900:	4639      	mov	r1, r7
 800d902:	9802      	ldr	r0, [sp, #8]
 800d904:	9309      	str	r3, [sp, #36]	@ 0x24
 800d906:	f000 fb97 	bl	800e038 <__mcmp>
 800d90a:	462a      	mov	r2, r5
 800d90c:	9004      	str	r0, [sp, #16]
 800d90e:	4621      	mov	r1, r4
 800d910:	4648      	mov	r0, r9
 800d912:	f000 fbad 	bl	800e070 <__mdiff>
 800d916:	68c2      	ldr	r2, [r0, #12]
 800d918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d91a:	4606      	mov	r6, r0
 800d91c:	bb02      	cbnz	r2, 800d960 <_dtoa_r+0xa40>
 800d91e:	4601      	mov	r1, r0
 800d920:	9802      	ldr	r0, [sp, #8]
 800d922:	f000 fb89 	bl	800e038 <__mcmp>
 800d926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d928:	4602      	mov	r2, r0
 800d92a:	4631      	mov	r1, r6
 800d92c:	4648      	mov	r0, r9
 800d92e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d930:	9309      	str	r3, [sp, #36]	@ 0x24
 800d932:	f000 f94f 	bl	800dbd4 <_Bfree>
 800d936:	9b07      	ldr	r3, [sp, #28]
 800d938:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d93a:	9e00      	ldr	r6, [sp, #0]
 800d93c:	ea42 0103 	orr.w	r1, r2, r3
 800d940:	9b06      	ldr	r3, [sp, #24]
 800d942:	4319      	orrs	r1, r3
 800d944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d946:	d10d      	bne.n	800d964 <_dtoa_r+0xa44>
 800d948:	2b39      	cmp	r3, #57	@ 0x39
 800d94a:	d027      	beq.n	800d99c <_dtoa_r+0xa7c>
 800d94c:	9a04      	ldr	r2, [sp, #16]
 800d94e:	2a00      	cmp	r2, #0
 800d950:	dd01      	ble.n	800d956 <_dtoa_r+0xa36>
 800d952:	9b03      	ldr	r3, [sp, #12]
 800d954:	3331      	adds	r3, #49	@ 0x31
 800d956:	f88b 3000 	strb.w	r3, [fp]
 800d95a:	e52e      	b.n	800d3ba <_dtoa_r+0x49a>
 800d95c:	4628      	mov	r0, r5
 800d95e:	e7b9      	b.n	800d8d4 <_dtoa_r+0x9b4>
 800d960:	2201      	movs	r2, #1
 800d962:	e7e2      	b.n	800d92a <_dtoa_r+0xa0a>
 800d964:	9904      	ldr	r1, [sp, #16]
 800d966:	2900      	cmp	r1, #0
 800d968:	db04      	blt.n	800d974 <_dtoa_r+0xa54>
 800d96a:	9807      	ldr	r0, [sp, #28]
 800d96c:	4301      	orrs	r1, r0
 800d96e:	9806      	ldr	r0, [sp, #24]
 800d970:	4301      	orrs	r1, r0
 800d972:	d120      	bne.n	800d9b6 <_dtoa_r+0xa96>
 800d974:	2a00      	cmp	r2, #0
 800d976:	ddee      	ble.n	800d956 <_dtoa_r+0xa36>
 800d978:	9902      	ldr	r1, [sp, #8]
 800d97a:	9300      	str	r3, [sp, #0]
 800d97c:	2201      	movs	r2, #1
 800d97e:	4648      	mov	r0, r9
 800d980:	f000 faee 	bl	800df60 <__lshift>
 800d984:	4621      	mov	r1, r4
 800d986:	9002      	str	r0, [sp, #8]
 800d988:	f000 fb56 	bl	800e038 <__mcmp>
 800d98c:	2800      	cmp	r0, #0
 800d98e:	9b00      	ldr	r3, [sp, #0]
 800d990:	dc02      	bgt.n	800d998 <_dtoa_r+0xa78>
 800d992:	d1e0      	bne.n	800d956 <_dtoa_r+0xa36>
 800d994:	07da      	lsls	r2, r3, #31
 800d996:	d5de      	bpl.n	800d956 <_dtoa_r+0xa36>
 800d998:	2b39      	cmp	r3, #57	@ 0x39
 800d99a:	d1da      	bne.n	800d952 <_dtoa_r+0xa32>
 800d99c:	2339      	movs	r3, #57	@ 0x39
 800d99e:	f88b 3000 	strb.w	r3, [fp]
 800d9a2:	4633      	mov	r3, r6
 800d9a4:	461e      	mov	r6, r3
 800d9a6:	3b01      	subs	r3, #1
 800d9a8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d9ac:	2a39      	cmp	r2, #57	@ 0x39
 800d9ae:	d04e      	beq.n	800da4e <_dtoa_r+0xb2e>
 800d9b0:	3201      	adds	r2, #1
 800d9b2:	701a      	strb	r2, [r3, #0]
 800d9b4:	e501      	b.n	800d3ba <_dtoa_r+0x49a>
 800d9b6:	2a00      	cmp	r2, #0
 800d9b8:	dd03      	ble.n	800d9c2 <_dtoa_r+0xaa2>
 800d9ba:	2b39      	cmp	r3, #57	@ 0x39
 800d9bc:	d0ee      	beq.n	800d99c <_dtoa_r+0xa7c>
 800d9be:	3301      	adds	r3, #1
 800d9c0:	e7c9      	b.n	800d956 <_dtoa_r+0xa36>
 800d9c2:	9a00      	ldr	r2, [sp, #0]
 800d9c4:	9908      	ldr	r1, [sp, #32]
 800d9c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d9ca:	428a      	cmp	r2, r1
 800d9cc:	d028      	beq.n	800da20 <_dtoa_r+0xb00>
 800d9ce:	9902      	ldr	r1, [sp, #8]
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	220a      	movs	r2, #10
 800d9d4:	4648      	mov	r0, r9
 800d9d6:	f000 f91f 	bl	800dc18 <__multadd>
 800d9da:	42af      	cmp	r7, r5
 800d9dc:	9002      	str	r0, [sp, #8]
 800d9de:	f04f 0300 	mov.w	r3, #0
 800d9e2:	f04f 020a 	mov.w	r2, #10
 800d9e6:	4639      	mov	r1, r7
 800d9e8:	4648      	mov	r0, r9
 800d9ea:	d107      	bne.n	800d9fc <_dtoa_r+0xadc>
 800d9ec:	f000 f914 	bl	800dc18 <__multadd>
 800d9f0:	4607      	mov	r7, r0
 800d9f2:	4605      	mov	r5, r0
 800d9f4:	9b00      	ldr	r3, [sp, #0]
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	9300      	str	r3, [sp, #0]
 800d9fa:	e777      	b.n	800d8ec <_dtoa_r+0x9cc>
 800d9fc:	f000 f90c 	bl	800dc18 <__multadd>
 800da00:	4629      	mov	r1, r5
 800da02:	4607      	mov	r7, r0
 800da04:	2300      	movs	r3, #0
 800da06:	220a      	movs	r2, #10
 800da08:	4648      	mov	r0, r9
 800da0a:	f000 f905 	bl	800dc18 <__multadd>
 800da0e:	4605      	mov	r5, r0
 800da10:	e7f0      	b.n	800d9f4 <_dtoa_r+0xad4>
 800da12:	f1bb 0f00 	cmp.w	fp, #0
 800da16:	bfcc      	ite	gt
 800da18:	465e      	movgt	r6, fp
 800da1a:	2601      	movle	r6, #1
 800da1c:	4456      	add	r6, sl
 800da1e:	2700      	movs	r7, #0
 800da20:	9902      	ldr	r1, [sp, #8]
 800da22:	9300      	str	r3, [sp, #0]
 800da24:	2201      	movs	r2, #1
 800da26:	4648      	mov	r0, r9
 800da28:	f000 fa9a 	bl	800df60 <__lshift>
 800da2c:	4621      	mov	r1, r4
 800da2e:	9002      	str	r0, [sp, #8]
 800da30:	f000 fb02 	bl	800e038 <__mcmp>
 800da34:	2800      	cmp	r0, #0
 800da36:	dcb4      	bgt.n	800d9a2 <_dtoa_r+0xa82>
 800da38:	d102      	bne.n	800da40 <_dtoa_r+0xb20>
 800da3a:	9b00      	ldr	r3, [sp, #0]
 800da3c:	07db      	lsls	r3, r3, #31
 800da3e:	d4b0      	bmi.n	800d9a2 <_dtoa_r+0xa82>
 800da40:	4633      	mov	r3, r6
 800da42:	461e      	mov	r6, r3
 800da44:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da48:	2a30      	cmp	r2, #48	@ 0x30
 800da4a:	d0fa      	beq.n	800da42 <_dtoa_r+0xb22>
 800da4c:	e4b5      	b.n	800d3ba <_dtoa_r+0x49a>
 800da4e:	459a      	cmp	sl, r3
 800da50:	d1a8      	bne.n	800d9a4 <_dtoa_r+0xa84>
 800da52:	2331      	movs	r3, #49	@ 0x31
 800da54:	f108 0801 	add.w	r8, r8, #1
 800da58:	f88a 3000 	strb.w	r3, [sl]
 800da5c:	e4ad      	b.n	800d3ba <_dtoa_r+0x49a>
 800da5e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800da60:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800dabc <_dtoa_r+0xb9c>
 800da64:	b11b      	cbz	r3, 800da6e <_dtoa_r+0xb4e>
 800da66:	f10a 0308 	add.w	r3, sl, #8
 800da6a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800da6c:	6013      	str	r3, [r2, #0]
 800da6e:	4650      	mov	r0, sl
 800da70:	b017      	add	sp, #92	@ 0x5c
 800da72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da76:	9b07      	ldr	r3, [sp, #28]
 800da78:	2b01      	cmp	r3, #1
 800da7a:	f77f ae2e 	ble.w	800d6da <_dtoa_r+0x7ba>
 800da7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800da80:	9308      	str	r3, [sp, #32]
 800da82:	2001      	movs	r0, #1
 800da84:	e64d      	b.n	800d722 <_dtoa_r+0x802>
 800da86:	f1bb 0f00 	cmp.w	fp, #0
 800da8a:	f77f aed9 	ble.w	800d840 <_dtoa_r+0x920>
 800da8e:	4656      	mov	r6, sl
 800da90:	9802      	ldr	r0, [sp, #8]
 800da92:	4621      	mov	r1, r4
 800da94:	f7ff f9bc 	bl	800ce10 <quorem>
 800da98:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800da9c:	f806 3b01 	strb.w	r3, [r6], #1
 800daa0:	eba6 020a 	sub.w	r2, r6, sl
 800daa4:	4593      	cmp	fp, r2
 800daa6:	ddb4      	ble.n	800da12 <_dtoa_r+0xaf2>
 800daa8:	9902      	ldr	r1, [sp, #8]
 800daaa:	2300      	movs	r3, #0
 800daac:	220a      	movs	r2, #10
 800daae:	4648      	mov	r0, r9
 800dab0:	f000 f8b2 	bl	800dc18 <__multadd>
 800dab4:	9002      	str	r0, [sp, #8]
 800dab6:	e7eb      	b.n	800da90 <_dtoa_r+0xb70>
 800dab8:	0800eb20 	.word	0x0800eb20
 800dabc:	0800eaa4 	.word	0x0800eaa4

0800dac0 <_free_r>:
 800dac0:	b538      	push	{r3, r4, r5, lr}
 800dac2:	4605      	mov	r5, r0
 800dac4:	2900      	cmp	r1, #0
 800dac6:	d041      	beq.n	800db4c <_free_r+0x8c>
 800dac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dacc:	1f0c      	subs	r4, r1, #4
 800dace:	2b00      	cmp	r3, #0
 800dad0:	bfb8      	it	lt
 800dad2:	18e4      	addlt	r4, r4, r3
 800dad4:	f7fe fb8c 	bl	800c1f0 <__malloc_lock>
 800dad8:	4a1d      	ldr	r2, [pc, #116]	@ (800db50 <_free_r+0x90>)
 800dada:	6813      	ldr	r3, [r2, #0]
 800dadc:	b933      	cbnz	r3, 800daec <_free_r+0x2c>
 800dade:	6063      	str	r3, [r4, #4]
 800dae0:	6014      	str	r4, [r2, #0]
 800dae2:	4628      	mov	r0, r5
 800dae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dae8:	f7fe bb88 	b.w	800c1fc <__malloc_unlock>
 800daec:	42a3      	cmp	r3, r4
 800daee:	d908      	bls.n	800db02 <_free_r+0x42>
 800daf0:	6820      	ldr	r0, [r4, #0]
 800daf2:	1821      	adds	r1, r4, r0
 800daf4:	428b      	cmp	r3, r1
 800daf6:	bf01      	itttt	eq
 800daf8:	6819      	ldreq	r1, [r3, #0]
 800dafa:	685b      	ldreq	r3, [r3, #4]
 800dafc:	1809      	addeq	r1, r1, r0
 800dafe:	6021      	streq	r1, [r4, #0]
 800db00:	e7ed      	b.n	800dade <_free_r+0x1e>
 800db02:	461a      	mov	r2, r3
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	b10b      	cbz	r3, 800db0c <_free_r+0x4c>
 800db08:	42a3      	cmp	r3, r4
 800db0a:	d9fa      	bls.n	800db02 <_free_r+0x42>
 800db0c:	6811      	ldr	r1, [r2, #0]
 800db0e:	1850      	adds	r0, r2, r1
 800db10:	42a0      	cmp	r0, r4
 800db12:	d10b      	bne.n	800db2c <_free_r+0x6c>
 800db14:	6820      	ldr	r0, [r4, #0]
 800db16:	4401      	add	r1, r0
 800db18:	1850      	adds	r0, r2, r1
 800db1a:	4283      	cmp	r3, r0
 800db1c:	6011      	str	r1, [r2, #0]
 800db1e:	d1e0      	bne.n	800dae2 <_free_r+0x22>
 800db20:	6818      	ldr	r0, [r3, #0]
 800db22:	685b      	ldr	r3, [r3, #4]
 800db24:	6053      	str	r3, [r2, #4]
 800db26:	4408      	add	r0, r1
 800db28:	6010      	str	r0, [r2, #0]
 800db2a:	e7da      	b.n	800dae2 <_free_r+0x22>
 800db2c:	d902      	bls.n	800db34 <_free_r+0x74>
 800db2e:	230c      	movs	r3, #12
 800db30:	602b      	str	r3, [r5, #0]
 800db32:	e7d6      	b.n	800dae2 <_free_r+0x22>
 800db34:	6820      	ldr	r0, [r4, #0]
 800db36:	1821      	adds	r1, r4, r0
 800db38:	428b      	cmp	r3, r1
 800db3a:	bf04      	itt	eq
 800db3c:	6819      	ldreq	r1, [r3, #0]
 800db3e:	685b      	ldreq	r3, [r3, #4]
 800db40:	6063      	str	r3, [r4, #4]
 800db42:	bf04      	itt	eq
 800db44:	1809      	addeq	r1, r1, r0
 800db46:	6021      	streq	r1, [r4, #0]
 800db48:	6054      	str	r4, [r2, #4]
 800db4a:	e7ca      	b.n	800dae2 <_free_r+0x22>
 800db4c:	bd38      	pop	{r3, r4, r5, pc}
 800db4e:	bf00      	nop
 800db50:	2000217c 	.word	0x2000217c

0800db54 <_Balloc>:
 800db54:	b570      	push	{r4, r5, r6, lr}
 800db56:	69c6      	ldr	r6, [r0, #28]
 800db58:	4604      	mov	r4, r0
 800db5a:	460d      	mov	r5, r1
 800db5c:	b976      	cbnz	r6, 800db7c <_Balloc+0x28>
 800db5e:	2010      	movs	r0, #16
 800db60:	f7fe fa9c 	bl	800c09c <malloc>
 800db64:	4602      	mov	r2, r0
 800db66:	61e0      	str	r0, [r4, #28]
 800db68:	b920      	cbnz	r0, 800db74 <_Balloc+0x20>
 800db6a:	4b18      	ldr	r3, [pc, #96]	@ (800dbcc <_Balloc+0x78>)
 800db6c:	4818      	ldr	r0, [pc, #96]	@ (800dbd0 <_Balloc+0x7c>)
 800db6e:	216b      	movs	r1, #107	@ 0x6b
 800db70:	f7fe fa76 	bl	800c060 <__assert_func>
 800db74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db78:	6006      	str	r6, [r0, #0]
 800db7a:	60c6      	str	r6, [r0, #12]
 800db7c:	69e6      	ldr	r6, [r4, #28]
 800db7e:	68f3      	ldr	r3, [r6, #12]
 800db80:	b183      	cbz	r3, 800dba4 <_Balloc+0x50>
 800db82:	69e3      	ldr	r3, [r4, #28]
 800db84:	68db      	ldr	r3, [r3, #12]
 800db86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800db8a:	b9b8      	cbnz	r0, 800dbbc <_Balloc+0x68>
 800db8c:	2101      	movs	r1, #1
 800db8e:	fa01 f605 	lsl.w	r6, r1, r5
 800db92:	1d72      	adds	r2, r6, #5
 800db94:	0092      	lsls	r2, r2, #2
 800db96:	4620      	mov	r0, r4
 800db98:	f000 fe2a 	bl	800e7f0 <_calloc_r>
 800db9c:	b160      	cbz	r0, 800dbb8 <_Balloc+0x64>
 800db9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dba2:	e00e      	b.n	800dbc2 <_Balloc+0x6e>
 800dba4:	2221      	movs	r2, #33	@ 0x21
 800dba6:	2104      	movs	r1, #4
 800dba8:	4620      	mov	r0, r4
 800dbaa:	f000 fe21 	bl	800e7f0 <_calloc_r>
 800dbae:	69e3      	ldr	r3, [r4, #28]
 800dbb0:	60f0      	str	r0, [r6, #12]
 800dbb2:	68db      	ldr	r3, [r3, #12]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d1e4      	bne.n	800db82 <_Balloc+0x2e>
 800dbb8:	2000      	movs	r0, #0
 800dbba:	bd70      	pop	{r4, r5, r6, pc}
 800dbbc:	6802      	ldr	r2, [r0, #0]
 800dbbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dbc8:	e7f7      	b.n	800dbba <_Balloc+0x66>
 800dbca:	bf00      	nop
 800dbcc:	0800eab1 	.word	0x0800eab1
 800dbd0:	0800eb31 	.word	0x0800eb31

0800dbd4 <_Bfree>:
 800dbd4:	b570      	push	{r4, r5, r6, lr}
 800dbd6:	69c6      	ldr	r6, [r0, #28]
 800dbd8:	4605      	mov	r5, r0
 800dbda:	460c      	mov	r4, r1
 800dbdc:	b976      	cbnz	r6, 800dbfc <_Bfree+0x28>
 800dbde:	2010      	movs	r0, #16
 800dbe0:	f7fe fa5c 	bl	800c09c <malloc>
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	61e8      	str	r0, [r5, #28]
 800dbe8:	b920      	cbnz	r0, 800dbf4 <_Bfree+0x20>
 800dbea:	4b09      	ldr	r3, [pc, #36]	@ (800dc10 <_Bfree+0x3c>)
 800dbec:	4809      	ldr	r0, [pc, #36]	@ (800dc14 <_Bfree+0x40>)
 800dbee:	218f      	movs	r1, #143	@ 0x8f
 800dbf0:	f7fe fa36 	bl	800c060 <__assert_func>
 800dbf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dbf8:	6006      	str	r6, [r0, #0]
 800dbfa:	60c6      	str	r6, [r0, #12]
 800dbfc:	b13c      	cbz	r4, 800dc0e <_Bfree+0x3a>
 800dbfe:	69eb      	ldr	r3, [r5, #28]
 800dc00:	6862      	ldr	r2, [r4, #4]
 800dc02:	68db      	ldr	r3, [r3, #12]
 800dc04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dc08:	6021      	str	r1, [r4, #0]
 800dc0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dc0e:	bd70      	pop	{r4, r5, r6, pc}
 800dc10:	0800eab1 	.word	0x0800eab1
 800dc14:	0800eb31 	.word	0x0800eb31

0800dc18 <__multadd>:
 800dc18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc1c:	690d      	ldr	r5, [r1, #16]
 800dc1e:	4607      	mov	r7, r0
 800dc20:	460c      	mov	r4, r1
 800dc22:	461e      	mov	r6, r3
 800dc24:	f101 0c14 	add.w	ip, r1, #20
 800dc28:	2000      	movs	r0, #0
 800dc2a:	f8dc 3000 	ldr.w	r3, [ip]
 800dc2e:	b299      	uxth	r1, r3
 800dc30:	fb02 6101 	mla	r1, r2, r1, r6
 800dc34:	0c1e      	lsrs	r6, r3, #16
 800dc36:	0c0b      	lsrs	r3, r1, #16
 800dc38:	fb02 3306 	mla	r3, r2, r6, r3
 800dc3c:	b289      	uxth	r1, r1
 800dc3e:	3001      	adds	r0, #1
 800dc40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dc44:	4285      	cmp	r5, r0
 800dc46:	f84c 1b04 	str.w	r1, [ip], #4
 800dc4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dc4e:	dcec      	bgt.n	800dc2a <__multadd+0x12>
 800dc50:	b30e      	cbz	r6, 800dc96 <__multadd+0x7e>
 800dc52:	68a3      	ldr	r3, [r4, #8]
 800dc54:	42ab      	cmp	r3, r5
 800dc56:	dc19      	bgt.n	800dc8c <__multadd+0x74>
 800dc58:	6861      	ldr	r1, [r4, #4]
 800dc5a:	4638      	mov	r0, r7
 800dc5c:	3101      	adds	r1, #1
 800dc5e:	f7ff ff79 	bl	800db54 <_Balloc>
 800dc62:	4680      	mov	r8, r0
 800dc64:	b928      	cbnz	r0, 800dc72 <__multadd+0x5a>
 800dc66:	4602      	mov	r2, r0
 800dc68:	4b0c      	ldr	r3, [pc, #48]	@ (800dc9c <__multadd+0x84>)
 800dc6a:	480d      	ldr	r0, [pc, #52]	@ (800dca0 <__multadd+0x88>)
 800dc6c:	21ba      	movs	r1, #186	@ 0xba
 800dc6e:	f7fe f9f7 	bl	800c060 <__assert_func>
 800dc72:	6922      	ldr	r2, [r4, #16]
 800dc74:	3202      	adds	r2, #2
 800dc76:	f104 010c 	add.w	r1, r4, #12
 800dc7a:	0092      	lsls	r2, r2, #2
 800dc7c:	300c      	adds	r0, #12
 800dc7e:	f000 fda9 	bl	800e7d4 <memcpy>
 800dc82:	4621      	mov	r1, r4
 800dc84:	4638      	mov	r0, r7
 800dc86:	f7ff ffa5 	bl	800dbd4 <_Bfree>
 800dc8a:	4644      	mov	r4, r8
 800dc8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dc90:	3501      	adds	r5, #1
 800dc92:	615e      	str	r6, [r3, #20]
 800dc94:	6125      	str	r5, [r4, #16]
 800dc96:	4620      	mov	r0, r4
 800dc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc9c:	0800eb20 	.word	0x0800eb20
 800dca0:	0800eb31 	.word	0x0800eb31

0800dca4 <__hi0bits>:
 800dca4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dca8:	4603      	mov	r3, r0
 800dcaa:	bf36      	itet	cc
 800dcac:	0403      	lslcc	r3, r0, #16
 800dcae:	2000      	movcs	r0, #0
 800dcb0:	2010      	movcc	r0, #16
 800dcb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dcb6:	bf3c      	itt	cc
 800dcb8:	021b      	lslcc	r3, r3, #8
 800dcba:	3008      	addcc	r0, #8
 800dcbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dcc0:	bf3c      	itt	cc
 800dcc2:	011b      	lslcc	r3, r3, #4
 800dcc4:	3004      	addcc	r0, #4
 800dcc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dcca:	bf3c      	itt	cc
 800dccc:	009b      	lslcc	r3, r3, #2
 800dcce:	3002      	addcc	r0, #2
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	db05      	blt.n	800dce0 <__hi0bits+0x3c>
 800dcd4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dcd8:	f100 0001 	add.w	r0, r0, #1
 800dcdc:	bf08      	it	eq
 800dcde:	2020      	moveq	r0, #32
 800dce0:	4770      	bx	lr

0800dce2 <__lo0bits>:
 800dce2:	6803      	ldr	r3, [r0, #0]
 800dce4:	4602      	mov	r2, r0
 800dce6:	f013 0007 	ands.w	r0, r3, #7
 800dcea:	d00b      	beq.n	800dd04 <__lo0bits+0x22>
 800dcec:	07d9      	lsls	r1, r3, #31
 800dcee:	d421      	bmi.n	800dd34 <__lo0bits+0x52>
 800dcf0:	0798      	lsls	r0, r3, #30
 800dcf2:	bf49      	itett	mi
 800dcf4:	085b      	lsrmi	r3, r3, #1
 800dcf6:	089b      	lsrpl	r3, r3, #2
 800dcf8:	2001      	movmi	r0, #1
 800dcfa:	6013      	strmi	r3, [r2, #0]
 800dcfc:	bf5c      	itt	pl
 800dcfe:	6013      	strpl	r3, [r2, #0]
 800dd00:	2002      	movpl	r0, #2
 800dd02:	4770      	bx	lr
 800dd04:	b299      	uxth	r1, r3
 800dd06:	b909      	cbnz	r1, 800dd0c <__lo0bits+0x2a>
 800dd08:	0c1b      	lsrs	r3, r3, #16
 800dd0a:	2010      	movs	r0, #16
 800dd0c:	b2d9      	uxtb	r1, r3
 800dd0e:	b909      	cbnz	r1, 800dd14 <__lo0bits+0x32>
 800dd10:	3008      	adds	r0, #8
 800dd12:	0a1b      	lsrs	r3, r3, #8
 800dd14:	0719      	lsls	r1, r3, #28
 800dd16:	bf04      	itt	eq
 800dd18:	091b      	lsreq	r3, r3, #4
 800dd1a:	3004      	addeq	r0, #4
 800dd1c:	0799      	lsls	r1, r3, #30
 800dd1e:	bf04      	itt	eq
 800dd20:	089b      	lsreq	r3, r3, #2
 800dd22:	3002      	addeq	r0, #2
 800dd24:	07d9      	lsls	r1, r3, #31
 800dd26:	d403      	bmi.n	800dd30 <__lo0bits+0x4e>
 800dd28:	085b      	lsrs	r3, r3, #1
 800dd2a:	f100 0001 	add.w	r0, r0, #1
 800dd2e:	d003      	beq.n	800dd38 <__lo0bits+0x56>
 800dd30:	6013      	str	r3, [r2, #0]
 800dd32:	4770      	bx	lr
 800dd34:	2000      	movs	r0, #0
 800dd36:	4770      	bx	lr
 800dd38:	2020      	movs	r0, #32
 800dd3a:	4770      	bx	lr

0800dd3c <__i2b>:
 800dd3c:	b510      	push	{r4, lr}
 800dd3e:	460c      	mov	r4, r1
 800dd40:	2101      	movs	r1, #1
 800dd42:	f7ff ff07 	bl	800db54 <_Balloc>
 800dd46:	4602      	mov	r2, r0
 800dd48:	b928      	cbnz	r0, 800dd56 <__i2b+0x1a>
 800dd4a:	4b05      	ldr	r3, [pc, #20]	@ (800dd60 <__i2b+0x24>)
 800dd4c:	4805      	ldr	r0, [pc, #20]	@ (800dd64 <__i2b+0x28>)
 800dd4e:	f240 1145 	movw	r1, #325	@ 0x145
 800dd52:	f7fe f985 	bl	800c060 <__assert_func>
 800dd56:	2301      	movs	r3, #1
 800dd58:	6144      	str	r4, [r0, #20]
 800dd5a:	6103      	str	r3, [r0, #16]
 800dd5c:	bd10      	pop	{r4, pc}
 800dd5e:	bf00      	nop
 800dd60:	0800eb20 	.word	0x0800eb20
 800dd64:	0800eb31 	.word	0x0800eb31

0800dd68 <__multiply>:
 800dd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd6c:	4617      	mov	r7, r2
 800dd6e:	690a      	ldr	r2, [r1, #16]
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	429a      	cmp	r2, r3
 800dd74:	bfa8      	it	ge
 800dd76:	463b      	movge	r3, r7
 800dd78:	4689      	mov	r9, r1
 800dd7a:	bfa4      	itt	ge
 800dd7c:	460f      	movge	r7, r1
 800dd7e:	4699      	movge	r9, r3
 800dd80:	693d      	ldr	r5, [r7, #16]
 800dd82:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	6879      	ldr	r1, [r7, #4]
 800dd8a:	eb05 060a 	add.w	r6, r5, sl
 800dd8e:	42b3      	cmp	r3, r6
 800dd90:	b085      	sub	sp, #20
 800dd92:	bfb8      	it	lt
 800dd94:	3101      	addlt	r1, #1
 800dd96:	f7ff fedd 	bl	800db54 <_Balloc>
 800dd9a:	b930      	cbnz	r0, 800ddaa <__multiply+0x42>
 800dd9c:	4602      	mov	r2, r0
 800dd9e:	4b41      	ldr	r3, [pc, #260]	@ (800dea4 <__multiply+0x13c>)
 800dda0:	4841      	ldr	r0, [pc, #260]	@ (800dea8 <__multiply+0x140>)
 800dda2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dda6:	f7fe f95b 	bl	800c060 <__assert_func>
 800ddaa:	f100 0414 	add.w	r4, r0, #20
 800ddae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ddb2:	4623      	mov	r3, r4
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	4573      	cmp	r3, lr
 800ddb8:	d320      	bcc.n	800ddfc <__multiply+0x94>
 800ddba:	f107 0814 	add.w	r8, r7, #20
 800ddbe:	f109 0114 	add.w	r1, r9, #20
 800ddc2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ddc6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ddca:	9302      	str	r3, [sp, #8]
 800ddcc:	1beb      	subs	r3, r5, r7
 800ddce:	3b15      	subs	r3, #21
 800ddd0:	f023 0303 	bic.w	r3, r3, #3
 800ddd4:	3304      	adds	r3, #4
 800ddd6:	3715      	adds	r7, #21
 800ddd8:	42bd      	cmp	r5, r7
 800ddda:	bf38      	it	cc
 800dddc:	2304      	movcc	r3, #4
 800ddde:	9301      	str	r3, [sp, #4]
 800dde0:	9b02      	ldr	r3, [sp, #8]
 800dde2:	9103      	str	r1, [sp, #12]
 800dde4:	428b      	cmp	r3, r1
 800dde6:	d80c      	bhi.n	800de02 <__multiply+0x9a>
 800dde8:	2e00      	cmp	r6, #0
 800ddea:	dd03      	ble.n	800ddf4 <__multiply+0x8c>
 800ddec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d055      	beq.n	800dea0 <__multiply+0x138>
 800ddf4:	6106      	str	r6, [r0, #16]
 800ddf6:	b005      	add	sp, #20
 800ddf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddfc:	f843 2b04 	str.w	r2, [r3], #4
 800de00:	e7d9      	b.n	800ddb6 <__multiply+0x4e>
 800de02:	f8b1 a000 	ldrh.w	sl, [r1]
 800de06:	f1ba 0f00 	cmp.w	sl, #0
 800de0a:	d01f      	beq.n	800de4c <__multiply+0xe4>
 800de0c:	46c4      	mov	ip, r8
 800de0e:	46a1      	mov	r9, r4
 800de10:	2700      	movs	r7, #0
 800de12:	f85c 2b04 	ldr.w	r2, [ip], #4
 800de16:	f8d9 3000 	ldr.w	r3, [r9]
 800de1a:	fa1f fb82 	uxth.w	fp, r2
 800de1e:	b29b      	uxth	r3, r3
 800de20:	fb0a 330b 	mla	r3, sl, fp, r3
 800de24:	443b      	add	r3, r7
 800de26:	f8d9 7000 	ldr.w	r7, [r9]
 800de2a:	0c12      	lsrs	r2, r2, #16
 800de2c:	0c3f      	lsrs	r7, r7, #16
 800de2e:	fb0a 7202 	mla	r2, sl, r2, r7
 800de32:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800de36:	b29b      	uxth	r3, r3
 800de38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de3c:	4565      	cmp	r5, ip
 800de3e:	f849 3b04 	str.w	r3, [r9], #4
 800de42:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800de46:	d8e4      	bhi.n	800de12 <__multiply+0xaa>
 800de48:	9b01      	ldr	r3, [sp, #4]
 800de4a:	50e7      	str	r7, [r4, r3]
 800de4c:	9b03      	ldr	r3, [sp, #12]
 800de4e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800de52:	3104      	adds	r1, #4
 800de54:	f1b9 0f00 	cmp.w	r9, #0
 800de58:	d020      	beq.n	800de9c <__multiply+0x134>
 800de5a:	6823      	ldr	r3, [r4, #0]
 800de5c:	4647      	mov	r7, r8
 800de5e:	46a4      	mov	ip, r4
 800de60:	f04f 0a00 	mov.w	sl, #0
 800de64:	f8b7 b000 	ldrh.w	fp, [r7]
 800de68:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800de6c:	fb09 220b 	mla	r2, r9, fp, r2
 800de70:	4452      	add	r2, sl
 800de72:	b29b      	uxth	r3, r3
 800de74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de78:	f84c 3b04 	str.w	r3, [ip], #4
 800de7c:	f857 3b04 	ldr.w	r3, [r7], #4
 800de80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de84:	f8bc 3000 	ldrh.w	r3, [ip]
 800de88:	fb09 330a 	mla	r3, r9, sl, r3
 800de8c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800de90:	42bd      	cmp	r5, r7
 800de92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de96:	d8e5      	bhi.n	800de64 <__multiply+0xfc>
 800de98:	9a01      	ldr	r2, [sp, #4]
 800de9a:	50a3      	str	r3, [r4, r2]
 800de9c:	3404      	adds	r4, #4
 800de9e:	e79f      	b.n	800dde0 <__multiply+0x78>
 800dea0:	3e01      	subs	r6, #1
 800dea2:	e7a1      	b.n	800dde8 <__multiply+0x80>
 800dea4:	0800eb20 	.word	0x0800eb20
 800dea8:	0800eb31 	.word	0x0800eb31

0800deac <__pow5mult>:
 800deac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800deb0:	4615      	mov	r5, r2
 800deb2:	f012 0203 	ands.w	r2, r2, #3
 800deb6:	4607      	mov	r7, r0
 800deb8:	460e      	mov	r6, r1
 800deba:	d007      	beq.n	800decc <__pow5mult+0x20>
 800debc:	4c25      	ldr	r4, [pc, #148]	@ (800df54 <__pow5mult+0xa8>)
 800debe:	3a01      	subs	r2, #1
 800dec0:	2300      	movs	r3, #0
 800dec2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dec6:	f7ff fea7 	bl	800dc18 <__multadd>
 800deca:	4606      	mov	r6, r0
 800decc:	10ad      	asrs	r5, r5, #2
 800dece:	d03d      	beq.n	800df4c <__pow5mult+0xa0>
 800ded0:	69fc      	ldr	r4, [r7, #28]
 800ded2:	b97c      	cbnz	r4, 800def4 <__pow5mult+0x48>
 800ded4:	2010      	movs	r0, #16
 800ded6:	f7fe f8e1 	bl	800c09c <malloc>
 800deda:	4602      	mov	r2, r0
 800dedc:	61f8      	str	r0, [r7, #28]
 800dede:	b928      	cbnz	r0, 800deec <__pow5mult+0x40>
 800dee0:	4b1d      	ldr	r3, [pc, #116]	@ (800df58 <__pow5mult+0xac>)
 800dee2:	481e      	ldr	r0, [pc, #120]	@ (800df5c <__pow5mult+0xb0>)
 800dee4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dee8:	f7fe f8ba 	bl	800c060 <__assert_func>
 800deec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800def0:	6004      	str	r4, [r0, #0]
 800def2:	60c4      	str	r4, [r0, #12]
 800def4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800def8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800defc:	b94c      	cbnz	r4, 800df12 <__pow5mult+0x66>
 800defe:	f240 2171 	movw	r1, #625	@ 0x271
 800df02:	4638      	mov	r0, r7
 800df04:	f7ff ff1a 	bl	800dd3c <__i2b>
 800df08:	2300      	movs	r3, #0
 800df0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800df0e:	4604      	mov	r4, r0
 800df10:	6003      	str	r3, [r0, #0]
 800df12:	f04f 0900 	mov.w	r9, #0
 800df16:	07eb      	lsls	r3, r5, #31
 800df18:	d50a      	bpl.n	800df30 <__pow5mult+0x84>
 800df1a:	4631      	mov	r1, r6
 800df1c:	4622      	mov	r2, r4
 800df1e:	4638      	mov	r0, r7
 800df20:	f7ff ff22 	bl	800dd68 <__multiply>
 800df24:	4631      	mov	r1, r6
 800df26:	4680      	mov	r8, r0
 800df28:	4638      	mov	r0, r7
 800df2a:	f7ff fe53 	bl	800dbd4 <_Bfree>
 800df2e:	4646      	mov	r6, r8
 800df30:	106d      	asrs	r5, r5, #1
 800df32:	d00b      	beq.n	800df4c <__pow5mult+0xa0>
 800df34:	6820      	ldr	r0, [r4, #0]
 800df36:	b938      	cbnz	r0, 800df48 <__pow5mult+0x9c>
 800df38:	4622      	mov	r2, r4
 800df3a:	4621      	mov	r1, r4
 800df3c:	4638      	mov	r0, r7
 800df3e:	f7ff ff13 	bl	800dd68 <__multiply>
 800df42:	6020      	str	r0, [r4, #0]
 800df44:	f8c0 9000 	str.w	r9, [r0]
 800df48:	4604      	mov	r4, r0
 800df4a:	e7e4      	b.n	800df16 <__pow5mult+0x6a>
 800df4c:	4630      	mov	r0, r6
 800df4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df52:	bf00      	nop
 800df54:	0800eba8 	.word	0x0800eba8
 800df58:	0800eab1 	.word	0x0800eab1
 800df5c:	0800eb31 	.word	0x0800eb31

0800df60 <__lshift>:
 800df60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df64:	460c      	mov	r4, r1
 800df66:	6849      	ldr	r1, [r1, #4]
 800df68:	6923      	ldr	r3, [r4, #16]
 800df6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800df6e:	68a3      	ldr	r3, [r4, #8]
 800df70:	4607      	mov	r7, r0
 800df72:	4691      	mov	r9, r2
 800df74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800df78:	f108 0601 	add.w	r6, r8, #1
 800df7c:	42b3      	cmp	r3, r6
 800df7e:	db0b      	blt.n	800df98 <__lshift+0x38>
 800df80:	4638      	mov	r0, r7
 800df82:	f7ff fde7 	bl	800db54 <_Balloc>
 800df86:	4605      	mov	r5, r0
 800df88:	b948      	cbnz	r0, 800df9e <__lshift+0x3e>
 800df8a:	4602      	mov	r2, r0
 800df8c:	4b28      	ldr	r3, [pc, #160]	@ (800e030 <__lshift+0xd0>)
 800df8e:	4829      	ldr	r0, [pc, #164]	@ (800e034 <__lshift+0xd4>)
 800df90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800df94:	f7fe f864 	bl	800c060 <__assert_func>
 800df98:	3101      	adds	r1, #1
 800df9a:	005b      	lsls	r3, r3, #1
 800df9c:	e7ee      	b.n	800df7c <__lshift+0x1c>
 800df9e:	2300      	movs	r3, #0
 800dfa0:	f100 0114 	add.w	r1, r0, #20
 800dfa4:	f100 0210 	add.w	r2, r0, #16
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	4553      	cmp	r3, sl
 800dfac:	db33      	blt.n	800e016 <__lshift+0xb6>
 800dfae:	6920      	ldr	r0, [r4, #16]
 800dfb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dfb4:	f104 0314 	add.w	r3, r4, #20
 800dfb8:	f019 091f 	ands.w	r9, r9, #31
 800dfbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dfc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dfc4:	d02b      	beq.n	800e01e <__lshift+0xbe>
 800dfc6:	f1c9 0e20 	rsb	lr, r9, #32
 800dfca:	468a      	mov	sl, r1
 800dfcc:	2200      	movs	r2, #0
 800dfce:	6818      	ldr	r0, [r3, #0]
 800dfd0:	fa00 f009 	lsl.w	r0, r0, r9
 800dfd4:	4310      	orrs	r0, r2
 800dfd6:	f84a 0b04 	str.w	r0, [sl], #4
 800dfda:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfde:	459c      	cmp	ip, r3
 800dfe0:	fa22 f20e 	lsr.w	r2, r2, lr
 800dfe4:	d8f3      	bhi.n	800dfce <__lshift+0x6e>
 800dfe6:	ebac 0304 	sub.w	r3, ip, r4
 800dfea:	3b15      	subs	r3, #21
 800dfec:	f023 0303 	bic.w	r3, r3, #3
 800dff0:	3304      	adds	r3, #4
 800dff2:	f104 0015 	add.w	r0, r4, #21
 800dff6:	4560      	cmp	r0, ip
 800dff8:	bf88      	it	hi
 800dffa:	2304      	movhi	r3, #4
 800dffc:	50ca      	str	r2, [r1, r3]
 800dffe:	b10a      	cbz	r2, 800e004 <__lshift+0xa4>
 800e000:	f108 0602 	add.w	r6, r8, #2
 800e004:	3e01      	subs	r6, #1
 800e006:	4638      	mov	r0, r7
 800e008:	612e      	str	r6, [r5, #16]
 800e00a:	4621      	mov	r1, r4
 800e00c:	f7ff fde2 	bl	800dbd4 <_Bfree>
 800e010:	4628      	mov	r0, r5
 800e012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e016:	f842 0f04 	str.w	r0, [r2, #4]!
 800e01a:	3301      	adds	r3, #1
 800e01c:	e7c5      	b.n	800dfaa <__lshift+0x4a>
 800e01e:	3904      	subs	r1, #4
 800e020:	f853 2b04 	ldr.w	r2, [r3], #4
 800e024:	f841 2f04 	str.w	r2, [r1, #4]!
 800e028:	459c      	cmp	ip, r3
 800e02a:	d8f9      	bhi.n	800e020 <__lshift+0xc0>
 800e02c:	e7ea      	b.n	800e004 <__lshift+0xa4>
 800e02e:	bf00      	nop
 800e030:	0800eb20 	.word	0x0800eb20
 800e034:	0800eb31 	.word	0x0800eb31

0800e038 <__mcmp>:
 800e038:	690a      	ldr	r2, [r1, #16]
 800e03a:	4603      	mov	r3, r0
 800e03c:	6900      	ldr	r0, [r0, #16]
 800e03e:	1a80      	subs	r0, r0, r2
 800e040:	b530      	push	{r4, r5, lr}
 800e042:	d10e      	bne.n	800e062 <__mcmp+0x2a>
 800e044:	3314      	adds	r3, #20
 800e046:	3114      	adds	r1, #20
 800e048:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e04c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e050:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e054:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e058:	4295      	cmp	r5, r2
 800e05a:	d003      	beq.n	800e064 <__mcmp+0x2c>
 800e05c:	d205      	bcs.n	800e06a <__mcmp+0x32>
 800e05e:	f04f 30ff 	mov.w	r0, #4294967295
 800e062:	bd30      	pop	{r4, r5, pc}
 800e064:	42a3      	cmp	r3, r4
 800e066:	d3f3      	bcc.n	800e050 <__mcmp+0x18>
 800e068:	e7fb      	b.n	800e062 <__mcmp+0x2a>
 800e06a:	2001      	movs	r0, #1
 800e06c:	e7f9      	b.n	800e062 <__mcmp+0x2a>
	...

0800e070 <__mdiff>:
 800e070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e074:	4689      	mov	r9, r1
 800e076:	4606      	mov	r6, r0
 800e078:	4611      	mov	r1, r2
 800e07a:	4648      	mov	r0, r9
 800e07c:	4614      	mov	r4, r2
 800e07e:	f7ff ffdb 	bl	800e038 <__mcmp>
 800e082:	1e05      	subs	r5, r0, #0
 800e084:	d112      	bne.n	800e0ac <__mdiff+0x3c>
 800e086:	4629      	mov	r1, r5
 800e088:	4630      	mov	r0, r6
 800e08a:	f7ff fd63 	bl	800db54 <_Balloc>
 800e08e:	4602      	mov	r2, r0
 800e090:	b928      	cbnz	r0, 800e09e <__mdiff+0x2e>
 800e092:	4b3f      	ldr	r3, [pc, #252]	@ (800e190 <__mdiff+0x120>)
 800e094:	f240 2137 	movw	r1, #567	@ 0x237
 800e098:	483e      	ldr	r0, [pc, #248]	@ (800e194 <__mdiff+0x124>)
 800e09a:	f7fd ffe1 	bl	800c060 <__assert_func>
 800e09e:	2301      	movs	r3, #1
 800e0a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e0a4:	4610      	mov	r0, r2
 800e0a6:	b003      	add	sp, #12
 800e0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0ac:	bfbc      	itt	lt
 800e0ae:	464b      	movlt	r3, r9
 800e0b0:	46a1      	movlt	r9, r4
 800e0b2:	4630      	mov	r0, r6
 800e0b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e0b8:	bfba      	itte	lt
 800e0ba:	461c      	movlt	r4, r3
 800e0bc:	2501      	movlt	r5, #1
 800e0be:	2500      	movge	r5, #0
 800e0c0:	f7ff fd48 	bl	800db54 <_Balloc>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	b918      	cbnz	r0, 800e0d0 <__mdiff+0x60>
 800e0c8:	4b31      	ldr	r3, [pc, #196]	@ (800e190 <__mdiff+0x120>)
 800e0ca:	f240 2145 	movw	r1, #581	@ 0x245
 800e0ce:	e7e3      	b.n	800e098 <__mdiff+0x28>
 800e0d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e0d4:	6926      	ldr	r6, [r4, #16]
 800e0d6:	60c5      	str	r5, [r0, #12]
 800e0d8:	f109 0310 	add.w	r3, r9, #16
 800e0dc:	f109 0514 	add.w	r5, r9, #20
 800e0e0:	f104 0e14 	add.w	lr, r4, #20
 800e0e4:	f100 0b14 	add.w	fp, r0, #20
 800e0e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e0ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e0f0:	9301      	str	r3, [sp, #4]
 800e0f2:	46d9      	mov	r9, fp
 800e0f4:	f04f 0c00 	mov.w	ip, #0
 800e0f8:	9b01      	ldr	r3, [sp, #4]
 800e0fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e0fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e102:	9301      	str	r3, [sp, #4]
 800e104:	fa1f f38a 	uxth.w	r3, sl
 800e108:	4619      	mov	r1, r3
 800e10a:	b283      	uxth	r3, r0
 800e10c:	1acb      	subs	r3, r1, r3
 800e10e:	0c00      	lsrs	r0, r0, #16
 800e110:	4463      	add	r3, ip
 800e112:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e116:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e120:	4576      	cmp	r6, lr
 800e122:	f849 3b04 	str.w	r3, [r9], #4
 800e126:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e12a:	d8e5      	bhi.n	800e0f8 <__mdiff+0x88>
 800e12c:	1b33      	subs	r3, r6, r4
 800e12e:	3b15      	subs	r3, #21
 800e130:	f023 0303 	bic.w	r3, r3, #3
 800e134:	3415      	adds	r4, #21
 800e136:	3304      	adds	r3, #4
 800e138:	42a6      	cmp	r6, r4
 800e13a:	bf38      	it	cc
 800e13c:	2304      	movcc	r3, #4
 800e13e:	441d      	add	r5, r3
 800e140:	445b      	add	r3, fp
 800e142:	461e      	mov	r6, r3
 800e144:	462c      	mov	r4, r5
 800e146:	4544      	cmp	r4, r8
 800e148:	d30e      	bcc.n	800e168 <__mdiff+0xf8>
 800e14a:	f108 0103 	add.w	r1, r8, #3
 800e14e:	1b49      	subs	r1, r1, r5
 800e150:	f021 0103 	bic.w	r1, r1, #3
 800e154:	3d03      	subs	r5, #3
 800e156:	45a8      	cmp	r8, r5
 800e158:	bf38      	it	cc
 800e15a:	2100      	movcc	r1, #0
 800e15c:	440b      	add	r3, r1
 800e15e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e162:	b191      	cbz	r1, 800e18a <__mdiff+0x11a>
 800e164:	6117      	str	r7, [r2, #16]
 800e166:	e79d      	b.n	800e0a4 <__mdiff+0x34>
 800e168:	f854 1b04 	ldr.w	r1, [r4], #4
 800e16c:	46e6      	mov	lr, ip
 800e16e:	0c08      	lsrs	r0, r1, #16
 800e170:	fa1c fc81 	uxtah	ip, ip, r1
 800e174:	4471      	add	r1, lr
 800e176:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e17a:	b289      	uxth	r1, r1
 800e17c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e180:	f846 1b04 	str.w	r1, [r6], #4
 800e184:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e188:	e7dd      	b.n	800e146 <__mdiff+0xd6>
 800e18a:	3f01      	subs	r7, #1
 800e18c:	e7e7      	b.n	800e15e <__mdiff+0xee>
 800e18e:	bf00      	nop
 800e190:	0800eb20 	.word	0x0800eb20
 800e194:	0800eb31 	.word	0x0800eb31

0800e198 <__d2b>:
 800e198:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e19c:	460f      	mov	r7, r1
 800e19e:	2101      	movs	r1, #1
 800e1a0:	ec59 8b10 	vmov	r8, r9, d0
 800e1a4:	4616      	mov	r6, r2
 800e1a6:	f7ff fcd5 	bl	800db54 <_Balloc>
 800e1aa:	4604      	mov	r4, r0
 800e1ac:	b930      	cbnz	r0, 800e1bc <__d2b+0x24>
 800e1ae:	4602      	mov	r2, r0
 800e1b0:	4b23      	ldr	r3, [pc, #140]	@ (800e240 <__d2b+0xa8>)
 800e1b2:	4824      	ldr	r0, [pc, #144]	@ (800e244 <__d2b+0xac>)
 800e1b4:	f240 310f 	movw	r1, #783	@ 0x30f
 800e1b8:	f7fd ff52 	bl	800c060 <__assert_func>
 800e1bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e1c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e1c4:	b10d      	cbz	r5, 800e1ca <__d2b+0x32>
 800e1c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e1ca:	9301      	str	r3, [sp, #4]
 800e1cc:	f1b8 0300 	subs.w	r3, r8, #0
 800e1d0:	d023      	beq.n	800e21a <__d2b+0x82>
 800e1d2:	4668      	mov	r0, sp
 800e1d4:	9300      	str	r3, [sp, #0]
 800e1d6:	f7ff fd84 	bl	800dce2 <__lo0bits>
 800e1da:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e1de:	b1d0      	cbz	r0, 800e216 <__d2b+0x7e>
 800e1e0:	f1c0 0320 	rsb	r3, r0, #32
 800e1e4:	fa02 f303 	lsl.w	r3, r2, r3
 800e1e8:	430b      	orrs	r3, r1
 800e1ea:	40c2      	lsrs	r2, r0
 800e1ec:	6163      	str	r3, [r4, #20]
 800e1ee:	9201      	str	r2, [sp, #4]
 800e1f0:	9b01      	ldr	r3, [sp, #4]
 800e1f2:	61a3      	str	r3, [r4, #24]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	bf0c      	ite	eq
 800e1f8:	2201      	moveq	r2, #1
 800e1fa:	2202      	movne	r2, #2
 800e1fc:	6122      	str	r2, [r4, #16]
 800e1fe:	b1a5      	cbz	r5, 800e22a <__d2b+0x92>
 800e200:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e204:	4405      	add	r5, r0
 800e206:	603d      	str	r5, [r7, #0]
 800e208:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e20c:	6030      	str	r0, [r6, #0]
 800e20e:	4620      	mov	r0, r4
 800e210:	b003      	add	sp, #12
 800e212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e216:	6161      	str	r1, [r4, #20]
 800e218:	e7ea      	b.n	800e1f0 <__d2b+0x58>
 800e21a:	a801      	add	r0, sp, #4
 800e21c:	f7ff fd61 	bl	800dce2 <__lo0bits>
 800e220:	9b01      	ldr	r3, [sp, #4]
 800e222:	6163      	str	r3, [r4, #20]
 800e224:	3020      	adds	r0, #32
 800e226:	2201      	movs	r2, #1
 800e228:	e7e8      	b.n	800e1fc <__d2b+0x64>
 800e22a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e22e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e232:	6038      	str	r0, [r7, #0]
 800e234:	6918      	ldr	r0, [r3, #16]
 800e236:	f7ff fd35 	bl	800dca4 <__hi0bits>
 800e23a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e23e:	e7e5      	b.n	800e20c <__d2b+0x74>
 800e240:	0800eb20 	.word	0x0800eb20
 800e244:	0800eb31 	.word	0x0800eb31

0800e248 <__sfputc_r>:
 800e248:	6893      	ldr	r3, [r2, #8]
 800e24a:	3b01      	subs	r3, #1
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	b410      	push	{r4}
 800e250:	6093      	str	r3, [r2, #8]
 800e252:	da08      	bge.n	800e266 <__sfputc_r+0x1e>
 800e254:	6994      	ldr	r4, [r2, #24]
 800e256:	42a3      	cmp	r3, r4
 800e258:	db01      	blt.n	800e25e <__sfputc_r+0x16>
 800e25a:	290a      	cmp	r1, #10
 800e25c:	d103      	bne.n	800e266 <__sfputc_r+0x1e>
 800e25e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e262:	f000 b9df 	b.w	800e624 <__swbuf_r>
 800e266:	6813      	ldr	r3, [r2, #0]
 800e268:	1c58      	adds	r0, r3, #1
 800e26a:	6010      	str	r0, [r2, #0]
 800e26c:	7019      	strb	r1, [r3, #0]
 800e26e:	4608      	mov	r0, r1
 800e270:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e274:	4770      	bx	lr

0800e276 <__sfputs_r>:
 800e276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e278:	4606      	mov	r6, r0
 800e27a:	460f      	mov	r7, r1
 800e27c:	4614      	mov	r4, r2
 800e27e:	18d5      	adds	r5, r2, r3
 800e280:	42ac      	cmp	r4, r5
 800e282:	d101      	bne.n	800e288 <__sfputs_r+0x12>
 800e284:	2000      	movs	r0, #0
 800e286:	e007      	b.n	800e298 <__sfputs_r+0x22>
 800e288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e28c:	463a      	mov	r2, r7
 800e28e:	4630      	mov	r0, r6
 800e290:	f7ff ffda 	bl	800e248 <__sfputc_r>
 800e294:	1c43      	adds	r3, r0, #1
 800e296:	d1f3      	bne.n	800e280 <__sfputs_r+0xa>
 800e298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e29c <_vfiprintf_r>:
 800e29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2a0:	460d      	mov	r5, r1
 800e2a2:	b09d      	sub	sp, #116	@ 0x74
 800e2a4:	4614      	mov	r4, r2
 800e2a6:	4698      	mov	r8, r3
 800e2a8:	4606      	mov	r6, r0
 800e2aa:	b118      	cbz	r0, 800e2b4 <_vfiprintf_r+0x18>
 800e2ac:	6a03      	ldr	r3, [r0, #32]
 800e2ae:	b90b      	cbnz	r3, 800e2b4 <_vfiprintf_r+0x18>
 800e2b0:	f7fe fc8c 	bl	800cbcc <__sinit>
 800e2b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2b6:	07d9      	lsls	r1, r3, #31
 800e2b8:	d405      	bmi.n	800e2c6 <_vfiprintf_r+0x2a>
 800e2ba:	89ab      	ldrh	r3, [r5, #12]
 800e2bc:	059a      	lsls	r2, r3, #22
 800e2be:	d402      	bmi.n	800e2c6 <_vfiprintf_r+0x2a>
 800e2c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e2c2:	f7fe fd9c 	bl	800cdfe <__retarget_lock_acquire_recursive>
 800e2c6:	89ab      	ldrh	r3, [r5, #12]
 800e2c8:	071b      	lsls	r3, r3, #28
 800e2ca:	d501      	bpl.n	800e2d0 <_vfiprintf_r+0x34>
 800e2cc:	692b      	ldr	r3, [r5, #16]
 800e2ce:	b99b      	cbnz	r3, 800e2f8 <_vfiprintf_r+0x5c>
 800e2d0:	4629      	mov	r1, r5
 800e2d2:	4630      	mov	r0, r6
 800e2d4:	f000 f9e4 	bl	800e6a0 <__swsetup_r>
 800e2d8:	b170      	cbz	r0, 800e2f8 <_vfiprintf_r+0x5c>
 800e2da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2dc:	07dc      	lsls	r4, r3, #31
 800e2de:	d504      	bpl.n	800e2ea <_vfiprintf_r+0x4e>
 800e2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2e4:	b01d      	add	sp, #116	@ 0x74
 800e2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ea:	89ab      	ldrh	r3, [r5, #12]
 800e2ec:	0598      	lsls	r0, r3, #22
 800e2ee:	d4f7      	bmi.n	800e2e0 <_vfiprintf_r+0x44>
 800e2f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e2f2:	f7fe fd85 	bl	800ce00 <__retarget_lock_release_recursive>
 800e2f6:	e7f3      	b.n	800e2e0 <_vfiprintf_r+0x44>
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2fc:	2320      	movs	r3, #32
 800e2fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e302:	f8cd 800c 	str.w	r8, [sp, #12]
 800e306:	2330      	movs	r3, #48	@ 0x30
 800e308:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e4b8 <_vfiprintf_r+0x21c>
 800e30c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e310:	f04f 0901 	mov.w	r9, #1
 800e314:	4623      	mov	r3, r4
 800e316:	469a      	mov	sl, r3
 800e318:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e31c:	b10a      	cbz	r2, 800e322 <_vfiprintf_r+0x86>
 800e31e:	2a25      	cmp	r2, #37	@ 0x25
 800e320:	d1f9      	bne.n	800e316 <_vfiprintf_r+0x7a>
 800e322:	ebba 0b04 	subs.w	fp, sl, r4
 800e326:	d00b      	beq.n	800e340 <_vfiprintf_r+0xa4>
 800e328:	465b      	mov	r3, fp
 800e32a:	4622      	mov	r2, r4
 800e32c:	4629      	mov	r1, r5
 800e32e:	4630      	mov	r0, r6
 800e330:	f7ff ffa1 	bl	800e276 <__sfputs_r>
 800e334:	3001      	adds	r0, #1
 800e336:	f000 80a7 	beq.w	800e488 <_vfiprintf_r+0x1ec>
 800e33a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e33c:	445a      	add	r2, fp
 800e33e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e340:	f89a 3000 	ldrb.w	r3, [sl]
 800e344:	2b00      	cmp	r3, #0
 800e346:	f000 809f 	beq.w	800e488 <_vfiprintf_r+0x1ec>
 800e34a:	2300      	movs	r3, #0
 800e34c:	f04f 32ff 	mov.w	r2, #4294967295
 800e350:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e354:	f10a 0a01 	add.w	sl, sl, #1
 800e358:	9304      	str	r3, [sp, #16]
 800e35a:	9307      	str	r3, [sp, #28]
 800e35c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e360:	931a      	str	r3, [sp, #104]	@ 0x68
 800e362:	4654      	mov	r4, sl
 800e364:	2205      	movs	r2, #5
 800e366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e36a:	4853      	ldr	r0, [pc, #332]	@ (800e4b8 <_vfiprintf_r+0x21c>)
 800e36c:	f7f1 ff30 	bl	80001d0 <memchr>
 800e370:	9a04      	ldr	r2, [sp, #16]
 800e372:	b9d8      	cbnz	r0, 800e3ac <_vfiprintf_r+0x110>
 800e374:	06d1      	lsls	r1, r2, #27
 800e376:	bf44      	itt	mi
 800e378:	2320      	movmi	r3, #32
 800e37a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e37e:	0713      	lsls	r3, r2, #28
 800e380:	bf44      	itt	mi
 800e382:	232b      	movmi	r3, #43	@ 0x2b
 800e384:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e388:	f89a 3000 	ldrb.w	r3, [sl]
 800e38c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e38e:	d015      	beq.n	800e3bc <_vfiprintf_r+0x120>
 800e390:	9a07      	ldr	r2, [sp, #28]
 800e392:	4654      	mov	r4, sl
 800e394:	2000      	movs	r0, #0
 800e396:	f04f 0c0a 	mov.w	ip, #10
 800e39a:	4621      	mov	r1, r4
 800e39c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3a0:	3b30      	subs	r3, #48	@ 0x30
 800e3a2:	2b09      	cmp	r3, #9
 800e3a4:	d94b      	bls.n	800e43e <_vfiprintf_r+0x1a2>
 800e3a6:	b1b0      	cbz	r0, 800e3d6 <_vfiprintf_r+0x13a>
 800e3a8:	9207      	str	r2, [sp, #28]
 800e3aa:	e014      	b.n	800e3d6 <_vfiprintf_r+0x13a>
 800e3ac:	eba0 0308 	sub.w	r3, r0, r8
 800e3b0:	fa09 f303 	lsl.w	r3, r9, r3
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	9304      	str	r3, [sp, #16]
 800e3b8:	46a2      	mov	sl, r4
 800e3ba:	e7d2      	b.n	800e362 <_vfiprintf_r+0xc6>
 800e3bc:	9b03      	ldr	r3, [sp, #12]
 800e3be:	1d19      	adds	r1, r3, #4
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	9103      	str	r1, [sp, #12]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	bfbb      	ittet	lt
 800e3c8:	425b      	neglt	r3, r3
 800e3ca:	f042 0202 	orrlt.w	r2, r2, #2
 800e3ce:	9307      	strge	r3, [sp, #28]
 800e3d0:	9307      	strlt	r3, [sp, #28]
 800e3d2:	bfb8      	it	lt
 800e3d4:	9204      	strlt	r2, [sp, #16]
 800e3d6:	7823      	ldrb	r3, [r4, #0]
 800e3d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e3da:	d10a      	bne.n	800e3f2 <_vfiprintf_r+0x156>
 800e3dc:	7863      	ldrb	r3, [r4, #1]
 800e3de:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3e0:	d132      	bne.n	800e448 <_vfiprintf_r+0x1ac>
 800e3e2:	9b03      	ldr	r3, [sp, #12]
 800e3e4:	1d1a      	adds	r2, r3, #4
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	9203      	str	r2, [sp, #12]
 800e3ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e3ee:	3402      	adds	r4, #2
 800e3f0:	9305      	str	r3, [sp, #20]
 800e3f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e4c8 <_vfiprintf_r+0x22c>
 800e3f6:	7821      	ldrb	r1, [r4, #0]
 800e3f8:	2203      	movs	r2, #3
 800e3fa:	4650      	mov	r0, sl
 800e3fc:	f7f1 fee8 	bl	80001d0 <memchr>
 800e400:	b138      	cbz	r0, 800e412 <_vfiprintf_r+0x176>
 800e402:	9b04      	ldr	r3, [sp, #16]
 800e404:	eba0 000a 	sub.w	r0, r0, sl
 800e408:	2240      	movs	r2, #64	@ 0x40
 800e40a:	4082      	lsls	r2, r0
 800e40c:	4313      	orrs	r3, r2
 800e40e:	3401      	adds	r4, #1
 800e410:	9304      	str	r3, [sp, #16]
 800e412:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e416:	4829      	ldr	r0, [pc, #164]	@ (800e4bc <_vfiprintf_r+0x220>)
 800e418:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e41c:	2206      	movs	r2, #6
 800e41e:	f7f1 fed7 	bl	80001d0 <memchr>
 800e422:	2800      	cmp	r0, #0
 800e424:	d03f      	beq.n	800e4a6 <_vfiprintf_r+0x20a>
 800e426:	4b26      	ldr	r3, [pc, #152]	@ (800e4c0 <_vfiprintf_r+0x224>)
 800e428:	bb1b      	cbnz	r3, 800e472 <_vfiprintf_r+0x1d6>
 800e42a:	9b03      	ldr	r3, [sp, #12]
 800e42c:	3307      	adds	r3, #7
 800e42e:	f023 0307 	bic.w	r3, r3, #7
 800e432:	3308      	adds	r3, #8
 800e434:	9303      	str	r3, [sp, #12]
 800e436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e438:	443b      	add	r3, r7
 800e43a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e43c:	e76a      	b.n	800e314 <_vfiprintf_r+0x78>
 800e43e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e442:	460c      	mov	r4, r1
 800e444:	2001      	movs	r0, #1
 800e446:	e7a8      	b.n	800e39a <_vfiprintf_r+0xfe>
 800e448:	2300      	movs	r3, #0
 800e44a:	3401      	adds	r4, #1
 800e44c:	9305      	str	r3, [sp, #20]
 800e44e:	4619      	mov	r1, r3
 800e450:	f04f 0c0a 	mov.w	ip, #10
 800e454:	4620      	mov	r0, r4
 800e456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e45a:	3a30      	subs	r2, #48	@ 0x30
 800e45c:	2a09      	cmp	r2, #9
 800e45e:	d903      	bls.n	800e468 <_vfiprintf_r+0x1cc>
 800e460:	2b00      	cmp	r3, #0
 800e462:	d0c6      	beq.n	800e3f2 <_vfiprintf_r+0x156>
 800e464:	9105      	str	r1, [sp, #20]
 800e466:	e7c4      	b.n	800e3f2 <_vfiprintf_r+0x156>
 800e468:	fb0c 2101 	mla	r1, ip, r1, r2
 800e46c:	4604      	mov	r4, r0
 800e46e:	2301      	movs	r3, #1
 800e470:	e7f0      	b.n	800e454 <_vfiprintf_r+0x1b8>
 800e472:	ab03      	add	r3, sp, #12
 800e474:	9300      	str	r3, [sp, #0]
 800e476:	462a      	mov	r2, r5
 800e478:	4b12      	ldr	r3, [pc, #72]	@ (800e4c4 <_vfiprintf_r+0x228>)
 800e47a:	a904      	add	r1, sp, #16
 800e47c:	4630      	mov	r0, r6
 800e47e:	f7fd ff63 	bl	800c348 <_printf_float>
 800e482:	4607      	mov	r7, r0
 800e484:	1c78      	adds	r0, r7, #1
 800e486:	d1d6      	bne.n	800e436 <_vfiprintf_r+0x19a>
 800e488:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e48a:	07d9      	lsls	r1, r3, #31
 800e48c:	d405      	bmi.n	800e49a <_vfiprintf_r+0x1fe>
 800e48e:	89ab      	ldrh	r3, [r5, #12]
 800e490:	059a      	lsls	r2, r3, #22
 800e492:	d402      	bmi.n	800e49a <_vfiprintf_r+0x1fe>
 800e494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e496:	f7fe fcb3 	bl	800ce00 <__retarget_lock_release_recursive>
 800e49a:	89ab      	ldrh	r3, [r5, #12]
 800e49c:	065b      	lsls	r3, r3, #25
 800e49e:	f53f af1f 	bmi.w	800e2e0 <_vfiprintf_r+0x44>
 800e4a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e4a4:	e71e      	b.n	800e2e4 <_vfiprintf_r+0x48>
 800e4a6:	ab03      	add	r3, sp, #12
 800e4a8:	9300      	str	r3, [sp, #0]
 800e4aa:	462a      	mov	r2, r5
 800e4ac:	4b05      	ldr	r3, [pc, #20]	@ (800e4c4 <_vfiprintf_r+0x228>)
 800e4ae:	a904      	add	r1, sp, #16
 800e4b0:	4630      	mov	r0, r6
 800e4b2:	f7fe f9e1 	bl	800c878 <_printf_i>
 800e4b6:	e7e4      	b.n	800e482 <_vfiprintf_r+0x1e6>
 800e4b8:	0800eb8a 	.word	0x0800eb8a
 800e4bc:	0800eb94 	.word	0x0800eb94
 800e4c0:	0800c349 	.word	0x0800c349
 800e4c4:	0800e277 	.word	0x0800e277
 800e4c8:	0800eb90 	.word	0x0800eb90

0800e4cc <__sflush_r>:
 800e4cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4d4:	0716      	lsls	r6, r2, #28
 800e4d6:	4605      	mov	r5, r0
 800e4d8:	460c      	mov	r4, r1
 800e4da:	d454      	bmi.n	800e586 <__sflush_r+0xba>
 800e4dc:	684b      	ldr	r3, [r1, #4]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	dc02      	bgt.n	800e4e8 <__sflush_r+0x1c>
 800e4e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	dd48      	ble.n	800e57a <__sflush_r+0xae>
 800e4e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e4ea:	2e00      	cmp	r6, #0
 800e4ec:	d045      	beq.n	800e57a <__sflush_r+0xae>
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e4f4:	682f      	ldr	r7, [r5, #0]
 800e4f6:	6a21      	ldr	r1, [r4, #32]
 800e4f8:	602b      	str	r3, [r5, #0]
 800e4fa:	d030      	beq.n	800e55e <__sflush_r+0x92>
 800e4fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e4fe:	89a3      	ldrh	r3, [r4, #12]
 800e500:	0759      	lsls	r1, r3, #29
 800e502:	d505      	bpl.n	800e510 <__sflush_r+0x44>
 800e504:	6863      	ldr	r3, [r4, #4]
 800e506:	1ad2      	subs	r2, r2, r3
 800e508:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e50a:	b10b      	cbz	r3, 800e510 <__sflush_r+0x44>
 800e50c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e50e:	1ad2      	subs	r2, r2, r3
 800e510:	2300      	movs	r3, #0
 800e512:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e514:	6a21      	ldr	r1, [r4, #32]
 800e516:	4628      	mov	r0, r5
 800e518:	47b0      	blx	r6
 800e51a:	1c43      	adds	r3, r0, #1
 800e51c:	89a3      	ldrh	r3, [r4, #12]
 800e51e:	d106      	bne.n	800e52e <__sflush_r+0x62>
 800e520:	6829      	ldr	r1, [r5, #0]
 800e522:	291d      	cmp	r1, #29
 800e524:	d82b      	bhi.n	800e57e <__sflush_r+0xb2>
 800e526:	4a2a      	ldr	r2, [pc, #168]	@ (800e5d0 <__sflush_r+0x104>)
 800e528:	40ca      	lsrs	r2, r1
 800e52a:	07d6      	lsls	r6, r2, #31
 800e52c:	d527      	bpl.n	800e57e <__sflush_r+0xb2>
 800e52e:	2200      	movs	r2, #0
 800e530:	6062      	str	r2, [r4, #4]
 800e532:	04d9      	lsls	r1, r3, #19
 800e534:	6922      	ldr	r2, [r4, #16]
 800e536:	6022      	str	r2, [r4, #0]
 800e538:	d504      	bpl.n	800e544 <__sflush_r+0x78>
 800e53a:	1c42      	adds	r2, r0, #1
 800e53c:	d101      	bne.n	800e542 <__sflush_r+0x76>
 800e53e:	682b      	ldr	r3, [r5, #0]
 800e540:	b903      	cbnz	r3, 800e544 <__sflush_r+0x78>
 800e542:	6560      	str	r0, [r4, #84]	@ 0x54
 800e544:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e546:	602f      	str	r7, [r5, #0]
 800e548:	b1b9      	cbz	r1, 800e57a <__sflush_r+0xae>
 800e54a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e54e:	4299      	cmp	r1, r3
 800e550:	d002      	beq.n	800e558 <__sflush_r+0x8c>
 800e552:	4628      	mov	r0, r5
 800e554:	f7ff fab4 	bl	800dac0 <_free_r>
 800e558:	2300      	movs	r3, #0
 800e55a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e55c:	e00d      	b.n	800e57a <__sflush_r+0xae>
 800e55e:	2301      	movs	r3, #1
 800e560:	4628      	mov	r0, r5
 800e562:	47b0      	blx	r6
 800e564:	4602      	mov	r2, r0
 800e566:	1c50      	adds	r0, r2, #1
 800e568:	d1c9      	bne.n	800e4fe <__sflush_r+0x32>
 800e56a:	682b      	ldr	r3, [r5, #0]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d0c6      	beq.n	800e4fe <__sflush_r+0x32>
 800e570:	2b1d      	cmp	r3, #29
 800e572:	d001      	beq.n	800e578 <__sflush_r+0xac>
 800e574:	2b16      	cmp	r3, #22
 800e576:	d11e      	bne.n	800e5b6 <__sflush_r+0xea>
 800e578:	602f      	str	r7, [r5, #0]
 800e57a:	2000      	movs	r0, #0
 800e57c:	e022      	b.n	800e5c4 <__sflush_r+0xf8>
 800e57e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e582:	b21b      	sxth	r3, r3
 800e584:	e01b      	b.n	800e5be <__sflush_r+0xf2>
 800e586:	690f      	ldr	r7, [r1, #16]
 800e588:	2f00      	cmp	r7, #0
 800e58a:	d0f6      	beq.n	800e57a <__sflush_r+0xae>
 800e58c:	0793      	lsls	r3, r2, #30
 800e58e:	680e      	ldr	r6, [r1, #0]
 800e590:	bf08      	it	eq
 800e592:	694b      	ldreq	r3, [r1, #20]
 800e594:	600f      	str	r7, [r1, #0]
 800e596:	bf18      	it	ne
 800e598:	2300      	movne	r3, #0
 800e59a:	eba6 0807 	sub.w	r8, r6, r7
 800e59e:	608b      	str	r3, [r1, #8]
 800e5a0:	f1b8 0f00 	cmp.w	r8, #0
 800e5a4:	dde9      	ble.n	800e57a <__sflush_r+0xae>
 800e5a6:	6a21      	ldr	r1, [r4, #32]
 800e5a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e5aa:	4643      	mov	r3, r8
 800e5ac:	463a      	mov	r2, r7
 800e5ae:	4628      	mov	r0, r5
 800e5b0:	47b0      	blx	r6
 800e5b2:	2800      	cmp	r0, #0
 800e5b4:	dc08      	bgt.n	800e5c8 <__sflush_r+0xfc>
 800e5b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5be:	81a3      	strh	r3, [r4, #12]
 800e5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5c8:	4407      	add	r7, r0
 800e5ca:	eba8 0800 	sub.w	r8, r8, r0
 800e5ce:	e7e7      	b.n	800e5a0 <__sflush_r+0xd4>
 800e5d0:	20400001 	.word	0x20400001

0800e5d4 <_fflush_r>:
 800e5d4:	b538      	push	{r3, r4, r5, lr}
 800e5d6:	690b      	ldr	r3, [r1, #16]
 800e5d8:	4605      	mov	r5, r0
 800e5da:	460c      	mov	r4, r1
 800e5dc:	b913      	cbnz	r3, 800e5e4 <_fflush_r+0x10>
 800e5de:	2500      	movs	r5, #0
 800e5e0:	4628      	mov	r0, r5
 800e5e2:	bd38      	pop	{r3, r4, r5, pc}
 800e5e4:	b118      	cbz	r0, 800e5ee <_fflush_r+0x1a>
 800e5e6:	6a03      	ldr	r3, [r0, #32]
 800e5e8:	b90b      	cbnz	r3, 800e5ee <_fflush_r+0x1a>
 800e5ea:	f7fe faef 	bl	800cbcc <__sinit>
 800e5ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d0f3      	beq.n	800e5de <_fflush_r+0xa>
 800e5f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e5f8:	07d0      	lsls	r0, r2, #31
 800e5fa:	d404      	bmi.n	800e606 <_fflush_r+0x32>
 800e5fc:	0599      	lsls	r1, r3, #22
 800e5fe:	d402      	bmi.n	800e606 <_fflush_r+0x32>
 800e600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e602:	f7fe fbfc 	bl	800cdfe <__retarget_lock_acquire_recursive>
 800e606:	4628      	mov	r0, r5
 800e608:	4621      	mov	r1, r4
 800e60a:	f7ff ff5f 	bl	800e4cc <__sflush_r>
 800e60e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e610:	07da      	lsls	r2, r3, #31
 800e612:	4605      	mov	r5, r0
 800e614:	d4e4      	bmi.n	800e5e0 <_fflush_r+0xc>
 800e616:	89a3      	ldrh	r3, [r4, #12]
 800e618:	059b      	lsls	r3, r3, #22
 800e61a:	d4e1      	bmi.n	800e5e0 <_fflush_r+0xc>
 800e61c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e61e:	f7fe fbef 	bl	800ce00 <__retarget_lock_release_recursive>
 800e622:	e7dd      	b.n	800e5e0 <_fflush_r+0xc>

0800e624 <__swbuf_r>:
 800e624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e626:	460e      	mov	r6, r1
 800e628:	4614      	mov	r4, r2
 800e62a:	4605      	mov	r5, r0
 800e62c:	b118      	cbz	r0, 800e636 <__swbuf_r+0x12>
 800e62e:	6a03      	ldr	r3, [r0, #32]
 800e630:	b90b      	cbnz	r3, 800e636 <__swbuf_r+0x12>
 800e632:	f7fe facb 	bl	800cbcc <__sinit>
 800e636:	69a3      	ldr	r3, [r4, #24]
 800e638:	60a3      	str	r3, [r4, #8]
 800e63a:	89a3      	ldrh	r3, [r4, #12]
 800e63c:	071a      	lsls	r2, r3, #28
 800e63e:	d501      	bpl.n	800e644 <__swbuf_r+0x20>
 800e640:	6923      	ldr	r3, [r4, #16]
 800e642:	b943      	cbnz	r3, 800e656 <__swbuf_r+0x32>
 800e644:	4621      	mov	r1, r4
 800e646:	4628      	mov	r0, r5
 800e648:	f000 f82a 	bl	800e6a0 <__swsetup_r>
 800e64c:	b118      	cbz	r0, 800e656 <__swbuf_r+0x32>
 800e64e:	f04f 37ff 	mov.w	r7, #4294967295
 800e652:	4638      	mov	r0, r7
 800e654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e656:	6823      	ldr	r3, [r4, #0]
 800e658:	6922      	ldr	r2, [r4, #16]
 800e65a:	1a98      	subs	r0, r3, r2
 800e65c:	6963      	ldr	r3, [r4, #20]
 800e65e:	b2f6      	uxtb	r6, r6
 800e660:	4283      	cmp	r3, r0
 800e662:	4637      	mov	r7, r6
 800e664:	dc05      	bgt.n	800e672 <__swbuf_r+0x4e>
 800e666:	4621      	mov	r1, r4
 800e668:	4628      	mov	r0, r5
 800e66a:	f7ff ffb3 	bl	800e5d4 <_fflush_r>
 800e66e:	2800      	cmp	r0, #0
 800e670:	d1ed      	bne.n	800e64e <__swbuf_r+0x2a>
 800e672:	68a3      	ldr	r3, [r4, #8]
 800e674:	3b01      	subs	r3, #1
 800e676:	60a3      	str	r3, [r4, #8]
 800e678:	6823      	ldr	r3, [r4, #0]
 800e67a:	1c5a      	adds	r2, r3, #1
 800e67c:	6022      	str	r2, [r4, #0]
 800e67e:	701e      	strb	r6, [r3, #0]
 800e680:	6962      	ldr	r2, [r4, #20]
 800e682:	1c43      	adds	r3, r0, #1
 800e684:	429a      	cmp	r2, r3
 800e686:	d004      	beq.n	800e692 <__swbuf_r+0x6e>
 800e688:	89a3      	ldrh	r3, [r4, #12]
 800e68a:	07db      	lsls	r3, r3, #31
 800e68c:	d5e1      	bpl.n	800e652 <__swbuf_r+0x2e>
 800e68e:	2e0a      	cmp	r6, #10
 800e690:	d1df      	bne.n	800e652 <__swbuf_r+0x2e>
 800e692:	4621      	mov	r1, r4
 800e694:	4628      	mov	r0, r5
 800e696:	f7ff ff9d 	bl	800e5d4 <_fflush_r>
 800e69a:	2800      	cmp	r0, #0
 800e69c:	d0d9      	beq.n	800e652 <__swbuf_r+0x2e>
 800e69e:	e7d6      	b.n	800e64e <__swbuf_r+0x2a>

0800e6a0 <__swsetup_r>:
 800e6a0:	b538      	push	{r3, r4, r5, lr}
 800e6a2:	4b29      	ldr	r3, [pc, #164]	@ (800e748 <__swsetup_r+0xa8>)
 800e6a4:	4605      	mov	r5, r0
 800e6a6:	6818      	ldr	r0, [r3, #0]
 800e6a8:	460c      	mov	r4, r1
 800e6aa:	b118      	cbz	r0, 800e6b4 <__swsetup_r+0x14>
 800e6ac:	6a03      	ldr	r3, [r0, #32]
 800e6ae:	b90b      	cbnz	r3, 800e6b4 <__swsetup_r+0x14>
 800e6b0:	f7fe fa8c 	bl	800cbcc <__sinit>
 800e6b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6b8:	0719      	lsls	r1, r3, #28
 800e6ba:	d422      	bmi.n	800e702 <__swsetup_r+0x62>
 800e6bc:	06da      	lsls	r2, r3, #27
 800e6be:	d407      	bmi.n	800e6d0 <__swsetup_r+0x30>
 800e6c0:	2209      	movs	r2, #9
 800e6c2:	602a      	str	r2, [r5, #0]
 800e6c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6c8:	81a3      	strh	r3, [r4, #12]
 800e6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ce:	e033      	b.n	800e738 <__swsetup_r+0x98>
 800e6d0:	0758      	lsls	r0, r3, #29
 800e6d2:	d512      	bpl.n	800e6fa <__swsetup_r+0x5a>
 800e6d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e6d6:	b141      	cbz	r1, 800e6ea <__swsetup_r+0x4a>
 800e6d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6dc:	4299      	cmp	r1, r3
 800e6de:	d002      	beq.n	800e6e6 <__swsetup_r+0x46>
 800e6e0:	4628      	mov	r0, r5
 800e6e2:	f7ff f9ed 	bl	800dac0 <_free_r>
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6ea:	89a3      	ldrh	r3, [r4, #12]
 800e6ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e6f0:	81a3      	strh	r3, [r4, #12]
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	6063      	str	r3, [r4, #4]
 800e6f6:	6923      	ldr	r3, [r4, #16]
 800e6f8:	6023      	str	r3, [r4, #0]
 800e6fa:	89a3      	ldrh	r3, [r4, #12]
 800e6fc:	f043 0308 	orr.w	r3, r3, #8
 800e700:	81a3      	strh	r3, [r4, #12]
 800e702:	6923      	ldr	r3, [r4, #16]
 800e704:	b94b      	cbnz	r3, 800e71a <__swsetup_r+0x7a>
 800e706:	89a3      	ldrh	r3, [r4, #12]
 800e708:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e70c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e710:	d003      	beq.n	800e71a <__swsetup_r+0x7a>
 800e712:	4621      	mov	r1, r4
 800e714:	4628      	mov	r0, r5
 800e716:	f000 f8c4 	bl	800e8a2 <__smakebuf_r>
 800e71a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e71e:	f013 0201 	ands.w	r2, r3, #1
 800e722:	d00a      	beq.n	800e73a <__swsetup_r+0x9a>
 800e724:	2200      	movs	r2, #0
 800e726:	60a2      	str	r2, [r4, #8]
 800e728:	6962      	ldr	r2, [r4, #20]
 800e72a:	4252      	negs	r2, r2
 800e72c:	61a2      	str	r2, [r4, #24]
 800e72e:	6922      	ldr	r2, [r4, #16]
 800e730:	b942      	cbnz	r2, 800e744 <__swsetup_r+0xa4>
 800e732:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e736:	d1c5      	bne.n	800e6c4 <__swsetup_r+0x24>
 800e738:	bd38      	pop	{r3, r4, r5, pc}
 800e73a:	0799      	lsls	r1, r3, #30
 800e73c:	bf58      	it	pl
 800e73e:	6962      	ldrpl	r2, [r4, #20]
 800e740:	60a2      	str	r2, [r4, #8]
 800e742:	e7f4      	b.n	800e72e <__swsetup_r+0x8e>
 800e744:	2000      	movs	r0, #0
 800e746:	e7f7      	b.n	800e738 <__swsetup_r+0x98>
 800e748:	20000108 	.word	0x20000108

0800e74c <_raise_r>:
 800e74c:	291f      	cmp	r1, #31
 800e74e:	b538      	push	{r3, r4, r5, lr}
 800e750:	4605      	mov	r5, r0
 800e752:	460c      	mov	r4, r1
 800e754:	d904      	bls.n	800e760 <_raise_r+0x14>
 800e756:	2316      	movs	r3, #22
 800e758:	6003      	str	r3, [r0, #0]
 800e75a:	f04f 30ff 	mov.w	r0, #4294967295
 800e75e:	bd38      	pop	{r3, r4, r5, pc}
 800e760:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e762:	b112      	cbz	r2, 800e76a <_raise_r+0x1e>
 800e764:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e768:	b94b      	cbnz	r3, 800e77e <_raise_r+0x32>
 800e76a:	4628      	mov	r0, r5
 800e76c:	f000 f830 	bl	800e7d0 <_getpid_r>
 800e770:	4622      	mov	r2, r4
 800e772:	4601      	mov	r1, r0
 800e774:	4628      	mov	r0, r5
 800e776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e77a:	f000 b817 	b.w	800e7ac <_kill_r>
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d00a      	beq.n	800e798 <_raise_r+0x4c>
 800e782:	1c59      	adds	r1, r3, #1
 800e784:	d103      	bne.n	800e78e <_raise_r+0x42>
 800e786:	2316      	movs	r3, #22
 800e788:	6003      	str	r3, [r0, #0]
 800e78a:	2001      	movs	r0, #1
 800e78c:	e7e7      	b.n	800e75e <_raise_r+0x12>
 800e78e:	2100      	movs	r1, #0
 800e790:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e794:	4620      	mov	r0, r4
 800e796:	4798      	blx	r3
 800e798:	2000      	movs	r0, #0
 800e79a:	e7e0      	b.n	800e75e <_raise_r+0x12>

0800e79c <raise>:
 800e79c:	4b02      	ldr	r3, [pc, #8]	@ (800e7a8 <raise+0xc>)
 800e79e:	4601      	mov	r1, r0
 800e7a0:	6818      	ldr	r0, [r3, #0]
 800e7a2:	f7ff bfd3 	b.w	800e74c <_raise_r>
 800e7a6:	bf00      	nop
 800e7a8:	20000108 	.word	0x20000108

0800e7ac <_kill_r>:
 800e7ac:	b538      	push	{r3, r4, r5, lr}
 800e7ae:	4d07      	ldr	r5, [pc, #28]	@ (800e7cc <_kill_r+0x20>)
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	4604      	mov	r4, r0
 800e7b4:	4608      	mov	r0, r1
 800e7b6:	4611      	mov	r1, r2
 800e7b8:	602b      	str	r3, [r5, #0]
 800e7ba:	f7f5 f97d 	bl	8003ab8 <_kill>
 800e7be:	1c43      	adds	r3, r0, #1
 800e7c0:	d102      	bne.n	800e7c8 <_kill_r+0x1c>
 800e7c2:	682b      	ldr	r3, [r5, #0]
 800e7c4:	b103      	cbz	r3, 800e7c8 <_kill_r+0x1c>
 800e7c6:	6023      	str	r3, [r4, #0]
 800e7c8:	bd38      	pop	{r3, r4, r5, pc}
 800e7ca:	bf00      	nop
 800e7cc:	200022bc 	.word	0x200022bc

0800e7d0 <_getpid_r>:
 800e7d0:	f7f5 b96a 	b.w	8003aa8 <_getpid>

0800e7d4 <memcpy>:
 800e7d4:	440a      	add	r2, r1
 800e7d6:	4291      	cmp	r1, r2
 800e7d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e7dc:	d100      	bne.n	800e7e0 <memcpy+0xc>
 800e7de:	4770      	bx	lr
 800e7e0:	b510      	push	{r4, lr}
 800e7e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7ea:	4291      	cmp	r1, r2
 800e7ec:	d1f9      	bne.n	800e7e2 <memcpy+0xe>
 800e7ee:	bd10      	pop	{r4, pc}

0800e7f0 <_calloc_r>:
 800e7f0:	b570      	push	{r4, r5, r6, lr}
 800e7f2:	fba1 5402 	umull	r5, r4, r1, r2
 800e7f6:	b934      	cbnz	r4, 800e806 <_calloc_r+0x16>
 800e7f8:	4629      	mov	r1, r5
 800e7fa:	f7fd fc79 	bl	800c0f0 <_malloc_r>
 800e7fe:	4606      	mov	r6, r0
 800e800:	b928      	cbnz	r0, 800e80e <_calloc_r+0x1e>
 800e802:	4630      	mov	r0, r6
 800e804:	bd70      	pop	{r4, r5, r6, pc}
 800e806:	220c      	movs	r2, #12
 800e808:	6002      	str	r2, [r0, #0]
 800e80a:	2600      	movs	r6, #0
 800e80c:	e7f9      	b.n	800e802 <_calloc_r+0x12>
 800e80e:	462a      	mov	r2, r5
 800e810:	4621      	mov	r1, r4
 800e812:	f7fe fa66 	bl	800cce2 <memset>
 800e816:	e7f4      	b.n	800e802 <_calloc_r+0x12>

0800e818 <__ascii_mbtowc>:
 800e818:	b082      	sub	sp, #8
 800e81a:	b901      	cbnz	r1, 800e81e <__ascii_mbtowc+0x6>
 800e81c:	a901      	add	r1, sp, #4
 800e81e:	b142      	cbz	r2, 800e832 <__ascii_mbtowc+0x1a>
 800e820:	b14b      	cbz	r3, 800e836 <__ascii_mbtowc+0x1e>
 800e822:	7813      	ldrb	r3, [r2, #0]
 800e824:	600b      	str	r3, [r1, #0]
 800e826:	7812      	ldrb	r2, [r2, #0]
 800e828:	1e10      	subs	r0, r2, #0
 800e82a:	bf18      	it	ne
 800e82c:	2001      	movne	r0, #1
 800e82e:	b002      	add	sp, #8
 800e830:	4770      	bx	lr
 800e832:	4610      	mov	r0, r2
 800e834:	e7fb      	b.n	800e82e <__ascii_mbtowc+0x16>
 800e836:	f06f 0001 	mvn.w	r0, #1
 800e83a:	e7f8      	b.n	800e82e <__ascii_mbtowc+0x16>

0800e83c <__ascii_wctomb>:
 800e83c:	4603      	mov	r3, r0
 800e83e:	4608      	mov	r0, r1
 800e840:	b141      	cbz	r1, 800e854 <__ascii_wctomb+0x18>
 800e842:	2aff      	cmp	r2, #255	@ 0xff
 800e844:	d904      	bls.n	800e850 <__ascii_wctomb+0x14>
 800e846:	228a      	movs	r2, #138	@ 0x8a
 800e848:	601a      	str	r2, [r3, #0]
 800e84a:	f04f 30ff 	mov.w	r0, #4294967295
 800e84e:	4770      	bx	lr
 800e850:	700a      	strb	r2, [r1, #0]
 800e852:	2001      	movs	r0, #1
 800e854:	4770      	bx	lr

0800e856 <__swhatbuf_r>:
 800e856:	b570      	push	{r4, r5, r6, lr}
 800e858:	460c      	mov	r4, r1
 800e85a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e85e:	2900      	cmp	r1, #0
 800e860:	b096      	sub	sp, #88	@ 0x58
 800e862:	4615      	mov	r5, r2
 800e864:	461e      	mov	r6, r3
 800e866:	da0d      	bge.n	800e884 <__swhatbuf_r+0x2e>
 800e868:	89a3      	ldrh	r3, [r4, #12]
 800e86a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e86e:	f04f 0100 	mov.w	r1, #0
 800e872:	bf14      	ite	ne
 800e874:	2340      	movne	r3, #64	@ 0x40
 800e876:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e87a:	2000      	movs	r0, #0
 800e87c:	6031      	str	r1, [r6, #0]
 800e87e:	602b      	str	r3, [r5, #0]
 800e880:	b016      	add	sp, #88	@ 0x58
 800e882:	bd70      	pop	{r4, r5, r6, pc}
 800e884:	466a      	mov	r2, sp
 800e886:	f000 f849 	bl	800e91c <_fstat_r>
 800e88a:	2800      	cmp	r0, #0
 800e88c:	dbec      	blt.n	800e868 <__swhatbuf_r+0x12>
 800e88e:	9901      	ldr	r1, [sp, #4]
 800e890:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e894:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e898:	4259      	negs	r1, r3
 800e89a:	4159      	adcs	r1, r3
 800e89c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e8a0:	e7eb      	b.n	800e87a <__swhatbuf_r+0x24>

0800e8a2 <__smakebuf_r>:
 800e8a2:	898b      	ldrh	r3, [r1, #12]
 800e8a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e8a6:	079d      	lsls	r5, r3, #30
 800e8a8:	4606      	mov	r6, r0
 800e8aa:	460c      	mov	r4, r1
 800e8ac:	d507      	bpl.n	800e8be <__smakebuf_r+0x1c>
 800e8ae:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e8b2:	6023      	str	r3, [r4, #0]
 800e8b4:	6123      	str	r3, [r4, #16]
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	6163      	str	r3, [r4, #20]
 800e8ba:	b003      	add	sp, #12
 800e8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8be:	ab01      	add	r3, sp, #4
 800e8c0:	466a      	mov	r2, sp
 800e8c2:	f7ff ffc8 	bl	800e856 <__swhatbuf_r>
 800e8c6:	9f00      	ldr	r7, [sp, #0]
 800e8c8:	4605      	mov	r5, r0
 800e8ca:	4639      	mov	r1, r7
 800e8cc:	4630      	mov	r0, r6
 800e8ce:	f7fd fc0f 	bl	800c0f0 <_malloc_r>
 800e8d2:	b948      	cbnz	r0, 800e8e8 <__smakebuf_r+0x46>
 800e8d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8d8:	059a      	lsls	r2, r3, #22
 800e8da:	d4ee      	bmi.n	800e8ba <__smakebuf_r+0x18>
 800e8dc:	f023 0303 	bic.w	r3, r3, #3
 800e8e0:	f043 0302 	orr.w	r3, r3, #2
 800e8e4:	81a3      	strh	r3, [r4, #12]
 800e8e6:	e7e2      	b.n	800e8ae <__smakebuf_r+0xc>
 800e8e8:	89a3      	ldrh	r3, [r4, #12]
 800e8ea:	6020      	str	r0, [r4, #0]
 800e8ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8f0:	81a3      	strh	r3, [r4, #12]
 800e8f2:	9b01      	ldr	r3, [sp, #4]
 800e8f4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e8f8:	b15b      	cbz	r3, 800e912 <__smakebuf_r+0x70>
 800e8fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8fe:	4630      	mov	r0, r6
 800e900:	f000 f81e 	bl	800e940 <_isatty_r>
 800e904:	b128      	cbz	r0, 800e912 <__smakebuf_r+0x70>
 800e906:	89a3      	ldrh	r3, [r4, #12]
 800e908:	f023 0303 	bic.w	r3, r3, #3
 800e90c:	f043 0301 	orr.w	r3, r3, #1
 800e910:	81a3      	strh	r3, [r4, #12]
 800e912:	89a3      	ldrh	r3, [r4, #12]
 800e914:	431d      	orrs	r5, r3
 800e916:	81a5      	strh	r5, [r4, #12]
 800e918:	e7cf      	b.n	800e8ba <__smakebuf_r+0x18>
	...

0800e91c <_fstat_r>:
 800e91c:	b538      	push	{r3, r4, r5, lr}
 800e91e:	4d07      	ldr	r5, [pc, #28]	@ (800e93c <_fstat_r+0x20>)
 800e920:	2300      	movs	r3, #0
 800e922:	4604      	mov	r4, r0
 800e924:	4608      	mov	r0, r1
 800e926:	4611      	mov	r1, r2
 800e928:	602b      	str	r3, [r5, #0]
 800e92a:	f7f5 f909 	bl	8003b40 <_fstat>
 800e92e:	1c43      	adds	r3, r0, #1
 800e930:	d102      	bne.n	800e938 <_fstat_r+0x1c>
 800e932:	682b      	ldr	r3, [r5, #0]
 800e934:	b103      	cbz	r3, 800e938 <_fstat_r+0x1c>
 800e936:	6023      	str	r3, [r4, #0]
 800e938:	bd38      	pop	{r3, r4, r5, pc}
 800e93a:	bf00      	nop
 800e93c:	200022bc 	.word	0x200022bc

0800e940 <_isatty_r>:
 800e940:	b538      	push	{r3, r4, r5, lr}
 800e942:	4d06      	ldr	r5, [pc, #24]	@ (800e95c <_isatty_r+0x1c>)
 800e944:	2300      	movs	r3, #0
 800e946:	4604      	mov	r4, r0
 800e948:	4608      	mov	r0, r1
 800e94a:	602b      	str	r3, [r5, #0]
 800e94c:	f7f5 f908 	bl	8003b60 <_isatty>
 800e950:	1c43      	adds	r3, r0, #1
 800e952:	d102      	bne.n	800e95a <_isatty_r+0x1a>
 800e954:	682b      	ldr	r3, [r5, #0]
 800e956:	b103      	cbz	r3, 800e95a <_isatty_r+0x1a>
 800e958:	6023      	str	r3, [r4, #0]
 800e95a:	bd38      	pop	{r3, r4, r5, pc}
 800e95c:	200022bc 	.word	0x200022bc

0800e960 <_init>:
 800e960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e962:	bf00      	nop
 800e964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e966:	bc08      	pop	{r3}
 800e968:	469e      	mov	lr, r3
 800e96a:	4770      	bx	lr

0800e96c <_fini>:
 800e96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e96e:	bf00      	nop
 800e970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e972:	bc08      	pop	{r3}
 800e974:	469e      	mov	lr, r3
 800e976:	4770      	bx	lr
